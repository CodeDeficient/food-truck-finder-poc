{
  "timestamp": "2025-06-24T18:59:15.558Z",
  "totalErrors": 243,
  "errorCounts": {
    "unicorn/no-null": 14,
    "@typescript-eslint/await-thenable": 2,
    "sonarjs/no-invalid-await": 2,
    "@typescript-eslint/require-await": 3,
    "sonarjs/different-types-comparison": 6,
    "@typescript-eslint/strict-boolean-expressions": 47,
    "@typescript-eslint/no-unsafe-assignment": 27,
    "@typescript-eslint/no-unsafe-member-access": 14,
    "sonarjs/unused-import": 15,
    "max-lines-per-function": 33,
    "unicorn/consistent-function-scoping": 1,
    "@typescript-eslint/no-unsafe-argument": 14,
    "@typescript-eslint/no-unsafe-call": 3,
    "@typescript-eslint/no-unsafe-return": 4,
    "sonarjs/no-redundant-optional": 3,
    "sonarjs/prefer-read-only-props": 2,
    "max-params": 10,
    "sonarjs/deprecation": 10,
    "sonarjs/no-unused-vars": 4,
    "sonarjs/no-dead-store": 4,
    "@typescript-eslint/no-redundant-type-constituents": 1,
    "sonarjs/pseudo-random": 3,
    "@typescript-eslint/no-explicit-any": 5,
    "unicorn/prefer-default-parameters": 1,
    "sonarjs/no-nested-template-literals": 1,
    "@typescript-eslint/no-misused-promises": 1,
    "unicorn/no-array-callback-reference": 1,
    "@typescript-eslint/no-base-to-string": 1,
    "@typescript-eslint/restrict-template-expressions": 1,
    "unicorn/no-negated-condition": 1,
    "prefer-const": 1,
    "sonarjs/cognitive-complexity": 4,
    "max-depth": 3,
    "sonarjs/no-identical-expressions": 1
  },
  "automationCandidates": [
    {
      "ruleId": "sonarjs/unused-import",
      "count": 15,
      "confidence": "HIGH",
      "method": "eslint-autofix",
      "description": "Remove unused imports",
      "estimatedFixes": 14,
      "priority": 42
    },
    {
      "ruleId": "unicorn/no-null",
      "count": 14,
      "confidence": "HIGH",
      "method": "pattern-replacement",
      "description": "Replace null with undefined",
      "estimatedFixes": 11,
      "priority": 33
    },
    {
      "ruleId": "@typescript-eslint/no-unsafe-assignment",
      "count": 27,
      "confidence": "MEDIUM",
      "method": "type-annotation",
      "description": "Add type annotations for unsafe assignments",
      "estimatedFixes": 8,
      "priority": 16
    },
    {
      "ruleId": "@typescript-eslint/strict-boolean-expressions",
      "count": 47,
      "confidence": "LOW",
      "method": "manual-review",
      "description": "Complex boolean expression fixes",
      "estimatedFixes": 4,
      "priority": 4
    },
    {
      "ruleId": "max-lines-per-function",
      "count": 33,
      "confidence": "MANUAL_ONLY",
      "method": "manual-ide-refactor",
      "description": "RESEARCH-PROVEN UNSAFE FOR AUTOMATION: Function extraction requires human judgment. Use VS Code Extract Method only.",
      "estimatedFixes": 0,
      "priority": null
    },
    {
      "ruleId": "@typescript-eslint/no-explicit-any",
      "count": 5,
      "confidence": "MEDIUM",
      "method": "pattern-replacement",
      "description": "Replace any with unknown in safe contexts",
      "estimatedFixes": 2,
      "priority": 4
    }
  ],
  "recommendations": {
    "highConfidence": {
      "candidates": [
        {
          "ruleId": "sonarjs/unused-import",
          "count": 15,
          "confidence": "HIGH",
          "method": "eslint-autofix",
          "description": "Remove unused imports",
          "estimatedFixes": 14,
          "priority": 42
        },
        {
          "ruleId": "unicorn/no-null",
          "count": 14,
          "confidence": "HIGH",
          "method": "pattern-replacement",
          "description": "Replace null with undefined",
          "estimatedFixes": 11,
          "priority": 33
        }
      ],
      "totalFixes": 25,
      "methods": [
        "eslint-autofix",
        "pattern-replacement"
      ]
    },
    "mediumConfidence": {
      "candidates": [
        {
          "ruleId": "@typescript-eslint/no-unsafe-assignment",
          "count": 27,
          "confidence": "MEDIUM",
          "method": "type-annotation",
          "description": "Add type annotations for unsafe assignments",
          "estimatedFixes": 8,
          "priority": 16
        },
        {
          "ruleId": "@typescript-eslint/no-explicit-any",
          "count": 5,
          "confidence": "MEDIUM",
          "method": "pattern-replacement",
          "description": "Replace any with unknown in safe contexts",
          "estimatedFixes": 2,
          "priority": 4
        }
      ],
      "totalFixes": 10,
      "methods": [
        "type-annotation",
        "pattern-replacement"
      ]
    }
  }
}