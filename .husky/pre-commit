#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# üõ°Ô∏è COMPREHENSIVE PRE-COMMIT QUALITY GATES
# Prevents systematic linting errors from being committed

echo "üõ°Ô∏è  Running pre-commit quality gates..."

# Stage 1: Lint-staged (format and fix auto-fixable issues)
echo "üßπ Stage 1: Auto-fixing and formatting..."
npx lint-staged

# Stage 2: Type Safety Check (CRITICAL - BLOCKS COMMIT)
echo "üîç Stage 2: Type safety validation..."
if ! npm run type-check; then
    echo "‚ùå COMMIT BLOCKED: TypeScript errors detected"
    echo "Fix type errors before committing"
    exit 1
fi

# Stage 3: ESLint Error Threshold (CRITICAL - BLOCKS COMMIT)
echo "üìä Stage 3: ESLint quality gate..."
ESLINT_OUTPUT=$(npx eslint . --format json 2>/dev/null || echo "[]")
ERROR_COUNT=$(echo "$ESLINT_OUTPUT" | jq '[.[] | .errorCount] | add // 0' 2>/dev/null || echo "0")

if [ "$ERROR_COUNT" -gt 10 ]; then
    echo "‚ùå COMMIT BLOCKED: $ERROR_COUNT ESLint errors (max: 10)"
    echo "Fix critical errors before committing"
    exit 1
fi

# Stage 4: Complexity Check (WARNING - ALLOWS COMMIT)
echo "üß† Stage 4: Cognitive complexity check..."
COMPLEXITY_OUTPUT=$(npx eslint . --rule "sonarjs/cognitive-complexity: [error, 15]" --format json 2>/dev/null || echo "[]")
COMPLEXITY_ERRORS=$(echo "$COMPLEXITY_OUTPUT" | jq '[.[] | .errorCount] | add // 0' 2>/dev/null || echo "0")

if [ "$COMPLEXITY_ERRORS" -gt 0 ]; then
    echo "‚ö†Ô∏è  WARNING: $COMPLEXITY_ERRORS functions exceed complexity threshold"
    echo "Consider refactoring complex functions"
    # Don't block commit, just warn
fi

echo "‚úÖ Pre-commit quality gates passed!"
echo "Errors: $ERROR_COUNT/10, Complexity violations: $COMPLEXITY_ERRORS"
