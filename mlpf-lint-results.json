[{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\access-denied\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\analytics\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\auto-scraping\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-cleanup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-quality\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":91,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":92,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":91,"column":44,"nodeType":"Identifier","messageId":"unsafeCall","endLine":91,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":93,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":93,"endColumn":80,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":93,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":95,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":95,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":95,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":108,"column":12,"nodeType":"Identifier","messageId":"unsafeCall","endLine":108,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `error` typed value.","line":114,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\events\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\[id]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OperatingHours' is defined but never used.","line":2,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":63},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'OperatingHours'.","line":2,"column":49,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":63,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[69,90],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatQualityScore' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'formatQualityScore'.","line":4,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":4,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[129,152],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TruckProps' is defined but never used.","line":24,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { FoodTruckService, type FoodTruck, type OperatingHours } from '@/lib/supabase';\r\nimport {\r\n  formatQualityScore,\r\n  categorizeQualityScore,\r\n  getQualityBadgeClasses,\r\n  type QualityCategory\r\n} from '@/lib/utils/dataQualityFormatters';\r\nimport { BasicInfoCard } from '@/components/admin/food-trucks/detail/BasicInfoCard';\r\nimport { ContactInfoCard } from '@/components/admin/food-trucks/detail/ContactInfoCard';\r\nimport { DataQualityCard } from '@/components/admin/food-trucks/detail/DataQualityCard';\r\nimport { LocationInfoCard } from '@/components/admin/food-trucks/detail/LocationInfoCard';\r\nimport { OperatingHoursCard } from '@/components/admin/food-trucks/detail/OperatingHoursCard';\r\nimport { RatingsReviewsCard } from '@/components/admin/food-trucks/detail/RatingsReviewsCard';\r\nimport { TruckDetailHeader } from '@/components/admin/food-trucks/detail/TruckDetailHeader';\r\nimport { TruckNotFound } from '@/components/admin/food-trucks/detail/TruckNotFound';\r\n\r\ninterface FoodTruckDetailPageProps {\r\n  readonly params: {\r\n    readonly id: string;\r\n  };\r\n}\r\n\r\ninterface TruckProps {\r\n  truck: FoodTruck;\r\n}\r\n\r\nexport default async function FoodTruckDetailPage({ params }: FoodTruckDetailPageProps) {\r\n  const truck = await FoodTruckService.getTruckById(params.id);\r\n\r\n  if (truck == undefined) {\r\n    return <TruckNotFound />;\r\n  }\r\n\r\n  const qualityCategory: QualityCategory = categorizeQualityScore(truck.data_quality_score);\r\n  const badgeClasses: string = getQualityBadgeClasses(truck.data_quality_score);\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-6\">\r\n      <TruckDetailHeader truck={truck} badgeClasses={badgeClasses} qualityCategory={qualityCategory} />\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <BasicInfoCard truck={truck} />\r\n        <ContactInfoCard truck={truck} />\r\n        <LocationInfoCard truck={truck} />\r\n        <OperatingHoursCard truck={truck as { operating_hours?: Record<string, { closed?: boolean; open?: string; close?: string }> }} />\r\n        <RatingsReviewsCard truck={truck as { average_rating?: number; review_count?: number }} />\r\n      </div>\r\n\r\n      <DataQualityCard truck={truck} qualityCategory={qualityCategory} />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\monitoring\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\pipeline\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScrapingJob' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":14},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'ScrapingJob'.","line":5,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":5,"endColumn":14,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[84,100],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DataProcessingQueue' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'DataProcessingQueue'.","line":6,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":6,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[100,124],"text":""},"desc":"Remove this variable import"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  ScrapingJobService,\r\n  DataProcessingService,\r\n  ScrapingJob,\r\n  DataProcessingQueue,\r\n} from '@/lib/supabase';\r\nimport { PipelineStatisticsCards } from '@/components/admin/pipeline/PipelineStatisticsCards';\r\nimport { RecentScrapingJobsTable } from '@/components/admin/pipeline/RecentScrapingJobsTable';\r\nimport { FailedProcessingQueueTable } from '@/components/admin/pipeline/FailedProcessingQueueTable';\r\n\r\nasync function getPipelineData() {\r\n  const pendingScrapingJobs = await ScrapingJobService.getJobsByStatus('pending');\r\n  const runningScrapingJobs = await ScrapingJobService.getJobsByStatus('running');\r\n  const completedScrapingJobs = await ScrapingJobService.getJobsByStatus('completed');\r\n  const failedScrapingJobs = await ScrapingJobService.getJobsByStatus('failed');\r\n\r\n  const pendingProcessingQueue = await DataProcessingService.getQueueByStatus('pending');\r\n  const processingProcessingQueue = await DataProcessingService.getQueueByStatus('processing');\r\n  const completedProcessingQueue = await DataProcessingService.getQueueByStatus('completed');\r\n  const failedProcessingQueue = await DataProcessingService.getQueueByStatus('failed');\r\n\r\n  return {\r\n    scrapingJobs: {\r\n      pending: pendingScrapingJobs,\r\n      running: runningScrapingJobs,\r\n      completed: completedScrapingJobs,\r\n      failed: failedScrapingJobs,\r\n    },\r\n    processingQueue: {\r\n      pending: pendingProcessingQueue,\r\n      processing: processingProcessingQueue,\r\n      completed: completedProcessingQueue,\r\n      failed: failedProcessingQueue,\r\n    },\r\n  };\r\n}\r\n\r\nexport default async function PipelineMonitoringPage() {\r\n  const { scrapingJobs, processingQueue } = await getPipelineData();\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <h1 className=\"text-2xl font-bold\">Pipeline Monitoring</h1>\r\n\r\n      <PipelineStatisticsCards scrapingJobs={scrapingJobs} processingQueue={processingQueue} />\r\n\r\n      <RecentScrapingJobsTable scrapingJobs={scrapingJobs} />\r\n\r\n      <FailedProcessingQueueTable processingQueue={processingQueue} />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\test-pipeline\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":44,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":16},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Button'.","line":44,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":44,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[2464,2514],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":45,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":15},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Input'.","line":45,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":45,"endColumn":15,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[2514,2562],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":46,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":18},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Textarea'.","line":46,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":46,"endColumn":18,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[2562,2616],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Checkbox' is defined but never used.","line":47,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":18},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Checkbox'.","line":47,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":47,"endColumn":18,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[2616,2670],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":48,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":15},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Label'.","line":48,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":48,"endColumn":15,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[2670,2718],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":14},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Card'.","line":49,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":49,"endColumn":14,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[2729,2735],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":49,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":27},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'CardContent'.","line":49,"column":16,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":49,"endColumn":27,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[2733,2746],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":49,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":39},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'CardHeader'.","line":49,"column":29,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":49,"endColumn":39,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[2746,2758],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":49,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":50},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'CardTitle'.","line":49,"column":41,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":49,"endColumn":50,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[2758,2769],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used.","line":49,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":67},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'CardDescription'.","line":49,"column":52,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":49,"endColumn":67,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[2769,2786],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":50,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":14},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Tabs'.","line":50,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":50,"endColumn":14,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[2828,2834],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":50,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":27},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'TabsContent'.","line":50,"column":16,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":50,"endColumn":27,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[2832,2845],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":50,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":37},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'TabsList'.","line":50,"column":29,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":50,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[2845,2855],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":50,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":50},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'TabsTrigger'.","line":50,"column":39,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":50,"endColumn":50,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[2855,2868],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-params","severity":2,"message":"Async function 'handleTestPipelineSubmit' has too many parameters (8). Maximum allowed is 4.","line":59,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":59,"endColumn":40}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\r\n  Test Pipeline Admin Page\r\n\r\n  Purpose:\r\n  This page provides an interface for manually testing the entire data pipeline,\r\n  from web scraping with Firecrawl, through data extraction with Gemini,\r\n  to data preparation and (optional) saving to Supabase. It allows for step-by-step\r\n  inspection of outputs from each stage, aiding in debugging, prompt engineering,\r\n  and validation of the pipeline's components.\r\n\r\n  How to Use:\r\n  1. Input a url to test the full scraping and processing flow.\r\n  2. Alternatively, select \"Use Raw Text Input Instead\" and paste Markdown/html\r\n     directly into the textarea to test only the Gemini processing stage onwards.\r\n  3. Use the \"Dry Run\" checkbox to control whether data is actually saved to\r\n     Supabase or if the save operation is just simulated. By default, it's a dry run.\r\n  4. Click \"Run Test\" to execute the pipeline with the provided inputs.\r\n  5. Results from each stage (Firecrawl, Gemini, Supabase) will be displayed in tabs,\r\n     including status, raw outputs, processed data, errors, and relevant metadata\r\n     (like prompts sent to Gemini or tokens used).\r\n\r\n  Automated Testing:\r\n  As part of a comprehensive testing strategy, placeholder files for automated unit tests\r\n  (e.g., `firecrawl.test.ts`, `gemini.test.ts`, `pipelineProcessor.test.ts`) have been\r\n  added to the `lib/` directory. These outline future tests to be implemented using a\r\n  framework like Jest or Vitest.\r\n*/\r\n'use client';\r\n\r\n/*\r\nAdmin Dashboard Architecture Proposal (wbs 3.1.2)\r\n--------------------------------------------------\r\nRecommended Approach: Sub-domain or separate route within the existing Next.js app, with robust access control.\r\n\r\n- Security: Use Supabase rls and custom roles to restrict access. Consider deploying the admin dashboard at /admin or on a sub-domain (admin.yoursite.com) for separation.\r\n- Separation of Concerns: Keep admin components, logic, and styles in a dedicated /admin directory. Avoid mixing admin and user-facing code.\r\n- Maintainability: Modularize admin features (data editing, pipeline monitoring, quality management) as separate components/pages.\r\n- Authentication: Require login with admin role for all admin routes. Use Supabase Auth or a similar provider.\r\n- Deployment: Can be deployed as part of the main app or as a separate Next.js app if stricter separation is needed in the future.\r\n*/\r\n\r\nimport * as React from 'react';\r\nimport { useState, FormEvent } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { StageResult, TestPipelineResults } from '@/lib/types';\r\nimport { StageResultCard } from '@/components/test-pipeline/StageResultCard';\r\nimport { TestPipelineForm } from '@/components/test-pipeline/TestPipelineForm';\r\nimport { ErrorDisplay } from '@/components/test-pipeline/ErrorDisplay';\r\nimport { TestResultsDisplay } from '@/components/test-pipeline/TestResultsDisplay';\r\nimport { submitTestPipeline } from '@/components/test-pipeline/TestPipelineSubmitHandler';\r\n\r\n// Helper function extracted from TestPipelinePage to handle form submission\r\nasync function handleTestPipelineSubmit(\r\n  event: FormEvent<HTMLFormElement>,\r\n  useRawText: boolean,\r\n  url: string,\r\n  rawText: string,\r\n  isDryRun: boolean,\r\n  setIsLoading: (loading: boolean) => void,\r\n  setResults: (results: TestPipelineResults | undefined) => void,\r\n  setError: (error: string | undefined) => void\r\n) {\r\n  event.preventDefault();\r\n  setIsLoading(true);\r\n  setResults(undefined);\r\n  setError(undefined);\r\n\r\n  try {\r\n    const data = await submitTestPipeline({ useRawText, url, rawText, isDryRun });\r\n    setResults(data);\r\n  } catch (error_) {\r\n    const errorMessage = error_ instanceof Error ? error_.message : 'An unknown error occurred';\r\n    setError(errorMessage);\r\n    setResults({ error: errorMessage });\r\n  } finally {\r\n    setIsLoading(false);\r\n  }\r\n}\r\n\r\n// Helper function to render stage results\r\nfunction renderStageResultHelper(stageName: string, result?: StageResult) {\r\n  return <StageResultCard stageName={stageName} result={result} />;\r\n}\r\n\r\nexport default function TestPipelinePage() {\r\n  const [url, setUrl] = useState<string>('');\r\n  const [rawText, setRawText] = useState<string>('');\r\n  const [useRawText, setUseRawText] = useState<boolean>(false);\r\n  const [isDryRun, setIsDryRun] = useState<boolean>(true);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [results, setResults] = useState<TestPipelineResults | undefined>();\r\n  const [error, setError] = useState<string | undefined>();\r\n\r\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n    void handleTestPipelineSubmit(\r\n      event,\r\n      useRawText,\r\n      url,\r\n      rawText,\r\n      isDryRun,\r\n      setIsLoading,\r\n      setResults,\r\n      setError\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      <TestPipelineForm\r\n        url={url}\r\n        setUrl={setUrl}\r\n        rawText={rawText}\r\n        setRawText={setRawText}\r\n        useRawText={useRawText}\r\n        setUseRawText={setUseRawText}\r\n        isDryRun={isDryRun}\r\n        setIsDryRun={setIsDryRun}\r\n        isLoading={isLoading}\r\n        onSubmit={handleSubmit}\r\n      />\r\n      <ErrorDisplay error={error} />\r\n      <TestResultsDisplay results={results} renderStageResult={renderStageResultHelper} />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\users\\page.tsx","messages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":25,"column":13,"nodeType":null,"endLine":25,"endColumn":16,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[827,830],"text":"!="}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":30,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":30,"endColumn":41},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":42,"column":21,"nodeType":null,"endLine":42,"endColumn":24,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[1270,1273],"text":"!="}}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":72,"column":23,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":72,"endColumn":62,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[2172,2200],"text":"Readonly<{ users: UserDisplayData[] }>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { UserPlus } from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { User, PostgrestError } from '@supabase/supabase-js';\r\nimport { UserTable } from '@/components/admin/users/UserTable';\r\n\r\ninterface UserDisplayData {\r\n  id: string;\r\n  email: string | undefined;\r\n  created_at: string;\r\n  last_sign_in_at: string | undefined;\r\n  role: string;\r\n}\r\n\r\nasync function getUsersData(): Promise<UserDisplayData[]> {\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Supabase admin client not available');\r\n  }\r\n\r\n  const { data, error } = await supabaseAdmin.auth.admin.listUsers();\r\n\r\n  if (error !== undefined) {\r\n    console.error('Error fetching users:', error);\r\n    return [];\r\n  }\r\n\r\n  const users: User[] = data.users ?? [];\r\n\r\n  interface Profile {\r\n    id: string;\r\n    role: string;\r\n  }\r\n\r\n  // Fetch profiles to get roles\r\n  const { data: profiles, error: profilesError } = (await supabaseAdmin\r\n    .from('profiles')\r\n    .select('id, role')) as { data: Profile[] | null; error: PostgrestError | null };\r\n\r\n  if (profilesError !== undefined) {\r\n    console.error('Error fetching profiles:', profilesError);\r\n    // Continue with users data even if profiles fetch fails\r\n  }\r\n\r\n  const profilesMap = new Map<string, string>(profiles?.map((p) => [p.id, p.role]) ?? []);\r\n\r\n  return users.map((user) => ({\r\n    id: user.id,\r\n    email: user.email,\r\n    created_at: user.created_at,\r\n    last_sign_in_at: user.last_sign_in_at,\r\n    role: profilesMap.get(user.id) ?? 'user', // Default to 'user' if no profile role\r\n  })) as UserDisplayData[];\r\n}\r\n\r\nfunction PageHeader() {\r\n  return (\r\n    <div className=\"flex items-center justify-between\">\r\n      <h1 className=\"text-2xl font-bold\">User Management</h1>\r\n      <Button asChild>\r\n        <Link href=\"/admin/users/new\">\r\n          <UserPlus className=\"mr-2 h-4 w-4\" />\r\n          Add New User\r\n        </Link>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction UserListCard({ users }: { users: UserDisplayData[] }) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>System Users</CardTitle>\r\n        <CardDescription>\r\n          Manage user accounts and their roles. ({users.length} total)\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <UserTable users={users} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default async function UserManagementPage() {\r\n  const users = await getUsersData();\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <PageHeader />\r\n      <UserListCard users={users} />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\automated-cleanup\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":66,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":66,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ action: string; options?: Record<string, unknown> | undefined; }`.","line":67,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":67,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  verifyAdminAccess,\r\n  handlePostRequest,\r\n  handleGetStatus,\r\n  handleGetSchedules,\r\n  handleGetHistory,\r\n  handleGetPreview,\r\n  handleGetDefault,\r\n} from '@/lib/api/admin/automated-cleanup/handlers';\r\n\r\n/**\r\n * SOTA Automated Data Cleanup API\r\n * \r\n * Provides scheduled and on-demand data cleanup operations\r\n * with comprehensive monitoring and reporting capabilities\r\n * \r\n * GET /api/admin/automated-cleanup - Get cleanup status and schedule\r\n * POST /api/admin/automated-cleanup - Run cleanup operations\r\n */\r\n\r\nexport async function GET(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    const hasAccess = await verifyAdminAccess(request);\r\n    if (!hasAccess) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n\r\n    switch (action) {\r\n      case 'status': {\r\n        return await handleGetStatus();\r\n      }\r\n      case 'schedules': {\r\n        return await handleGetSchedules();\r\n      }\r\n      case 'history': {\r\n        return await handleGetHistory(searchParams);\r\n      }\r\n      case 'preview': {\r\n        return await handleGetPreview(searchParams);\r\n      }\r\n      default: {\r\n        return await handleGetDefault();\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Automated cleanup GET error:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to process cleanup request',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    const hasAccess = await verifyAdminAccess(request);\r\n    if (!hasAccess) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    return await handlePostRequest(body);\r\n  } catch (error) {\r\n    console.error('Automated cleanup POST error:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to process cleanup request',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\cron-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-cleanup\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":9,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":9,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `DataCleanupRequestBody`.","line":10,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":10,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  handlePostRequest,\r\n  handleGetRequest,\r\n} from '@/lib/api/admin/data-cleanup/handlers';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    return await handlePostRequest(body);\r\n  } catch (error) {\r\n    console.error('Data cleanup API error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to process cleanup request',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    return await handleGetRequest(request);\r\n  } catch (error) {\r\n    console.error('Data cleanup GET error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to process cleanup request',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-quality\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'searchParams' is assigned a value but never used.","line":18,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":25},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'searchParams' variable.","line":18,"column":13,"nodeType":"Identifier","messageId":"unusedVariable","endLine":18,"endColumn":25},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"searchParams\".","line":18,"column":13,"nodeType":null,"messageId":"removeAssignment","endLine":18,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  handleGetRequest,\r\n  handlePostRequest,\r\n  verifyAdminAccess,\r\n} from '@/lib/api/admin/data-quality/handlers';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const hasAdminAccess = await verifyAdminAccess(request);\r\n  if (!hasAdminAccess) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Unauthorized access' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    return await handleGetRequest(request);\r\n  } catch (error: unknown) {\r\n    console.error('Error fetching data quality information:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to fetch data quality information',\r\n        message: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  const hasAdminAccess = await verifyAdminAccess(request);\r\n  if (!hasAdminAccess) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Unauthorized access' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    return await handlePostRequest(request);\r\n  } catch (error: unknown) {\r\n    console.error('Error updating data quality:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to update data quality',\r\n        message: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\oauth-status\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OAuthStatus' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'OAuthStatus'.","line":6,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":6,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[157,224],"text":""},"desc":"Remove this import statement"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  handleGetRequest,\r\n  handlePostRequest,\r\n} from '@/lib/api/admin/oauth-status/helpers';\r\nimport { OAuthStatus } from '@/lib/api/admin/oauth-status/types';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    return await handleGetRequest(request);\r\n  } catch (error) {\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'OAuth status check failed',\r\n      details: error instanceof Error ? error.message : 'Unknown error',\r\n      timestamp: new Date().toISOString()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    return await handlePostRequest(request);\r\n  } catch (error) {\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to generate OAuth test URL',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\realtime-events\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextResponse'.","line":1,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[20,34],"text":""},"desc":"Remove this variable import"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  verifyAdminAccess,\r\n  handleGetRequest,\r\n  handlePostRequest,\r\n} from '@/lib/api/admin/realtime-events/handlers';\r\n\r\nexport async function GET(request: NextRequest): Promise<Response> {\r\n  const hasAccess = await verifyAdminAccess(request);\r\n  if (!hasAccess) {\r\n    return new Response('Unauthorized', { status: 401 });\r\n  }\r\n\r\n  try {\r\n    return await handleGetRequest(request);\r\n  } catch (error) {\r\n    console.error('Realtime events GET error:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'Internal server error',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest): Promise<Response> {\r\n  const hasAccess = await verifyAdminAccess(request);\r\n  if (!hasAccess) {\r\n    return new Response('Unauthorized', { status: 401 });\r\n  }\r\n\r\n  try {\r\n    return await handlePostRequest(request);\r\n  } catch (error) {\r\n    console.error('Realtime events POST error:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'Internal server error',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\scraping-metrics\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextRequest'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[9,22],"text":""},"desc":"Remove this variable import"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { verifyAdminAccess, handleGetRequest } from '@/lib/api/admin/scraping-metrics/handlers';\r\n\r\nexport async function GET(request: Request): Promise<NextResponse> {\r\n  const hasAdminAccess = await verifyAdminAccess(request);\r\n  if (!hasAdminAccess) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Unauthorized access' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    return await handleGetRequest();\r\n  } catch (error: unknown) {\r\n    console.error('Error fetching scraping metrics:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to fetch scraping metrics',\r\n        metrics: undefined,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\analytics\\web-vitals\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\auto-scrape-initiate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\autonomous-discovery\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\auto-scrape\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  handlePostRequest,\r\n  handleGetRequest,\r\n} from '@/lib/api/cron/auto-scrape/handlers';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    return await handlePostRequest(request);\r\n  } catch (error) {\r\n    console.error('Auto-scraping cron job failed:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Auto-scraping failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport function GET(request: NextRequest) {\r\n  return handleGetRequest();\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\quality-check\\route.ts","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":30,"column":10,"nodeType":"Literal","messageId":"error","endLine":30,"endColumn":14,"suggestions":[{"messageId":"remove","fix":{"range":[1084,1088],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[1084,1088],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1384,1387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1384,1387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":46,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":49,"endColumn":6},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'assessTrucksQuality' has no 'await' expression.","line":98,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":98,"endColumn":35,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2806,2812],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2849,2852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2849,2852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":120,"column":9,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":120,"endColumn":42,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3542,3575],"text":"Boolean((truck.current_location?.timestamp))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .current_location on an `any` value.","line":120,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":121,"column":49,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":121,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .current_location on an `any` value.","line":121,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":71}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { logActivity } from '@/lib/activityLogger';\r\nimport { DataQualityService, FoodTruckService } from '@/lib/supabase';\r\n\r\n// Type definitions for quality assessment\r\ninterface QualityAssessment {\r\n  score: number;\r\n  issues: unknown[];\r\n}\r\n\r\ninterface QualityService {\r\n  calculateQualityScore: (truck: unknown) => QualityAssessment;\r\n  categorizeQualityScore: (score: number) => string;\r\n  batchUpdateQualityScores: (limit: number) => Promise<unknown>;\r\n}\r\n\r\nfunction verifyCronSecret(request: NextRequest): NextResponse | null {\r\n  const authHeader = request.headers.get('authorization');\r\n  const cronSecret = process.env.CRON_SECRET;\r\n\r\n  if (cronSecret === undefined) {\r\n    console.error('CRON_SECRET not configured');\r\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\r\n  }\r\n\r\n  if (authHeader !== `Bearer ${cronSecret}`) {\r\n    console.error('Unauthorized cron attempt:', authHeader);\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction logQualityCheckStart() {\r\n  console.info('Starting daily data quality check...');\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'quality_check_started',\r\n    details: { timestamp: new Date().toISOString() },\r\n  });\r\n}\r\n\r\nfunction logQualityCheckCompletion(qualityResults: any) {\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'quality_check_completed',\r\n    details: {\r\n      logTimestamp: new Date().toISOString(),\r\n      ...qualityResults,\r\n    },\r\n  });\r\n  console.info('Data quality check completed successfully');\r\n}\r\n\r\nfunction logQualityCheckFailure(error: unknown) {\r\n  console.error('Quality check cron job failed:', error);\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'quality_check_failed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n    },\r\n  });\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const authResponse = verifyCronSecret(request);\r\n    if (authResponse) {\r\n      return authResponse;\r\n    }\r\n\r\n    logQualityCheckStart();\r\n    const qualityResults = await performDataQualityCheck();\r\n    logQualityCheckCompletion(qualityResults);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Quality check completed successfully',\r\n      data: {\r\n        ...qualityResults,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    logQualityCheckFailure(error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Quality check failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nasync function assessTrucksQuality(trucks: any[]) {\r\n  let trucksWithMissingData = 0;\r\n  let lowQualityTrucks = 0;\r\n  let totalQualityScore = 0;\r\n  let staleDataCount = 0;\r\n  const qualityBreakdown = { high: 0, medium: 0, low: 0 };\r\n\r\n  for (const truck of trucks) {\r\n    const assessment = (DataQualityService as QualityService).calculateQualityScore(truck);\r\n    totalQualityScore += assessment.score;\r\n\r\n    const category = (DataQualityService as QualityService).categorizeQualityScore(assessment.score);\r\n    (qualityBreakdown as Record<string, number>)[category]++;\r\n\r\n    if (assessment.issues.length > 0) {\r\n      trucksWithMissingData++;\r\n    }\r\n\r\n    if (assessment.score < 0.6) {\r\n      lowQualityTrucks++;\r\n    }\r\n\r\n    if (truck.current_location?.timestamp) {\r\n      const locationAge = Date.now() - new Date(truck.current_location.timestamp).getTime();\r\n      const daysSinceUpdate = locationAge / (1000 * 60 * 60 * 24);\r\n      if (daysSinceUpdate > 7) {\r\n        staleDataCount++;\r\n      }\r\n    }\r\n  }\r\n\r\n  const averageQualityScore = trucks.length > 0 ? totalQualityScore / trucks.length : 0;\r\n\r\n  return {\r\n    trucksWithMissingData,\r\n    lowQualityTrucks,\r\n    staleDataCount,\r\n    averageQualityScore,\r\n    qualityBreakdown,\r\n  };\r\n}\r\n\r\nasync function performDataQualityCheck() {\r\n  try {\r\n    const { trucks, total } = await FoodTruckService.getAllTrucks(1000, 0);\r\n\r\n    const {\r\n      trucksWithMissingData,\r\n      lowQualityTrucks,\r\n      staleDataCount,\r\n      averageQualityScore,\r\n      qualityBreakdown,\r\n    } = await assessTrucksQuality(trucks);\r\n\r\n    const updateResults = await (DataQualityService as QualityService).batchUpdateQualityScores(100);\r\n\r\n    return {\r\n      totalTrucks: total,\r\n      trucksWithMissingData,\r\n      lowQualityTrucks,\r\n      staleDataCount,\r\n      averageQualityScore: Math.round(averageQualityScore * 100) / 100,\r\n      qualityBreakdown,\r\n      updateResults,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  } catch (error) {\r\n    console.error('Error performing data quality check:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Only allow POST requests for cron jobs\r\nexport function GET() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed. Use POST for cron jobs.' },\r\n    { status: 405 },\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\dashboard\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\enhanced-pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\firecrawl\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\gemini\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\monitoring\\api-usage\\route.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":35,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":35,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scheduler\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\search\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\tavily\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-integration\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-pipeline-run\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\callback\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrucksApiResponse' is defined but never used.","line":6,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":38},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'TrucksApiResponse'.","line":6,"column":21,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":6,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[147,166],"text":""},"desc":"Remove this variable import"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { useThemeSwitcher } from '@/components/ThemeProvider';\r\nimport { FoodTruck, TrucksApiResponse } from '@/lib/types/foodTruck';\r\nimport {\r\n  getUserLocationHelper,\r\n  loadFoodTrucksHelper,\r\n  loadNearbyTrucksHelper,\r\n  isTruckOpen,\r\n} from '@/lib/utils/foodTruckHelpers';\r\nimport { AppHeader } from '@/components/home/AppHeader';\r\nimport { MainContent } from '@/components/home/MainContent';\r\nimport { LoadingScreen } from '@/components/home/LoadingScreen';\r\n\r\nexport default function FoodTruckFinder() {\r\n  const [trucks, setTrucks] = useState<FoodTruck[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | undefined>();\r\n  const [selectedTruckId, setSelectedTruckId] = useState<string | undefined>();\r\n\r\n  const { setTheme, resolvedTheme } = useThemeSwitcher();\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n    void loadFoodTrucksHelper(setTrucks, setLoading);\r\n    getUserLocationHelper(setUserLocation);\r\n  }, []);\r\n\r\n  const loadNearbyTrucks = async () => {\r\n    await loadNearbyTrucksHelper(userLocation, setTrucks);\r\n  };\r\n\r\n  const filteredTrucks = trucks.filter(\r\n    (truck) =>\r\n      truck.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      (truck.description ?? '').toLowerCase().includes(searchTerm.toLowerCase()),\r\n  );\r\n\r\n  if (loading) {\r\n    return <LoadingScreen />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\r\n      <AppHeader\r\n        mounted={mounted}\r\n        resolvedTheme={resolvedTheme}\r\n        setTheme={setTheme}\r\n        searchTerm={searchTerm}\r\n        setSearchTerm={setSearchTerm}\r\n        userLocation={userLocation}\r\n        loadNearbyTrucks={loadNearbyTrucks}\r\n      />\r\n\r\n      <MainContent\r\n        filteredTrucks={filteredTrucks}\r\n        userLocation={userLocation}\r\n        selectedTruckId={selectedTruckId}\r\n        setSelectedTruckId={setSelectedTruckId}\r\n        isOpen={isTruckOpen}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\MapDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\SearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":32,"column":15,"nodeType":null,"endLine":32,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[1130,1133],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\TruckCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":36,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":36,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":36,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":37,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":37,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":37,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":37,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":38,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":38,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":38,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":38,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":49,"column":25,"nodeType":"Identifier","messageId":"anyAssignment","endLine":49,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":50,"column":23,"nodeType":"Identifier","messageId":"anyAssignment","endLine":50,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":61,"column":48,"nodeType":"Identifier","messageId":"anyAssignment","endLine":61,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":61,"column":73,"nodeType":"Identifier","messageId":"anyAssignment","endLine":61,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":66,"column":40,"nodeType":"Identifier","messageId":"anyAssignment","endLine":66,"endColumn":52}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\nimport {\r\n  getPopularItems,\r\n  getPriceRange,\r\n  getTodayHours,\r\n  formatHours,\r\n} from '@/lib/utils/foodTruckHelpers';\r\nimport { RatingSection } from './trucks/RatingSection';\r\nimport { MenuSection } from './trucks/MenuSection';\r\nimport { ContactSection } from './trucks/ContactSection';\r\nimport { SocialMediaSection } from './trucks/SocialMediaSection';\r\nimport { TruckCardHeader } from './trucks/TruckCardHeader';\r\nimport { OperatingHoursSection } from './trucks/OperatingHoursSection';\r\nimport { TruckCardFooter } from './trucks/TruckCardFooter';\r\n\r\ninterface TruckCardProps {\r\n  readonly truck: FoodTruck;\r\n  readonly isOpen: boolean;\r\n  readonly onSelectTruck: () => void;\r\n  readonly formatPrice: (price: number) => string;\r\n  readonly userLocation?: { lat: number; lng: number };\r\n  readonly hideHeader?: boolean; // Add option to hide header when used in accordion\r\n}\r\n\r\nexport function TruckCard({\r\n  truck,\r\n  isOpen,\r\n  onSelectTruck,\r\n  formatPrice,\r\n  hideHeader = false,\r\n}: TruckCardProps) {\r\n  const popularItems = getPopularItems(truck);\r\n  const priceRange = getPriceRange(truck);\r\n  const todayHours = getTodayHours(truck);\r\n\r\n  return (\r\n    <Card\r\n      className={`hover:shadow-md transition-shadow cursor-pointer dark:bg-slate-800 dark:border-slate-700 ${hideHeader ? 'shadow-none border-none bg-transparent dark:bg-transparent' : ''}`}\r\n      onClick={onSelectTruck}\r\n    >\r\n      {!hideHeader && (\r\n        <TruckCardHeader\r\n          truck={truck}\r\n          isOpen={isOpen}\r\n          popularItems={popularItems}\r\n          priceRange={priceRange}\r\n        />\r\n      )}\r\n      <CardContent className={hideHeader ? 'pt-0' : ''}>\r\n        {truck.description && (\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">{truck.description}</p>\r\n        )}\r\n        <div className=\"space-y-4\">\r\n          {/* Ratings & Hours Row */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <RatingSection averageRating={truck.average_rating} reviewCount={truck.review_count} />\r\n            <OperatingHoursSection todayHours={todayHours} formatHours={formatHours} />\r\n          </div>\r\n\r\n          {/* Menu & Contact Row */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <MenuSection popularItems={popularItems} formatPrice={formatPrice} />\r\n            <ContactSection contactInfo={truck.contact_info} verificationStatus={truck.verification_status} />\r\n          </div>\r\n\r\n          <SocialMediaSection socialMedia={truck.social_media} />\r\n        </div>\r\n        {truck.verification_status && (\r\n          <div className=\"mt-2\">\r\n            <Badge variant={truck.verification_status === 'verified' ? 'default' : 'secondary'}>\r\n              <span className=\"capitalize\">{truck.verification_status}</span>\r\n            </Badge>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n      <TruckCardFooter truck={truck} />\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\WebVitalsReporter.tsx","messages":[{"ruleId":"sonarjs/no-redundant-jump","severity":2,"message":"Remove this redundant jump.","line":19,"column":3,"nodeType":"ReturnStatement","messageId":"removeRedundantJump","endLine":19,"endColumn":10,"suggestions":[{"messageId":"suggestJumpRemoval","fix":{"range":[481,492],"text":""},"desc":"Remove this redundant jump"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport { initWebVitalsMonitoring } from '@/lib/performance/webVitals';\r\n\r\n/**\r\n * Web Vitals Reporter Component\r\n * Initializes Core Web Vitals monitoring for the application\r\n */\r\nexport function WebVitalsReporter() {\r\n  useEffect(() => {\r\n    // Only initialize in browser environment\r\n    if (globalThis.window != undefined) {\r\n      initWebVitalsMonitoring();\r\n    }\r\n  }, []);\r\n\r\n  // This component doesn't render anything\r\n  return;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\AdminNavLinks.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":17,"column":31,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":17,"endColumn":71,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[293,311],"text":"Readonly<AdminNavLinksProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport Link from 'next/link';\r\nimport {\r\n  Home,\r\n  Truck,\r\n  Settings,\r\n  Activity,\r\n  Users,\r\n  CalendarDays,\r\n  BarChart3,\r\n} from 'lucide-react';\r\n\r\ninterface AdminNavLinksProps {\r\n  isMobile?: boolean;\r\n}\r\n\r\nexport function AdminNavLinks({ isMobile = false }: AdminNavLinksProps) {\r\n  const linkClassName = isMobile\r\n    ? \"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\r\n    : \"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\";\r\n\r\n  const iconClassName = isMobile ? \"h-5 w-5\" : \"h-4 w-4\";\r\n\r\n  return (\r\n    <>\r\n      <Link href=\"/admin\" className={linkClassName}>\r\n        <Home className={iconClassName} />\r\n        Dashboard\r\n      </Link>\r\n      <Link href=\"/admin/food-trucks\" className={linkClassName}>\r\n        <Truck className={iconClassName} />\r\n        Food Truck Management\r\n      </Link>\r\n      <Link href=\"/admin/pipeline\" className={linkClassName}>\r\n        <Activity className={iconClassName} />\r\n        Pipeline Monitoring\r\n      </Link>\r\n      <Link href=\"/admin/auto-scraping\" className={linkClassName}>\r\n        <Settings className={iconClassName} />\r\n        Auto-Scraping\r\n      </Link>\r\n      <Link href=\"/admin/data-quality\" className={linkClassName}>\r\n        <Settings className={iconClassName} />\r\n        Data Quality\r\n      </Link>\r\n      <Link href=\"/admin/users\" className={linkClassName}>\r\n        <Users className={iconClassName} />\r\n        User Management\r\n      </Link>\r\n      <Link href=\"/admin/events\" className={linkClassName}>\r\n        <CalendarDays className={iconClassName} />\r\n        Event Management\r\n      </Link>\r\n      <Link href=\"/admin/analytics\" className={linkClassName}>\r\n        <BarChart3 className={iconClassName} />\r\n        Analytics\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\DataCleanupDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\RealtimeStatusIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":11,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":39},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'CardHeader'.","line":11,"column":29,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":11,"endColumn":39,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[293,305],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":11,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":50},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'CardTitle'.","line":11,"column":41,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":11,"endColumn":50,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[305,316],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Badge'.","line":12,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":12,"endColumn":15,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[347,395],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Button'.","line":13,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":13,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[395,445],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Activity' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Activity'.","line":16,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":16,"endColumn":11,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[462,476],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'AlertTriangle'.","line":17,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":17,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[470,489],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":14},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'CheckCircle'.","line":18,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":18,"endColumn":14,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[489,506],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":8},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Clock'.","line":19,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":19,"endColumn":8,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[506,517],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Database'.","line":20,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":20,"endColumn":11,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[517,531],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RefreshCw' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RefreshCw'.","line":21,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":21,"endColumn":12,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[531,546],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Server' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":9},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Server'.","line":22,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":22,"endColumn":9,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[546,558],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":13},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'TrendingUp'.","line":23,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":23,"endColumn":13,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[558,574],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingDown' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":15},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'TrendingDown'.","line":24,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":24,"endColumn":15,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[574,592],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Wifi' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":7},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Wifi'.","line":25,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":25,"endColumn":7,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[592,601],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WifiOff' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":10},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'WifiOff'.","line":26,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":26,"endColumn":10,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[601,613],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusMetric' is defined but never used.","line":29,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":40},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'StatusMetric'.","line":29,"column":28,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":29,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[738,752],"text":""},"desc":"Remove this variable import"}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\n/**\r\n * SOTA Real-time Status Indicator Component\r\n * \r\n * Provides visual real-time status updates for admin dashboard\r\n * with animated indicators, health scores, and alert notifications\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\n\r\nimport { \r\n  Activity, \r\n  AlertTriangle, \r\n  CheckCircle, \r\n  Clock, \r\n  Database, \r\n  RefreshCw, \r\n  Server, \r\n  TrendingUp, \r\n  TrendingDown,\r\n  Wifi,\r\n  WifiOff\r\n} from 'lucide-react';\r\nimport { useRealtimeAdminEvents } from '@/hooks/useRealtimeAdminEvents';\r\nimport { useSystemMetrics, StatusMetric } from './realtime/useSystemMetrics';\r\nimport { ConnectionStatusHeader } from './realtime/ConnectionStatusHeader';\r\nimport { getStatusColor, getStatusIcon, getTrendIcon } from './realtime/StatusHelpers';\r\nimport { SystemMetricsGrid } from './realtime/SystemMetricsGrid';\r\nimport { ScrapingJobsStatus } from './realtime/ScrapingJobsStatus';\r\nimport { SystemAlerts } from './realtime/SystemAlerts';\r\nimport { EventControls } from './realtime/EventControls';\r\n\r\ninterface SystemAlert {\r\n  id: string;\r\n  type: 'info' | 'warning' | 'error' | 'critical';\r\n  message: string;\r\n  timestamp: string;\r\n  acknowledged?: boolean;\r\n}\r\n\r\nexport function RealtimeStatusIndicator() {\r\n  const {\r\n    isConnected,\r\n    isConnecting,\r\n    connectionError,\r\n    latestMetrics,\r\n    recentEvents,\r\n    connect,\r\n    disconnect,\r\n    clearEvents,\r\n    lastEventTime\r\n  } = useRealtimeAdminEvents({\r\n    autoConnect: true,\r\n    reconnectInterval: 5000,\r\n    maxReconnectAttempts: 10\r\n  });\r\n\r\n  const [alerts, setAlerts] = useState<SystemAlert[]>([]);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  // Process recent events into alerts\r\n  useEffect(() => {\r\n    const newAlerts = recentEvents\r\n      .filter(event => event.severity !== undefined && event.severity !== 'info')\r\n      .map(event => ({\r\n        id: event.id,\r\n        type: event.severity as 'warning' | 'error' | 'critical',\r\n        message: typeof event.data.message === 'string' && event.data.message !== '' ? event.data.message : 'System event occurred',\r\n        timestamp: event.timestamp,\r\n        acknowledged: false\r\n      }))\r\n      .slice(0, 5); // Keep only latest 5 alerts\r\n\r\n    setAlerts(newAlerts);\r\n  }, [recentEvents]);\r\n\r\n  const systemMetrics = useSystemMetrics({ isConnected, isConnecting, connectionError, latestMetrics });\r\n\r\n  const acknowledgeAlert = (alertId: string) => {\r\n    setAlerts(prev => prev.map(alert => \r\n      alert.id === alertId ? { ...alert, acknowledged: true } : alert\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Card className={`border-l-4 ${isConnected ? 'border-l-green-500' : 'border-l-red-500'}`}>\r\n        <ConnectionStatusHeader\r\n          isConnected={isConnected}\r\n          isConnecting={isConnecting}\r\n          lastEventTime={lastEventTime}\r\n          connect={connect}\r\n          disconnect={disconnect}\r\n        />\r\n        <CardContent>\r\n          {connectionError !== undefined && (\r\n            <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md\">\r\n              <p className=\"text-sm text-red-600\">{connectionError}</p>\r\n            </div>\r\n          )}\r\n\r\n          <SystemMetricsGrid\r\n            metrics={systemMetrics}\r\n            getStatusColor={getStatusColor}\r\n            getStatusIcon={getStatusIcon}\r\n            getTrendIcon={getTrendIcon}\r\n          />\r\n\r\n          <ScrapingJobsStatus scrapingJobs={latestMetrics?.scrapingJobs} />\r\n\r\n          <SystemAlerts\r\n            alerts={alerts}\r\n            showDetails={showDetails}\r\n            onToggleDetails={() => setShowDetails(!showDetails)}\r\n            onAcknowledgeAlert={acknowledgeAlert}\r\n          />\r\n\r\n          <EventControls\r\n            recentEventsCount={recentEvents.length}\r\n            onClearEvents={clearEvents}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\UserMenu.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[418,421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[418,421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":20,"column":26,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":20,"endColumn":78,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[603,616],"text":"Readonly<UserMenuProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `any` value.","line":26,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `any` value.","line":35,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":36,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":70}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/DropdownMenu';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { LogOut } from 'lucide-react';\r\n\r\ninterface UserMenuProps {\r\n  user: any; // Consider a more specific type if available\r\n  userInitials: string;\r\n  handleSignOut: () => Promise<void>;\r\n}\r\n\r\nexport function UserMenu({ user, userInitials, handleSignOut }: UserMenuProps) {\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant=\"secondary\" size=\"icon\" className=\"rounded-full\">\r\n          <Avatar>\r\n            <AvatarImage src={user?.user_metadata?.avatar_url as string} alt=\"Avatar\" />\r\n            <AvatarFallback>{userInitials}</AvatarFallback>\r\n          </Avatar>\r\n          <span className=\"sr-only\">Toggle user menu</span>\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\">\r\n        <DropdownMenuLabel>\r\n          <div className=\"flex flex-col space-y-1\">\r\n            <p className=\"text-sm font-medium\">{user?.user_metadata?.full_name ?? 'Admin'}</p>\r\n            <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\r\n          </div>\r\n        </DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuItem>Settings</DropdownMenuItem>\r\n        <DropdownMenuItem>Support</DropdownMenuItem>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuItem\r\n          onClick={() => {\r\n            handleSignOut().catch((error) => console.warn('Sign out failed:', error));\r\n          }}\r\n        >\r\n          <LogOut className=\"mr-2 h-4 w-4\" />\r\n          Logout\r\n        </DropdownMenuItem>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupHeader.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":14,"column":31,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":14,"endColumn":99,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[358,376],"text":"Readonly<CleanupHeaderProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Eye, RefreshCw, Play } from 'lucide-react';\n\ninterface CleanupHeaderProps {\n  isRunning: boolean;\n  onPreview: () => void;\n  onDryRun: () => void;\n  onRunCleanup: () => void;\n}\n\nexport function CleanupHeader({ isRunning, onPreview, onDryRun, onRunCleanup }: CleanupHeaderProps) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div>\n        <h2 className=\"text-2xl font-bold tracking-tight\">Data Cleanup & Quality</h2>\n        <p className=\"text-muted-foreground\">\n          Automated data quality improvements and duplicate prevention\n        </p>\n      </div>\n      <div className=\"flex gap-2\">\n        <Button variant=\"outline\" onClick={onPreview} disabled={isRunning}>\n          <Eye className=\"h-4 w-4 mr-2\" />\n          Preview Changes\n        </Button>\n        <Button variant=\"outline\" onClick={onDryRun} disabled={isRunning}>\n          <RefreshCw className={`h-4 w-4 mr-2 ${isRunning ? 'animate-spin' : ''}`} />\n          Dry Run\n        </Button>\n        <Button onClick={onRunCleanup} disabled={isRunning}>\n          <Play className=\"h-4 w-4 mr-2\" />\n          Run Cleanup\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupPreview.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":32,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":68,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[248,267],"text":"Readonly<CleanupPreviewProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\ninterface CleanupPreviewProps {\n  previewData: unknown;\n}\n\nexport function CleanupPreview({ previewData }: CleanupPreviewProps) {\n  if (previewData == undefined) {\n    return;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Cleanup Preview</CardTitle>\n        <CardDescription>\n          Estimated changes (based on sample of 10 trucks)\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {(previewData as { estimated_improvements: number }).estimated_improvements}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Trucks to Improve</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {(previewData as { estimated_duplicates: number }).estimated_duplicates}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Duplicates Found</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {(previewData as { operations?: unknown[] }).operations?.length ?? 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Operations Ready</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              ~{Math.round(((previewData as { estimated_improvements: number }).estimated_improvements / 10) * 100)}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Improvement Rate</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupResults.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":16,"column":32,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":16,"endColumn":67,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[614,633],"text":"Readonly<CleanupResultsProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\r\nimport { CheckCircle, AlertTriangle } from 'lucide-react';\r\nimport { CleanupResult } from '@/hooks/useDataCleanup';\r\nimport { operationConfig } from './OperationSelector';\r\n\r\ninterface CleanupResultsProps {\r\n  lastResult: CleanupResult;\r\n}\r\n\r\nexport function CleanupResults({ lastResult }: CleanupResultsProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <CheckCircle className=\"h-5 w-5 text-green-600\" />\r\n          Last Cleanup Results\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Completed in {Math.round(lastResult.duration / 1000)}s - {lastResult.totalProcessed} trucks processed\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {/* Summary Cards */}\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\r\n            <div className=\"text-2xl font-bold text-blue-600\">\r\n              {lastResult.summary.trucksImproved}\r\n            </div>\r\n            <div className=\"text-sm text-blue-700 dark:text-blue-300\">Trucks Improved</div>\r\n          </div>\r\n          <div className=\"text-center p-3 bg-purple-50 dark:bg-purple-950 rounded-lg\">\r\n            <div className=\"text-2xl font-bold text-purple-600\">\r\n              {lastResult.summary.duplicatesRemoved}\r\n            </div>\r\n            <div className=\"text-sm text-purple-700 dark:text-purple-300\">Duplicates Removed</div>\r\n          </div>\r\n          <div className=\"text-center p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\r\n            <div className=\"text-2xl font-bold text-green-600\">\r\n              {lastResult.summary.qualityScoreImprovement}\r\n            </div>\r\n            <div className=\"text-sm text-green-700 dark:text-green-300\">Quality Updates</div>\r\n          </div>\r\n          <div className=\"text-center p-3 bg-red-50 dark:bg-red-950 rounded-lg\">\r\n            <div className=\"text-2xl font-bold text-red-600\">\r\n              {lastResult.summary.placeholdersRemoved}\r\n            </div>\r\n            <div className=\"text-sm text-red-700 dark:text-red-300\">Placeholders Removed</div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Operation Details */}\r\n        <div className=\"space-y-3\">\r\n          <h4 className=\"font-semibold\">Operation Details</h4>\r\n          {lastResult.operations.map((operation, index) => (\r\n            <div key={index} className=\"border rounded-lg p-3\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  {operationConfig[operation.type as keyof typeof operationConfig]?.icon}\r\n                  <span className=\"font-medium\">{operation.description}</span>\r\n                </div>\r\n                <Badge variant={operation.errorCount > 0 ? 'destructive' : 'default'}>\r\n                  {operation.successCount}/{operation.affectedCount}\r\n                </Badge>\r\n              </div>\r\n              \r\n              {operation.affectedCount > 0 && (\r\n                <Progress \r\n                  value={(operation.successCount / operation.affectedCount) * 100} \r\n                  className=\"h-2 mb-2\"\r\n                />\r\n              )}\r\n              \r\n              {operation.errors.length > 0 && (\r\n                <Alert variant=\"destructive\" className=\"mt-2\">\r\n                  <AlertTriangle className=\"h-4 w-4\" />\r\n                  <AlertTitle>Errors ({operation.errors.length})</AlertTitle>\r\n                  <AlertDescription>\r\n                    <div className=\"max-h-20 overflow-y-auto text-xs\">\r\n                      {operation.errors.slice(0, 3).map((error, i) => (\r\n                        <div key={i}>{error}</div>\r\n                      ))}\r\n                      {operation.errors.length > 3 && (\r\n                        <div>... and {operation.errors.length - 3} more</div>\r\n                      )}\r\n                    </div>\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\OperationSelector.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":47,"column":35,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":47,"endColumn":100,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[1410,1432],"text":"Readonly<OperationSelectorProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle, Trash2, Phone, MapPin, Star, Merge } from 'lucide-react';\n\nexport { operationConfig };\n\ninterface OperationSelectorProps {\n  selectedOperations: string[];\n  onToggleOperation: (operation: string) => void;\n}\n\nconst operationConfig = {\n  remove_placeholders: {\n    name: 'Remove Placeholders',\n    description: 'Remove placeholder and mock data values',\n    icon: <Trash2 className=\"h-4 w-4\" />,\n    color: 'text-red-600'\n  },\n  normalize_phone: {\n    name: 'Normalize Phone Numbers',\n    description: 'Format phone numbers consistently',\n    icon: <Phone className=\"h-4 w-4\" />,\n    color: 'text-blue-600'\n  },\n  fix_coordinates: {\n    name: 'Fix GPS Coordinates',\n    description: 'Correct invalid location coordinates',\n    icon: <MapPin className=\"h-4 w-4\" />,\n    color: 'text-green-600'\n  },\n  update_quality_scores: {\n    name: 'Update Quality Scores',\n    description: 'Recalculate data quality scores',\n    icon: <Star className=\"h-4 w-4\" />,\n    color: 'text-yellow-600'\n  },\n  merge_duplicates: {\n    name: 'Merge Duplicates',\n    description: 'Identify and merge duplicate entries',\n    icon: <Merge className=\"h-4 w-4\" />,\n    color: 'text-purple-600'\n  }\n};\n\nexport function OperationSelector({ selectedOperations, onToggleOperation }: OperationSelectorProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Cleanup Operations</CardTitle>\n        <CardDescription>\n          Select which cleanup operations to run\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-3\">\n          {Object.entries(operationConfig).map(([key, config]) => (\n            <div\n              key={key}\n              className={`flex items-center space-x-3 p-3 border rounded-lg cursor-pointer transition-colors ${\n                selectedOperations.includes(key)\n                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-950'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => onToggleOperation(key)}\n            >\n              <div className={config.color}>\n                {config.icon}\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-sm\">{config.name}</div>\n                <div className=\"text-xs text-muted-foreground\">{config.description}</div>\n              </div>\n              {selectedOperations.includes(key) && (\n                <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n              )}\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\DataQualityScoreCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":13,"column":38,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":13,"endColumn":85,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[361,386],"text":"Readonly<DataQualityScoreCardProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Settings } from 'lucide-react';\r\n\r\ninterface DataQualityStats {\r\n  avg_quality_score: number;\r\n}\r\n\r\ninterface DataQualityScoreCardProps {\r\n  dataQualityStats: DataQualityStats;\r\n}\r\n\r\nexport function DataQualityScoreCard({ dataQualityStats }: DataQualityScoreCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n        <CardTitle className=\"text-sm font-medium\">Data Quality Score</CardTitle>\r\n        <Settings className=\"h-4 w-4 text-muted-foreground\" />\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"text-2xl font-bold\">\r\n          {((dataQualityStats.avg_quality_score ?? 0) * 100).toFixed(1)}%\r\n        </div>\r\n        <p className=\"text-xs text-muted-foreground\">\r\n          Average quality score across all trucks\r\n        </p>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\PipelineStatusCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":11,"column":36,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":15,"endColumn":27,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[433,456],"text":"Readonly<PipelineStatusCardProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Activity } from 'lucide-react';\r\n\r\ninterface PipelineStatusCardProps {\r\n  pendingScrapingJobsCount: number;\r\n  runningScrapingJobsCount: number;\r\n  failedScrapingJobsCount: number;\r\n}\r\n\r\nexport function PipelineStatusCard({\r\n  pendingScrapingJobsCount,\r\n  runningScrapingJobsCount,\r\n  failedScrapingJobsCount,\r\n}: PipelineStatusCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n        <CardTitle className=\"text-sm font-medium\">Pipeline Status</CardTitle>\r\n        <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"text-2xl font-bold\">{pendingScrapingJobsCount} pending</div>\r\n        <p className=\"text-xs text-muted-foreground\">\r\n          {runningScrapingJobsCount} running, {failedScrapingJobsCount} failed\r\n        </p>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\QualityDistributionCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":15,"column":41,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":15,"endColumn":91,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[436,464],"text":"Readonly<QualityDistributionCardProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { AlertTriangle } from 'lucide-react';\r\n\r\ninterface DataQualityStats {\r\n  high_quality_count: number;\r\n  medium_quality_count: number;\r\n  low_quality_count: number;\r\n}\r\n\r\ninterface QualityDistributionCardProps {\r\n  dataQualityStats: DataQualityStats;\r\n}\r\n\r\nexport function QualityDistributionCard({ dataQualityStats }: QualityDistributionCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n        <CardTitle className=\"text-sm font-medium\">Quality Distribution</CardTitle>\r\n        <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"text-2xl font-bold text-green-600\">\r\n          {dataQualityStats.high_quality_count ?? 0}\r\n        </div>\r\n        <p className=\"text-xs text-muted-foreground\">\r\n          <span className=\"text-green-600\">{dataQualityStats.high_quality_count ?? 0} high</span>,{' '}\r\n          <span className=\"text-yellow-600\">{dataQualityStats.medium_quality_count ?? 0} medium</span>,{' '}\r\n          <span className=\"text-red-600\">{dataQualityStats.low_quality_count ?? 0} low</span>\r\n        </p>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\RecentErrorsCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":9,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":9,"endColumn":92,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[313,334],"text":"Readonly<RecentErrorsCardProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { AlertTriangle } from 'lucide-react';\r\n\r\ninterface RecentErrorsCardProps {\r\n  failedProcessingQueueItemsCount: number;\r\n}\r\n\r\nexport function RecentErrorsCard({ failedProcessingQueueItemsCount }: RecentErrorsCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n        <CardTitle className=\"text-sm font-medium\">Recent Errors</CardTitle>\r\n        <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"text-2xl font-bold\">{failedProcessingQueueItemsCount}</div>\r\n        <p className=\"text-xs text-muted-foreground\">from data processing queue</p>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\TotalFoodTrucksCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":37,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":104,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[334,358],"text":"Readonly<TotalFoodTrucksCardProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Truck } from 'lucide-react';\r\n\r\ninterface TotalFoodTrucksCardProps {\r\n  totalFoodTrucks: number;\r\n  pendingVerifications: number;\r\n}\r\n\r\nexport function TotalFoodTrucksCard({ totalFoodTrucks, pendingVerifications }: TotalFoodTrucksCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n        <CardTitle className=\"text-sm font-medium\">Total Food Trucks</CardTitle>\r\n        <Truck className=\"h-4 w-4 text-muted-foreground\" />\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"text-2xl font-bold\">{totalFoodTrucks}</div>\r\n        <p className=\"text-xs text-muted-foreground\">\r\n          {pendingVerifications} pending verification\r\n        </p>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\BasicInfoCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":54,"column":31,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":54,"endColumn":60,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[1743,1761],"text":"Readonly<BasicInfoCardProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\n\r\ninterface BasicInfoCardProps {\r\n  truck: { name: string; description?: string; cuisine_type?: string[]; price_range?: string; specialties?: string[] };\r\n}\r\n\r\nfunction CuisineTypeSection({ cuisineType }: { readonly cuisineType?: string[] }) {\r\n  if ((cuisineType == undefined) || cuisineType.length === 0) return;\r\n\r\n  return (\r\n    <div>\r\n      <label className=\"text-sm font-medium text-gray-500\">Cuisine Type</label>\r\n      <div className=\"flex flex-wrap gap-1 mt-1\">\r\n        {cuisineType.map((cuisine: string, index: number) => (\r\n          <Badge key={index} variant=\"secondary\">\r\n            {cuisine}\r\n          </Badge>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PriceRangeSection({ priceRange }: { readonly priceRange?: string }) {\r\n  if ((priceRange == undefined) || priceRange === '') return;\r\n\r\n  return (\r\n    <div>\r\n      <label className=\"text-sm font-medium text-gray-500\">Price Range</label>\r\n      <p className=\"text-gray-900\">{priceRange}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SpecialtiesSection({ specialties }: { readonly specialties?: string[] }) {\r\n  if ((specialties == undefined) || specialties.length === 0) return;\r\n\r\n  return (\r\n    <div>\r\n      <label className=\"text-sm font-medium text-gray-500\">Specialties</label>\r\n      <div className=\"flex flex-wrap gap-1 mt-1\">\r\n        {specialties.map((specialty: string, index: number) => (\r\n          <Badge key={index} variant=\"outline\">\r\n            {specialty}\r\n          </Badge>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function BasicInfoCard({ truck }: BasicInfoCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Basic Information</CardTitle>\r\n        <CardDescription>Core food truck details</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div>\r\n          <label className=\"text-sm font-medium text-gray-500\">Name</label>\r\n          <p className=\"text-lg font-semibold\">{truck.name}</p>\r\n        </div>\r\n\r\n        {(truck.description !== undefined) && truck.description !== '' && (\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-500\">Description</label>\r\n            <p className=\"text-gray-900\">{truck.description}</p>\r\n          </div>\r\n        )}\r\n\r\n        <CuisineTypeSection cuisineType={truck.cuisine_type} />\r\n        <PriceRangeSection priceRange={truck.price_range} />\r\n        <SpecialtiesSection specialties={truck.specialties} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\ContactField.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Mail'.","line":2,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":14,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[37,43],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Phone'.","line":2,"column":16,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[41,48],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Globe' is defined but never used.","line":2,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Globe'.","line":2,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":28,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[48,55],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":12,"column":30,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":18,"endColumn":21,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[353,370],"text":"Readonly<ContactFieldProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":33,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[833,837],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[833,837],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[833,837],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/no-all-duplicated-branches","severity":2,"message":"This conditional operation returns the same value whether the condition is \"true\" or \"false\".","line":40,"column":14,"nodeType":"ConditionalExpression","messageId":"returnsTheSameValue","endLine":40,"endColumn":53}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Mail, Phone, Globe } from 'lucide-react';\r\n\r\ninterface ContactFieldProps {\r\n  icon: React.ComponentType<{ className?: string }>;\r\n  label: string;\r\n  value?: string;\r\n  href?: string;\r\n  unavailableText: string;\r\n}\r\n\r\nexport function ContactField({\r\n  icon: Icon,\r\n  label,\r\n  value,\r\n  href,\r\n  unavailableText\r\n}: ContactFieldProps) {\r\n  if (value == undefined || value === '') {\r\n    return (\r\n      <div className=\"flex items-center gap-3 text-gray-400\">\r\n        <Icon className=\"h-4 w-4\" />\r\n        <span className=\"text-sm\">{unavailableText}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-3\">\r\n      <Icon className=\"h-4 w-4 text-gray-500\" />\r\n      <div>\r\n        <label className=\"text-sm font-medium text-gray-500\">{label}</label>\r\n        {href ? (\r\n          <a\r\n            href={href}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"text-blue-600 hover:text-blue-800 underline\"\r\n          >\r\n            {href.startsWith('http') ? value : value}\r\n          </a>\r\n        ) : (\r\n          <p className=\"text-gray-900\">{value}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\ContactInfoCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":11,"column":33,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":11,"endColumn":64,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[526,546],"text":"Readonly<ContactInfoCardProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":26,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":26,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1027,1052],"text":"((truck.contact_info?.phone) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1027,1052],"text":"((truck.contact_info?.phone) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1027,1052],"text":"(Boolean((truck.contact_info?.phone)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":34,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1304,1329],"text":"((truck.contact_info?.email) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1304,1329],"text":"((truck.contact_info?.email) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1304,1329],"text":"(Boolean((truck.contact_info?.email)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Phone, Mail, Globe } from 'lucide-react';\r\nimport { ContactField } from './ContactField';\r\nimport { SocialMediaLinks } from './SocialMediaLinks';\r\n\r\ninterface ContactInfoCardProps {\r\n  truck: { contact_info?: { phone?: string; email?: string; website?: string }; social_media?: { instagram?: string; facebook?: string; twitter?: string } };\r\n}\r\n\r\nexport function ContactInfoCard({ truck }: ContactInfoCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Phone className=\"h-5 w-5\" />\r\n          Contact Information\r\n        </CardTitle>\r\n        <CardDescription>Phone, email, website, and social media</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <ContactField\r\n          icon={Phone}\r\n          label=\"Phone\"\r\n          value={truck.contact_info?.phone}\r\n          href={truck.contact_info?.phone ? `tel:${truck.contact_info.phone}` : undefined}\r\n          unavailableText=\"No phone number available\"\r\n        />\r\n\r\n        <ContactField\r\n          icon={Mail}\r\n          label=\"Email\"\r\n          value={truck.contact_info?.email}\r\n          href={truck.contact_info?.email ? `mailto:${truck.contact_info.email}` : undefined}\r\n          unavailableText=\"No email address available\"\r\n        />\r\n\r\n        <ContactField\r\n          icon={Globe}\r\n          label=\"Website\"\r\n          value={truck.contact_info?.website}\r\n          href={truck.contact_info?.website}\r\n          unavailableText=\"No website available\"\r\n        />\r\n\r\n        <SocialMediaLinks socialMedia={truck.social_media} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\DataQualityCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":16,"column":33,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":16,"endColumn":81,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[558,578],"text":"Readonly<DataQualityCardProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { formatQualityScore, type QualityCategory } from '@/lib/utils/dataQualityFormatters';\r\nimport { QualityMetricsGrid } from './QualityMetricsGrid';\r\n\r\ninterface DataQualityCardProps {\r\n  truck: {\r\n    data_quality_score?: number;\r\n    verification_status?: string;\r\n    created_at?: string;\r\n    updated_at?: string\r\n  };\r\n  qualityCategory: QualityCategory;\r\n}\r\n\r\nexport function DataQualityCard({ truck, qualityCategory }: DataQualityCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Data Quality Assessment</CardTitle>\r\n        <CardDescription>\r\n          Quality score: {formatQualityScore(truck.data_quality_score)}\r\n          ({qualityCategory.label} quality)\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <QualityMetricsGrid truck={truck} qualityCategory={qualityCategory} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\LocationInfoCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":9,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":9,"endColumn":66,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[356,377],"text":"Readonly<LocationInfoCardProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { MapPin } from 'lucide-react';\r\n\r\ninterface LocationInfoCardProps {\r\n  truck: { current_location?: { address?: string; lat?: number; lng?: number; timestamp?: string } };\r\n}\r\n\r\nexport function LocationInfoCard({ truck }: LocationInfoCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <MapPin className=\"h-5 w-5\" />\r\n          Location Information\r\n        </CardTitle>\r\n        <CardDescription>Current location and address details</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {(truck.current_location?.address === undefined) ? (\r\n          <p className=\"text-gray-400 text-sm\">No address available</p>\r\n        ) : (\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-500\">Address</label>\r\n            <p className=\"text-gray-900\">{truck.current_location.address}</p>\r\n          </div>\r\n        )}\r\n\r\n        {truck.current_location?.lat !== undefined && truck.current_location?.lng !== undefined && (\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-500\">Coordinates</label>\r\n            <p className=\"text-gray-900 font-mono text-sm\">\r\n              {truck.current_location.lat.toFixed(6)}, {truck.current_location.lng.toFixed(6)}\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {truck.current_location?.timestamp != undefined && (\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\r\n            <p className=\"text-gray-900\">\r\n              {new Date(truck.current_location.timestamp).toLocaleString()}\r\n            </p>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\OperatingHoursCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":11,"column":36,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":11,"endColumn":70,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[350,373],"text":"Readonly<OperatingHoursCardProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":35,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":35,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1491,1504],"text":"((dayData?.open) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1491,1504],"text":"((dayData?.open) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1491,1504],"text":"(Boolean((dayData?.open)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Clock } from 'lucide-react';\r\n\r\nimport { type FoodTruck, type OperatingHours } from '@/lib/supabase';\r\n\r\ninterface OperatingHoursCardProps {\r\n  truck: FoodTruck;\r\n}\r\n\r\nexport function OperatingHoursCard({ truck }: OperatingHoursCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Clock className=\"h-5 w-5\" />\r\n          Operating Hours\r\n        </CardTitle>\r\n        <CardDescription>Daily operating schedule</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {(truck.operating_hours !== undefined) && Object.keys(truck.operating_hours).length > 0 ? (\r\n          <div className=\"space-y-2\">\r\n            {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map((day) => {\r\n              const dayData = truck.operating_hours?.[day as keyof OperatingHours];\r\n              const dayName = day.charAt(0).toUpperCase() + day.slice(1);\r\n\r\n              return (\r\n                <div key={day} className=\"flex justify-between items-center py-1\">\r\n                  <span className=\"font-medium text-gray-700\">{dayName}</span>\r\n                  {(() => {\r\n                    if (dayData?.closed === true) {\r\n                      return <span className=\"text-red-600 text-sm\">Closed</span>;\r\n                    }\r\n                    if (dayData?.open && dayData?.close) {\r\n                      return (\r\n                        <span className=\"text-gray-900 text-sm\">\r\n                          {dayData.open} - {dayData.close}\r\n                        </span>\r\n                      );\r\n                    }\r\n                    return <span className=\"text-gray-400 text-sm\">Not specified</span>;\r\n                  })()}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-gray-400 text-sm\">No operating hours available</p>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityMetricsGrid.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":16,"column":36,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":19,"endColumn":27,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[520,543],"text":"Readonly<QualityMetricsGridProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'qualityCategory' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":43,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1191,1207],"text":"(truck.created_at != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1191,1207],"text":"(truck.created_at ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1191,1207],"text":"(Boolean(truck.created_at))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":48,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":48,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1347,1363],"text":"(truck.updated_at != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1347,1363],"text":"(truck.updated_at ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1347,1363],"text":"(Boolean(truck.updated_at))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { formatQualityScore, type QualityCategory } from '@/lib/utils/dataQualityFormatters';\r\nimport { QualityScoreMetric } from './QualityScoreMetric';\r\n\r\ninterface QualityMetricsGridProps {\r\n  truck: {\r\n    data_quality_score?: number;\r\n    verification_status?: string;\r\n    created_at?: string;\r\n    updated_at?: string\r\n  };\r\n  qualityCategory: QualityCategory;\r\n}\r\n\r\nexport function QualityMetricsGrid({\r\n  truck,\r\n  qualityCategory\r\n}: QualityMetricsGridProps) {\r\n  return (\r\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n      <QualityScoreMetric\r\n        value={\r\n          <div className=\"text-2xl font-bold text-blue-600\">\r\n            {formatQualityScore(truck.data_quality_score)}\r\n          </div>\r\n        }\r\n        label=\"Overall Score\"\r\n        className=\"\"\r\n      />\r\n\r\n      <QualityScoreMetric\r\n        value={\r\n          <Badge variant={truck.verification_status === 'verified' ? 'default' : 'outline'}>\r\n            {truck.verification_status}\r\n          </Badge>\r\n        }\r\n        label=\"Status\"\r\n        className=\"\"\r\n      />\r\n\r\n      <QualityScoreMetric\r\n        value={truck.created_at ? new Date(truck.created_at).toLocaleDateString() : 'N/A'}\r\n        label=\"Created\"\r\n      />\r\n\r\n      <QualityScoreMetric\r\n        value={truck.updated_at ? new Date(truck.updated_at).toLocaleDateString() : 'N/A'}\r\n        label=\"Updated\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityScoreMetric.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":9,"column":36,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":13,"endColumn":27,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[232,255],"text":"Readonly<QualityScoreMetricProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\n\r\ninterface QualityScoreMetricProps {\r\n  value: React.ReactNode;\r\n  label: string;\r\n  className?: string;\r\n}\r\n\r\nexport function QualityScoreMetric({\r\n  value,\r\n  label,\r\n  className = \"text-gray-900\"\r\n}: QualityScoreMetricProps) {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <div className={`text-lg font-semibold ${className}`}>\r\n        {value}\r\n      </div>\r\n      <div className=\"text-sm text-gray-500\">{label}</div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\RatingsReviewsCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":11,"column":36,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":11,"endColumn":70,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[335,358],"text":"Readonly<RatingsReviewsCardProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Star, Users } from 'lucide-react';\r\n\r\nimport { type FoodTruck } from '@/lib/supabase';\r\n\r\ninterface RatingsReviewsCardProps {\r\n  truck: FoodTruck;\r\n}\r\n\r\nexport function RatingsReviewsCard({ truck }: RatingsReviewsCardProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Star className=\"h-5 w-5\" />\r\n          Ratings & Reviews\r\n        </CardTitle>\r\n        <CardDescription>Customer feedback and ratings</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {(truck.average_rating === undefined) ? (\r\n          <p className=\"text-gray-400 text-sm\">No ratings available</p>\r\n        ) : (\r\n          <div className=\"flex items-center gap-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"flex\">\r\n                {[1, 2, 3, 4, 5].map((star) => (\r\n                  <Star\r\n                    key={star}\r\n                    className={`h-5 w-5 ${\r\n                      star <= Math.round(truck.average_rating ?? 0)\r\n                        ? 'text-yellow-400 fill-current'\r\n                        : 'text-gray-300'\r\n                    }`}\r\n                  />\r\n                ))}\r\n              </div>\r\n              <span className=\"text-lg font-semibold\">{(truck.average_rating ?? 0).toFixed(1)}</span>\r\n            </div>\r\n            {(truck.review_count !== undefined) && (\r\n              <div className=\"flex items-center gap-1 text-gray-600\">\r\n                <Users className=\"h-4 w-4\" />\r\n                <span className=\"text-sm\">{truck.review_count} reviews</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\SocialMediaLinks.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":8,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":8,"endColumn":72,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[237,258],"text":"Readonly<SocialMediaLinksProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":10,"column":12,"nodeType":"Literal","messageId":"error","endLine":10,"endColumn":16,"suggestions":[{"messageId":"remove","fix":{"range":[338,342],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[338,342],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":25,"column":60,"nodeType":"Literal","messageId":"error","endLine":25,"endColumn":64,"suggestions":[{"messageId":"remove","fix":{"range":[1019,1023],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[1019,1023],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Globe } from 'lucide-react';\r\n\r\ninterface SocialMediaLinksProps {\r\n  socialMedia?: { instagram?: string; facebook?: string; twitter?: string };\r\n}\r\n\r\nexport function SocialMediaLinks({ socialMedia }: SocialMediaLinksProps) {\r\n  if (!socialMedia || Object.keys(socialMedia).length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const socialPlatforms = [\r\n    { key: 'instagram' as const, name: 'Instagram', baseUrl: 'https://instagram.com/', color: 'pink' },\r\n    { key: 'facebook' as const, name: 'Facebook', baseUrl: 'https://facebook.com/', color: 'blue' },\r\n    { key: 'twitter' as const, name: 'Twitter', baseUrl: 'https://twitter.com/', color: 'sky' },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <label className=\"text-sm font-medium text-gray-500\">Social Media</label>\r\n      <div className=\"flex flex-wrap gap-2 mt-2\">\r\n        {socialPlatforms.map(({ key, name, baseUrl, color }) => {\r\n          const handle = socialMedia[key];\r\n          if (handle == undefined || handle === '') return null;\r\n\r\n          return (\r\n            <a\r\n              key={key}\r\n              href={`${baseUrl}${handle}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className={`flex items-center gap-1 px-2 py-1 bg-${color}-100 text-${color}-800 rounded-md text-sm hover:bg-${color}-200`}\r\n            >\r\n              <Globe className=\"h-3 w-3\" />\r\n              {name}\r\n            </a>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckDetailHeader.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":14,"column":35,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":18,"endColumn":26,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[514,536],"text":"Readonly<TruckDetailHeaderProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `error` typed value.","line":37,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Edit, ArrowLeft } from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { type QualityCategory } from '@/lib/utils/data-quality-formatters';\r\n\r\ninterface TruckDetailHeaderProps {\r\n  truck: { id: string; name: string };\r\n  badgeClasses: string;\r\n  qualityCategory: QualityCategory;\r\n}\r\n\r\nexport function TruckDetailHeader({\r\n  truck,\r\n  badgeClasses,\r\n  qualityCategory\r\n}: TruckDetailHeaderProps) {\r\n  return (\r\n    <div className=\"flex items-center justify-between\">\r\n      <div className=\"flex items-center gap-4\">\r\n        <Button variant=\"outline\" size=\"sm\" asChild>\r\n          <Link href=\"/admin/food-trucks\">\r\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n            Back\r\n          </Link>\r\n        </Button>\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">{truck.name}</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Food truck details and data quality information\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex items-center gap-2\">\r\n        <Badge className={badgeClasses}>\r\n          {qualityCategory.label} Quality\r\n        </Badge>\r\n        <Button asChild>\r\n          <Link href={`/admin/food-trucks/${truck.id}/edit`}>\r\n            <Edit className=\"h-4 w-4 mr-2\" />\r\n            Edit\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\FailedProcessingQueueTable.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":24,"column":44,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":24,"endColumn":96,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[700,731],"text":"Readonly<FailedProcessingQueueTableProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { DataProcessingQueue } from '@/lib/supabase';\r\n\r\ninterface FailedProcessingQueueTableProps {\r\n  processingQueue: {\r\n    pending: DataProcessingQueue[];\r\n    processing: DataProcessingQueue[];\r\n    failed: DataProcessingQueue[];\r\n    completed: DataProcessingQueue[];\r\n  };\r\n}\r\n\r\nexport function FailedProcessingQueueTable({ processingQueue }: FailedProcessingQueueTableProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Failed Data Processing Queue Items</CardTitle>\r\n        <CardDescription>\r\n          Items that failed during data processing (e.g., Gemini API errors).\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Table>\r\n          <TableHeader>\r\n            <TableRow>\r\n              <TableHead>Truck ID</TableHead>\r\n              <TableHead>Processing Type</TableHead>\r\n              <TableHead>Status</TableHead>\r\n              <TableHead>Created At</TableHead>\r\n              <TableHead className=\"text-right\">Errors</TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {processingQueue.failed.map((item: DataProcessingQueue) => (\r\n              <TableRow key={item.id}>\r\n                <TableCell className=\"font-medium\">{item.truck_id ?? 'N/A'}</TableCell>\r\n                <TableCell>{item.processing_type}</TableCell>\r\n                <TableCell>\r\n                  <Badge variant=\"destructive\">{item.status}</Badge>\r\n                </TableCell>\r\n                <TableCell>{new Date(item.created_at).toLocaleString()}</TableCell>\r\n                <TableCell className=\"text-right\">\r\n                  <Button variant=\"outline\" size=\"sm\">\r\n                    View Details\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\PipelineStatisticsCards.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":21,"column":41,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":21,"endColumn":104,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[689,717],"text":"Readonly<PipelineStatisticsCardsProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { RefreshCcw, PlayCircle, XCircle } from 'lucide-react';\r\nimport { ScrapingJob, DataProcessingQueue } from '@/lib/supabase';\r\n\r\ninterface PipelineStatisticsCardsProps {\r\n  scrapingJobs: {\r\n    pending: ScrapingJob[];\r\n    running: ScrapingJob[];\r\n    failed: ScrapingJob[];\r\n    completed: ScrapingJob[];\r\n  };\r\n  processingQueue: {\r\n    pending: DataProcessingQueue[];\r\n    processing: DataProcessingQueue[];\r\n    failed: DataProcessingQueue[];\r\n    completed: DataProcessingQueue[];\r\n  };\r\n}\r\n\r\nexport function PipelineStatisticsCards({ scrapingJobs, processingQueue }: PipelineStatisticsCardsProps) {\r\n  return (\r\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n          <CardTitle className=\"text-sm font-medium\">Scraping Jobs (Pending)</CardTitle>\r\n          <RefreshCcw className=\"h-4 w-4 text-muted-foreground\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-2xl font-bold\">{scrapingJobs.pending.length}</div>\r\n        </CardContent>\r\n      </Card>\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n          <CardTitle className=\"text-sm font-medium\">Scraping Jobs (Running)</CardTitle>\r\n          <PlayCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-2xl font-bold\">{scrapingJobs.running.length}</div>\r\n        </CardContent>\r\n      </Card>\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n          <CardTitle className=\"text-sm font-medium\">Scraping Jobs (Failed)</CardTitle>\r\n          <XCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-2xl font-bold\">{scrapingJobs.failed.length}</div>\r\n        </CardContent>\r\n      </Card>\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n          <CardTitle className=\"text-sm font-medium\">Processing Queue (Failed)</CardTitle>\r\n          <XCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-2xl font-bold\">{processingQueue.failed.length}</div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\RecentScrapingJobsTable.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":34,"column":41,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":34,"endColumn":87,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[838,866],"text":"Readonly<RecentScrapingJobsTableProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { ScrapingJob } from '@/lib/supabase';\r\n\r\nfunction getBadgeVariant(status: string) {\r\n  if (status === 'completed') {\r\n    return 'default';\r\n  }\r\n  if (status === 'failed') {\r\n    return 'destructive';\r\n  }\r\n  return 'outline';\r\n}\r\n\r\ninterface RecentScrapingJobsTableProps {\r\n  scrapingJobs: {\r\n    pending: ScrapingJob[];\r\n    running: ScrapingJob[];\r\n    failed: ScrapingJob[];\r\n    completed: ScrapingJob[];\r\n  };\r\n}\r\n\r\nexport function RecentScrapingJobsTable({ scrapingJobs }: RecentScrapingJobsTableProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Recent Scraping Jobs</CardTitle>\r\n        <CardDescription>Overview of recent web scraping activities.</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Table>\r\n          <TableHeader>\r\n            <TableRow>\r\n              <TableHead>Job Type</TableHead>\r\n              <TableHead>Target URL/Handle</TableHead>\r\n              <TableHead>Status</TableHead>\r\n              <TableHead>Priority</TableHead>\r\n              <TableHead>Retries</TableHead>\r\n              <TableHead>Scheduled At</TableHead>\r\n              <TableHead>Completed At</TableHead>\r\n              <TableHead className=\"text-right\">Actions</TableHead>\r\n            </TableRow>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {[\r\n              ...scrapingJobs.pending,\r\n              ...scrapingJobs.running,\r\n              ...scrapingJobs.failed,\r\n              ...scrapingJobs.completed,\r\n            ]\r\n              .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\r\n              .slice(0, 20) // Show latest 20 jobs\r\n              .map((job: ScrapingJob) => (\r\n                <TableRow key={job.id}>\r\n                  <TableCell className=\"font-medium\">{job.job_type}</TableCell>\r\n                  <TableCell>{job.target_url ?? job.target_handle}</TableCell>\r\n                  <TableCell>\r\n                    <Badge variant={getBadgeVariant(job.status)}>{job.status}</Badge>\r\n                  </TableCell>\r\n                  <TableCell>{job.priority}</TableCell>\r\n                  <TableCell>\r\n                    {job.retry_count}/{job.max_retries}\r\n                  </TableCell>\r\n                  <TableCell>{new Date(job.scheduled_at).toLocaleString()}</TableCell>\r\n                  <TableCell>\r\n                    {job.completed_at == undefined ? 'N/A' : new Date(job.completed_at).toLocaleString()}\r\n                  </TableCell>\r\n                  <TableCell className=\"text-right\">\r\n                    {job.status === 'failed' && (\r\n                      <Button variant=\"outline\" size=\"sm\" className=\"mr-2\">\r\n                        Retry\r\n                      </Button>\r\n                    )}\r\n                    <Button variant=\"outline\" size=\"sm\">\r\n                      View Logs\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ConnectionStatusHeader.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":14,"column":40,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":20,"endColumn":31,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[486,513],"text":"Readonly<ConnectionStatusHeaderProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { RefreshCw, Zap } from 'lucide-react';\r\n\r\ninterface ConnectionStatusHeaderProps {\r\n  isConnected: boolean;\r\n  isConnecting: boolean;\r\n  lastEventTime?: Date;\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n}\r\n\r\nexport function ConnectionStatusHeader({\r\n  isConnected,\r\n  isConnecting,\r\n  lastEventTime,\r\n  connect,\r\n  disconnect\r\n}: ConnectionStatusHeaderProps) {\r\n  return (\r\n    <CardHeader className=\"pb-3\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <CardTitle className=\"text-lg flex items-center gap-2\">\r\n          <Zap className=\"h-5 w-5\" />\r\n          Real-time System Status\r\n        </CardTitle>\r\n        <div className=\"flex items-center gap-2\">\r\n          {isConnected && (\r\n            <div className=\"flex items-center gap-1 text-sm text-green-600\">\r\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\r\n              Live\r\n            </div>\r\n          )}\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={isConnected ? disconnect : connect}\r\n            disabled={isConnecting}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${isConnecting ? 'animate-spin' : ''}`} />\r\n            {(() => {\r\n              if (isConnected) return 'Disconnect';\r\n              if (isConnecting) return 'Connecting...';\r\n              return 'Connect';\r\n            })()}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      {lastEventTime && (\r\n        <p className=\"text-sm text-muted-foreground\">\r\n          Last update: {lastEventTime.toLocaleTimeString()}\r\n        </p>\r\n      )}\r\n    </CardHeader>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\EventControls.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":31,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":87,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[293,311],"text":"Readonly<EventControlsProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\n\r\ninterface EventControlsProps {\r\n  recentEventsCount: number;\r\n  onClearEvents: () => void;\r\n}\r\n\r\nexport function EventControls({ recentEventsCount, onClearEvents }: EventControlsProps) {\r\n  return (\r\n    <div className=\"mt-4 flex items-center gap-2\">\r\n      <Button\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        onClick={onClearEvents}\r\n        disabled={recentEventsCount === 0}\r\n      >\r\n        Clear Events ({recentEventsCount})\r\n      </Button>\r\n      <Badge variant=\"secondary\">\r\n        {recentEventsCount} events in buffer\r\n      </Badge>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ScrapingJobsStatus.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[84,87],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[84,87],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":7,"column":36,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":7,"endColumn":77,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[148,171],"text":"Readonly<ScrapingJobsStatusProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":8,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[183,195],"text":"(Boolean(scrapingJobs))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":8,"column":29,"nodeType":"Literal","messageId":"error","endLine":8,"endColumn":33,"suggestions":[{"messageId":"remove","fix":{"range":[204,208],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[204,208],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .active on an `any` value.","line":16,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":16,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .completed on an `any` value.","line":20,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pending on an `any` value.","line":24,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .failed on an `any` value.","line":28,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":66}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\n\r\ninterface ScrapingJobsStatusProps {\r\n  scrapingJobs?: any;\r\n}\r\n\r\nexport function ScrapingJobsStatus({ scrapingJobs }: ScrapingJobsStatusProps) {\r\n  if (!scrapingJobs) return null;\r\n\r\n  return (\r\n    <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n      <h4 className=\"text-sm font-medium text-blue-900 mb-2\">Scraping Jobs Status</h4>\r\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n        <div>\r\n          <span className=\"text-blue-600\">Active:</span>\r\n          <span className=\"ml-1 font-medium\">{scrapingJobs.active}</span>\r\n        </div>\r\n        <div>\r\n          <span className=\"text-green-600\">Completed:</span>\r\n          <span className=\"ml-1 font-medium\">{scrapingJobs.completed}</span>\r\n        </div>\r\n        <div>\r\n          <span className=\"text-yellow-600\">Pending:</span>\r\n          <span className=\"ml-1 font-medium\">{scrapingJobs.pending}</span>\r\n        </div>\r\n        <div>\r\n          <span className=\"text-red-600\">Failed:</span>\r\n          <span className=\"ml-1 font-medium\">{scrapingJobs.failed}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\StatusHelpers.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusMetric' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'StatusMetric'.","line":3,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":3,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[119,171],"text":""},"desc":"Remove this import statement"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { AlertTriangle, CheckCircle, Clock, TrendingUp, TrendingDown } from 'lucide-react';\r\nimport { StatusMetric } from './useSystemMetrics';\r\n\r\nexport const getStatusColor = (status: string) => {\r\n  switch (status) {\r\n    case 'healthy': { return 'text-green-600 bg-green-50 border-green-200';\r\n    }\r\n    case 'warning': { return 'text-yellow-600 bg-yellow-50 border-yellow-200';\r\n    }\r\n    case 'error': { return 'text-red-600 bg-red-50 border-red-200';\r\n    }\r\n    default: { return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  }\r\n};\r\n\r\nexport const getStatusIcon = (status: string) => {\r\n  switch (status) {\r\n    case 'healthy': { return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n    }\r\n    case 'warning': { return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\r\n    }\r\n    case 'error': { return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\r\n    }\r\n    default: { return <Clock className=\"h-4 w-4 text-gray-600\" />;\r\n    }\r\n  }\r\n};\r\n\r\nexport const getTrendIcon = (trend?: string) => {\r\n  switch (trend) {\r\n    case 'up': { return <TrendingUp className=\"h-3 w-3 text-green-600\" />;\r\n    }\r\n    case 'down': { return <TrendingDown className=\"h-3 w-3 text-red-600\" />;\r\n    }\r\n    default: { return;\r\n    }\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlerts.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":20,"column":30,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":20,"endColumn":109,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[554,571],"text":"Readonly<SystemAlertsProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":21,"column":35,"nodeType":"Literal","messageId":"error","endLine":21,"endColumn":39,"suggestions":[{"messageId":"remove","fix":{"range":[610,614],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[610,614],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\n\r\ninterface SystemAlert {\r\n  id: string;\r\n  type: 'info' | 'warning' | 'error' | 'critical';\r\n  message: string;\r\n  timestamp: string;\r\n  acknowledged?: boolean;\r\n}\r\n\r\ninterface SystemAlertsProps {\r\n  alerts: SystemAlert[];\r\n  showDetails: boolean;\r\n  onToggleDetails: () => void;\r\n  onAcknowledgeAlert: (alertId: string) => void;\r\n}\r\n\r\nexport function SystemAlerts({ alerts, showDetails, onToggleDetails, onAcknowledgeAlert }: SystemAlertsProps) {\r\n  if (alerts.length === 0) return null;\r\n\r\n  return (\r\n    <div className=\"mt-4\">\r\n      <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Recent Alerts</h4>\r\n      <div className=\"space-y-2\">\r\n        {alerts.slice(0, 3).map((alert) => (\r\n          <div\r\n            key={alert.id}\r\n            className={`p-2 rounded border-l-4 ${(() => {\r\n              if (alert.type === 'critical') return 'border-l-red-500 bg-red-50';\r\n              if (alert.type === 'error') return 'border-l-red-400 bg-red-50';\r\n              return 'border-l-yellow-400 bg-yellow-50';\r\n            })()} ${alert.acknowledged === true ? 'opacity-50' : ''}`}\r\n          >\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Badge variant={alert.type === 'critical' ? 'destructive' : 'secondary'}>\r\n                  {alert.type}\r\n                </Badge>\r\n                <span className=\"text-sm\">{alert.message}</span>\r\n              </div>\r\n              {alert.acknowledged !== true && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => onAcknowledgeAlert(alert.id)}\r\n                >\r\n                  Acknowledge\r\n                </Button>\r\n              )}\r\n            </div>\r\n            <p className=\"text-xs text-gray-500 mt-1\">\r\n              {new Date(alert.timestamp).toLocaleString()}\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {alerts.length > 3 && (\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"mt-2\"\r\n          onClick={onToggleDetails}\r\n        >\r\n          {showDetails ? 'Hide' : 'Show'} {alerts.length - 3} more alerts\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemMetricsGrid.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":11,"column":35,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":11,"endColumn":115,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[399,421],"text":"Readonly<SystemMetricsGridProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { StatusMetric } from './useSystemMetrics';\r\n\r\ninterface SystemMetricsGridProps {\r\n  metrics: StatusMetric[];\r\n  getStatusColor: (status: string) => string;\r\n  getStatusIcon: (status: string) => React.ReactNode;\r\n  getTrendIcon: (trend?: string) => React.ReactNode;\r\n}\r\n\r\nexport function SystemMetricsGrid({ metrics, getStatusColor, getStatusIcon, getTrendIcon }: SystemMetricsGridProps) {\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n      {metrics.map((metric, index) => (\r\n        <div\r\n          key={index}\r\n          className={`p-3 rounded-lg border ${getStatusColor(metric.status)}`}\r\n        >\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n              {metric.icon}\r\n              <span className=\"text-sm font-medium\">{metric.label}</span>\r\n            </div>\r\n            {getStatusIcon(metric.status)}\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-lg font-bold\">\r\n              {metric.value}{metric.unit}\r\n            </span>\r\n            {getTrendIcon(metric.trend)}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemMetrics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[510,513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[510,513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .scrapingJobs on an `any` value.","line":36,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .scrapingJobs on an `any` value.","line":37,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":42,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":42,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .systemHealth on an `any` value.","line":42,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .systemHealth on an `any` value.","line":44,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":53,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dataQuality on an `any` value.","line":53,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":57,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":57,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dataQuality on an `any` value.","line":57,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":49}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Wifi, WifiOff, Activity, Server, Database } from 'lucide-react';\r\n\r\nexport interface StatusMetric {\r\n  label: string;\r\n  value: number | string;\r\n  unit?: string;\r\n  trend?: 'up' | 'down' | 'stable';\r\n  status: 'healthy' | 'warning' | 'error';\r\n  icon: React.ReactNode;\r\n}\r\n\r\nexport function useSystemMetrics({ isConnected, isConnecting, connectionError, latestMetrics }: {\r\n  isConnected: boolean;\r\n  isConnecting: boolean;\r\n  connectionError?: string;\r\n  latestMetrics?: any;\r\n}): StatusMetric[] {\r\n  return [\r\n    {\r\n      label: 'Connection Status',\r\n      value: (() => {\r\n        if (isConnected) return 'Connected';\r\n        if (isConnecting) return 'Connecting...';\r\n        return 'Disconnected';\r\n      })(),\r\n      status: (() => {\r\n        if (isConnected) return 'healthy';\r\n        if (connectionError === undefined) return 'warning';\r\n        return 'error';\r\n      })(),\r\n      icon: isConnected ? <Wifi className=\"h-4 w-4\" /> : <WifiOff className=\"h-4 w-4\" />\r\n    },\r\n    {\r\n      label: 'Active Jobs',\r\n      value: latestMetrics?.scrapingJobs.active ?? 0,\r\n      status: (latestMetrics?.scrapingJobs.active ?? 0) > 0 ? 'healthy' : 'warning',\r\n      icon: <Activity className=\"h-4 w-4\" />\r\n    },\r\n    {\r\n      label: 'System Health',\r\n      value: latestMetrics?.systemHealth.status ?? 'unknown',\r\n      status: (() => {\r\n        const healthStatus = latestMetrics?.systemHealth.status;\r\n        if (healthStatus === 'healthy') return 'healthy';\r\n        if (healthStatus === 'warning') return 'warning';\r\n        return 'error';\r\n      })(),\r\n      icon: <Server className=\"h-4 w-4\" />\r\n    },\r\n    {\r\n      label: 'Data Quality',\r\n      value: latestMetrics?.dataQuality.averageScore ?? 0,\r\n      unit: '%',\r\n      trend: 'stable',\r\n      status: (() => {\r\n        const score = latestMetrics?.dataQuality.averageScore ?? 0;\r\n        if (score >= 80) return 'healthy';\r\n        if (score >= 60) return 'warning';\r\n        return 'error';\r\n      })(),\r\n      icon: <Database className=\"h-4 w-4\" />\r\n    }\r\n  ];\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\users\\UserTable.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":26,"column":27,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":26,"endColumn":52,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[541,555],"text":"Readonly<UserTableProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport Link from 'next/link';\r\n\r\ninterface UserDisplayData {\r\n  id: string;\r\n  email: string | undefined;\r\n  created_at: string;\r\n  last_sign_in_at: string | undefined;\r\n  role: string;\r\n}\r\n\r\ninterface UserTableProps {\r\n  users: UserDisplayData[];\r\n}\r\n\r\nexport function UserTable({ users }: UserTableProps) {\r\n  return (\r\n    <Table>\r\n      <TableHeader>\r\n        <TableRow>\r\n          <TableHead>Email</TableHead>\r\n          <TableHead>Role</TableHead>\r\n          <TableHead>Created At</TableHead>\r\n          <TableHead>Last Sign In</TableHead>\r\n          <TableHead className=\"text-right\">Actions</TableHead>\r\n        </TableRow>\r\n      </TableHeader>\r\n      <TableBody>\r\n        {users.map((user) => (\r\n          <TableRow key={user.id}>\r\n            <TableCell className=\"font-medium\">{user.email}</TableCell>\r\n            <TableCell>\r\n              <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\r\n                {user.role}\r\n              </Badge>\r\n            </TableCell>\r\n            <TableCell>{new Date(user.created_at).toLocaleDateString()}</TableCell>\r\n            <TableCell>\r\n              {user.last_sign_in_at === undefined\r\n                ? 'N/A'\r\n                : new Date(user.last_sign_in_at).toLocaleDateString()}\r\n            </TableCell>\r\n            <TableCell className=\"text-right\">\r\n              <Button variant=\"outline\" size=\"sm\" asChild>\r\n                <Link href={`/admin/users/${user.id}`}>Edit</Link>\r\n              </Button>\r\n            </TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MainContent.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":15,"column":29,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":21,"endColumn":20,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[631,647],"text":"Readonly<MainContentProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\nimport { MapSection } from './MapSection';\r\nimport { TruckListSection } from './TruckListSection';\r\nimport { formatPrice } from '@/lib/utils/foodTruckHelpers';\r\n\r\ninterface MainContentProps {\r\n  filteredTrucks: FoodTruck[];\r\n  userLocation: { lat: number; lng: number } | undefined;\r\n  selectedTruckId: string | undefined;\r\n  setSelectedTruckId: (id: string | undefined) => void;\r\n  isOpen: (truck: FoodTruck) => boolean;\r\n}\r\n\r\nexport function MainContent({\r\n  filteredTrucks,\r\n  userLocation,\r\n  selectedTruckId,\r\n  setSelectedTruckId,\r\n  isOpen\r\n}: MainContentProps) {\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-6\">\r\n      <div className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n          <MapSection\r\n            filteredTrucks={filteredTrucks}\r\n            userLocation={userLocation}\r\n            selectedTruckId={selectedTruckId}\r\n            setSelectedTruckId={setSelectedTruckId}\r\n          />\r\n          <TruckListSection\r\n            filteredTrucks={filteredTrucks}\r\n            selectedTruckId={selectedTruckId}\r\n            setSelectedTruckId={setSelectedTruckId}\r\n            isOpen={isOpen}\r\n            userLocation={userLocation}\r\n            formatPrice={formatPrice}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MapSection.tsx","messages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":22,"column":88,"nodeType":null,"endLine":22,"endColumn":91,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[790,793],"text":"=="}}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":34,"column":28,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":39,"endColumn":19,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[1226,1241],"text":"Readonly<MapSectionProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport dynamic from 'next/dynamic';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\n\r\nconst MapDisplay = dynamic(() => import('@/components/MapDisplay'), {\r\n  ssr: false,\r\n  loading: () => (\r\n    <div className=\"h-96 flex items-center justify-center bg-gray-100 dark:bg-slate-800 rounded-lg\">\r\n      <p>Loading map...</p>\r\n    </div>\r\n  ),\r\n});\r\n\r\n// Helper function to get selected truck location\r\nfunction getSelectedTruckLocation(\r\n  selectedTruckId: string | undefined,\r\n  filteredTrucks: FoodTruck[]\r\n): [number, number] | undefined {\r\n  if (selectedTruckId === undefined) return undefined;\r\n\r\n  const truck = filteredTrucks.find((t) => t.id === selectedTruckId);\r\n  return (truck?.current_location?.lat === undefined) || (truck?.current_location?.lng === undefined)\r\n    ? undefined\r\n    : [truck.current_location.lat, truck.current_location.lng];\r\n}\r\n\r\ninterface MapSectionProps {\r\n  filteredTrucks: FoodTruck[];\r\n  userLocation: { lat: number; lng: number } | undefined;\r\n  selectedTruckId: string | undefined;\r\n  setSelectedTruckId: (id: string | undefined) => void;\r\n}\r\n\r\nexport function MapSection({\r\n  filteredTrucks,\r\n  userLocation,\r\n  selectedTruckId,\r\n  setSelectedTruckId\r\n}: MapSectionProps) {\r\n  return (\r\n    <div\r\n      key=\"map-container-parent\"\r\n      className=\"lg:col-span-2 h-80 min-h-[320px] sm:h-96 sm:min-h-[400px] dark:bg-slate-800 rounded-lg shadow\"\r\n    >\r\n      <MapDisplay\r\n        trucks={filteredTrucks}\r\n        userLocation={userLocation}\r\n        onSelectTruck={setSelectedTruckId}\r\n        defaultCenter={\r\n          userLocation ? [userLocation.lat, userLocation.lng] : [37.7749, -122.4194]\r\n        }\r\n        selectedTruckLocation={getSelectedTruckLocation(selectedTruckId, filteredTrucks)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Link'.","line":2,"column":8,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":12,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[26,57],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":22,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":29,"endColumn":25,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[793,814],"text":"Readonly<TruckListSectionProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport Link from 'next/link';\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from '@/components/ui/accordion';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { TruckCard } from '@/components/TruckCard';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\n\r\ninterface TruckListSectionProps {\r\n  filteredTrucks: FoodTruck[];\r\n  selectedTruckId: string | undefined;\r\n  setSelectedTruckId: (id: string | undefined) => void;\r\n  isOpen: (truck: FoodTruck) => boolean;\r\n  userLocation: { lat: number; lng: number } | undefined;\r\n  formatPrice: (price: number) => string;\r\n}\r\n\r\nexport function TruckListSection({\r\n  filteredTrucks,\r\n  selectedTruckId,\r\n  setSelectedTruckId,\r\n  isOpen,\r\n  userLocation,\r\n  formatPrice,\r\n}: TruckListSectionProps) {\r\n  return (\r\n    <div className=\"lg:col-span-1 space-y-4\">\r\n      <h3 className=\"text-lg font-semibold dark:text-gray-100\">\r\n        Nearby Trucks ({filteredTrucks.length})\r\n      </h3>\r\n      <Accordion\r\n        type=\"single\"\r\n        collapsible\r\n        className=\"w-full\"\r\n        value={selectedTruckId ?? undefined}\r\n        onValueChange={(value: string | undefined) =>\r\n          setSelectedTruckId((currentId) => (value === currentId ? undefined : value))\r\n        }\r\n      >\r\n        {filteredTrucks.map((truck) => (\r\n          <AccordionItem value={truck.id} key={truck.id}>\r\n            <AccordionTrigger className=\"flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-slate-700 rounded-md\">\r\n              <div className=\"flex-1 text-left\">\r\n                <h4 className=\"font-medium dark:text-gray-100\">{truck.name}</h4>\r\n                {truck.current_location?.address && (\r\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-1\">\r\n                    {truck.current_location.address}\r\n                  </p>\r\n                )}\r\n              </div>\r\n              <Badge variant={isOpen(truck) ? 'default' : 'secondary'}>\r\n                {isOpen(truck) ? 'Open' : 'Closed'}\r\n              </Badge>\r\n            </AccordionTrigger>\r\n            <AccordionContent>\r\n              <TruckCard\r\n                truck={truck}\r\n                isOpen={isOpen(truck)}\r\n                onSelectTruck={() => setSelectedTruckId(truck.id)}\r\n                userLocation={userLocation}\r\n                formatPrice={formatPrice}\r\n                hideHeader={true}\r\n              />\r\n            </AccordionContent>\r\n          </AccordionItem>\r\n        ))}\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\ApiMonitoringDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[110,113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[110,113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":10,"column":59,"nodeType":"Literal","messageId":"error","endLine":10,"endColumn":63,"suggestions":[{"messageId":"replace","fix":{"range":[245,249],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":12,"column":53,"nodeType":"Literal","messageId":"error","endLine":12,"endColumn":57,"suggestions":[{"messageId":"replace","fix":{"range":[354,358],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":17,"column":16,"nodeType":"Literal","messageId":"error","endLine":17,"endColumn":20,"suggestions":[{"messageId":"replace","fix":{"range":[460,464],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":21,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":21,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<APIUsageData | null>`.","line":22,"column":18,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":22,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[700,703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[700,703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":24,"column":18,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":24,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":24,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":24,"endColumn":32,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[725,739],"text":"(Boolean(error_.message))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":24,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":32},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[740,742],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":29,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":29,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[829,829],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[829,829],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":33,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[919,924],"text":"error != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[919,924],"text":"error ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[919,924],"text":"Boolean(error)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":40,"column":37,"nodeType":"Literal","messageId":"error","endLine":40,"endColumn":41,"suggestions":[{"messageId":"replace","fix":{"range":[1296,1300],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\n\r\ninterface APIUsageData {\r\n  success: boolean;\r\n  data: any;\r\n  timestamp: string;\r\n}\r\n\r\nexport function ApiMonitoringDashboard() {\r\n  const [usage, setUsage] = useState<APIUsageData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchUsage() {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const res = await fetch('/api/monitoring/api-usage');\r\n        if (!res.ok) throw new Error('Failed to fetch API usage');\r\n        const data = await res.json();\r\n        setUsage(data);\r\n      } catch (error_: any) {\r\n        setError(error_.message || 'Unknown error');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchUsage();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading API usage...</div>;\r\n  if (error) return <div className=\"text-red-600\">Error: {error}</div>;\r\n  if (!usage) return <div>No data available.</div>;\r\n\r\n  return (\r\n    <div className=\"mt-4 p-4 border rounded bg-muted\">\r\n      <h2 className=\"text-lg font-semibold mb-2\">API Usage Monitoring</h2>\r\n      <pre className=\"text-xs bg-background p-2 rounded overflow-x-auto\">\r\n        {JSON.stringify(usage.data, null, 2)}\r\n      </pre>\r\n      <div className=\"text-xs text-muted-foreground mt-2\">Last updated: {usage.timestamp}</div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\TechnicalDetailsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\ErrorDisplay.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":4,"column":30,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":4,"endColumn":59,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[157,175],"text":"Readonly<{ error?: string }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":5,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":5,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[186,192],"text":"(error == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[187,192],"text":"(error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[186,192],"text":"(!Boolean(error))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":5,"column":38,"nodeType":"Literal","messageId":"error","endLine":5,"endColumn":42,"suggestions":[{"messageId":"remove","fix":{"range":[217,221],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[217,221],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\n\r\nexport function ErrorDisplay({ error }: { error?: string }) {\r\n  if (!error || error === '') return null;\r\n\r\n  return (\r\n    <Card className=\"border-red-500\">\r\n      <CardHeader>\r\n        <CardTitle className=\"text-red-600\">Test Failed</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <p>{error}</p>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultCard.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":6,"column":33,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":6,"endColumn":99,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[287,330],"text":"Readonly<{ stageName: string; result?: StageResult }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":7,"column":23,"nodeType":"Literal","messageId":"error","endLine":7,"endColumn":27,"suggestions":[{"messageId":"remove","fix":{"range":[357,361],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[357,361],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":55,"column":44,"nodeType":"Literal","messageId":"error","endLine":55,"endColumn":48,"suggestions":[{"messageId":"replace","fix":{"range":[1918,1922],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":63,"column":52,"nodeType":"Literal","messageId":"error","endLine":63,"endColumn":56,"suggestions":[{"messageId":"replace","fix":{"range":[2280,2284],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":81,"column":48,"nodeType":"Literal","messageId":"error","endLine":81,"endColumn":52,"suggestions":[{"messageId":"replace","fix":{"range":[2926,2930],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { StageResult } from '@/lib/types';\r\n\r\nexport function StageResultCard({ stageName, result }: { stageName: string; result?: StageResult }) {\r\n  if (!result) return null;\r\n\r\n  return (\r\n    <Card className=\"mt-4\">\r\n      <CardHeader>\r\n        <CardTitle>{stageName}</CardTitle>\r\n        <CardDescription>\r\n          Status:{' '}\r\n          <span className={result.status === 'Success' ? 'text-green-500' : 'text-red-500'}>\r\n            {result.status}\r\n          </span>\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {result.error != undefined && (\r\n          <p className=\"text-red-500\">\r\n            <strong>Error:</strong> {result.error}\r\n          </p>\r\n        )}\r\n        {result.details != undefined && (\r\n          <p>\r\n            <strong>Details:</strong> {result.details}\r\n          </p>\r\n        )}\r\n        {result.prompt != undefined && (\r\n          <div>\r\n            <strong>Prompt:</strong>\r\n            <Textarea\r\n              readOnly\r\n              value={result.prompt}\r\n              className=\"mt-1 h-32 bg-gray-50 dark:bg-slate-700\"\r\n            />\r\n          </div>\r\n        )}\r\n        {result.rawContent != undefined && (\r\n          <div>\r\n            <strong>Raw Content (Firecrawl):</strong>\r\n            <Textarea\r\n              readOnly\r\n              value={result.rawContent}\r\n              className=\"mt-1 h-48 bg-gray-50 dark:bg-slate-700\"\r\n            />\r\n          </div>\r\n        )}\r\n        {result.data != undefined && (\r\n          <div className=\"mt-2\">\r\n            <strong>Data Output:</strong>{' '}\r\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\r\n              {JSON.stringify(result.data, null, 2)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n        {result.preparedData != undefined && (\r\n          <div className=\"mt-2\">\r\n            <strong>Data Prepared for Supabase:</strong>{' '}\r\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\r\n              {JSON.stringify(result.preparedData, null, 2)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n        {result.recordId != undefined && (\r\n          <p>\r\n            <strong>Supabase Record id:</strong> {result.recordId}\r\n          </p>\r\n        )}\r\n        {result.tokensUsed !== undefined && (\r\n          <p>\r\n            <strong>Gemini Tokens Used:</strong> {result.tokensUsed}\r\n          </p>\r\n        )}\r\n        {result.metadata != undefined && (\r\n          <div>\r\n            <strong>Metadata (Firecrawl):</strong>{' '}\r\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\r\n              {JSON.stringify(result.metadata, null, 2)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineForm.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":24,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[573,897],"text":"Readonly<{\r\n  url: string;\r\n  setUrl: (url: string) => void;\r\n  rawText: string;\r\n  setRawText: (text: string) => void;\r\n  useRawText: boolean;\r\n  setUseRawText: (use: boolean) => void;\r\n  isDryRun: boolean;\r\n  setIsDryRun: (isDry: boolean) => void;\r\n  isLoading: boolean;\r\n  onSubmit: (event: FormEvent<HTMLFormElement>) => void;\r\n}>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { FormEvent } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\n\r\nexport function TestPipelineForm({\r\n  url, setUrl, rawText, setRawText, useRawText, setUseRawText,\r\n  isDryRun, setIsDryRun, isLoading, onSubmit\r\n}: {\r\n  url: string;\r\n  setUrl: (url: string) => void;\r\n  rawText: string;\r\n  setRawText: (text: string) => void;\r\n  useRawText: boolean;\r\n  setUseRawText: (use: boolean) => void;\r\n  isDryRun: boolean;\r\n  setIsDryRun: (isDry: boolean) => void;\r\n  isLoading: boolean;\r\n  onSubmit: (event: FormEvent<HTMLFormElement>) => void;\r\n}) {\r\n  return (\r\n    <Card className=\"mb-6\">\r\n      <CardHeader>\r\n        <CardTitle>Test Data Pipeline</CardTitle>\r\n        <CardDescription>\r\n          Use this page to test the data scraping and processing pipeline with a specific url or\r\n          raw text.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <form\r\n          onSubmit={(e) => {\r\n            onSubmit(e);\r\n          }}\r\n          className=\"space-y-6\"\r\n        >\r\n          <div>\r\n            <Label htmlFor=\"url-input\">url to Scrape</Label>\r\n            <Input\r\n              id=\"url-input\"\r\n              type=\"url\"\r\n              placeholder=\"https://example.com\"\r\n              value={url}\r\n              onChange={(e) => setUrl(e.target.value)}\r\n              disabled={useRawText || isLoading}\r\n              className=\"mt-1\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              id=\"use-raw-text-checkbox\"\r\n              checked={useRawText}\r\n              onCheckedChange={(checked: boolean) => setUseRawText(Boolean(checked))}\r\n              disabled={isLoading}\r\n            />\r\n            <Label htmlFor=\"use-raw-text-checkbox\">Use Raw Text Input Instead</Label>\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"raw-text-input\">Raw Text (Markdown/html)</Label>\r\n            <Textarea\r\n              id=\"raw-text-input\"\r\n              placeholder=\"Paste Markdown or html content here...\"\r\n              value={rawText}\r\n              onChange={(e) => setRawText(e.target.value)}\r\n              disabled={!useRawText || isLoading}\r\n              className=\"mt-1 h-40\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              id=\"dry-run-checkbox\"\r\n              checked={isDryRun}\r\n              onCheckedChange={(checked: boolean) => setIsDryRun(Boolean(checked))}\r\n              disabled={isLoading}\r\n            />\r\n            <Label htmlFor=\"dry-run-checkbox\">Dry Run (Do not save to Supabase)</Label>\r\n          </div>\r\n\r\n          <Button type=\"submit\" disabled={isLoading || (useRawText ? !rawText : !url)}>\r\n            {isLoading ? 'Testing...' : 'Run Test'}\r\n          </Button>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineSubmitHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormEvent' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'FormEvent'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":19,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[0,34],"text":""},"desc":"Remove this import statement"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FormEvent } from 'react';\r\nimport { TestPipelineResults } from '@/lib/types';\r\n\r\ninterface SubmitTestPipelineArgs {\r\n  useRawText: boolean;\r\n  url: string;\r\n  rawText: string;\r\n  isDryRun: boolean;\r\n}\r\n\r\nexport async function submitTestPipeline({\r\n  useRawText,\r\n  url,\r\n  rawText,\r\n  isDryRun,\r\n}: SubmitTestPipelineArgs): Promise<TestPipelineResults> {\r\n  const payload = {\r\n    url: useRawText ? undefined : url,\r\n    rawText: useRawText ? rawText : undefined,\r\n    isDryRun,\r\n  };\r\n\r\n  const response = await fetch('/api/test-pipeline-run', {\r\n    method: 'post',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(payload),\r\n  });\r\n\r\n  const data = (await response.json()) as TestPipelineResults;\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.error ?? 'Test run failed');\r\n  }\r\n  return data;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestResultsDisplay.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":6,"column":36,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":12,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[355,492],"text":"Readonly<{\r\n  results?: TestPipelineResults;\r\n  renderStageResult: (stageName: string, result?: StageResult) => React.ReactElement | undefined;\r\n}>"},"desc":"Mark the props as read-only"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":13,"column":54,"nodeType":"Literal","messageId":"error","endLine":13,"endColumn":58,"suggestions":[{"messageId":"remove","fix":{"range":[550,554],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[550,554],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { StageResult, TestPipelineResults } from '@/lib/types';\r\n\r\nexport function TestResultsDisplay({\r\n  results,\r\n  renderStageResult\r\n}: {\r\n  results?: TestPipelineResults;\r\n  renderStageResult: (stageName: string, result?: StageResult) => React.ReactElement | undefined;\r\n}) {\r\n  if (!results || results.error != undefined) return null;\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Test Results</CardTitle>\r\n        {results.overallStatus != undefined && (\r\n          <CardDescription>Overall Status: {results.overallStatus}</CardDescription>\r\n        )}\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Tabs defaultValue=\"firecrawl\" className=\"w-full\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"firecrawl\" disabled={!results.firecrawl}>\r\n              Firecrawl\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"gemini\" disabled={!results.gemini}>\r\n              Gemini\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"supabase\" disabled={!results.supabase}>\r\n              Supabase\r\n            </TabsTrigger>\r\n          </TabsList>\r\n          <TabsContent value=\"firecrawl\">\r\n            {renderStageResult('Firecrawl Stage', results.firecrawl)}\r\n          </TabsContent>\r\n          <TabsContent value=\"gemini\">\r\n            {renderStageResult('Gemini Processing Stage', results.gemini)}\r\n          </TabsContent>\r\n          <TabsContent value=\"supabase\">\r\n            {renderStageResult('Supabase Interaction Stage', results.supabase)}\r\n          </TabsContent>\r\n        </Tabs>\r\n        {results.logs != undefined && results.logs.length > 0 && (\r\n          <div className=\"mt-4\">\r\n            <h3 className=\"text-lg font-semibold\">Logs:</h3>\r\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-800 rounded-md overflow-x-auto text-sm\">\r\n              {results.logs.join('\\n')}\r\n            </pre>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\ContactSection.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":9,"column":32,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":9,"endColumn":88,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[275,294],"text":"Readonly<ContactSectionProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":34,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":34,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1242,1260],"text":"(verificationStatus != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1242,1260],"text":"(verificationStatus ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1242,1260],"text":"(Boolean(verificationStatus))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Phone, Globe, Star } from 'lucide-react';\r\n\r\ninterface ContactSectionProps {\r\n  contactInfo?: { phone?: string; website?: string };\r\n  verificationStatus?: string;\r\n}\r\n\r\nexport function ContactSection({ contactInfo, verificationStatus }: ContactSectionProps) {\r\n  return (\r\n    <div>\r\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Contact</h4>\r\n      <div className=\"space-y-1 dark:text-gray-300\">\r\n        {(contactInfo?.phone !== undefined) && (\r\n          <a\r\n            href={`tel:${contactInfo.phone}`}\r\n            className=\"flex items-center text-sm hover:text-blue-600 dark:hover:text-blue-400\"\r\n          >\r\n            <Phone className=\"h-3 w-3 mr-1\" />\r\n            <span className=\"truncate\">{contactInfo.phone}</span>\r\n          </a>\r\n        )}\r\n        {(contactInfo?.website !== undefined) && (\r\n          <a\r\n            href={contactInfo.website}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"flex items-center text-sm hover:text-blue-600 dark:hover:text-blue-400\"\r\n          >\r\n            <Globe className=\"h-3 w-3 mr-1\" />\r\n            <span className=\"truncate\">Website</span>\r\n          </a>\r\n        )}\r\n        {verificationStatus && (\r\n          <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\r\n            <Star className=\"h-3 w-3 mr-1\" />\r\n            <span className=\"capitalize\">{verificationStatus}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\MenuSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPrice' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'formatPrice'.","line":2,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[26,87],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":14,"column":29,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":14,"endColumn":76,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[358,374],"text":"Readonly<MenuSectionProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { formatPrice } from '@/lib/utils/foodTruckHelpers'; // Assuming formatPrice is moved here\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  price?: number;\r\n}\r\n\r\ninterface MenuSectionProps {\r\n  popularItems: MenuItem[];\r\n  formatPrice: (price: number) => string;\r\n}\r\n\r\nexport function MenuSection({ popularItems, formatPrice }: MenuSectionProps) {\r\n  return (\r\n    <div>\r\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Popular Items</h4>\r\n      <div className=\"space-y-1\">\r\n        {popularItems.map((item, idx) => (\r\n          <div key={idx} className=\"flex justify-between text-sm dark:text-gray-300\">\r\n            <span className=\"truncate dark:text-gray-200\">{item.name}</span>\r\n            {typeof item.price === 'number' && item.price > 0 && (\r\n              <span className=\"text-green-600 dark:text-green-400 ml-2\">\r\n                {formatPrice(item.price)}\r\n              </span>\r\n            )}\r\n          </div>\r\n        ))}\r\n        {popularItems.length === 0 && (\r\n          <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Menu not available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\OperatingHoursSection.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":9,"column":39,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":9,"endColumn":94,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[343,369],"text":"Readonly<OperatingHoursSectionProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":10,"column":27,"nodeType":"Literal","messageId":"error","endLine":10,"endColumn":31,"suggestions":[{"messageId":"remove","fix":{"range":[400,404],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[400,404],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Clock } from 'lucide-react';\r\n\r\ninterface OperatingHoursSectionProps {\r\n  todayHours: { open: string; close: string; closed: boolean } | undefined;\r\n  formatHours: (hours: { open: string; close: string; closed: boolean }) => string;\r\n}\r\n\r\nexport function OperatingHoursSection({ todayHours, formatHours }: OperatingHoursSectionProps) {\r\n  if (!todayHours) return null;\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Today's Hours</h4>\r\n      <div className=\"flex items-center gap-2\">\r\n        <Clock className=\"h-3 w-3 text-gray-500\" />\r\n        <span className=\"text-sm dark:text-gray-300\">\r\n          {formatHours(todayHours)}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\RatingSection.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":9,"column":31,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":9,"endColumn":81,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[219,237],"text":"Readonly<RatingSectionProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":10,"column":43,"nodeType":"Literal","messageId":"error","endLine":10,"endColumn":47,"suggestions":[{"messageId":"remove","fix":{"range":[284,288],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[284,288],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Star } from 'lucide-react';\r\n\r\ninterface RatingSectionProps {\r\n  averageRating?: number;\r\n  reviewCount?: number;\r\n}\r\n\r\nexport function RatingSection({ averageRating, reviewCount }: RatingSectionProps) {\r\n  if (averageRating === undefined) return null;\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Rating</h4>\r\n      <div className=\"flex items-center gap-2\">\r\n        <div className=\"flex\">\r\n          {[1, 2, 3, 4, 5].map((star) => (\r\n            <Star\r\n              key={star}\r\n              className={`h-4 w-4 ${\r\n                star <= Math.round(averageRating ?? 0)\r\n                  ? 'text-yellow-400 fill-current'\r\n                  : 'text-gray-300'\r\n              }`}\r\n            />\r\n          ))}\r\n        </div>\r\n        <span className=\"text-sm font-medium dark:text-gray-200\">\r\n          {averageRating.toFixed(1)}\r\n        </span>\r\n        {(reviewCount !== undefined) && (\r\n          <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n            ({reviewCount} reviews)\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\SocialMediaSection.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":8,"column":36,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":8,"endColumn":76,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[241,264],"text":"Readonly<SocialMediaSectionProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":9,"column":69,"nodeType":"Literal","messageId":"error","endLine":9,"endColumn":73,"suggestions":[{"messageId":"remove","fix":{"range":[337,341],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[337,341],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Globe } from 'lucide-react';\r\n\r\ninterface SocialMediaSectionProps {\r\n  socialMedia?: { instagram?: string; facebook?: string; twitter?: string };\r\n}\r\n\r\nexport function SocialMediaSection({ socialMedia }: SocialMediaSectionProps) {\r\n  if (!socialMedia || Object.keys(socialMedia).length === 0) return null;\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Social Media</h4>\r\n      <div className=\"flex flex-wrap gap-2\">\r\n        {(socialMedia.instagram !== undefined) && (\r\n          <a\r\n            href={`https://instagram.com/${socialMedia.instagram}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"flex items-center gap-1 px-2 py-1 bg-pink-100 text-pink-800 rounded-md text-xs hover:bg-pink-200 dark:bg-pink-900 dark:text-pink-200\"\r\n          >\r\n            <Globe className=\"h-3 w-3\" />\r\n            Instagram\r\n          </a>\r\n        )}\r\n        {(socialMedia.facebook !== undefined) && (\r\n          <a\r\n            href={`https://facebook.com/${socialMedia.facebook}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-xs hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200\"\r\n          >\r\n            <Globe className=\"h-3 w-3\" />\r\n            Facebook\r\n          </a>\r\n        )}\r\n        {(socialMedia.twitter !== undefined) && (\r\n          <a\r\n            href={`https://twitter.com/${socialMedia.twitter}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"flex items-center gap-1 px-2 py-1 bg-sky-100 text-sky-800 rounded-md text-xs hover:bg-sky-200 dark:bg-sky-900 dark:text-sky-200\"\r\n          >\r\n            <Globe className=\"h-3 w-3\" />\r\n            Twitter\r\n          </a>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckBasicInfo.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":32,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":62,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[319,338],"text":"Readonly<TruckBasicInfoProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckBasicInfoProps {\n  truck: FoodTruck;\n}\n\nexport function TruckBasicInfo({ truck }: TruckBasicInfoProps) {\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"dark:text-gray-100\">About</CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Food truck information</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Name</label>\n          <p className=\"text-lg font-semibold dark:text-gray-100\">{truck.name}</p>\n        </div>\n        \n        {truck.description != undefined && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Description</label>\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.description}</p>\n          </div>\n        )}\n\n        {truck.cuisine_type && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Cuisine Type</label>\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.cuisine_type}</p>\n          </div>\n        )}\n\n        {truck.price_range && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Price Range</label>\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {truck.price_range}\n            </Badge>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardFooter.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":11,"column":33,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":11,"endColumn":64,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[303,323],"text":"Readonly<TruckCardFooterProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Eye } from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\n\r\ninterface TruckCardFooterProps {\r\n  truck: FoodTruck;\r\n}\r\n\r\nexport function TruckCardFooter({ truck }: TruckCardFooterProps) {\r\n  return (\r\n    <div className=\"px-4 py-2 border-t border-gray-200 dark:border-gray-700\">\r\n      <div className=\"flex gap-2\">\r\n        <Button asChild className=\"flex-1\" variant=\"outline\">\r\n          <Link href={`/trucks/${truck.id}`}>\r\n            <Eye className=\"h-4 w-4 mr-2\" />\r\n            View Details\r\n          </Link>\r\n        </Button>\r\n        {truck.verification_status === 'verified' && (\r\n          <Button className=\"flex-1\" variant=\"default\" disabled>\r\n            Book Me\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardHeader.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":14,"column":33,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":19,"endColumn":24,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[513,533],"text":"Readonly<TruckCardHeaderProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":25,"column":45,"nodeType":null,"endLine":25,"endColumn":48,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[790,793],"text":"!="}}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":35,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":35,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1323,1334],"text":"item.price == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1324,1334],"text":"(item.price ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1323,1334],"text":"!Boolean(item.price)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":35,"column":57,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":35,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1339,1349],"text":"(priceRange != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1339,1349],"text":"(priceRange ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1339,1349],"text":"(Boolean(priceRange))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { MapPin } from 'lucide-react';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\n\r\ninterface TruckCardHeaderProps {\r\n  truck: FoodTruck;\r\n  isOpen: boolean;\r\n  popularItems: Array<{ name: string; price?: number }>;\r\n  priceRange: string | undefined;\r\n}\r\n\r\nexport function TruckCardHeader({\r\n  truck,\r\n  isOpen,\r\n  popularItems,\r\n  priceRange\r\n}: TruckCardHeaderProps) {\r\n  return (\r\n    <CardHeader>\r\n      <div className=\"flex justify-between items-start\">\r\n        <div className=\"flex-1\">\r\n          <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\r\n          {(truck.current_location?.address !== undefined) && (\r\n            <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\r\n              <MapPin className=\"h-4 w-4 mr-1\" />\r\n              {truck.current_location.address}\r\n            </CardDescription>\r\n          )}\r\n        </div>\r\n        <div className=\"flex flex-col items-end space-y-1\">\r\n          <Badge variant={isOpen ? 'default' : 'secondary'}>{isOpen ? 'Open' : 'Closed'}</Badge>\r\n          {/* Show price range fallback if no explicit prices */}\r\n          {popularItems.every((item) => !item.price) && priceRange && (\r\n            <Badge variant=\"outline\" className=\"mt-1\">\r\n              {priceRange}\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </CardHeader>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckContactInfo.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":23,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":22,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[374,509],"text":"Readonly<{\n  icon: React.ComponentType<{ className?: string }>;\n  label: string;\n  value?: string;\n  href?: string;\n  unavailableText: string;\n}>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":37,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":37,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[960,964],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[960,964],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[960,964],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":54,"column":27,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":54,"endColumn":84,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[1532,1572],"text":"Readonly<{ socialMedia?: Record<string, string> }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":91,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":91,"endColumn":66,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[2837,2858],"text":"Readonly<TruckContactInfoProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":106,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":106,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3399,3424],"text":"((truck.contact_info?.phone) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3399,3424],"text":"((truck.contact_info?.phone) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3399,3424],"text":"(Boolean((truck.contact_info?.phone)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":114,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":114,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3668,3693],"text":"((truck.contact_info?.email) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3668,3693],"text":"((truck.contact_info?.email) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3668,3693],"text":"(Boolean((truck.contact_info?.email)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Phone, Mail, Globe } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckContactInfoProps {\n  truck: FoodTruck;\n}\n\nfunction ContactField({ \n  icon: Icon, \n  label, \n  value, \n  href, \n  unavailableText \n}: {\n  icon: React.ComponentType<{ className?: string }>;\n  label: string;\n  value?: string;\n  href?: string;\n  unavailableText: string;\n}) {\n  if (value == undefined) {\n    return (\n      <div className=\"flex items-center gap-3 text-gray-400\">\n        <Icon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{unavailableText}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <Icon className=\"h-4 w-4 text-gray-500\" />\n      <div>\n        <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{label}</label>\n        {href ? (\n          <a \n            href={href}\n            target={href.startsWith('http') ? '_blank' : undefined}\n            rel={href.startsWith('http') ? 'noopener noreferrer' : undefined}\n            className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline\"\n          >\n            {href.startsWith('http') ? 'Visit Website' : value}\n          </a>\n        ) : (\n          <p className=\"text-gray-900 dark:text-gray-200\">{value}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction SocialMediaLinks({ socialMedia }: { socialMedia?: Record<string, string> }) {\n  if (!socialMedia || Object.keys(socialMedia).length === 0) {\n    return;\n  }\n\n  const socialPlatforms = [\n    { key: 'instagram', name: 'Instagram', baseUrl: 'https://instagram.com/', color: 'pink' },\n    { key: 'facebook', name: 'Facebook', baseUrl: 'https://facebook.com/', color: 'blue' },\n    { key: 'twitter', name: 'Twitter', baseUrl: 'https://twitter.com/', color: 'sky' },\n  ];\n\n  return (\n    <div>\n      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Social Media</label>\n      <div className=\"flex flex-wrap gap-2 mt-2\">\n        {socialPlatforms.map(({ key, name, baseUrl, color }) => {\n          const handle = socialMedia[key];\n          if (handle == undefined) return;\n\n          return (\n            <a\n              key={key}\n              href={`${baseUrl}${handle}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={`flex items-center gap-1 px-2 py-1 bg-${color}-100 text-${color}-800 rounded-md text-sm hover:bg-${color}-200 dark:bg-${color}-900 dark:text-${color}-200`}\n            >\n              <Globe className=\"h-3 w-3\" />\n              {name}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function TruckContactInfo({ truck }: TruckContactInfoProps) {\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Phone className=\"h-5 w-5\" />\n          Contact Information\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Get in touch</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <ContactField\n          icon={Phone}\n          label=\"Phone\"\n          value={truck.contact_info?.phone}\n          href={truck.contact_info?.phone ? `tel:${truck.contact_info.phone}` : undefined}\n          unavailableText=\"No phone number available\"\n        />\n\n        <ContactField\n          icon={Mail}\n          label=\"Email\"\n          value={truck.contact_info?.email}\n          href={truck.contact_info?.email ? `mailto:${truck.contact_info.email}` : undefined}\n          unavailableText=\"No email available\"\n        />\n\n        <ContactField\n          icon={Globe}\n          label=\"Website\"\n          value={truck.contact_info?.website}\n          href={truck.contact_info?.website}\n          unavailableText=\"No website available\"\n        />\n\n        <SocialMediaLinks socialMedia={truck.social_media} />\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckDetailHeader.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":35,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":72,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[257,279],"text":"Readonly<TruckDetailHeaderProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\n\ninterface TruckDetailHeaderProps {\n  truckName: string;\n}\n\nexport function TruckDetailHeader({ truckName }: TruckDetailHeaderProps) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"outline\" size=\"sm\" asChild>\n          <Link href=\"/\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Map\n          </Link>\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight dark:text-gray-100\">{truckName}</h1>\n          <p className=\"text-muted-foreground dark:text-gray-400\">\n            Food truck details and information\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckLocationInfo.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":35,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":68,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[317,339],"text":"Readonly<TruckLocationInfoProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { MapPin } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckLocationInfoProps {\n  truck: FoodTruck;\n}\n\nexport function TruckLocationInfo({ truck }: TruckLocationInfoProps) {\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <MapPin className=\"h-5 w-5\" />\n          Location\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Current location</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {truck.current_location?.address == undefined ? (\n          <p className=\"text-gray-400 text-sm\">No address available</p>\n        ) : (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Address</label>\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.current_location.address}</p>\n          </div>\n        )}\n\n        {truck.current_location?.lat != undefined && truck.current_location?.lng != undefined && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Coordinates</label>\n            <p className=\"text-gray-900 dark:text-gray-200 text-sm\">\n              {truck.current_location.lat.toFixed(6)}, {truck.current_location.lng.toFixed(6)}\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckOperatingHours.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":16,"column":22,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":16,"endColumn":74,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[390,424],"text":"Readonly<{ day: string; dayData?: DayData }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":29,"column":37,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":29,"endColumn":72,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[891,915],"text":"Readonly<TruckOperatingHoursProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":43,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":43,"endColumn":27,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1514,1531],"text":"(hasOperatingHours ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1514,1531],"text":"(hasOperatingHours === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckOperatingHoursProps {\n  truck: FoodTruck;\n}\n\ninterface DayData {\n  closed?: boolean;\n  open?: string;\n  close?: string;\n}\n\nfunction DaySchedule({ day, dayData }: { day: string; dayData?: DayData }) {\n  const dayName = day.charAt(0).toUpperCase() + day.slice(1);\n  \n  return (\n    <div className=\"flex justify-between items-center\">\n      <span className=\"text-sm font-medium dark:text-gray-200\">{dayName}</span>\n      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n        {dayData?.closed === true ? 'Closed' : `${dayData?.open ?? 'N/A'} - ${dayData?.close ?? 'N/A'}`}\n      </span>\n    </div>\n  );\n}\n\nexport function TruckOperatingHours({ truck }: TruckOperatingHoursProps) {\n  const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n  const hasOperatingHours = truck.operating_hours && Object.keys(truck.operating_hours).length > 0;\n\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Clock className=\"h-5 w-5\" />\n          Operating Hours\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Daily schedule</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {hasOperatingHours ? (\n          <div className=\"space-y-2\">\n            {daysOfWeek.map((day) => {\n              const dayData = truck.operating_hours?.[day as keyof typeof truck.operating_hours] as DayData | undefined;\n              return (\n                <DaySchedule key={day} day={day} dayData={dayData} />\n              );\n            })}\n          </div>\n        ) : (\n          <p className=\"text-gray-400 text-sm\">Operating hours not available</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckRatingsReviews.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":21,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":51,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[346,364],"text":"Readonly<{ rating: number }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":27,"column":37,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":27,"endColumn":72,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[732,756],"text":"Readonly<TruckRatingsReviewsProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Star, Users } from 'lucide-react';\nimport type { FoodTruckWithRatings } from '@/hooks/useFoodTruckDetails';\n\ninterface TruckRatingsReviewsProps {\n  truck: FoodTruckWithRatings;\n}\n\nfunction StarRating({ rating }: { rating: number }) {\n  return (\n    <div className=\"flex\">\n      {[1, 2, 3, 4, 5].map((star) => (\n        <Star\n          key={star}\n          className={`h-6 w-6 ${\n            star <= Math.round(rating)\n              ? 'text-yellow-400 fill-current'\n              : 'text-gray-300'\n          }`}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport function TruckRatingsReviews({ truck }: TruckRatingsReviewsProps) {\n  if (truck.average_rating == undefined) {\n    return;\n  }\n\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Star className=\"h-5 w-5\" />\n          Ratings & Reviews\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Customer feedback</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <StarRating rating={truck.average_rating} />\n            <span className=\"text-xl font-semibold dark:text-gray-100\">\n              {truck.average_rating.toFixed(1)}\n            </span>\n          </div>\n          {truck.review_count != undefined && (\n            <div className=\"flex items-center gap-1 text-gray-600 dark:text-gray-400\">\n              <Users className=\"h-4 w-4\" />\n              <span className=\"text-sm\">{truck.review_count} reviews</span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\NavigationMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ToggleGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":15,"column":9,"nodeType":null,"messageId":"deprecation","endLine":15,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart.tsx","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":72,"column":12,"nodeType":"Literal","messageId":"error","endLine":72,"endColumn":16,"suggestions":[{"messageId":"remove","fix":{"range":[2797,2801],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[2797,2801],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":141,"column":14,"nodeType":"Literal","messageId":"error","endLine":141,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[4299,4303],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[4299,4303],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":185,"column":25,"nodeType":"Identifier","messageId":"anyAssignment","endLine":185,"endColumn":29},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":214,"column":12,"nodeType":"Literal","messageId":"error","endLine":214,"endColumn":16,"suggestions":[{"messageId":"remove","fix":{"range":[7024,7028],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[7024,7028],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as RechartsPrimitive from 'recharts';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { useTooltipLabel } from './chart/useTooltipLabel';\r\nimport { TooltipIndicator } from './chart/TooltipIndicator';\r\nimport { TooltipItemContent } from './chart/TooltipItemContent';\r\n\r\n// Format: { THEME_NAME: CSS_SELECTOR }\r\nconst THEMES = { light: '', dark: '.dark' } as const;\r\n\r\nexport type ChartConfig = {\r\n  [k in string]: {\r\n    label?: React.ReactNode;\r\n    icon?: React.ComponentType;\r\n  } & (\r\n    | { color?: string; theme?: never }\r\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\r\n  );\r\n};\r\n\r\ntype ChartContextProps = {\r\n  config: ChartConfig;\r\n};\r\n\r\nconst ChartContext = React.createContext<ChartContextProps | undefined>(undefined);\r\n\r\nfunction useChart() {\r\n  const context = React.useContext(ChartContext);\r\n\r\n  if (context === undefined) {\r\n    throw new Error('useChart must be used within a <ChartContainer />');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst ChartContainer = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & {\r\n    config: ChartConfig;\r\n    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\r\n  }\r\n>(({ id, className, children, config, ...props }, ref) => {\r\n  const uniqueId = React.useId();\r\n  const chartId = `chart-${id ?? uniqueId.replaceAll(':', '')}`;\r\n\r\n  return (\r\n    <ChartContext.Provider value={{ config }}>\r\n      <div\r\n        data-chart={chartId}\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        <ChartStyle id={chartId} config={config} />\r\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\r\n      </div>\r\n    </ChartContext.Provider>\r\n  );\r\n});\r\nChartContainer.displayName = 'Chart';\r\n\r\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\r\n  const colorConfig = Object.entries(config).filter(([_, itemConfig]) => (itemConfig.theme ?? itemConfig.color) !== undefined);\r\n  if (colorConfig.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <style\r\n      dangerouslySetInnerHTML={{\r\n        __html: Object.entries(THEMES)\r\n          .map(\r\n            ([theme, prefix]) => `\r\n${prefix} [data-chart=${id}] {\r\n${colorConfig\r\n  .map(([key, itemConfig]) => {\r\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ?? itemConfig.color;\r\n    return color !== undefined && color !== '' ? `  --color-${key}: ${color};` : undefined;\r\n  })\r\n  .join('\\n')}\r\n}\r\n`,\r\n          )\r\n          .join('\\n'),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ChartTooltip = RechartsPrimitive.Tooltip;\r\n\r\nconst ChartTooltipContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\r\n    React.ComponentProps<'div'> & {\r\n      hideLabel?: boolean;\r\n      hideIndicator?: boolean;\r\n      indicator?: 'line' | 'dot' | 'dashed';\r\n      nameKey?: string;\r\n      labelKey?: string;\r\n    }\r\n>(\r\n  (\r\n    {\r\n      active,\r\n      payload,\r\n      className,\r\n      indicator = 'dot',\r\n      hideLabel = false,\r\n      hideIndicator = false,\r\n      label,\r\n      labelFormatter,\r\n      labelClassName,\r\n      formatter,\r\n      color,\r\n      nameKey,\r\n      labelKey,\r\n    },\r\n    ref,\r\n  ) => {\r\n    const { config } = useChart();\r\n\r\n    const tooltipLabel = useTooltipLabel({\r\n      hideLabel,\r\n      payload,\r\n      label,\r\n      labelFormatter,\r\n      labelClassName,\r\n      config,\r\n      labelKey\r\n    });\r\n\r\n    if (active !== true || (payload?.length ?? 0) === 0) {\r\n      return null;\r\n    }\r\n\r\n    const nestLabel = payload.length === 1 && indicator !== 'dot';\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\r\n          className,\r\n        )}\r\n      >\r\n        {nestLabel ? undefined : tooltipLabel}\r\n        <div className=\"grid gap-1.5\">\r\n          {(payload as RechartsPrimitive.TooltipPayload[]).map((item, index) => {\r\n            const itemData = item as { name?: string; dataKey?: string; payload?: unknown; color?: string; value?: number };\r\n            const key = `${nameKey ?? itemData.name ?? itemData.dataKey ?? 'value'}`;\r\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n            const indicatorColor =\r\n              color ??\r\n              (itemData.payload !== undefined && itemData.payload !== null && typeof itemData.payload === 'object' && 'fill' in itemData.payload\r\n                ? String((itemData.payload as Record<string, unknown>).fill)\r\n                : undefined) ??\r\n              itemData.color;\r\n\r\n            return (\r\n              <div\r\n                key={itemData.dataKey}\r\n                className={cn(\r\n                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\r\n                  indicator === 'dot' && 'items-center',\r\n                )}\r\n              >\r\n                <TooltipIndicator\r\n                  indicator={indicator}\r\n                  hideIndicator={hideIndicator}\r\n                  indicatorColor={indicatorColor}\r\n                  nestLabel={nestLabel}\r\n                  itemConfig={itemConfig}\r\n                />\r\n                <TooltipItemContent\r\n                  formatter={formatter}\r\n                  itemData={itemData}\r\n                  item={item}\r\n                  index={index}\r\n                  itemConfig={itemConfig}\r\n                  nestLabel={nestLabel}\r\n                  tooltipLabel={tooltipLabel}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nChartTooltipContent.displayName = 'ChartTooltip';\r\n\r\nconst ChartLegend = RechartsPrimitive.Legend;\r\n\r\nconst ChartLegendContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof RechartsPrimitive.Legend> &\r\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\r\n      hideIcon?: boolean;\r\n      nameKey?: string;\r\n    }\r\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\r\n  const { config } = useChart();\r\n\r\n  if ((payload?.length ?? 0) === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={cn(\r\n        'flex items-center justify-center gap-4',\r\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\r\n        className,\r\n      )}\r\n    >\r\n      {(payload as RechartsPrimitive.LegendPayload[]).map((item) => {\r\n        const itemData = item as { dataKey?: string; value?: string; color?: string };\r\n        const keyValue = nameKey ?? (itemData.dataKey !== undefined && itemData.dataKey !== '' ? String(itemData.dataKey) : 'value');\r\n        const key = `${keyValue}`;\r\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n\r\n        return (\r\n          <div\r\n            key={itemData.value as string}\r\n            className={cn(\r\n              'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground',\r\n            )}\r\n          >\r\n            {itemConfig?.icon && !hideIcon ? (\r\n              <itemConfig.icon />\r\n            ) : (\r\n              <div\r\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\r\n                style={{\r\n                  backgroundColor: itemData.color !== undefined && itemData.color !== '' ? String(itemData.color) : undefined,\r\n                }}\r\n              />\r\n            )}\r\n            {itemConfig?.label}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n});\r\nChartLegendContent.displayName = 'ChartLegend';\r\n\r\n// Helper to extract item config from a payload.\r\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\r\n  if (typeof payload !== 'object' || payload === null) {\r\n    return;\r\n  }\r\n\r\n  const payloadPayload =\r\n    'payload' in payload &&\r\n    typeof (payload as Record<string, unknown>).payload === 'object' &&\r\n    (payload as Record<string, unknown>).payload !== null\r\n      ? (payload as Record<string, unknown>).payload\r\n      : undefined;\r\n\r\n  let configLabelKey: string = key;\r\n\r\n  if (key in (payload as Record<string, unknown>) && typeof (payload as Record<string, unknown>)[key] === 'string') {\r\n    configLabelKey = (payload as Record<string, unknown>)[key] as string;\r\n  } else if (\r\n    payloadPayload !== undefined &&\r\n    key in (payloadPayload as Record<string, unknown>) &&\r\n    typeof (payloadPayload as Record<string, unknown>)[key] === 'string'\r\n  ) {\r\n    configLabelKey = (payloadPayload as Record<string, unknown>)[key] as string;\r\n  }\r\n\r\n  return configLabelKey in config ? config[configLabelKey] : config[key];\r\n}\r\n\r\nexport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n  ChartLegend,\r\n  ChartLegendContent,\r\n  ChartStyle,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipIndicator.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":12,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":18,"endColumn":25,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[390,411],"text":"Readonly<TooltipIndicatorProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":24,"column":12,"nodeType":"Literal","messageId":"error","endLine":24,"endColumn":16,"suggestions":[{"messageId":"remove","fix":{"range":[518,522],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[518,522],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface TooltipIndicatorProps {\r\n  indicator: 'line' | 'dot' | 'dashed';\r\n  hideIndicator: boolean;\r\n  indicatorColor?: string;\r\n  nestLabel: boolean;\r\n  itemConfig?: { icon?: React.ComponentType };\r\n}\r\n\r\nexport function TooltipIndicator({\r\n  indicator,\r\n  hideIndicator,\r\n  indicatorColor,\r\n  nestLabel,\r\n  itemConfig\r\n}: TooltipIndicatorProps) {\r\n  if (itemConfig?.icon) {\r\n    return <itemConfig.icon />;\r\n  }\r\n\r\n  if (hideIndicator) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',\r\n        {\r\n          'h-2.5 w-2.5': indicator === 'dot',\r\n          'w-1': indicator === 'line',\r\n          'w-0 border-[1.5px] border-dashed bg-transparent': indicator === 'dashed',\r\n          'my-0.5': nestLabel && indicator === 'dashed',\r\n        },\r\n      )}\r\n      style={\r\n        {\r\n          '--color-bg': indicatorColor,\r\n          '--color-border': indicatorColor,\r\n        } as React.CSSProperties\r\n      }\r\n    />\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipItemContent.tsx","messages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":5,"column":15,"nodeType":"TSFunctionType","messageId":"exceed","endLine":5,"endColumn":15},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":14,"column":36,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":22,"endColumn":27,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[609,632],"text":"Readonly<TooltipItemContentProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface TooltipItemContentProps {\r\n  formatter?: (value: number, name: string, item: unknown, index: number, payload: Record<string, unknown>[]) => React.ReactNode;\r\n  itemData: { name?: string; dataKey?: string; payload?: unknown; color?: string; value?: number };\r\n  item: unknown;\r\n  index: number;\r\n  itemConfig?: { label?: React.ReactNode };\r\n  nestLabel: boolean;\r\n  tooltipLabel: React.ReactNode;\r\n}\r\n\r\nexport function TooltipItemContent({\r\n  formatter,\r\n  itemData,\r\n  item,\r\n  index,\r\n  itemConfig,\r\n  nestLabel,\r\n  tooltipLabel\r\n}: TooltipItemContentProps) {\r\n  if (formatter !== undefined && itemData?.value !== undefined && itemData.name !== undefined && itemData.name !== '') {\r\n    const payloadArray = Array.isArray(itemData.payload)\r\n      ? (itemData.payload as Record<string, unknown>[])\r\n      : [];\r\n    return <>{formatter(itemData.value, itemData.name, item, index, payloadArray)}</>;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'flex flex-1 justify-between leading-none',\r\n        nestLabel ? 'items-end' : 'items-center',\r\n      )}\r\n    >\r\n      <div className=\"grid gap-1.5\">\r\n        {nestLabel ? tooltipLabel : undefined}\r\n        <span className=\"text-muted-foreground\">\r\n          {itemConfig?.label ?? itemData.name}\r\n        </span>\r\n      </div>\r\n      {itemData.value !== undefined && itemData.value !== 0 && (\r\n        <span className=\"font-mono font-medium tabular-nums text-foreground\">\r\n          {itemData.value.toLocaleString()}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\useTooltipLabel.tsx","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":54,"column":14,"nodeType":"Literal","messageId":"error","endLine":54,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[1769,1773],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[1769,1773],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":71,"column":14,"nodeType":"Literal","messageId":"error","endLine":71,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[2443,2447],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[2443,2447],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { cn } from '@/lib/utils';\r\nimport { ChartConfig } from '../chart'; // Assuming ChartConfig is exported from chart.tsx\r\n\r\n// Helper to extract item config from a payload.\r\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\r\n  if (typeof payload !== 'object' || payload === null) {\r\n    return;\r\n  }\r\n\r\n  const payloadPayload =\r\n    'payload' in payload &&\r\n    typeof (payload as Record<string, unknown>).payload === 'object' &&\r\n    (payload as Record<string, unknown>).payload !== null\r\n      ? (payload as Record<string, unknown>).payload\r\n      : undefined;\r\n\r\n  let configLabelKey: string = key;\r\n\r\n  if (key in (payload as Record<string, unknown>) && typeof (payload as Record<string, unknown>)[key] === 'string') {\r\n    configLabelKey = (payload as Record<string, unknown>)[key] as string;\r\n  } else if (\r\n    payloadPayload !== undefined &&\r\n    key in (payloadPayload as Record<string, unknown>) &&\r\n    typeof (payloadPayload as Record<string, unknown>)[key] === 'string'\r\n  ) {\r\n    configLabelKey = (payloadPayload as Record<string, unknown>)[key] as string;\r\n  }\r\n\r\n  return configLabelKey in config ? config[configLabelKey] : config[key];\r\n}\r\n\r\ninterface UseTooltipLabelProps {\r\n  hideLabel: boolean;\r\n  payload: unknown[] | undefined;\r\n  label: unknown;\r\n  labelFormatter?: (value: unknown, payload: unknown[]) => React.ReactNode;\r\n  labelClassName?: string;\r\n  config: ChartConfig;\r\n  labelKey?: string;\r\n}\r\n\r\nexport function useTooltipLabel({\r\n  hideLabel,\r\n  payload,\r\n  label,\r\n  labelFormatter,\r\n  labelClassName,\r\n  config,\r\n  labelKey\r\n}: UseTooltipLabelProps) {\r\n  return React.useMemo(() => {\r\n    if (hideLabel === true || (payload?.length ?? 0) === 0) {\r\n      return null;\r\n    }\r\n\r\n    const [item] = payload as unknown[];\r\n\r\n    const key = `${labelKey ?? (item as { dataKey?: string; name?: string }).dataKey ?? (item as { dataKey?: string; name?: string }).name ?? 'value'}`;\r\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n    const value =\r\n      (labelKey === undefined && typeof label === 'string') ? config[label]?.label ?? label : itemConfig?.label;\r\n\r\n    if (labelFormatter) {\r\n      return (\r\n        <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload as unknown[])}</div>\r\n      );\r\n    }\r\n\r\n    if (value === undefined || value === null || value === '') {\r\n      return null;\r\n    }\r\n\r\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>;\r\n  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dataQualityCharts.tsx","messages":[{"ruleId":"sonarjs/no-redundant-jump","severity":2,"message":"Remove this redundant jump.","line":67,"column":3,"nodeType":"ReturnStatement","messageId":"removeRedundantJump","endLine":67,"endColumn":10,"suggestions":[{"messageId":"suggestJumpRemoval","fix":{"range":[1740,1751],"text":""},"desc":"Remove this redundant jump"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n\r\n// SOTA color scheme for data quality categories\r\nconst QUALITY_COLORS = {\r\n  high: '#22c55e',    // Green for high quality (≥80%)\r\n  medium: '#f59e0b',  // Amber for medium quality (60-79%)\r\n  low: '#ef4444',     // Red for low quality (<60%)\r\n};\r\n\r\ninterface DataQualityStats {\r\n  total_trucks: number;\r\n  avg_quality_score: number;\r\n  high_quality_count: number;\r\n  medium_quality_count: number;\r\n  low_quality_count: number;\r\n  verified_count: number;\r\n  pending_count: number;\r\n  flagged_count: number;\r\n}\r\n\r\ninterface DataQualityChartsProps {\r\n  qualityStats: DataQualityStats;\r\n}\r\n\r\n// Custom tooltip for better accessibility and UX\r\ninterface TooltipProps {\r\n  active?: boolean;\r\n  payload?: Array<{\r\n    value: number;\r\n    payload: {\r\n      percentage?: string;\r\n    };\r\n  }>;\r\n  label?: string;\r\n}\r\n\r\nconst CustomTooltip = ({ active, payload, label }: TooltipProps) => {\r\n  if (active === true && payload != undefined && payload.length > 0) {\r\n    return (\r\n      <div\r\n        className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\"\r\n        role=\"status\"\r\n        aria-live=\"assertive\"\r\n      >\r\n        <p className=\"font-medium\">{`${label ?? 'Unknown'}: ${payload[0].value}`}</p>\r\n        <p className=\"text-sm text-gray-600\">\r\n          {payload[0].payload.percentage != undefined && payload[0].payload.percentage !== '' && `${payload[0].payload.percentage}% of total`}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  return;\r\n};\r\n\r\n// Quality Distribution Pie Chart Component\r\nconst QualityDistributionChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\r\n  const data = [\r\n    {\r\n      name: 'High Quality',\r\n      value: qualityStats.high_quality_count,\r\n      percentage: ((qualityStats.high_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Medium Quality',\r\n      value: qualityStats.medium_quality_count,\r\n      percentage: ((qualityStats.medium_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Low Quality',\r\n      value: qualityStats.low_quality_count,\r\n      percentage: ((qualityStats.low_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Quality Distribution</CardTitle>\r\n        <CardDescription>\r\n          Breakdown of food trucks by data quality categories\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <PieChart>\r\n            <Pie\r\n              data={data}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              labelLine={false}\r\n              label={({\r\n                name,\r\n                percentage\r\n              }: {\r\n                name?: string;\r\n                percentage?: string;\r\n              }) => `${name ?? 'Unknown'}: ${percentage ?? '0'}%`}\r\n              outerRadius={80}\r\n              fill=\"#8884d8\"\r\n              dataKey=\"value\"\r\n            >\r\n              {data.map((entry, index) => (\r\n                <Cell \r\n                  key={`cell-${index}`} \r\n                  fill={Object.values(QUALITY_COLORS)[index]} \r\n                />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip content={<CustomTooltip />} />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Verification Status Bar Chart Component\r\nconst VerificationStatusChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\r\n  const data = [\r\n    {\r\n      name: 'Verified',\r\n      count: qualityStats.verified_count,\r\n      percentage: ((qualityStats.verified_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Pending',\r\n      count: qualityStats.pending_count,\r\n      percentage: ((qualityStats.pending_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Flagged',\r\n      count: qualityStats.flagged_count,\r\n      percentage: ((qualityStats.flagged_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Verification Status</CardTitle>\r\n        <CardDescription>\r\n          Current verification status of all food trucks\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip content={<CustomTooltip />} />\r\n            <Bar dataKey=\"count\" fill=\"#3b82f6\" />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Helper function to get score color\r\nconst getScoreColor = (score: number): string => {\r\n  if (score >= 0.8) return 'text-green-600';\r\n  if (score >= 0.6) return 'text-yellow-600';\r\n  return 'text-red-600';\r\n};\r\n\r\n// Helper function to get quality threshold label\r\nconst getQualityThreshold = (score: number): string => {\r\n  if (score >= 0.8) return 'High';\r\n  if (score >= 0.6) return 'Medium';\r\n  return 'Low';\r\n};\r\n\r\n// Quality Score Overview Component\r\nconst QualityScoreOverview: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\r\n  const averageScore = (qualityStats.avg_quality_score * 100).toFixed(1);\r\n  const scoreColor = getScoreColor(qualityStats.avg_quality_score);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Overall Quality Score</CardTitle>\r\n        <CardDescription>\r\n          Average data quality score across all food trucks\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className={`text-6xl font-bold ${scoreColor}`}>\r\n            {averageScore}%\r\n          </div>\r\n          <p className=\"text-sm text-muted-foreground mt-2\">\r\n            Based on {qualityStats.total_trucks} food trucks\r\n          </p>\r\n          <div className=\"mt-4 text-sm\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Quality Threshold:</span>\r\n              <span className=\"font-medium\">\r\n                {getQualityThreshold(qualityStats.avg_quality_score)}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Main Data Quality Charts Component\r\nexport const DataQualityCharts: React.FC<DataQualityChartsProps> = ({ qualityStats }) => {\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n      <QualityScoreOverview qualityStats={qualityStats} />\r\n      <QualityDistributionChart qualityStats={qualityStats} />\r\n      <VerificationStatusChart qualityStats={qualityStats} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataQualityCharts;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\simpleQualityPanel.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":34,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1160,1174],"text":"Boolean(result.success)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":34,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":36,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":36,"column":101,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":105,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":40,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":40,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":40,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":65,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":65,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\createEventSourceConnection.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeMetrics' is defined but never used.","line":2,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":37},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeMetrics'.","line":2,"column":22,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[47,64],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parseEventData' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'parseEventData'.","line":3,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":3,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[117,133],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setupEventListeners' is defined but never used.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":45},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'setupEventListeners'.","line":3,"column":26,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":3,"endColumn":45,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[131,152],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":19,"column":25,"nodeType":null,"messageId":"deprecation","endLine":19,"endColumn":41},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":21,"column":36,"nodeType":null,"messageId":"deprecation","endLine":21,"endColumn":52},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":25,"column":30,"nodeType":null,"messageId":"deprecation","endLine":25,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsConnected' is assigned a value but never used.","line":34,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":62},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'setIsConnected' variable.","line":34,"column":48,"nodeType":"Identifier","messageId":"unusedVariable","endLine":34,"endColumn":62},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"setIsConnected\".","line":34,"column":48,"nodeType":null,"messageId":"removeAssignment","endLine":34,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setConnectionAttempts' is assigned a value but never used.","line":34,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":85},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'setConnectionAttempts' variable.","line":34,"column":64,"nodeType":"Identifier","messageId":"unusedVariable","endLine":34,"endColumn":85},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"setConnectionAttempts\".","line":34,"column":64,"nodeType":null,"messageId":"removeAssignment","endLine":34,"endColumn":85}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { AdminEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\r\nimport { parseEventData, setupEventListeners, setupEventSourceAuth } from '../useRealtimeAdminEventsHelpers';\r\nimport { useConnectionState } from './useConnectionState';\r\nimport { setupEventSourceListeners } from './setupEventSourceListeners';\r\n\r\nexport function createEventSourceConnection({\r\n  eventSourceRef,\r\n  isConnecting,\r\n  isManuallyDisconnectedRef,\r\n  connectionAttempts,\r\n  maxReconnectAttempts,\r\n  reconnectInterval,\r\n  reconnectTimeoutRef,\r\n  handleEvent,\r\n  connectionState,\r\n  connect\r\n}: {\r\n  eventSourceRef: React.MutableRefObject<EventSource | undefined>;\r\n  isConnecting: boolean;\r\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>;\r\n  connectionAttempts: number;\r\n  maxReconnectAttempts: number;\r\n  reconnectInterval: number;\r\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>;\r\n  handleEvent: (event: AdminEvent) => void;\r\n  connectionState: ReturnType<typeof useConnectionState>;\r\n  connect: () => void;\r\n}) {\r\n  if (eventSourceRef.current || isConnecting) {\r\n    return;\r\n  }\r\n\r\n  const { setIsConnecting, setConnectionError, setIsConnected, setConnectionAttempts } = connectionState;\r\n\r\n  setIsConnecting(true);\r\n  setConnectionError(undefined);\r\n  isManuallyDisconnectedRef.current = false;\r\n\r\n  try {\r\n    // Setup authentication\r\n    setupEventSourceAuth();\r\n\r\n    const eventSource = new EventSource('/api/admin/realtime-events');\r\n\r\n    // Setup all event listeners\r\n    setupEventSourceListeners(\r\n      eventSource,\r\n      handleEvent,\r\n      connectionState,\r\n      isManuallyDisconnectedRef,\r\n      connectionAttempts,\r\n      maxReconnectAttempts,\r\n      reconnectInterval,\r\n      reconnectTimeoutRef,\r\n      connect\r\n    );\r\n\r\n    eventSourceRef.current = eventSource;\r\n\r\n  } catch (error) {\r\n    console.error('Failed to establish real-time connection:', error);\r\n    setIsConnecting(false);\r\n    setConnectionError(error instanceof Error ? error.message : 'Connection failed');\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\setupEventSourceListeners.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeMetrics' is defined but never used.","line":2,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":37},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeMetrics'.","line":2,"column":22,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[47,64],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-params","severity":2,"message":"Function 'setupEventSourceListeners' has too many parameters (9). Maximum allowed is 4.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":6,"endColumn":42},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":10,"column":36,"nodeType":null,"messageId":"deprecation","endLine":10,"endColumn":52},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":14,"column":30,"nodeType":null,"messageId":"deprecation","endLine":14,"endColumn":46}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { AdminEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\r\nimport { parseEventData, setupEventListeners } from '../useRealtimeAdminEventsHelpers';\r\nimport { useConnectionState } from './useConnectionState';\r\n\r\nexport function setupEventSourceListeners(\r\n  eventSource: EventSource,\r\n  handleEvent: (event: AdminEvent) => void,\r\n  connectionState: ReturnType<typeof useConnectionState>,\r\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>,\r\n  connectionAttempts: number,\r\n  maxReconnectAttempts: number,\r\n  reconnectInterval: number,\r\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>,\r\n  connect: () => void\r\n) {\r\n  const { setIsConnected, setIsConnecting, setConnectionError, setConnectionAttempts } = connectionState;\r\n\r\n  eventSource.addEventListener('open', () => {\r\n    console.info('Real-time admin events connected');\r\n    setIsConnected(true);\r\n    setIsConnecting(false);\r\n    setConnectionError(undefined);\r\n    setConnectionAttempts(0);\r\n  });\r\n\r\n  eventSource.addEventListener('message', (event: MessageEvent) => {\r\n    const adminEvent = parseEventData(event.data as string, 'message');\r\n    if (adminEvent) {\r\n      handleEvent(adminEvent);\r\n    }\r\n  });\r\n\r\n  eventSource.addEventListener('error', (error) => {\r\n    console.error('Real-time admin events error:', error);\r\n    setIsConnected(false);\r\n    setIsConnecting(false);\r\n    setConnectionError('Connection error occurred');\r\n\r\n    // Attempt reconnection if not manually disconnected\r\n    if (!isManuallyDisconnectedRef.current && connectionAttempts < maxReconnectAttempts) {\r\n      setConnectionAttempts(prev => prev + 1);\r\n\r\n      reconnectTimeoutRef.current = setTimeout(() => {\r\n        if (!isManuallyDisconnectedRef.current) {\r\n          connect();\r\n        }\r\n      }, reconnectInterval);\r\n    } else if (connectionAttempts >= maxReconnectAttempts) {\r\n      setConnectionError('Max reconnection attempts reached');\r\n    }\r\n  });\r\n\r\n  // Handle specific event types\r\n  setupEventListeners(eventSource, handleEvent);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useAutoConnect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'useRef'.","line":1,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":29,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[20,28],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeMetrics' is defined but never used.","line":2,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":37},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeMetrics'.","line":2,"column":22,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[65,82],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-params","severity":2,"message":"Function 'useConnectionManagement' has too many parameters (9). Maximum allowed is 4.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":6,"endColumn":40},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":7,"column":25,"nodeType":null,"messageId":"deprecation","endLine":7,"endColumn":41},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":8,"column":30,"nodeType":null,"messageId":"deprecation","endLine":8,"endColumn":46},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":9,"column":36,"nodeType":null,"messageId":"deprecation","endLine":9,"endColumn":52}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\r\nimport { AdminEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\r\nimport { useConnectionState } from './useConnectionState';\r\nimport { createEventSourceConnection } from './createEventSourceConnection';\r\n\r\nexport function useConnectionManagement(\r\n  eventSourceRef: React.MutableRefObject<EventSource | undefined>,\r\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>,\r\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>,\r\n  connectionState: ReturnType<typeof useConnectionState>,\r\n  handleEvent: (event: AdminEvent) => void,\r\n  connectionAttempts: number,\r\n  maxReconnectAttempts: number,\r\n  reconnectInterval: number,\r\n  isConnecting: boolean\r\n) {\r\n  const { setIsConnected, setIsConnecting, setConnectionError, setRecentEvents } = connectionState;\r\n\r\n  const connect = useCallback(() => {\r\n    createEventSourceConnection({\r\n      eventSourceRef,\r\n      isConnecting,\r\n      isManuallyDisconnectedRef,\r\n      connectionAttempts,\r\n      maxReconnectAttempts,\r\n      reconnectInterval,\r\n      reconnectTimeoutRef,\r\n      handleEvent,\r\n      connectionState,\r\n      connect: () => connect()\r\n    });\r\n  }, [handleEvent, connectionAttempts, maxReconnectAttempts, reconnectInterval, isConnecting, connectionState]);\r\n\r\n  const disconnect = useCallback(() => {\r\n    isManuallyDisconnectedRef.current = true;\r\n\r\n    if (reconnectTimeoutRef.current) {\r\n      clearTimeout(reconnectTimeoutRef.current);\r\n      reconnectTimeoutRef.current = undefined;\r\n    }\r\n\r\n    if (eventSourceRef.current) {\r\n      eventSourceRef.current.close();\r\n      eventSourceRef.current = undefined;\r\n    }\r\n\r\n    setIsConnected(false);\r\n    setIsConnecting(false);\r\n    setConnectionError(undefined);\r\n  }, [setIsConnected, setIsConnecting, setConnectionError]);\r\n\r\n  const clearEvents = useCallback(() => {\r\n    setRecentEvents([]);\r\n  }, [setRecentEvents]);\r\n\r\n  return { connect, disconnect, clearEvents };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useEventHandlers.ts","messages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":21,"column":24,"nodeType":null,"endLine":21,"endColumn":27,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[695,698],"text":"!="}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\r\nimport { AdminEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\r\n\r\nexport function useEventHandlers(\r\n  eventFilter: ((event: AdminEvent) => boolean) | undefined,\r\n  setLastEventTime: (date: Date) => void,\r\n  setLatestMetrics: (metrics: RealtimeMetrics) => void,\r\n  setRecentEvents: React.Dispatch<React.SetStateAction<AdminEvent[]>>\r\n) {\r\n  return useCallback((event: AdminEvent) => {\r\n    // Apply filter if provided\r\n    if (eventFilter && !eventFilter(event)) {\r\n      return;\r\n    }\r\n\r\n    setLastEventTime(new Date());\r\n\r\n    // Handle different event types\r\n    switch (event.type) {\r\n      case 'heartbeat': {\r\n        if (event.data !== undefined && typeof event.data === 'object') {\r\n          setLatestMetrics(event.data as unknown as RealtimeMetrics);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'scraping_update':\r\n      case 'data_quality_change':\r\n      case 'system_alert':\r\n      case 'user_activity': {\r\n        setRecentEvents(prev => {\r\n          const newEvents = [event, ...prev].slice(0, 50); // Keep last 50 events\r\n          return newEvents;\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }, [eventFilter, setLastEventTime, setLatestMetrics, setRecentEvents]);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAdminAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAuthHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useDataCleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setupEventSourceListeners' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":35},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'setupEventSourceListeners'.","line":4,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":4,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[190,273],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createEventSourceConnection' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":37},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'createEventSourceConnection'.","line":5,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":5,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[273,360],"text":""},"desc":"Remove this import statement"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef } from 'react';\r\nimport { AdminEvent, RealtimeMetrics } from './useRealtimeAdminEvents.types';\r\nimport { useConnectionState } from './realtime/useConnectionState';\r\nimport { setupEventSourceListeners } from './realtime/setupEventSourceListeners';\r\nimport { createEventSourceConnection } from './realtime/createEventSourceConnection';\r\nimport { useEventHandlers } from './realtime/useEventHandlers';\r\nimport { useConnectionManagement } from './realtime/useConnectionManagement';\r\nimport { useAutoConnect } from './realtime/useAutoConnect';\r\n\r\n/**\r\n * SOTA Real-time Admin Dashboard Hook\r\n * \r\n * Provides real-time updates for admin dashboard using Server-Sent Events (SSE)\r\n * Implements automatic reconnection, error handling, and event filtering\r\n */\r\n\r\ninterface UseRealtimeAdminEventsOptions {\r\n  autoConnect?: boolean;\r\n  reconnectInterval?: number;\r\n  maxReconnectAttempts?: number;\r\n  eventFilter?: (event: AdminEvent) => boolean;\r\n}\r\n\r\ninterface UseRealtimeAdminEventsReturn {\r\n  // Connection state\r\n  isConnected: boolean;\r\n  isConnecting: boolean;\r\n  connectionError: string | undefined;\r\n  \r\n  // Data\r\n  latestMetrics: RealtimeMetrics | undefined;\r\n  recentEvents: AdminEvent[];\r\n  \r\n  // Controls\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n  clearEvents: () => void;\r\n  \r\n  // Statistics\r\n  connectionAttempts: number;\r\n  lastEventTime: Date | undefined;\r\n}\r\n\r\nexport function useRealtimeAdminEvents(\r\n  options: UseRealtimeAdminEventsOptions = {}\r\n): UseRealtimeAdminEventsReturn {\r\n  const {\r\n    autoConnect = true,\r\n    reconnectInterval = 5000,\r\n    maxReconnectAttempts = 10,\r\n    eventFilter\r\n  } = options;\r\n\r\n  // State management\r\n  const connectionState = useConnectionState();\r\n  const {\r\n    isConnected,\r\n    isConnecting,\r\n    connectionError,\r\n    latestMetrics,\r\n    recentEvents,\r\n    connectionAttempts,\r\n    lastEventTime\r\n  } = connectionState;\r\n\r\n  // Refs\r\n  const eventSourceRef = useRef<EventSource | undefined>(undefined);\r\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\r\n  const isManuallyDisconnectedRef = useRef(false);\r\n\r\n  // Event handlers\r\n  const handleEvent = useEventHandlers(\r\n    eventFilter,\r\n    connectionState.setLastEventTime,\r\n    connectionState.setLatestMetrics,\r\n    connectionState.setRecentEvents\r\n  );\r\n\r\n  // Connection management\r\n  const { connect, disconnect, clearEvents } = useConnectionManagement(\r\n    eventSourceRef,\r\n    reconnectTimeoutRef,\r\n    isManuallyDisconnectedRef,\r\n    connectionState,\r\n    handleEvent,\r\n    connectionAttempts,\r\n    maxReconnectAttempts,\r\n    reconnectInterval,\r\n    isConnecting\r\n  );\r\n\r\n  // Auto-connect on mount\r\n  useAutoConnect(autoConnect, connect, disconnect);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (reconnectTimeoutRef.current) {\r\n        clearTimeout(reconnectTimeoutRef.current);\r\n      }\r\n      if (eventSourceRef.current) {\r\n        eventSourceRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    // Connection state\r\n    isConnected,\r\n    isConnecting,\r\n    connectionError,\r\n    \r\n    // Data\r\n    latestMetrics,\r\n    recentEvents,\r\n    \r\n    // Controls\r\n    connect,\r\n    disconnect,\r\n    clearEvents,\r\n    \r\n    // Statistics\r\n    connectionAttempts,\r\n    lastEventTime\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEventsHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\ScraperEngine.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":309,"column":39,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":309,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":315,"column":39,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":315,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":45,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":45,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-cleanup\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1838,1841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1838,1841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3522,3525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3522,3525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handleGetStatus' has no 'await' expression.","line":126,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":126,"endColumn":38,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3727,3782],"text":"function handleGetStatus(): NextResponse"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handleGetDefault' has no 'await' expression.","line":163,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":163,"endColumn":39,"suggestions":[{"messageId":"removeAsync","fix":{"range":[4681,4737],"text":"function handleGetDefault(): NextResponse"},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { BatchCleanupService } from '@/lib/data-quality/batchCleanup';\r\nimport { DuplicatePreventionService } from '@/lib/data-quality/duplicatePrevention';\r\n\r\ninterface DataCleanupRequestBody {\r\n  action: string;\r\n  options?: {\r\n    batchSize?: number;\r\n    dryRun?: boolean;\r\n    operations?: string[];\r\n    truckData?: Record<string, unknown>;\r\n    targetId?: string;\r\n    sourceId?: string;\r\n  };\r\n}\r\n\r\nexport async function handlePostRequest(body: DataCleanupRequestBody): Promise<NextResponse> {\r\n  const { action, options = {} } = body;\r\n\r\n  switch (action) {\r\n    case 'full-cleanup': {\r\n      return await handleFullCleanup(options);\r\n    }\r\n    case 'check-duplicates': {\r\n      return await handleCheckDuplicates(options);\r\n    }\r\n    case 'merge-duplicates': {\r\n      return await handleMergeDuplicates(options);\r\n    }\r\n    case 'dry-run': {\r\n      return await handleDryRun(options);\r\n    }\r\n    default: {\r\n      return NextResponse.json(\r\n        { success: false, error: `Unknown action: ${action}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport async function handleGetRequest(request: NextRequest): Promise<NextResponse> {\r\n  const { searchParams } = new URL(request.url);\r\n  const action = searchParams.get('action');\r\n\r\n  switch (action) {\r\n    case 'status': {\r\n      return await handleGetStatus();\r\n    }\r\n    case 'preview': {\r\n      return await handleGetPreview();\r\n    }\r\n    default: {\r\n      return await handleGetDefault();\r\n    }\r\n  }\r\n}\r\n\r\nexport async function handleFullCleanup(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\r\n  const result = await BatchCleanupService.runFullCleanup({\r\n    batchSize: options?.batchSize ?? 50,\r\n    dryRun: options?.dryRun ?? false,\r\n    operations: options?.operations as any\r\n  });\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    action: 'full-cleanup',\r\n    result,\r\n    message: `Cleanup completed: ${result.summary.trucksImproved} trucks improved, ${result.summary.duplicatesRemoved} duplicates removed`\r\n  });\r\n}\r\n\r\nexport async function handleCheckDuplicates(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\r\n  const { truckData } = options ?? {};\r\n  if (!truckData) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Missing truckData for duplicate check' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    action: 'check-duplicates',\r\n    result: duplicateCheck\r\n  });\r\n}\r\n\r\nexport async function handleMergeDuplicates(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\r\n  const { targetId, sourceId } = options ?? {};\r\n  if (targetId === undefined || sourceId === undefined) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Missing targetId or sourceId for merge operation' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const mergedTruck = await DuplicatePreventionService.mergeDuplicates(targetId, sourceId);\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    action: 'merge-duplicates',\r\n    result: mergedTruck,\r\n    message: `Successfully merged truck ${sourceId} into ${targetId}`\r\n  });\r\n}\r\n\r\nexport async function handleDryRun(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\r\n  const result = await BatchCleanupService.runFullCleanup({\r\n    ...options,\r\n    operations: options?.operations as any,\r\n    dryRun: true\r\n  });\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    action: 'dry-run',\r\n    result,\r\n    message: 'Dry run completed - no changes made to database'\r\n  });\r\n}\r\n\r\nexport async function handleGetStatus(): Promise<NextResponse> {\r\n  return NextResponse.json({\r\n    success: true,\r\n    status: {\r\n      available_operations: [\r\n        'remove_placeholders',\r\n        'normalize_phone',\r\n        'fix_coordinates',\r\n        'update_quality_scores',\r\n        'merge_duplicates'\r\n      ],\r\n      default_batch_size: 50,\r\n      supports_dry_run: true\r\n    }\r\n  });\r\n}\r\n\r\nexport async function handleGetPreview(): Promise<NextResponse> {\r\n  const result = await BatchCleanupService.runFullCleanup({\r\n    batchSize: 10,\r\n    dryRun: true\r\n  });\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    preview: {\r\n      estimated_improvements: result.summary.trucksImproved,\r\n      estimated_duplicates: result.summary.duplicatesRemoved,\r\n      operations: result.operations.map(op => ({\r\n        type: op.type,\r\n        description: op.description,\r\n        affected_count: op.affectedCount\r\n      }))\r\n    }\r\n  });\r\n}\r\n\r\nexport async function handleGetDefault(): Promise<NextResponse> {\r\n  return NextResponse.json({\r\n    success: true,\r\n    endpoints: [\r\n      'GET /api/admin/data-cleanup?action=status - Get cleanup system status',\r\n      'GET /api/admin/data-cleanup?action=preview - Preview cleanup changes',\r\n      'POST /api/admin/data-cleanup - Run cleanup operations'\r\n    ],\r\n    actions: [\r\n      'full-cleanup - Run all cleanup operations',\r\n      'check-duplicates - Check if truck data is duplicate',\r\n      'merge-duplicates - Merge two duplicate trucks',\r\n      'dry-run - Preview changes without making them'\r\n    ]\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-quality\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QualityThresholds' is defined but never used.","line":4,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QualityAssessment' is defined but never used.","line":11,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QualityCategory' is defined but never used.","line":24,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limit' is assigned a value but never used.","line":34,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":14},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'limit' variable.","line":34,"column":9,"nodeType":"Identifier","messageId":"unusedVariable","endLine":34,"endColumn":14},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"limit\".","line":34,"column":9,"nodeType":null,"messageId":"removeAssignment","endLine":34,"endColumn":14},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":41,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[969,977],"text":"truckId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[970,977],"text":"(truckId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[969,977],"text":"!Boolean(truckId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":54,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":58,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":58,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1475,1482],"text":"(Boolean(truckId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":61,"column":39,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":61,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number | undefined`.","line":64,"column":38,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":64,"endColumn":43},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handleBatchUpdate' has no 'await' expression.","line":129,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":129,"endColumn":33,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3376,3382],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"unicorn/prefer-default-parameters","severity":2,"message":"Prefer default parameters over reassignment.","line":130,"column":3,"nodeType":"VariableDeclaration","messageId":"preferDefaultParameters","endLine":130,"endColumn":35,"suggestions":[{"messageId":"preferDefaultParametersSuggest","fix":{"range":[3409,3464],"text":"batchLimit = 100) {\r\n"},"data":{},"desc":"Replace reassignment with default parameter."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'truckData' is assigned a value but never used.","line":149,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":22},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'truckData' variable.","line":149,"column":13,"nodeType":"Identifier","messageId":"unusedVariable","endLine":149,"endColumn":22},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"truckData\".","line":149,"column":13,"nodeType":null,"messageId":"removeAssignment","endLine":149,"endColumn":22}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { FoodTruckService, supabase } from '@/lib/supabase';\r\n\r\ninterface QualityThresholds {\r\n  excellent: number;\r\n  good: number;\r\n  fair: number;\r\n  poor: number;\r\n}\r\n\r\ninterface QualityAssessment {\r\n  score: number;\r\n  breakdown: Record<string, number>;\r\n  recommendations: string[];\r\n}\r\n\r\ninterface TruckData {\r\n  id: string;\r\n  name: string;\r\n  data_quality_score: number;\r\n  verification_status: string;\r\n}\r\n\r\ninterface QualityCategory {\r\n  label: string;\r\n  color: string;\r\n  description: string;\r\n}\r\n\r\nexport async function handleGetRequest(request: NextRequest): Promise<NextResponse> {\r\n  const { searchParams } = new URL(request.url);\r\n  const action = searchParams.get('action');\r\n  const truckId = searchParams.get('truckId');\r\n  const limit = searchParams.get('limit');\r\n\r\n  switch (action) {\r\n    case 'stats': {\r\n      return await handleStatsAction();\r\n    }\r\n    case 'assess': {\r\n      if (!truckId) {\r\n        return NextResponse.json({ success: false, error: 'Missing truckId for assess action' }, { status: 400 });\r\n      }\r\n      return await handleAssessAction(truckId);\r\n    }\r\n    default: {\r\n      return await handleDefaultGetAction();\r\n    }\r\n  }\r\n}\r\n\r\nexport async function handlePostRequest(request: NextRequest): Promise<NextResponse> {\r\n  const body = await request.json();\r\n  const { action, truckId, limit } = body;\r\n\r\n  switch (action) {\r\n    case 'update-single': {\r\n      if (!truckId) {\r\n        return NextResponse.json({ success: false, error: 'Missing truckId for update-single action' }, { status: 400 });\r\n      }\r\n      return await handleUpdateSingle(truckId);\r\n    }\r\n    case 'batch-update': {\r\n      return await handleBatchUpdate(limit);\r\n    }\r\n    case 'recalculate-all': {\r\n      return await handleRecalculateAll();\r\n    }\r\n    default: {\r\n      return NextResponse.json({ success: false, error: `Unknown action: ${action}` }, { status: 400 });\r\n    }\r\n  }\r\n}\r\n\r\nasync function handleStatsAction() {\r\n  const qualityStatsRaw = await FoodTruckService.getDataQualityStats();\r\n\r\n  const qualityStats = qualityStatsRaw as Record<string, unknown>;\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: {\r\n      ...qualityStats,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\nasync function handleAssessAction(truckId: string) {\r\n  const truckRaw = await FoodTruckService.getTruckById(truckId);\r\n\r\n  const truck = truckRaw as TruckData;\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: {\r\n      truckId,\r\n      truckName: truck.name,\r\n      currentScore: truck.data_quality_score,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\nasync function handleDefaultGetAction() {\r\n  const qualityStats = await FoodTruckService.getDataQualityStats();\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: qualityStats\r\n  });\r\n}\r\n\r\nasync function handleUpdateSingle(truckId: string) {\r\n  const updatedTruck = await FoodTruckService.getTruckById(truckId);\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Quality score updated successfully',\r\n    data: {\r\n      truckId: updatedTruck.id,\r\n      truckName: updatedTruck.name,\r\n      newScore: updatedTruck.data_quality_score,\r\n      verificationStatus: updatedTruck.verification_status,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\nasync function handleBatchUpdate(limit?: number) {\r\n  const batchLimit = limit ?? 100;\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Batch quality score update completed',\r\n    data: {\r\n      limit: batchLimit,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\nasync function handleRecalculateAll() {\r\n  const { trucks } = await FoodTruckService.getAllTrucks(1000, 0);\r\n  let updated = 0;\r\n  let errors = 0;\r\n\r\n  for (const truck of trucks) {\r\n    try {\r\n      const truckData = truck as TruckData;\r\n      updated++;\r\n    } catch (error: unknown) {\r\n      const truckData = truck as TruckData;\r\n      console.error(`Failed to update truck ${truckData.id}:`, error);\r\n      errors++;\r\n    }\r\n  }\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Quality score recalculation completed',\r\n    data: {\r\n      totalTrucks: trucks.length,\r\n      updated,\r\n      errors,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader == undefined) return false;\r\n\r\n    const token = authHeader.replace('Bearer ', '');\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n    \r\n    if (error || !user) return false;\r\n\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\helpers.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handlePostRequest' has no 'await' expression.","line":25,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":25,"endColumn":40,"suggestions":[{"messageId":"removeAsync","fix":{"range":[784,790],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":30,"column":127,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":30,"endColumn":153},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3086,3089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3086,3089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":91,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":91,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":91,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":91,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":91,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `any` value.","line":91,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .limit on an `any` value.","line":91,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":95,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":95,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":95,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4496,4499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4496,4499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":130,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":136,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":130,"column":41,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":130,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":130,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":54},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":137,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":137,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4753,4763],"text":"(Boolean(oauthError))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":137,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":42}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { OAuthStatus } from './types';\r\n\r\nexport async function handleGetRequest(_request: NextRequest) {\r\n  const status = await getOAuthStatus();\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    ...status,\r\n    legacy_format: {\r\n      oauth_status: status.overall_status,\r\n      message: getStatusMessage(status.overall_status),\r\n      configuration_steps: status.overall_status === 'ready' ? undefined : [\r\n        '1. Go to Supabase Dashboard > Authentication > Providers',\r\n        '2. Enable Google provider',\r\n        '3. Add Google OAuth Client ID and Secret',\r\n        '4. Configure redirect URLs',\r\n        '5. Test OAuth flow'\r\n      ]\r\n    }\r\n  });\r\n}\r\n\r\nexport async function handlePostRequest(_request: NextRequest) {\r\n  const baseUrl = process.env.NODE_ENV === 'production'\r\n    ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\r\n    : 'http://localhost:3000';\r\n\r\n  const testUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/auth/v1/authorize?provider=google&redirect_to=${encodeURIComponent(`${baseUrl}/auth/callback`)}`;\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'OAuth test URL generated',\r\n    test_url: testUrl,\r\n    environment: process.env.NODE_ENV ?? 'development',\r\n    instructions: [\r\n      '1. Open the test_url in a new browser tab',\r\n      '2. Complete Google OAuth flow',\r\n      '3. Verify redirect to admin dashboard',\r\n      '4. Check for proper role assignment'\r\n    ],\r\n    manual_test_steps: [\r\n      'Navigate to /login page',\r\n      'Click Google login button',\r\n      'Complete OAuth flow',\r\n      'Verify admin access'\r\n    ],\r\n    automation_commands: [\r\n      'npm run oauth:verify - Check configuration',\r\n      'npm run oauth:test:dev - Test development flow',\r\n      'npm run oauth:test:prod - Test production flow'\r\n    ]\r\n  });\r\n}\r\n\r\nasync function getOAuthStatus(): Promise<OAuthStatus> {\r\n  const status: OAuthStatus = {\r\n    timestamp: new Date().toISOString(),\r\n    environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\r\n    supabase: {\r\n      connected: false,\r\n      projectId: 'zkwliyjjkdnigizidlln'\r\n    },\r\n    environment_variables: {\r\n      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL != undefined,\r\n      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY != undefined,\r\n      supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY != undefined\r\n    },\r\n    oauth_flow: {\r\n      loginPageExists: true,\r\n      callbackRouteExists: true,\r\n      authProviderConfigured: false\r\n    },\r\n    recommendations: [],\r\n    overall_status: 'not_configured'\r\n  };\r\n\r\n  await checkSupabaseConnection(status, supabase);\r\n  await checkSupabaseAuthSettings(status);\r\n  await testOAuthProvider(status, supabase);\r\n\r\n  status.recommendations = generateRecommendations(status);\r\n  status.overall_status = determineOverallStatus(status);\r\n\r\n  return status;\r\n}\r\n\r\nasync function checkSupabaseConnection(status: OAuthStatus, supabase: any) {\r\n  try {\r\n    const { error } = await supabase.from('profiles').select('count').limit(1);\r\n    if (error == undefined) {\r\n      status.supabase.connected = true;\r\n    } else {\r\n      status.supabase.error = error.message;\r\n    }\r\n  } catch (error) {\r\n    status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\r\n  }\r\n}\r\n\r\nasync function checkSupabaseAuthSettings(status: OAuthStatus) {\r\n  try {\r\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n    if (supabaseUrl != undefined && supabaseUrl !== '') {\r\n      const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\r\n      if (settingsResponse.ok === true) {\r\n        const settings = await settingsResponse.json() as {\r\n          external?: { google?: boolean };\r\n          disable_signup?: boolean;\r\n          autoconfirm?: boolean;\r\n        };\r\n        status.supabase.authSettings = {\r\n          googleEnabled: settings.external?.google ?? false,\r\n          signupEnabled: settings.disable_signup !== true,\r\n          autoconfirm: settings.autoconfirm ?? false\r\n        };\r\n        if (settings.external?.google != undefined) {\r\n          status.oauth_flow.authProviderConfigured = true;\r\n        }\r\n      }\r\n    }\r\n  } catch {\r\n    console.info('Auth settings endpoint requires authentication (normal)');\r\n  }\r\n}\r\n\r\nasync function testOAuthProvider(status: OAuthStatus, supabase: any) {\r\n  try {\r\n    const { error: oauthError } = await supabase.auth.signInWithOAuth({\r\n      provider: 'google',\r\n      options: {\r\n        redirectTo: 'http://localhost:3000/auth/callback',\r\n        skipBrowserRedirect: true\r\n      }\r\n    });\r\n    if (!oauthError || oauthError.message !== 'Provider not found') {\r\n      status.oauth_flow.authProviderConfigured = true;\r\n    }\r\n  } catch {\r\n    console.info('OAuth provider test failed (may be normal)');\r\n  }\r\n}\r\n\r\nfunction generateRecommendations(status: OAuthStatus): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  if (!status.environment_variables.supabaseUrl) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseAnonKey) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseServiceKey) {\r\n    recommendations.push('❌ Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\r\n  }\r\n\r\n  if (!status.supabase.connected) {\r\n    recommendations.push('❌ Fix Supabase connection issue');\r\n    if (status.supabase.error != undefined && status.supabase.error !== '') {\r\n      recommendations.push(`   Error: ${status.supabase.error}`);\r\n    }\r\n  }\r\n\r\n  if (status.supabase.authSettings == undefined) {\r\n    recommendations.push('🔧 Configure Google OAuth in Supabase Dashboard', '   1. Create Google Cloud Console OAuth credentials', '   2. Add credentials to Supabase Auth settings');\r\n  } else {\r\n    if (status.supabase.authSettings.googleEnabled === true) {\r\n      recommendations.push('✅ Google OAuth provider is enabled');\r\n    } else {\r\n      recommendations.push('🔧 Enable Google OAuth provider in Supabase Dashboard', '   Go to: Authentication > Providers > Google');\r\n    }\r\n  }\r\n\r\n  if (status.overall_status === 'ready') {\r\n    recommendations.push('🎉 OAuth configuration is complete!', '✅ Test the login flow at /login');\r\n  }\r\n\r\n  if (recommendations.length > 1) {\r\n    recommendations.push('📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions', '🔧 Run: npm run oauth:verify for automated checks');\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\nfunction determineOverallStatus(status: OAuthStatus): 'ready' | 'partial' | 'not_configured' | 'error' {\r\n  if (status.supabase.connected !== true || (status.supabase.error != undefined && status.supabase.error !== '')) {\r\n    return 'error';\r\n  }\r\n\r\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\r\n  if (!envVarsComplete) {\r\n    return 'not_configured';\r\n  }\r\n\r\n  if (status.supabase.authSettings?.googleEnabled === true && status.oauth_flow.authProviderConfigured === true) {\r\n    return 'ready';\r\n  }\r\n\r\n  if (status.supabase.connected === true && envVarsComplete) {\r\n    return 'partial';\r\n  }\r\n\r\n  return 'not_configured';\r\n}\r\n\r\nfunction getStatusMessage(status: string): string {\r\n  switch (status) {\r\n    case 'ready': {\r\n      return 'Google OAuth is fully configured and ready to use';\r\n    }\r\n    case 'partial': {\r\n      return 'Basic configuration complete, OAuth provider needs setup';\r\n    }\r\n    case 'not_configured': {\r\n      return 'Google OAuth is not configured';\r\n    }\r\n    case 'error': {\r\n      return 'Configuration error detected';\r\n    }\r\n    default: {\r\n      return 'Unknown configuration status';\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextResponse'.","line":1,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[20,34],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handleGetRequest' has no 'await' expression.","line":54,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":54,"endColumn":39,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1268,1340],"text":"function handleGetRequest(request: NextRequest): Response"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":104,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":110,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `ReadableStreamDefaultController<any>` assigned to a parameter of type `ReadableStreamDefaultController<Uint8Array<ArrayBufferLike>>`.","line":106,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":106,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":133,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":133,"endColumn":38},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":291,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":291,"endColumn":40}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase, supabaseAdmin, ScrapingJobService, FoodTruckService } from '@/lib/supabase';\r\nimport { AdminEvent } from './types';\r\n\r\ninterface RealtimeMetrics {\r\n  scrapingJobs: {\r\n    active: number;\r\n    completed: number;\r\n    failed: number;\r\n    pending: number;\r\n  };\r\n  dataQuality: {\r\n    averageScore: number;\r\n    totalTrucks: number;\r\n    recentChanges: number;\r\n  };\r\n  systemHealth: {\r\n    status: 'healthy' | 'warning' | 'error';\r\n    uptime: number;\r\n    lastUpdate: string;\r\n  };\r\n}\r\n\r\nexport async function verifyAdminAccess(request: NextRequest): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader?.startsWith('Bearer ') !== true) {\r\n      return false;\r\n    }\r\n\r\n    const token = authHeader.slice(7);\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n\r\n    if (error || !user) {\r\n      return false;\r\n    }\r\n\r\n    if (!supabaseAdmin) {\r\n      return false;\r\n    }\r\n\r\n    const { data: profile } = await supabaseAdmin\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function handleGetRequest(request: NextRequest): Promise<Response> {\r\n  const stream = new ReadableStream({\r\n    start(controller) {\r\n      const encoder = new TextEncoder();\r\n\r\n      const connectionEvent: AdminEvent = {\r\n        id: generateEventId(),\r\n        type: 'heartbeat',\r\n        timestamp: new Date().toISOString(),\r\n        data: {\r\n          message: 'Real-time admin dashboard connected',\r\n          connectionId: generateEventId()\r\n        }\r\n      };\r\n      \r\n      controller.enqueue(encoder.encode(formatSSEMessage(connectionEvent)));\r\n\r\n      const handleHeartbeatEvent = async () => {\r\n        try {\r\n          const metrics = await fetchRealtimeMetrics();\r\n          const event: AdminEvent = {\r\n            id: generateEventId(),\r\n            type: 'heartbeat',\r\n            timestamp: new Date().toISOString(),\r\n            data: { ...metrics }\r\n          };\r\n\r\n          controller.enqueue(encoder.encode(formatSSEMessage(event)));\r\n        } catch (error) {\r\n          console.error('Error fetching realtime metrics:', error);\r\n\r\n          const errorEvent: AdminEvent = {\r\n            id: generateEventId(),\r\n            type: 'system_alert',\r\n            timestamp: new Date().toISOString(),\r\n            data: {\r\n              error: 'Failed to fetch metrics',\r\n              details: error instanceof Error ? error.message : 'Unknown error'\r\n            },\r\n            severity: 'error'\r\n          };\r\n\r\n          controller.enqueue(encoder.encode(formatSSEMessage(errorEvent)));\r\n        }\r\n      };\r\n\r\n      const intervalId = setInterval(() => {\r\n        void handleHeartbeatEvent();\r\n      }, 5000);\r\n\r\n      const changeMonitorId = setInterval(async () => {\r\n        try {\r\n          await monitorDataChanges(controller, encoder);\r\n        } catch (error) {\r\n          console.error('Error monitoring data changes:', error);\r\n        }\r\n      }, 10_000);\r\n\r\n      request.signal.addEventListener('abort', () => {\r\n        clearInterval(intervalId);\r\n        clearInterval(changeMonitorId);\r\n        controller.close();\r\n      });\r\n    }\r\n  });\r\n\r\n  return new Response(stream, {\r\n    headers: {\r\n      'Content-Type': 'text/event-stream',\r\n      'Cache-Control': 'no-cache',\r\n      'Connection': 'keep-alive',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Headers': 'Cache-Control'\r\n    }\r\n  });\r\n}\r\n\r\nexport async function handlePostRequest(request: NextRequest): Promise<Response> {\r\n  try {\r\n    const body = await request.json();\r\n    const { action } = body as { action: string };\r\n\r\n    switch (action) {\r\n      case 'health_check': {\r\n        return await handleHealthCheck();\r\n      }\r\n\r\n      case 'trigger_test_event': {\r\n        return handleTriggerTestEvent();\r\n      }\r\n\r\n      default: {\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'Unknown action',\r\n          available_actions: ['health_check', 'trigger_test_event']\r\n        }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Realtime events POST error:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'Internal server error',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function fetchRealtimeMetrics(): Promise<RealtimeMetrics> {\r\n  try {\r\n    const recentJobs = await ScrapingJobService.getJobsByStatus('all');\r\n    const typedJobs = recentJobs as Array<{ status?: string }>;\r\n    const scrapingMetrics = {\r\n      active: typedJobs.filter(job => job.status === 'running').length,\r\n      completed: typedJobs.filter(job => job.status === 'completed').length,\r\n      failed: typedJobs.filter(job => job.status === 'failed').length,\r\n      pending: typedJobs.filter(job => job.status === 'pending').length\r\n    };\r\n\r\n    const qualityStats = await FoodTruckService.getDataQualityStats();\r\n    const dataQualityMetrics = {\r\n      averageScore: qualityStats.avg_quality_score ?? 0,\r\n      totalTrucks: qualityStats.total_trucks ?? 0,\r\n      recentChanges: 0\r\n    };\r\n\r\n    const systemHealth = {\r\n      status: 'healthy' as const,\r\n      uptime: process.uptime(),\r\n      lastUpdate: new Date().toISOString()\r\n    };\r\n\r\n    return {\r\n      scrapingJobs: scrapingMetrics,\r\n      dataQuality: dataQualityMetrics,\r\n      systemHealth\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching realtime metrics:', error);\r\n    return {\r\n      scrapingJobs: { active: 0, completed: 0, failed: 0, pending: 0 },\r\n      dataQuality: { averageScore: 0, totalTrucks: 0, recentChanges: 0 },\r\n      systemHealth: {\r\n        status: 'error',\r\n        uptime: 0,\r\n        lastUpdate: new Date().toISOString()\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nasync function sendScrapingUpdateEvent(\r\n  controller: ReadableStreamDefaultController<Uint8Array>,\r\n  encoder: TextEncoder\r\n): Promise<void> {\r\n  const recentJobs = await ScrapingJobService.getJobsByStatus('all');\r\n\r\n  if (recentJobs.length > 0) {\r\n    const event: AdminEvent = {\r\n      id: generateEventId(),\r\n      type: 'scraping_update',\r\n      timestamp: new Date().toISOString(),\r\n      data: {\r\n        recentJobs: recentJobs.map((job: unknown) => {\r\n          const jobData = job as { id?: string; status?: string; started_at?: string; completed_at?: string };\r\n          return {\r\n            id: jobData.id,\r\n            status: jobData.status,\r\n            started_at: jobData.started_at,\r\n            completed_at: jobData.completed_at\r\n          };\r\n        }),\r\n        count: recentJobs.length\r\n      },\r\n      severity: 'info'\r\n    };\r\n\r\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\r\n  }\r\n}\r\n\r\nasync function sendDataQualityChangeEvent(\r\n  controller: ReadableStreamDefaultController<Uint8Array>,\r\n  encoder: TextEncoder\r\n): Promise<void> {\r\n  const recentTrucks = await FoodTruckService.getAllTrucks(10, 0);\r\n  const recentlyUpdated = recentTrucks.trucks.filter(truck => {\r\n    const updatedAt = new Date(truck.updated_at);\r\n    const oneMinuteAgo = new Date(Date.now() - 60_000);\r\n    return updatedAt > oneMinuteAgo;\r\n  });\r\n\r\n  if (recentlyUpdated.length > 0) {\r\n    const event: AdminEvent = {\r\n      id: generateEventId(),\r\n      type: 'data_quality_change',\r\n      timestamp: new Date().toISOString(),\r\n      data: {\r\n        updatedTrucks: recentlyUpdated.map(truck => ({\r\n          id: truck.id,\r\n          name: truck.name,\r\n          data_quality_score: truck.data_quality_score,\r\n          updated_at: truck.updated_at\r\n        })),\r\n        count: recentlyUpdated.length\r\n      },\r\n      severity: 'info'\r\n    };\r\n\r\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\r\n  }\r\n}\r\n\r\nasync function monitorDataChanges(\r\n  controller: ReadableStreamDefaultController<Uint8Array>,\r\n  encoder: TextEncoder\r\n): Promise<void> {\r\n  try {\r\n    await sendScrapingUpdateEvent(controller, encoder);\r\n    await sendDataQualityChangeEvent(controller, encoder);\r\n  } catch (error) {\r\n    console.error('Error monitoring data changes:', error);\r\n  }\r\n}\r\n\r\nfunction formatSSEMessage(event: AdminEvent): string {\r\n  return `id: ${event.id}\\nevent: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`;\r\n}\r\n\r\nfunction generateEventId(): string {\r\n  return `${Date.now()}-${Math.random().toString(36).slice(2, 11)}`;\r\n}\r\n\r\nasync function handleHealthCheck(): Promise<Response> {\r\n  const metrics = await fetchRealtimeMetrics();\r\n  return new Response(JSON.stringify({\r\n    success: true,\r\n    status: 'healthy',\r\n    metrics,\r\n    timestamp: new Date().toISOString()\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nfunction handleTriggerTestEvent(): Response {\r\n  return new Response(JSON.stringify({\r\n    success: true,\r\n    message: 'Test event triggered',\r\n    timestamp: new Date().toISOString()\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextRequest'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[9,22],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is assigned a value but never used.","line":75,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":16},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'metrics' variable.","line":75,"column":9,"nodeType":"Identifier","messageId":"unusedVariable","endLine":75,"endColumn":16},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"metrics\".","line":75,"column":9,"nodeType":null,"messageId":"removeAssignment","endLine":75,"endColumn":16}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { ScrapingJobService, FoodTruckService, supabase } from '@/lib/supabase';\r\nimport { RealtimeMetrics } from './types';\r\n\r\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader == undefined) return false;\r\n\r\n    const token = authHeader.replace('Bearer ', '');\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n\r\n    if (error || !user) return false;\r\n\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function handleGetRequest(): Promise<NextResponse> {\r\n  const metrics = await getScrapingMetrics();\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: metrics,\r\n    timestamp: new Date().toISOString()\r\n  });\r\n}\r\n\r\nasync function getScrapingMetrics(): Promise<RealtimeMetrics> {\r\n  // Fetch real scraping metrics from database\r\n  const [allJobs, , recentTrucks] = await Promise.all([\r\n    ScrapingJobService.getAllJobs(100, 0), // Get last 100 jobs for metrics\r\n    ScrapingJobService.getJobsFromDate(new Date(Date.now() - 24 * 60 * 60 * 1000)), // Last 24 hours (unused but kept for potential future use)\r\n    FoodTruckService.getAllTrucks(1000, 0), // Get trucks for processing count\r\n  ]);\r\n\r\n  const totalRuns = allJobs.length;\r\n  const typedJobs = allJobs as Array<{ status?: string; started_at?: string; completed_at?: string }>;\r\n  const successfulRuns = typedJobs.filter(job => job.status === 'completed').length;\r\n  const failedRuns = typedJobs.filter(job => job.status === 'failed').length;\r\n\r\n  // Calculate average run time from completed jobs\r\n  const completedJobs = typedJobs.filter(job =>\r\n    job.status === 'completed' && job.started_at !== undefined && job.completed_at !== undefined\r\n  );\r\n\r\n  let totalRunTime = 0;\r\n  for (const job of completedJobs) {\r\n    const start = new Date(job.started_at ?? '').getTime();\r\n    const end = new Date(job.completed_at ?? '').getTime();\r\n    totalRunTime += (end - start) / 1000; // Convert to seconds\r\n  }\r\n\r\n  const averageRunTime = completedJobs.length > 0\r\n    ? Math.round(totalRunTime / completedJobs.length)\r\n    : 0;\r\n\r\n  // Count trucks processed today and new trucks\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n\r\n  const typedTrucks = recentTrucks.trucks as Array<{ created_at: string }>;\r\n  const newTrucksToday = typedTrucks.filter(truck => {\r\n    const createdAt = new Date(truck.created_at);\r\n    return createdAt >= today;\r\n  }).length;\r\n\r\n  const metrics = {\r\n    totalRuns,\r\n    successfulRuns,\r\n    failedRuns,\r\n    averageRunTime,\r\n    totalTrucksProcessed: recentTrucks.total,\r\n    newTrucksToday,\r\n  };\r\n\r\n  return {\r\n    scrapingJobs: {\r\n      active: typedJobs.filter(job => job.status === 'running').length,\r\n      completed: successfulRuns,\r\n      failed: failedRuns,\r\n      pending: typedJobs.filter(job => job.status === 'pending').length,\r\n    },\r\n    dataQuality: {\r\n      averageScore: 0, // Placeholder, actual calculation might be complex\r\n      totalTrucks: recentTrucks.total,\r\n      recentChanges: 0, // Placeholder\r\n    },\r\n    systemHealth: {\r\n      status: 'healthy',\r\n      uptime: process.uptime(),\r\n      lastUpdate: new Date().toISOString(),\r\n    },\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any[]` assigned to a parameter of type `{ metric_name: string; metric_value: number; rating: string; }[]`.","line":170,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":170,"endColumn":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\nimport { WebVitalMetric } from './types';\r\n\r\n/**\r\n * Get Web Vitals Analytics Data\r\n */\r\nexport function getRequestParams(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const days = Number.parseInt(searchParams.get('days') ?? '7');\r\n  const page = searchParams.get('page');\r\n  return { days, page };\r\n}\r\n\r\nexport async function fetchAndFilterMetrics(request: NextRequest) {\r\n  const { days, page } = getRequestParams(request);\r\n\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Database not available');\r\n  }\r\n\r\n  const startDate = new Date();\r\n  startDate.setDate(startDate.getDate() - days);\r\n\r\n  let query = supabaseAdmin\r\n    .from('web_vitals_metrics')\r\n    .select('*')\r\n    .gte('recorded_at', startDate.toISOString())\r\n    .order('recorded_at', { ascending: false });\r\n\r\n  if (page != undefined && page !== '') {\r\n    query = query.ilike('page_url', `%${page}%`);\r\n  }\r\n\r\n  const { data: metrics, error } = await query.limit(1000);\r\n\r\n  if (error) {\r\n    throw error;\r\n  }\r\n\r\n  return { metrics: metrics ?? [], days, startDate };\r\n}\r\n\r\n/**\r\n * Calculate summary statistics for metrics\r\n */\r\nexport function calculateMetricsSummary(metrics: { metric_name: string; metric_value: number; rating: string }[]) {\r\n  const metricTypes: ('LCP' | 'FID' | 'CLS' | 'FCP' | 'TTFB')[] = ['LCP', 'FID', 'CLS', 'FCP', 'TTFB'];\r\n  const summary: Record<string, {\r\n    count: number;\r\n    average: number | undefined;\r\n    median: number | undefined;\r\n    p75: number | undefined;\r\n    p95: number | undefined;\r\n    goodCount: number;\r\n    needsImprovementCount: number;\r\n    poorCount: number;\r\n  }> = {};\r\n\r\n  for (const metricName of metricTypes) {\r\n    const metricData = metrics.filter(m => m.metric_name === metricName);\r\n    \r\n    if (metricData.length === 0) {\r\n      summary[metricName] = {\r\n        count: 0,\r\n        average: undefined,\r\n        median: undefined,\r\n        p75: undefined,\r\n        p95: undefined,\r\n        goodCount: 0,\r\n        needsImprovementCount: 0,\r\n        poorCount: 0\r\n      };\r\n      continue;\r\n    }\r\n\r\n    const values = metricData.map(m => m.metric_value).sort((a, b) => a - b);\r\n    const ratings = metricData.map(m => m.rating);\r\n\r\n    summary[metricName] = {\r\n      count: metricData.length,\r\n      average: Math.round(values.reduce((sum: number, val: number) => sum + val, 0) / values.length),\r\n      median: getPercentile(values, 50),\r\n      p75: getPercentile(values, 75),\r\n      p95: getPercentile(values, 95),\r\n      goodCount: ratings.filter(r => r === 'good').length,\r\n      needsImprovementCount: ratings.filter(r => r === 'needs-improvement').length,\r\n      poorCount: ratings.filter(r => r === 'poor').length\r\n    };\r\n  }\r\n\r\n  return summary;\r\n}\r\n\r\n/**\r\n * Calculate percentile value from sorted array\r\n */\r\nexport function getPercentile(sortedValues: number[], percentile: number): number {\r\n  if (sortedValues.length === 0) return 0;\r\n  \r\n  const index = (percentile / 100) * (sortedValues.length - 1);\r\n  const lower = Math.floor(index);\r\n  const upper = Math.ceil(index);\r\n  \r\n  if (lower === upper) {\r\n    return Math.round(sortedValues[lower]);\r\n  }\r\n  \r\n  const weight = index - lower;\r\n  return Math.round(sortedValues[lower] * (1 - weight) + sortedValues[upper] * weight);\r\n}\r\n\r\nexport async function handlePostRequest(request: NextRequest) {\r\n  try {\r\n    const metric = await request.json() as WebVitalMetric;\r\n\r\n    // Validate metric data\r\n    if (!metric.name || typeof metric.value !== 'number' || !metric.url) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid metric data' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (supabaseAdmin) {\r\n      try {\r\n        const { error } = await supabaseAdmin\r\n          .from('web_vitals_metrics')\r\n          .insert({\r\n            metric_name: metric.name,\r\n            metric_value: metric.value,\r\n            rating: metric.rating,\r\n            page_url: metric.url,\r\n            user_agent: metric.userAgent,\r\n            recorded_at: new Date(metric.timestamp).toISOString()\r\n          });\r\n\r\n        if (error) {\r\n          console.warn('Failed to store web vital metric:', error);\r\n          // Don't fail the request - metrics collection should be non-blocking\r\n        }\r\n      } catch (dbError) {\r\n        console.warn('Database error storing web vital:', dbError);\r\n      }\r\n    }\r\n\r\n    // Log performance issues for monitoring\r\n    if (metric.rating === 'poor') {\r\n      console.warn(`Poor ${metric.name} performance detected:`, {\r\n        value: metric.value,\r\n        url: metric.url,\r\n        timestamp: new Date(metric.timestamp).toISOString()\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error('Web vitals endpoint error:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function handleGetRequest(request: NextRequest) {\r\n  try {\r\n    const { metrics, days, startDate } = await fetchAndFilterMetrics(request);\r\n\r\n    const summary = calculateMetricsSummary(metrics);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        metrics,\r\n        summary,\r\n        period: {\r\n          days,\r\n          startDate: startDate.toISOString(),\r\n          endDate: new Date().toISOString()\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to fetch web vitals analytics:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to fetch analytics data' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\handlers.ts","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":20,"column":10,"nodeType":"Literal","messageId":"error","endLine":20,"endColumn":14,"suggestions":[{"messageId":"remove","fix":{"range":[836,840],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[836,840],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { autoScraper } from '@/lib/autoScraper';\r\nimport { scheduler } from '@/lib/scheduler';\r\nimport { logActivity } from '@/lib/activityLogger';\r\nimport { AutoScrapeResult } from './types';\r\n\r\nfunction verifyCronSecret(request: NextRequest): NextResponse | null {\r\n  const authHeader = request.headers.get('authorization');\r\n  const cronSecret = process.env.CRON_SECRET;\r\n\r\n  if (cronSecret === undefined || cronSecret === '') {\r\n    console.error('CRON_SECRET not configured');\r\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\r\n  }\r\n\r\n  if (authHeader !== `Bearer ${cronSecret}`) {\r\n    console.error('Unauthorized cron attempt:', authHeader);\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction logAutoScrapeStart() {\r\n  console.info('Starting automated scraping job...');\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_started',\r\n    details: { timestamp: new Date().toISOString() },\r\n  });\r\n}\r\n\r\nfunction logAutoScrapeCompletion(result: AutoScrapeResult) {\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_completed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      trucksProcessed: result.trucksProcessed,\r\n      newTrucksFound: result.newTrucksFound,\r\n      errorsCount: result.errors?.length ?? 0,\r\n    },\r\n  });\r\n  console.info('Automated scraping job completed successfully');\r\n}\r\n\r\nfunction logAutoScrapeFailure(error: unknown) {\r\n  console.error('Auto-scraping cron job failed:', error);\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_failed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n    },\r\n  });\r\n}\r\n\r\nexport async function handlePostRequest(request: NextRequest) {\r\n  try {\r\n    const authResponse = verifyCronSecret(request);\r\n    if (authResponse) {\r\n      return authResponse;\r\n    }\r\n\r\n    logAutoScrapeStart();\r\n\r\n    const result: AutoScrapeResult = await autoScraper.runAutoScraping();\r\n    scheduler.scheduleFollowUpTasks(result);\r\n    logAutoScrapeCompletion(result);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Auto-scraping completed successfully',\r\n      data: {\r\n        trucksProcessed: result.trucksProcessed,\r\n        newTrucksFound: result.newTrucksFound,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    logAutoScrapeFailure(error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Auto-scraping failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport function handleGetRequest() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed. Use POST for cron jobs.' },\r\n    { status: 405 },\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handleSearchOperation' has no 'await' expression.","line":85,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":85,"endColumn":44,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2368,2374],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { firecrawl } from '@/lib/firecrawl';\r\n\r\n// Helper function to handle scrape operation\r\nexport async function handleScrapeOperation(url: string, options: Record<string, unknown>) {\r\n  const scrapeResult = await firecrawl.scrapeUrl(url, {\r\n    formats: ['markdown', 'html'],\r\n    onlyMainContent: true,\r\n    ...options,\r\n  });\r\n\r\n  return NextResponse.json({\r\n    success: scrapeResult.success,\r\n    data: scrapeResult.success ? [scrapeResult.data] : undefined,\r\n    error: scrapeResult.error,\r\n  });\r\n}\r\n\r\n// Helper function to poll crawl status\r\nexport async function pollCrawlStatus(jobId: string): Promise<NextResponse> {\r\n  let attempts = 0;\r\n  const maxAttempts = 30; // 5 minutes max\r\n  const pollInterval = 10_000; // 10 seconds\r\n\r\n  while (attempts < maxAttempts) {\r\n    await new Promise((resolve) => setTimeout(resolve, pollInterval));\r\n\r\n    const status = await firecrawl.getCrawlStatus(jobId);\r\n    if (status.success && status.status === 'completed' && status.data) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: status.data,\r\n      });\r\n    } else if (status.success && status.status === 'failed') {\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          error: 'Crawl job failed',\r\n        },\r\n        { status: 500 },\r\n      );\r\n    }\r\n\r\n    attempts++;\r\n  }\r\n\r\n  // Timeout\r\n  return NextResponse.json(\r\n    {\r\n      success: false,\r\n      error: 'Crawl job timed out',\r\n    },\r\n    { status: 408 },\r\n  );\r\n}\r\n\r\n// Helper function to handle crawl operation\r\nexport async function handleCrawlOperation(url: string, options: Record<string, unknown>) {\r\n  const crawlJob = await firecrawl.crawlWebsite(url, {\r\n    crawlerOptions: {\r\n      maxDepth: (options.maxDepth as number) || 2,\r\n      limit: (options.limit as number) || 20,\r\n      includes: options.includes as string[] | undefined,\r\n      excludes: options.excludes as string[] | undefined,\r\n    },\r\n    pageOptions: {\r\n      formats: ['markdown'],\r\n      onlyMainContent: true,\r\n    },\r\n  });\r\n\r\n  if (!crawlJob.success || crawlJob.jobId == undefined) {\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: crawlJob.error ?? 'Failed to start crawl job',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n\r\n  return pollCrawlStatus(crawlJob.jobId);\r\n}\r\n\r\nexport async function handleSearchOperation() {\r\n  return NextResponse.json(\r\n    {\r\n      success: false,\r\n      error:\r\n        'Search operation not directly supported by Firecrawl API. Use crawl on directory URLs instead.',\r\n    },\r\n    { status: 400 },\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\monitoring\\api-usage\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1818,1821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1818,1821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":71,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { APIMonitor, type APIService } from '@/lib/monitoring/apiMonitor';\r\n\r\nexport function handleComprehensiveMonitoring() {\r\n  const monitoringResult = APIMonitor.checkAllAPIs();\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: monitoringResult,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n}\r\n\r\nexport async function handleServiceSpecificMonitoring(\r\n  request: NextRequest,\r\n  service: APIService,\r\n) {\r\n  const { searchParams } = new URL(request.url);\r\n  const action = searchParams.get('action');\r\n\r\n  if (action === 'check') {\r\n    const requestCount = Number.parseInt(searchParams.get('requests') ?? '1', 10);\r\n    const tokenCount = Number.parseInt(searchParams.get('tokens') ?? '0', 10);\r\n\r\n    const canMakeRequest = await APIMonitor.canMakeRequest(\r\n      service,\r\n      requestCount,\r\n      tokenCount,\r\n    );\r\n    const usage = APIMonitor.getCurrentUsage(service);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      service,\r\n      canMakeRequest: canMakeRequest.allowed,\r\n      reason: canMakeRequest.reason,\r\n      waitTime: canMakeRequest.waitTime,\r\n      usage,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n  }\r\n\r\n  const usage = APIMonitor.getCurrentUsage(service);\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    service,\r\n    usage,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n}\r\n\r\nexport function handleClearAlerts() {\r\n  APIMonitor.clearAlertHistory();\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Alert history cleared',\r\n  });\r\n}\r\n\r\nexport function handleGetAlerts() {\r\n  const alerts = APIMonitor.getAlertHistory();\r\n  return NextResponse.json({\r\n    success: true,\r\n    alerts,\r\n    count: alerts.length,\r\n  });\r\n}\r\n\r\nexport function handleTestAlert(body: any) {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n  const { service, level } = body;\r\n  if (service == undefined || level == undefined) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Missing service or level' },\r\n      { status: 400 },\r\n    );\r\n  }\r\n\r\n  // This would trigger a test alert in a real implementation\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: `Test alert triggered for ${service} at ${level} level`,\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\handlers.ts","messages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":89,"column":14,"nodeType":null,"endLine":89,"endColumn":17,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[2842,2845],"text":"=="}}]}],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":103,"column":7,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":103,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { schedulerInstance, schedulerTasks, setSchedulerInstance } from './data';\r\nimport { PutRequestBody } from './types';\r\n\r\nexport function handleSchedulerStatus() {\r\n  return NextResponse.json({\r\n    isRunning: schedulerInstance !== undefined,\r\n    tasks: schedulerTasks,\r\n    summary: {\r\n      totalTasks: schedulerTasks.length,\r\n      enabledTasks: schedulerTasks.filter((t) => t.enabled).length,\r\n      runningTasks: schedulerTasks.filter((t) => t.enabled && t.nextRun !== undefined).length,\r\n      totalSuccesses: schedulerTasks.reduce((acc, t) => acc + t.successCount, 0),\r\n      totalErrors: schedulerTasks.reduce((acc, t) => acc + t.errorCount, 0),\r\n    },\r\n  });\r\n}\r\n\r\nexport function handleSchedulerLogs() {\r\n  return NextResponse.json({\r\n    logs: [\r\n      {\r\n        timestamp: new Date(Date.now() - 300_000).toISOString(),\r\n        taskId: 'location_update',\r\n        level: 'info',\r\n        message: 'Successfully updated locations for 12 food trucks',\r\n      },\r\n      {\r\n        timestamp: new Date(Date.now() - 900_000).toISOString(),\r\n        taskId: 'instagram_scrape',\r\n        level: 'info',\r\n        message: 'Scraped 3 Instagram accounts, found 8 new posts',\r\n      },\r\n      {\r\n        timestamp: new Date(Date.now() - 1_800_000).toISOString(),\r\n        taskId: 'gemini_processing',\r\n        level: 'error',\r\n        message: 'Rate limit exceeded, skipping AI processing',\r\n      },\r\n      {\r\n        timestamp: new Date(Date.now() - 3_600_000).toISOString(),\r\n        taskId: 'website_crawl',\r\n        level: 'warning',\r\n        message: 'Failed to crawl tacoparadise.com - site temporarily unavailable',\r\n      },\r\n    ],\r\n  });\r\n}\r\n\r\nexport function handleSchedulerDefault() {\r\n  return NextResponse.json({\r\n    message: 'Task Scheduler API',\r\n    endpoints: [\r\n      'GET /api/scheduler?action=status - Get scheduler status',\r\n      'GET /api/scheduler?action=logs - Get execution logs',\r\n      'POST /api/scheduler - Start/stop scheduler or execute task',\r\n      'PUT /api/scheduler - Update task configuration',\r\n    ],\r\n  });\r\n}\r\n\r\nexport function handleStartScheduler() {\r\n  if (schedulerInstance) {\r\n    return NextResponse.json({ error: 'Scheduler is already running' }, { status: 409 });\r\n  }\r\n\r\n  setSchedulerInstance({ started: new Date().toISOString() });\r\n\r\n  return NextResponse.json({\r\n    message: 'Scheduler started successfully',\r\n    status: 'running',\r\n  });\r\n}\r\n\r\nexport function handleStopScheduler() {\r\n  if (!schedulerInstance) {\r\n    return NextResponse.json({ error: 'Scheduler is not running' }, { status: 409 });\r\n  }\r\n\r\n  setSchedulerInstance(undefined);\r\n\r\n  return NextResponse.json({\r\n    message: 'Scheduler stopped successfully',\r\n    status: 'stopped',\r\n  });\r\n}\r\n\r\nexport function handleExecuteTask(taskId: string) {\r\n  if (taskId === undefined || taskId === '') {\r\n    return NextResponse.json({ error: 'Task ID is required for execution' }, { status: 400 });\r\n  }\r\n\r\n  const task = schedulerTasks.find((t) => t.id === taskId);\r\n  if (!task) {\r\n    return NextResponse.json({ error: 'Task not found' }, { status: 404 });\r\n  }\r\n\r\n  // Simulate task execution\r\n  task.lastRun = new Date().toISOString();\r\n\r\n  // Simulate success/failure\r\n  // eslint-disable-next-line sonarjs/pseudo-random\r\n  if (Math.random() > 0.1) {\r\n    // 90% success rate\r\n    task.lastSuccess = task.lastRun;\r\n    task.successCount++;\r\n    task.lastError = undefined;\r\n  } else {\r\n    task.errorCount++;\r\n    task.lastError = 'Simulated execution error';\r\n  }\r\n\r\n  return NextResponse.json({\r\n    message: `Task ${taskId} executed`,\r\n    task: task,\r\n  });\r\n}\r\n\r\nexport function handleUpdateTask(body: PutRequestBody) {\r\n  const { taskId, config } = body;\r\n\r\n  if (!taskId) {\r\n    return NextResponse.json({ error: 'Task ID is required' }, { status: 400 });\r\n  }\r\n\r\n  const taskIndex = schedulerTasks.findIndex((t) => t.id === taskId);\r\n  if (taskIndex === -1) {\r\n    return NextResponse.json({ error: 'Task not found' }, { status: 404 });\r\n  }\r\n\r\n  // Update task configuration\r\n  schedulerTasks[taskIndex] = {\r\n    ...schedulerTasks[taskIndex],\r\n    ...config,\r\n  };\r\n\r\n  // Update next run time if interval changed\r\n  if (config.intervalMinutes !== undefined && config.intervalMinutes > 0 && schedulerTasks[taskIndex].enabled) {\r\n    const lastRun = new Date(schedulerTasks[taskIndex].lastRun ?? Date.now());\r\n    const nextRun = new Date(lastRun.getTime() + config.intervalMinutes * 60 * 1000);\r\n    schedulerTasks[taskIndex].nextRun = nextRun.toISOString();\r\n  }\r\n\r\n  return NextResponse.json({\r\n    message: 'Task configuration updated',\r\n    task: schedulerTasks[taskIndex],\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1360,1363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1360,1363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":65,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":65,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3123,3126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3123,3126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3142,3145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3142,3145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3164,3167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3164,3167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":113,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":113,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":114,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":117,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":117,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":117,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":118,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":118,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .tokensUsed on an `any` value.","line":118,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":119,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":119,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":119,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":122,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":122,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .testTruck on an `any` value.","line":122,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":123,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":123,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .testJob on an `any` value.","line":123,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":124,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":124,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .queueItem on an `any` value.","line":124,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":125,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":125,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .nearbyTrucks on an `any` value.","line":125,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":129,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":129,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .testTruck on an `any` value.","line":129,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":130,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":130,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":130,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":131,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":131,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":131,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":131,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .nearbyTrucks on an `any` value.","line":131,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":49}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { FoodTruckService, ScrapingJobService, DataProcessingService } from '@/lib/supabase';\r\n\r\n// Helper function to test Firecrawl scraping\r\nexport async function testFirecrawlScraping(testUrl: string) {\r\n  console.info('Testing Firecrawl scraping...');\r\n  const scrapeResult = await firecrawl.scrapeUrl(testUrl, {\r\n    formats: ['markdown'],\r\n    onlyMainContent: true,\r\n  });\r\n\r\n  if (!scrapeResult.success) {\r\n    return {\r\n      success: false,\r\n      error: 'Firecrawl test failed',\r\n      details: scrapeResult.error,\r\n    };\r\n  }\r\n\r\n  return { success: true, result: scrapeResult };\r\n}\r\n\r\n// Helper function to test Gemini processing\r\nexport async function testGeminiProcessing() {\r\n  console.info('Testing Gemini processing...');\r\n  const testMenuText =\r\n    'Burgers: Classic Burger $12.99, Veggie Burger $11.99. Sides: Fries $4.99, Onion Rings $5.99';\r\n\r\n  const geminiResult = await gemini.processMenuData(testMenuText);\r\n\r\n  if (!geminiResult.success) {\r\n    return {\r\n      success: false,\r\n      error: 'Gemini test failed',\r\n      details: geminiResult.error,\r\n    };\r\n  }\r\n\r\n  return { success: true, result: geminiResult };\r\n}\r\n\r\n// Helper function to test Supabase operations\r\nexport async function testSupabaseOperations(testUrl: string, geminiResult: any) {\r\n  // Create a test food truck\r\n  const testTruck = await FoodTruckService.createTruck({\r\n    name: 'Test Food Truck',\r\n    description: 'Integration test truck',\r\n    current_location: {\r\n      lat: 37.7749,\r\n      lng: -122.4194,\r\n      address: 'San Francisco, CA',\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n    scheduled_locations: [],\r\n    operating_hours: {\r\n      monday: { closed: true },\r\n      tuesday: { closed: true },\r\n      wednesday: { closed: true },\r\n      thursday: { closed: true },\r\n      friday: { closed: true },\r\n      saturday: { closed: true },\r\n      sunday: { closed: true },\r\n    },\r\n    menu: geminiResult.data ?? [],\r\n    contact_info: { phone: '+1-555-TEST', email: undefined, website: undefined },\r\n    social_media: {\r\n      instagram: undefined,\r\n      facebook: undefined,\r\n      twitter: undefined,\r\n      tiktok: undefined,\r\n      yelp: undefined,\r\n    },\r\n    source_urls: [testUrl],\r\n    data_quality_score: 0.8,\r\n    verification_status: 'pending',\r\n  });\r\n\r\n  // Create a test scraping job\r\n  const testJob = await ScrapingJobService.createJob({\r\n    job_type: 'integration_test',\r\n    target_url: testUrl,\r\n    priority: 10,\r\n    scheduled_at: new Date().toISOString(),\r\n  });\r\n\r\n  // Add to processing queue\r\n  const queueItem = await DataProcessingService.addToQueue({\r\n    truck_id: testTruck.id,\r\n    processing_type: 'integration_test',\r\n    raw_data: { test: true },\r\n    priority: 10,\r\n  });\r\n\r\n  // Test geospatial query\r\n  const nearbyTrucks = await FoodTruckService.getTrucksByLocation(37.7749, -122.4194, 10);\r\n\r\n  return {\r\n    testTruck,\r\n    testJob,\r\n    queueItem,\r\n    nearbyTrucks,\r\n  };\r\n}\r\n\r\n// Helper function to format test results\r\nexport function formatTestResults(scrapeResult: any, geminiResult: any, supabaseResults: any) {\r\n  return {\r\n    success: true,\r\n    message: 'Integration test completed successfully',\r\n    results: {\r\n      firecrawl: {\r\n        success: scrapeResult.success,\r\n        dataLength: scrapeResult.data?.markdown?.length ?? 0,\r\n      },\r\n      gemini: {\r\n        success: geminiResult.success,\r\n        tokensUsed: geminiResult.tokensUsed,\r\n        categoriesFound: geminiResult.data?.length ?? 0,\r\n      },\r\n      supabase: {\r\n        truckCreated: supabaseResults.testTruck.id,\r\n        jobCreated: supabaseResults.testJob.id,\r\n        queueItemCreated: supabaseResults.queueItem.id,\r\n        nearbyTrucksFound: supabaseResults.nearbyTrucks.length,\r\n      },\r\n    },\r\n    testData: {\r\n      truck: supabaseResults.testTruck,\r\n      processedMenu: geminiResult.data,\r\n      nearbyTrucks: supabaseResults.nearbyTrucks.slice(0, 3),\r\n    },\r\n  };\r\n}\r\n\r\nexport async function runIntegrationTestSteps(testUrl: string) {\r\n  console.info('Starting integration test...');\r\n\r\n  // Step 1: Test Firecrawl scraping\r\n  const firecrawlTest = await testFirecrawlScraping(testUrl);\r\n  if (!firecrawlTest.success) {\r\n    return firecrawlTest;\r\n  }\r\n\r\n  // Step 2: Test Gemini processing\r\n  const geminiTest = await testGeminiProcessing();\r\n  if (!geminiTest.success) {\r\n    return geminiTest;\r\n  }\r\n\r\n  // Step 3: Test Supabase operations\r\n  console.info('Testing Supabase operations...');\r\n  const supabaseResults = await testSupabaseOperations(testUrl, geminiTest.result);\r\n\r\n  // Step 4: Format and return results\r\n  const results = formatTestResults(firecrawlTest.result, geminiTest.result, supabaseResults);\r\n  return { success: true, results };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\batchCleanup.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 36 to the 15 allowed.","line":187,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":187,"endColumn":42},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":256,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":256,"endColumn":45},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":272,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":283,"endColumn":14},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 29 to the 15 allowed.","line":295,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":295,"endColumn":38},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":330,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":341,"endColumn":14},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":353,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":353,"endColumn":43},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 26 to the 15 allowed.","line":390,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":390,"endColumn":39},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":411,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":418,"endColumn":14}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":360,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":360,"endColumn":80,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":360,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":360,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateQualityScore on an `error` typed value.","line":360,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":362,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":362,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .score on an `error` typed value.","line":362,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":374,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":374,"endColumn":61,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateTruckQualityScore on an `error` typed value.","line":374,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":374,"endColumn":61,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Batch Data Cleanup System\r\n * Implements automated data quality improvements and cleanup operations\r\n */\r\n\r\nimport { FoodTruckService, DataQualityService, type FoodTruck } from '@/lib/supabase';\r\nimport { DuplicatePreventionService } from './duplicatePrevention';\r\n\r\nexport interface CleanupOperation {\r\n  type: 'normalize_phone' | 'fix_coordinates' | 'remove_placeholders' | 'update_quality_scores' | 'merge_duplicates';\r\n  description: string;\r\n  affectedCount: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\nexport interface BatchCleanupResult {\r\n  totalProcessed: number;\r\n  operations: CleanupOperation[];\r\n  summary: {\r\n    trucksImproved: number;\r\n    duplicatesRemoved: number;\r\n    qualityScoreImprovement: number;\r\n    placeholdersRemoved: number;\r\n  };\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * Automated Data Quality Cleanup Service\r\n */\r\nexport class BatchCleanupService {\r\n  \r\n  /**\r\n   * Run comprehensive data cleanup operations\r\n   */\r\n  static async runFullCleanup(options: {\r\n    batchSize?: number;\r\n    dryRun?: boolean;\r\n    operations?: CleanupOperation['type'][];\r\n  } = {}): Promise<BatchCleanupResult> {\r\n    const startTime = Date.now();\r\n    const { batchSize = 50, dryRun = false, operations = [\r\n      'remove_placeholders',\r\n      'normalize_phone',\r\n      'fix_coordinates',\r\n      'update_quality_scores',\r\n      'merge_duplicates'\r\n    ] } = options;\r\n    \r\n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\r\n    \r\n    const result: BatchCleanupResult = {\r\n      totalProcessed: 0,\r\n      operations: [],\r\n      summary: {\r\n        trucksImproved: 0,\r\n        duplicatesRemoved: 0,\r\n        qualityScoreImprovement: 0,\r\n        placeholdersRemoved: 0\r\n      },\r\n      duration: 0\r\n    };\r\n    \r\n    try {\r\n      // Get all trucks for processing\r\n      const allTrucks = await FoodTruckService.getAllTrucks();\r\n      result.totalProcessed = allTrucks.total;\r\n      \r\n      // Process trucks in batches\r\n      for (let i = 0; i < allTrucks.trucks.length; i += batchSize) {\r\n        const batch = allTrucks.trucks.slice(i, i + batchSize);\r\n        \r\n        for (const operation of operations) {\r\n          const opResult = await this.runOperation(operation, batch, dryRun);\r\n          result.operations.push(opResult);\r\n        }\r\n      }\r\n      \r\n      // Calculate summary\r\n      result.summary = this.calculateSummary(result.operations);\r\n      result.duration = Date.now() - startTime;\r\n      \r\n      console.info(`Batch cleanup completed in ${result.duration}ms`);\r\n      return result;\r\n      \r\n    } catch (error) {\r\n      console.error('Batch cleanup failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Run a specific cleanup operation\r\n   */\r\n  private static async runOperation(\r\n    type: CleanupOperation['type'],\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean\r\n  ): Promise<CleanupOperation> {\r\n    const operation: CleanupOperation = {\r\n      type,\r\n      description: this.getOperationDescription(type),\r\n      affectedCount: 0,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      errors: []\r\n    };\r\n    \r\n    try {\r\n      switch (type) {\r\n        case 'remove_placeholders': {\r\n          return await this.removePlaceholders(trucks, dryRun, operation);\r\n        }\r\n        case 'normalize_phone': {\r\n          return await this.normalizePhoneNumbers(trucks, dryRun, operation);\r\n        }\r\n        case 'fix_coordinates': {\r\n          return await this.fixCoordinates(trucks, dryRun, operation);\r\n        }\r\n        case 'update_quality_scores': {\r\n          return await this.updateQualityScores(trucks, dryRun, operation);\r\n        }\r\n        case 'merge_duplicates': {\r\n          return await this.mergeDuplicates(trucks, dryRun, operation);\r\n        }\r\n        default: {\r\n          operation.errors.push(`Unknown operation type: ${String(type)}`);\r\n          return operation;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      operation.errors.push(`Operation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n      return operation;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get placeholder detection patterns\r\n   */\r\n  private static getPlaceholderPatterns(): RegExp[] {\r\n    return [\r\n      /undefined/i,\r\n      /placeholder/i,\r\n      /example\\.com/i,\r\n      /test\\s*truck/i,\r\n      /lorem\\s*ipsum/i,\r\n      /\\bna\\b/i,\r\n      /\\bn\\/a\\b/i,\r\n      /^0+$/,\r\n      /^null$/i\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Check if truck data needs placeholder cleanup\r\n   */\r\n  private static checkForPlaceholders(truck: FoodTruck, patterns: RegExp[]): { updates: Partial<FoodTruck>; needsUpdate: boolean } {\r\n    const updates: Partial<FoodTruck> = {};\r\n    let needsUpdate = false;\r\n\r\n    // Check name\r\n    if (truck.name && patterns.some(pattern => pattern.test(truck.name))) {\r\n      updates.name = undefined;\r\n      needsUpdate = true;\r\n    }\r\n\r\n    // Check description\r\n    if (truck.description !== undefined && typeof truck.description === 'string' && patterns.some(pattern => pattern.test(truck.description))) {\r\n      updates.description = undefined;\r\n      needsUpdate = true;\r\n    }\r\n\r\n    // Check price range\r\n    if (truck.price_range !== undefined && typeof truck.price_range === 'string' && patterns.some(pattern => pattern.test(truck.price_range))) {\r\n      updates.price_range = undefined;\r\n      needsUpdate = true;\r\n    }\r\n\r\n    return { updates, needsUpdate };\r\n  }\r\n\r\n  /**\r\n   * Remove placeholder and mock data\r\n   */\r\n  private static async removePlaceholders(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const placeholderPatterns = this.getPlaceholderPatterns();\r\n\r\n    for (const truck of trucks) {\r\n      const { updates, needsUpdate: initialNeedsUpdate } = this.checkForPlaceholders(truck, placeholderPatterns);\r\n      let needsUpdate = initialNeedsUpdate;\r\n\r\n      // Check contact info\r\n      if (truck.contact_info) {\r\n        const cleanContact = { ...truck.contact_info };\r\n        let contactUpdated = false;\r\n\r\n        if (cleanContact.phone !== undefined && typeof cleanContact.phone === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.phone))) {\r\n          cleanContact.phone = undefined;\r\n          contactUpdated = true;\r\n        }\r\n\r\n        if (cleanContact.website !== undefined && typeof cleanContact.website === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.website))) {\r\n          cleanContact.website = undefined;\r\n          contactUpdated = true;\r\n        }\r\n\r\n        if (cleanContact.email !== undefined && typeof cleanContact.email === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.email))) {\r\n          cleanContact.email = undefined;\r\n          contactUpdated = true;\r\n        }\r\n\r\n        if (contactUpdated) {\r\n          updates.contact_info = cleanContact;\r\n          needsUpdate = true;\r\n        }\r\n      }\r\n\r\n      // Check address\r\n      if (truck.current_location?.address !== undefined && typeof truck.current_location.address === 'string' && placeholderPatterns.some(pattern => pattern.test(truck.current_location.address))) {\r\n        updates.current_location = {\r\n          ...truck.current_location,\r\n          address: undefined\r\n        };\r\n        needsUpdate = true;\r\n      }\r\n      \r\n      if (needsUpdate) {\r\n        operation.affectedCount++;\r\n        \r\n        if (dryRun) {\r\n          operation.successCount++;\r\n        } else {\r\n          try {\r\n            await FoodTruckService.updateTruck(truck.id, updates);\r\n            operation.successCount++;\r\n          } catch (error) {\r\n            operation.errorCount++;\r\n            operation.errors.push(`Failed to update truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Normalize phone numbers to consistent format\r\n   */\r\n  private static async normalizePhoneNumbers(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    for (const truck of trucks) {\r\n      if (truck.contact_info?.phone !== undefined) {\r\n        const originalPhone = truck.contact_info.phone;\r\n        const normalizedPhone = this.normalizePhone(originalPhone);\r\n\r\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\r\n          operation.affectedCount++;\r\n          \r\n          if (dryRun) {\r\n            operation.successCount++;\r\n          } else {\r\n            try {\r\n              await FoodTruckService.updateTruck(truck.id, {\r\n                contact_info: {\r\n                  ...truck.contact_info,\r\n                  phone: normalizedPhone\r\n                }\r\n              });\r\n              operation.successCount++;\r\n            } catch (error) {\r\n              operation.errorCount++;\r\n              operation.errors.push(`Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Fix invalid GPS coordinates\r\n   */\r\n  private static async fixCoordinates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    // Charleston, SC default coordinates\r\n    const defaultLat = 32.7767;\r\n    const defaultLng = -79.9311;\r\n    \r\n    for (const truck of trucks) {\r\n      if (truck.current_location != undefined) {\r\n        const { lat, lng } = truck.current_location;\r\n        let needsUpdate = false;\r\n        const updates: Partial<FoodTruck['current_location']> = {};\r\n\r\n        // Fix invalid coordinates (0,0 or null)\r\n        if (lat == undefined || lat === 0 || lng == undefined || lng === 0) {\r\n          updates.lat = defaultLat;\r\n          updates.lng = defaultLng;\r\n          needsUpdate = true;\r\n        }\r\n\r\n        // Fix coordinates outside reasonable bounds for Charleston area\r\n        if (lat != undefined && lng != undefined && (lat < 32 || lat > 34 || lng > -79 || lng < -81)) {\r\n          updates.lat = defaultLat;\r\n          updates.lng = defaultLng;\r\n          needsUpdate = true;\r\n        }\r\n        \r\n        if (needsUpdate) {\r\n          operation.affectedCount++;\r\n          \r\n          if (dryRun) {\r\n            operation.successCount++;\r\n          } else {\r\n            try {\r\n              await FoodTruckService.updateTruck(truck.id, {\r\n                current_location: {\r\n                  ...truck.current_location,\r\n                  ...updates\r\n                }\r\n              });\r\n              operation.successCount++;\r\n            } catch (error) {\r\n              operation.errorCount++;\r\n              operation.errors.push(`Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Update quality scores for all trucks\r\n   */\r\n  private static async updateQualityScores(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    for (const truck of trucks) {\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n      const qualityAssessment = DataQualityService.calculateQualityScore(truck);\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\r\n      const newScore = qualityAssessment.score;\r\n      const currentScore = truck.data_quality_score ?? 0;\r\n      \r\n      // Only update if score changed significantly (>5% difference)\r\n      if (Math.abs(newScore - currentScore) > 0.05) {\r\n        operation.affectedCount++;\r\n        \r\n        if (dryRun) {\r\n          operation.successCount++;\r\n        } else {\r\n          try {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n            await DataQualityService.updateTruckQualityScore(truck.id);\r\n            operation.successCount++;\r\n          } catch (error) {\r\n            operation.errorCount++;\r\n            operation.errors.push(`Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Identify and merge duplicate trucks\r\n   */\r\n  private static async mergeDuplicates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const processedIds = new Set<string>();\r\n    \r\n    for (const truck of trucks) {\r\n      if (processedIds.has(truck.id)) continue;\r\n      \r\n      const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\r\n      \r\n      if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\r\n        const { bestMatch } = duplicateCheck;\r\n        \r\n        if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\r\n          operation.affectedCount++;\r\n          \r\n          if (dryRun) {\r\n            operation.successCount++;\r\n          } else {\r\n            try {\r\n              await DuplicatePreventionService.mergeDuplicates(truck.id, bestMatch.existingTruck.id);\r\n              processedIds.add(bestMatch.existingTruck.id);\r\n              operation.successCount++;\r\n            } catch (error) {\r\n              operation.errorCount++;\r\n              operation.errors.push(`Failed to merge duplicates ${truck.id} and ${bestMatch.existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      processedIds.add(truck.id);\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Normalize phone number format\r\n   */\r\n  private static normalizePhone(phone: string): string | undefined {\r\n    if (!phone) return undefined;\r\n    \r\n    // Remove all non-digit characters\r\n    const digits = phone.replaceAll(/\\D/g, '');\r\n    \r\n    // Handle US phone numbers\r\n    if (digits.length === 10) {\r\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\r\n    } else if (digits.length === 11 && digits[0] === '1') {\r\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\r\n    }\r\n    \r\n    // Return original if can't normalize\r\n    return phone;\r\n  }\r\n  \r\n  /**\r\n   * Get operation description\r\n   */\r\n  private static getOperationDescription(type: CleanupOperation['type']): string {\r\n    const descriptions = {\r\n      remove_placeholders: 'Remove placeholder and mock data values',\r\n      normalize_phone: 'Normalize phone numbers to consistent format',\r\n      fix_coordinates: 'Fix invalid GPS coordinates',\r\n      update_quality_scores: 'Recalculate data quality scores',\r\n      merge_duplicates: 'Identify and merge duplicate truck entries'\r\n    };\r\n    \r\n    return descriptions[type] ?? 'Unknown operation';\r\n  }\r\n  \r\n  /**\r\n   * Calculate cleanup summary\r\n   */\r\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\r\n    return {\r\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\r\n      duplicatesRemoved: operations.find(op => op.type === 'merge_duplicates')?.successCount ?? 0,\r\n      qualityScoreImprovement: operations.find(op => op.type === 'update_quality_scores')?.successCount ?? 0,\r\n      placeholdersRemoved: operations.find(op => op.type === 'remove_placeholders')?.successCount ?? 0\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\duplicatePrevention.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\discoveryEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'APIMonitor' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'APIMonitor'.","line":2,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":20,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[45,100],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorContext' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":76,"endColumn":45},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":93,"endColumn":47},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":110,"endColumn":50},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":127,"endColumn":54}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APIUsageService } from './supabase';\r\nimport { APIMonitor } from './monitoring/apiMonitor';\r\nimport { GeminiApiClient } from './gemini/geminiApiClient';\r\nimport { GeminiUsageLimits } from './gemini/usageLimits';\r\nimport { PromptTemplates } from './gemini/promptTemplates';\r\nimport { GeminiResponseParser } from './gemini/responseParser';\r\n\r\nimport {\r\n  MenuCategory,\r\n  LocationData,\r\n  OperatingHours,\r\n  SentimentAnalysisResult,\r\n  EnhancedFoodTruckData,\r\n  ExtractedFoodTruckDetails,\r\n  GeminiResponse,\r\n} from './types';\r\n\r\nexport class GeminiService {\r\n  private apiClient: GeminiApiClient;\r\n  private dailyRequestLimit = 1500;\r\n  private dailyTokenLimit = 32_000;\r\n\r\n  constructor() {\r\n    this.apiClient = new GeminiApiClient();\r\n  }\r\n\r\n  async checkUsageLimits() {\r\n    return GeminiUsageLimits.checkUsageLimits({\r\n      dailyRequestLimit: this.dailyRequestLimit,\r\n      dailyTokenLimit: this.dailyTokenLimit,\r\n    });\r\n  }\r\n\r\n  private async makeGeminiRequest<T>(\r\n    prompt: string,\r\n    parser: (text: string) => T,\r\n    errorContext: string\r\n  ): Promise<GeminiResponse<T>> {\r\n    return this.apiClient.makeRequestWithParsing(prompt, parser);\r\n  }\r\n\r\n  async processMenuData(rawMenuText: string): Promise<GeminiResponse<MenuCategory[]>> {\r\n    const estimatedTokens = Math.ceil(rawMenuText.length / 4) + 500;\r\n    const usageCheck = await GeminiUsageLimits.checkWithMonitoring(estimatedTokens);\r\n\r\n    if (!usageCheck.allowed) {\r\n      return {\r\n        success: false,\r\n        error: usageCheck.reason ?? 'API limit reached',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.menuProcessing(rawMenuText);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      (text: string) => {\r\n        const parsedData = JSON.parse(text) as { categories: MenuCategory[] };\r\n        return parsedData.categories;\r\n      },\r\n      'menu processing'\r\n    );\r\n  }\r\n\r\n  async extractLocationFromText(textInput: string): Promise<GeminiResponse<LocationData>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.locationExtraction(textInput);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      GeminiResponseParser.parseLocationData,\r\n      'location extraction'\r\n    );\r\n  }\r\n\r\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiResponse<OperatingHours>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.operatingHours(hoursText);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      GeminiResponseParser.parseOperatingHours,\r\n      'hours standardization'\r\n    );\r\n  }\r\n\r\n  async analyzeSentiment(reviewText: string): Promise<GeminiResponse<SentimentAnalysisResult>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.sentimentAnalysis(reviewText);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      GeminiResponseParser.parseSentimentAnalysis,\r\n      'sentiment analysis'\r\n    );\r\n  }\r\n\r\n  async enhanceFoodTruckData(rawData: unknown): Promise<GeminiResponse<EnhancedFoodTruckData>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.dataEnhancement(rawData);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      GeminiResponseParser.parseEnhancedFoodTruckData,\r\n      'data enhancement'\r\n    );\r\n  }\r\n\r\n  async batchProcess(\r\n    items: Array<{ type: string; data: unknown }>,\r\n  ): Promise<Array<GeminiResponse<unknown>>> {\r\n    const results: Array<GeminiResponse<unknown>> = [];\r\n\r\n    for (const item of items) {\r\n      let result: GeminiResponse<unknown>;\r\n      switch (item.type) {\r\n        case 'menu': {\r\n          result = await this.processMenuData(item.data as string);\r\n          break;\r\n        }\r\n        case 'location': {\r\n          result = await this.extractLocationFromText(item.data as string);\r\n          break;\r\n        }\r\n        case 'hours': {\r\n          result = await this.standardizeOperatingHours(item.data as string);\r\n          break;\r\n        }\r\n        case 'sentiment': {\r\n          result = await this.analyzeSentiment(item.data as string);\r\n          break;\r\n        }\r\n        case 'enhance': {\r\n          result = await this.enhanceFoodTruckData(item.data); // item.data is already unknown\r\n          break;\r\n        }\r\n        default: {\r\n          result = { success: false, error: `Unknown processing type: ${item.type}` };\r\n          break;\r\n        }\r\n      }\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  async getUsageStats(): Promise<{ requests_count: number; tokens_used: number } | undefined> {\r\n    const usage = await APIUsageService.getTodayUsage('gemini');\r\n    return usage ?? undefined;\r\n  }\r\n\r\n  async extractFoodTruckDetailsFromMarkdown(\r\n    markdownContent: string,\r\n    sourceUrl?: string,\r\n  ): Promise<GeminiResponse<ExtractedFoodTruckDetails>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded for Gemini',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.foodTruckExtraction(markdownContent, sourceUrl);\r\n\r\n\r\n    const response = await this.makeGeminiRequest(\r\n      prompt,\r\n      (text: string) => {\r\n        const cleanedText = GeminiResponseParser.cleanMarkdownResponse(text);\r\n        return GeminiResponseParser.parseExtractedFoodTruckDetails(cleanedText);\r\n      },\r\n      'food truck extraction'\r\n    );\r\n\r\n    // Add promptSent to response for this specific method\r\n    return {\r\n      ...response,\r\n      promptSent: prompt,\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const gemini = new GeminiService();\r\n\r\n// Centralized Gemini operation dispatcher to eliminate duplication\r\nexport async function dispatchGeminiOperation(\r\n  type: 'menu' | 'location' | 'hours' | 'sentiment' | 'enhance',\r\n  data: unknown\r\n): Promise<unknown> {\r\n  switch (type) {\r\n    case 'menu': {\r\n      return await gemini.processMenuData(data as string);\r\n    }\r\n    case 'location': {\r\n      return await gemini.extractLocationFromText(data as string);\r\n    }\r\n    case 'hours': {\r\n      return await gemini.standardizeOperatingHours(data as string);\r\n    }\r\n    case 'sentiment': {\r\n      return await gemini.analyzeSentiment(data as string);\r\n    }\r\n    case 'enhance': {\r\n      return await gemini.enhanceFoodTruckData(data);\r\n    }\r\n    default: {\r\n      throw new Error(`Unknown Gemini operation type: ${String(type)}`);\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\geminiApiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\promptTemplates.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":223,"column":3,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":223,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7319,7328],"text":"(sourceUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7319,7328],"text":"(sourceUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7319,7328],"text":"(Boolean(sourceUrl))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const PromptTemplates = {\r\n  menuProcessing: (rawMenuText: string) => `\r\nParse the following food truck menu text and return a structured JSON format.\r\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\r\n\r\nMenu text:\r\n${rawMenuText}\r\n\r\nExpected JSON format:\r\n[\r\n  {\r\n    \"category\": \"string\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"string\",\r\n        \"description\": \"string\",\r\n        \"price\": number,\r\n        \"dietary_tags\": [\"string\"]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nRules:\r\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\r\n- Include dietary restrictions and special tags\r\n- Group items into logical categories\r\n- If no clear categories, use \"Main Items\"\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  locationExtraction: (textInput: string) => `\r\nExtract location information from the following text and return structured data.\r\nLook for addresses, cross streets, landmarks, or location descriptions.\r\n\r\nText:\r\n${textInput}\r\n\r\nExpected JSON format:\r\n{\r\n  \"address\": \"string or undefined\",\r\n  \"city\": \"string or undefined\", \r\n  \"state\": \"string or undefined\",\r\n  \"zipCode\": \"string or undefined\",\r\n  \"coordinates\": {\"lat\": number, \"lng\": number} or undefined,\r\n  \"confidence\": number,\r\n  \"landmarks\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Set coordinates to undefined if not explicitly provided\r\n- Confidence should be 0.0 to 1.0 based on clarity\r\n- Include any mentioned landmarks or cross streets\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  operatingHours: (hoursText: string) => `\r\nParse the following operating hours text and return standardized format.\r\nConvert all times to 24-hour format and handle various input formats.\r\n\r\nHours text:\r\n${hoursText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n}\r\n\r\nRules:\r\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\r\n- If closed on a day, set \"closed\": true and omit open/close times\r\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\r\n- Default to reasonable hours if ambiguous\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  sentimentAnalysis: (reviewText: string) => `\r\nAnalyze the sentiment of this food truck review and extract key insights.\r\nFocus on food quality, service, value, and overall experience.\r\n\r\nReview text:\r\n${reviewText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"score\": number,\r\n  \"confidence\": number,\r\n  \"aspects\": {\r\n    \"food_quality\": number,\r\n    \"service\": number,\r\n    \"value\": number,\r\n    \"overall\": number\r\n  },\r\n  \"summary\": \"string\",\r\n  \"keywords\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Score should be 0.0 (very negative) to 1.0 (very positive)\r\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\r\n- Include specific aspects mentioned in the review\r\n- Summary should be 1-2 sentences max\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  dataEnhancement: (rawData: unknown) => `\r\nEnhance and standardize the following food truck data.\r\nFill in missing information where possible and improve data quality.\r\n\r\nRaw data:\r\n${JSON.stringify(rawData, undefined, 2)}\r\n\r\nExpected JSON format:\r\n{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"cuisine_type\": \"string\",\r\n  \"price_range\": \"$ | $$ | $$$ | $$$$\",\r\n  \"contact\": {\r\n    \"phone\": \"string\",\r\n    \"email\": \"string\",\r\n    \"website\": \"string\",\r\n    \"social_media\": {}\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string\",\r\n    \"city\": \"string\",\r\n    \"state\": \"string\",\r\n    \"coordinates\": {\"lat\": number, \"lng\": number}\r\n  },\r\n  \"operating_hours\": {},\r\n  \"menu_categories\": [\"string\"],\r\n  \"specialties\": [\"string\"],\r\n  \"dietary_options\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Preserve all original data while enhancing it\r\n- Standardize naming conventions\r\n- Infer cuisine type from menu items\r\n- Estimate price range from menu prices\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  foodTruckExtraction: (markdownContent: string, sourceUrl?: string) => {\r\n    const schema = `\r\nExpected JSON schema:\r\n{\r\n  \"name\": \"string (food truck name)\",\r\n  \"description\": \"string (brief description of the food truck)\",\r\n  \"cuisine_type\": \"string (type of cuisine served)\",\r\n  \"contact\": {\r\n    \"phone\": \"string (phone number if found)\",\r\n    \"email\": \"string (email if found)\", \r\n    \"website\": \"string (website URL if found)\",\r\n    \"social_media\": {\r\n      \"facebook\": \"string (Facebook URL if found)\",\r\n      \"instagram\": \"string (Instagram URL if found)\",\r\n      \"twitter\": \"string (Twitter URL if found)\"\r\n    }\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string (physical address if found)\",\r\n    \"city\": \"string (city name)\",\r\n    \"state\": \"string (state abbreviation)\",\r\n    \"coordinates\": {\r\n      \"lat\": \"number (latitude if found)\",\r\n      \"lng\": \"number (longitude if found)\"\r\n    }\r\n  },\r\n  \"operating_hours\": {\r\n    \"monday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"tuesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"wednesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"thursday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"friday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"saturday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"sunday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"}\r\n  },\r\n  \"menu\": [\r\n    {\r\n      \"category\": \"string (menu category)\",\r\n      \"items\": [\r\n        {\r\n          \"name\": \"string (item name)\",\r\n          \"description\": \"string (item description)\",\r\n          \"price\": \"number (price as number, not string)\",\r\n          \"dietary_tags\": [\"string (dietary restrictions/tags)\"]\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"specialties\": [\"string (signature dishes or specialties)\"],\r\n  \"dietary_options\": [\"string (dietary accommodations like vegan, gluten-free)\"],\r\n  \"price_range\": \"string ($ for under $10, $$ for $10-20, $$$ for $20-30, $$$$ for over $30)\"\r\n}\r\n`;\r\n\r\n    const instructions = `\r\nInstructions:\r\n- Extract as much information as possible from the provided content\r\n- If information is not available, use null for the field\r\n- For operating hours, use 24-hour format (e.g., \"14:30\" for 2:30 PM)\r\n- If a day is closed, set \"closed\": true and omit open/close times\r\n- For prices, extract numeric values only (e.g., 12.99, not \"$12.99\")\r\n- Be thorough in extracting menu items and their details\r\n- Look for social media links and contact information carefully\r\n- Return only the JSON object, no additional text or formatting\r\n`;\r\n\r\n    return `\r\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\r\n\r\nWebsite content:\r\n${markdownContent}\r\n\r\n${sourceUrl ? `Source URL: ${sourceUrl}` : ''}\r\n\r\n${schema}\r\n\r\n${instructions}\r\n`;\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\responseParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\usageLimits.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limits' is assigned a value but never used. Allowed unused args must match /^_/u.","line":60,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APIUsageService } from '../supabase';\nimport { APIMonitor } from '../monitoring/apiMonitor';\n\nexport interface UsageLimits {\n  dailyRequestLimit: number;\n  dailyTokenLimit: number;\n}\n\nexport interface UsageCheck {\n  canMakeRequest: boolean;\n  usage?: {\n    requests: { used: number; limit: number; remaining: number };\n    tokens: { used: number; limit: number; remaining: number };\n  };\n}\n\nexport class GeminiUsageLimits {\n  private static readonly DEFAULT_LIMITS: UsageLimits = {\n    dailyRequestLimit: 1500,\n    dailyTokenLimit: 32_000,\n  };\n\n  static async checkUsageLimits(limits: UsageLimits = this.DEFAULT_LIMITS): Promise<UsageCheck> {\n    try {\n      const usage = await APIUsageService.getTodayUsage('gemini');\n\n      if (!usage) {\n        return { canMakeRequest: true };\n      }\n\n      const requestsUsed = usage.requests_count ?? 0;\n      const tokensUsed = usage.tokens_used ?? 0;\n\n      const requestsRemaining = limits.dailyRequestLimit - requestsUsed;\n      const tokensRemaining = limits.dailyTokenLimit - tokensUsed;\n\n      return {\n        canMakeRequest: requestsRemaining > 0 && tokensRemaining > 100, // Keep 100 token buffer\n        usage: {\n          requests: {\n            used: requestsUsed,\n            limit: limits.dailyRequestLimit,\n            remaining: requestsRemaining,\n          },\n          tokens: {\n            used: tokensUsed,\n            limit: limits.dailyTokenLimit,\n            remaining: tokensRemaining,\n          },\n        },\n      };\n    } catch (error: unknown) {\n      console.warn('Error checking Gemini usage limits:', error);\n      return { canMakeRequest: false };\n    }\n  }\n\n  static async checkWithMonitoring(\n    estimatedTokens: number,\n    limits: UsageLimits = this.DEFAULT_LIMITS\n  ): Promise<{ allowed: boolean; reason?: string; waitTime?: number }> {\n    const canMakeRequest = await APIMonitor.canMakeRequest('gemini', 1, estimatedTokens);\n\n    if (!canMakeRequest.allowed) {\n      return {\n        allowed: false,\n        reason: `API limit reached: ${canMakeRequest.reason}. Wait time: ${Math.ceil((canMakeRequest.waitTime ?? 0) / 1000 / 60)} minutes`,\n      };\n    }\n\n    return { allowed: true };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\monitoring\\apiMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\bundleAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\databaseCache.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":142,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":142,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Database Query Optimization and Caching\r\n * Implements Next.js unstable_cache for optimal performance\r\n */\r\n\r\nimport { unstable_cache } from 'next/cache';\r\nimport { supabaseAdmin, FoodTruckService } from '@/lib/supabase';\r\nimport type { FoodTruck } from '@/lib/types';\r\n\r\n// Cache configuration\r\nconst CACHE_CONFIG = {\r\n  // Short-term cache for frequently changing data\r\n  SHORT_TTL: 60 * 5, // 5 minutes\r\n  // Medium-term cache for semi-static data\r\n  MEDIUM_TTL: 60 * 30, // 30 minutes\r\n  // Long-term cache for static data\r\n  LONG_TTL: 60 * 60 * 24, // 24 hours\r\n} as const;\r\n\r\n/**\r\n * Cached food truck queries with optimized database access\r\n */\r\nexport const CachedFoodTruckService = {\r\n  /**\r\n   * Get all food trucks with caching\r\n   * Cache for 30 minutes since truck data changes moderately\r\n   */\r\n  getAllTrucksCached : unstable_cache(\r\n    async (): Promise<{ trucks: FoodTruck[]; count: number }> => {\r\n      console.info('CachedFoodTruckService: Cache miss - fetching all trucks from database');\r\n      const result = await FoodTruckService.getAllTrucks();\r\n      return { trucks: result.trucks, count: result.total };\r\n    },\r\n    ['all-trucks'],\r\n    {\r\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\r\n      tags: ['food-trucks', 'all-trucks']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get trucks by location with caching\r\n   * Cache for 5 minutes since location-based queries are time-sensitive\r\n   */\r\n  getTrucksByLocationCached : unstable_cache(\r\n    async (lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> => {\r\n      console.info(`CachedFoodTruckService: Cache miss - fetching trucks near ${lat},${lng} (${radiusKm}km)`);\r\n      return await FoodTruckService.getTrucksByLocation(lat, lng, radiusKm);\r\n    },\r\n    ['trucks-by-location'],\r\n    {\r\n      revalidate: CACHE_CONFIG.SHORT_TTL,\r\n      tags: ['food-trucks', 'location-search']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get truck by ID with caching\r\n   * Cache for 30 minutes since individual truck data is relatively stable\r\n   */\r\n  getTruckByIdCached : unstable_cache(\r\n    async (id: string): Promise<FoodTruck | null> => {\r\n      console.info(`CachedFoodTruckService: Cache miss - fetching truck ${id} from database`);\r\n      return await FoodTruckService.getTruckById(id);\r\n    },\r\n    ['truck-by-id'],\r\n    {\r\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\r\n      tags: ['food-trucks', 'truck-details']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Search trucks with caching\r\n   * Cache for 5 minutes since search results should be relatively fresh\r\n   */\r\n  searchTrucksCached : unstable_cache(\r\n    async (query: string, filters?: {\r\n      cuisine?: string;\r\n      openNow?: boolean;\r\n      lat?: number;\r\n      lng?: number;\r\n      radius?: number;\r\n    }): Promise<FoodTruck[]> => {\r\n      console.info(`CachedFoodTruckService: Cache miss - searching trucks for \"${query}\"`);\r\n      \r\n      if (supabaseAdmin == undefined) {\r\n        throw new Error('Supabase admin client not available');\r\n      }\r\n\r\n      let dbQuery = supabaseAdmin\r\n        .from('food_trucks')\r\n        .select('*')\r\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%,cuisine_type.cs.{${query}}`);\r\n\r\n      // Apply filters\r\n      if (filters?.cuisine != undefined && filters.cuisine !== '') {\r\n        dbQuery = dbQuery.contains('cuisine_type', [filters.cuisine]);\r\n      }\r\n\r\n      const { data: trucks, error } = await dbQuery.limit(50);\r\n\r\n      if (error != undefined) {\r\n        throw new Error(`Search query failed: ${error.message}`);\r\n      }\r\n\r\n      let results = trucks ?? [];\r\n\r\n      // Apply location filter if provided\r\n      if (filters?.lat != undefined && filters?.lng != undefined && filters?.radius != undefined) {\r\n        results = results.filter((truck: FoodTruck) => {\r\n          if (truck.current_location?.lat == undefined || truck.current_location?.lng == undefined) {\r\n            return false;\r\n          }\r\n          const distance = calculateDistance(\r\n            filters.lat,\r\n            filters.lng,\r\n            truck.current_location.lat,\r\n            truck.current_location.lng\r\n          );\r\n          return distance <= (filters.radius ?? 10);\r\n        });\r\n      }\r\n\r\n      // Apply openNow filter if provided\r\n      if (filters?.openNow === true) {\r\n        const now = new Date();\r\n        const currentDay = now.toLocaleDateString('en-US', { weekday: 'short' }).toLowerCase(); // 'mon', 'tue', etc.\r\n        const currentTime = now.getHours() * 100 + now.getMinutes(); // HHMM format\r\n\r\n        results = results.filter((truck: FoodTruck) => {\r\n          const hours = truck.operating_hours?.[currentDay as keyof typeof truck.operating_hours] as { closed?: boolean; open?: string; close?: string } | undefined;\r\n          if (hours == undefined || hours.closed === true) return false;\r\n\r\n          const openTime = parseTimeString(hours.open ?? '');\r\n          const closeTime = parseTimeString(hours.close ?? '');\r\n\r\n          return currentTime >= openTime && currentTime <= closeTime;\r\n        });\r\n      }\r\n\r\n      return results;\r\n    },\r\n    ['search-trucks'],\r\n    {\r\n      revalidate: CACHE_CONFIG.SHORT_TTL,\r\n      tags: ['food-trucks', 'search']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get data quality statistics with caching\r\n   * Cache for 24 hours since quality stats change slowly\r\n   */\r\n  getDataQualityStatsCached : unstable_cache(\r\n    async (): Promise<{\r\n      averageScore: number;\r\n      distribution: Record<string, number>;\r\n      totalTrucks: number;\r\n    }> => {\r\n      console.info('CachedFoodTruckService: Cache miss - calculating data quality stats');\r\n      \r\n      if (supabaseAdmin == undefined) {\r\n        throw new Error('Supabase admin client not available');\r\n      }\r\n\r\n      const { data: trucks, error } = await supabaseAdmin\r\n        .from('food_trucks')\r\n        .select('data_quality_score');\r\n\r\n      if (error) {\r\n        throw new Error(`Quality stats query failed: ${error.message}`);\r\n      }\r\n\r\n      const scores = trucks == undefined ? [] : trucks.map((t: { data_quality_score?: number }) => t.data_quality_score ?? 0);\r\n      const averageScore = scores.length > 0\r\n        ? scores.reduce((sum: number, score: number) => sum + score, 0) / scores.length\r\n        : 0;\r\n\r\n      const distribution = {\r\n        high: scores.filter((s: number) => s >= 0.8).length,\r\n        medium: scores.filter((s: number) => s >= 0.6 && s < 0.8).length,\r\n        low: scores.filter((s: number) => s < 0.6).length\r\n      };\r\n\r\n      return {\r\n        averageScore: Math.round(averageScore * 100) / 100,\r\n        distribution,\r\n        totalTrucks: scores.length\r\n      };\r\n    },\r\n    ['data-quality-stats'],\r\n    {\r\n      revalidate: CACHE_CONFIG.LONG_TTL,\r\n      tags: ['food-trucks', 'data-quality']\r\n    }\r\n  ),\r\n};\r\n\r\n/**\r\n * Cache invalidation utilities\r\n */\r\nexport const CacheManager = {\r\n  /**\r\n   * Invalidate all food truck related caches\r\n   */\r\n  async invalidateAllFoodTruckCaches(): Promise<void> {\r\n    try {\r\n      const { revalidateTag } = await import('next/cache');\r\n      revalidateTag('food-trucks');\r\n      console.info('CacheManager: Invalidated all food truck caches');\r\n    } catch (error) {\r\n      console.warn('CacheManager: Failed to invalidate caches:', error);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Invalidate specific truck cache\r\n   */\r\n  async invalidateTruckCache(truckId: string): Promise<void> {\r\n    try {\r\n      const { revalidateTag } = await import('next/cache');\r\n      revalidateTag(`truck-${truckId}`);\r\n      revalidateTag('food-trucks'); // Also invalidate general caches\r\n      console.info(`CacheManager: Invalidated cache for truck ${truckId}`);\r\n    } catch (error) {\r\n      console.warn('CacheManager: Failed to invalidate truck cache:', error);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Invalidate search and location caches\r\n   */\r\n  async invalidateSearchCaches(): Promise<void> {\r\n    try {\r\n      const { revalidateTag } = await import('next/cache');\r\n      revalidateTag('search');\r\n      revalidateTag('location-search');\r\n      console.info('CacheManager: Invalidated search caches');\r\n    } catch (error) {\r\n      console.warn('CacheManager: Failed to invalidate search caches:', error);\r\n    }\r\n  },\r\n};\r\n\r\n/**\r\n * Utility functions\r\n */\r\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\r\n  const R = 6371; // Earth's radius in kilometers\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLng = (lng2 - lng1) * Math.PI / 180;\r\n  const a = \r\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n    Math.sin(dLng/2) * Math.sin(dLng/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n}\r\n\r\nfunction parseTimeString(timeStr: string): number {\r\n  if (timeStr == undefined || timeStr === '') return 0;\r\n  const [hours, minutes] = timeStr.split(':').map(Number);\r\n  return hours * 100 + (minutes ?? 0);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\webVitals.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":105,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":105,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":107,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":107,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":109,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":109,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":113,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":113,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 22 to the 15 allowed.","line":12,"column":23,"nodeType":null,"messageId":"refactorFunction","endLine":12,"endColumn":41},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":80,"column":32,"nodeType":null,"endLine":80,"endColumn":35,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[3124,3127],"text":"!="}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":118,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":118,"endColumn":80}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { ScrapingJobService } from '@/lib/supabase';\r\nimport { ExtractedFoodTruckDetails } from './types';\r\nimport {\r\n  validateInputAndPrepare,\r\n  buildTruckDataSchema,\r\n  handleDuplicateCheck,\r\n  finalizeJobStatus,\r\n} from './pipeline/pipelineHelpers';\r\n\r\nexport async function processScrapingJob(jobId: string) {\r\n  try {\r\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\r\n\r\n    if (job.target_url === undefined) {\r\n      throw new Error('No target URL specified');\r\n    }\r\n\r\n    console.info(`Starting scrape for ${job.target_url}`);\r\n    const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(job.target_url);\r\n\r\n    if (scrapeResult.success !== true || scrapeResult.data?.markdown === undefined) {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n        errors: [scrapeResult.error ?? 'Scraping failed or markdown content not found'],\r\n      });\r\n      throw new Error(scrapeResult.error ?? 'Scraping failed or markdown content not found');\r\n    }\r\n\r\n    console.info(`Scraping successful for ${job.target_url}, proceeding to Gemini extraction.`);\r\n\r\n    const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(\r\n      scrapeResult.data.markdown,\r\n      scrapeResult.data.source_url ?? job.target_url,\r\n    );\r\n\r\n    if (geminiResult.success !== true || geminiResult.data === undefined) {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n        errors: [geminiResult.error ?? 'Gemini data extraction failed'],\r\n      });\r\n      throw new Error(geminiResult.error ?? 'Gemini data extraction failed');\r\n    }\r\n\r\n    console.info(`Gemini extraction successful for ${job.target_url}.`);\r\n\r\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\r\n      data_collected: geminiResult.data as unknown as Record<string, unknown>,\r\n      completed_at: new Date().toISOString(),\r\n    });\r\n\r\n    await createOrUpdateFoodTruck(\r\n      jobId,\r\n      geminiResult.data,\r\n      scrapeResult.data.source_url ?? job.target_url,\r\n    );\r\n\r\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\r\n  } catch (error: unknown) {\r\n    console.error(`Scraping job ${jobId} failed:`, error);\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n\r\n    try {\r\n      const currentJobData = await ScrapingJobService.getJobsByStatus('all').then((jobs) =>\r\n        jobs.find((j) => j.id === jobId),\r\n      );\r\n      if (currentJobData && currentJobData.status !== 'failed') {\r\n        await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n          errors: [errorMessage],\r\n        });\r\n      } else if (!currentJobData) {\r\n        console.error(`Could not fetch job ${jobId} to update status to failed.`);\r\n      }\r\n    } catch (statusUpdateError) {\r\n      console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\r\n    }\r\n\r\n    try {\r\n      const jobAfterRetryIncrement = await ScrapingJobService.incrementRetryCount(jobId);\r\n      if (\r\n        jobAfterRetryIncrement !== undefined &&\r\n        typeof jobAfterRetryIncrement.retry_count === 'number' &&\r\n        typeof jobAfterRetryIncrement.max_retries === 'number'\r\n      ) {\r\n        if (jobAfterRetryIncrement.retry_count < jobAfterRetryIncrement.max_retries) {\r\n          console.info(\r\n            `Retrying job ${jobId} (attempt ${jobAfterRetryIncrement.retry_count}/${jobAfterRetryIncrement.max_retries})`,\r\n          );\r\n          setTimeout(() => {\r\n            void processScrapingJob(jobId);\r\n          }, 5000);\r\n        } else {\r\n          console.warn(`Job ${jobId} reached max retries (${jobAfterRetryIncrement.max_retries}).`);\r\n        }\r\n      } else {\r\n        console.error(\r\n          `Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`,\r\n        );\r\n      }\r\n    } catch (retryIncrementError) {\r\n      console.error(`Error during retry increment logic for job ${jobId}:`, retryIncrementError);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function createOrUpdateFoodTruck(\r\n  jobId: string,\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n) {\r\n  try {\r\n    const validation = await validateInputAndPrepare(jobId, extractedTruckData, sourceUrl);\r\n    if (!validation.isValid) {\r\n      return;\r\n    }\r\n\r\n    const truckData = buildTruckDataSchema(extractedTruckData, sourceUrl, validation.name);\r\n\r\n    const truck = await handleDuplicateCheck(jobId, truckData, validation.name);\r\n\r\n    await finalizeJobStatus(jobId, truck, sourceUrl);\r\n  } catch (error: unknown) {\r\n    console.error(\r\n      `Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`,\r\n      error,\r\n    );\r\n    try {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n        errors: [\r\n          `Food truck data processing/saving failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        ],\r\n      });\r\n    } catch (jobUpdateError) {\r\n      console.error(\r\n        `Job ${jobId}: Critical error - failed to update job status after data processing failure:`,\r\n        jobUpdateError,\r\n      );\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\pipelineHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PostgrestError' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'PostgrestError'.","line":4,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":4,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[246,303],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":55,"column":57,"nodeType":null,"endLine":55,"endColumn":60,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[2312,2315],"text":"=="}}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":96,"column":28,"nodeType":null,"endLine":96,"endColumn":31,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[4404,4407],"text":"!="}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4744,4747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4744,4747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6405,6408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6405,6408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":144,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":144,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":82},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":155,"column":26,"nodeType":null,"endLine":155,"endColumn":29,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[6939,6942],"text":"=="}}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from '../types';\r\nimport { ScrapingJobService, FoodTruckService } from '../supabase';\r\nimport { DuplicatePreventionService } from '../data-quality/duplicatePrevention';\r\nimport { PostgrestError } from '@supabase/supabase-js';\r\n\r\n// Helper function to validate input and prepare basic data\r\nexport async function validateInputAndPrepare(\r\n  jobId: string,\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string\r\n): Promise<{ isValid: boolean; name: string }> {\r\n  // Basic input validation\r\n  if (!validateTruckData(jobId, extractedTruckData)) {\r\n    await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n      errors: ['Invalid extracted data received from AI processing step.'],\r\n    });\r\n    return { isValid: false, name: '' };\r\n  }\r\n\r\n  if (!sourceUrl) {\r\n    // Log a warning but proceed if sourceUrl is missing, as it might not be critical for all data.\r\n    console.warn(`Job ${jobId}: Missing sourceUrl for food truck data, proceeding without it.`);\r\n  }\r\n\r\n  const name = extractedTruckData.name ?? 'Unknown Food Truck'; // Ensure name has a fallback\r\n  console.info(\r\n    `Job ${jobId}: Preparing to create/update food truck: ${name} from ${sourceUrl ?? 'Unknown Source'}`,\r\n  );\r\n\r\n  return { isValid: true, name };\r\n}\r\n\r\n// Helper function to build truck data schema\r\nexport function buildTruckDataSchema(\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n  name: string\r\n): FoodTruckSchema {\r\n  const currentLocation = buildLocationData(extractedTruckData);\r\n\r\n  return {\r\n    name: name,\r\n    description: extractedTruckData.description ?? undefined, // Keep as undefined if null/missing\r\n    current_location: currentLocation,\r\n    scheduled_locations: Array.isArray(extractedTruckData.scheduled_locations)\r\n      ? extractedTruckData.scheduled_locations.map((loc) => ({\r\n          lat: typeof loc.lat === 'number' ? loc.lat : 0,\r\n          lng: typeof loc.lng === 'number' ? loc.lng : 0,\r\n          address: loc.address ?? undefined,\r\n          start_time: loc.start_time ?? undefined,\r\n          end_time: loc.end_time ?? undefined,\r\n          timestamp: new Date().toISOString(),\r\n        }))\r\n      : undefined,\r\n    operating_hours: extractedTruckData.operating_hours === undefined\r\n      ? {\r\n          monday: { closed: true },\r\n          tuesday: { closed: true },\r\n          wednesday: { closed: true },\r\n          thursday: { closed: true },\r\n          friday: { closed: true },\r\n          saturday: { closed: true },\r\n          sunday: { closed: true },\r\n        }\r\n      : {\r\n          monday: extractedTruckData.operating_hours.monday ?? { closed: true },\r\n          tuesday: extractedTruckData.operating_hours.tuesday ?? { closed: true },\r\n          wednesday: extractedTruckData.operating_hours.wednesday ?? { closed: true },\r\n          thursday: extractedTruckData.operating_hours.thursday ?? { closed: true },\r\n          friday: extractedTruckData.operating_hours.friday ?? { closed: true },\r\n          saturday: extractedTruckData.operating_hours.saturday ?? { closed: true },\r\n          sunday: extractedTruckData.operating_hours.sunday ?? { closed: true },\r\n        },\r\n    menu: processMenuData(extractedTruckData),\r\n    contact_info: {\r\n      phone: extractedTruckData.contact_info?.phone ?? undefined,\r\n      email: extractedTruckData.contact_info?.email ?? undefined,\r\n      website: extractedTruckData.contact_info?.website ?? undefined,\r\n    },\r\n    social_media: {\r\n      instagram: extractedTruckData.social_media?.instagram ?? undefined,\r\n      facebook: extractedTruckData.social_media?.facebook ?? undefined,\r\n      twitter: extractedTruckData.social_media?.twitter ?? undefined,\r\n      tiktok: extractedTruckData.social_media?.tiktok ?? undefined,\r\n      yelp: extractedTruckData.social_media?.yelp ?? undefined,\r\n    },\r\n    cuisine_type: Array.isArray(extractedTruckData.cuisine_type)\r\n      ? extractedTruckData.cuisine_type\r\n      : [],\r\n    price_range: extractedTruckData.price_range ?? undefined, // Ensure it's one of the allowed enum values or undefined\r\n    specialties: Array.isArray(extractedTruckData.specialties)\r\n      ? extractedTruckData.specialties\r\n      : [],\r\n    data_quality_score: 0.5, // Default score - confidence_score not available in type\r\n    verification_status: 'pending',\r\n    source_urls: sourceUrl !== undefined && sourceUrl !== '' ? [sourceUrl] : [], // Ensure source_urls is always an array\r\n    last_scraped_at: new Date().toISOString(),\r\n  };\r\n}\r\n\r\n// Helper function to handle duplicate checking and resolution\r\nexport async function handleDuplicateCheck(\r\n  jobId: string,\r\n  truckData: FoodTruckSchema,\r\n  name: string\r\n): Promise<any> {\r\n  // Check for duplicates before creating\r\n  console.info(`Job ${jobId}: Checking for duplicates before creating truck: ${name}`);\r\n  const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\r\n\r\n  let truck;\r\n  if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\r\n    const { bestMatch } = duplicateCheck;\r\n    console.info(`Job ${jobId}: Found potential duplicate (${Math.round(bestMatch.similarity * 100)}% similarity) with truck: ${bestMatch.existingTruck.name}`);\r\n\r\n    if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\r\n      // Merge with existing truck\r\n      truck = await DuplicatePreventionService.mergeDuplicates(bestMatch.existingTruck.id, bestMatch.existingTruck.id);\r\n      console.info(`Job ${jobId}: Merged data with existing truck: ${truck.name} (ID: ${truck.id})`);\r\n    } else if (bestMatch.recommendation === 'update') {\r\n      // Update existing truck with new data\r\n      truck = await FoodTruckService.updateTruck(bestMatch.existingTruck.id, truckData);\r\n      console.info(`Job ${jobId}: Updated existing truck: ${truck.name} (ID: ${truck.id})`);\r\n    } else {\r\n      // Create new truck but log the potential duplicate\r\n      truck = await FoodTruckService.createTruck(truckData);\r\n      console.warn(`Job ${jobId}: Created new truck despite potential duplicate (${duplicateCheck.reason})`);\r\n    }\r\n  } else {\r\n    // No duplicates found, create new truck\r\n    truck = await FoodTruckService.createTruck(truckData);\r\n  }\r\n\r\n  return truck;\r\n}\r\n\r\n// Helper function to finalize job status\r\nexport async function finalizeJobStatus(\r\n  jobId: string,\r\n  truck: any,\r\n  sourceUrl: string\r\n): Promise<void> {\r\n  console.info(\r\n    `Job ${jobId}: Successfully created food truck: ${truck.name} (ID: ${truck.id}) from ${sourceUrl ?? 'Unknown Source'}`,\r\n  );\r\n\r\n  // Link truck_id back to the scraping job\r\n  await ScrapingJobService.updateJobStatus(jobId, 'completed', {\r\n    completed_at: new Date().toISOString(),\r\n  });\r\n}\r\n\r\n// Helper function to validate input data\r\nfunction validateTruckData(jobId: string, extractedTruckData: ExtractedFoodTruckDetails): boolean {\r\n  if (extractedTruckData === undefined || typeof extractedTruckData !== 'object') {\r\n    console.error(`Job ${jobId}: Invalid extractedTruckData, cannot create/update food truck.`);\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n// Helper function to build location data\r\nfunction buildLocationData(extractedTruckData: ExtractedFoodTruckDetails) {\r\n  const locationData = extractedTruckData.current_location ?? {};\r\n  const fullAddress = [\r\n    locationData.address,\r\n    locationData.city,\r\n    locationData.state,\r\n    locationData.zip_code,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(', ');\r\n\r\n  return {\r\n    lat: typeof locationData.lat === 'number' ? locationData.lat : 0,\r\n    lng: typeof locationData.lng === 'number' ? locationData.lng : 0,\r\n    address: fullAddress || (locationData.raw_text ?? undefined),\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n}\r\n\r\n// Helper function to process menu data\r\nfunction processMenuData(extractedTruckData: ExtractedFoodTruckDetails): MenuCategory[] {\r\n  if (!Array.isArray(extractedTruckData.menu)) {\r\n    return [];\r\n  }\r\n\r\n  return extractedTruckData.menu.map((category: unknown): MenuCategory => {\r\n    const categoryData = category as { items?: unknown[]; category?: string; name?: string };\r\n    const items = (Array.isArray(categoryData.items) ? categoryData.items : []).map(\r\n      (item: unknown): MenuItem => {\r\n        const itemData = item as {\r\n          name?: string;\r\n          description?: string;\r\n          price?: string | number;\r\n          dietary_tags?: string[];\r\n        };\r\n        let price: number | undefined = undefined;\r\n        if (typeof itemData.price === 'number') {\r\n          price = itemData.price;\r\n        } else if (typeof itemData.price === 'string') {\r\n          const parsedPrice = Number.parseFloat(itemData.price.replaceAll(/[^\\d.-]/g, ''));\r\n          if (!Number.isNaN(parsedPrice)) {\r\n            price = parsedPrice;\r\n          }\r\n        }\r\n        return {\r\n          name: itemData.name ?? 'Unknown Item',\r\n          description: itemData.description ?? undefined,\r\n          price: price,\r\n          dietary_tags: Array.isArray(itemData.dietary_tags) ? itemData.dietary_tags : [],\r\n        };\r\n      },\r\n    );\r\n    return {\r\n      name: categoryData.category ?? categoryData.name ?? 'Uncategorized',\r\n      items: items,\r\n    };\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\auditLogger.ts","messages":[{"ruleId":"max-params","severity":2,"message":"Static async method 'logAdminAction' has too many parameters (7). Maximum allowed is 4.","line":42,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":42,"endColumn":30},{"ruleId":"max-params","severity":2,"message":"Static async method 'logAuthEvent' has too many parameters (5). Maximum allowed is 4.","line":117,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":117,"endColumn":28},{"ruleId":"max-params","severity":2,"message":"Static async method 'logDataAccess' has too many parameters (6). Maximum allowed is 4.","line":143,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":143,"endColumn":29}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":234,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":234,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":274,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":274,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Security Audit Logging System\r\n * Implements comprehensive audit logging for admin actions and security events\r\n */\r\n\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\n\r\n// Type alias for severity levels to comply with sonarjs/use-type-alias\r\ntype SeverityLevel = 'info' | 'warning' | 'error' | 'critical';\r\n\r\nexport interface AuditLogEntry {\r\n  user_id: string;\r\n  user_email: string;\r\n  action: string;\r\n  resource_type: string;\r\n  resource_id?: string;\r\n  details?: Record<string, unknown>;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  session_id?: string;\r\n  timestamp: string;\r\n  severity: SeverityLevel;\r\n}\r\n\r\nexport interface SecurityEvent {\r\n  event_type: 'login_attempt' | 'login_success' | 'login_failure' | 'logout' | 'permission_denied' | 'data_access' | 'data_modification' | 'admin_action';\r\n  user_id?: string;\r\n  user_email?: string;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  details?: Record<string, unknown>;\r\n  severity: SeverityLevel;\r\n}\r\n\r\n/**\r\n * Audit Logger Service\r\n */\r\nexport class AuditLogger {\r\n  /**\r\n   * Log admin action with full audit trail\r\n   */\r\n  static async logAdminAction(\r\n    userId: string,\r\n    userEmail: string,\r\n    action: string,\r\n    resourceType: string,\r\n    resourceId?: string,\r\n    details?: Record<string, unknown>,\r\n    request?: {\r\n      ip?: string;\r\n      userAgent?: string;\r\n      sessionId?: string;\r\n    }\r\n  ): Promise<void> {\r\n    const auditEntry: AuditLogEntry = {\r\n      user_id: userId,\r\n      user_email: userEmail,\r\n      action,\r\n      resource_type: resourceType,\r\n      resource_id: resourceId,\r\n      details,\r\n      ip_address: request?.ip,\r\n      user_agent: request?.userAgent,\r\n      session_id: request?.sessionId,\r\n      timestamp: new Date().toISOString(),\r\n      severity: this.determineSeverity(action, resourceType)\r\n    };\r\n\r\n    await this.writeAuditLog(auditEntry);\r\n    \r\n    // Log to console for immediate monitoring\r\n    console.info('Admin Action Audit:', {\r\n      user: userEmail,\r\n      action,\r\n      resource: (resourceId === undefined) ? resourceType : `${resourceType}:${resourceId}`,\r\n      timestamp: auditEntry.timestamp\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log security event\r\n   */\r\n  static async logSecurityEvent(event: SecurityEvent): Promise<void> {\r\n    const logEntry = {\r\n      event_type: event.event_type,\r\n      user_id: event.user_id,\r\n      user_email: event.user_email,\r\n      ip_address: event.ip_address,\r\n      user_agent: event.user_agent,\r\n      details: event.details,\r\n      severity: event.severity,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    try {\r\n      if (supabaseAdmin) {\r\n        await supabaseAdmin\r\n          .from('security_events')\r\n          .insert(logEntry);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to log security event:', error);\r\n    }\r\n\r\n    // Always log security events to console\r\n    console.info('Security Event:', logEntry);\r\n\r\n    // Alert on critical security events\r\n    if (event.severity === 'critical' || event.severity === 'error') {\r\n      console.warn('SECURITY ALERT:', logEntry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log authentication events\r\n   */\r\n  static async logAuthEvent(\r\n    eventType: 'login_attempt' | 'login_success' | 'login_failure' | 'logout',\r\n    userEmail?: string,\r\n    userId?: string,\r\n    request?: {\r\n      ip?: string;\r\n      userAgent?: string;\r\n    },\r\n    details?: Record<string, unknown>\r\n  ): Promise<void> {\r\n    const severity = eventType === 'login_failure' ? 'warning' : 'info';\r\n    \r\n    await this.logSecurityEvent({\r\n      event_type: eventType,\r\n      user_id: userId,\r\n      user_email: userEmail,\r\n      ip_address: request?.ip,\r\n      user_agent: request?.userAgent,\r\n      details,\r\n      severity\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log data access events\r\n   */\r\n  static async logDataAccess(\r\n    userId: string,\r\n    userEmail: string,\r\n    resourceType: string,\r\n    resourceId?: string,\r\n    action: 'read' | 'search' | 'export' = 'read',\r\n    request?: {\r\n      ip?: string;\r\n      userAgent?: string;\r\n    }\r\n  ): Promise<void> {\r\n    await this.logSecurityEvent({\r\n      event_type: 'data_access',\r\n      user_id: userId,\r\n      user_email: userEmail,\r\n      ip_address: request?.ip,\r\n      user_agent: request?.userAgent,\r\n      details: {\r\n        resource_type: resourceType,\r\n        resource_id: resourceId,\r\n        action\r\n      },\r\n      severity: 'info'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Write audit log to database\r\n   */\r\n  private static async writeAuditLog(entry: AuditLogEntry): Promise<void> {\r\n    try {\r\n      if (supabaseAdmin) {\r\n        await supabaseAdmin\r\n          .from('audit_logs')\r\n          .insert(entry);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to write audit log:', error);\r\n      // Don't throw - audit logging should not break application flow\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine severity based on action and resource type\r\n   */\r\n  private static determineSeverity(action: string, resourceType: string): SeverityLevel {\r\n    // Critical actions\r\n    if (action.includes('delete') || action.includes('remove')) {\r\n      return 'critical';\r\n    }\r\n    \r\n    // Warning actions\r\n    if (action.includes('update') || action.includes('modify') || action.includes('change')) {\r\n      return 'warning';\r\n    }\r\n    \r\n    // Admin-specific actions\r\n    if (resourceType === 'user' || resourceType === 'admin' || resourceType === 'system') {\r\n      return 'warning';\r\n    }\r\n    \r\n    // Default to info\r\n    return 'info';\r\n  }\r\n\r\n  /**\r\n   * Get audit logs for a specific user\r\n   */\r\n  static async getUserAuditLogs(\r\n    userId: string,\r\n    limit: number = 100,\r\n    offset: number = 0\r\n  ): Promise<AuditLogEntry[]> {\r\n    try {\r\n      if (!supabaseAdmin) {\r\n        return [];\r\n      }\r\n\r\n      const { data, error } = await supabaseAdmin\r\n        .from('audit_logs')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .order('timestamp', { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      if (error) {\r\n        console.error('Failed to fetch user audit logs:', error);\r\n        return [];\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n      return data ?? [];\r\n    } catch (error) {\r\n      console.error('Error fetching user audit logs:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get recent security events\r\n   */\r\n  static async getRecentSecurityEvents(\r\n    hours: number = 24,\r\n    severity?: SeverityLevel\r\n  ): Promise<Record<string, unknown>[]> {\r\n    try {\r\n      if (!supabaseAdmin) {\r\n        return [];\r\n      }\r\n\r\n      const startTime = new Date();\r\n      startTime.setHours(startTime.getHours() - hours);\r\n\r\n      let query = supabaseAdmin\r\n        .from('security_events')\r\n        .select('*')\r\n        .gte('timestamp', startTime.toISOString())\r\n        .order('timestamp', { ascending: false });\r\n\r\n      if (severity) {\r\n        query = query.eq('severity', severity);\r\n      }\r\n\r\n      const { data, error } = await query.limit(500);\r\n\r\n      if (error) {\r\n        console.error('Failed to fetch security events:', error);\r\n        return [];\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n      return data ?? [];\r\n    } catch (error) {\r\n      console.error('Error fetching security events:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Security monitoring utilities\r\n */\r\nexport const SecurityMonitor = {\r\n  /**\r\n   * Check for suspicious activity patterns\r\n   */\r\n  async checkSuspiciousActivity(userId: string): Promise<{\r\n    suspicious: boolean;\r\n    reasons: string[];\r\n    riskLevel: 'low' | 'medium' | 'high';\r\n  }> {\r\n    const reasons: string[] = [];\r\n    let riskLevel: 'low' | 'medium' | 'high' = 'low';\r\n\r\n    try {\r\n      // Check recent failed login attempts\r\n      const recentEvents = await AuditLogger.getRecentSecurityEvents(1, 'warning');\r\n      const failedLogins = recentEvents.filter(\r\n         \r\n        event => event.event_type === 'login_failure' && event.user_id === userId\r\n      );\r\n\r\n      if (failedLogins.length > 5) {\r\n        reasons.push('Multiple failed login attempts');\r\n        riskLevel = 'high';\r\n      } else if (failedLogins.length > 2) {\r\n        reasons.push('Recent failed login attempts');\r\n        riskLevel = 'medium';\r\n      }\r\n\r\n      // Check for unusual access patterns\r\n      const auditLogs = await AuditLogger.getUserAuditLogs(userId, 50);\r\n      const recentActions = auditLogs.filter(\r\n        log => new Date(log.timestamp) > new Date(Date.now() - 60 * 60 * 1000) // Last hour\r\n      );\r\n\r\n      if (recentActions.length > 20) {\r\n        reasons.push('High activity volume');\r\n        riskLevel = riskLevel === 'high' ? 'high' : 'medium';\r\n      }\r\n\r\n      return {\r\n        suspicious: reasons.length > 0,\r\n        reasons,\r\n        riskLevel\r\n      };\r\n    } catch (error) {\r\n      console.error('Error checking suspicious activity:', error);\r\n      return {\r\n        suspicious: false,\r\n        reasons: [],\r\n        riskLevel: 'low'\r\n      };\r\n    }\r\n  },\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\rateLimiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":112,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":112,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  createClient,\r\n  type PostgrestSingleResponse,\r\n  type PostgrestResponse,\r\n} from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (supabaseUrl === undefined || supabaseUrl === '') {\r\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\r\n}\r\n\r\nif (supabaseAnonKey === undefined || supabaseAnonKey === '') {\r\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Only create admin client on server side where service key is available\r\nexport const supabaseAdmin = (supabaseServiceKey !== undefined && supabaseServiceKey !== '')\r\n  ? createClient(supabaseUrl, supabaseServiceKey)\r\n  : undefined;\r\n\r\n// Database types\r\nimport {\r\n  MenuCategory,\r\n  MenuItem,\r\n  OperatingHours,\r\n  PriceRange,\r\n  ExtractedFoodTruckDetails,\r\n} from './types';\r\n\r\nexport interface FoodTruckLocation {\r\n  lat?: number;\r\n  lng?: number;\r\n  address?: string;\r\n  timestamp: string;\r\n}\r\n\r\n// Re-exporting from types.ts to ensure consistency\r\n\r\nexport interface FoodTruck {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  current_location: FoodTruckLocation;\r\n  scheduled_locations?: ExtractedFoodTruckDetails['scheduled_locations']; // Use type from types.ts\r\n  operating_hours?: OperatingHours; // Use type from types.ts\r\n  menu?: MenuCategory[]; // Use type from types.ts\r\n  contact_info?: ExtractedFoodTruckDetails['contact_info']; // Use type from types.ts\r\n  social_media?: ExtractedFoodTruckDetails['social_media']; // Use type from types.ts\r\n  cuisine_type?: string[];\r\n  price_range?: PriceRange; // Use type from types.ts\r\n  specialties?: string[];\r\n  data_quality_score?: number;\r\n  verification_status: 'pending' | 'verified' | 'flagged' | 'rejected';\r\n  source_urls?: string[];\r\n  created_at: string;\r\n  updated_at: string;\r\n  last_scraped_at?: string;\r\n  exact_location?: FoodTruckLocation;\r\n  city_location?: FoodTruckLocation;\r\n  average_rating?: number; // Added for ratings\r\n  review_count?: number; // Added for ratings\r\n}\r\n\r\nexport interface ScrapingJob {\r\n  id: string;\r\n  job_type: string;\r\n  target_url?: string;\r\n  target_handle?: string;\r\n  platform?: string;\r\n  status: 'pending' | 'running' | 'completed' | 'failed';\r\n  priority: number;\r\n  scheduled_at: string;\r\n  started_at?: string;\r\n  completed_at?: string;\r\n  data_collected?: Record<string, unknown>;\r\n  errors?: string[];\r\n  retry_count: number;\r\n  max_retries: number;\r\n  created_at: string;\r\n}\r\n\r\nexport interface DataProcessingQueue {\r\n  id: string;\r\n  truck_id?: string;\r\n  processing_type: string;\r\n  raw_data: Record<string, unknown>;\r\n  processed_data?: Record<string, unknown>;\r\n  gemini_tokens_used: number;\r\n  status: 'pending' | 'processing' | 'completed' | 'failed';\r\n  priority: number;\r\n  created_at: string;\r\n  processed_at?: string;\r\n}\r\n\r\nexport interface ApiUsage {\r\n  id: string;\r\n  service_name: string;\r\n  usage_date: string;\r\n  requests_count: number;\r\n  tokens_used: number;\r\n}\r\n\r\n// Food truck operations\r\nfunction buildMenuByTruck(menuItems: RawMenuItemFromDB[]): Record<string, RawMenuItemFromDB[]> {\r\n  const menuByTruck: Record<string, RawMenuItemFromDB[]> = {};\r\n  for (const item of menuItems) {\r\n    if (!menuByTruck[item.food_truck_id as string]) {\r\n      menuByTruck[item.food_truck_id as string] = [];\r\n    }\r\n    menuByTruck[item.food_truck_id as string].push(item);\r\n  }\r\n  return menuByTruck;\r\n}\r\n\r\nfunction handleSupabaseError(error: unknown, context: string) {\r\n  console.warn(`Error in ${context}:`, error);\r\n}\r\n\r\nexport const FoodTruckService = {\r\n  async getAllTrucks(limit = 50, offset = 0): Promise<{ trucks: FoodTruck[]; total: number }> {\r\n    try {\r\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\r\n        .from('food_trucks')\r\n        .select('*', { count: 'exact' })\r\n        .order('updated_at', { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n      if (error) throw error;\r\n      const trucks: FoodTruck[] = (data ?? []).map((t: FoodTruck) => normalizeTruckLocation(t));\r\n      if (trucks.length === 0) return { trucks: [], total: count ?? 0 };\r\n      const truckIds = trucks.map((t) => t.id);\r\n      let menuItems: RawMenuItemFromDB[] = [];\r\n      try {\r\n        if (truckIds.length > 0) {\r\n          const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> =\r\n            await supabase.from('menu_items').select('*').in('food_truck_id', truckIds);\r\n          if (menuError) throw menuError;\r\n          menuItems = items ?? [];\r\n        }\r\n      } catch (menuError) {\r\n        handleSupabaseError(menuError, 'getAllTrucks:menu_items');\r\n      }\r\n      const menuByTruck = buildMenuByTruck(menuItems);\r\n      for (const truck of trucks) {\r\n        truck.menu = groupMenuItems(menuByTruck[truck.id] ?? []);\r\n      }\r\n      return { trucks, total: count ?? 0 };\r\n    } catch (error) {\r\n      handleSupabaseError(error, 'getAllTrucks');\r\n      return { trucks: [], total: 0 };\r\n    }\r\n  },\r\n  async getTruckById(id: string): Promise<FoodTruck> {\r\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase\r\n      .from('food_trucks')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n    if (error) throw error;\r\n    const truck: FoodTruck = normalizeTruckLocation(data);\r\n    const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> = await supabase\r\n      .from('menu_items')\r\n      .select('*')\r\n      .eq('food_truck_id', id);\r\n    if (menuError) throw menuError;\r\n    truck.menu = groupMenuItems(items ?? []);\r\n    return truck;\r\n  },\r\n\r\n  async getTrucksByLocation(lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> {\r\n    try {\r\n      const { trucks } = await FoodTruckService.getAllTrucks();\r\n      const nearbyTrucks = trucks.filter((truck) => {\r\n        if (\r\n          truck.current_location == undefined ||\r\n          typeof truck.current_location.lat !== 'number' ||\r\n          typeof truck.current_location.lng !== 'number'\r\n        ) {\r\n          return false;\r\n        }\r\n        const distance = calculateDistance(\r\n          lat,\r\n          lng,\r\n          truck.current_location.lat,\r\n          truck.current_location.lng,\r\n        );\r\n        return distance <= radiusKm;\r\n      });\r\n      return nearbyTrucks;\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching trucks by location:', error);\r\n      return [];\r\n    }\r\n  },\r\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n    const menuData = truckData.menu;\r\n    const truckDataWithoutMenu = { ...truckData };\r\n    delete truckDataWithoutMenu.menu;\r\n    const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n      .from('food_trucks')\r\n      .insert([truckDataWithoutMenu])\r\n      .select()\r\n      .single();\r\n    if (error) throw error;\r\n    await insertMenuItems(truck.id, menuData);\r\n    return truck;\r\n  },\r\n\r\n  async updateTruck(id: string, updates: Partial<FoodTruck>): Promise<FoodTruck> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n    const menuData = updates.menu;\r\n    const updatesWithoutMenu = { ...updates };\r\n    delete updatesWithoutMenu.menu;\r\n    const truck = await updateTruckData(id, updatesWithoutMenu);\r\n    if (menuData !== undefined) {\r\n      await updateTruckMenu(id, menuData);\r\n    }\r\n    return truck;\r\n  },\r\n\r\n  async getDataQualityStats(): Promise<{\r\n    total_trucks: number;\r\n    avg_quality_score: number;\r\n    high_quality_count: number;\r\n    medium_quality_count: number;\r\n    low_quality_count: number;\r\n    verified_count: number;\r\n    pending_count: number;\r\n    flagged_count: number;\r\n  }> {\r\n    try {\r\n      const {\r\n        data,\r\n        error,\r\n      }: PostgrestSingleResponse<{\r\n        total_trucks: number;\r\n        avg_quality_score: number;\r\n        high_quality_count: number;\r\n        medium_quality_count: number;\r\n        low_quality_count: number;\r\n        verified_count: number;\r\n        pending_count: number;\r\n        flagged_count: number;\r\n      }> = await supabase.rpc('get_data_quality_stats').single();\r\n      if (error) throw error;\r\n      return data as {\r\n        total_trucks: number;\r\n        avg_quality_score: number;\r\n        high_quality_count: number;\r\n        medium_quality_count: number;\r\n        low_quality_count: number;\r\n        verified_count: number;\r\n        pending_count: number;\r\n        flagged_count: number;\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching data quality stats:', error);\r\n      return {\r\n        total_trucks: 0,\r\n        avg_quality_score: 0,\r\n        high_quality_count: 0,\r\n        medium_quality_count: 0,\r\n        low_quality_count: 0,\r\n        verified_count: 0,\r\n        pending_count: 0,\r\n        flagged_count: 0,\r\n      };\r\n    }\r\n  },\r\n};\r\n\r\n// Helper functions to reduce cognitive complexity\r\nasync function updateTruckData(\r\n  id: string,\r\n  updatesWithoutMenu: Partial<FoodTruck>,\r\n): Promise<FoodTruck> {\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n  }\r\n\r\n  const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n    .from('food_trucks')\r\n    .update(updatesWithoutMenu)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) throw error;\r\n  return truck;\r\n}\r\n\r\nasync function updateTruckMenu(id: string, menuData: MenuCategory[]): Promise<void> {\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n  }\r\n\r\n  // Delete existing menu items\r\n  const { error: deleteError } = await supabaseAdmin\r\n    .from('menu_items')\r\n    .delete()\r\n    .eq('food_truck_id', id);\r\n\r\n  if (deleteError) {\r\n    console.error('Error deleting existing menu items for truck', id, deleteError);\r\n  }\r\n\r\n  // Insert new menu items if they exist\r\n  if (menuData != undefined && menuData.length > 0) {\r\n    const menuItems = menuData.flatMap((category) =>\r\n      (category.items ?? []).map((item) => ({\r\n        food_truck_id: id,\r\n        category: category.name ?? 'Uncategorized',\r\n        name: item.name ?? 'Unknown Item',\r\n        description: item.description ?? undefined,\r\n        price: typeof item.price === 'number' ? item.price : undefined,\r\n        dietary_tags: item.dietary_tags ?? [],\r\n      })),\r\n    );\r\n\r\n    if (menuItems.length > 0) {\r\n      const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\r\n\r\n      if (menuError) {\r\n        console.error('Error inserting updated menu items for truck', id, menuError);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\r\n  const R = 6371;\r\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n  const dLon = ((lon2 - lon1) * Math.PI) / 180;\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos((lat1 * Math.PI) / 180) *\r\n      Math.cos((lat2 * Math.PI) / 180) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const distance = R * c;\r\n  return distance;\r\n}\r\n\r\n// Define a helper type for items coming from the DB, which might include a category field\r\ninterface RawMenuItemFromDB {\r\n  name: string;\r\n  description?: string;\r\n  price?: number;\r\n  dietary_tags?: string[];\r\n  category?: string; // This field is expected from the DB query\r\n  // Potentially other fields like id, food_truck_id, etc.\r\n  [key: string]: unknown; // Allow other properties from DB select *\r\n}\r\n\r\nfunction groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\r\n  const byCategory: Record<string, MenuItem[]> = {}; // Stores processed MenuItems\r\n  for (const rawItem of rawItems) {\r\n    const categoryName: string = rawItem.category ?? 'Uncategorized';\r\n    byCategory[categoryName] ??= [];\r\n    // Construct a MenuItem conforming to the MenuItem interface (no 'category' property)\r\n    const menuItem: MenuItem = {\r\n      name: rawItem.name,\r\n      // Use nullish coalescing to convert null from DB to undefined for the MenuItem type\r\n      description: rawItem.description ?? undefined,\r\n      price: rawItem.price ?? undefined,\r\n      dietary_tags: rawItem.dietary_tags ?? [], // Default to empty array if null/undefined\r\n    };\r\n    byCategory[categoryName].push(menuItem);\r\n  }\r\n  // Map to MenuCategory structure { name: string, items: MenuItem[] }\r\n  return Object.entries(byCategory).map(([categoryName, itemsList]) => ({\r\n    name: categoryName, // 'name' here refers to the category's name\r\n    items: itemsList,\r\n  }));\r\n}\r\n\r\nfunction normalizeTruckLocation(truck: FoodTruck): FoodTruck {\r\n  const fallback: FoodTruckLocation = {\r\n    lat: undefined,\r\n    lng: undefined,\r\n    address: 'Unknown',\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n  const loc = truck.exact_location ?? truck.current_location ?? truck.city_location ?? {};\r\n  const lat = loc.lat ?? undefined;\r\n  const lng = loc.lng ?? undefined;\r\n  const address = loc.address;\r\n  const timestamp = loc.timestamp;\r\n\r\n  truck.current_location =\r\n    typeof lat !== 'number' || typeof lng !== 'number' || (lat === 0 && lng === 0)\r\n      ? { ...fallback, address: address ?? fallback.address }\r\n      : {\r\n          lat,\r\n          lng,\r\n          address: address ?? fallback.address,\r\n          timestamp: timestamp ?? fallback.timestamp,\r\n        };\r\n  return truck;\r\n}\r\n\r\nexport const ScrapingJobService = {\r\n  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .insert([\r\n        {\r\n          ...jobData,\r\n          status: 'pending',\r\n          retry_count: 0,\r\n          max_retries: 3,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getJobsByStatus(status: string): Promise<ScrapingJob[]> {\r\n    try {\r\n      const query =\r\n        status === 'all'\r\n          ? supabase.from('scraping_jobs').select('*')\r\n          : supabase.from('scraping_jobs').select('*').eq('status', status);\r\n\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await query\r\n        .order('priority', { ascending: false })\r\n        .order('scheduled_at', { ascending: true });\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching jobs:', error);\r\n      return [];\r\n    }\r\n  },\r\n  async updateJobStatus(\r\n    id: string,\r\n    status: string,\r\n    updates: Partial<ScrapingJob> = {},\r\n  ): Promise<ScrapingJob> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .update({\r\n        status,\r\n        ...updates,\r\n        ...(status === 'running' && { started_at: new Date().toISOString() }),\r\n        ...(status === 'completed' && { completed_at: new Date().toISOString() }),\r\n      })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  async incrementRetryCount(id: string): Promise<ScrapingJob> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const {\r\n      data: current,\r\n      error: fetchError,\r\n    }: PostgrestSingleResponse<Pick<ScrapingJob, 'retry_count'>> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .select('retry_count')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (fetchError) throw fetchError;\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .update({ retry_count: (current?.retry_count ?? 0) + 1 })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  async getAllJobs(limit = 50, offset = 0): Promise<ScrapingJob[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\r\n        .from('scraping_jobs')\r\n        .select('*')\r\n        .order('created_at', { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching all jobs:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async getJobsFromDate(date: Date): Promise<ScrapingJob[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\r\n        .from('scraping_jobs')\r\n        .select('*')\r\n        .gte('created_at', date.toISOString())\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching jobs from date:', error);\r\n      return [];\r\n    }\r\n  },\r\n};\r\n\r\nexport const DataProcessingService = {\r\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from('data_processing_queue')\r\n      .insert([\r\n        {\r\n          ...queueData,\r\n          status: 'pending',\r\n          gemini_tokens_used: 0,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getNextQueueItem(): Promise<DataProcessingQueue | undefined> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from('data_processing_queue')\r\n      .select('*')\r\n      .eq('status', 'pending')\r\n      .order('priority', { ascending: false })\r\n      .order('created_at', { ascending: true })\r\n      .limit(1)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') throw error;\r\n    return data ?? undefined;\r\n  },\r\n\r\n  async getQueueByStatus(status: string): Promise<DataProcessingQueue[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<DataProcessingQueue> = await supabase\r\n        .from('data_processing_queue')\r\n        .select('*')\r\n        .eq('status', status)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching queue:', error);\r\n      return [];\r\n    }\r\n  },\r\n  async updateQueueItem(\r\n    id: string,\r\n    updates: Partial<DataProcessingQueue>,\r\n  ): Promise<DataProcessingQueue> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from('data_processing_queue')\r\n      .update({\r\n        ...updates,\r\n        ...(updates.status === 'completed' && { processed_at: new Date().toISOString() }),\r\n      })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n};\r\n\r\nexport const APIUsageService = {\r\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<ApiUsage> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    try {\r\n      const today = new Date().toISOString().split('T')[0];\r\n\r\n      const { data: existing }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n        .from('api_usage')\r\n        .select('*')\r\n        .eq('service_name', serviceName)\r\n        .eq('usage_date', today)\r\n        .single();\r\n      if (existing) {\r\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n          .from('api_usage')\r\n          .update({\r\n            requests_count: (existing.requests_count ?? 0) + requests,\r\n            tokens_used: (existing.tokens_used ?? 0) + tokens,\r\n          })\r\n          .eq('id', existing.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      } else {\r\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n          .from('api_usage')\r\n          .insert([\r\n            {\r\n              service_name: serviceName,\r\n              usage_date: today,\r\n              requests_count: requests,\r\n              tokens_used: tokens,\r\n            },\r\n          ])\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn('Error tracking usage:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getTodayUsage(serviceName: string): Promise<ApiUsage | undefined> {\r\n    try {\r\n      const today = new Date().toISOString().split('T')[0];\r\n\r\n      const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabase\r\n        .from('api_usage')\r\n        .select('*')\r\n        .eq('service_name', serviceName)\r\n        .eq('usage_date', today)\r\n        .single();\r\n\r\n      if (error && error.code !== 'PGRST116') throw error;\r\n      return data ?? undefined;\r\n    } catch (error: unknown) {\r\n      console.warn('Error getting today usage:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getAllUsageStats(): Promise<ApiUsage[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ApiUsage> = await supabase\r\n        .from('api_usage')\r\n        .select('*')\r\n        .order('usage_date', { ascending: false })\r\n        .limit(30);\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error getting usage stats:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport { type MenuItem, type MenuCategory, type OperatingHours, type PriceRange } from './types';\r\n\r\n// Helper to prepare menu items for DB insertion\r\nfunction prepareMenuItemsForInsert(truckId: string, menuData: MenuCategory[] | undefined) {\r\n  if (!menuData || menuData.length === 0) return [];\r\n  return menuData.flatMap((category) =>\r\n    (category.items ?? []).map((item) => ({\r\n      food_truck_id: truckId,\r\n      category: category.name ?? 'Uncategorized',\r\n      name: item.name ?? 'Unknown Item',\r\n      description: item.description ?? undefined,\r\n      price: typeof item.price === 'number' ? item.price : undefined,\r\n      dietary_tags: item.dietary_tags ?? [],\r\n    }))\r\n  );\r\n}\r\n\r\nasync function insertMenuItems(truckId: string, menuData: MenuCategory[] | undefined) {\r\n  const menuItems = prepareMenuItemsForInsert(truckId, menuData);\r\n  if (menuItems.length === 0) return;\r\n  const { error: menuError } = await supabaseAdmin!.from('menu_items').insert(menuItems);\r\n  if (menuError) {\r\n    console.error('Error inserting menu items for truck', truckId, menuError);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types\\foodTruck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\dataQualityFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\foodTruckHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrucksApiResponse' is defined but never used.","line":1,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":38},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'TrucksApiResponse'.","line":1,"column":21,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[18,37],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":19,"column":65,"nodeType":null,"endLine":19,"endColumn":68,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[653,656],"text":"!="}}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":88,"column":13,"nodeType":null,"endLine":88,"endColumn":16,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[2936,2939],"text":"=="}}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":88,"column":66,"nodeType":null,"endLine":88,"endColumn":69,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[2989,2992],"text":"=="}}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":88,"column":95,"nodeType":null,"endLine":88,"endColumn":98,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[3018,3021],"text":"=="}}]}],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":21,"column":5,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":21,"endColumn":45,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FoodTruck, TrucksApiResponse } from '@/lib/types/foodTruck';\r\n\r\nexport const getCurrentDay = () => {\r\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\r\n  return days[new Date().getDay()];\r\n};\r\n\r\nexport const formatPrice = (price: number) => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  }).format(price);\r\n};\r\n\r\n// Get user's current location or default to San Francisco\r\nexport function getUserLocationHelper(\r\n  setUserLocation: (location: { lat: number; lng: number }) => void\r\n) {\r\n  if (typeof navigator !== 'undefined' && navigator.geolocation !== undefined) {\r\n    // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        setUserLocation({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n      },\r\n      (error) => {\r\n        console.warn('Location access denied:', error);\r\n        // Default to San Francisco\r\n        setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n      },\r\n    );\r\n  } else {\r\n    // Default to San Francisco if geolocation is not supported\r\n    setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n  }\r\n}\r\n\r\n// Load all food trucks from API\r\nexport async function loadFoodTrucksHelper(\r\n  setTrucks: (trucks: FoodTruck[]) => void,\r\n  setLoading: (loading: boolean) => void\r\n) {\r\n  try {\r\n    const response = await fetch('/api/trucks');\r\n    const data: unknown = await response.json();\r\n    if (typeof data === 'object' && data !== null && 'trucks' in data && Array.isArray(data.trucks)) {\r\n      setTrucks(data.trucks as FoodTruck[]);\r\n    } else {\r\n      setTrucks([]);\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load food trucks:', error);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}\r\n\r\n// Load nearby food trucks based on user location\r\nexport async function loadNearbyTrucksHelper(\r\n  userLocation: { lat: number; lng: number } | undefined,\r\n  setTrucks: (trucks: FoodTruck[]) => void\r\n) {\r\n  if (!userLocation) return;\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `/api/trucks?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10`,\r\n    );\r\n    const data: unknown = await response.json();\r\n    if (typeof data === 'object' && data !== null && 'trucks' in data && Array.isArray(data.trucks)) {\r\n      setTrucks(data.trucks as FoodTruck[]);\r\n    } else {\r\n      setTrucks([]);\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load nearby trucks:', error);\r\n  }\r\n}\r\n\r\n// Check if a food truck is currently open\r\nexport function isTruckOpen(truck: FoodTruck): boolean {\r\n  const today = getCurrentDay();\r\n  const hours = truck.operating_hours?.[today];\r\n\r\n  // Ensure hours and its properties are not null/undefined before accessing\r\n  if (hours === undefined || hours.closed === true || hours.open === undefined || hours.close === undefined) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const now = new Date();\r\n    const currentTime = now.getHours() * 100 + now.getMinutes();\r\n    const openTime = Number.parseInt(hours.open.replace(':', ''));\r\n    const closeTime = Number.parseInt(hours.close.replace(':', ''));\r\n\r\n    return currentTime >= openTime && currentTime <= closeTime;\r\n  } catch (error: unknown) {\r\n    console.error('Error parsing operating hours for truck', truck.name, error);\r\n    return false;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\quality-scorer.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `qualityScorer.ts` or `QualityScorer.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"unicorn/no-empty-file","severity":2,"message":"Empty files are not allowed.","line":1,"column":1,"nodeType":"Program","messageId":"no-empty-file","endLine":1,"endColumn":1}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\qualityScorer.ts","messages":[{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":114,"column":9,"nodeType":"Literal","endLine":114,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Quality Scoring Utilities\r\n * Centralized quality scoring functions to eliminate duplication\r\n * and provide consistent quality metrics across the application\r\n */\r\n\r\nimport { isNonEmptyString, isValidNumber, safeNumber, safeString } from './typeGuards';\r\n\r\n// Quality score weights (must sum to 1.0)\r\nexport const QUALITY_WEIGHTS = {\r\n  CORE_DATA: 0.35,      // 35% - name, description, location\r\n  LOCATION_DATA: 0.25,  // 25% - coordinates, address\r\n  CONTACT_DATA: 0.2,    // 20% - phone, email, website\r\n  MENU_DATA: 0.1,       // 10% - menu items, pricing\r\n  OPERATIONAL_DATA: 0.05, // 5% - hours, social media\r\n  VERIFICATION: 0.05    // 5% - verification status\r\n} as const;\r\n\r\n// Quality thresholds\r\nexport const QUALITY_THRESHOLDS = {\r\n  HIGH: 0.8,    // 80%+\r\n  MEDIUM: 0.6,  // 60-79%\r\n  LOW: 0       // <60%\r\n} as const;\r\n\r\n// Core data quality scoring\r\nexport function scoreCoreData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Name (required - 40% of core score)\r\n  maxScore += 0.4;\r\n  if (isNonEmptyString(truck.name)) {\r\n    score += 0.4;\r\n  }\r\n\r\n  // Description (30% of core score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.description)) {\r\n    const desc = safeString(truck.description);\r\n    if (desc.length > 50) {\r\n      score += 0.3;\r\n    } else if (desc.length > 20) {\r\n      score += 0.15;\r\n    }\r\n  }\r\n\r\n  // Cuisine type (20% of core score)\r\n  maxScore += 0.2;\r\n  if (isNonEmptyString(truck.cuisine_type)) {\r\n    score += 0.2;\r\n  }\r\n\r\n  // Image URL (10% of core score)\r\n  maxScore += 0.1;\r\n  if (isNonEmptyString(truck.image_url)) {\r\n    score += 0.1;\r\n  }\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Location data quality scoring\r\nexport function scoreLocationData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Coordinates (50% of location score)\r\n  maxScore += 0.5;\r\n  const latitude = safeNumber(truck.latitude);\r\n  const longitude = safeNumber(truck.longitude);\r\n  if (isValidNumber(latitude) && isValidNumber(longitude) && \r\n      latitude !== 0 && longitude !== 0) {\r\n    score += 0.5;\r\n  }\r\n\r\n  // Address (30% of location score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.address)) {\r\n    score += 0.3;\r\n  }\r\n\r\n  // City/State (20% of location score)\r\n  maxScore += 0.2;\r\n  if (isNonEmptyString(truck.city) || isNonEmptyString(truck.state)) {\r\n    score += 0.2;\r\n  }\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Contact data quality scoring\r\nexport function scoreContactData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Phone (40% of contact score)\r\n  maxScore += 0.4;\r\n  if (isNonEmptyString(truck.phone)) {\r\n    const phone = safeString(truck.phone);\r\n    // Basic phone validation - simplified to avoid backtracking\r\n    if (/^\\+?[\\d\\s\\-()]{10,}$/.test(phone)) {\r\n      score += 0.4;\r\n    } else if (phone.length > 5) {\r\n      score += 0.2;\r\n    }\r\n  }\r\n\r\n  // Email (30% of contact score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.email)) {\r\n    const email = safeString(truck.email);\r\n    // Basic email validation\r\n    if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n      score += 0.3;\r\n    }\r\n  }\r\n\r\n  // Website (30% of contact score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.website)) {\r\n    const website = safeString(truck.website);\r\n    // Basic URL validation\r\n    if (/^https?:\\/\\/.+\\..+/.test(website)) {\r\n      score += 0.3;\r\n    }\r\n  }\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Menu data quality scoring\r\nexport function scoreMenuData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Menu items (70% of menu score)\r\n  maxScore += 0.7;\r\n  if (isNonEmptyString(truck.menu_items)) {\r\n    const menuItems = safeString(truck.menu_items);\r\n    if (menuItems.length > 100) {\r\n      score += 0.7;\r\n    } else if (menuItems.length > 20) {\r\n      score += 0.35;\r\n    }\r\n  }\r\n\r\n  // Price range (30% of menu score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.price_range)) {\r\n    score += 0.3;\r\n  }\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Operational data quality scoring\r\nexport function scoreOperationalData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Operating hours (60% of operational score)\r\n  maxScore += 0.6;\r\n  if (isNonEmptyString(truck.operating_hours)) {\r\n    score += 0.6;\r\n  }\r\n\r\n  // Social media (40% of operational score)\r\n  maxScore += 0.4;\r\n  const socialFields = ['facebook_url', 'twitter_url', 'instagram_url'];\r\n  const socialCount = socialFields.filter(field => isNonEmptyString(truck[field])).length;\r\n  score += (socialCount / socialFields.length) * 0.4;\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Verification status scoring\r\nexport function scoreVerificationStatus(truck: Record<string, unknown>): number {\r\n  const status = safeString(truck.verification_status);\r\n  switch (status) {\r\n    case 'verified': {\r\n      return 1;\r\n    }\r\n    case 'pending': {\r\n      return 0.5;\r\n    }\r\n    default: {\r\n      return 0;\r\n    }\r\n  }\r\n}\r\n\r\n// Calculate overall quality score\r\nexport function calculateOverallQualityScore(truck: Record<string, unknown>): number {\r\n  const coreScore = scoreCoreData(truck);\r\n  const locationScore = scoreLocationData(truck);\r\n  const contactScore = scoreContactData(truck);\r\n  const menuScore = scoreMenuData(truck);\r\n  const operationalScore = scoreOperationalData(truck);\r\n  const verificationScore = scoreVerificationStatus(truck);\r\n\r\n  return (\r\n    coreScore * QUALITY_WEIGHTS.CORE_DATA +\r\n    locationScore * QUALITY_WEIGHTS.LOCATION_DATA +\r\n    contactScore * QUALITY_WEIGHTS.CONTACT_DATA +\r\n    menuScore * QUALITY_WEIGHTS.MENU_DATA +\r\n    operationalScore * QUALITY_WEIGHTS.OPERATIONAL_DATA +\r\n    verificationScore * QUALITY_WEIGHTS.VERIFICATION\r\n  );\r\n}\r\n\r\n// Get quality category\r\nexport function getQualityCategory(score: number): 'high' | 'medium' | 'low' {\r\n  if (score >= QUALITY_THRESHOLDS.HIGH) return 'high';\r\n  if (score >= QUALITY_THRESHOLDS.MEDIUM) return 'medium';\r\n  return 'low';\r\n}\r\n\r\n// Get quality label\r\nexport function getQualityLabel(score: number): string {\r\n  const category = getQualityCategory(score);\r\n  switch (category) {\r\n    case 'high': {\r\n      return 'Excellent';\r\n    }\r\n    case 'medium': {\r\n      return 'Good';\r\n    }\r\n    case 'low': {\r\n      return 'Needs Work';\r\n    }\r\n  }\r\n}\r\n\r\n// Get quality color\r\nexport function getQualityColor(score: number): string {\r\n  const category = getQualityCategory(score);\r\n  switch (category) {\r\n    case 'high': {\r\n      return '#22c55e';\r\n    }\r\n    case 'medium': {\r\n      return '#f59e0b';\r\n    }\r\n    case 'low': {\r\n      return '#ef4444';\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\type-guards.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `typeGuards.ts` or `TypeGuards.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"unicorn/no-empty-file","severity":2,"message":"Empty files are not allowed.","line":1,"column":1,"nodeType":"Program","messageId":"no-empty-file","endLine":1,"endColumn":1}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\typeGuards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]