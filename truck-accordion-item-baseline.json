[{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckAccordionItem.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":43,"column":12,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":43,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2055,2086],"text":"((truck.current_location?.address) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2055,2086],"text":"((truck.current_location?.address) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2055,2086],"text":"(Boolean((truck.current_location?.address)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Badge } from '@/components/ui/badge';\nimport { TruckCard } from '@/components/TruckCard';\nimport { FoodTruck } from '@/lib/types';\n\ninterface TruckAccordionItemProps {\n  readonly truck: FoodTruck;\n  readonly selectedTruckId: string | undefined;\n  readonly setSelectedTruckId: (id: string | undefined) => void;\n  readonly isOpen: (truck: FoodTruck) => boolean;\n  readonly userLocation: { lat: number; lng: number } | undefined;\n}\n\n/**\n * Renders an accordion item displaying truck details and provides interaction handlers.\n * @example\n * TruckAccordionItem({ truck, selectedTruckId, setSelectedTruckId, isOpen, userLocation })\n * Returns a React component representing an accordion item.\n * @param {Object} truck - The truck object containing details like id, name, and location.\n * @param {function} setSelectedTruckId - Function used to update the selected truck ID.\n * @param {boolean} isOpen - Function that determines the open state of the truck.\n * @param {Object} userLocation - The user's current location used in truck comparisons.\n * @returns {JSX.Element} The rendered AccordionItem component.\n * @description\n *   - Uses conditional rendering to display the truck's current location if available.\n *   - Calls isOpen to evaluate and render truck's open/closed status dynamically.\n *   - The accordion triggers user interaction with truck selection for detailed viewing.\n *   - Applies varying styling based on dark/light theme settings in the interface.\n */\nexport function TruckAccordionItem({\n  truck,\n  selectedTruckId: _selectedTruckId,\n  setSelectedTruckId,\n  isOpen,\n  userLocation,\n}: TruckAccordionItemProps) {\n  return (\n    <AccordionItem value={truck.id} key={truck.id}>\n      <AccordionTrigger className=\"flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-slate-700 rounded-md\">\n        <div className=\"flex-1 text-left\">\n          <h4 className=\"font-medium dark:text-gray-100\">{truck.name}</h4>\n          {truck.current_location?.address && (\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-1\">\n              {truck.current_location.address}\n            </p>\n          )}\n        </div>\n        <Badge variant={isOpen(truck) ? 'default' : 'secondary'}>\n          {isOpen(truck) ? 'Open' : 'Closed'}\n        </Badge>\n      </AccordionTrigger>\n      <AccordionContent>\n        <TruckCard\n          truck={truck}\n          isOpen={isOpen(truck)}\n          onSelectTruck={() => setSelectedTruckId(truck.id)}\n          userLocation={userLocation}\n          hideHeader={true}\n        />\n      </AccordionContent>\n    </AccordionItem>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]}]
