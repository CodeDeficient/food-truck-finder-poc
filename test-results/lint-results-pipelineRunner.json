[{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunner.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextResponse'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[0,43],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'runTestPipeline' has too many lines (52). Maximum allowed is 50.","line":33,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":84,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":40,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":44,"column":13,"nodeType":"Identifier","messageId":"unsafeCall","endLine":44,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":51,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":58,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":54,"column":13,"nodeType":"Identifier","messageId":"unsafeCall","endLine":54,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":65,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":65,"column":45,"nodeType":"Identifier","messageId":"unsafeCall","endLine":65,"endColumn":64}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport {\r\n  handleFirecrawlStage,\r\n  handleGeminiStage,\r\n  handleSupabaseStage,\r\n} from './stage-handlers';\r\nimport { StageResult, ExtractedFoodTruckDetails } from '@/lib/types';\r\n\r\ninterface PipelineRunResult {\r\n  firecrawl?: StageResult;\r\n  gemini?: StageResult;\r\n  supabase?: StageResult;\r\n  logs: string[];\r\n  overallStatus: 'Success' | 'Error';\r\n}\r\n\r\n// Helper function to handle stage errors and return a consistent error object\r\nfunction handleStageErrorAndReturn(\r\n  firecrawlResult: StageResult,\r\n  geminiResult: StageResult | undefined,\r\n  supabaseResult: StageResult | undefined,\r\n  logs: string[],\r\n): PipelineRunResult {\r\n  return {\r\n    firecrawl: firecrawlResult,\r\n    gemini: geminiResult,\r\n    supabase: supabaseResult,\r\n    logs,\r\n    overallStatus: 'Error',\r\n  };\r\n}\r\n\r\nexport async function runTestPipeline(\r\n  body: { url?: string; rawText?: string; isDryRun?: boolean },\r\n  logs: string[],\r\n): Promise<PipelineRunResult> {\r\n  const { url, rawText, isDryRun = true } = body;\r\n  logs.push(`Request body: ${JSON.stringify(body)}`);\r\n\r\n  const firecrawlStageOutput: {\r\n    firecrawlResult: StageResult;\r\n    contentToProcess: string | undefined;\r\n    sourceUrlForProcessing: string;\r\n  } = await handleFirecrawlStage(url ?? '', rawText, logs);\r\n  const { firecrawlResult, contentToProcess, sourceUrlForProcessing } = firecrawlStageOutput;\r\n\r\n  if (firecrawlResult.status === 'Error') {\r\n    return handleStageErrorAndReturn(firecrawlResult, undefined, undefined, logs);\r\n  }\r\n\r\n  const geminiStageOutput: {\r\n    geminiResult: StageResult;\r\n    extractedData: ExtractedFoodTruckDetails | undefined;\r\n  } = await handleGeminiStage(\r\n    contentToProcess,\r\n    sourceUrlForProcessing,\r\n    logs,\r\n  );\r\n  const { geminiResult, extractedData } = geminiStageOutput;\r\n\r\n  if (geminiResult.status === 'Error' || extractedData === undefined) {\r\n    return handleStageErrorAndReturn(firecrawlResult, geminiResult, undefined, logs);\r\n  }\r\n\r\n  const supabaseResult: StageResult = await handleSupabaseStage(\r\n    extractedData,\r\n    sourceUrlForProcessing,\r\n    isDryRun,\r\n    logs,\r\n  );\r\n\r\n  if (supabaseResult.status === 'Error') {\r\n    return handleStageErrorAndReturn(firecrawlResult, geminiResult, supabaseResult, logs);\r\n  }\r\n\r\n  logs.push('Test pipeline run completed successfully.');\r\n  return {\r\n    firecrawl: firecrawlResult,\r\n    gemini: geminiResult,\r\n    supabase: supabaseResult,\r\n    logs,\r\n    overallStatus: 'Success',\r\n  };\r\n}\r\n","usedDeprecatedRules":[]}]