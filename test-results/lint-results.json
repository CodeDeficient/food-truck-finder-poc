[{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\access-denied\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\analytics\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\auto-scraping\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-cleanup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-quality\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":91,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":92,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":91,"column":44,"nodeType":"Identifier","messageId":"unsafeCall","endLine":91,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":93,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":93,"endColumn":80,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":93,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":95,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":95,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":95,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":108,"column":12,"nodeType":"Identifier","messageId":"unsafeCall","endLine":108,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `error` typed value.","line":114,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\events\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\monitoring\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\test-pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\users\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\automated-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\cron-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-quality\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\oauth-status\\route.ts","messages":[{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":22,"column":12,"nodeType":"AwaitExpression","messageId":"await","endLine":22,"endColumn":44,"suggestions":[{"messageId":"removeAwait","fix":{"range":[610,615],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"sonarjs/no-invalid-await","severity":2,"message":"Refactor this redundant 'await' on a non-promise.","line":22,"column":12,"nodeType":"AwaitExpression","messageId":"refactorAwait","endLine":22,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  handleGetRequest,\r\n  handlePostRequest,\r\n} from '@/lib/api/admin/oauth-status/helpers';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    return await handleGetRequest(request);\r\n  } catch (error) {\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'OAuth status check failed',\r\n      details: error instanceof Error ? error.message : 'Unknown error',\r\n      timestamp: new Date().toISOString()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    return await handlePostRequest(request);\r\n  } catch (error) {\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to generate OAuth test URL',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\realtime-events\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\scraping-metrics\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\analytics\\web-vitals\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\auto-scrape-initiate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\autonomous-discovery\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\auto-scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\quality-check\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\dashboard\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\enhanced-pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\firecrawl\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\gemini\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\monitoring\\api-usage\\route.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handlePostAction' has no 'await' expression.","line":30,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":30,"endColumn":32,"suggestions":[{"messageId":"removeAsync","fix":{"range":[929,1080],"text":"function handlePostAction(\r\n  action: string | undefined,\r\n  service: string | undefined,\r\n  level: string | undefined,\r\n): NextResponse"},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { type APIService } from '@/lib/monitoring/apiMonitor';\r\nimport {\r\n  handleClearAlerts,\r\n  handleComprehensiveMonitoring,\r\n  handleGetAlerts,\r\n  handleServiceSpecificMonitoring,\r\n  handleTestAlert,\r\n} from '@/lib/api/monitoring/api-usage/handlers';\r\n\r\nexport function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const service = searchParams.get('service') as APIService | null;\r\n\r\n    return service ? handleServiceSpecificMonitoring(request, service) : handleComprehensiveMonitoring();\r\n  } catch (error: unknown) {\r\n    console.error('API monitoring error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to get API monitoring data',\r\n        details: error instanceof Error ? error.message : String(error),\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nasync function handlePostAction(\r\n  action: string | undefined,\r\n  service: string | undefined,\r\n  level: string | undefined,\r\n): Promise<NextResponse> {\r\n  if (action === undefined) {\r\n    return NextResponse.json({ success: false, error: 'Invalid request body: missing or invalid action' }, { status: 400 });\r\n  }\r\n\r\n  switch (action) {\r\n    case 'clear-alerts': {\r\n      return handleClearAlerts();\r\n    }\r\n    case 'get-alerts': {\r\n      return handleGetAlerts();\r\n    }\r\n    case 'test-alert': {\r\n      if (service === undefined || level === undefined) {\r\n        return NextResponse.json(\r\n          { success: false, error: 'Missing service or level for test-alert action' },\r\n          { status: 400 },\r\n        );\r\n      }\r\n      return handleTestAlert({ service, level });\r\n    }\r\n    default: {\r\n      return NextResponse.json(\r\n        { success: false, error: `Unknown action: ${action}` },\r\n        { status: 400 },\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const rawBody: unknown = await request.json();\r\n\r\n    if (typeof rawBody !== 'object' || rawBody === null) {\r\n      return NextResponse.json({ success: false, error: 'Invalid request body: not an object' }, { status: 400 });\r\n    }\r\n\r\n    const body = rawBody as Record<string, unknown>;\r\n    const action = typeof body.action === 'string' ? body.action : undefined;\r\n    const service = typeof body.service === 'string' ? body.service : undefined;\r\n    const level = typeof body.level === 'string' ? body.level : undefined;\r\n\r\n    return handlePostAction(action, service, level);\r\n  } catch (error: unknown) {\r\n    console.error('API monitoring POST error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to process monitoring request',\r\n        details: error instanceof Error ? error.message : String(error),\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scheduler\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\search\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\tavily\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-integration\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-pipeline-run\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":10,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":10,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":10,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":10,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":12,"column":32,"nodeType":"Property","messageId":"anyAssignment","endLine":12,"endColumn":39}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse, NextRequest } from 'next/server';\r\nimport { runTestPipeline } from '@/lib/api/test-integration/pipeline-runner';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  const logs: string[] = [];\r\n  logs.push('Test pipeline run started.');\r\n\r\n  try {\r\n    const body = (await request.json()) as { url?: string; rawText?: string; isDryRun?: boolean };\r\n    const results = await runTestPipeline(body, logs);\r\n\r\n    return NextResponse.json({ results }, { status: 200 });\r\n  } catch (error: unknown) {\r\n    const errorMessage =\r\n      error instanceof Error\r\n        ? error.message\r\n        : 'An unknown error occurred during overall test pipeline run.';\r\n    logs.push(`Overall test pipeline error: ${errorMessage}`);\r\n    return NextResponse.json(\r\n      {\r\n        message: 'Test pipeline run failed.',\r\n        error: errorMessage,\r\n        results: {\r\n          logs,\r\n          overallStatus: 'Error',\r\n        },\r\n      },\r\n      { status: 200 },\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\callback\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\MapDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\SearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":32,"column":15,"nodeType":null,"endLine":32,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[1130,1133],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\WebVitalsReporter.tsx","messages":[{"ruleId":"sonarjs/no-redundant-jump","severity":2,"message":"Remove this redundant jump.","line":19,"column":3,"nodeType":"ReturnStatement","messageId":"removeRedundantJump","endLine":19,"endColumn":10,"suggestions":[{"messageId":"suggestJumpRemoval","fix":{"range":[481,492],"text":""},"desc":"Remove this redundant jump"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport { initWebVitalsMonitoring } from '@/lib/performance/webVitals';\r\n\r\n/**\r\n * Web Vitals Reporter Component\r\n * Initializes Core Web Vitals monitoring for the application\r\n */\r\nexport function WebVitalsReporter() {\r\n  useEffect(() => {\r\n    // Only initialize in browser environment\r\n    if (globalThis.window != undefined) {\r\n      initWebVitalsMonitoring();\r\n    }\r\n  }, []);\r\n\r\n  // This component doesn't render anything\r\n  return;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\AdminNavLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\DataCleanupDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\RealtimeStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\UserMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupOperationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupSummaryCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\OperationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\DataQualityScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\PipelineStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\QualityDistributionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\RecentErrorsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\TotalFoodTrucksCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\BasicInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\ContactField.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":33,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[910,914],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[910,914],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[910,914],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\n// Removed Mail, Phone, Globe imports as they are not directly used here\r\n\r\ninterface ContactFieldProps {\r\n  readonly icon: React.ComponentType<{ className?: string }>;\r\n  readonly label: string;\r\n  readonly value?: string;\r\n  readonly href?: string;\r\n  readonly unavailableText: string;\r\n}\r\n\r\nexport function ContactField({\r\n  icon: Icon,\r\n  label,\r\n  value,\r\n  href,\r\n  unavailableText\r\n}: Readonly<ContactFieldProps>) {\r\n  if (value == undefined || value === '') {\r\n    return (\r\n      <div className=\"flex items-center gap-3 text-gray-400\">\r\n        <Icon className=\"h-4 w-4\" />\r\n        <span className=\"text-sm\">{unavailableText}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-3\">\r\n      <Icon className=\"h-4 w-4 text-gray-500\" />\r\n      <div>\r\n        <label className=\"text-sm font-medium text-gray-500\">{label}</label>\r\n        {href ? (\r\n          <a\r\n            href={href}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"text-blue-600 hover:text-blue-800 underline\"\r\n          >\r\n            {value}\r\n          </a>\r\n        ) : (\r\n          <p className=\"text-gray-900\">{value}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\ContactInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\DataQualityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\LocationInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\OperatingHoursCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityScoreMetric.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\RatingsReviewsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\SocialMediaLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\FailedProcessingQueueTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\PipelineStatisticsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\RecentScrapingJobsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobsTableContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertListDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ConnectionStatusHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\EventControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\RealtimeStatusDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeEvent' is defined but never used.","line":10,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeEvent'.","line":10,"column":15,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":10,"endColumn":28,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[479,555],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'RealtimeStatusDisplay' has too many lines (51). Maximum allowed is 50.","line":34,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":84,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { ConnectionStatusHeader } from './ConnectionStatusHeader';\r\nimport { SystemMetricsGrid } from './SystemMetricsGrid';\r\nimport { ScrapingJobsStatus } from './ScrapingJobsStatus';\r\nimport { SystemAlerts } from './SystemAlerts';\r\nimport { EventControls } from './EventControls';\r\nimport { type SystemAlert } from './StatusHelpers';\r\nimport { type StatusMetric } from './useSystemMetrics';\r\nimport { type RealtimeEvent } from '@/hooks/useRealtimeAdminEvents.types';\r\n\r\ninterface RealtimeStatusDisplayProps {\r\n  readonly isConnected: boolean;\r\n  readonly isConnecting: boolean;\r\n  readonly connectionError: string | undefined;\r\n  readonly lastEventTime: Date | undefined;\r\n  readonly connect: () => void;\r\n  readonly disconnect: () => void;\r\n  readonly systemMetrics: StatusMetric[];\r\n  readonly scrapingJobs: {\r\n    active: number;\r\n    completed: number;\r\n    failed: number;\r\n    pending: number;\r\n  } | undefined;\r\n  readonly alerts: SystemAlert[];\r\n  readonly showDetails: boolean;\r\n  readonly onToggleDetails: () => void;\r\n  readonly onAcknowledgeAlert: (alertId: string) => void;\r\n  readonly recentEventsCount: number;\r\n  readonly onClearEvents: () => void;\r\n}\r\n\r\nexport function RealtimeStatusDisplay({\r\n  isConnected,\r\n  isConnecting,\r\n  connectionError,\r\n  lastEventTime,\r\n  connect,\r\n  disconnect,\r\n  systemMetrics,\r\n  scrapingJobs,\r\n  alerts,\r\n  showDetails,\r\n  onToggleDetails,\r\n  onAcknowledgeAlert,\r\n  recentEventsCount,\r\n  onClearEvents,\r\n}: RealtimeStatusDisplayProps) {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Card className={`border-l-4 ${isConnected ? 'border-l-green-500' : 'border-l-red-500'}`}>\r\n        <ConnectionStatusHeader\r\n          isConnected={isConnected}\r\n          isConnecting={isConnecting}\r\n          lastEventTime={lastEventTime ? new Date(lastEventTime) : undefined}\r\n          connect={connect}\r\n          disconnect={disconnect}\r\n        />\r\n        <CardContent>\r\n          {connectionError !== undefined && (\r\n            <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md\">\r\n              <p className=\"text-sm text-red-600\">{connectionError}</p>\r\n            </div>\r\n          )}\r\n          <SystemMetricsGrid\r\n            metrics={systemMetrics}\r\n          />\r\n          <ScrapingJobsStatus scrapingJobs={scrapingJobs} />\r\n          <SystemAlerts\r\n            alerts={alerts}\r\n            showDetails={showDetails}\r\n            onToggleDetails={onToggleDetails}\r\n            onAcknowledgeAlert={onAcknowledgeAlert}\r\n          />\r\n          <EventControls\r\n            recentEventsCount={recentEventsCount}\r\n            onClearEvents={onClearEvents}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ScrapingJobsStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\StatusHelpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlertItem.tsx","messages":[{"ruleId":"unicorn/consistent-function-scoping","severity":2,"message":"Move arrow function 'getAlertClasses' to the outer scope.","line":14,"column":91,"nodeType":"ArrowFunctionExpression","messageId":"consistent-function-scoping","endLine":14,"endColumn":93}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { type SystemAlert } from './StatusHelpers';\r\n\r\ninterface SystemAlertItemProps {\r\n  readonly alert: SystemAlert;\r\n  readonly onAcknowledgeAlert: (id: string) => void;\r\n}\r\n\r\nexport function SystemAlertItem({ alert, onAcknowledgeAlert }: Readonly<SystemAlertItemProps>) {\r\n  const getAlertClasses = (type: 'warning' | 'error' | 'critical', acknowledged: boolean) => {\r\n    if (acknowledged) {\r\n      return 'border-gray-300 bg-gray-50 text-gray-500';\r\n    }\r\n    switch (type) {\r\n      case 'warning': {\r\n        return 'border-yellow-500 bg-yellow-50 text-yellow-800';\r\n      }\r\n      case 'error': {\r\n        return 'border-red-500 bg-red-50 text-red-800';\r\n      }\r\n      case 'critical': {\r\n        return 'border-red-700 bg-red-100 text-red-900 font-bold';\r\n      }\r\n      default: {\r\n        return 'border-gray-300 bg-gray-50 text-gray-800';\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`p-2 rounded border-l-4 ${getAlertClasses(alert.type, alert.acknowledged)}`}>\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <Badge variant={alert.type === 'critical' ? 'destructive' : 'secondary'}>\r\n            {alert.type}\r\n          </Badge>\r\n          <span className=\"text-sm\">{alert.message}</span>\r\n        </div>\r\n        {alert.acknowledged !== true && (\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => onAcknowledgeAlert(alert.id)}\r\n          >\r\n            Acknowledge\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <p className=\"text-xs text-gray-500 mt-1\">\r\n        {new Date(alert.timestamp).toLocaleString()}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemMetricsGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":47,"nodeType":"Identifier","messageId":"unsafeCall","endLine":17,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":24,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":24,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":30,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":30,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { type StatusMetric } from './useSystemMetrics'; // Import StatusMetric type\r\nimport { getStatusColor, getStatusIcon, getTrendIcon } from './status-helpers'; // Import helper functions\r\n\r\ninterface SystemMetricsGridProps {\r\n  readonly metrics: StatusMetric[];\r\n}\r\n\r\nexport function SystemMetricsGrid({ metrics }: SystemMetricsGridProps) {\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n      {metrics.map((metric, index) => (\r\n        <div\r\n          key={index}\r\n          className={`p-3 rounded-lg border ${getStatusColor(metric.status)}`}\r\n        >\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n              {metric.icon}\r\n              <span className=\"text-sm font-medium\">{metric.label}</span>\r\n            </div>\r\n            {getStatusIcon(metric.status)}\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-lg font-bold\">\r\n              {metric.value}{metric.unit}\r\n            </span>\r\n            {getTrendIcon(metric.trend)}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemAlertsLogic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\users\\UserTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\AppHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\LoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MainContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MapSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckAccordionContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\login\\EmailFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapLoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapViewUpdater.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\TruckMarkers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\UserLocationMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\mapHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\ApiMonitoringDashboard.tsx","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":41,"column":37,"nodeType":"Literal","messageId":"error","endLine":41,"endColumn":41,"suggestions":[{"messageId":"replace","fix":{"range":[1579,1583],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\n\r\ninterface APIUsageData {\r\n  success: boolean;\r\n  data: Record<string, unknown>; // Changed from any to Record<string, unknown>\r\n  timestamp: string;\r\n}\r\n\r\nexport function ApiMonitoringDashboard() {\r\n  const [usage, setUsage] = useState<APIUsageData | undefined>(); // Changed null to undefined\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | undefined>(); // Changed null to undefined\r\n\r\n  useEffect(() => {\r\n    async function fetchUsage() {\r\n      setLoading(true);\r\n      setError(undefined); // Changed null to undefined\r\n      try {\r\n        const res = await fetch('/api/monitoring/api-usage');\r\n        if (!res.ok) throw new Error('Failed to fetch API usage');\r\n        const data = (await res.json()) as APIUsageData;\r\n        setUsage(data);\r\n      } catch (error_: unknown) {\r\n        const errorMessage = error_ instanceof Error ? error_.message : String(error_);\r\n        setError(errorMessage);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    void fetchUsage();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading API usage...</div>;\r\n  if (error !== undefined) return <div className=\"text-red-600\">Error: {error}</div>;\r\n  if (usage === undefined) return <div>No data available.</div>;\r\n\r\n  return (\r\n    <div className=\"mt-4 p-4 border rounded bg-muted\">\r\n      <h2 className=\"text-lg font-semibold mb-2\">API Usage Monitoring</h2>\r\n      <pre className=\"text-xs bg-background p-2 rounded overflow-x-auto\">\r\n        {JSON.stringify(usage.data, null, 2)}\r\n      </pre>\r\n      <div className=\"text-xs text-muted-foreground mt-2\">Last updated: {usage.timestamp}</div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\TechnicalDetailsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\AdvancedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\CuisineTypesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\DistanceSliderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\FilterToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\MainSearchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\QuickFiltersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchFilterContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchInputWithIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultCard.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'StageResultCard' has too many lines (83). Maximum allowed is 50.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":93,"endColumn":2},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":60,"column":44,"nodeType":"Literal","messageId":"error","endLine":60,"endColumn":48,"suggestions":[{"messageId":"replace","fix":{"range":[2019,2023],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":68,"column":52,"nodeType":"Literal","messageId":"error","endLine":68,"endColumn":56,"suggestions":[{"messageId":"replace","fix":{"range":[2382,2386],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":86,"column":48,"nodeType":"Literal","messageId":"error","endLine":86,"endColumn":52,"suggestions":[{"messageId":"replace","fix":{"range":[3030,3034],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { StageResult } from '@/lib/types';\r\n\r\ninterface StageResultCardProps {\r\n  readonly stageName: string;\r\n  readonly result?: StageResult;\r\n}\r\n\r\nexport function StageResultCard({ stageName, result }: Readonly<StageResultCardProps>) {\r\n  if (!result) return;\r\n\r\n  return (\r\n    <Card className=\"border-red-500\">\r\n      <CardHeader>\r\n        <CardTitle>{stageName}</CardTitle>\r\n        <CardDescription>\r\n          Status:{' '}\r\n          <span className={result.status === 'Success' ? 'text-green-500' : 'text-red-500'}>\r\n            {result.status}\r\n          </span>\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {result.error !== undefined && (\r\n          <p className=\"text-red-500\">\r\n            <strong>Error:</strong> {result.error}\r\n          </p>\r\n        )}\r\n        {result.details !== undefined && (\r\n          <p>\r\n            <strong>Details:</strong> {result.details}\r\n          </p>\r\n        )}\r\n        {result.prompt !== undefined && (\r\n          <div>\r\n            <strong>Prompt:</strong>\r\n            <Textarea\r\n              readOnly\r\n              value={result.prompt}\r\n              className=\"mt-1 h-32 bg-gray-50 dark:bg-slate-700\"\r\n            />\r\n          </div>\r\n        )}\r\n        {result.rawContent !== undefined && (\r\n          <div>\r\n            <strong>Raw Content (Firecrawl):</strong>\r\n            <Textarea\r\n              readOnly\r\n              value={result.rawContent}\r\n              className=\"mt-1 h-48 bg-gray-50 dark:bg-slate-700\"\r\n            />\r\n          </div>\r\n        )}\r\n        {result.data !== undefined && (\r\n          <div className=\"mt-2\">\r\n            <strong>Data Output:</strong>{' '}\r\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\r\n              {JSON.stringify(result.data, null, 2)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n        {result.preparedData !== undefined && (\r\n          <div className=\"mt-2\">\r\n            <strong>Data Prepared for Supabase:</strong>{' '}\r\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\r\n              {JSON.stringify(result.preparedData, null, 2)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n        {result.recordId !== undefined && (\r\n          <p>\r\n            <strong>Supabase Record id:</strong> {result.recordId}\r\n          </p>\r\n        )}\r\n        {result.tokensUsed !== undefined && (\r\n          <p>\r\n            <strong>Gemini Tokens Used:</strong> {result.tokensUsed}\r\n          </p>\r\n        )}\r\n        {result.metadata !== undefined && (\r\n          <div>\r\n            <strong>Metadata (Firecrawl):</strong>{' '}\r\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\r\n              {JSON.stringify(result.metadata, null, 2)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineForm.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'TestPipelineForm' has too many lines (73). Maximum allowed is 50.","line":23,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":95,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { FormEvent } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\n\r\ninterface TestPipelineFormProps {\r\n  readonly url: string;\r\n  readonly setUrl: (url: string) => void;\r\n  readonly rawText: string;\r\n  readonly setRawText: (text: string) => void;\r\n  readonly useRawText: boolean;\r\n  readonly setUseRawText: (use: boolean) => void;\r\n  readonly isDryRun: boolean;\r\n  readonly setIsDryRun: (isDry: boolean) => void;\r\n  readonly isLoading: boolean;\r\n  readonly onSubmit: (event: FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport function TestPipelineForm({\r\n  url, setUrl, rawText, setRawText, useRawText, setUseRawText,\r\n  isDryRun, setIsDryRun, isLoading, onSubmit\r\n}: Readonly<TestPipelineFormProps>) {\r\n  return (\r\n    <Card className=\"mb-6\">\r\n      <CardHeader>\r\n        <CardTitle>Test Data Pipeline</CardTitle>\r\n        <CardDescription>\r\n          Use this page to test the data scraping and processing pipeline with a specific url or\r\n          raw text.\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <form\r\n          onSubmit={(e) => {\r\n            onSubmit(e);\r\n          }}\r\n          className=\"space-y-6\"\r\n        >\r\n          <div>\r\n            <Label htmlFor=\"url-input\">url to Scrape</Label>\r\n            <Input\r\n              id=\"url-input\"\r\n              type=\"url\"\r\n              placeholder=\"https://example.com\"\r\n              value={url}\r\n              onChange={(e) => setUrl(e.target.value)}\r\n              disabled={useRawText || isLoading}\r\n              className=\"mt-1\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              id=\"use-raw-text-checkbox\"\r\n              checked={useRawText}\r\n              onCheckedChange={(checked: boolean) => setUseRawText(Boolean(checked))}\r\n              disabled={isLoading}\r\n            />\r\n            <Label htmlFor=\"use-raw-text-checkbox\">Use Raw Text Input Instead</Label>\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"raw-text-input\">Raw Text (Markdown/html)</Label>\r\n            <Textarea\r\n              id=\"raw-text-input\"\r\n              placeholder=\"Paste Markdown or html content here...\"\r\n              value={rawText}\r\n              onChange={(e) => setRawText(e.target.value)}\r\n              disabled={!useRawText || isLoading}\r\n              className=\"mt-1 h-40\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              id=\"dry-run-checkbox\"\r\n              checked={isDryRun}\r\n              onCheckedChange={(checked: boolean) => setIsDryRun(Boolean(checked))}\r\n              disabled={isLoading}\r\n            />\r\n            <Label htmlFor=\"dry-run-checkbox\">Dry Run (Do not save to Supabase)</Label>\r\n          </div>\r\n\r\n          <Button type=\"submit\" disabled={isLoading || (useRawText ? !rawText : !url)}>\r\n            {isLoading ? 'Testing...' : 'Run Test'}\r\n          </Button>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineSubmitHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestResultsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\ContactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\OperatingHoursSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\SocialMediaSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckAccordionItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedTruckId' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from '@/components/ui/accordion';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { TruckCard } from '@/components/TruckCard';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\n\r\ninterface TruckAccordionItemProps {\r\n  readonly truck: FoodTruck;\r\n  readonly selectedTruckId: string | undefined;\r\n  readonly setSelectedTruckId: (id: string | undefined) => void;\r\n  readonly isOpen: (truck: FoodTruck) => boolean;\r\n  readonly userLocation: { lat: number; lng: number } | undefined;\r\n}\r\n\r\nexport function TruckAccordionItem({\r\n  truck,\r\n  selectedTruckId,\r\n  setSelectedTruckId,\r\n  isOpen,\r\n  userLocation,\r\n}: TruckAccordionItemProps) {\r\n  return (\r\n    <AccordionItem value={truck.id} key={truck.id}>\r\n      <AccordionTrigger className=\"flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-slate-700 rounded-md\">\r\n        <div className=\"flex-1 text-left\">\r\n          <h4 className=\"font-medium dark:text-gray-100\">{truck.name}</h4>\r\n          {truck.current_location?.address && (\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-1\">\r\n              {truck.current_location.address}\r\n            </p>\r\n          )}\r\n        </div>\r\n        <Badge variant={isOpen(truck) ? 'default' : 'secondary'}>\r\n          {isOpen(truck) ? 'Open' : 'Closed'}\r\n        </Badge>\r\n      </AccordionTrigger>\r\n      <AccordionContent>\r\n        <TruckCard\r\n          truck={truck}\r\n          isOpen={isOpen(truck)}\r\n          onSelectTruck={() => setSelectedTruckId(truck.id)}\r\n          userLocation={userLocation}\r\n          hideHeader={true}\r\n        />\r\n      </AccordionContent>\r\n    </AccordionItem>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckBasicInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPrice' is defined but never used.","line":9,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":34},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'formatPrice'.","line":9,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":9,"endColumn":34,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[422,435],"text":""},"desc":"Remove this variable import"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\nimport { RatingSection } from './RatingSection';\r\nimport { MenuSection } from './MenuSection';\r\nimport { ContactSection } from './ContactSection';\r\nimport { SocialMediaSection } from './SocialMediaSection';\r\nimport { OperatingHoursSection } from './OperatingHoursSection';\r\nimport { formatHours, formatPrice } from '@/lib/utils/foodTruckHelpers';\r\n\r\ninterface TruckCardContentProps {\r\n  readonly truck: FoodTruck;\r\n  readonly todayHours?: { open: string; close: string; closed: boolean };\r\n  readonly popularItems: { name: string; price: number }[];\r\n}\r\n\r\nexport function TruckCardContent({\r\n  truck,\r\n  todayHours,\r\n  popularItems,\r\n}: TruckCardContentProps) {\r\n  return (\r\n    <>\r\n      {truck.description && (\r\n        <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">{truck.description}</p>\r\n      )}\r\n      <div className=\"space-y-4\">\r\n        {/* Ratings & Hours Row */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <RatingSection averageRating={truck.average_rating} reviewCount={truck.review_count} />\r\n          <OperatingHoursSection todayHours={todayHours} formatHours={formatHours} />\r\n        </div>\r\n\r\n        {/* Menu & Contact Row */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <MenuSection popularItems={popularItems} />\r\n          <ContactSection contactInfo={truck.contact_info} verificationStatus={truck.verification_status} />\r\n        </div>\r\n\r\n        <SocialMediaSection socialMedia={truck.social_media} />\r\n      </div>\r\n      {truck.verification_status && (\r\n        <div className=\"mt-2\">\r\n          <Badge variant={truck.verification_status === 'verified' ? 'default' : 'secondary'}>\r\n            <span className=\"capitalize\">{truck.verification_status}</span>\r\n          </Badge>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardHeader.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":35,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":35,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1358,1369],"text":"item.price == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1359,1369],"text":"(item.price ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1358,1369],"text":"!Boolean(item.price)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":35,"column":57,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":35,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1374,1384],"text":"(priceRange != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1374,1384],"text":"(priceRange ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1374,1384],"text":"(Boolean(priceRange))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { MapPin } from 'lucide-react';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\n\r\ninterface TruckCardHeaderProps {\r\n  readonly truck: FoodTruck;\r\n  readonly isOpen: boolean;\r\n  readonly popularItems: Array<{ name: string; price?: number }>;\r\n  readonly priceRange: string | undefined;\r\n}\r\n\r\nexport function TruckCardHeader({\r\n  truck,\r\n  isOpen,\r\n  popularItems,\r\n  priceRange\r\n}: TruckCardHeaderProps) {\r\n  return (\r\n    <CardHeader>\r\n      <div className=\"flex justify-between items-start\">\r\n        <div className=\"flex-1\">\r\n          <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\r\n          {(truck.current_location?.address != undefined) && (\r\n            <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\r\n              <MapPin className=\"h-4 w-4 mr-1\" />\r\n              {truck.current_location.address}\r\n            </CardDescription>\r\n          )}\r\n        </div>\r\n        <div className=\"flex flex-col items-end space-y-1\">\r\n          <Badge variant={isOpen ? 'default' : 'secondary'}>{isOpen ? 'Open' : 'Closed'}</Badge>\r\n          {/* Show price range fallback if no explicit prices */}\r\n          {popularItems.every((item) => !item.price) && priceRange && (\r\n            <Badge variant=\"outline\" className=\"mt-1\">\r\n              {priceRange}\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </CardHeader>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckContactInfo.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":23,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":22,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[398,539],"text":"Readonly<{\r\n  icon: React.ComponentType<{ className?: string }>;\r\n  label: string;\r\n  value?: string;\r\n  href?: string;\r\n  unavailableText: string;\r\n}>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":37,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":37,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1005,1009],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1005,1009],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1005,1009],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":54,"column":27,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":54,"endColumn":84,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[1594,1634],"text":"Readonly<{ socialMedia?: Record<string, string> }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":106,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":106,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3506,3531],"text":"((truck.contact_info?.phone) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3506,3531],"text":"((truck.contact_info?.phone) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3506,3531],"text":"(Boolean((truck.contact_info?.phone)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":114,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":114,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3783,3808],"text":"((truck.contact_info?.email) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3783,3808],"text":"((truck.contact_info?.email) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3783,3808],"text":"(Boolean((truck.contact_info?.email)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Phone, Mail, Globe } from 'lucide-react';\r\nimport type { FoodTruck } from '@/lib/supabase';\r\n\r\ninterface TruckContactInfoProps {\r\n  readonly truck: FoodTruck;\r\n}\r\n\r\nfunction ContactField({ \r\n  icon: Icon, \r\n  label, \r\n  value, \r\n  href, \r\n  unavailableText \r\n}: {\r\n  icon: React.ComponentType<{ className?: string }>;\r\n  label: string;\r\n  value?: string;\r\n  href?: string;\r\n  unavailableText: string;\r\n}) {\r\n  if (value == undefined) {\r\n    return (\r\n      <div className=\"flex items-center gap-3 text-gray-400\">\r\n        <Icon className=\"h-4 w-4\" />\r\n        <span className=\"text-sm\">{unavailableText}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-3\">\r\n      <Icon className=\"h-4 w-4 text-gray-500\" />\r\n      <div>\r\n        <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{label}</label>\r\n        {href ? (\r\n          <a \r\n            href={href}\r\n            target={href.startsWith('http') ? '_blank' : undefined}\r\n            rel={href.startsWith('http') ? 'noopener noreferrer' : undefined}\r\n            className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline\"\r\n          >\r\n            {href.startsWith('http') ? 'Visit Website' : value}\r\n          </a>\r\n        ) : (\r\n          <p className=\"text-gray-900 dark:text-gray-200\">{value}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SocialMediaLinks({ socialMedia }: { socialMedia?: Record<string, string> }) {\r\n  if (!socialMedia || Object.keys(socialMedia).length === 0) {\r\n    \r\n  }\r\n\r\n  const socialPlatforms = [\r\n    { key: 'instagram', name: 'Instagram', baseUrl: 'https://instagram.com/', color: 'pink' },\r\n    { key: 'facebook', name: 'Facebook', baseUrl: 'https://facebook.com/', color: 'blue' },\r\n    { key: 'twitter', name: 'Twitter', baseUrl: 'https://twitter.com/', color: 'sky' },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Social Media</label>\r\n      <div className=\"flex flex-wrap gap-2 mt-2\">\r\n        {socialPlatforms.map(({ key, name, baseUrl, color }) => {\r\n          const handle = socialMedia[key];\r\n          if (handle == undefined) return;\r\n\r\n          return (\r\n            <a\r\n              key={key}\r\n              href={`${baseUrl}${handle}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className={`flex items-center gap-1 px-2 py-1 bg-${color}-100 text-${color}-800 rounded-md text-sm hover:bg-${color}-200 dark:bg-${color}-900 dark:text-${color}-200`}\r\n            >\r\n              <Globe className=\"h-3 w-3\" />\r\n              {name}\r\n            </a>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TruckContactInfo({ truck }: TruckContactInfoProps) {\r\n  return (\r\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n          <Phone className=\"h-5 w-5\" />\r\n          Contact Information\r\n        </CardTitle>\r\n        <CardDescription className=\"dark:text-gray-400\">Get in touch</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <ContactField\r\n          icon={Phone}\r\n          label=\"Phone\"\r\n          value={truck.contact_info?.phone}\r\n          href={truck.contact_info?.phone ? `tel:${truck.contact_info.phone}` : undefined}\r\n          unavailableText=\"No phone number available\"\r\n        />\r\n\r\n        <ContactField\r\n          icon={Mail}\r\n          label=\"Email\"\r\n          value={truck.contact_info?.email}\r\n          href={truck.contact_info?.email ? `mailto:${truck.contact_info.email}` : undefined}\r\n          unavailableText=\"No email available\"\r\n        />\r\n\r\n        <ContactField\r\n          icon={Globe}\r\n          label=\"Website\"\r\n          value={truck.contact_info?.website}\r\n          href={truck.contact_info?.website}\r\n          unavailableText=\"No website available\"\r\n        />\r\n\r\n        <SocialMediaLinks socialMedia={truck.social_media} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckLocationInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckOperatingHours.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":16,"column":22,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":16,"endColumn":74,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[414,448],"text":"Readonly<{ day: string; dayData?: DayData }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":43,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":43,"endColumn":27,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1565,1582],"text":"(hasOperatingHours ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1565,1582],"text":"(hasOperatingHours === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Clock } from 'lucide-react';\r\nimport type { FoodTruck } from '@/lib/supabase';\r\n\r\ninterface TruckOperatingHoursProps {\r\n  readonly truck: FoodTruck;\r\n}\r\n\r\ninterface DayData {\r\n  closed?: boolean;\r\n  open?: string;\r\n  close?: string;\r\n}\r\n\r\nfunction DaySchedule({ day, dayData }: { day: string; dayData?: DayData }) {\r\n  const dayName = day.charAt(0).toUpperCase() + day.slice(1);\r\n  \r\n  return (\r\n    <div className=\"flex justify-between items-center\">\r\n      <span className=\"text-sm font-medium dark:text-gray-200\">{dayName}</span>\r\n      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n        {dayData?.closed === true ? 'Closed' : `${dayData?.open ?? 'N/A'} - ${dayData?.close ?? 'N/A'}`}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TruckOperatingHours({ truck }: TruckOperatingHoursProps) {\r\n  const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\r\n  const hasOperatingHours = truck.operating_hours && Object.keys(truck.operating_hours).length > 0;\r\n\r\n  return (\r\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n          <Clock className=\"h-5 w-5\" />\r\n          Operating Hours\r\n        </CardTitle>\r\n        <CardDescription className=\"dark:text-gray-400\">Daily schedule</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {hasOperatingHours ? (\r\n          <div className=\"space-y-2\">\r\n            {daysOfWeek.map((day) => {\r\n              const dayData = truck.operating_hours?.[day as keyof typeof truck.operating_hours] as DayData | undefined;\r\n              return (\r\n                <DaySchedule key={day} day={day} dayData={dayData} />\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-gray-400 text-sm\">Operating hours not available</p>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckRatingsReviews.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":21,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":51,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[364,382],"text":"Readonly<{ rating: number }>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Star, Users } from 'lucide-react';\r\nimport type { FoodTruckWithRatings } from '@/hooks/useFoodTruckDetails';\r\n\r\ninterface TruckRatingsReviewsProps {\r\n  readonly truck: FoodTruckWithRatings;\r\n}\r\n\r\nfunction StarRating({ rating }: { rating: number }) {\r\n  return (\r\n    <div className=\"flex\">\r\n      {[1, 2, 3, 4, 5].map((star) => (\r\n        <Star\r\n          key={star}\r\n          className={`h-6 w-6 ${\r\n            star <= Math.round(rating)\r\n              ? 'text-yellow-400 fill-current'\r\n              : 'text-gray-300'\r\n          }`}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TruckRatingsReviews({ truck }: TruckRatingsReviewsProps) {\r\n  if (truck.average_rating == undefined) {\r\n    \r\n  }\r\n\r\n  return (\r\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n          <Star className=\"h-5 w-5\" />\r\n          Ratings & Reviews\r\n        </CardTitle>\r\n        <CardDescription className=\"dark:text-gray-400\">Customer feedback</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <StarRating rating={truck.average_rating} />\r\n            <span className=\"text-xl font-semibold dark:text-gray-100\">\r\n              {truck.average_rating.toFixed(1)}\r\n            </span>\r\n          </div>\r\n          {truck.review_count != undefined && (\r\n            <div className=\"flex items-center gap-1 text-gray-600 dark:text-gray-400\">\r\n              <Users className=\"h-4 w-4\" />\r\n              <span className=\"text-sm\">{truck.review_count} reviews</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\NavigationMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ToggleGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseToast.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":65,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":119,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from 'react';\r\n\r\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\r\n\r\nconst TOAST_LIMIT = 1;\r\nconst TOAST_REMOVE_DELAY = 1_000_000;\r\n\r\ntype ToasterToast = ToastProps & {\r\n  id: string;\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  action?: ToastActionElement;\r\n};\r\n\r\nlet count = 0;\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\r\n  return count.toString();\r\n}\r\n\r\ntype Action =\r\n  | {\r\n      type: 'ADD_TOAST';\r\n      toast: ToasterToast;\r\n    }\r\n  | {\r\n      type: 'UPDATE_TOAST';\r\n      toast: Partial<ToasterToast>;\r\n    }\r\n  | {\r\n      type: 'DISMISS_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    }\r\n  | {\r\n      type: 'REMOVE_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    };\r\n\r\ninterface State {\r\n  toasts: ToasterToast[];\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return;\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId);\r\n    dispatch({\r\n      type: 'REMOVE_TOAST',\r\n      toastId: toastId,\r\n    });\r\n  }, TOAST_REMOVE_DELAY);\r\n\r\n  toastTimeouts.set(toastId, timeout);\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'ADD_TOAST': {\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_TOAST': {\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\r\n      };\r\n    }\r\n\r\n    case 'DISMISS_TOAST': {\r\n      const { toastId } = action;\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId != undefined && toastId !== '') {\r\n        addToRemoveQueue(toastId);\r\n      } else {\r\n        for (const toast of state.toasts) {\r\n          addToRemoveQueue(toast.id);\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t,\r\n        ),\r\n      };\r\n    }\r\n    case 'REMOVE_TOAST': {\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst listeners: Array<(state: State) => void> = [];\r\n\r\nlet memoryState: State = { toasts: [] };\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action);\r\n  for (const listener of listeners) {\r\n    listener(memoryState);\r\n  }\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, 'id'>;\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId();\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: 'UPDATE_TOAST',\r\n      toast: { ...props, id },\r\n    });\r\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\r\n\r\n  dispatch({\r\n    type: 'ADD_TOAST',\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open: boolean) => {\r\n        if (!open) dismiss();\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  };\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState);\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState);\r\n    return () => {\r\n      const index = listeners.indexOf(setState);\r\n      if (index !== -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\r\n  };\r\n}\r\n\r\nexport { useToast, toast };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":15,"column":9,"nodeType":null,"messageId":"deprecation","endLine":15,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\carousel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (91). Maximum allowed is 50.","line":48,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":138,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport * as React from 'react';\r\n// @ts-expect-error TS(2792): Cannot find module 'embla-carousel-react'. Did you... Remove this comment to see the full error message\r\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { Button } from '@/components/ui/button';\r\n\r\ntype CarouselApi = UseEmblaCarouselType[1];\r\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\r\ntype CarouselOptions = UseCarouselParameters[0];\r\ntype CarouselPlugin = UseCarouselParameters[1];\r\n\r\ntype CarouselProps = {\r\n  opts?: CarouselOptions;\r\n  plugins?: CarouselPlugin;\r\n  orientation?: 'horizontal' | 'vertical';\r\n  setApi?: (api: CarouselApi) => void;\r\n};\r\n\r\ntype CarouselContextProps = {\r\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\r\n  api: ReturnType<typeof useEmblaCarousel>[1];\r\n  scrollPrev: () => void;\r\n  scrollNext: () => void;\r\n  canScrollPrev: boolean;\r\n  canScrollNext: boolean;\r\n} & CarouselProps;\r\n\r\nconst CarouselContext = React.createContext<CarouselContextProps | undefined>(undefined);\r\n\r\nfunction useCarousel() {\r\n  const context = React.useContext(CarouselContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useCarousel must be used within a <Carousel />');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst Carousel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\r\n>(({ orientation = 'horizontal', opts, setApi, plugins, className, children, ...props }, ref) => {\r\n  const [carouselRef, api] = useEmblaCarousel(\r\n    {\r\n      // @ts-expect-error TS(2698): Spread types may only be created from object types... Remove this comment to see the full error message\r\n      ...opts,\r\n      axis: orientation === 'horizontal' ? 'x' : 'y',\r\n    },\r\n    plugins,\r\n  );\r\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false);\r\n  const [canScrollNext, setCanScrollNext] = React.useState(false);\r\n\r\n  const onSelect = React.useCallback((api: CarouselApi) => {\r\n    if (!api) {\r\n      \r\n    }\r\n\r\n    setCanScrollPrev(api.canScrollPrev());\r\n    setCanScrollNext(api.canScrollNext());\r\n  }, []);\r\n\r\n  const scrollPrev = React.useCallback(() => {\r\n    api?.scrollPrev();\r\n  }, [api]);\r\n\r\n  const scrollNext = React.useCallback(() => {\r\n    api?.scrollNext();\r\n  }, [api]);\r\n\r\n  const handleKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n      if (event.key === 'ArrowLeft') {\r\n        event.preventDefault();\r\n        scrollPrev();\r\n      } else if (event.key === 'ArrowRight') {\r\n        event.preventDefault();\r\n        scrollNext();\r\n      }\r\n    },\r\n    [scrollPrev, scrollNext],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (!api || !setApi) {\r\n      \r\n    }\r\n\r\n    setApi(api);\r\n  }, [api, setApi]);\r\n\r\n  React.useEffect(() => {\r\n    if (!api) {\r\n      \r\n    }\r\n\r\n    onSelect(api);\r\n    api.on('reInit', onSelect);\r\n    api.on('select', onSelect);\r\n\r\n    return () => {\r\n      api?.off('select', onSelect);\r\n    };\r\n  }, [api, onSelect]);\r\n\r\n  return (\r\n    <CarouselContext.Provider\r\n      value={{\r\n        carouselRef,\r\n        api: api,\r\n        opts,\r\n        // @ts-expect-error TS(2571): Object is of type 'unknown'.\r\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\r\n        scrollPrev,\r\n        scrollNext,\r\n        canScrollPrev,\r\n        canScrollNext,\r\n      }}\r\n    >\r\n      <div\r\n        ref={ref}\r\n        onKeyDownCapture={handleKeyDown}\r\n        className={cn('relative', className)}\r\n        role=\"region\"\r\n        aria-roledescription=\"carousel\"\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    </CarouselContext.Provider>\r\n  );\r\n});\r\nCarousel.displayName = 'Carousel';\r\n\r\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\r\n  ({ className, ...props }, ref) => {\r\n    const { carouselRef, orientation } = useCarousel();\r\n\r\n    return (\r\n      <div ref={carouselRef} className=\"overflow-hidden\">\r\n        <div\r\n          ref={ref}\r\n          className={cn(\r\n            'flex',\r\n            orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\r\n            className,\r\n          )}\r\n          {...props}\r\n        />\r\n      </div>\r\n    );\r\n  },\r\n);\r\nCarouselContent.displayName = 'CarouselContent';\r\n\r\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\r\n  ({ className, ...props }, ref) => {\r\n    const { orientation } = useCarousel();\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        role=\"group\"\r\n        aria-roledescription=\"slide\"\r\n        className={cn(\r\n          'min-w-0 shrink-0 grow-0 basis-full',\r\n          orientation === 'horizontal' ? 'pl-4' : 'pt-4',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nCarouselItem.displayName = 'CarouselItem';\r\n\r\nconst CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\r\n  // @ts-expect-error TS(2339): Property 'variant' does not exist on type 'Omit<Bu... Remove this comment to see the full error message\r\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\r\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; defaultChecked?: bool... Remove this comment to see the full error message\r\n        variant={variant}\r\n        size={size}\r\n        className={cn(\r\n          'absolute  h-8 w-8 rounded-full',\r\n          orientation === 'horizontal'\r\n            ? '-left-12 top-1/2 -translate-y-1/2'\r\n            : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\r\n          className,\r\n        )}\r\n        disabled={!canScrollPrev}\r\n        onClick={scrollPrev}\r\n        {...props}\r\n      >\r\n        <ArrowLeft className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Previous slide</span>\r\n      </Button>\r\n    );\r\n  },\r\n);\r\nCarouselPrevious.displayName = 'CarouselPrevious';\r\n\r\nconst CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\r\n  // @ts-expect-error TS(2339): Property 'variant' does not exist on type 'Omit<Bu... Remove this comment to see the full error message\r\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\r\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; defaultChecked?: bool... Remove this comment to see the full error message\r\n        variant={variant}\r\n        size={size}\r\n        className={cn(\r\n          'absolute h-8 w-8 rounded-full',\r\n          orientation === 'horizontal'\r\n            ? '-right-12 top-1/2 -translate-y-1/2'\r\n            : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\r\n          className,\r\n        )}\r\n        disabled={!canScrollNext}\r\n        onClick={scrollNext}\r\n        {...props}\r\n      >\r\n        <ArrowRight className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Next slide</span>\r\n      </Button>\r\n    );\r\n  },\r\n);\r\nCarouselNext.displayName = 'CarouselNext';\r\n\r\nexport {\r\n  type CarouselApi,\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselPrevious,\r\n  CarouselNext,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (101). Maximum allowed is 50.","line":116,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":216,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":151,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":151,"endColumn":16,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[4670,4676],"text":"(active ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[4669,4676],"text":"(active === false)"},"desc":"Change condition to check if false (`value === false`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":151,"column":21,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":151,"endColumn":32},{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":202,"column":44,"nodeType":"TSFunctionType","messageId":"exceed","endLine":202,"endColumn":44},{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":229,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":283,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":236,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":236,"endColumn":19}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as RechartsPrimitive from 'recharts';\r\nimport {\r\n  NameType,\r\n  Payload,\r\n  ValueType,\r\n} from 'recharts/types/component/DefaultTooltipContent';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { useTooltipLabel } from './chart/useTooltipLabel';\r\nimport { TooltipIndicator } from './chart/TooltipIndicator';\r\nimport { TooltipItemContent } from './chart/TooltipItemContent';\r\nimport { getPayloadConfigFromPayload } from './chart/getPayloadConfigFromPayload';\r\n\r\n// Format: { THEME_NAME: CSS_SELECTOR }\r\nconst THEMES = { light: '', dark: '.dark' } as const;\r\n\r\nexport type ChartConfig = {\r\n  [k in string]: {\r\n    label?: React.ReactNode;\r\n    icon?: React.ComponentType;\r\n  } & (\r\n    | { color?: string; theme?: never }\r\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\r\n  );\r\n};\r\n\r\ntype ChartContextProps = {\r\n  config: ChartConfig;\r\n};\r\n\r\nconst ChartContext = React.createContext<ChartContextProps | undefined>(undefined);\r\n\r\nfunction useChart() {\r\n  const context = React.useContext(ChartContext);\r\n\r\n  if (context === undefined) {\r\n    throw new Error('useChart must be used within a <ChartContainer />');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst ChartContainer = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & {\r\n    readonly config: ChartConfig;\r\n    readonly children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\r\n  }\r\n>(({ id, className, children, config, ...props }, ref) => {\r\n  const uniqueId = React.useId();\r\n  const chartId = `chart-${id ?? uniqueId.replaceAll(':', '')}`;\r\n\r\n  return (\r\n    <ChartContext.Provider value={{ config }}>\r\n      <div\r\n        data-chart={chartId}\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        <ChartStyle id={chartId} config={config} />\r\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\r\n      </div>\r\n    </ChartContext.Provider>\r\n  );\r\n});\r\nChartContainer.displayName = 'Chart';\r\n\r\nconst ChartStyle = ({ id, config }: { readonly id: string; readonly config: ChartConfig }) => {\r\n  const colorConfig = Object.entries(config).filter(([_, itemConfig]) => (itemConfig.theme ?? itemConfig.color) !== undefined);\r\n  if (colorConfig.length === 0) {\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <style\r\n      dangerouslySetInnerHTML={{\r\n        __html: Object.entries(THEMES)\r\n          .map(\r\n            ([theme, prefix]) => `\r\n${prefix} [data-chart=${id}] {\r\n${colorConfig\r\n  .map(([key, itemConfig]) => {\r\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ?? itemConfig.color;\r\n    return color !== undefined && color !== '' ? `  --color-${key}: ${color};` : undefined;\r\n  })\r\n  .join('\\n')}\r\n}\r\n`,\r\n          )\r\n          .join('\\n'),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ChartTooltip = RechartsPrimitive.Tooltip;\r\n\r\nconst ChartTooltipContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\r\n    React.ComponentProps<'div'> & {\r\n      readonly hideLabel?: boolean;\r\n      readonly hideIndicator?: boolean;\r\n      readonly indicator?: 'line' | 'dot' | 'dashed';\r\n      readonly nameKey?: string;\r\n      readonly labelKey?: string;\r\n    }\r\n>(\r\n  (\r\n    {\r\n      active,\r\n      payload,\r\n      className,\r\n      indicator = 'dot',\r\n      hideLabel = false,\r\n      hideIndicator = false,\r\n      label,\r\n      labelFormatter,\r\n      labelClassName,\r\n      formatter,\r\n      color,\r\n      nameKey,\r\n      labelKey,\r\n    },\r\n    ref,\r\n  ) => {\r\n    const { config } = useChart();\r\n\r\n    // Ensure payload is properly typed\r\n    const safePayload: Payload<ValueType, NameType>[] = Array.isArray(payload)\r\n      ? (payload)\r\n      : [];\r\n\r\n    const tooltipLabel = useTooltipLabel({\r\n      hideLabel,\r\n      payload: safePayload,\r\n      label,\r\n      labelFormatter,\r\n      labelClassName,\r\n      config,\r\n      labelKey\r\n    });\r\n\r\n    if (!active || !safePayload || safePayload.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const nestLabel = safePayload.length === 1 && indicator !== 'dot';\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\r\n          className,\r\n        )}\r\n      >\r\n        {nestLabel ? undefined : tooltipLabel}\r\n        <div className=\"grid gap-1.5\">\r\n          {safePayload.map((item, index) => {\r\n            // Add explicit type for itemData\r\n            const dataKey = typeof item.dataKey === 'string' ? item.dataKey : undefined;\r\n            const itemData: { name?: string; dataKey?: string; payload?: Record<string, unknown>; color?: string; value?: number } = {\r\n              name: item.name === undefined ? undefined : String(item.name),\r\n              dataKey,\r\n              payload: typeof item.payload === 'object' && item.payload !== null ? (item.payload as Record<string, unknown>) : undefined,\r\n              color: typeof item.color === 'string' ? item.color : undefined,\r\n              value: typeof item.value === 'number' ? item.value : undefined,\r\n            };\r\n            const key = nameKey ?? itemData.name ?? itemData.dataKey ?? 'value';\r\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n            const indicatorColor =\r\n              color ??\r\n              (itemData.payload && typeof itemData.payload === 'object' && 'fill' in itemData.payload\r\n                ? String(itemData.payload.fill)\r\n                : undefined) ??\r\n              itemData.color;\r\n\r\n            return (\r\n              <div\r\n                key={itemData.dataKey ?? index}\r\n                className={cn(\r\n                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\r\n                  indicator === 'dot' && 'items-center',\r\n                )}\r\n              >\r\n                <TooltipIndicator\r\n                  indicator={indicator}\r\n                  hideIndicator={hideIndicator}\r\n                  indicatorColor={indicatorColor}\r\n                  nestLabel={nestLabel}\r\n                  itemConfig={itemConfig}\r\n                />\r\n                <TooltipItemContent\r\n                  formatter={formatter as ((value: number, name: string, item: unknown, index: number, payload: Record<string, unknown>[]) => React.ReactNode) | undefined}\r\n                  itemData={itemData}\r\n                  item={item}\r\n                  index={index}\r\n                  itemConfig={itemConfig}\r\n                  nestLabel={nestLabel}\r\n                  tooltipLabel={tooltipLabel}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nChartTooltipContent.displayName = 'ChartTooltip';\r\n\r\nconst ChartLegend = RechartsPrimitive.Legend;\r\n\r\nconst ChartLegendContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof RechartsPrimitive.Legend> &\r\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\r\n      hideIcon?: boolean;\r\n      nameKey?: string;\r\n    }\r\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\r\n  const { config } = useChart();\r\n\r\n  const safePayload: Payload<ValueType, NameType>[] = Array.isArray(payload)\r\n    ? (payload as Payload<ValueType, NameType>[])\r\n    : [];\r\n\r\n  if (!safePayload || safePayload.length === 0) {\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={cn(\r\n        'flex items-center justify-center gap-4',\r\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\r\n        className,\r\n      )}\r\n    >\r\n      {safePayload.map((item, idx) => {\r\n        const dataKey = typeof item.dataKey === 'string' ? item.dataKey : undefined;\r\n        const itemData: { dataKey?: string; value?: string; color?: string } = {\r\n          dataKey,\r\n          value: typeof item.value === 'string' ? item.value : undefined,\r\n          color: typeof item.color === 'string' ? item.color : undefined,\r\n        };\r\n        const keyValue = nameKey ?? (itemData.dataKey !== undefined && itemData.dataKey !== '' ? String(itemData.dataKey) : 'value');\r\n        const key = keyValue;\r\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n\r\n        return (\r\n          <div\r\n            key={itemData.value ?? idx}\r\n            className={cn(\r\n              'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground',\r\n            )}\r\n          >\r\n            {itemConfig?.icon && !hideIcon ? (\r\n              <itemConfig.icon />\r\n            ) : (\r\n              <div\r\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\r\n                style={{\r\n                  backgroundColor: itemData.color !== undefined && itemData.color !== '' ? String(itemData.color) : undefined,\r\n                }}\r\n              />\r\n            )}\r\n            {itemConfig?.label}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n});\r\nChartLegendContent.displayName = 'ChartLegend';\r\n\r\nexport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n  ChartLegend,\r\n  ChartLegendContent,\r\n  ChartStyle,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\QualityPieChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ArrayLike<unknown> | { [s: string]: unknown; }`.","line":37,"column":35,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":37,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { QUALITY_COLORS } from '../dataQualityCharts';\r\nimport { CustomTooltip } from '../dataQualityCharts';\r\n\r\ninterface QualityPieChartProps {\r\n  readonly data: {\r\n    name: string;\r\n    value: number;\r\n    percentage: string;\r\n  }[];\r\n}\r\n\r\nexport function QualityPieChart({ data }: QualityPieChartProps) {\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={300}>\r\n      <PieChart>\r\n        <Pie\r\n          data={data}\r\n          cx=\"50%\"\r\n          cy=\"50%\"\r\n          labelLine={false}\r\n          label={({\r\n            name,\r\n            percentage\r\n          }: {\r\n            name?: string;\r\n            percentage?: string;\r\n          }) => `${name ?? 'Unknown'}: ${percentage ?? '0'}%`}\r\n          outerRadius={80}\r\n          fill=\"#8884d8\"\r\n          dataKey=\"value\"\r\n        >\r\n          {data.map((entry, index) => (\r\n            <Cell \r\n              key={`cell-${index}`} \r\n              fill={Object.values(QUALITY_COLORS)[index]} \r\n            />\r\n          ))}\r\n        </Pie>\r\n        <Tooltip content={<CustomTooltip />} />\r\n      </PieChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipItemContent.tsx","messages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":5,"column":24,"nodeType":"TSFunctionType","messageId":"exceed","endLine":5,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface TooltipItemContentProps {\r\n  readonly formatter?: (value: number, name: string, item: unknown, index: number, payload: Record<string, unknown>[]) => React.ReactNode;\r\n  readonly itemData: { name?: string; dataKey?: string; payload?: unknown; color?: string; value?: number };\r\n  readonly item: unknown;\r\n  readonly index: number;\r\n  readonly itemConfig?: { label?: React.ReactNode };\r\n  readonly nestLabel: boolean;\r\n  readonly tooltipLabel: React.ReactNode;\r\n}\r\n\r\nexport function TooltipItemContent({\r\n  formatter,\r\n  itemData,\r\n  item,\r\n  index,\r\n  itemConfig,\r\n  nestLabel,\r\n  tooltipLabel\r\n}: TooltipItemContentProps) {\r\n  if (formatter !== undefined && itemData?.value !== undefined && itemData.name !== undefined && itemData.name !== '') {\r\n    const payloadArray = Array.isArray(itemData.payload)\r\n      ? (itemData.payload as Record<string, unknown>[])\r\n      : [];\r\n    return <>{formatter(itemData.value, itemData.name, item, index, payloadArray)}</>;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'flex flex-1 justify-between leading-none',\r\n        nestLabel ? 'items-end' : 'items-center',\r\n      )}\r\n    >\r\n      <div className=\"grid gap-1.5\">\r\n        {nestLabel ? tooltipLabel : undefined}\r\n        <span className=\"text-muted-foreground\">\r\n          {itemConfig?.label ?? itemData.name}\r\n        </span>\r\n      </div>\r\n      {itemData.value !== undefined && itemData.value !== 0 && (\r\n        <span className=\"font-mono font-medium tabular-nums text-foreground\">\r\n          {itemData.value.toLocaleString()}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\getPayloadConfigFromPayload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\useTooltipLabel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dataQualityCharts.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (60). Maximum allowed is 50.","line":70,"column":80,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":129,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n\r\n// SOTA color scheme for data quality categories\r\nconst QUALITY_COLORS = {\r\n  high: '#22c55e',    // Green for high quality (≥80%)\r\n  medium: '#f59e0b',  // Amber for medium quality (60-79%)\r\n  low: '#ef4444',     // Red for low quality (<60%)\r\n};\r\n\r\ninterface DataQualityStats {\r\n  total_trucks: number;\r\n  avg_quality_score: number;\r\n  high_quality_count: number;\r\n  medium_quality_count: number;\r\n  low_quality_count: number;\r\n  verified_count: number;\r\n  pending_count: number;\r\n  flagged_count: number;\r\n}\r\n\r\ninterface DataQualityChartsProps {\r\n  readonly qualityStats: DataQualityStats;\r\n}\r\n\r\n// Custom tooltip for better accessibility and UX\r\ninterface TooltipProps {\r\n  readonly active?: boolean;\r\n  readonly payload?: Array<{\r\n    value: number;\r\n    payload: {\r\n      percentage?: string;\r\n    };\r\n  }>;\r\n  readonly label?: string;\r\n}\r\n\r\nconst CustomTooltip = ({ active, payload, label }: TooltipProps) => {\r\n  if (active === true && payload != undefined && payload.length > 0) {\r\n    return (\r\n      <div\r\n        className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\"\r\n        role=\"status\"\r\n        aria-live=\"assertive\"\r\n      >\r\n        <p className=\"font-medium\">{`${label ?? 'Unknown'}: ${payload[0].value}`}</p>\r\n        <p className=\"text-sm text-gray-600\">\r\n          {payload[0].payload.percentage != undefined && payload[0].payload.percentage !== '' && `${payload[0].payload.percentage}% of total`}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n// Quality Distribution Pie Chart Component\r\nconst QualityDistributionChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\r\n  const data = [\r\n    {\r\n      name: 'High Quality',\r\n      value: qualityStats.high_quality_count,\r\n      percentage: ((qualityStats.high_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Medium Quality',\r\n      value: qualityStats.medium_quality_count,\r\n      percentage: ((qualityStats.medium_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Low Quality',\r\n      value: qualityStats.low_quality_count,\r\n      percentage: ((qualityStats.low_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Quality Distribution</CardTitle>\r\n        <CardDescription>\r\n          Breakdown of food trucks by data quality categories\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <PieChart>\r\n            <Pie\r\n              data={data}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              labelLine={false}\r\n              label={({\r\n                name,\r\n                percentage\r\n              }: {\r\n                name?: string;\r\n                percentage?: string;\r\n              }) => `${name ?? 'Unknown'}: ${percentage ?? '0'}%`}\r\n              outerRadius={80}\r\n              fill=\"#8884d8\"\r\n              dataKey=\"value\"\r\n            >\r\n              {data.map((entry, index) => (\r\n                <Cell \r\n                  key={`cell-${index}`} \r\n                  fill={Object.values(QUALITY_COLORS)[index]} \r\n                />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip content={<CustomTooltip />} />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Verification Status Bar Chart Component\r\nconst VerificationStatusChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\r\n  const data = [\r\n    {\r\n      name: 'Verified',\r\n      count: qualityStats.verified_count,\r\n      percentage: ((qualityStats.verified_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Pending',\r\n      count: qualityStats.pending_count,\r\n      percentage: ((qualityStats.pending_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Flagged',\r\n      count: qualityStats.flagged_count,\r\n      percentage: ((qualityStats.flagged_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Verification Status</CardTitle>\r\n        <CardDescription>\r\n          Current verification status of all food trucks\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip content={<CustomTooltip />} />\r\n            <Bar dataKey=\"count\" fill=\"#3b82f6\" />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Helper function to get score color\r\nconst getScoreColor = (score: number): string => {\r\n  if (score >= 0.8) return 'text-green-600';\r\n  if (score >= 0.6) return 'text-yellow-600';\r\n  return 'text-red-600';\r\n};\r\n\r\n// Helper function to get quality threshold label\r\nconst getQualityThreshold = (score: number): string => {\r\n  if (score >= 0.8) return 'High';\r\n  if (score >= 0.6) return 'Medium';\r\n  return 'Low';\r\n};\r\n\r\n// Quality Score Overview Component\r\nconst QualityScoreOverview: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\r\n  const averageScore = (qualityStats.avg_quality_score * 100).toFixed(1);\r\n  const scoreColor = getScoreColor(qualityStats.avg_quality_score);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Overall Quality Score</CardTitle>\r\n        <CardDescription>\r\n          Average data quality score across all food trucks\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className={`text-6xl font-bold ${scoreColor}`}>\r\n            {averageScore}%\r\n          </div>\r\n          <p className=\"text-sm text-muted-foreground mt-2\">\r\n            Based on {qualityStats.total_trucks} food trucks\r\n          </p>\r\n          <div className=\"mt-4 text-sm\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Quality Threshold:</span>\r\n              <span className=\"font-medium\">\r\n                {getQualityThreshold(qualityStats.avg_quality_score)}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Main Data Quality Charts Component\r\nexport const DataQualityCharts: React.FC<DataQualityChartsProps> = ({ qualityStats }) => {\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n      <QualityScoreOverview qualityStats={qualityStats} />\r\n      <QualityDistributionChart qualityStats={qualityStats} />\r\n      <VerificationStatusChart qualityStats={qualityStats} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataQualityCharts;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sheet.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VariantProps' is defined but never used.","line":7,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":32},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'VariantProps'.","line":7,"column":20,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":7,"endColumn":32,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[391,410],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":55,"column":26,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":55,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[2268,2270],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[2268,2270],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":63,"column":39,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ClassValue`.","line":63,"column":48,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":63,"endColumn":57}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport * as React from 'react';\r\n// @ts-expect-error TS(2792): Cannot find module '@radix-ui/react-dialog'. Did y... Remove this comment to see the full error message\r\nimport * as SheetPrimitive from '@radix-ui/react-dialog';\r\n// @ts-expect-error TS(2792): Cannot find module 'class-variance-authority'. Did... Remove this comment to see the full error message\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { X } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst Sheet = SheetPrimitive.Root;\r\n\r\nconst SheetTrigger = SheetPrimitive.Trigger;\r\n\r\nconst SheetClose = SheetPrimitive.Close;\r\n\r\nconst SheetPortal = SheetPrimitive.Portal;\r\n\r\nconst SheetOverlay = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <SheetPrimitive.Overlay\r\n    className={cn(\r\n      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\r\n      className,\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  />\r\n));\r\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\r\n\r\nconst sheetVariants = cva(\r\n  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\r\n  {\r\n    variants: {\r\n      side: {\r\n        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',\r\n        bottom:\r\n          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',\r\n        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',\r\n        right:\r\n          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      side: 'right',\r\n    },\r\n  },\r\n);\r\n\r\ntype SheetContentProps = {}\r\n\r\nconst SheetContent = React.forwardRef<HTMLDivElement, SheetContentProps>(\r\n  ({ side = 'right', className, children, ...props }, ref) => (\r\n    <SheetPortal>\r\n      <SheetOverlay />\r\n      <SheetPrimitive.Content\r\n        ref={ref}\r\n        className={cn(sheetVariants({ side }), className)}\r\n        {...props}\r\n      >\r\n        {children}\r\n        <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\r\n          <X className=\"h-4 w-4\" />\r\n          <span className=\"sr-only\">Close</span>\r\n        </SheetPrimitive.Close>\r\n      </SheetPrimitive.Content>\r\n    </SheetPortal>\r\n  ),\r\n);\r\nSheetContent.displayName = SheetPrimitive.Content.displayName;\r\n\r\nconst SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />\r\n);\r\nSheetHeader.displayName = 'SheetHeader';\r\n\r\nconst SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\r\n    {...props}\r\n  />\r\n);\r\nSheetFooter.displayName = 'SheetFooter';\r\n\r\nconst SheetTitle = React.forwardRef<\r\n  HTMLHeadingElement,\r\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <SheetPrimitive.Title\r\n    ref={ref}\r\n    className={cn('text-lg font-semibold text-foreground', className)}\r\n    {...props}\r\n  />\r\n));\r\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\r\n\r\nconst SheetDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <SheetPrimitive.Description\r\n    ref={ref}\r\n    className={cn('text-sm text-muted-foreground', className)}\r\n    {...props}\r\n  />\r\n));\r\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\r\n\r\nexport {\r\n  Sheet,\r\n  SheetPortal,\r\n  SheetOverlay,\r\n  SheetTrigger,\r\n  SheetClose,\r\n  SheetContent,\r\n  SheetHeader,\r\n  SheetFooter,\r\n  SheetTitle,\r\n  SheetDescription,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (96). Maximum allowed is 50.","line":57,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":152,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (92). Maximum allowed is 50.","line":164,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":255,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport * as React from 'react';\r\n// @ts-expect-error TS(2792): Cannot find module '@radix-ui/react-slot'. Did you... Remove this comment to see the full error message\r\nimport { Slot } from '@radix-ui/react-slot';\r\n// @ts-expect-error TS(2792): Cannot find module 'class-variance-authority'. Did... Remove this comment to see the full error message\r\nimport { VariantProps, cva } from 'class-variance-authority';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { PanelLeft } from 'lucide-react';\r\n\r\nimport { useIsMobile } from '@/hooks/UseMobile';\r\nimport { cn } from '@/lib/utils';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Sheet, SheetContent } from '@/components/ui/sheet';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst SIDEBAR_COOKIE_NAME = 'sidebar:state';\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\r\nconst SIDEBAR_WIDTH = '16rem';\r\nconst SIDEBAR_WIDTH_MOBILE = '18rem';\r\nconst SIDEBAR_WIDTH_ICON = '3rem';\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b';\r\n\r\ntype SidebarContext = {\r\n  state: 'expanded' | 'collapsed';\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  openMobile: boolean;\r\n  setOpenMobile: (open: boolean) => void;\r\n  isMobile: boolean;\r\n  toggleSidebar: () => void;\r\n};\r\n\r\nconst SidebarContext = React.createContext<SidebarContext | undefined>(undefined);\r\n\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext);\r\n  if (!context) {\r\n    throw new Error('useSidebar must be used within a SidebarProvider.');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst SidebarProvider = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & {\r\n    defaultOpen?: boolean;\r\n    open?: boolean;\r\n    onOpenChange?: (open: boolean) => void;\r\n  }\r\n>(\r\n  (\r\n    {\r\n      defaultOpen = true,\r\n      open: openProp,\r\n      onOpenChange: setOpenProp,\r\n      className,\r\n      style,\r\n      children,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const isMobile = useIsMobile();\r\n    const [openMobile, setOpenMobile] = React.useState(false);\r\n\r\n    // This is the internal state of the sidebar.\r\n    // We use openProp and setOpenProp for control from outside the component.\r\n    const [_open, _setOpen] = React.useState(defaultOpen);\r\n    const open = openProp ?? _open;\r\n    const setOpen = React.useCallback(\r\n      (value: boolean | ((value: boolean) => boolean)) => {\r\n        const openState = typeof value === 'function' ? value(open) : value;\r\n        if (setOpenProp) {\r\n          setOpenProp(openState);\r\n        } else {\r\n          _setOpen(openState);\r\n        }\r\n\r\n        // This sets the cookie to keep the sidebar state.\r\n        Cookies.set(SIDEBAR_COOKIE_NAME, String(openState), {\r\n          path: '/',\r\n          expires: SIDEBAR_COOKIE_MAX_AGE / (60 * 60 * 24), // Convert seconds to days\r\n        });\r\n      },\r\n      [setOpenProp, open],\r\n    );\r\n\r\n    // Helper to toggle the sidebar.\r\n    const toggleSidebar = React.useCallback(() => {\r\n      return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\r\n    }, [isMobile, setOpen, setOpenMobile]);\r\n\r\n    // Adds a keyboard shortcut to toggle the sidebar.\r\n    React.useEffect(() => {\r\n      const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\r\n          event.preventDefault();\r\n          toggleSidebar();\r\n        }\r\n      };\r\n\r\n      globalThis.addEventListener('keydown', handleKeyDown);\r\n      return () => globalThis.removeEventListener('keydown', handleKeyDown);\r\n    }, [toggleSidebar]);\r\n\r\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n    // This makes it easier to style the sidebar with Tailwind classes.\r\n    const state = open ? 'expanded' : 'collapsed';\r\n\r\n    const contextValue = React.useMemo<SidebarContext>(\r\n      () => ({\r\n        state,\r\n        open,\r\n        setOpen,\r\n        isMobile,\r\n        openMobile,\r\n        setOpenMobile,\r\n        toggleSidebar,\r\n      }),\r\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\r\n    );\r\n\r\n    return (\r\n      <SidebarContext.Provider value={contextValue}>\r\n        <TooltipProvider delayDuration={0}>\r\n          <div\r\n            style={\r\n              {\r\n                '--sidebar-width': SIDEBAR_WIDTH,\r\n                '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\r\n                ...style,\r\n              } as React.CSSProperties\r\n            }\r\n            className={cn(\r\n              'group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar',\r\n              className,\r\n            )}\r\n            ref={ref}\r\n            {...props}\r\n          >\r\n            {children}\r\n          </div>\r\n        </TooltipProvider>\r\n      </SidebarContext.Provider>\r\n    );\r\n  },\r\n);\r\nSidebarProvider.displayName = 'SidebarProvider';\r\n\r\nconst Sidebar = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & {\r\n    side?: 'left' | 'right';\r\n    variant?: 'sidebar' | 'floating' | 'inset';\r\n    collapsible?: 'offcanvas' | 'icon' | 'none';\r\n  }\r\n>(\r\n  (\r\n    {\r\n      side = 'left',\r\n      variant = 'sidebar',\r\n      collapsible = 'offcanvas',\r\n      className,\r\n      children,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\r\n\r\n    if (collapsible === 'none') {\r\n      return (\r\n        <div\r\n          className={cn(\r\n            'flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground',\r\n            className,\r\n          )}\r\n          ref={ref}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (isMobile) {\r\n      return (\r\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n          <SheetContent\r\n            data-sidebar=\"sidebar\"\r\n            data-mobile=\"true\"\r\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\r\n            style={\r\n              {\r\n                '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\r\n              } as React.CSSProperties\r\n            }\r\n            side={side}\r\n          >\r\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n          </SheetContent>\r\n        </Sheet>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className=\"group peer hidden md:block text-sidebar-foreground\"\r\n        data-state={state}\r\n        data-collapsible={state === 'collapsed' ? collapsible : ''}\r\n        data-variant={variant}\r\n        data-side={side}\r\n      >\r\n        {/* This is what handles the sidebar gap on desktop */}\r\n        <div\r\n          className={cn(\r\n            'duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear',\r\n            'group-data-[collapsible=offcanvas]:w-0',\r\n            'group-data-[side=right]:rotate-180',\r\n            variant === 'floating' || variant === 'inset'\r\n              ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]'\r\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon]',\r\n          )}\r\n        />\r\n        <div\r\n          className={cn(\r\n            'duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex',\r\n            side === 'left'\r\n              ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\r\n              : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\r\n            // Adjust the padding for floating and inset variants.\r\n            variant === 'floating' || variant === 'inset'\r\n              ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'\r\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',\r\n            className,\r\n          )}\r\n          {...props}\r\n        >\r\n          <div\r\n            data-sidebar=\"sidebar\"\r\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nSidebar.displayName = 'Sidebar';\r\n\r\nconst SidebarTrigger = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\r\n  ({ className, onClick, ...props }, ref) => {\r\n    const { toggleSidebar } = useSidebar();\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        data-sidebar=\"trigger\"\r\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; form?: string | undef... Remove this comment to see the full error message\r\n        variant=\"ghost\"\r\n        size=\"icon\"\r\n        className={cn('h-7 w-7', className)}\r\n        onClick={(event) => {\r\n          onClick?.(event);\r\n          toggleSidebar();\r\n        }}\r\n        {...props}\r\n      >\r\n        <PanelLeft />\r\n        <span className=\"sr-only\">Toggle Sidebar</span>\r\n      </Button>\r\n    );\r\n  },\r\n);\r\nSidebarTrigger.displayName = 'SidebarTrigger';\r\n\r\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<'button'>>(\r\n  ({ className, ...props }, ref) => {\r\n    const { toggleSidebar } = useSidebar();\r\n\r\n    return (\r\n      <button\r\n        ref={ref}\r\n        data-sidebar=\"rail\"\r\n        aria-label=\"Toggle Sidebar\"\r\n        tabIndex={-1}\r\n        onClick={toggleSidebar}\r\n        title=\"Toggle Sidebar\"\r\n        className={cn(\r\n          'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',\r\n          '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',\r\n          '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\r\n          'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar',\r\n          '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\r\n          '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarRail.displayName = 'SidebarRail';\r\n\r\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<'main'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <main\r\n        ref={ref}\r\n        className={cn(\r\n          'relative flex min-h-svh flex-1 flex-col bg-background',\r\n          'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarInset.displayName = 'SidebarInset';\r\n\r\nconst SidebarInput = React.forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <Input\r\n        ref={ref}\r\n        data-sidebar=\"input\"\r\n        className={cn(\r\n          'h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarInput.displayName = 'SidebarInput';\r\n\r\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-sidebar=\"header\"\r\n        className={cn('flex flex-col gap-2 p-2', className)}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarHeader.displayName = 'SidebarHeader';\r\n\r\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-sidebar=\"footer\"\r\n        className={cn('flex flex-col gap-2 p-2', className)}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarFooter.displayName = 'SidebarFooter';\r\n\r\nconst SidebarSeparator = React.forwardRef<HTMLDivElement, React.ComponentProps<typeof Separator>>(\r\n  ({ className, ...props }, ref) => (\r\n    <Separator\r\n      ref={ref}\r\n      data-sidebar=\"separator\"\r\n      className={cn('mx-2 w-auto bg-sidebar-border', className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarSeparator.displayName = 'SidebarSeparator';\r\n\r\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-sidebar=\"content\"\r\n        className={cn(\r\n          'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarContent.displayName = 'SidebarContent';\r\n\r\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-sidebar=\"group\"\r\n        className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarGroup.displayName = 'SidebarGroup';\r\n\r\nconst SidebarGroupLabel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : 'div';\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-label\"\r\n      className={cn(\r\n        'duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\r\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarGroupLabel.displayName = 'SidebarGroupLabel';\r\n\r\nconst SidebarGroupAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<'button'> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : 'button';\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-action\"\r\n      className={cn(\r\n        'absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\r\n        // Increases the hit area of the button on mobile.\r\n        'after:absolute after:-inset-2 after:md:hidden',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarGroupAction.displayName = 'SidebarGroupAction';\r\n\r\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"group-content\"\r\n      className={cn('w-full text-sm', className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarGroupContent.displayName = 'SidebarGroupContent';\r\n\r\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <ul\r\n      ref={ref}\r\n      data-sidebar=\"menu\"\r\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenu.displayName = 'SidebarMenu';\r\n\r\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <li\r\n      ref={ref}\r\n      data-sidebar=\"menu-item\"\r\n      className={cn('group/menu-item relative', className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenuItem.displayName = 'SidebarMenuItem';\r\n\r\nconst sidebarMenuButtonVariants = cva(\r\n  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\r\n        outline:\r\n          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\r\n      },\r\n      size: {\r\n        default: 'h-8 text-sm',\r\n        sm: 'h-7 text-xs',\r\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n);\r\n\r\nconst SidebarMenuButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<'button'> & {\r\n    asChild?: boolean;\r\n    isActive?: boolean;\r\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\r\n  } & VariantProps<typeof sidebarMenuButtonVariants>\r\n>(\r\n  (\r\n    {\r\n      asChild = false,\r\n      isActive = false,\r\n      variant = 'default',\r\n      size = 'default',\r\n      tooltip,\r\n      className,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    const { isMobile, state } = useSidebar();\r\n\r\n    const button = (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"menu-button\"\r\n        data-size={size}\r\n        data-active={isActive}\r\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\r\n        {...props}\r\n      />\r\n    );\r\n\r\n    if (tooltip == undefined) {\r\n      return button;\r\n    }\r\n\r\n    if (typeof tooltip === 'string') {\r\n      tooltip = {\r\n        children: tooltip,\r\n      };\r\n    }\r\n\r\n    return (\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n        <TooltipContent\r\n          side=\"right\"\r\n          align=\"center\"\r\n          hidden={state !== 'collapsed' || isMobile}\r\n          {...tooltip}\r\n        />\r\n      </Tooltip>\r\n    );\r\n  },\r\n);\r\nSidebarMenuButton.displayName = 'SidebarMenuButton';\r\n\r\nconst SidebarMenuAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<'button'> & {\r\n    asChild?: boolean;\r\n    showOnHover?: boolean;\r\n  }\r\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : 'button';\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-action\"\r\n      className={cn(\r\n        'absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0',\r\n        // Increases the hit area of the button on mobile.\r\n        'after:absolute after:-inset-2 after:md:hidden',\r\n        'peer-data-[size=sm]/menu-button:top-1',\r\n        'peer-data-[size=default]/menu-button:top-1.5',\r\n        'peer-data-[size=lg]/menu-button:top-2.5',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        showOnHover &&\r\n          'group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarMenuAction.displayName = 'SidebarMenuAction';\r\n\r\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-badge\"\r\n      className={cn(\r\n        'absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none',\r\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\r\n        'peer-data-[size=sm]/menu-button:top-1',\r\n        'peer-data-[size=default]/menu-button:top-1.5',\r\n        'peer-data-[size=lg]/menu-button:top-2.5',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenuBadge.displayName = 'SidebarMenuBadge';\r\n\r\nconst SidebarMenuSkeleton = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & {\r\n    showIcon?: boolean;\r\n  }\r\n>(({ className, showIcon = false, ...props }, ref) => {\r\n  // Predictable width between 50 to 90%.\r\n\r\n  const width = React.useMemo(() => {\r\n    // Use a more predictable approach for skeleton width to avoid pseudorandom warning\r\n    const widths = ['50%', '60%', '70%', '80%', '90%'];\r\n    const index = Math.floor(Date.now() / 1000) % widths.length;\r\n    return widths[index];\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-skeleton\"\r\n      className={cn('rounded-md h-8 flex gap-2 px-2 items-center', className)}\r\n      {...props}\r\n    >\r\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\r\n      <Skeleton\r\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\r\n        data-sidebar=\"menu-skeleton-text\"\r\n        style={\r\n          {\r\n            '--skeleton-width': width,\r\n          } as React.CSSProperties\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n});\r\nSidebarMenuSkeleton.displayName = 'SidebarMenuSkeleton';\r\n\r\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <ul\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub\"\r\n      className={cn(\r\n        'mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenuSub.displayName = 'SidebarMenuSub';\r\n\r\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\r\n  ({ ...props }, ref) => <li ref={ref} {...props} />,\r\n);\r\nSidebarMenuSubItem.displayName = 'SidebarMenuSubItem';\r\n\r\nconst SidebarMenuSubButton = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentProps<'a'> & {\r\n    asChild?: boolean;\r\n    size?: 'sm' | 'md';\r\n    isActive?: boolean;\r\n  }\r\n>(({ asChild = false, size = 'md', isActive, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : 'a';\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(\r\n        'flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground',\r\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\r\n        size === 'sm' && 'text-xs',\r\n        size === 'md' && 'text-sm',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarMenuSubButton.displayName = 'SidebarMenuSubButton';\r\n\r\nexport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarGroup,\r\n  SidebarGroupAction,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarHeader,\r\n  SidebarInput,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuBadge,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSkeleton,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  SidebarProvider,\r\n  SidebarRail,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n  useSidebar,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\simpleQualityPanel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (93). Maximum allowed is 50.","line":13,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":105,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":34,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1169,1183],"text":"Boolean(result.success)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":34,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":36,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":36,"column":101,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":105,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":40,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":40,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":40,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":65,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":65,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { RefreshCw, Settings, Loader2 } from 'lucide-react';\r\n\r\ninterface SimpleQualityPanelProps {\r\n  readonly onRefresh?: () => void;\r\n}\r\n\r\nexport const SimpleQualityPanel: React.FC<SimpleQualityPanelProps> = ({ onRefresh }) => {\r\n  const [isRecalculating, setIsRecalculating] = useState(false);\r\n\r\n  const handleRecalculateAll = async () => {\r\n    setIsRecalculating(true);\r\n\r\n    try {\r\n      const response = await fetch('/api/admin/data-quality', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          action: 'recalculate_all',\r\n        }),\r\n      });\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n      const result = await response.json();\r\n\r\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access\r\n      if (result.success) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-member-access\r\n        alert(`Quality scores updated successfully! ${result.data.updated} trucks updated, ${result.data.errors} errors.`);\r\n        onRefresh?.();\r\n      } else {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\r\n        throw new Error(result.error ?? 'Failed to recalculate quality scores');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error recalculating quality scores:', error);\r\n      alert('Failed to recalculate quality scores. Please try again.');\r\n    } finally {\r\n      setIsRecalculating(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Settings className=\"h-5 w-5\" />\r\n          Quality Management Operations\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Bulk operations for managing data quality scores across all food trucks\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <Button\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            onClick={handleRecalculateAll}\r\n            disabled={isRecalculating}\r\n            className=\"flex items-center gap-2\"\r\n            variant=\"default\"\r\n          >\r\n            {isRecalculating ? (\r\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n            ) : (\r\n              <RefreshCw className=\"h-4 w-4\" />\r\n            )}\r\n            Recalculate All Scores\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"border rounded-lg p-4 bg-blue-50/50\">\r\n          <h4 className=\"font-medium mb-2 text-blue-900\">Quality Score Thresholds</h4>\r\n          <div className=\"space-y-1 text-sm text-blue-800\">\r\n            <div className=\"flex justify-between\">\r\n              <span>High Quality:</span>\r\n              <Badge className=\"bg-green-100 text-green-800\">≥ 80%</Badge>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span>Medium Quality:</span>\r\n              <Badge className=\"bg-yellow-100 text-yellow-800\">60% - 79%</Badge>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span>Low Quality:</span>\r\n              <Badge className=\"bg-red-100 text-red-800\">&lt; 60%</Badge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"text-xs text-muted-foreground\">\r\n          <p>\r\n            <strong>Recalculate All:</strong> Updates quality scores for all food trucks using the latest algorithm.\r\n          </p>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SimpleQualityPanel;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseToast.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":65,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":119,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from 'react';\r\n\r\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\r\n\r\nconst TOAST_LIMIT = 1;\r\nconst TOAST_REMOVE_DELAY = 1_000_000;\r\n\r\nexport type ToasterToast = ToastProps & {\r\n  id: string;\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  action?: ToastActionElement;\r\n};\r\n\r\nlet count = 0;\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\r\n  return count.toString();\r\n}\r\n\r\ntype Action =\r\n  | {\r\n      type: 'ADD_TOAST';\r\n      toast: ToasterToast;\r\n    }\r\n  | {\r\n      type: 'UPDATE_TOAST';\r\n      toast: Partial<ToasterToast>;\r\n    }\r\n  | {\r\n      type: 'DISMISS_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    }\r\n  | {\r\n      type: 'REMOVE_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    };\r\n\r\ninterface State {\r\n  toasts: ToasterToast[];\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return;\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId);\r\n    dispatch({\r\n      type: 'REMOVE_TOAST',\r\n      toastId: toastId,\r\n    });\r\n  }, TOAST_REMOVE_DELAY);\r\n\r\n  toastTimeouts.set(toastId, timeout);\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'ADD_TOAST': {\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_TOAST': {\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\r\n      };\r\n    }\r\n\r\n    case 'DISMISS_TOAST': {\r\n      const { toastId } = action;\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId != undefined && toastId !== '') {\r\n        addToRemoveQueue(toastId);\r\n      } else {\r\n        for (const toast of state.toasts) {\r\n          addToRemoveQueue(toast.id);\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t,\r\n        ),\r\n      };\r\n    }\r\n    case 'REMOVE_TOAST': {\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst listeners: Array<(state: State) => void> = [];\r\n\r\nlet memoryState: State = { toasts: [] };\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action);\r\n  for (const listener of listeners) {\r\n    listener(memoryState);\r\n  }\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, 'id'>;\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId();\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: 'UPDATE_TOAST',\r\n      toast: { ...props, id },\r\n    });\r\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\r\n\r\n  dispatch({\r\n    type: 'ADD_TOAST',\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open: boolean) => {\r\n        if (!open) dismiss();\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  };\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState);\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState);\r\n    return () => {\r\n      const index = listeners.indexOf(setState);\r\n      if (index !== -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\r\n  };\r\n}\r\n\r\nexport { useToast, toast };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\createEventSourceConnection.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeMetrics' is defined but never used.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeMetrics'.","line":2,"column":25,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[50,67],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parseEventData' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'parseEventData'.","line":3,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":3,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[120,136],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setupEventListeners' is defined but never used.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":45},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'setupEventListeners'.","line":3,"column":26,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":3,"endColumn":45,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[134,155],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'createEventSourceConnection' has too many lines (60). Maximum allowed is 50.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":66,"endColumn":2},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":19,"column":25,"nodeType":null,"messageId":"deprecation","endLine":19,"endColumn":41},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":21,"column":36,"nodeType":null,"messageId":"deprecation","endLine":21,"endColumn":52},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":25,"column":30,"nodeType":null,"messageId":"deprecation","endLine":25,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsConnected' is assigned a value but never used.","line":34,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":62},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'setIsConnected' variable.","line":34,"column":48,"nodeType":"Identifier","messageId":"unusedVariable","endLine":34,"endColumn":62},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"setIsConnected\".","line":34,"column":48,"nodeType":null,"messageId":"removeAssignment","endLine":34,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setConnectionAttempts' is assigned a value but never used.","line":34,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":85},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'setConnectionAttempts' variable.","line":34,"column":64,"nodeType":"Identifier","messageId":"unusedVariable","endLine":34,"endColumn":85},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"setConnectionAttempts\".","line":34,"column":64,"nodeType":null,"messageId":"removeAssignment","endLine":34,"endColumn":85}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { RealtimeEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\r\nimport { parseEventData, setupEventListeners, setupEventSourceAuth } from '../useRealtimeAdminEventsHelpers';\r\nimport { useConnectionState } from './useConnectionState';\r\nimport { setupEventSourceListeners } from './setupEventSourceListeners';\r\n\r\nexport function createEventSourceConnection({\r\n  eventSourceRef,\r\n  isConnecting,\r\n  isManuallyDisconnectedRef,\r\n  connectionAttempts,\r\n  maxReconnectAttempts,\r\n  reconnectInterval,\r\n  reconnectTimeoutRef,\r\n  handleEvent,\r\n  connectionState,\r\n  connect\r\n}: {\r\n  eventSourceRef: React.MutableRefObject<EventSource | undefined>;\r\n  isConnecting: boolean;\r\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>;\r\n  connectionAttempts: number;\r\n  maxReconnectAttempts: number;\r\n  reconnectInterval: number;\r\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>;\r\n  handleEvent: (event: RealtimeEvent) => void;\r\n  connectionState: ReturnType<typeof useConnectionState>;\r\n  connect: () => void;\r\n}) {\r\n  if (eventSourceRef.current || isConnecting) {\r\n    return;\r\n  }\r\n\r\n  const { setIsConnecting, setConnectionError, setIsConnected, setConnectionAttempts } = connectionState;\r\n\r\n  setIsConnecting(true);\r\n  setConnectionError(undefined);\r\n  isManuallyDisconnectedRef.current = false;\r\n\r\n  try {\r\n    // Setup authentication\r\n    setupEventSourceAuth();\r\n\r\n    const eventSource = new EventSource('/api/admin/realtime-events');\r\n\r\n    // Setup all event listeners\r\n    setupEventSourceListeners(\r\n      eventSource,\r\n      handleEvent,\r\n      connectionState,\r\n      isManuallyDisconnectedRef,\r\n      connectionAttempts,\r\n      maxReconnectAttempts,\r\n      reconnectInterval,\r\n      reconnectTimeoutRef,\r\n      connect\r\n    );\r\n\r\n    eventSourceRef.current = eventSource;\r\n\r\n  } catch (error) {\r\n    console.error('Failed to establish real-time connection:', error);\r\n    setIsConnecting(false);\r\n    setConnectionError(error instanceof Error ? error.message : 'Connection failed');\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\setupEventSourceListeners.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeMetrics' is defined but never used.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeMetrics'.","line":2,"column":25,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[50,67],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'setupEventSourceListeners' has too many lines (51). Maximum allowed is 50.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":56,"endColumn":2},{"ruleId":"max-params","severity":2,"message":"Function 'setupEventSourceListeners' has too many parameters (9). Maximum allowed is 4.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":6,"endColumn":42},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":10,"column":36,"nodeType":null,"messageId":"deprecation","endLine":10,"endColumn":52},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":14,"column":30,"nodeType":null,"messageId":"deprecation","endLine":14,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":28,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":71},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":29,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":29,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1198,1208],"text":"Boolean(adminEvent)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `RealtimeEvent`.","line":30,"column":19,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":30,"endColumn":29}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { RealtimeEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\r\nimport { parseEventData, setupEventListeners } from '../useRealtimeAdminEventsHelpers';\r\nimport { useConnectionState } from './useConnectionState';\r\n\r\nexport function setupEventSourceListeners(\r\n  eventSource: EventSource,\r\n  handleEvent: (event: RealtimeEvent) => void,\r\n  connectionState: ReturnType<typeof useConnectionState>,\r\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>,\r\n  connectionAttempts: number,\r\n  maxReconnectAttempts: number,\r\n  reconnectInterval: number,\r\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>,\r\n  connect: () => void\r\n) {\r\n  const { setIsConnected, setIsConnecting, setConnectionError, setConnectionAttempts } = connectionState;\r\n\r\n  eventSource.addEventListener('open', () => {\r\n    console.info('Real-time admin events connected');\r\n    setIsConnected(true);\r\n    setIsConnecting(false);\r\n    setConnectionError(undefined);\r\n    setConnectionAttempts(0);\r\n  });\r\n\r\n  eventSource.addEventListener('message', (event: MessageEvent) => {\r\n    const adminEvent = parseEventData(event.data as string, 'message');\r\n    if (adminEvent) {\r\n      handleEvent(adminEvent);\r\n    }\r\n  });\r\n\r\n  eventSource.addEventListener('error', (error) => {\r\n    console.error('Real-time admin events error:', error);\r\n    setIsConnected(false);\r\n    setIsConnecting(false);\r\n    setConnectionError('Connection error occurred');\r\n\r\n    // Attempt reconnection if not manually disconnected\r\n    if (!isManuallyDisconnectedRef.current && connectionAttempts < maxReconnectAttempts) {\r\n      setConnectionAttempts(prev => prev + 1);\r\n\r\n      reconnectTimeoutRef.current = setTimeout(() => {\r\n        if (!isManuallyDisconnectedRef.current) {\r\n          connect();\r\n        }\r\n      }, reconnectInterval);\r\n    } else if (connectionAttempts >= maxReconnectAttempts) {\r\n      setConnectionError('Max reconnection attempts reached');\r\n    }\r\n  });\r\n\r\n  // Handle specific event types\r\n  setupEventListeners(eventSource, handleEvent);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useAutoConnect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'useRef'.","line":1,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":29,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[20,28],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeMetrics' is defined but never used.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeMetrics'.","line":2,"column":25,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[68,85],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'useConnectionManagement' has too many lines (52). Maximum allowed is 50.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":57,"endColumn":2},{"ruleId":"max-params","severity":2,"message":"Function 'useConnectionManagement' has too many parameters (9). Maximum allowed is 4.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":6,"endColumn":40},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":7,"column":25,"nodeType":null,"messageId":"deprecation","endLine":7,"endColumn":41},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":8,"column":30,"nodeType":null,"messageId":"deprecation","endLine":8,"endColumn":46},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":9,"column":36,"nodeType":null,"messageId":"deprecation","endLine":9,"endColumn":52}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\r\nimport { RealtimeEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\r\nimport { useConnectionState } from './useConnectionState';\r\nimport { createEventSourceConnection } from './createEventSourceConnection';\r\n\r\nexport function useConnectionManagement(\r\n  eventSourceRef: React.MutableRefObject<EventSource | undefined>,\r\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>,\r\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>,\r\n  connectionState: ReturnType<typeof useConnectionState>,\r\n  handleEvent: (event: RealtimeEvent) => void,\r\n  connectionAttempts: number,\r\n  maxReconnectAttempts: number,\r\n  reconnectInterval: number,\r\n  isConnecting: boolean\r\n) {\r\n  const { setIsConnected, setIsConnecting, setConnectionError, setRecentEvents } = connectionState;\r\n\r\n  const connect = useCallback(() => {\r\n    createEventSourceConnection({\r\n      eventSourceRef,\r\n      isConnecting,\r\n      isManuallyDisconnectedRef,\r\n      connectionAttempts,\r\n      maxReconnectAttempts,\r\n      reconnectInterval,\r\n      reconnectTimeoutRef,\r\n      handleEvent,\r\n      connectionState,\r\n      connect: () => connect()\r\n    });\r\n  }, [handleEvent, connectionAttempts, maxReconnectAttempts, reconnectInterval, isConnecting, connectionState]);\r\n\r\n  const disconnect = useCallback(() => {\r\n    isManuallyDisconnectedRef.current = true;\r\n\r\n    if (reconnectTimeoutRef.current) {\r\n      clearTimeout(reconnectTimeoutRef.current);\r\n      reconnectTimeoutRef.current = undefined;\r\n    }\r\n\r\n    if (eventSourceRef.current) {\r\n      eventSourceRef.current.close();\r\n      eventSourceRef.current = undefined;\r\n    }\r\n\r\n    setIsConnected(false);\r\n    setIsConnecting(false);\r\n    setConnectionError(undefined);\r\n  }, [setIsConnected, setIsConnecting, setConnectionError]);\r\n\r\n  const clearEvents = useCallback(() => {\r\n    setRecentEvents([]);\r\n  }, [setRecentEvents]);\r\n\r\n  return { connect, disconnect, clearEvents };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useEventHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useRealtimeAdminEventsLogic.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'useRealtimeAdminEventsLogic' has too many lines (83). Maximum allowed is 50.","line":35,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":117,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef } from 'react';\r\nimport { RealtimeEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\r\nimport { useConnectionState } from './useConnectionState';\r\nimport { useEventHandlers } from './useEventHandlers';\r\nimport { useConnectionManagement } from './useConnectionManagement';\r\nimport { useAutoConnect } from './useAutoConnect';\r\n\r\ninterface UseRealtimeAdminEventsOptions {\r\n  autoConnect?: boolean;\r\n  reconnectInterval?: number;\r\n  maxReconnectAttempts?: number;\r\n  eventFilter?: (event: RealtimeEvent) => boolean;\r\n}\r\n\r\ninterface UseRealtimeAdminEventsReturn {\r\n  // Connection state\r\n  isConnected: boolean;\r\n  isConnecting: boolean;\r\n  connectionError: string | undefined;\r\n  \r\n  // Data\r\n  latestMetrics: RealtimeMetrics | undefined;\r\n  recentEvents: RealtimeEvent[];\r\n  \r\n  // Controls\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n  clearEvents: () => void;\r\n  \r\n  // Statistics\r\n  connectionAttempts: number;\r\n  lastEventTime: Date | undefined;\r\n}\r\n\r\nexport function useRealtimeAdminEventsLogic(\r\n  options: UseRealtimeAdminEventsOptions = {}\r\n): UseRealtimeAdminEventsReturn {\r\n  const {\r\n    autoConnect = true,\r\n    reconnectInterval = 5000,\r\n    maxReconnectAttempts = 10,\r\n    eventFilter\r\n  } = options;\r\n\r\n  // State management\r\n  const connectionState = useConnectionState();\r\n  const {\r\n    isConnected,\r\n    isConnecting,\r\n    connectionError,\r\n    latestMetrics,\r\n    recentEvents,\r\n    connectionAttempts,\r\n    lastEventTime\r\n  } = connectionState;\r\n\r\n  // Refs\r\n  const eventSourceRef = useRef<EventSource | undefined>(undefined);\r\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\r\n  const isManuallyDisconnectedRef = useRef(false);\r\n\r\n  // Event handlers\r\n  const handleEvent = useEventHandlers(\r\n    eventFilter,\r\n    connectionState.setLastEventTime,\r\n    connectionState.setLatestMetrics,\r\n    connectionState.setRecentEvents\r\n  );\r\n\r\n  // Connection management\r\n  const { connect, disconnect, clearEvents } = useConnectionManagement(\r\n    eventSourceRef,\r\n    reconnectTimeoutRef,\r\n    isManuallyDisconnectedRef,\r\n    connectionState,\r\n    handleEvent,\r\n    connectionAttempts,\r\n    maxReconnectAttempts,\r\n    reconnectInterval,\r\n    isConnecting\r\n  );\r\n\r\n  // Auto-connect on mount\r\n  useAutoConnect(autoConnect, connect, disconnect);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (reconnectTimeoutRef.current) {\r\n        clearTimeout(reconnectTimeoutRef.current);\r\n      }\r\n      if (eventSourceRef.current) {\r\n        eventSourceRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    // Connection state\r\n    isConnected,\r\n    isConnecting,\r\n    connectionError,\r\n    \r\n    // Data\r\n    latestMetrics,\r\n    recentEvents,\r\n    \r\n    // Controls\r\n    connect,\r\n    disconnect,\r\n    clearEvents,\r\n    \r\n    // Statistics\r\n    connectionAttempts,\r\n    lastEventTime\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAdminAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAuthHandlers.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'useAuthHandlers' has too many lines (87). Maximum allowed is 50.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":102,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useRouter } from 'next/navigation';\r\n\r\ninterface UseAuthHandlersReturn {\r\n  handleEmailLogin: (e: React.FormEvent) => Promise<void>;\r\n  handleGoogleLogin: () => Promise<void>;\r\n  loading: boolean;\r\n  error: string | undefined;\r\n  email: string;\r\n  setEmail: (email: string) => void;\r\n  password: string;\r\n  setPassword: (password: string) => void;\r\n}\r\n\r\nexport function useAuthHandlers(redirectTo: string): UseAuthHandlersReturn {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | undefined>();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const router = useRouter();\r\n\r\n  const handleEmailLogin = useCallback(async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      setLoading(true);\r\n      setError(undefined);\r\n\r\n      const { error: signInError } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (signInError) {\r\n        throw signInError;\r\n      }\r\n\r\n      const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n\r\n      if (userError) {\r\n        throw userError;\r\n      }\r\n\r\n      if (user) {\r\n        const { data: profile, error: profileError } = await supabase\r\n          .from('profiles')\r\n          .select('role')\r\n          .eq('id', user.id)\r\n          .single();\r\n\r\n        if (profileError) {\r\n          throw profileError;\r\n        }\r\n\r\n        if (profile?.role === 'admin') {\r\n          router.push(redirectTo);\r\n        } else {\r\n          router.push('/access-denied');\r\n        }\r\n      }\r\n    } catch (error_: unknown) {\r\n      console.error('Login error:', error_);\r\n      setError(error_ instanceof Error ? error_.message : 'An error occurred during login');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [email, password, router, redirectTo]);\r\n\r\n  const handleGoogleLogin = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(undefined);\r\n\r\n      const { error: signInError } = await supabase.auth.signInWithOAuth({\r\n        provider: 'google',\r\n        options: {\r\n          redirectTo: `${globalThis.location.origin}/auth/callback?redirectTo=${encodeURIComponent(redirectTo)}`,\r\n        },\r\n      });\r\n\r\n      if (signInError) {\r\n        throw signInError;\r\n      }\r\n    } catch (error_: unknown) {\r\n      console.error('Login error:', error_);\r\n      setError(error_ instanceof Error ? error_.message : 'An error occurred during login');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [router, redirectTo]);\r\n\r\n  return {\r\n    handleEmailLogin,\r\n    handleGoogleLogin,\r\n    loading,\r\n    error,\r\n    email,\r\n    setEmail,\r\n    password,\r\n    setPassword,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useDataCleanup.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'useDataCleanup' has too many lines (72). Maximum allowed is 50.","line":26,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":97,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\n\r\nexport interface CleanupOperation {\r\n  type: string;\r\n  description: string;\r\n  affectedCount: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\nexport interface CleanupResult {\r\n  totalProcessed: number;\r\n  operations: CleanupOperation[];\r\n  summary: {\r\n    trucksImproved: number;\r\n    duplicatesRemoved: number;\r\n    qualityScoreImprovement: number;\r\n    placeholdersRemoved: number;\r\n  };\r\n  duration: number;\r\n}\r\n\r\nexport function useDataCleanup() {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [lastResult, setLastResult] = useState<CleanupResult | undefined>();\r\n  const [previewData, setPreviewData] = useState<unknown>();\r\n  const [selectedOperations, setSelectedOperations] = useState<string[]>([\r\n    'remove_placeholders',\r\n    'normalize_phone',\r\n    'fix_coordinates',\r\n    'update_quality_scores'\r\n  ]);\r\n\r\n  const runCleanup = async (dryRun: boolean = false) => {\r\n    setIsRunning(true);\r\n    try {\r\n      const response = await fetch('/api/admin/data-cleanup', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          action: dryRun ? 'dry-run' : 'full-cleanup',\r\n          options: {\r\n            operations: selectedOperations,\r\n            batchSize: 50,\r\n            dryRun\r\n          }\r\n        })\r\n      });\r\n\r\n      const data = await response.json() as { success: boolean; result?: CleanupResult; error?: string };\r\n\r\n      if (data.success === true) {\r\n        setLastResult(data.result);\r\n      } else {\r\n        console.error('Cleanup failed:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error running cleanup:', error);\r\n    } finally {\r\n      setIsRunning(false);\r\n    }\r\n  };\r\n\r\n  const loadPreview = async () => {\r\n    try {\r\n      const response = await fetch('/api/admin/data-cleanup?action=preview');\r\n      const data = await response.json() as { success: boolean; preview?: unknown };\r\n\r\n      if (data.success === true) {\r\n        setPreviewData(data.preview);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading preview:', error);\r\n    }\r\n  };\r\n\r\n  const toggleOperation = (operation: string) => {\r\n    setSelectedOperations(prev => \r\n      prev.includes(operation)\r\n        ? prev.filter(op => op !== operation)\r\n        : [...prev, operation]\r\n    );\r\n  };\r\n\r\n  return {\r\n    isRunning,\r\n    lastResult,\r\n    previewData,\r\n    selectedOperations,\r\n    runCleanup,\r\n    loadPreview,\r\n    toggleOperation\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckFinder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEventsHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'AdminEvent' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":5,"column":71,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":5,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":20,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":20,"endColumn":73},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":21,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":21,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[908,918],"text":"Boolean(adminEvent)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Extracted helpers from useRealtimeAdminEvents.ts for MLPF compliance\r\nimport { AdminEvent } from './useRealtimeAdminEvents.types';\r\n\r\n// Utility function for parsing event data\r\nexport function parseEventData(eventData: string, eventType: string): AdminEvent | undefined {\r\n  try {\r\n    return JSON.parse(eventData) as AdminEvent;\r\n  } catch (error) {\r\n    console.warn(`Failed to parse ${eventType} event:`, error);\r\n    return undefined;\r\n  }\r\n}\r\n\r\n// Setup event listeners for different event types\r\nexport function setupEventListeners(eventSource: EventSource, handleEvent: (event: AdminEvent) => void) {\r\n  const eventTypes = ['heartbeat', 'scraping_update', 'data_quality_change', 'system_alert'];\r\n\r\n  for (const eventType of eventTypes) {\r\n    eventSource.addEventListener(eventType, (event: MessageEvent) => {\r\n      const adminEvent = parseEventData(event.data as string, eventType);\r\n      if (adminEvent) {\r\n        handleEvent(adminEvent);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// Helper function to setup authentication for event source\r\nexport function setupEventSourceAuth(): string {\r\n  const token = localStorage.getItem('supabase.auth.token') ??\r\n               sessionStorage.getItem('supabase.auth.token');\r\n\r\n  if (token == undefined || token === '') {\r\n    throw new Error('No authentication token available');\r\n  }\r\n\r\n  return token;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSearchFiltersLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSidebarKeyboardShortcut.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlerts.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in array predicate return type. Please handle the nullish case explicitly.","line":18,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorNullableBoolean","endLine":18,"endColumn":67,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[555,598],"text":"(event.severity && event.severity !== 'info') ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[555,598],"text":"(event.severity && event.severity !== 'info') === true"},"desc":"Change condition to check if true (`value === true`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[546,551],"text":"(event): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { RealtimeEvent } from './useRealtimeAdminEvents.types';\r\n\r\nexport interface SystemAlert {\r\n  id: string;\r\n  type: 'info' | 'warning' | 'error' | 'critical';\r\n  message: string;\r\n  timestamp: string;\r\n  acknowledged?: boolean;\r\n}\r\n\r\nexport const useSystemAlerts = (recentEvents: RealtimeEvent[]) => {\r\n  const [alerts, setAlerts] = useState<SystemAlert[]>([]);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const newAlerts = recentEvents\r\n      .filter(event => event.severity && event.severity !== 'info')\r\n      .map(event => ({\r\n        id: event.id,\r\n        type: event.severity as 'warning' | 'error' | 'critical',\r\n        message: (typeof event.data?.message === 'string' && event.data.message) || 'System event occurred',\r\n        timestamp: event.timestamp,\r\n        acknowledged: false,\r\n      }))\r\n      .slice(0, 5); // Keep only the latest 5 alerts\r\n\r\n    // Only update if there's a change to avoid unnecessary re-renders\r\n    if (JSON.stringify(newAlerts) !== JSON.stringify(alerts)) {\r\n      setAlerts(newAlerts);\r\n    }\r\n  }, [recentEvents, alerts]);\r\n\r\n  const acknowledgeAlert = (alertId: string) => {\r\n    setAlerts(prev =>\r\n      prev.map(alert =>\r\n        alert.id === alertId ? { ...alert, acknowledged: true } : alert\r\n      )\r\n    );\r\n  };\r\n\r\n  const toggleDetails = () => {\r\n    setShowDetails(prev => !prev);\r\n  };\r\n\r\n  return {\r\n    alerts,\r\n    showDetails,\r\n    acknowledgeAlert,\r\n    toggleDetails,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlertsLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useTruckCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\ScraperEngine.ts","messages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":319,"column":24,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":319,"endColumn":37},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":333,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":333,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":635,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":635,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":636,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":636,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[20275,20281],"text":"(Boolean(parsed))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/no-redundant-optional","severity":2,"message":"Consider removing 'undefined' type or '?' specifier, one of them is redundant.","line":694,"column":30,"nodeType":null,"endLine":694,"endColumn":31,"suggestions":[{"desc":"Remove \"?\" operator","fix":{"range":[22392,22393],"text":""}},{"desc":"Remove \"undefined\" type annotation","fix":{"range":[22395,22413],"text":"number"}}]},{"ruleId":"sonarjs/no-redundant-optional","severity":2,"message":"Consider removing 'undefined' type or '?' specifier, one of them is redundant.","line":697,"column":30,"nodeType":null,"endLine":697,"endColumn":31,"suggestions":[{"desc":"Remove \"?\" operator","fix":{"range":[22523,22524],"text":""}},{"desc":"Remove \"undefined\" type annotation","fix":{"range":[22526,22544],"text":"number"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":730,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":730,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":765,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":765,"endColumn":42}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from './firecrawl'; // Import the firecrawl singleton\r\nimport * as crypto from 'node:crypto'; // Node.js crypto for secure randomness\r\n\r\ninterface InstagramPost {\r\n  id: string;\r\n  caption: string;\r\n  timestamp: string;\r\n  location: string;\r\n  hashtags: string[];\r\n  engagement: { likes: number; comments: number };\r\n}\r\n\r\ninterface InstagramProfile {\r\n  followers: number;\r\n  following: number;\r\n  posts_count: number;\r\n  bio: string;\r\n  contact_info: { email: string; phone: string };\r\n}\r\n\r\ninterface FacebookPost {\r\n  id: string;\r\n  content: string;\r\n  timestamp: string;\r\n  reactions: { likes: number; loves: number; shares: number };\r\n  comments: number;\r\n}\r\n\r\ninterface FacebookPageInfo {\r\n  likes: number;\r\n  followers: number;\r\n  check_ins: number;\r\n  about: string;\r\n  hours: Record<string, string>;\r\n}\r\n\r\ninterface TwitterTweet {\r\n  id: string;\r\n  text: string;\r\n  timestamp: string;\r\n  retweets: number;\r\n  likes: number;\r\n  replies: number;\r\n  location: string;\r\n}\r\n\r\ninterface TwitterProfile {\r\n  followers: number;\r\n  following: number;\r\n  tweets_count: number;\r\n  bio: string;\r\n  location: string;\r\n  website: string;\r\n}\r\n\r\ninterface InstagramData {\r\n  posts: InstagramPost[];\r\n  profile: InstagramProfile;\r\n}\r\n\r\ninterface FacebookData {\r\n  posts: FacebookPost[];\r\n  page_info: FacebookPageInfo;\r\n}\r\n\r\ninterface TwitterData {\r\n  tweets: TwitterTweet[];\r\n  profile: TwitterProfile;\r\n}\r\n\r\nexport interface WebsiteScrapeData {\r\n  markdown?: string;\r\n  html?: string;\r\n  metadata?: Record<string, unknown>;\r\n  is_fallback?: boolean;\r\n}\r\n\r\nexport interface ExtractedHTMLData {\r\n  name?: string;\r\n  location?: string;\r\n  phone?: string;\r\n  hours?: string;\r\n  menu?: { item: string; price: string }[];\r\n}\r\n\r\ninterface ScrapeResult {\r\n  success: boolean;\r\n  error?: string;\r\n  data?: InstagramData | FacebookData | TwitterData | WebsiteScrapeData | ExtractedHTMLData;\r\n  timestamp: string;\r\n  source: string;\r\n  note?: string;\r\n}\r\n\r\n// Core scraping engine with anti-detection measures\r\nexport class ScraperEngine {\r\n  private userAgents: string[];\r\n  private requestDelay: number;\r\n  private maxRetries: number;\r\n\r\n  constructor() {\r\n    this.userAgents = [\r\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n    ];\r\n    this.requestDelay = 2000;\r\n    this.maxRetries = 3;\r\n  }\r\n\r\n  private async performFallbackScrape(url: string): Promise<ScrapeResult> {\r\n    try {\r\n      const response = await fetch(url, { headers: { 'User-Agent': this.getRandomUserAgent() } });\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `HTTP error ${response.status}: ${response.statusText} during fallback fetch.`,\r\n        );\r\n      }\r\n      const htmlContent = await response.text();\r\n      return {\r\n        success: true,\r\n        data: {\r\n          html: htmlContent,\r\n          is_fallback: true,\r\n        },\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n        note: 'Fetched using basic fetch as Firecrawl failed.',\r\n      };\r\n    } catch (fallbackError: unknown) {\r\n      console.warn(`Fallback fetch error for ${url}:`, fallbackError);\r\n      return {\r\n        success: false,\r\n        error:\r\n          fallbackError instanceof Error ? fallbackError.message : 'Unknown fallback fetch error',\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n      };\r\n    }\r\n  }\r\n\r\n  async scrapeWebsite(url: string, _selectors?: Record<string, string>): Promise<ScrapeResult> {\r\n    try {\r\n      const firecrawlResult = await firecrawl.scrapeUrl(url, {\r\n        formats: ['markdown', 'html'],\r\n        onlyMainContent: true,\r\n      });\r\n\r\n      if (!firecrawlResult.success || !firecrawlResult.data) {\r\n        throw new Error(firecrawlResult.error ?? 'Firecrawl scraping failed to return data.');\r\n      }\r\n\r\n      const returnedData: WebsiteScrapeData = {};\r\n      if (firecrawlResult.data.markdown != undefined && firecrawlResult.data.markdown !== '') {\r\n        returnedData.markdown = firecrawlResult.data.markdown;\r\n      }\r\n      if (firecrawlResult.data.html != undefined && firecrawlResult.data.html !== '') {\r\n        returnedData.html = firecrawlResult.data.html;\r\n      }\r\n      if (firecrawlResult.data.metadata != undefined) {\r\n        returnedData.metadata = firecrawlResult.data.metadata;\r\n      }\r\n\r\n      if (\r\n        (returnedData.markdown == undefined || returnedData.markdown === '') &&\r\n        (returnedData.html == undefined || returnedData.html === '')\r\n      ) {\r\n        throw new Error('Firecrawl returned no markdown or HTML content.');\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: returnedData,\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn(`Scraping error for ${url} using Firecrawl:`, error);\r\n      console.info(`Falling back to basic fetch for ${url}`);\r\n      return await this.performFallbackScrape(url);\r\n    }\r\n  }\r\n\r\n  async scrapeSocialMedia(platform: string, handle: string): Promise<ScrapeResult> {\r\n    try {\r\n      await this.randomDelay();\r\n\r\n      switch (platform) {\r\n        case 'instagram': {\r\n          return this.scrapeInstagram(handle);\r\n        }\r\n        case 'facebook': {\r\n          return this.scrapeFacebook(handle);\r\n        }\r\n        case 'twitter': {\r\n          return this.scrapeTwitter(handle);\r\n        }\r\n        default: {\r\n          throw new Error(`Unsupported platform: ${platform}`);\r\n        }\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(`Social media scraping error for ${platform}/${handle}:`, error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        timestamp: new Date().toISOString(),\r\n        source: `social_media:${platform}:${handle}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async scrapeInstagram(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    return {\r\n      success: true,\r\n      data: {\r\n        posts: [\r\n          {\r\n            id: 'post_001',\r\n            caption: 'Fresh tacos available now at Mission St! 🌮 #foodtruck #tacos',\r\n            timestamp: new Date(Date.now() - 3_600_000).toISOString(),\r\n            location: 'Mission St, San Francisco',\r\n            hashtags: ['foodtruck', 'tacos', 'fresh'],\r\n            engagement: { likes: 45, comments: 8 },\r\n          },\r\n        ],\r\n        profile: {\r\n          followers: 1250,\r\n          following: 340,\r\n          posts_count: 156,\r\n          bio: 'Best tacos in SF 🌮 Follow for daily locations!',\r\n          contact_info: {\r\n            email: 'contact@tacoparadise.com',\r\n            phone: '+1-555-0456',\r\n          },\r\n        },\r\n      } as InstagramData, // Type assertion\r\n      timestamp: new Date().toISOString(),\r\n      source: `instagram:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeFacebook(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    return {\r\n      success: true,\r\n      data: {\r\n        posts: [\r\n          {\r\n            id: 'fb_post_001',\r\n            content:\r\n              \"Today we'll be at Union Square from 11 AM to 3 PM! Come try our new BBQ burger!\",\r\n            timestamp: new Date(Date.now() - 7_200_000).toISOString(),\r\n            reactions: { likes: 23, loves: 5, shares: 3 },\r\n            comments: 12,\r\n          },\r\n        ],\r\n        page_info: {\r\n          likes: 890,\r\n          followers: 1100,\r\n          check_ins: 450,\r\n          about: 'Gourmet food truck serving the Bay Area',\r\n          hours: {\r\n            monday: '11:00-15:00',\r\n            tuesday: '11:00-15:00',\r\n            wednesday: '11:00-15:00',\r\n            thursday: '11:00-15:00',\r\n            friday: '11:00-20:00',\r\n            saturday: '12:00-20:00',\r\n            sunday: '12:00-16:00',\r\n          },\r\n        },\r\n      } as FacebookData, // Type assertion\r\n      timestamp: new Date().toISOString(),\r\n      source: `facebook:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeTwitter(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    return {\r\n      success: true,\r\n      data: {\r\n        tweets: [\r\n          {\r\n            id: 'tweet_001',\r\n            text: 'LIVE at Dolores Park! Fresh burritos and quesadillas available now 🌯',\r\n            timestamp: new Date(Date.now() - 1_800_000).toISOString(),\r\n            retweets: 8,\r\n            likes: 34,\r\n            replies: 5,\r\n            location: 'Dolores Park, San Francisco',\r\n          },\r\n        ],\r\n        profile: {\r\n          followers: 2340,\r\n          following: 567,\r\n          tweets_count: 1890,\r\n          bio: '🚚 SF Food Truck | Fresh Mexican Food | Follow for locations',\r\n          location: 'San Francisco, CA',\r\n          website: 'https://tacoparadise.com',\r\n        },\r\n      } as TwitterData, // Type assertion\r\n      timestamp: new Date().toISOString(),\r\n      source: `twitter:${handle}`,\r\n    };\r\n  }\r\n\r\n  private getRandomUserAgent(): string {\r\n    // Use Node.js crypto for stronger randomness if available, fallback to Math.random otherwise.\r\n    let idx: number;\r\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\r\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\r\n      idx = array[0] % this.userAgents.length;\r\n    } else if (typeof crypto.randomInt === 'function') {\r\n      idx = crypto.randomInt(0, this.userAgents.length);\r\n    } else {\r\n      idx = Math.floor(Math.random() * this.userAgents.length);\r\n    }\r\n    return this.userAgents[idx];\r\n  }\r\n\r\n  private  randomDelay(): Promise<void> {\r\n    // Use Node.js crypto for stronger randomness if available, fallback to Math.random otherwise.\r\n    let randomMs: number;\r\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\r\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\r\n      randomMs = array[0] % 1000;\r\n    } else if (typeof crypto.randomInt === 'function') {\r\n      randomMs = crypto.randomInt(0, 1000);\r\n    } else {\r\n      randomMs = Math.floor(Math.random() * 1000);\r\n    }\r\n    const delay = this.requestDelay + randomMs;\r\n    return new Promise((resolve) => setTimeout(resolve, delay));\r\n  }\r\n\r\n   handleRateLimit(retryAfter: number): Promise<void> {\r\n    console.info(`Rate limited. Waiting ${retryAfter} seconds before retry...`);\r\n    return new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));\r\n  }\r\n\r\n  async retryWithBackoff<T>(\r\n    operation: () => Promise<T>,\r\n    maxRetries: number = this.maxRetries,\r\n  ): Promise<T> {\r\n    let lastError: unknown;\r\n\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        return await operation();\r\n      } catch (error: unknown) {\r\n        lastError = error;\r\n        if (attempt === maxRetries) {\r\n          throw lastError instanceof Error ? lastError : new Error(String(lastError));\r\n        }\r\n\r\n        const backoffDelay = Math.pow(2, attempt) * 1000;\r\n        console.info(`Attempt ${attempt} failed. Retrying in ${backoffDelay}ms...`);\r\n        await new Promise((resolve) => setTimeout(resolve, backoffDelay));\r\n      }\r\n    }\r\n\r\n    throw lastError instanceof Error ? lastError : new Error('Request failed after all retries');\r\n  }\r\n}\r\n\r\ninterface LocationData {\r\n  current?: {\r\n    lat: number | undefined;\r\n    lng: number | undefined;\r\n    address?: string;\r\n  };\r\n}\r\n\r\ninterface ContactInfo {\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\ninterface OperatingHours {\r\n  [key: string]: {\r\n    open: string;\r\n    close: string;\r\n    closed: boolean;\r\n  };\r\n}\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  description?: string;\r\n  price: number;\r\n  dietary_tags?: string[];\r\n}\r\n\r\ninterface MenuCategory {\r\n  category: string;\r\n  items: MenuItem[];\r\n}\r\n\r\ninterface TruckData {\r\n  name: string;\r\n  location: LocationData;\r\n  contact?: ContactInfo;\r\n  operating_hours?: OperatingHours;\r\n  menu?: MenuCategory[];\r\n  last_updated?: string;\r\n}\r\n\r\nexport class DataQualityAssessor {\r\n  private assessBasicInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.name == undefined || truckData.name.trim().length === 0) {\r\n      issues.push('Missing or empty truck name');\r\n      score -= 20;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessLocationInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.location?.current == undefined) {\r\n      issues.push('Missing current location data');\r\n      score -= 25;\r\n    } else {\r\n      if (\r\n        truckData.location.current.lat == undefined ||\r\n        truckData.location.current.lng == undefined\r\n      ) {\r\n        issues.push('Missing GPS coordinates');\r\n        score -= 15;\r\n      }\r\n      if (truckData.location.current.address == undefined || truckData.location.current.address === '') {\r\n        issues.push('Missing address information');\r\n        score -= 10;\r\n      }\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessContactInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.contact == undefined) {\r\n      issues.push('Missing contact information');\r\n      score -= 20;\r\n    } else {\r\n      if ((truckData.contact.phone == undefined || truckData.contact.phone === '') && (truckData.contact.email == undefined || truckData.contact.email === '')) {\r\n        issues.push('No phone or email contact available');\r\n        score -= 15;\r\n      }\r\n      if (truckData.contact.phone != undefined && truckData.contact.phone !== '' && !this.isValidPhone(truckData.contact.phone)) {\r\n        issues.push('Invalid phone number format');\r\n        score -= 5;\r\n      }\r\n      if (truckData.contact.email != undefined && truckData.contact.email !== '' && !this.isValidEmail(truckData.contact.email)) {\r\n        issues.push('Invalid email format');\r\n        score -= 5;\r\n      }\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessOperatingHours(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.operating_hours == undefined || Object.keys(truckData.operating_hours).length === 0) {\r\n      issues.push('Missing operating hours');\r\n      score -= 15;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessMenuInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.menu == undefined || truckData.menu.length === 0) {\r\n      issues.push('Missing menu information');\r\n      score -= 10;\r\n    } else {\r\n      const menuIssues = this.validateMenuData(truckData.menu);\r\n      issues.push(...menuIssues);\r\n      score -= menuIssues.length * 2;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessLastUpdated(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.last_updated != undefined && truckData.last_updated !== '') {\r\n      const lastUpdate = new Date(truckData.last_updated);\r\n      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);\r\n\r\n      if (daysSinceUpdate > 7) {\r\n        issues.push('Data is more than 7 days old');\r\n        score -= 10;\r\n      } else if (daysSinceUpdate > 3) {\r\n        issues.push('Data is more than 3 days old');\r\n        score -= 5;\r\n      }\r\n    }\r\n    return score;\r\n  }\r\n\r\n  assessTruckData(truckData: TruckData): { score: number; issues: string[] } {\r\n    const issues: string[] = [];\r\n    let score = 100;\r\n\r\n    score = this.assessBasicInfo(truckData, issues, score);\r\n    score = this.assessLocationInfo(truckData, issues, score);\r\n    score = this.assessContactInfo(truckData, issues, score);\r\n    score = this.assessOperatingHours(truckData, issues, score);\r\n    score = this.assessMenuInfo(truckData, issues, score);\r\n    score = this.assessLastUpdated(truckData, issues, score);\r\n\r\n    return {\r\n      score: Math.max(0, score) / 100,\r\n      issues,\r\n    };\r\n  }\r\n\r\n  private validateMenuCategory(category: MenuCategory, categoryIndex: number, issues: string[]): void {\r\n    if (category.category == undefined || category.category.trim().length === 0) {\r\n      issues.push(`Menu category ${categoryIndex + 1} missing name`);\r\n    }\r\n  }\r\n\r\n  private validateMenuItems(category: MenuCategory, issues: string[]): void {\r\n    if (category.items == undefined || category.items.length === 0) {\r\n      issues.push(`Menu category \"${category.category ?? 'Unknown'}\" has no items`);\r\n    } else {\r\n      for (const [itemIndex, item] of category.items.entries()) {\r\n        if (item.name == undefined || item.name.trim().length === 0) {\r\n          issues.push(`Menu item ${itemIndex + 1} in \"${category.category ?? 'Unknown'}\" missing name`);\r\n        }\r\n        if (typeof item.price !== 'number' || item.price <= 0) {\r\n          issues.push(`Menu item \"${item.name ?? 'Unknown'}\" has invalid price`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateMenuData(menu: MenuCategory[]): string[] {\r\n    const issues: string[] = [];\r\n\r\n    for (const [categoryIndex, category] of menu.entries()) {\r\n      this.validateMenuCategory(category, categoryIndex, issues);\r\n      this.validateMenuItems(category, issues);\r\n    }\r\n\r\n    return issues;\r\n  }\r\n  private isValidPhone(phone: string): boolean {\r\n    // Regex for phone number validation. Not vulnerable to super-linear runtime due to backtracking.\r\n    // Accepts +, digits, spaces, dashes, and parentheses. At least 10 digits.\r\n    const phoneRegex = /^\\+?[\\d\\s\\-()]{10,}$/;\r\n    return phoneRegex.test(phone);\r\n  }\r\n  private isValidEmail(email: string): boolean {\r\n    // Regex for email validation optimized to avoid backtracking\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]{2,}$/;\r\n    return emailRegex.test(email);\r\n  }\r\n}\r\n\r\ninterface GeminiLocationData {\r\n  address: string;\r\n  city: string;\r\n  state: string;\r\n  coordinates: {\r\n    lat?: number;\r\n    lng?: number;\r\n  };\r\n  confidence: number;\r\n}\r\n\r\ninterface GeminiOperatingHours {\r\n  monday: { open: string; close: string; closed: boolean };\r\n  tuesday: { open: string; close: string; closed: boolean };\r\n  wednesday: { open: string; close: string; closed: boolean };\r\n  thursday: { open: string; close: string; closed: boolean };\r\n  friday: { open: string; close: string; closed: boolean };\r\n  saturday: { open: string; close: string; closed: boolean };\r\n  sunday: { open: string; close: string; closed: boolean };\r\n}\r\n\r\ninterface GeminiSentimentAnalysis {\r\n  sentiment: 'positive' | 'negative' | 'neutral';\r\n  score: number;\r\n  key_topics: string[];\r\n  summary: string;\r\n}\r\n\r\nexport class GeminiDataProcessor {\r\n  private _apiKey: string;\r\n  private _baseUrl: string;\r\n  private requestCount: number;\r\n  private tokenCount: number;\r\n  private dailyLimit: { requests: number; tokens: number };\r\n\r\n  constructor(apiKey: string) {\r\n    this._apiKey = apiKey;\r\n    this._baseUrl = 'https://generativelanguage.googleapis.com/v1beta';\r\n    this.requestCount = 0;\r\n    this.tokenCount = 0;\r\n    this.dailyLimit = { requests: 1500, tokens: 32_000 };\r\n  }\r\n  async processMenuData(rawMenuText: string): Promise<{ categories: MenuCategory[] }> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following food truck menu text and return a structured JSON format:\r\n        \r\n        ${rawMenuText}\r\n        \r\n        Return format:\r\n        {\r\n          \"categories\": [\r\n            {\r\n              \"name\": \"category_name\",\r\n              \"items\": [\r\n                {\r\n                  \"name\": \"item_name\",\r\n                  \"description\": \"item_description\",\r\n                  \"price\": 0.00,\r\n                  \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", etc.]\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n        \r\n        Only return valid JSON, no additional text.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      // Ensure type safety for parsed response\r\n      const parsed = JSON.parse(response);\r\n      if (!parsed || typeof parsed !== 'object' || !('categories' in parsed)) {\r\n        throw new Error('Invalid Gemini menu response');\r\n      }\r\n      return parsed as { categories: MenuCategory[] };\r\n    } catch (error) {\r\n      console.error('Error processing menu data with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async extractLocationFromText(text: string): Promise<GeminiLocationData> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Extract location information from the following text and return structured data:\r\n        \r\n        \"${text}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"address\": \"full_address\",\r\n          \"city\": \"city_name\",\r\n          \"state\": \"state\",\r\n          \"coordinates\": {\r\n            \"lat\": 0.0,\r\n            \"lng\": 0.0\r\n          },\r\n          \"confidence\": 0.95\r\n        }\r\n        \r\n        If coordinates cannot be determined, set them to undefined. Only return valid JSON.\r\n      `;\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsedResponse: unknown = JSON.parse(response);\r\n      const validatedResponse = this.validateGeminiLocationResponse(parsedResponse);\r\n      return validatedResponse;\r\n    } catch (error) {\r\n      console.error('Error extracting location with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private validateGeminiLocationResponse(parsedResponse: unknown): GeminiLocationData {\r\n    if (\r\n      parsedResponse == undefined ||\r\n      typeof parsedResponse !== 'object' ||\r\n      !('coordinates' in parsedResponse) ||\r\n      typeof (parsedResponse as Record<string, unknown>).coordinates !== 'object'\r\n    ) {\r\n      throw new Error('Invalid Gemini location response');\r\n    }\r\n    const coordinates = (parsedResponse as { coordinates?: { lat?: unknown; lng?: unknown } }).coordinates;\r\n    if (coordinates && typeof coordinates === 'object') {\r\n      if (typeof coordinates.lat !== 'number') {\r\n        (coordinates as { lat?: number | undefined }).lat = undefined;\r\n      }\r\n      if (typeof coordinates.lng !== 'number') {\r\n        (coordinates as { lng?: number | undefined }).lng = undefined;\r\n      }\r\n    }\r\n    return parsedResponse as GeminiLocationData;\r\n  }\r\n\r\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiOperatingHours> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following operating hours text and return standardized format:\r\n        \r\n        \"${hoursText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n        }\r\n          Use 24-hour format. If closed on a day, set \"closed\": true and omit open/close times.\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsed = JSON.parse(response);\r\n      if (parsed == undefined || typeof parsed !== 'object') {\r\n        throw new Error('Invalid Gemini hours response');\r\n      }\r\n      return parsed as GeminiOperatingHours;\r\n    } catch (error) {\r\n      console.error('Error standardizing hours with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async analyzeSentiment(reviewText: string): Promise<GeminiSentimentAnalysis> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Analyze the sentiment of this food truck review and extract key insights:\r\n        \r\n        \"${reviewText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"sentiment\": \"positive|negative|neutral\",\r\n          \"score\": 0.85,\r\n          \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\"],\r\n          \"summary\": \"brief_summary_of_review\"\r\n        }\r\n          Score should be between 0 (very negative) and 1 (very positive).\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsed = JSON.parse(response);\r\n      if (parsed == undefined || typeof parsed !== 'object') {\r\n        throw new Error('Invalid Gemini sentiment response');\r\n      }\r\n      return parsed as GeminiSentimentAnalysis;\r\n    } catch (error) {\r\n      console.error('Error analyzing sentiment with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async makeGeminiRequest(prompt: string): Promise<string> {\r\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay\r\n    return this.getMockGeminiResponse(prompt);\r\n  }\r\n\r\n  private getMockGeminiResponse(prompt: string): string {\r\n    if (prompt.includes('menu text')) {\r\n      return JSON.stringify({\r\n        categories: [\r\n          {\r\n            name: 'Burgers',\r\n            items: [\r\n              {\r\n                name: 'Classic Cheeseburger',\r\n                description: 'Beef patty with cheese, lettuce, tomato',\r\n                price: 12.99,\r\n                dietary_tags: [],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      });\r\n    } else if (prompt.includes('location information')) {\r\n      return JSON.stringify({\r\n        address: '123 Market St, San Francisco, CA 94105',\r\n        city: 'San Francisco',\r\n        state: 'CA',\r\n        coordinates: {\r\n          lat: 37.7749,\r\n          lng: -122.4194,\r\n        },\r\n        confidence: 0.95,\r\n      });\r\n    } else if (prompt.includes('operating hours')) {\r\n      return JSON.stringify({\r\n        monday: { open: '11:00', close: '15:00', closed: false },\r\n        tuesday: { open: '11:00', close: '15:00', closed: false },\r\n        wednesday: { open: '11:00', close: '15:00', closed: false },\r\n        thursday: { open: '11:00', close: '15:00', closed: false },\r\n        friday: { open: '11:00', close: '20:00', closed: false },\r\n        saturday: { open: '12:00', close: '20:00', closed: false },\r\n        sunday: { open: '12:00', close: '16:00', closed: false },\r\n      });\r\n    } else if (prompt.includes('sentiment')) {\r\n      return JSON.stringify({\r\n        sentiment: 'positive',\r\n        score: 0.85,\r\n        key_topics: ['food_quality', 'service'],\r\n        summary: 'Customer enjoyed the food and service',\r\n      });\r\n    }\r\n    return '{\"processed\": true}';\r\n  }\r\n\r\n  private canMakeRequest(): boolean {\r\n    return this.requestCount < this.dailyLimit.requests && this.tokenCount < this.dailyLimit.tokens;\r\n  }\r\n\r\n  private updateUsageCounters(requests: number, tokens: number): void {\r\n    this.requestCount += requests;\r\n    this.tokenCount += tokens;\r\n  }\r\n\r\n  getUsageStats(): {\r\n    requests: { used: number; limit: number; remaining: number };\r\n    tokens: { used: number; limit: number; remaining: number };\r\n  } {\r\n    return {\r\n      requests: {\r\n        used: this.requestCount,\r\n        limit: this.dailyLimit.requests,\r\n        remaining: this.dailyLimit.requests - this.requestCount,\r\n      },\r\n      tokens: {\r\n        used: this.tokenCount,\r\n        limit: this.dailyLimit.tokens,\r\n        remaining: this.dailyLimit.tokens - this.tokenCount,\r\n      },\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":45,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":45,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-cleanup\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1845,1848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1845,1848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3529,3532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3529,3532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { BatchCleanupService } from '@/lib/data-quality/batchCleanup';\r\nimport { DuplicatePreventionService } from '@/lib/data-quality/duplicatePrevention';\r\n\r\nexport interface DataCleanupRequestBody {\r\n  action: string;\r\n  options?: {\r\n    batchSize?: number;\r\n    dryRun?: boolean;\r\n    operations?: string[];\r\n    truckData?: Record<string, unknown>;\r\n    targetId?: string;\r\n    sourceId?: string;\r\n  };\r\n}\r\n\r\nexport async function handlePostRequest(body: DataCleanupRequestBody): Promise<NextResponse> {\r\n  const { action, options = {} } = body;\r\n\r\n  switch (action) {\r\n    case 'full-cleanup': {\r\n      return await handleFullCleanup(options);\r\n    }\r\n    case 'check-duplicates': {\r\n      return await handleCheckDuplicates(options);\r\n    }\r\n    case 'merge-duplicates': {\r\n      return await handleMergeDuplicates(options);\r\n    }\r\n    case 'dry-run': {\r\n      return await handleDryRun(options);\r\n    }\r\n    default: {\r\n      return NextResponse.json(\r\n        { success: false, error: `Unknown action: ${action}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport async function handleGetRequest(request: NextRequest): Promise<NextResponse> {\r\n  const { searchParams } = new URL(request.url);\r\n  const action = searchParams.get('action');\r\n\r\n  switch (action) {\r\n    case 'status': {\r\n      return await handleGetStatus();\r\n    }\r\n    case 'preview': {\r\n      return await handleGetPreview();\r\n    }\r\n    default: {\r\n      return await handleGetDefault();\r\n    }\r\n  }\r\n}\r\n\r\nexport async function handleFullCleanup(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\r\n  const result = await BatchCleanupService.runFullCleanup({\r\n    batchSize: options?.batchSize ?? 50,\r\n    dryRun: options?.dryRun ?? false,\r\n    operations: options?.operations as any\r\n  });\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    action: 'full-cleanup',\r\n    result,\r\n    message: `Cleanup completed: ${result.summary.trucksImproved} trucks improved, ${result.summary.duplicatesRemoved} duplicates removed`\r\n  });\r\n}\r\n\r\nexport async function handleCheckDuplicates(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\r\n  const { truckData } = options ?? {};\r\n  if (!truckData) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Missing truckData for duplicate check' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    action: 'check-duplicates',\r\n    result: duplicateCheck\r\n  });\r\n}\r\n\r\nexport async function handleMergeDuplicates(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\r\n  const { targetId, sourceId } = options ?? {};\r\n  if (targetId === undefined || sourceId === undefined) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Missing targetId or sourceId for merge operation' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const mergedTruck = await DuplicatePreventionService.mergeDuplicates(targetId, sourceId);\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    action: 'merge-duplicates',\r\n    result: mergedTruck,\r\n    message: `Successfully merged truck ${sourceId} into ${targetId}`\r\n  });\r\n}\r\n\r\nexport async function handleDryRun(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\r\n  const result = await BatchCleanupService.runFullCleanup({\r\n    ...options,\r\n    operations: options?.operations as any,\r\n    dryRun: true\r\n  });\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    action: 'dry-run',\r\n    result,\r\n    message: 'Dry run completed - no changes made to database'\r\n  });\r\n}\r\n\r\nexport  function handleGetStatus(): Promise<NextResponse> {\r\n  return NextResponse.json({\r\n    success: true,\r\n    status: {\r\n      available_operations: [\r\n        'remove_placeholders',\r\n        'normalize_phone',\r\n        'fix_coordinates',\r\n        'update_quality_scores',\r\n        'merge_duplicates'\r\n      ],\r\n      default_batch_size: 50,\r\n      supports_dry_run: true\r\n    }\r\n  });\r\n}\r\n\r\nexport async function handleGetPreview(): Promise<NextResponse> {\r\n  const result = await BatchCleanupService.runFullCleanup({\r\n    batchSize: 10,\r\n    dryRun: true\r\n  });\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    preview: {\r\n      estimated_improvements: result.summary.trucksImproved,\r\n      estimated_duplicates: result.summary.duplicatesRemoved,\r\n      operations: result.operations.map(op => ({\r\n        type: op.type,\r\n        description: op.description,\r\n        affected_count: op.affectedCount\r\n      }))\r\n    }\r\n  });\r\n}\r\n\r\nexport  function handleGetDefault(): Promise<NextResponse> {\r\n  return NextResponse.json({\r\n    success: true,\r\n    endpoints: [\r\n      'GET /api/admin/data-cleanup?action=status - Get cleanup system status',\r\n      'GET /api/admin/data-cleanup?action=preview - Preview cleanup changes',\r\n      'POST /api/admin/data-cleanup - Run cleanup operations'\r\n    ],\r\n    actions: [\r\n      'full-cleanup - Run all cleanup operations',\r\n      'check-duplicates - Check if truck data is duplicate',\r\n      'merge-duplicates - Merge two duplicate trucks',\r\n      'dry-run - Preview changes without making them'\r\n    ]\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-quality\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QualityThresholds' is defined but never used.","line":4,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QualityAssessment' is defined but never used.","line":11,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QualityCategory' is defined but never used.","line":24,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limit' is assigned a value but never used.","line":34,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":14},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'limit' variable.","line":34,"column":9,"nodeType":"Identifier","messageId":"unusedVariable","endLine":34,"endColumn":14},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"limit\".","line":34,"column":9,"nodeType":null,"messageId":"removeAssignment","endLine":34,"endColumn":14},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":41,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[969,977],"text":"truckId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[970,977],"text":"(truckId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[969,977],"text":"!Boolean(truckId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":54,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":58,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":58,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1475,1482],"text":"(Boolean(truckId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":61,"column":39,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":61,"endColumn":46},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":64,"column":14,"nodeType":"AwaitExpression","messageId":"await","endLine":64,"endColumn":44,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1716,1721],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"sonarjs/no-invalid-await","severity":2,"message":"Refactor this redundant 'await' on a non-promise.","line":64,"column":14,"nodeType":"AwaitExpression","messageId":"refactorAwait","endLine":64,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number | undefined`.","line":64,"column":38,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":64,"endColumn":43},{"ruleId":"unicorn/prefer-default-parameters","severity":2,"message":"Prefer default parameters over reassignment.","line":130,"column":3,"nodeType":"VariableDeclaration","messageId":"preferDefaultParameters","endLine":130,"endColumn":35,"suggestions":[{"messageId":"preferDefaultParametersSuggest","fix":{"range":[3404,3459],"text":"batchLimit = 100) {\r\n"},"data":{},"desc":"Replace reassignment with default parameter."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'truckData' is assigned a value but never used.","line":149,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":22},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'truckData' variable.","line":149,"column":13,"nodeType":"Identifier","messageId":"unusedVariable","endLine":149,"endColumn":22},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"truckData\".","line":149,"column":13,"nodeType":null,"messageId":"removeAssignment","endLine":149,"endColumn":22}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { FoodTruckService, supabase } from '@/lib/supabase';\r\n\r\ninterface QualityThresholds {\r\n  excellent: number;\r\n  good: number;\r\n  fair: number;\r\n  poor: number;\r\n}\r\n\r\ninterface QualityAssessment {\r\n  score: number;\r\n  breakdown: Record<string, number>;\r\n  recommendations: string[];\r\n}\r\n\r\ninterface TruckData {\r\n  id: string;\r\n  name: string;\r\n  data_quality_score: number;\r\n  verification_status: string;\r\n}\r\n\r\ninterface QualityCategory {\r\n  label: string;\r\n  color: string;\r\n  description: string;\r\n}\r\n\r\nexport async function handleGetRequest(request: NextRequest): Promise<NextResponse> {\r\n  const { searchParams } = new URL(request.url);\r\n  const action = searchParams.get('action');\r\n  const truckId = searchParams.get('truckId');\r\n  const limit = searchParams.get('limit');\r\n\r\n  switch (action) {\r\n    case 'stats': {\r\n      return await handleStatsAction();\r\n    }\r\n    case 'assess': {\r\n      if (!truckId) {\r\n        return NextResponse.json({ success: false, error: 'Missing truckId for assess action' }, { status: 400 });\r\n      }\r\n      return await handleAssessAction(truckId);\r\n    }\r\n    default: {\r\n      return await handleDefaultGetAction();\r\n    }\r\n  }\r\n}\r\n\r\nexport async function handlePostRequest(request: NextRequest): Promise<NextResponse> {\r\n  const body = await request.json();\r\n  const { action, truckId, limit } = body;\r\n\r\n  switch (action) {\r\n    case 'update-single': {\r\n      if (!truckId) {\r\n        return NextResponse.json({ success: false, error: 'Missing truckId for update-single action' }, { status: 400 });\r\n      }\r\n      return await handleUpdateSingle(truckId);\r\n    }\r\n    case 'batch-update': {\r\n      return await handleBatchUpdate(limit);\r\n    }\r\n    case 'recalculate-all': {\r\n      return await handleRecalculateAll();\r\n    }\r\n    default: {\r\n      return NextResponse.json({ success: false, error: `Unknown action: ${action}` }, { status: 400 });\r\n    }\r\n  }\r\n}\r\n\r\nasync function handleStatsAction() {\r\n  const qualityStatsRaw = await FoodTruckService.getDataQualityStats();\r\n\r\n  const qualityStats = qualityStatsRaw as Record<string, unknown>;\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: {\r\n      ...qualityStats,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\nasync function handleAssessAction(truckId: string) {\r\n  const truckRaw = await FoodTruckService.getTruckById(truckId);\r\n\r\n  const truck = truckRaw as TruckData;\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: {\r\n      truckId,\r\n      truckName: truck.name,\r\n      currentScore: truck.data_quality_score,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\nasync function handleDefaultGetAction() {\r\n  const qualityStats = await FoodTruckService.getDataQualityStats();\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: qualityStats\r\n  });\r\n}\r\n\r\nasync function handleUpdateSingle(truckId: string) {\r\n  const updatedTruck = await FoodTruckService.getTruckById(truckId);\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Quality score updated successfully',\r\n    data: {\r\n      truckId: updatedTruck.id,\r\n      truckName: updatedTruck.name,\r\n      newScore: updatedTruck.data_quality_score,\r\n      verificationStatus: updatedTruck.verification_status,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\n function handleBatchUpdate(limit?: number) {\r\n  const batchLimit = limit ?? 100;\r\n  \r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Batch quality score update completed',\r\n    data: {\r\n      limit: batchLimit,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\nasync function handleRecalculateAll() {\r\n  const { trucks } = await FoodTruckService.getAllTrucks(1000, 0);\r\n  let updated = 0;\r\n  let errors = 0;\r\n\r\n  for (const truck of trucks) {\r\n    try {\r\n      const truckData = truck as TruckData;\r\n      updated++;\r\n    } catch (error: unknown) {\r\n      const truckData = truck as TruckData;\r\n      console.error(`Failed to update truck ${truckData.id}:`, error);\r\n      errors++;\r\n    }\r\n  }\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'Quality score recalculation completed',\r\n    data: {\r\n      totalTrucks: trucks.length,\r\n      updated,\r\n      errors,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n}\r\n\r\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader == undefined) return false;\r\n\r\n    const token = authHeader.replace('Bearer ', '');\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n    \r\n    if (error || !user) return false;\r\n\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\helpers.ts","messages":[{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":30,"column":127,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":30,"endColumn":153},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3081,3084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3081,3084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":91,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":91,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":91,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":91,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":91,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `any` value.","line":91,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .limit on an `any` value.","line":91,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":95,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":95,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":95,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4491,4494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4491,4494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":130,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":136,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":130,"column":41,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":130,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":130,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":54},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":137,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":137,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4748,4758],"text":"(Boolean(oauthError))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":137,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":42}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { OAuthStatus } from './types';\r\n\r\nexport async function handleGetRequest(_request: NextRequest) {\r\n  const status = await getOAuthStatus();\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    ...status,\r\n    legacy_format: {\r\n      oauth_status: status.overall_status,\r\n      message: getStatusMessage(status.overall_status),\r\n      configuration_steps: status.overall_status === 'ready' ? undefined : [\r\n        '1. Go to Supabase Dashboard > Authentication > Providers',\r\n        '2. Enable Google provider',\r\n        '3. Add Google OAuth Client ID and Secret',\r\n        '4. Configure redirect URLs',\r\n        '5. Test OAuth flow'\r\n      ]\r\n    }\r\n  });\r\n}\r\n\r\nexport  function handlePostRequest(_request: NextRequest) {\r\n  const baseUrl = process.env.NODE_ENV === 'production'\r\n    ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\r\n    : 'http://localhost:3000';\r\n\r\n  const testUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/auth/v1/authorize?provider=google&redirect_to=${encodeURIComponent(`${baseUrl}/auth/callback`)}`;\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'OAuth test URL generated',\r\n    test_url: testUrl,\r\n    environment: process.env.NODE_ENV ?? 'development',\r\n    instructions: [\r\n      '1. Open the test_url in a new browser tab',\r\n      '2. Complete Google OAuth flow',\r\n      '3. Verify redirect to admin dashboard',\r\n      '4. Check for proper role assignment'\r\n    ],\r\n    manual_test_steps: [\r\n      'Navigate to /login page',\r\n      'Click Google login button',\r\n      'Complete OAuth flow',\r\n      'Verify admin access'\r\n    ],\r\n    automation_commands: [\r\n      'npm run oauth:verify - Check configuration',\r\n      'npm run oauth:test:dev - Test development flow',\r\n      'npm run oauth:test:prod - Test production flow'\r\n    ]\r\n  });\r\n}\r\n\r\nasync function getOAuthStatus(): Promise<OAuthStatus> {\r\n  const status: OAuthStatus = {\r\n    timestamp: new Date().toISOString(),\r\n    environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\r\n    supabase: {\r\n      connected: false,\r\n      projectId: 'zkwliyjjkdnigizidlln'\r\n    },\r\n    environment_variables: {\r\n      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL != undefined,\r\n      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY != undefined,\r\n      supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY != undefined\r\n    },\r\n    oauth_flow: {\r\n      loginPageExists: true,\r\n      callbackRouteExists: true,\r\n      authProviderConfigured: false\r\n    },\r\n    recommendations: [],\r\n    overall_status: 'not_configured'\r\n  };\r\n\r\n  await checkSupabaseConnection(status, supabase);\r\n  await checkSupabaseAuthSettings(status);\r\n  await testOAuthProvider(status, supabase);\r\n\r\n  status.recommendations = generateRecommendations(status);\r\n  status.overall_status = determineOverallStatus(status);\r\n\r\n  return status;\r\n}\r\n\r\nasync function checkSupabaseConnection(status: OAuthStatus, supabase: any) {\r\n  try {\r\n    const { error } = await supabase.from('profiles').select('count').limit(1);\r\n    if (error == undefined) {\r\n      status.supabase.connected = true;\r\n    } else {\r\n      status.supabase.error = error.message;\r\n    }\r\n  } catch (error) {\r\n    status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\r\n  }\r\n}\r\n\r\nasync function checkSupabaseAuthSettings(status: OAuthStatus) {\r\n  try {\r\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n    if (supabaseUrl != undefined && supabaseUrl !== '') {\r\n      const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\r\n      if (settingsResponse.ok === true) {\r\n        const settings = await settingsResponse.json() as {\r\n          external?: { google?: boolean };\r\n          disable_signup?: boolean;\r\n          autoconfirm?: boolean;\r\n        };\r\n        status.supabase.authSettings = {\r\n          googleEnabled: settings.external?.google ?? false,\r\n          signupEnabled: settings.disable_signup !== true,\r\n          autoconfirm: settings.autoconfirm ?? false\r\n        };\r\n        if (settings.external?.google != undefined) {\r\n          status.oauth_flow.authProviderConfigured = true;\r\n        }\r\n      }\r\n    }\r\n  } catch {\r\n    console.info('Auth settings endpoint requires authentication (normal)');\r\n  }\r\n}\r\n\r\nasync function testOAuthProvider(status: OAuthStatus, supabase: any) {\r\n  try {\r\n    const { error: oauthError } = await supabase.auth.signInWithOAuth({\r\n      provider: 'google',\r\n      options: {\r\n        redirectTo: 'http://localhost:3000/auth/callback',\r\n        skipBrowserRedirect: true\r\n      }\r\n    });\r\n    if (!oauthError || oauthError.message !== 'Provider not found') {\r\n      status.oauth_flow.authProviderConfigured = true;\r\n    }\r\n  } catch {\r\n    console.info('OAuth provider test failed (may be normal)');\r\n  }\r\n}\r\n\r\nfunction generateRecommendations(status: OAuthStatus): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  if (!status.environment_variables.supabaseUrl) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseAnonKey) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseServiceKey) {\r\n    recommendations.push('❌ Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\r\n  }\r\n\r\n  if (!status.supabase.connected) {\r\n    recommendations.push('❌ Fix Supabase connection issue');\r\n    if (status.supabase.error != undefined && status.supabase.error !== '') {\r\n      recommendations.push(`   Error: ${status.supabase.error}`);\r\n    }\r\n  }\r\n\r\n  if (status.supabase.authSettings == undefined) {\r\n    recommendations.push('🔧 Configure Google OAuth in Supabase Dashboard', '   1. Create Google Cloud Console OAuth credentials', '   2. Add credentials to Supabase Auth settings');\r\n  } else {\r\n    if (status.supabase.authSettings.googleEnabled === true) {\r\n      recommendations.push('✅ Google OAuth provider is enabled');\r\n    } else {\r\n      recommendations.push('🔧 Enable Google OAuth provider in Supabase Dashboard', '   Go to: Authentication > Providers > Google');\r\n    }\r\n  }\r\n\r\n  if (status.overall_status === 'ready') {\r\n    recommendations.push('🎉 OAuth configuration is complete!', '✅ Test the login flow at /login');\r\n  }\r\n\r\n  if (recommendations.length > 1) {\r\n    recommendations.push('📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions', '🔧 Run: npm run oauth:verify for automated checks');\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\nfunction determineOverallStatus(status: OAuthStatus): 'ready' | 'partial' | 'not_configured' | 'error' {\r\n  if (status.supabase.connected !== true || (status.supabase.error != undefined && status.supabase.error !== '')) {\r\n    return 'error';\r\n  }\r\n\r\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\r\n  if (!envVarsComplete) {\r\n    return 'not_configured';\r\n  }\r\n\r\n  if (status.supabase.authSettings?.googleEnabled === true && status.oauth_flow.authProviderConfigured === true) {\r\n    return 'ready';\r\n  }\r\n\r\n  if (status.supabase.connected === true && envVarsComplete) {\r\n    return 'partial';\r\n  }\r\n\r\n  return 'not_configured';\r\n}\r\n\r\nfunction getStatusMessage(status: string): string {\r\n  switch (status) {\r\n    case 'ready': {\r\n      return 'Google OAuth is fully configured and ready to use';\r\n    }\r\n    case 'partial': {\r\n      return 'Basic configuration complete, OAuth provider needs setup';\r\n    }\r\n    case 'not_configured': {\r\n      return 'Google OAuth is not configured';\r\n    }\r\n    case 'error': {\r\n      return 'Configuration error detected';\r\n    }\r\n    default: {\r\n      return 'Unknown configuration status';\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextResponse'.","line":1,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[20,34],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'handleGetRequest' has too many lines (76). Maximum allowed is 50.","line":54,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":129,"endColumn":2},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handleGetRequest' has no 'await' expression.","line":54,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":54,"endColumn":39,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1268,1340],"text":"function handleGetRequest(request: NextRequest): Response"},"desc":"Remove 'async'."}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Method 'start' has too many lines (62). Maximum allowed is 50.","line":56,"column":5,"nodeType":"Property","messageId":"exceed","endLine":117,"endColumn":6},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":104,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":110,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `ReadableStreamDefaultController<any>` assigned to a parameter of type `ReadableStreamDefaultController<Uint8Array<ArrayBufferLike>>`.","line":106,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":106,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":133,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":133,"endColumn":38},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":291,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":291,"endColumn":40}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase, supabaseAdmin, ScrapingJobService, FoodTruckService } from '@/lib/supabase';\r\nimport { AdminEvent } from './types';\r\n\r\ninterface RealtimeMetrics {\r\n  scrapingJobs: {\r\n    active: number;\r\n    completed: number;\r\n    failed: number;\r\n    pending: number;\r\n  };\r\n  dataQuality: {\r\n    averageScore: number;\r\n    totalTrucks: number;\r\n    recentChanges: number;\r\n  };\r\n  systemHealth: {\r\n    status: 'healthy' | 'warning' | 'error';\r\n    uptime: number;\r\n    lastUpdate: string;\r\n  };\r\n}\r\n\r\nexport async function verifyAdminAccess(request: NextRequest): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader?.startsWith('Bearer ') !== true) {\r\n      return false;\r\n    }\r\n\r\n    const token = authHeader.slice(7);\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n\r\n    if (error || !user) {\r\n      return false;\r\n    }\r\n\r\n    if (!supabaseAdmin) {\r\n      return false;\r\n    }\r\n\r\n    const { data: profile } = await supabaseAdmin\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function handleGetRequest(request: NextRequest): Promise<Response> {\r\n  const stream = new ReadableStream({\r\n    start(controller) {\r\n      const encoder = new TextEncoder();\r\n\r\n      const connectionEvent: AdminEvent = {\r\n        id: generateEventId(),\r\n        type: 'heartbeat',\r\n        timestamp: new Date().toISOString(),\r\n        data: {\r\n          message: 'Real-time admin dashboard connected',\r\n          connectionId: generateEventId()\r\n        }\r\n      };\r\n      \r\n      controller.enqueue(encoder.encode(formatSSEMessage(connectionEvent)));\r\n\r\n      const handleHeartbeatEvent = async () => {\r\n        try {\r\n          const metrics = await fetchRealtimeMetrics();\r\n          const event: AdminEvent = {\r\n            id: generateEventId(),\r\n            type: 'heartbeat',\r\n            timestamp: new Date().toISOString(),\r\n            data: { ...metrics }\r\n          };\r\n\r\n          controller.enqueue(encoder.encode(formatSSEMessage(event)));\r\n        } catch (error) {\r\n          console.error('Error fetching realtime metrics:', error);\r\n\r\n          const errorEvent: AdminEvent = {\r\n            id: generateEventId(),\r\n            type: 'system_alert',\r\n            timestamp: new Date().toISOString(),\r\n            data: {\r\n              error: 'Failed to fetch metrics',\r\n              details: error instanceof Error ? error.message : 'Unknown error'\r\n            },\r\n            severity: 'error'\r\n          };\r\n\r\n          controller.enqueue(encoder.encode(formatSSEMessage(errorEvent)));\r\n        }\r\n      };\r\n\r\n      const intervalId = setInterval(() => {\r\n        void handleHeartbeatEvent();\r\n      }, 5000);\r\n\r\n      const changeMonitorId = setInterval(async () => {\r\n        try {\r\n          await monitorDataChanges(controller, encoder);\r\n        } catch (error) {\r\n          console.error('Error monitoring data changes:', error);\r\n        }\r\n      }, 10_000);\r\n\r\n      request.signal.addEventListener('abort', () => {\r\n        clearInterval(intervalId);\r\n        clearInterval(changeMonitorId);\r\n        controller.close();\r\n      });\r\n    }\r\n  });\r\n\r\n  return new Response(stream, {\r\n    headers: {\r\n      'Content-Type': 'text/event-stream',\r\n      'Cache-Control': 'no-cache',\r\n      'Connection': 'keep-alive',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Headers': 'Cache-Control'\r\n    }\r\n  });\r\n}\r\n\r\nexport async function handlePostRequest(request: NextRequest): Promise<Response> {\r\n  try {\r\n    const body = await request.json();\r\n    const { action } = body as { action: string };\r\n\r\n    switch (action) {\r\n      case 'health_check': {\r\n        return await handleHealthCheck();\r\n      }\r\n\r\n      case 'trigger_test_event': {\r\n        return handleTriggerTestEvent();\r\n      }\r\n\r\n      default: {\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'Unknown action',\r\n          available_actions: ['health_check', 'trigger_test_event']\r\n        }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Realtime events POST error:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'Internal server error',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\nasync function fetchRealtimeMetrics(): Promise<RealtimeMetrics> {\r\n  try {\r\n    const recentJobs = await ScrapingJobService.getJobsByStatus('all');\r\n    const typedJobs = recentJobs as Array<{ status?: string }>;\r\n    const scrapingMetrics = {\r\n      active: typedJobs.filter(job => job.status === 'running').length,\r\n      completed: typedJobs.filter(job => job.status === 'completed').length,\r\n      failed: typedJobs.filter(job => job.status === 'failed').length,\r\n      pending: typedJobs.filter(job => job.status === 'pending').length\r\n    };\r\n\r\n    const qualityStats = await FoodTruckService.getDataQualityStats();\r\n    const dataQualityMetrics = {\r\n      averageScore: qualityStats.avg_quality_score ?? 0,\r\n      totalTrucks: qualityStats.total_trucks ?? 0,\r\n      recentChanges: 0\r\n    };\r\n\r\n    const systemHealth = {\r\n      status: 'healthy' as const,\r\n      uptime: process.uptime(),\r\n      lastUpdate: new Date().toISOString()\r\n    };\r\n\r\n    return {\r\n      scrapingJobs: scrapingMetrics,\r\n      dataQuality: dataQualityMetrics,\r\n      systemHealth\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching realtime metrics:', error);\r\n    return {\r\n      scrapingJobs: { active: 0, completed: 0, failed: 0, pending: 0 },\r\n      dataQuality: { averageScore: 0, totalTrucks: 0, recentChanges: 0 },\r\n      systemHealth: {\r\n        status: 'error',\r\n        uptime: 0,\r\n        lastUpdate: new Date().toISOString()\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nasync function sendScrapingUpdateEvent(\r\n  controller: ReadableStreamDefaultController<Uint8Array>,\r\n  encoder: TextEncoder\r\n): Promise<void> {\r\n  const recentJobs = await ScrapingJobService.getJobsByStatus('all');\r\n\r\n  if (recentJobs.length > 0) {\r\n    const event: AdminEvent = {\r\n      id: generateEventId(),\r\n      type: 'scraping_update',\r\n      timestamp: new Date().toISOString(),\r\n      data: {\r\n        recentJobs: recentJobs.map((job: unknown) => {\r\n          const jobData = job as { id?: string; status?: string; started_at?: string; completed_at?: string };\r\n          return {\r\n            id: jobData.id,\r\n            status: jobData.status,\r\n            started_at: jobData.started_at,\r\n            completed_at: jobData.completed_at\r\n          };\r\n        }),\r\n        count: recentJobs.length\r\n      },\r\n      severity: 'info'\r\n    };\r\n\r\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\r\n  }\r\n}\r\n\r\nasync function sendDataQualityChangeEvent(\r\n  controller: ReadableStreamDefaultController<Uint8Array>,\r\n  encoder: TextEncoder\r\n): Promise<void> {\r\n  const recentTrucks = await FoodTruckService.getAllTrucks(10, 0);\r\n  const recentlyUpdated = recentTrucks.trucks.filter(truck => {\r\n    const updatedAt = new Date(truck.updated_at);\r\n    const oneMinuteAgo = new Date(Date.now() - 60_000);\r\n    return updatedAt > oneMinuteAgo;\r\n  });\r\n\r\n  if (recentlyUpdated.length > 0) {\r\n    const event: AdminEvent = {\r\n      id: generateEventId(),\r\n      type: 'data_quality_change',\r\n      timestamp: new Date().toISOString(),\r\n      data: {\r\n        updatedTrucks: recentlyUpdated.map(truck => ({\r\n          id: truck.id,\r\n          name: truck.name,\r\n          data_quality_score: truck.data_quality_score,\r\n          updated_at: truck.updated_at\r\n        })),\r\n        count: recentlyUpdated.length\r\n      },\r\n      severity: 'info'\r\n    };\r\n\r\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\r\n  }\r\n}\r\n\r\nasync function monitorDataChanges(\r\n  controller: ReadableStreamDefaultController<Uint8Array>,\r\n  encoder: TextEncoder\r\n): Promise<void> {\r\n  try {\r\n    await sendScrapingUpdateEvent(controller, encoder);\r\n    await sendDataQualityChangeEvent(controller, encoder);\r\n  } catch (error) {\r\n    console.error('Error monitoring data changes:', error);\r\n  }\r\n}\r\n\r\nfunction formatSSEMessage(event: AdminEvent): string {\r\n  return `id: ${event.id}\\nevent: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`;\r\n}\r\n\r\nfunction generateEventId(): string {\r\n  return `${Date.now()}-${Math.random().toString(36).slice(2, 11)}`;\r\n}\r\n\r\nasync function handleHealthCheck(): Promise<Response> {\r\n  const metrics = await fetchRealtimeMetrics();\r\n  return new Response(JSON.stringify({\r\n    success: true,\r\n    status: 'healthy',\r\n    metrics,\r\n    timestamp: new Date().toISOString()\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n\r\nfunction handleTriggerTestEvent(): Response {\r\n  return new Response(JSON.stringify({\r\n    success: true,\r\n    message: 'Test event triggered',\r\n    timestamp: new Date().toISOString()\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextRequest'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[9,22],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'getScrapingMetrics' has too many lines (67). Maximum allowed is 50.","line":36,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":102,"endColumn":2},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is assigned a value but never used.","line":75,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":16},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'metrics' variable.","line":75,"column":9,"nodeType":"Identifier","messageId":"unusedVariable","endLine":75,"endColumn":16},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"metrics\".","line":75,"column":9,"nodeType":null,"messageId":"removeAssignment","endLine":75,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { ScrapingJobService, FoodTruckService, supabase } from '@/lib/supabase';\r\nimport { RealtimeMetrics } from './types';\r\n\r\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader == undefined) return false;\r\n\r\n    const token = authHeader.replace('Bearer ', '');\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n\r\n    if (error || !user) return false;\r\n\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function handleGetRequest(): Promise<NextResponse> {\r\n  const metrics = await getScrapingMetrics();\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: metrics,\r\n    timestamp: new Date().toISOString()\r\n  });\r\n}\r\n\r\nasync function getScrapingMetrics(): Promise<RealtimeMetrics> {\r\n  // Fetch real scraping metrics from database\r\n  const [allJobs, , recentTrucks] = await Promise.all([\r\n    ScrapingJobService.getAllJobs(100, 0), // Get last 100 jobs for metrics\r\n    ScrapingJobService.getJobsFromDate(new Date(Date.now() - 24 * 60 * 60 * 1000)), // Last 24 hours (unused but kept for potential future use)\r\n    FoodTruckService.getAllTrucks(1000, 0), // Get trucks for processing count\r\n  ]);\r\n\r\n  const totalRuns = allJobs.length;\r\n  const typedJobs = allJobs as Array<{ status?: string; started_at?: string; completed_at?: string }>;\r\n  const successfulRuns = typedJobs.filter(job => job.status === 'completed').length;\r\n  const failedRuns = typedJobs.filter(job => job.status === 'failed').length;\r\n\r\n  // Calculate average run time from completed jobs\r\n  const completedJobs = typedJobs.filter(job =>\r\n    job.status === 'completed' && job.started_at !== undefined && job.completed_at !== undefined\r\n  );\r\n\r\n  let totalRunTime = 0;\r\n  for (const job of completedJobs) {\r\n    const start = new Date(job.started_at ?? '').getTime();\r\n    const end = new Date(job.completed_at ?? '').getTime();\r\n    totalRunTime += (end - start) / 1000; // Convert to seconds\r\n  }\r\n\r\n  const averageRunTime = completedJobs.length > 0\r\n    ? Math.round(totalRunTime / completedJobs.length)\r\n    : 0;\r\n\r\n  // Count trucks processed today and new trucks\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n\r\n  const typedTrucks = recentTrucks.trucks as Array<{ created_at: string }>;\r\n  const newTrucksToday = typedTrucks.filter(truck => {\r\n    const createdAt = new Date(truck.created_at);\r\n    return createdAt >= today;\r\n  }).length;\r\n\r\n  const metrics = {\r\n    totalRuns,\r\n    successfulRuns,\r\n    failedRuns,\r\n    averageRunTime,\r\n    totalTrucksProcessed: recentTrucks.total,\r\n    newTrucksToday,\r\n  };\r\n\r\n  return {\r\n    scrapingJobs: {\r\n      active: typedJobs.filter(job => job.status === 'running').length,\r\n      completed: successfulRuns,\r\n      failed: failedRuns,\r\n      pending: typedJobs.filter(job => job.status === 'pending').length,\r\n    },\r\n    dataQuality: {\r\n      averageScore: 0, // Placeholder, actual calculation might be complex\r\n      totalTrucks: recentTrucks.total,\r\n      recentChanges: 0, // Placeholder\r\n    },\r\n    systemHealth: {\r\n      status: 'healthy',\r\n      uptime: process.uptime(),\r\n      lastUpdate: new Date().toISOString(),\r\n    },\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\handlers.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'handlePostRequest' has too many lines (52). Maximum allowed is 50.","line":113,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":164,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any[]` assigned to a parameter of type `{ metric_name: string; metric_value: number; rating: string; }[]`.","line":170,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":170,"endColumn":52}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\nimport { WebVitalMetric } from './types';\r\n\r\n/**\r\n * Get Web Vitals Analytics Data\r\n */\r\nexport function getRequestParams(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const days = Number.parseInt(searchParams.get('days') ?? '7');\r\n  const page = searchParams.get('page');\r\n  return { days, page };\r\n}\r\n\r\nexport async function fetchAndFilterMetrics(request: NextRequest) {\r\n  const { days, page } = getRequestParams(request);\r\n\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Database not available');\r\n  }\r\n\r\n  const startDate = new Date();\r\n  startDate.setDate(startDate.getDate() - days);\r\n\r\n  let query = supabaseAdmin\r\n    .from('web_vitals_metrics')\r\n    .select('*')\r\n    .gte('recorded_at', startDate.toISOString())\r\n    .order('recorded_at', { ascending: false });\r\n\r\n  if (page != undefined && page !== '') {\r\n    query = query.ilike('page_url', `%${page}%`);\r\n  }\r\n\r\n  const { data: metrics, error } = await query.limit(1000);\r\n\r\n  if (error) {\r\n    throw error;\r\n  }\r\n\r\n  return { metrics: metrics ?? [], days, startDate };\r\n}\r\n\r\n/**\r\n * Calculate summary statistics for metrics\r\n */\r\nexport function calculateMetricsSummary(metrics: { metric_name: string; metric_value: number; rating: string }[]) {\r\n  const metricTypes: ('LCP' | 'FID' | 'CLS' | 'FCP' | 'TTFB')[] = ['LCP', 'FID', 'CLS', 'FCP', 'TTFB'];\r\n  const summary: Record<string, {\r\n    count: number;\r\n    average: number | undefined;\r\n    median: number | undefined;\r\n    p75: number | undefined;\r\n    p95: number | undefined;\r\n    goodCount: number;\r\n    needsImprovementCount: number;\r\n    poorCount: number;\r\n  }> = {};\r\n\r\n  for (const metricName of metricTypes) {\r\n    const metricData = metrics.filter(m => m.metric_name === metricName);\r\n    \r\n    if (metricData.length === 0) {\r\n      summary[metricName] = {\r\n        count: 0,\r\n        average: undefined,\r\n        median: undefined,\r\n        p75: undefined,\r\n        p95: undefined,\r\n        goodCount: 0,\r\n        needsImprovementCount: 0,\r\n        poorCount: 0\r\n      };\r\n      continue;\r\n    }\r\n\r\n    const values = metricData.map(m => m.metric_value).sort((a, b) => a - b);\r\n    const ratings = metricData.map(m => m.rating);\r\n\r\n    summary[metricName] = {\r\n      count: metricData.length,\r\n      average: Math.round(values.reduce((sum: number, val: number) => sum + val, 0) / values.length),\r\n      median: getPercentile(values, 50),\r\n      p75: getPercentile(values, 75),\r\n      p95: getPercentile(values, 95),\r\n      goodCount: ratings.filter(r => r === 'good').length,\r\n      needsImprovementCount: ratings.filter(r => r === 'needs-improvement').length,\r\n      poorCount: ratings.filter(r => r === 'poor').length\r\n    };\r\n  }\r\n\r\n  return summary;\r\n}\r\n\r\n/**\r\n * Calculate percentile value from sorted array\r\n */\r\nexport function getPercentile(sortedValues: number[], percentile: number): number {\r\n  if (sortedValues.length === 0) return 0;\r\n  \r\n  const index = (percentile / 100) * (sortedValues.length - 1);\r\n  const lower = Math.floor(index);\r\n  const upper = Math.ceil(index);\r\n  \r\n  if (lower === upper) {\r\n    return Math.round(sortedValues[lower]);\r\n  }\r\n  \r\n  const weight = index - lower;\r\n  return Math.round(sortedValues[lower] * (1 - weight) + sortedValues[upper] * weight);\r\n}\r\n\r\nexport async function handlePostRequest(request: NextRequest) {\r\n  try {\r\n    const metric = await request.json() as WebVitalMetric;\r\n\r\n    // Validate metric data\r\n    if (!metric.name || typeof metric.value !== 'number' || !metric.url) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid metric data' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (supabaseAdmin) {\r\n      try {\r\n        const { error } = await supabaseAdmin\r\n          .from('web_vitals_metrics')\r\n          .insert({\r\n            metric_name: metric.name,\r\n            metric_value: metric.value,\r\n            rating: metric.rating,\r\n            page_url: metric.url,\r\n            user_agent: metric.userAgent,\r\n            recorded_at: new Date(metric.timestamp).toISOString()\r\n          });\r\n\r\n        if (error) {\r\n          console.warn('Failed to store web vital metric:', error);\r\n          // Don't fail the request - metrics collection should be non-blocking\r\n        }\r\n      } catch (dbError) {\r\n        console.warn('Database error storing web vital:', dbError);\r\n      }\r\n    }\r\n\r\n    // Log performance issues for monitoring\r\n    if (metric.rating === 'poor') {\r\n      console.warn(`Poor ${metric.name} performance detected:`, {\r\n        value: metric.value,\r\n        url: metric.url,\r\n        timestamp: new Date(metric.timestamp).toISOString()\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error('Web vitals endpoint error:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function handleGetRequest(request: NextRequest) {\r\n  try {\r\n    const { metrics, days, startDate } = await fetchAndFilterMetrics(request);\r\n\r\n    const summary = calculateMetricsSummary(metrics);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        metrics,\r\n        summary,\r\n        period: {\r\n          days,\r\n          startDate: startDate.toISOString(),\r\n          endDate: new Date().toISOString()\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to fetch web vitals analytics:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to fetch analytics data' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\handlers.ts","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":20,"column":10,"nodeType":"Literal","messageId":"error","endLine":20,"endColumn":14,"suggestions":[{"messageId":"remove","fix":{"range":[836,840],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[836,840],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":72,"column":51,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":72,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2359,2368],"text":"(e.details != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2359,2368],"text":"(e.details ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2359,2368],"text":"(Boolean(e.details))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { autoScraper } from '@/lib/autoScraper';\r\nimport { scheduler } from '@/lib/scheduler';\r\nimport { logActivity } from '@/lib/activityLogger';\r\nimport { AutoScrapeResult } from './types';\r\n\r\nfunction verifyCronSecret(request: NextRequest): NextResponse | null {\r\n  const authHeader = request.headers.get('authorization');\r\n  const cronSecret = process.env.CRON_SECRET;\r\n\r\n  if (cronSecret === undefined || cronSecret === '') {\r\n    console.error('CRON_SECRET not configured');\r\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\r\n  }\r\n\r\n  if (authHeader !== `Bearer ${cronSecret}`) {\r\n    console.error('Unauthorized cron attempt:', authHeader);\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction logAutoScrapeStart() {\r\n  console.info('Starting automated scraping job...');\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_started',\r\n    details: { timestamp: new Date().toISOString() },\r\n  });\r\n}\r\n\r\nfunction logAutoScrapeCompletion(result: AutoScrapeResult) {\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_completed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      trucksProcessed: result.trucksProcessed,\r\n      newTrucksFound: result.newTrucksFound,\r\n      errorsCount: result.errors?.length ?? 0,\r\n    },\r\n  });\r\n  console.info('Automated scraping job completed successfully');\r\n}\r\n\r\nfunction logAutoScrapeFailure(error: unknown) {\r\n  console.error('Auto-scraping cron job failed:', error);\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_failed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n    },\r\n  });\r\n}\r\n\r\nexport async function handlePostRequest(request: NextRequest) {\r\n  try {\r\n    const authResponse = verifyCronSecret(request);\r\n    if (authResponse) {\r\n      return authResponse;\r\n    }\r\n\r\n    logAutoScrapeStart();\r\n\r\n    const rawResult = await autoScraper.runAutoScraping();\r\n    // Map errors to string[] for compatibility\r\n    const result: AutoScrapeResult = {\r\n      trucksProcessed: rawResult.trucksProcessed,\r\n      newTrucksFound: rawResult.newTrucksFound,\r\n      errors: rawResult.errors?.map(e => e.url + (e.details ? `: ${e.details}` : '')),\r\n    };\r\n    scheduler.scheduleFollowUpTasks(result);\r\n    logAutoScrapeCompletion(result);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Auto-scraping completed successfully',\r\n      data: {\r\n        trucksProcessed: result.trucksProcessed,\r\n        newTrucksFound: result.newTrucksFound,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    logAutoScrapeFailure(error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Auto-scraping failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport function handleGetRequest() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed. Use POST for cron jobs.' },\r\n    { status: 405 },\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\monitoring\\api-usage\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":103,"column":7,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":103,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[471,474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[471,474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl, FirecrawlResponse } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { FoodTruckService, ScrapingJobService, DataProcessingService, FoodTruck, ScrapingJob, DataProcessingQueue } from '@/lib/supabase';\r\nimport { GeminiResponse, MenuCategory } from '@/lib/types';\r\n\r\n// Helper function to test Firecrawl scraping\r\ninterface FirecrawlTestResult {\r\n  success: boolean;\r\n  result?: FirecrawlResponse;\r\n  error?: string;\r\n  details?: any;\r\n}\r\n\r\n// Helper function to test Firecrawl scraping\r\nexport async function testFirecrawlScraping(testUrl: string): Promise<FirecrawlTestResult> {\r\n  console.info('Testing Firecrawl scraping...');\r\n  const scrapeResult = await firecrawl.scrapeUrl(testUrl, {\r\n    formats: ['markdown'],\r\n    onlyMainContent: true,\r\n  });\r\n\r\n  if (!scrapeResult.success) {\r\n    return {\r\n      success: false,\r\n      error: 'Firecrawl test failed',\r\n      details: scrapeResult.error,\r\n    };\r\n  }\r\n\r\n  return { success: true, result: scrapeResult };\r\n}\r\n\r\n// Helper function to test Gemini processing\r\nexport async function testGeminiProcessing() {\r\n  console.info('Testing Gemini processing...');\r\n  const testMenuText =\r\n    'Burgers: Classic Burger $12.99, Veggie Burger $11.99. Sides: Fries $4.99, Onion Rings $5.99';\r\n\r\n  const geminiResult = await gemini.processMenuData(testMenuText);\r\n\r\n  if (!geminiResult.success) {\r\n    return {\r\n      success: false,\r\n      error: 'Gemini test failed',\r\n      details: geminiResult.error,\r\n    };\r\n  }\r\n\r\n  return { success: true, result: geminiResult };\r\n}\r\n\r\ntype GeminiProcessMenuDataResult = MenuCategory[];\r\n\r\ninterface SupabaseTestResults {\r\n  testTruck: FoodTruck;\r\n  testJob: ScrapingJob;\r\n  queueItem: DataProcessingQueue;\r\n  nearbyTrucks: FoodTruck[];\r\n}\r\n\r\ninterface FormattedTestResults {\r\n  success: boolean;\r\n  message: string;\r\n  results: {\r\n    firecrawl: {\r\n      success: boolean;\r\n      dataLength: number;\r\n    };\r\n    gemini: {\r\n      success: boolean;\r\n      tokensUsed: number | undefined;\r\n      categoriesFound: number;\r\n    };\r\n    supabase: {\r\n      truckCreated: string;\r\n      jobCreated: string;\r\n      queueItemCreated: string;\r\n      nearbyTrucksFound: number;\r\n    };\r\n  };\r\n  testData: {\r\n    truck: FoodTruck;\r\n    processedMenu: MenuCategory[] | undefined;\r\n    nearbyTrucks: FoodTruck[];\r\n  };\r\n}\r\n\r\n function createTestFoodTruck(testUrl: string, menuData: MenuCategory[]): Promise<FoodTruck> {\r\n  return FoodTruckService.createTruck({\r\n    name: 'Test Food Truck',\r\n    description: 'Integration test truck',\r\n    current_location: {\r\n      lat: 37.7749,\r\n      lng: -122.4194,\r\n      address: 'San Francisco, CA',\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n    scheduled_locations: [],\r\n    operating_hours: {\r\n      monday: { closed: true },\r\n      tuesday: { closed: true },\r\n      wednesday: { closed: true },\r\n      thursday: { closed: true },\r\n      friday: { closed: true },\r\n      saturday: { closed: true },\r\n      sunday: { closed: true },\r\n    },\r\n    menu: menuData,\r\n    contact_info: { phone: '+1-555-TEST', email: undefined, website: undefined },\r\n    social_media: {\r\n      instagram: undefined,\r\n      facebook: undefined,\r\n      twitter: undefined,\r\n      tiktok: undefined,\r\n      yelp: undefined,\r\n    },\r\n    source_urls: [testUrl],\r\n    data_quality_score: 0.8,\r\n    verification_status: 'pending',\r\n  });\r\n}\r\n\r\n function createTestScrapingJob(testUrl: string): Promise<ScrapingJob> {\r\n  return ScrapingJobService.createJob({\r\n    job_type: 'integration_test',\r\n    target_url: testUrl,\r\n    priority: 10,\r\n    scheduled_at: new Date().toISOString(),\r\n  });\r\n}\r\n\r\n function addTestToProcessingQueue(truckId: string): Promise<DataProcessingQueue> {\r\n  return DataProcessingService.addToQueue({\r\n    truck_id: truckId,\r\n    processing_type: 'integration_test',\r\n    raw_data: { test: true },\r\n    priority: 10,\r\n  });\r\n}\r\n\r\n// Helper function to test Supabase operations\r\nexport async function testSupabaseOperations(\r\n  testUrl: string,\r\n  geminiResult: GeminiResponse<GeminiProcessMenuDataResult>\r\n): Promise<SupabaseTestResults> {\r\n  // Create a test food truck\r\n  const testTruck = await createTestFoodTruck(testUrl, geminiResult.data ?? []);\r\n\r\n  // Create a test scraping job\r\n  const testJob = await createTestScrapingJob(testUrl);\r\n\r\n  // Add to processing queue\r\n  const queueItem = await addTestToProcessingQueue(testTruck.id);\r\n\r\n  // Test geospatial query\r\n  const nearbyTrucks = await FoodTruckService.getTrucksByLocation(37.7749, -122.4194, 10);\r\n\r\n  return {\r\n    testTruck,\r\n    testJob,\r\n    queueItem,\r\n    nearbyTrucks,\r\n  };\r\n}\r\n\r\n// Helper function to format test results\r\nexport function formatTestResults(\r\n  scrapeResult: FirecrawlTestResult,\r\n  geminiResult: GeminiResponse<GeminiProcessMenuDataResult>,\r\n  supabaseResults: SupabaseTestResults\r\n): FormattedTestResults {\r\n  return {\r\n    success: true,\r\n    message: 'Integration test completed successfully',\r\n    results: {\r\n      firecrawl: {\r\n        success: scrapeResult.result?.success ?? false,\r\n        dataLength: scrapeResult.result?.data?.markdown?.length ?? 0,\r\n      },\r\n      gemini: {\r\n        success: geminiResult.success,\r\n        tokensUsed: geminiResult.tokensUsed,\r\n        categoriesFound: geminiResult.data?.length ?? 0,\r\n      },\r\n      supabase: {\r\n        truckCreated: supabaseResults.testTruck.id,\r\n        jobCreated: supabaseResults.testJob.id,\r\n        queueItemCreated: supabaseResults.queueItem.id,\r\n        nearbyTrucksFound: supabaseResults.nearbyTrucks.length,\r\n      },\r\n    },\r\n    testData: {\r\n      truck: supabaseResults.testTruck,\r\n      processedMenu: geminiResult.data,\r\n      nearbyTrucks: supabaseResults.nearbyTrucks.slice(0, 3),\r\n    },\r\n  };\r\n}\r\n\r\nexport async function runIntegrationTestSteps(testUrl: string) {\r\n  console.info('Starting integration test...');\r\n\r\n  // Step 1: Test Firecrawl scraping\r\n  const firecrawlTest = await testFirecrawlScraping(testUrl);\r\n  if (!firecrawlTest.success) {\r\n    return firecrawlTest;\r\n  }\r\n\r\n  // Step 2: Test Gemini processing\r\n  const geminiTest = await testGeminiProcessing();\r\n  if (!geminiTest.success) {\r\n    return geminiTest;\r\n  }\r\n\r\n  // Step 3: Test Supabase operations\r\n  console.info('Testing Supabase operations...');\r\n  const supabaseResults = await testSupabaseOperations(testUrl, geminiTest.result as GeminiResponse<GeminiProcessMenuDataResult>);\r\n\r\n  // Step 4: Format and return results\r\n  const results = formatTestResults(firecrawlTest, geminiTest.result as GeminiResponse<GeminiProcessMenuDataResult>, supabaseResults);\r\n  return { success: true, results };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunner.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextResponse'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[0,43],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StageResult' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'StageResult'.","line":7,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":7,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[152,196],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'runTestPipeline' has too many lines (60). Maximum allowed is 50.","line":9,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":68,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":16,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":16,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":16,"column":38,"nodeType":"Identifier","messageId":"unsafeCall","endLine":16,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":17,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":19,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":21,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":21,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":27,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":35,"nodeType":"Identifier","messageId":"unsafeCall","endLine":27,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":32,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":34,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":26},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":43,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":34,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1002,1015],"text":"(Boolean(extractedData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":37,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":43,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":48,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":43,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":43,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":50,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":52,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":53,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":54,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":54,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":62,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":63,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":64,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":64,"endColumn":29}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport {\r\n  handleFirecrawlStage,\r\n  handleGeminiStage,\r\n  handleSupabaseStage,\r\n} from './stage-handlers';\r\nimport { StageResult } from '@/lib/types';\r\n\r\nexport async function runTestPipeline(\r\n  body: { url?: string; rawText?: string; isDryRun?: boolean },\r\n  logs: string[],\r\n) {\r\n  const { url, rawText, isDryRun = true } = body;\r\n  logs.push(`Request body: ${JSON.stringify(body)}`);\r\n\r\n  const firecrawlStageOutput = await handleFirecrawlStage(url ?? '', rawText, logs);\r\n  const { firecrawlResult, contentToProcess, sourceUrlForProcessing } = firecrawlStageOutput;\r\n\r\n  if (firecrawlResult.status === 'Error') {\r\n    return {\r\n      firecrawl: firecrawlResult,\r\n      logs,\r\n      overallStatus: 'Error',\r\n    };\r\n  }\r\n\r\n  const geminiStageOutput = await handleGeminiStage(\r\n    contentToProcess,\r\n    sourceUrlForProcessing,\r\n    logs,\r\n  );\r\n  const { geminiResult, extractedData } = geminiStageOutput;\r\n\r\n  if (geminiResult.status === 'Error' || !extractedData) {\r\n    return {\r\n      firecrawl: firecrawlResult,\r\n      gemini: geminiResult,\r\n      logs,\r\n      overallStatus: 'Error',\r\n    };\r\n  }\r\n\r\n  const supabaseResult = await handleSupabaseStage(\r\n    extractedData,\r\n    sourceUrlForProcessing,\r\n    isDryRun,\r\n    logs,\r\n  );\r\n\r\n  if (supabaseResult.status === 'Error') {\r\n    return {\r\n      firecrawl: firecrawlResult,\r\n      gemini: geminiResult,\r\n      supabase: supabaseResult,\r\n      logs,\r\n      overallStatus: 'Error',\r\n    };\r\n  }\r\n\r\n  logs.push('Test pipeline run completed successfully.');\r\n  return {\r\n    firecrawl: firecrawlResult,\r\n    gemini: geminiResult,\r\n    supabase: supabaseResult,\r\n    logs,\r\n    overallStatus: 'Success',\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\schemaMapper.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'mapExtractedDataToTruckSchema' has too many lines (55). Maximum allowed is 50.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":62,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":13,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":13,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  ExtractedFoodTruckDetails,\r\n  FoodTruckSchema,\r\n  MenuCategory,\r\n  MenuItem,\r\n} from '@/lib/types';\r\n\r\nexport function mapExtractedDataToTruckSchema(\r\n  extractedData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n  isDryRun: boolean,\r\n): FoodTruckSchema {\r\n  if (!extractedData || typeof extractedData !== 'object') {\r\n    throw new Error('Invalid extractedData for mapping.');\r\n  }\r\n\r\n  const name = extractedData.name ?? 'Unknown Test Truck';\r\n  const locationData = extractedData.current_location ?? {};\r\n  const fullAddress = [\r\n    locationData.address,\r\n    locationData.city,\r\n    locationData.state,\r\n    locationData.zip_code,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(', ');\r\n\r\n  return {\r\n    name: name,\r\n    description: extractedData.description ?? undefined,\r\n    current_location: {\r\n      lat: locationData.lat ?? 0,\r\n      lng: locationData.lng ?? 0,\r\n      address: fullAddress ?? (locationData.raw_text ?? undefined),\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n    scheduled_locations: extractedData.scheduled_locations ?? undefined,\r\n    operating_hours: extractedData.operating_hours ?? undefined,\r\n    menu: (extractedData.menu ?? []).map((category: MenuCategory) => ({\r\n      name: category.name ?? 'Uncategorized',\r\n      items: (category.items ?? []).map((item: MenuItem) => ({\r\n        name: item.name ?? 'Unknown Item',\r\n        description: item.description ?? undefined,\r\n        price:\r\n          typeof item.price === 'number' || typeof item.price === 'string'\r\n            ? item.price\r\n            : undefined,\r\n        dietary_tags: item.dietary_tags ?? [],\r\n      })),\r\n    })),\r\n    contact_info: extractedData.contact_info ?? undefined,\r\n    social_media: extractedData.social_media ?? undefined,\r\n    cuisine_type: extractedData.cuisine_type ?? [],\r\n    price_range: extractedData.price_range ?? undefined,\r\n    specialties: extractedData.specialties ?? [],\r\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\r\n    verification_status: 'pending',\r\n    source_urls: [sourceUrl].filter(Boolean),\r\n    last_scraped_at: new Date().toISOString(),\r\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\stageHandlers.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'handleFirecrawlStage' has too many lines (58). Maximum allowed is 50.","line":12,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":69,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":25,"column":15,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":25,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[731,739],"text":"(rawText == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[732,739],"text":"(rawText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[731,739],"text":"(!Boolean(rawText))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":31,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":30,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[961,984],"text":"((fcOutput.data?.markdown) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[961,984],"text":"((fcOutput.data?.markdown) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[961,984],"text":"(Boolean((fcOutput.data?.markdown)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":51,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":51,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1876,1883],"text":"rawText != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1876,1883],"text":"rawText ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1876,1883],"text":"Boolean(rawText)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":63,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":63,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2263,2280],"text":"contentToProcess == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2264,2280],"text":"(contentToProcess ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2263,2280],"text":"!Boolean(contentToProcess)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":117,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":121,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":117,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":117,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":122,"column":44,"nodeType":"Property","messageId":"anyAssignment","endLine":122,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `Partial<FoodTruck>`.","line":130,"column":63,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":130,"endColumn":78},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":131,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":131,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":136,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":136,"endColumn":38}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { FoodTruckService } from '@/lib/supabase';\r\nimport {\r\n  ExtractedFoodTruckDetails,\r\n  FirecrawlOutputData,\r\n  GeminiResponse,\r\n  StageResult,\r\n} from '@/lib/types';\r\nimport { mapExtractedDataToTruckSchema } from './schema-mapper';\r\n\r\nexport async function handleFirecrawlStage(\r\n  url: string,\r\n  rawText: string | undefined,\r\n  logs: string[],\r\n): Promise<{\r\n  firecrawlResult: StageResult;\r\n  contentToProcess: string | undefined;\r\n  sourceUrlForProcessing: string;\r\n}> {\r\n  let firecrawlResult: StageResult;\r\n  let contentToProcess: string | undefined;\r\n  let sourceUrlForProcessing: string = url ?? 'raw_text_input';\r\n\r\n  if (url && !rawText) {\r\n    logs.push(`Starting Firecrawl scrape for URL: ${url}`);\r\n    try {\r\n      const fcOutput: GeminiResponse<FirecrawlOutputData> =\r\n        await firecrawl.scrapeFoodTruckWebsite(url);\r\n      if (fcOutput.success && fcOutput.data?.markdown) {\r\n        contentToProcess = fcOutput.data.markdown;\r\n        sourceUrlForProcessing = fcOutput.data.source_url ?? url;\r\n        firecrawlResult = {\r\n          status: 'Success',\r\n          rawContent: fcOutput.data.markdown,\r\n          metadata: { name: fcOutput.data.name, source_url: fcOutput.data.source_url },\r\n          details: `Markdown length: ${fcOutput.data.markdown.length}`,\r\n        };\r\n        logs.push('Firecrawl scrape successful.');\r\n      } else {\r\n        throw new Error(fcOutput.error ?? 'Firecrawl failed to return markdown.');\r\n      }\r\n    } catch (error: unknown) {\r\n      const errorMessage =\r\n        error instanceof Error\r\n          ? error.message\r\n          : 'An unknown error occurred during Firecrawl scrape.';\r\n      logs.push(`Firecrawl error: ${errorMessage}`);\r\n      firecrawlResult = { status: 'Error', error: errorMessage };\r\n    }\r\n  } else if (rawText) {\r\n    logs.push('Using raw text input for processing.');\r\n    contentToProcess = rawText;\r\n    firecrawlResult = {\r\n      status: 'Skipped (Raw Text Provided)',\r\n      details: `Raw text length: ${rawText.length}`,\r\n    };\r\n  } else {\r\n    logs.push('No URL or raw text provided.');\r\n    throw new Error('Either a URL or raw text must be provided for testing.');\r\n  }\r\n\r\n  if (!contentToProcess) {\r\n    logs.push('Content to process is empty after Firecrawl/raw text stage.');\r\n    throw new Error('Content to process is empty.');\r\n  }\r\n\r\n  return { firecrawlResult, contentToProcess, sourceUrlForProcessing };\r\n}\r\n\r\nexport async function handleGeminiStage(\r\n  contentToProcess: string,\r\n  sourceUrlForProcessing: string,\r\n  logs: string[],\r\n): Promise<{ geminiResult: StageResult; extractedData: ExtractedFoodTruckDetails | undefined }> {\r\n  let geminiResult: StageResult;\r\n  let extractedData: ExtractedFoodTruckDetails | undefined;\r\n\r\n  logs.push('Starting Gemini processing.');\r\n  try {\r\n    const geminiOutput: GeminiResponse<ExtractedFoodTruckDetails> =\r\n      await gemini.extractFoodTruckDetailsFromMarkdown(contentToProcess, sourceUrlForProcessing);\r\n    if (geminiOutput.success && geminiOutput.data) {\r\n      extractedData = geminiOutput.data;\r\n      geminiResult = {\r\n        status: 'Success',\r\n        data: geminiOutput.data,\r\n        tokensUsed: geminiOutput.tokensUsed,\r\n        prompt: geminiOutput.promptSent,\r\n        details: 'Gemini extraction successful.',\r\n      };\r\n      logs.push('Gemini processing successful.');\r\n    } else {\r\n      throw new Error(geminiOutput.error ?? 'Gemini processing failed to return data.');\r\n    }\r\n  } catch (error: unknown) {\r\n    const errorMessage =\r\n      error instanceof Error\r\n        ? error.message\r\n        : 'An unknown error occurred during Gemini processing.';\r\n    logs.push(`Gemini error: ${errorMessage}`);\r\n    geminiResult = { status: 'Error', error: errorMessage };\r\n  }\r\n  return { geminiResult, extractedData };\r\n}\r\n\r\nexport async function handleSupabaseStage(\r\n  extractedData: ExtractedFoodTruckDetails,\r\n  sourceUrlForProcessing: string,\r\n  isDryRun: boolean,\r\n  logs: string[],\r\n): Promise<StageResult> {\r\n  let supabaseResult: StageResult = { status: 'Skipped' };\r\n\r\n  logs.push('Preparing for Supabase interaction.');\r\n  try {\r\n    const truckDataToSave = mapExtractedDataToTruckSchema(\r\n      extractedData,\r\n      sourceUrlForProcessing,\r\n      isDryRun,\r\n    );\r\n    supabaseResult = { status: 'Prepared', preparedData: truckDataToSave };\r\n\r\n    if (isDryRun) {\r\n      supabaseResult.status = 'Success (Dry Run)';\r\n      supabaseResult.details = 'Dry Run: Data was prepared but not saved.';\r\n      logs.push('Supabase interaction skipped (Dry Run).');\r\n    } else {\r\n      logs.push('Attempting to save to Supabase (Dry Run is FALSE).');\r\n      const createdTruck = await FoodTruckService.createTruck(truckDataToSave);\r\n      if (!createdTruck) {\r\n        throw new Error('Failed to create truck in Supabase.');\r\n      }\r\n      supabaseResult = {\r\n        status: 'Success (Saved)',\r\n        preparedData: truckDataToSave,\r\n        recordId: createdTruck.id,\r\n        details: `Truck data saved with ID: ${createdTruck.id}`,\r\n      };\r\n      logs.push(`Data saved to Supabase. Record ID: ${createdTruck.id}`);\r\n    }\r\n  } catch (error: unknown) {\r\n    const errorMessage =\r\n      error instanceof Error\r\n        ? error.message\r\n        : 'An unknown error occurred during Supabase interaction.';\r\n    logs.push(`Supabase interaction error: ${errorMessage}`);\r\n    supabaseResult = { ...supabaseResult, status: 'Error', error: errorMessage };\r\n  }\r\n  return supabaseResult;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\trucks\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FoodTruck' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'FoodTruck'.","line":3,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":3,"endColumn":19,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[95,137],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":38,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":38,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":42,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":42,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1558,1561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1558,1561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Partial<FoodTruck>`.","line":50,"column":55,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":50,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1843,1846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1843,1846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Partial<FoodTruck>`.","line":61,"column":63,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":61,"endColumn":70}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { FoodTruckService } from '@/lib/supabase';\r\nimport { FoodTruck } from '@/lib/types';\r\n\r\nexport async function handleGetTruckById(id: string) {\r\n  const truck = await FoodTruckService.getTruckById(id);\r\n  return NextResponse.json({ truck });\r\n}\r\n\r\nexport async function handleGetTrucksByLocation(lat: string, lng: string, radius: string) {\r\n  const userLat = Number.parseFloat(lat);\r\n  const userLng = Number.parseFloat(lng);\r\n  const radiusKm = Number.parseFloat(radius);\r\n\r\n  const nearbyTrucks = await FoodTruckService.getTrucksByLocation(userLat, userLng, radiusKm);\r\n\r\n  return NextResponse.json({\r\n    trucks: nearbyTrucks,\r\n    total: nearbyTrucks.length,\r\n    limit: nearbyTrucks.length, // Assuming no pagination for location-based\r\n    offset: 0,\r\n    hasMore: false,\r\n  });\r\n}\r\n\r\nexport async function handleGetAllTrucks(limit: number, offset: number) {\r\n  const { trucks, total } = await FoodTruckService.getAllTrucks(limit, offset);\r\n\r\n  return NextResponse.json({\r\n    trucks,\r\n    total,\r\n    limit,\r\n    offset,\r\n    hasMore: offset + limit < (total ?? 0),\r\n    summary: {\r\n      totalTrucks: total,\r\n      averageQuality:\r\n        trucks && trucks.length > 0\r\n          ? trucks.reduce((acc, t) => acc + (t.data_quality_score ?? 0), 0) / trucks.length\r\n          : 0,\r\n      lastUpdated:\r\n        trucks && trucks.length > 0\r\n          ? Math.max(...trucks.map((t) => new Date(t.updated_at).getTime()))\r\n          : 0,\r\n    },\r\n  });\r\n}\r\n\r\nexport async function handlePostTruck(truckData: any) {\r\n  const newTruck = await FoodTruckService.createTruck(truckData);\r\n  return NextResponse.json(\r\n    {\r\n      message: 'Food truck created successfully',\r\n      truck: newTruck,\r\n    },\r\n    { status: 201 },\r\n  );\r\n}\r\n\r\nexport async function handlePutTruck(id: string, updates: any) {\r\n  const updatedTruck = await FoodTruckService.updateTruck(id, updates);\r\n  return NextResponse.json({\r\n    message: 'Food truck updated successfully',\r\n    truck: updatedTruck,\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\auth\\authHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextRequest'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[9,22],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-params","severity":2,"message":"Async function 'handleSuccessfulAuth' has too many parameters (5). Maximum allowed is 4.","line":12,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":12,"endColumn":43}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { User } from '@supabase/supabase-js';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { RateLimiter } from '@/lib/security/rateLimiter';\r\nimport { AuditLogger } from '@/lib/security/auditLogger';\r\n\r\ninterface RequestMetadata {\r\n  ip: string;\r\n  userAgent: string;\r\n}\r\n\r\nexport async function handleSuccessfulAuth(\r\n  user: User,\r\n  redirectTo: string,\r\n  origin: string,\r\n  identifier: string,\r\n  requestMetadata: RequestMetadata,\r\n) {\r\n  const { data: profile } = await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', user.id)\r\n    .single();\r\n\r\n  await AuditLogger.logAuthEvent(\r\n    'login_success',\r\n    user.email,\r\n    user.id,\r\n    requestMetadata,\r\n    { provider: 'google', role: profile?.role },\r\n  );\r\n\r\n  RateLimiter.recordSuccess(identifier, 'auth');\r\n\r\n  if (profile?.role === 'admin') {\r\n    return NextResponse.redirect(`${origin}${redirectTo}`);\r\n  } else {\r\n    await AuditLogger.logSecurityEvent({\r\n      event_type: 'permission_denied',\r\n      user_id: user.id,\r\n      user_email: user.email,\r\n      ip_address: requestMetadata.ip,\r\n      user_agent: requestMetadata.userAgent,\r\n      details: {\r\n        reason: 'insufficient_role',\r\n        user_role: profile?.role ?? 'none',\r\n      },\r\n      severity: 'warning',\r\n    });\r\n    return NextResponse.redirect(`${origin}/access-denied`);\r\n  }\r\n}\r\n\r\nexport async function handleAuthFailure(\r\n  error: Error,\r\n  identifier: string,\r\n  requestMetadata: RequestMetadata,\r\n) {\r\n  await AuditLogger.logAuthEvent(\r\n    'login_failure',\r\n    undefined,\r\n    undefined,\r\n    requestMetadata,\r\n    { provider: 'google', error: error.message },\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\batchCleanup.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static async method 'runFullCleanup' has too many lines (55). Maximum allowed is 50.","line":38,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":92,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Static async method 'removePlaceholders' has too many lines (65). Maximum allowed is 50.","line":187,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":251,"endColumn":4},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 36 to the 15 allowed.","line":187,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":187,"endColumn":42},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":256,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":256,"endColumn":45},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":272,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":283,"endColumn":14},{"ruleId":"max-lines-per-function","severity":2,"message":"Static async method 'fixCoordinates' has too many lines (54). Maximum allowed is 50.","line":295,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":348,"endColumn":4},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 29 to the 15 allowed.","line":295,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":295,"endColumn":38},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":330,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":341,"endColumn":14},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":353,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":353,"endColumn":43},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 26 to the 15 allowed.","line":388,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":388,"endColumn":39},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":409,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":416,"endColumn":14}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Batch Data Cleanup System\r\n * Implements automated data quality improvements and cleanup operations\r\n */\r\n\r\nimport { FoodTruckService, type FoodTruck, DataQualityService } from '@/lib/supabase';\r\nimport { DuplicatePreventionService } from './duplicatePrevention';\r\n\r\nexport interface CleanupOperation {\r\n  type: 'normalize_phone' | 'fix_coordinates' | 'remove_placeholders' | 'update_quality_scores' | 'merge_duplicates';\r\n  description: string;\r\n  affectedCount: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\nexport interface BatchCleanupResult {\r\n  totalProcessed: number;\r\n  operations: CleanupOperation[];\r\n  summary: {\r\n    trucksImproved: number;\r\n    duplicatesRemoved: number;\r\n    qualityScoreImprovement: number;\r\n    placeholdersRemoved: number;\r\n  };\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * Automated Data Quality Cleanup Service\r\n */\r\nexport class BatchCleanupService {\r\n  \r\n  /**\r\n   * Run comprehensive data cleanup operations\r\n   */\r\n  static async runFullCleanup(options: {\r\n    batchSize?: number;\r\n    dryRun?: boolean;\r\n    operations?: CleanupOperation['type'][];\r\n  } = {}): Promise<BatchCleanupResult> {\r\n    const startTime = Date.now();\r\n    const { batchSize = 50, dryRun = false, operations = [\r\n      'remove_placeholders',\r\n      'normalize_phone',\r\n      'fix_coordinates',\r\n      'update_quality_scores',\r\n      'merge_duplicates'\r\n    ] } = options;\r\n    \r\n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\r\n    \r\n    const result: BatchCleanupResult = {\r\n      totalProcessed: 0,\r\n      operations: [],\r\n      summary: {\r\n        trucksImproved: 0,\r\n        duplicatesRemoved: 0,\r\n        qualityScoreImprovement: 0,\r\n        placeholdersRemoved: 0\r\n      },\r\n      duration: 0\r\n    };\r\n    \r\n    try {\r\n      // Get all trucks for processing\r\n      const allTrucks = await FoodTruckService.getAllTrucks();\r\n      result.totalProcessed = allTrucks.total;\r\n      \r\n      // Process trucks in batches\r\n      for (let i = 0; i < allTrucks.trucks.length; i += batchSize) {\r\n        const batch = allTrucks.trucks.slice(i, i + batchSize);\r\n        \r\n        for (const operation of operations) {\r\n          const opResult = await this.runOperation(operation, batch, dryRun);\r\n          result.operations.push(opResult);\r\n        }\r\n      }\r\n      \r\n      // Calculate summary\r\n      result.summary = this.calculateSummary(result.operations);\r\n      result.duration = Date.now() - startTime;\r\n      \r\n      console.info(`Batch cleanup completed in ${result.duration}ms`);\r\n      return result;\r\n      \r\n    } catch (error) {\r\n      console.error('Batch cleanup failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Run a specific cleanup operation\r\n   */\r\n  private static async runOperation(\r\n    type: CleanupOperation['type'],\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean\r\n  ): Promise<CleanupOperation> {\r\n    const operation: CleanupOperation = {\r\n      type,\r\n      description: this.getOperationDescription(type),\r\n      affectedCount: 0,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      errors: []\r\n    };\r\n    \r\n    try {\r\n      switch (type) {\r\n        case 'remove_placeholders': {\r\n          return await this.removePlaceholders(trucks, dryRun, operation);\r\n        }\r\n        case 'normalize_phone': {\r\n          return await this.normalizePhoneNumbers(trucks, dryRun, operation);\r\n        }\r\n        case 'fix_coordinates': {\r\n          return await this.fixCoordinates(trucks, dryRun, operation);\r\n        }\r\n        case 'update_quality_scores': {\r\n          return await this.updateQualityScores(trucks, dryRun, operation);\r\n        }\r\n        case 'merge_duplicates': {\r\n          return await this.mergeDuplicates(trucks, dryRun, operation);\r\n        }\r\n        default: {\r\n          operation.errors.push(`Unknown operation type: ${String(type)}`);\r\n          return operation;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      operation.errors.push(`Operation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n      return operation;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get placeholder detection patterns\r\n   */\r\n  private static getPlaceholderPatterns(): RegExp[] {\r\n    return [\r\n      /undefined/i,\r\n      /placeholder/i,\r\n      /example\\.com/i,\r\n      /test\\s*truck/i,\r\n      /lorem\\s*ipsum/i,\r\n      /\\bna\\b/i,\r\n      /\\bn\\/a\\b/i,\r\n      /^0+$/,\r\n      /^null$/i\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Check if truck data needs placeholder cleanup\r\n   */\r\n  private static checkForPlaceholders(truck: FoodTruck, patterns: RegExp[]): { updates: Partial<FoodTruck>; needsUpdate: boolean } {\r\n    const updates: Partial<FoodTruck> = {};\r\n    let needsUpdate = false;\r\n\r\n    // Check name\r\n    if (truck.name && patterns.some(pattern => pattern.test(truck.name ?? ''))) {\r\n      updates.name = undefined;\r\n      needsUpdate = true;\r\n    }\r\n\r\n    // Check description\r\n    if (truck.description !== undefined && typeof truck.description === 'string' && patterns.some(pattern => pattern.test(truck.description ?? ''))) {\r\n      updates.description = undefined;\r\n      needsUpdate = true;\r\n    }\r\n\r\n    // Check price range\r\n    if (truck.price_range !== undefined && typeof truck.price_range === 'string' && patterns.some(pattern => pattern.test(truck.price_range ?? ''))) {\r\n      updates.price_range = undefined;\r\n      needsUpdate = true;\r\n    }\r\n\r\n    return { updates, needsUpdate };\r\n  }\r\n\r\n  /**\r\n   * Remove placeholder and mock data\r\n   */\r\n  private static async removePlaceholders(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const placeholderPatterns = this.getPlaceholderPatterns();\r\n\r\n    for (const truck of trucks) {\r\n      const { updates, needsUpdate: initialNeedsUpdate } = this.checkForPlaceholders(truck, placeholderPatterns);\r\n      let needsUpdate = initialNeedsUpdate;\r\n\r\n      // Check contact info\r\n      if (truck.contact_info) {\r\n        const cleanContact = { ...truck.contact_info };\r\n        let contactUpdated = false;\r\n\r\n        if (cleanContact.phone !== undefined && typeof cleanContact.phone === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.phone ?? ''))) {\r\n          cleanContact.phone = undefined;\r\n          contactUpdated = true;\r\n        }\r\n\r\n        if (cleanContact.website !== undefined && typeof cleanContact.website === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.website ?? ''))) {\r\n          cleanContact.website = undefined;\r\n          contactUpdated = true;\r\n        }\r\n\r\n        if (cleanContact.email !== undefined && typeof cleanContact.email === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.email ?? ''))) {\r\n          cleanContact.email = undefined;\r\n          contactUpdated = true;\r\n        }\r\n\r\n        if (contactUpdated) {\r\n          updates.contact_info = cleanContact;\r\n          needsUpdate = true;\r\n        }\r\n      }\r\n\r\n      // Check address\r\n      if (truck.current_location?.address !== undefined && typeof truck.current_location.address === 'string' && placeholderPatterns.some(pattern => pattern.test(truck.current_location.address ?? ''))) {\r\n        updates.current_location = {\r\n          ...truck.current_location,\r\n          address: undefined\r\n        };\r\n        needsUpdate = true;\r\n      }\r\n      \r\n      if (needsUpdate) {\r\n        operation.affectedCount++;\r\n        \r\n        if (dryRun) {\r\n          operation.successCount++;\r\n        } else {\r\n          try {\r\n            await FoodTruckService.updateTruck(truck.id, updates);\r\n            operation.successCount++;\r\n          } catch (error) {\r\n            operation.errorCount++;\r\n            operation.errors.push(`Failed to update truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Normalize phone numbers to consistent format\r\n   */\r\n  private static async normalizePhoneNumbers(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    for (const truck of trucks) {\r\n      if (truck.contact_info?.phone !== undefined) {\r\n        const originalPhone = truck.contact_info.phone;\r\n        const normalizedPhone = this.normalizePhone(originalPhone);\r\n\r\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\r\n          operation.affectedCount++;\r\n          \r\n          if (dryRun) {\r\n            operation.successCount++;\r\n          } else {\r\n            try {\r\n              await FoodTruckService.updateTruck(truck.id, {\r\n                contact_info: {\r\n                  ...truck.contact_info,\r\n                  phone: normalizedPhone\r\n                }\r\n              });\r\n              operation.successCount++;\r\n            } catch (error) {\r\n              operation.errorCount++;\r\n              operation.errors.push(`Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Fix invalid GPS coordinates\r\n   */\r\n  private static async fixCoordinates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    // Charleston, SC default coordinates\r\n    const defaultLat = 32.7767;\r\n    const defaultLng = -79.9311;\r\n    \r\n    for (const truck of trucks) {\r\n      if (truck.current_location != undefined) {\r\n        const { lat, lng } = truck.current_location;\r\n        let needsUpdate = false;\r\n        const updates: Partial<FoodTruck['current_location']> = {};\r\n\r\n        // Fix invalid coordinates (0,0 or null)\r\n        if (lat == undefined || lat === 0 || lng == undefined || lng === 0) {\r\n          updates.lat = defaultLat;\r\n          updates.lng = defaultLng;\r\n          needsUpdate = true;\r\n        }\r\n\r\n        // Fix coordinates outside reasonable bounds for Charleston area\r\n        if (lat != undefined && lng != undefined && (lat < 32 || lat > 34 || lng > -79 || lng < -81)) {\r\n          updates.lat = defaultLat;\r\n          updates.lng = defaultLng;\r\n          needsUpdate = true;\r\n        }\r\n        \r\n        if (needsUpdate) {\r\n          operation.affectedCount++;\r\n          \r\n          if (dryRun) {\r\n            operation.successCount++;\r\n          } else {\r\n            try {\r\n              await FoodTruckService.updateTruck(truck.id, {\r\n                current_location: {\r\n                  ...truck.current_location,\r\n                  ...updates\r\n                }\r\n              });\r\n              operation.successCount++;\r\n            } catch (error) {\r\n              operation.errorCount++;\r\n              operation.errors.push(`Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Update quality scores for all trucks\r\n   */\r\n  private static async updateQualityScores(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    for (const truck of trucks) {\r\n      const qualityAssessment: { score: number } = DataQualityService.calculateQualityScore(truck);\r\n      const newScore: number = qualityAssessment.score;\r\n      const currentScore = truck.data_quality_score ?? 0;\r\n      \r\n      // Only update if score changed significantly (>5% difference)\r\n      if (Math.abs(newScore - currentScore) > 0.05) {\r\n        operation.affectedCount++;\r\n        \r\n        if (dryRun) {\r\n          operation.successCount++;\r\n        } else {\r\n          try {\r\n             \r\n            await DataQualityService.updateTruckQualityScore(truck.id);\r\n            operation.successCount++;\r\n          } catch (error) {\r\n            operation.errorCount++;\r\n            operation.errors.push(`Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Identify and merge duplicate trucks\r\n   */\r\n  private static async mergeDuplicates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const processedIds = new Set<string>();\r\n    \r\n    for (const truck of trucks) {\r\n      if (processedIds.has(truck.id)) continue;\r\n      \r\n      const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\r\n      \r\n      if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\r\n        const { bestMatch } = duplicateCheck;\r\n        \r\n        if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\r\n          operation.affectedCount++;\r\n          \r\n          if (dryRun) {\r\n            operation.successCount++;\r\n          } else {\r\n            try {\r\n              await DuplicatePreventionService.mergeDuplicates(truck.id, bestMatch.existingTruck.id);\r\n              processedIds.add(bestMatch.existingTruck.id);\r\n              operation.successCount++;\r\n            } catch (error) {\r\n              operation.errorCount++;\r\n              operation.errors.push(`Failed to merge duplicates ${truck.id} and ${bestMatch.existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      processedIds.add(truck.id);\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Normalize phone number format\r\n   */\r\n  private static normalizePhone(phone: string): string | undefined {\r\n    if (!phone) return undefined;\r\n    \r\n    // Remove all non-digit characters\r\n    const digits = phone.replaceAll(/\\D/g, '');\r\n    \r\n    // Handle US phone numbers\r\n    if (digits.length === 10) {\r\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\r\n    } else if (digits.length === 11 && digits[0] === '1') {\r\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\r\n    }\r\n    \r\n    // Return original if can't normalize\r\n    return phone;\r\n  }\r\n  \r\n  /**\r\n   * Get operation description\r\n   */\r\n  private static getOperationDescription(type: CleanupOperation['type']): string {\r\n    const descriptions = {\r\n      remove_placeholders: 'Remove placeholder and mock data values',\r\n      normalize_phone: 'Normalize phone numbers to consistent format',\r\n      fix_coordinates: 'Fix invalid GPS coordinates',\r\n      update_quality_scores: 'Recalculate data quality scores',\r\n      merge_duplicates: 'Identify and merge duplicate truck entries'\r\n    };\r\n    \r\n    return descriptions[type] ?? 'Unknown operation';\r\n  }\r\n  \r\n  /**\r\n   * Calculate cleanup summary\r\n   */\r\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\r\n    return {\r\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\r\n      duplicatesRemoved: operations.find(op => op.type === 'merge_duplicates')?.successCount ?? 0,\r\n      qualityScoreImprovement: operations.find(op => op.type === 'update_quality_scores')?.successCount ?? 0,\r\n      placeholdersRemoved: operations.find(op => op.type === 'remove_placeholders')?.successCount ?? 0\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\duplicatePrevention.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static method 'calculateSimilarity' has too many lines (57). Maximum allowed is 50.","line":101,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":157,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Duplicate Prevention System\r\n * Implements intelligent duplicate detection and prevention for food truck data\r\n */\r\n\r\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\r\n\r\n// Duplicate detection configuration\r\nexport const DUPLICATE_DETECTION_CONFIG = {\r\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\r\n  thresholds: {\r\n    name: 0.85,        // High threshold for name matching\r\n    location: 0.9,     // Very high threshold for location matching\r\n    phone: 1,        // Exact match for phone numbers\r\n    website: 1,      // Exact match for websites\r\n    overall: 0.8       // Overall similarity threshold\r\n  },\r\n  \r\n  // Weight factors for different fields\r\n  weights: {\r\n    name: 0.4,         // 40% weight for name similarity\r\n    location: 0.3,     // 30% weight for location similarity\r\n    contact: 0.2,      // 20% weight for contact info similarity\r\n    menu: 0.1          // 10% weight for menu similarity\r\n  }\r\n} as const;\r\n\r\nexport interface DuplicateMatch {\r\n  existingTruck: FoodTruck;\r\n  similarity: number;\r\n  matchedFields: string[];\r\n  confidence: 'high' | 'medium' | 'low';\r\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\r\n}\r\n\r\nexport interface DuplicateDetectionResult {\r\n  isDuplicate: boolean;\r\n  matches: DuplicateMatch[];\r\n  bestMatch?: DuplicateMatch;\r\n  action: 'create' | 'update' | 'merge' | 'manual_review';\r\n  reason: string;\r\n}\r\n\r\n/**\r\n * Advanced Duplicate Prevention Service\r\n */\r\nexport class DuplicatePreventionService {\r\n  \r\n  /**\r\n   * Check if a food truck is a duplicate of existing trucks\r\n   */\r\n  static async checkForDuplicates(candidateTruck: Partial<FoodTruck>): Promise<DuplicateDetectionResult> {\r\n    try {\r\n      // Get all existing trucks for comparison\r\n      const existingTrucks = await FoodTruckService.getAllTrucks();\r\n      \r\n      const matches: DuplicateMatch[] = [];\r\n      \r\n      for (const existingTruck of existingTrucks.trucks) {\r\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\r\n        \r\n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\r\n          matches.push({\r\n            existingTruck,\r\n            similarity: similarity.overall,\r\n            matchedFields: similarity.matchedFields,\r\n            confidence: this.getConfidenceLevel(similarity.overall),\r\n            recommendation: this.getRecommendation(similarity)\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Sort matches by similarity (highest first)\r\n      matches.sort((a, b) => b.similarity - a.similarity);\r\n      \r\n      const bestMatch = matches[0];\r\n      const isDuplicate = matches.length > 0;\r\n      \r\n      return {\r\n        isDuplicate,\r\n        matches,\r\n        bestMatch,\r\n        action: this.determineAction(matches, candidateTruck),\r\n        reason: this.generateReason(matches, candidateTruck)\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('Error checking for duplicates:', error);\r\n      return {\r\n        isDuplicate: false,\r\n        matches: [],\r\n        action: 'create',\r\n        reason: 'Error during duplicate detection - proceeding with creation'\r\n      };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Calculate similarity between two food trucks\r\n   */\r\n  private static calculateSimilarity(\r\n    candidate: Partial<FoodTruck>, \r\n    existing: FoodTruck\r\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\r\n    const breakdown: Record<string, number> = {};\r\n    const matchedFields: string[] = [];\r\n    \r\n    // Name similarity\r\n    const nameSimilarity = this.calculateStringSimilarity(\r\n      candidate.name ?? '', \r\n      existing.name ?? ''\r\n    );\r\n    breakdown.name = nameSimilarity;\r\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\r\n      matchedFields.push('name');\r\n    }\r\n    \r\n    // Location similarity\r\n    const locationSimilarity = this.calculateLocationSimilarity(\r\n      candidate.current_location,\r\n      existing.current_location\r\n    );\r\n    breakdown.location = locationSimilarity;\r\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\r\n      matchedFields.push('location');\r\n    }\r\n    \r\n    // Contact similarity\r\n    const contactSimilarity = this.calculateContactSimilarity(\r\n      candidate.contact_info,\r\n      existing.contact_info\r\n    );\r\n    breakdown.contact = contactSimilarity;\r\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\r\n      matchedFields.push('contact');\r\n    }\r\n    \r\n    // Menu similarity (basic)\r\n    const menuSimilarity = this.calculateMenuSimilarity(\r\n      candidate.menu,\r\n      existing.menu\r\n    );\r\n    breakdown.menu = menuSimilarity;\r\n    if (menuSimilarity > 0.7) {\r\n      matchedFields.push('menu');\r\n    }\r\n    \r\n    // Calculate weighted overall similarity\r\n    const overall = (\r\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\r\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\r\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\r\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu\r\n    );\r\n    \r\n    return { overall, matchedFields, breakdown };\r\n  }\r\n  \r\n  /**\r\n   * Calculate string similarity using Levenshtein distance\r\n   */\r\n  private static calculateStringSimilarity(str1: string, str2: string): number {\r\n    if (!str1 || !str2) return 0;\r\n    \r\n    // Normalize strings\r\n    const s1 = str1.toLowerCase().trim();\r\n    const s2 = str2.toLowerCase().trim();\r\n    \r\n    if (s1 === s2) return 1;\r\n    \r\n    // Calculate Levenshtein distance\r\n    const matrix: number[][] = [];\r\n    const len1 = s1.length;\r\n    const len2 = s2.length;\r\n    \r\n    for (let i = 0; i <= len1; i++) {\r\n      matrix[i] = [i];\r\n    }\r\n    \r\n    for (let j = 0; j <= len2; j++) {\r\n      matrix[0][j] = j;\r\n    }\r\n    \r\n    for (let i = 1; i <= len1; i++) {\r\n      for (let j = 1; j <= len2; j++) {\r\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j] + 1,      // deletion\r\n          matrix[i][j - 1] + 1,      // insertion\r\n          matrix[i - 1][j - 1] + cost // substitution\r\n        );\r\n      }\r\n    }\r\n    \r\n    const distance = matrix[len1][len2];\r\n    const maxLength = Math.max(len1, len2);\r\n    \r\n    return maxLength === 0 ? 1 : 1 - (distance / maxLength);\r\n  }\r\n  \r\n  /**\r\n   * Calculate location similarity\r\n   */\r\n  private static calculateLocationSimilarity(\r\n    loc1: FoodTruck['current_location'],\r\n    loc2: FoodTruck['current_location']\r\n  ): number {\r\n    if (loc1 == undefined || loc2 == undefined) return 0;\r\n    \r\n    let similarity = 0;\r\n    let factors = 0;\r\n    \r\n    // Address similarity\r\n    if (loc1.address != undefined && loc2.address != undefined) {\r\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\r\n      factors++;\r\n    }\r\n    \r\n    // GPS coordinate similarity (within 100 meters = high similarity)\r\n    if (loc1.lat != undefined && loc1.lng != undefined && loc2.lat != undefined && loc2.lng != undefined) {\r\n      const distance = this.calculateGPSDistance(\r\n        loc1.lat, loc1.lng,\r\n        loc2.lat, loc2.lng\r\n      );\r\n      \r\n      // Distance similarity (closer = higher similarity)\r\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - (distance / 1)); // 1km max\r\n      similarity += distanceSimilarity;\r\n      factors++;\r\n    }\r\n    \r\n    return factors > 0 ? similarity / factors : 0;\r\n  }\r\n  \r\n  /**\r\n   * Calculate GPS distance in kilometers\r\n   */\r\n  private static calculateGPSDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLng = (lng2 - lng1) * Math.PI / 180;\r\n    const a = \r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  }\r\n  \r\n  /**\r\n   * Calculate contact similarity\r\n   */\r\n  private static calculateContactSimilarity(\r\n    contact1: FoodTruck['contact_info'],\r\n    contact2: FoodTruck['contact_info']\r\n  ): number {\r\n    if (!contact1 || !contact2) return 0;\r\n    \r\n    let matches = 0;\r\n    let total = 0;\r\n    \r\n    // Phone number exact match\r\n    if (contact1.phone != undefined && contact2.phone != undefined) {\r\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\r\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\r\n      if (phone1 === phone2) matches++;\r\n      total++;\r\n    }\r\n    \r\n    // Website exact match\r\n    if (contact1.website != undefined && contact2.website != undefined) {\r\n      const url1 = contact1.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\r\n      const url2 = contact2.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\r\n      if (url1 === url2) matches++;\r\n      total++;\r\n    }\r\n    \r\n    // Email similarity\r\n    if (contact1.email != undefined && contact2.email != undefined) {\r\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches++;\r\n      total++;\r\n    }\r\n    \r\n    return total > 0 ? matches / total : 0;\r\n  }\r\n  \r\n  /**\r\n   * Calculate menu similarity (basic implementation)\r\n   */\r\n  private static calculateMenuSimilarity(\r\n    menu1: FoodTruck['menu'],\r\n    menu2: FoodTruck['menu']\r\n  ): number {\r\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\r\n    \r\n    // Simple category name matching\r\n    const categories1 = menu1.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\r\n    const categories2 = menu2.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\r\n    \r\n    const commonCategories = categories1.filter(cat => categories2.includes(cat));\r\n    const totalCategories = new Set([...categories1, ...categories2]).size;\r\n    \r\n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\r\n  }\r\n  \r\n  /**\r\n   * Get confidence level based on similarity score\r\n   */\r\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\r\n    if (similarity >= 0.95) return 'high';\r\n    if (similarity >= 0.85) return 'medium';\r\n    return 'low';\r\n  }\r\n  \r\n  /**\r\n   * Get recommendation based on similarity analysis\r\n   */\r\n  private static getRecommendation(similarity: { overall: number; matchedFields: string[] }): 'merge' | 'update' | 'skip' | 'manual_review' {\r\n    if (similarity.overall >= 0.95) return 'merge';\r\n    if (similarity.overall >= 0.9) return 'update';\r\n    if (similarity.overall >= 0.8) return 'manual_review';\r\n    return 'skip';\r\n  }\r\n  \r\n  /**\r\n   * Determine action based on matches\r\n   */\r\n  private static determineAction(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): 'create' | 'update' | 'merge' | 'manual_review' {\r\n    if (matches.length === 0) return 'create';\r\n    \r\n    const bestMatch = matches[0];\r\n    \r\n    if (bestMatch.confidence === 'high') {\r\n      const recommendation = bestMatch.recommendation;\r\n      if (recommendation === 'merge' || recommendation === 'update') {\r\n        return recommendation;\r\n      }\r\n      return 'manual_review';\r\n    }\r\n    \r\n    return 'manual_review';\r\n  }\r\n  \r\n  /**\r\n   * Generate human-readable reason\r\n   */\r\n  private static generateReason(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): string {\r\n    if (matches.length === 0) {\r\n      return 'No duplicates found - safe to create new truck entry';\r\n    }\r\n    \r\n    const bestMatch = matches[0];\r\n    const similarity = Math.round(bestMatch.similarity * 100);\r\n    \r\n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\r\n  }\r\n  \r\n  /**\r\n   * Merge duplicate truck data intelligently\r\n   */\r\n  static async mergeDuplicates(targetId: string, sourceId: string): Promise<FoodTruck> {\r\n    const target = await FoodTruckService.getTruckById(targetId);\r\n    const source = await FoodTruckService.getTruckById(sourceId);\r\n    \r\n    // Merge logic: prefer non-null, more complete data\r\n    const mergedData: Partial<FoodTruck> = {\r\n      name: target.name ?? source.name,\r\n      description: target.description ?? source.description,\r\n      cuisine_type: (target.cuisine_type?.length ?? 0) > 0 ? target.cuisine_type : source.cuisine_type,\r\n      price_range: target.price_range ?? source.price_range,\r\n      current_location: target.current_location ?? source.current_location,\r\n      contact_info: {\r\n        ...source.contact_info,\r\n        ...target.contact_info // Target takes precedence\r\n      },\r\n      operating_hours: target.operating_hours ?? source.operating_hours,\r\n      menu: (target.menu?.length ?? 0) > 0 ? target.menu : source.menu,\r\n      social_media: {\r\n        ...source.social_media,\r\n        ...target.social_media\r\n      },\r\n      source_urls: [...new Set([...(target.source_urls ?? []), ...(source.source_urls ?? [])])],\r\n      last_scraped_at: new Date().toISOString()\r\n    };\r\n\r\n    // Update target with merged data\r\n    const updatedTruck = await FoodTruckService.updateTruck(targetId, mergedData);\r\n\r\n    // Note: Delete functionality would need to be implemented in FoodTruckService\r\n    console.info(`Merged truck ${sourceId} into ${targetId}`);\r\n    \r\n    return updatedTruck;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\discoveryEngine.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'isFoodTruckUrl' has too many lines (86). Maximum allowed is 50.","line":363,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":448,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'storeDiscoveredUrl' has too many lines (58). Maximum allowed is 50.","line":605,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":662,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/discoveryEngine.ts\r\nimport { supabaseAdmin } from './supabase';\r\nimport { SC_TARGET_CITIES, DISCOVERY_CONFIG } from './config';\r\n\r\nexport interface DiscoveredUrl {\r\n  url: string;\r\n  source_directory_url?: string;\r\n  region?: string;\r\n  status: 'new' | 'processing' | 'processed' | 'irrelevant';\r\n  notes?: string;\r\n}\r\n\r\nexport interface DiscoveryResult {\r\n  urls_discovered: number;\r\n  urls_stored: number;\r\n  urls_duplicates: number;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Autonomous Discovery Engine\r\n *\r\n * This engine discovers new food truck websites across South Carolina using Tavily for search\r\n * and Firecrawl for crawling. It operates autonomously without human intervention, finding and\r\n * validating new URLs to add to the discovered_urls table for subsequent scraping.\r\n *\r\n * Strategy:\r\n * 1. Search for food trucks in each SC city using Tavily search\r\n * 2. Find food truck directories and event listings using Firecrawl crawling\r\n * 3. Extract individual food truck website URLs from discovered content\r\n * 4. Validate and filter URLs to avoid false positives\r\n * 5. Store new URLs in discovered_urls table for processing\r\n *\r\n * NOTE: Uses Tavily for search operations and Firecrawl for crawling/scraping\r\n */\r\n\r\n// Helper functions to call APIs\r\n// Use Tavily for search, Firecrawl for crawling/scraping\r\ninterface TavilySearchResult {\r\n  url: string;\r\n  content?: string;\r\n  raw_content?: string;\r\n}\r\n\r\nasync function tavilySearch(\r\n  query: string,\r\n  options: Record<string, unknown> = {},\r\n): Promise<TavilySearchResult[]> {\r\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL ?? 'http://localhost:3003';\r\n  const response = await fetch(`${baseUrl}/api/tavily`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      operation: 'search',\r\n      params: {\r\n        query,\r\n        limit: options.limit ?? 10,\r\n        ...options,\r\n      },\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Tavily search failed: ${response.statusText}`);\r\n  }\r\n\r\n  const result = (await response.json()) as {\r\n    data?: { results?: TavilySearchResult[] };\r\n    results?: TavilySearchResult[];\r\n  };\r\n  return result.data?.results ?? result.results ?? [];\r\n}\r\n\r\ninterface CrawlResult {\r\n  url: string;\r\n}\r\n\r\nasync function firecrawlCrawl(\r\n  url: string,\r\n  options: Record<string, unknown> = {},\r\n): Promise<CrawlResult[]> {\r\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL ?? 'http://localhost:3003';\r\n  const response = await fetch(`${baseUrl}/api/firecrawl`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      operation: 'crawl',\r\n      url,\r\n      options: {\r\n        maxDepth: options.maxDepth ?? 2,\r\n        limit: options.limit ?? 20,\r\n        ...options,\r\n      },\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Firecrawl crawl failed: ${response.statusText}`);\r\n  }\r\n\r\n  const result = (await response.json()) as { data: CrawlResult[] };\r\n  return result.data ?? [];\r\n}\r\n\r\nexport class FoodTruckDiscoveryEngine {\r\n  private readonly searchTerms = [\r\n    'food truck South Carolina',\r\n    'mobile food vendor SC',\r\n    'food truck Charleston',\r\n    'food truck Columbia SC',\r\n    'food truck Greenville SC',\r\n    'street food South Carolina',\r\n    'food truck directory SC',\r\n  ];\r\n\r\n  private readonly directoryUrls = [\r\n    'https://www.foodtrucksin.com/south-carolina',\r\n    'https://www.roaminghunger.com/sc/',\r\n    'https://southcarolinafoodtrucks.com',\r\n    'https://www.yelp.com/sc/food-trucks',\r\n  ];\r\n\r\n  // Helper method to process search results\r\n  private async processSearchResults(\r\n    searchResults: TavilySearchResult[],\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    for (const result of searchResults) {\r\n      if (result.url && (await this.isFoodTruckUrl(result.url))) {\r\n        discoveredUrls.add(result.url);\r\n      }\r\n\r\n      // Extract URLs from content\r\n      if (result.content != undefined || result.raw_content != undefined) {\r\n        const content = result.content ?? result.raw_content ?? '';\r\n        const extractedUrls = this.extractFoodTruckUrls(content);\r\n        for (const url of extractedUrls) {\r\n          if (await this.isFoodTruckUrl(url)) {\r\n            discoveredUrls.add(url);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to perform search term discovery\r\n  private async performSearchTermDiscovery(\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    for (const searchTerm of this.searchTerms) {\r\n      try {\r\n        console.info(`🔍 Searching for: ${searchTerm}`);\r\n\r\n        const searchResults = await tavilySearch(searchTerm, {\r\n          limit: DISCOVERY_CONFIG.searchResultsLimit,\r\n        });\r\n\r\n        if (searchResults != undefined && searchResults.length > 0) {\r\n          await this.processSearchResults(searchResults, discoveredUrls);\r\n        }\r\n      } catch (error) {\r\n        console.error(`❌ Search failed for \"${searchTerm}\":`, error);\r\n        results.errors.push(\r\n          `Search failed for \"${searchTerm}\": ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        );\r\n      }\r\n\r\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\r\n    }\r\n  }\r\n\r\n  // Helper method to perform directory crawling\r\n  private async performDirectoryCrawling(\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    for (const directoryUrl of this.directoryUrls) {\r\n      await this.crawlSingleDirectory(directoryUrl, discoveredUrls, results);\r\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\r\n    }\r\n  }\r\n\r\n  // Helper method to crawl a single directory\r\n  private async crawlSingleDirectory(\r\n    directoryUrl: string,\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    try {\r\n      console.info(`🕷️ Crawling directory: ${directoryUrl}`);\r\n\r\n      const crawlResults = await firecrawlCrawl(directoryUrl, {\r\n        maxDepth: DISCOVERY_CONFIG.maxDepthCrawl,\r\n        limit: DISCOVERY_CONFIG.maxUrlsPerRun,\r\n      });\r\n\r\n      await this.processCrawlResults(crawlResults, discoveredUrls);\r\n    } catch (error) {\r\n      console.error(`❌ Crawl failed for ${directoryUrl}:`, error);\r\n      results.errors.push(\r\n        `Crawl failed for ${directoryUrl}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  // Helper method to process crawl results\r\n  private async processCrawlResults(\r\n    crawlResults: unknown,\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    if (crawlResults != undefined && Array.isArray(crawlResults) && crawlResults.length > 0) {\r\n      for (const result of crawlResults) {\r\n        if (typeof result === 'object' && result !== null && 'url' in result) {\r\n          const resultUrl = (result as { url?: string }).url;\r\n          if (\r\n            resultUrl != undefined &&\r\n            typeof resultUrl === 'string' &&\r\n            (await this.isFoodTruckUrl(resultUrl))\r\n          ) {\r\n            discoveredUrls.add(resultUrl);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to perform location-specific discovery\r\n  private async performLocationDiscovery(\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    for (const city of SC_TARGET_CITIES) {\r\n      await this.searchSingleCity(city, discoveredUrls, results);\r\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\r\n    }\r\n  }\r\n\r\n  // Helper method to search a single city\r\n  private async searchSingleCity(\r\n    city: string,\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    try {\r\n      console.info(`📍 Searching for food trucks in ${city}, SC`);\r\n      const locationQuery = `food trucks in ${city} South Carolina`;\r\n      const searchResults = await tavilySearch(locationQuery, {\r\n        limit: 5,\r\n      });\r\n\r\n      await this.processLocationSearchResults(searchResults, discoveredUrls);\r\n    } catch (error) {\r\n      console.error(`❌ Location search failed for ${city}:`, error);\r\n      results.errors.push(\r\n        `Location search failed for ${city}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  // Helper method to process location search results\r\n  private async processLocationSearchResults(\r\n    searchResults: unknown,\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    if (searchResults != undefined && Array.isArray(searchResults) && searchResults.length > 0) {\r\n      for (const result of searchResults) {\r\n        if (typeof result === 'object' && result !== null && 'url' in result) {\r\n          const resultUrl = (result as { url?: string }).url;\r\n          if (\r\n            resultUrl != undefined &&\r\n            typeof resultUrl === 'string' &&\r\n            (await this.isFoodTruckUrl(resultUrl))\r\n          ) {\r\n            discoveredUrls.add(resultUrl);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to store discovered URLs from discovery process\r\n  private async storeDiscoveredUrlsFromDiscovery(\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    for (const url of discoveredUrls) {\r\n      try {\r\n        const stored = await this.storeDiscoveredUrl(url, 'autonomous_search', {\r\n          search_context: 'full_discovery',\r\n          discovery_timestamp: new Date().toISOString(),\r\n        });\r\n        if (stored.isNew === true) {\r\n          results.urls_stored++;\r\n        } else {\r\n          results.urls_duplicates++;\r\n        }\r\n      } catch (error) {\r\n        console.error(`❌ Failed to store URL ${url}:`, error);\r\n        results.errors.push(\r\n          `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  async discoverNewFoodTrucks(): Promise<DiscoveryResult> {\r\n    console.info('🔍 Starting autonomous food truck discovery...');\r\n\r\n    const results: DiscoveryResult = {\r\n      urls_discovered: 0,\r\n      urls_stored: 0,\r\n      urls_duplicates: 0,\r\n      errors: [],\r\n    };\r\n\r\n    const discoveredUrls = new Set<string>();\r\n\r\n    // 1. Search for food trucks using Tavily search\r\n    await this.performSearchTermDiscovery(discoveredUrls, results);\r\n\r\n    // 2. Crawl known food truck directory sites\r\n    await this.performDirectoryCrawling(discoveredUrls, results);\r\n\r\n    // 3. Location-specific discovery for SC cities\r\n    await this.performLocationDiscovery(discoveredUrls, results);\r\n\r\n    results.urls_discovered = discoveredUrls.size;\r\n    console.info(`🎯 Discovered ${results.urls_discovered} potential food truck URLs`);\r\n\r\n    // 4. Store new URLs in database\r\n    await this.storeDiscoveredUrlsFromDiscovery(discoveredUrls, results);\r\n\r\n    console.info(\r\n      `✅ Discovery complete: ${results.urls_stored} new URLs stored, ${results.urls_duplicates} duplicates skipped`,\r\n    );\r\n\r\n    return results;\r\n  }\r\n  private extractFoodTruckUrls(content: string): string[] {\r\n    const urls: string[] = [];\r\n\r\n    // Look for URL patterns in content - using a safer regex to avoid backtracking\r\n    const urlRegex = /https?:\\/\\/[^\\s<>\"']{1,200}/g;\r\n    const foundUrls = content.match(urlRegex) ?? [];\r\n\r\n    for (const url of foundUrls) {\r\n      try {\r\n        // Basic URL validation\r\n        new URL(url);\r\n        // Remove trailing punctuation - using safer regex to avoid backtracking\r\n        const cleanUrl = url.replace(/[.,;!?]$/, '');\r\n        urls.push(cleanUrl);\r\n      } catch {\r\n        // Invalid URL, skip\r\n        continue;\r\n      }\r\n    }\r\n\r\n    return urls;\r\n  }\r\n\r\n  private async isFoodTruckUrl(url: string): Promise<boolean> {\r\n    try {\r\n      // Basic URL validation\r\n      new URL(url);\r\n\r\n      // Food truck indicators in URL\r\n      const foodTruckKeywords = [\r\n        'food-truck',\r\n        'foodtruck',\r\n        'mobile-food',\r\n        'street-food',\r\n        'truck',\r\n        'kitchen',\r\n        'eats',\r\n        'bbq',\r\n        'burger',\r\n        'taco',\r\n        'catering',\r\n        'mobile',\r\n        'chef',\r\n        'bistro',\r\n        'cafe',\r\n      ];\r\n\r\n      // Blacklist - skip these domains\r\n      const blacklistKeywords = [\r\n        'facebook.com',\r\n        'instagram.com',\r\n        'twitter.com',\r\n        'linkedin.com',\r\n        'youtube.com',\r\n        'yelp.com',\r\n        'google.com',\r\n        'maps.google.com',\r\n        'foursquare.com',\r\n        'tripadvisor.com',\r\n        'zomato.com',\r\n        'eventbrite.com',\r\n        'meetup.com',\r\n      ];\r\n\r\n      const urlLower = url.toLowerCase();\r\n\r\n      // Skip social media and review sites\r\n      if (blacklistKeywords.some((keyword) => urlLower.includes(keyword))) {\r\n        return false;\r\n      }\r\n\r\n      // Check if we already have this URL in discovered_urls\r\n      if (supabaseAdmin == undefined) {\r\n        return false;\r\n      }\r\n\r\n      const { data: existingDiscovered } = await supabaseAdmin\r\n        .from('discovered_urls')\r\n        .select('id')\r\n        .eq('url', url)\r\n        .limit(1);\r\n\r\n      if (existingDiscovered != undefined && existingDiscovered.length > 0) {\r\n        return false; // Already discovered\r\n      }\r\n\r\n      // Check if we already have this URL in food_trucks\r\n      const { data: existingTrucks } = await supabaseAdmin\r\n        .from('food_trucks')\r\n        .select('id')\r\n        .contains('source_urls', [url])\r\n        .limit(1);\r\n\r\n      if (existingTrucks != undefined && existingTrucks.length > 0) {\r\n        return false; // Already have this URL\r\n      }\r\n\r\n      // Accept if has food truck keywords or if it's a business domain\r\n      return (\r\n        foodTruckKeywords.some((keyword) => urlLower.includes(keyword)) ||\r\n        (/\\.(com|net|org|biz|info)/.test(urlLower) &&\r\n          !urlLower.includes('blog') &&\r\n          !urlLower.includes('news'))\r\n      );\r\n    } catch (error) {\r\n      console.error('Error validating food truck URL:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getLocationSpecificDiscovery(city: string, state: string = 'SC'): Promise<DiscoveryResult> {\r\n    console.info(`🔍 Starting location-specific discovery for ${city}, ${state}`);\r\n\r\n    const locationQuery = `food trucks in ${city} ${state}`;\r\n    const results: DiscoveryResult = {\r\n      urls_discovered: 0,\r\n      urls_stored: 0,\r\n      urls_duplicates: 0,\r\n      errors: [],\r\n    };\r\n\r\n    const discoveredUrls = new Set<string>();\r\n\r\n    try {\r\n      await this.performLocationSpecificSearch(locationQuery, discoveredUrls);\r\n      results.urls_discovered = discoveredUrls.size;\r\n      await this.storeLocationDiscoveryResults({ discoveredUrls, locationQuery, city, state, results });\r\n    } catch (error) {\r\n      console.error(`❌ Location search failed for ${city}:`, error);\r\n      results.errors.push(\r\n        `Location search failed for ${city}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n\r\n    console.info(\r\n      `✅ Location discovery complete for ${city}: ${results.urls_stored} new URLs stored`,\r\n    );\r\n    return results;\r\n  }\r\n\r\n  // Helper method to perform location-specific search\r\n  private async performLocationSpecificSearch(\r\n    locationQuery: string,\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    const searchResults = await tavilySearch(locationQuery, { limit: 15 });\r\n\r\n    if (searchResults != undefined && searchResults.length > 0) {\r\n      for (const result of searchResults) {\r\n        await this.processSearchResult(result, discoveredUrls);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to process a single search result\r\n  private async processSearchResult(result: unknown, discoveredUrls: Set<string>): Promise<void> {\r\n    if (typeof result === 'object' && result !== null && 'url' in result) {\r\n      const resultUrl = (result as { url?: string }).url;\r\n      if (resultUrl != undefined && resultUrl !== '' && (await this.isFoodTruckUrl(resultUrl))) {\r\n        discoveredUrls.add(resultUrl);\r\n      }\r\n\r\n      // Extract URLs from content\r\n      await this.extractUrlsFromContent(result, discoveredUrls);\r\n    }\r\n  }\r\n\r\n  // Helper method to extract URLs from content\r\n  private async extractUrlsFromContent(\r\n    result: unknown,\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    if (typeof result === 'object' && result != undefined) {\r\n      const resultObj = result as { content?: string; raw_content?: string };\r\n      if (resultObj.content != undefined || resultObj.raw_content != undefined) {\r\n        const content = resultObj.content ?? resultObj.raw_content ?? '';\r\n        const extractedUrls = this.extractFoodTruckUrls(content);\r\n        for (const url of extractedUrls) {\r\n          if (await this.isFoodTruckUrl(url)) {\r\n            discoveredUrls.add(url);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to store location discovery results\r\n  private async storeLocationDiscoveryResults(\r\n    params: {\r\n      discoveredUrls: Set<string>;\r\n      locationQuery: string;\r\n      city: string;\r\n      state: string;\r\n      results: DiscoveryResult;\r\n    }\r\n  ): Promise<void> {\r\n    const { discoveredUrls, locationQuery, city, state, results } = params;\r\n    for (const url of discoveredUrls) {\r\n      try {\r\n        const stored = await this.storeDiscoveredUrl(url, 'tavily_search', {\r\n          search_query: locationQuery,\r\n          target_city: city,\r\n          target_state: state,\r\n        });\r\n        if (stored.isNew === true) {\r\n          results.urls_stored++;\r\n        } else {\r\n          results.urls_duplicates++;\r\n        }\r\n      } catch (error) {\r\n        console.error(`❌ Failed to store URL ${url}:`, error);\r\n        results.errors.push(\r\n          `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Store multiple discovered URLs with metadata\r\n   */\r\n  async storeDiscoveredUrls(\r\n    urls: string[],\r\n    discoveryMethod: string = 'manual',\r\n    metadata: Record<string, unknown> = {},\r\n  ): Promise<{\r\n    urls_stored: number;\r\n    urls_duplicates: number;\r\n    errors: string[];\r\n  }> {\r\n    const result: {\r\n      urls_stored: number;\r\n      urls_duplicates: number;\r\n      errors: string[];\r\n    } = {\r\n      urls_stored: 0,\r\n      urls_duplicates: 0,\r\n      errors: [],\r\n    };\r\n\r\n    for (const url of urls) {\r\n      try {\r\n        const stored = await this.storeDiscoveredUrl(url, discoveryMethod, metadata);\r\n        if (stored.isNew === true) {\r\n          result.urls_stored++;\r\n        } else {\r\n          result.urls_duplicates++;\r\n        }\r\n      } catch (error) {\r\n        const errorMsg = `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n        result.errors.push(errorMsg);\r\n        console.error(errorMsg);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Enhanced store method with discovery method and metadata\r\n   */\r\n  private async storeDiscoveredUrl(\r\n    url: string,\r\n    discoveryMethod: string = 'manual',\r\n    metadata: Record<string, unknown> = {},\r\n  ): Promise<{ isNew: boolean }> {\r\n    try {\r\n      if (!supabaseAdmin) {\r\n        throw new Error('Supabase admin client not available');\r\n      }\r\n\r\n      // Check if URL already exists\r\n      const { data: existing } = await supabaseAdmin\r\n        .from('discovered_urls')\r\n        .select('id')\r\n        .eq('url', url)\r\n        .limit(1);\r\n\r\n      if (existing && existing.length > 0) {\r\n        return { isNew: false };\r\n      }\r\n\r\n      // Store new URL - handle missing columns gracefully\r\n      const insertData: Record<string, unknown> = {\r\n        url,\r\n        status: 'new',\r\n        notes: `Discovered via ${discoveryMethod}`,\r\n      };\r\n\r\n      // Add optional columns only if they exist in the table\r\n      try {\r\n        // Check if discovery_method column exists\r\n        const { error: testError } = await supabaseAdmin\r\n          .from('discovered_urls')\r\n          .select('discovery_method')\r\n          .limit(1);\r\n\r\n        if (!testError) {\r\n          insertData.discovery_method = discoveryMethod;\r\n          insertData.region = 'SC';\r\n          insertData.metadata = metadata;\r\n        }\r\n      } catch {\r\n        // Column doesn't exist, continue without it\r\n        console.info('Some columns missing in discovered_urls table, using basic structure');\r\n      }\r\n\r\n      const { error } = await supabaseAdmin.from('discovered_urls').insert(insertData);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      return { isNew: true };\r\n    } catch (error) {\r\n      console.error('Error storing discovered URL:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for food truck directories\r\n   */\r\n  async searchFoodTruckDirectories(\r\n    query: string = 'food truck directory South Carolina',\r\n  ): Promise<TavilySearchResult[]> {\r\n    try {\r\n      return await tavilySearch(query, { limit: 10 });\r\n    } catch (error) {\r\n      console.error('Error searching food truck directories:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for food truck websites\r\n   */\r\n  async searchFoodTruckWebsites(query: string): Promise<TavilySearchResult[]> {\r\n    try {\r\n      return await tavilySearch(query, { limit: 15 });\r\n    } catch (error) {\r\n      console.error('Error searching food truck websites:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport const discoveryEngine = new FoodTruckDiscoveryEngine();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'crawlWebsite' has too many lines (60). Maximum allowed is 50.","line":145,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":204,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface FirecrawlResponse {\r\n  success: boolean;\r\n  data?: {\r\n    markdown?: string;\r\n    html?: string;\r\n    metadata?: {\r\n      title?: string;\r\n      description?: string;\r\n      language?: string;\r\n      sourceURL?: string;\r\n    };\r\n    links?: string[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\ninterface CrawlJobResponse {\r\n  success: boolean;\r\n  jobId?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface ScrapedMetadata {\r\n  title?: string;\r\n  description?: string;\r\n  language?: string;\r\n  sourceURL?: string;\r\n}\r\n\r\ninterface CrawlStatusResponse {\r\n  success: boolean;\r\n  status?: 'scraping' | 'completed' | 'failed';\r\n  data?: Array<{\r\n    markdown?: string;\r\n    html?: string;\r\n    metadata?: ScrapedMetadata;\r\n  }>;\r\n  error?: string;\r\n}\r\n\r\ninterface ContactInfo {\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\ninterface SocialMediaInfo {\r\n  instagram?: string;\r\n  facebook?: string;\r\n  twitter?: string;\r\n}\r\n\r\nconst FIRECRAWL_CACHE_TTL_MS = 1000 * 60 * 60 * 12; // 12 hours\r\nconst firecrawlCache: Record<string, { data: unknown; timestamp: number }> = {};\r\n\r\nexport class FirecrawlService {\r\n  private apiKey: string;\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    this.apiKey = process.env.FIRECRAWL_API_KEY!;\r\n    this.baseUrl = 'https://api.firecrawl.dev/v0';\r\n  }\r\n\r\n  private getCachedResult(\r\n    cacheKey: string,\r\n  ): FirecrawlResponse | CrawlJobResponse | CrawlStatusResponse | undefined {\r\n    const now = Date.now();\r\n    // Clean up expired cache\r\n    for (const key in firecrawlCache) {\r\n      if (\r\n        Object.prototype.hasOwnProperty.call(firecrawlCache, key) &&\r\n        now - firecrawlCache[key].timestamp > FIRECRAWL_CACHE_TTL_MS\r\n      ) {\r\n        delete firecrawlCache[key];\r\n      }\r\n    }\r\n    if (\r\n      firecrawlCache[cacheKey] != undefined &&\r\n      now - firecrawlCache[cacheKey].timestamp < FIRECRAWL_CACHE_TTL_MS\r\n    ) {\r\n      console.info(`FirecrawlService: Cache hit for ${cacheKey}`);\r\n      return firecrawlCache[cacheKey].data as\r\n        | FirecrawlResponse\r\n        | CrawlJobResponse\r\n        | CrawlStatusResponse;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private setCacheResult(cacheKey: string, data: unknown) {\r\n    firecrawlCache[cacheKey] = { data, timestamp: Date.now() };\r\n  }\r\n\r\n  async scrapeUrl(\r\n    url: string,\r\n    options: {\r\n      formats?: ('markdown' | 'html')[];\r\n      includeTags?: string[];\r\n      excludeTags?: string[];\r\n      onlyMainContent?: boolean;\r\n      waitFor?: number;\r\n    } = {},\r\n  ): Promise<FirecrawlResponse> {\r\n    const cacheKey = `scrape:${url}:${JSON.stringify(options)}`;\r\n    const cached = this.getCachedResult(cacheKey);\r\n    if (cached) {\r\n      return cached as FirecrawlResponse;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/scrape`, {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          url,\r\n          formats: options.formats ?? ['markdown'],\r\n          includeTags: options.includeTags,\r\n          excludeTags: options.excludeTags,\r\n          onlyMainContent: options.onlyMainContent ?? true,\r\n          waitFor: options.waitFor ?? 0,\r\n        }),\r\n      });\r\n\r\n      const data: unknown = await response.json();\r\n\r\n      if (!response.ok) {\r\n        const errorData = data as { error?: string };\r\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\r\n      }\r\n\r\n      this.setCacheResult(cacheKey, data);\r\n      return data as FirecrawlResponse;\r\n    } catch (error: unknown) {\r\n      console.warn('Firecrawl scrape error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  async crawlWebsite(\r\n    url: string,\r\n    options: {\r\n      crawlerOptions?: {\r\n        includes?: string[];\r\n        excludes?: string[];\r\n        maxDepth?: number;\r\n        limit?: number;\r\n      };\r\n      pageOptions?: {\r\n        formats?: ('markdown' | 'html')[];\r\n        onlyMainContent?: boolean;\r\n      };\r\n    } = {},\r\n  ): Promise<CrawlJobResponse> {\r\n    const cacheKey = `crawl:${url}:${JSON.stringify(options)}`;\r\n    const cached = this.getCachedResult(cacheKey);\r\n    if (cached) {\r\n      return cached as CrawlJobResponse;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/crawl`, {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          url,\r\n          crawlerOptions: {\r\n            maxDepth: 2,\r\n            limit: 10,\r\n            ...options.crawlerOptions,\r\n          },\r\n          pageOptions: {\r\n            formats: ['markdown'],\r\n            onlyMainContent: true,\r\n            ...options.pageOptions,\r\n          },\r\n        }),\r\n      });\r\n\r\n      const data: unknown = await response.json();\r\n\r\n      if (!response.ok) {\r\n        const errorData = data as { error?: string };\r\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\r\n      }\r\n\r\n      this.setCacheResult(cacheKey, data);\r\n      return data as CrawlJobResponse;\r\n    } catch (error: unknown) {\r\n      console.warn('Firecrawl crawl error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  async getCrawlStatus(jobId: string): Promise<CrawlStatusResponse> {\r\n    const cacheKey = `crawlStatus:${jobId}`;\r\n    const cached = this.getCachedResult(cacheKey);\r\n    if (cached) {\r\n      return cached as CrawlStatusResponse;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/crawl/status/${jobId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n      });\r\n\r\n      const data: unknown = await response.json();\r\n\r\n      if (!response.ok) {\r\n        const errorData = data as { error?: string };\r\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\r\n      }\r\n\r\n      this.setCacheResult(cacheKey, data);\r\n      return data as CrawlStatusResponse;\r\n    } catch (error: unknown) {\r\n      console.warn('Firecrawl status error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Specialized methods for food truck data\r\n  async scrapeFoodTruckWebsite(url: string): Promise<{\r\n    success: boolean;\r\n    data?: { markdown: string; name?: string; source_url?: string };\r\n    error?: string;\r\n  }> {\r\n    const result = await this.scrapeUrl(url, {\r\n      formats: ['markdown'],\r\n      onlyMainContent: true,\r\n      waitFor: 2000,\r\n    });\r\n\r\n    return result.success && result.data?.markdown != undefined\r\n      ? {\r\n          success: true,\r\n          data: {\r\n            markdown: result.data.markdown,\r\n            name: result.data.metadata?.title,\r\n            source_url: result.data.metadata?.sourceURL,\r\n          },\r\n        }\r\n      : { success: false, error: result.error ?? 'Markdown content not found' };\r\n  }\r\n\r\n  private extractPattern(text: string, pattern: RegExp): string | undefined {\r\n    const match = pattern.exec(text);\r\n    return match ? match[1].trim() : undefined;\r\n  }\r\n  private extractMenuSection(markdown: string): string | undefined {\r\n    // Use simpler, more efficient regex patterns with fixed max length\r\n    const menuPatterns = [\r\n      /menu\\s*:\\s*([^\\n]{1,50})/i,\r\n      /food\\s*:\\s*([^\\n]{1,50})/i,\r\n      /items?\\s*:\\s*([^\\n]{1,50})/i,\r\n      /what we serve\\s*:\\s*([^\\n]{1,50})/i,\r\n      /our food\\s*:\\s*([^\\n]{1,50})/i,\r\n    ];\r\n\r\n    for (const pattern of menuPatterns) {\r\n      const match = pattern.exec(markdown);\r\n      if (match) {\r\n        return match[1].trim();\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n  private extractContactInfo(markdown: string): ContactInfo | undefined {\r\n    const contact: ContactInfo = {}; // Phone number - Use specific patterns to prevent backtracking\r\n    const phoneRegex = /(?:phone|call|contact)(?:\\s*:\\s*)?([+]?\\d{3,4}[.\\s-]\\d{3}[.\\s-]\\d{3,4})/i;\r\n    const phoneMatch = phoneRegex.exec(markdown);\r\n    if (phoneMatch) {\r\n      contact.phone = phoneMatch[1].trim();\r\n    } // Email - Use specific pattern to avoid backtracking\r\n    const emailRegex = /([a-zA-Z0-9._%-]{1,64}@[a-zA-Z0-9-]{1,63}\\.[a-zA-Z]{2,6})/;\r\n    const emailMatch = emailRegex.exec(markdown);\r\n    if (emailMatch) {\r\n      contact.email = emailMatch[1].trim();\r\n    }\r\n\r\n    return Object.keys(contact).length > 0 ? contact : undefined;\r\n  }\r\n\r\n  private extractSocialMedia(markdown: string): SocialMediaInfo | undefined {\r\n    const social: SocialMediaInfo = {};\r\n    // Instagram - Use concise character class\r\n    const instagramRegex = /(?:instagram|@)\\s*([\\w.]+)/i;\r\n    const instagramMatch = instagramRegex.exec(markdown);\r\n    if (instagramMatch) {\r\n      social.instagram = instagramMatch[1].trim();\r\n    }\r\n    // Facebook - With fixed character class\r\n    const facebookRegex = /facebook\\.com\\/([\\w.-]+)/i;\r\n    const facebookMatch = facebookRegex.exec(markdown);\r\n    if (facebookMatch) {\r\n      social.facebook = facebookMatch[1].trim();\r\n    }\r\n    // Twitter - Use concise character class\r\n    const twitterRegex = /(?:twitter|@)\\s*([\\w.]+)/i; // Changed \\w+ to [\\w.]+ to allow dots in usernames\r\n    const twitterMatch = twitterRegex.exec(markdown);\r\n    if (twitterMatch) {\r\n      social.twitter = twitterMatch[1].trim();\r\n    }\r\n\r\n    return Object.keys(social).length > 0 ? social : undefined;\r\n  }\r\n\r\n  async scrapeMultipleUrls(\r\n    urls: string[],\r\n    options: {\r\n      batchSize?: number;\r\n      delay?: number;\r\n    } = {},\r\n  ): Promise<Array<{ url: string; result: FirecrawlResponse }>> {\r\n    const batchSize = options.batchSize ?? 5;\r\n    const delay = options.delay ?? 1000;\r\n    const results: Array<{ url: string; result: FirecrawlResponse }> = [];\r\n\r\n    for (let i = 0; i < urls.length; i += batchSize) {\r\n      const batch = urls.slice(i, i + batchSize);\r\n\r\n      const batchPromises = batch.map(async (url) => {\r\n        const result = await this.scrapeUrl(url);\r\n        return { url, result };\r\n      });\r\n\r\n      const batchResults = await Promise.all(batchPromises);\r\n      results.push(...batchResults);\r\n\r\n      // Add delay between batches to respect rate limits\r\n      if (i + batchSize < urls.length) {\r\n        await new Promise((resolve) => setTimeout(resolve, delay));\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  // Rate limiting and error handling\r\n  async scrapeWithRetry(url: string, maxRetries = 3, backoffMs = 1000): Promise<FirecrawlResponse> {\r\n    let lastError: Error;\r\n\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        const result = await this.scrapeUrl(url);\r\n\r\n        if (result.success) {\r\n          return result;\r\n        }\r\n\r\n        // If it's a rate limit error, wait longer\r\n        if (result.error?.includes('rate limit') === true) {\r\n          const waitTime = backoffMs * Math.pow(2, attempt);\r\n          console.info(`Rate limited. Waiting ${waitTime}ms before retry ${attempt}/${maxRetries}`);\r\n          await new Promise((resolve) => setTimeout(resolve, waitTime));\r\n          continue;\r\n        }\r\n\r\n        throw new Error(result.error);\r\n      } catch (error: unknown) {\r\n        lastError = error instanceof Error ? error : new Error(String(error));\r\n\r\n        if (attempt === maxRetries) {\r\n          break;\r\n        }\r\n\r\n        const waitTime = backoffMs * Math.pow(2, attempt);\r\n        console.info(`Attempt ${attempt} failed. Retrying in ${waitTime}ms...`);\r\n        await new Promise((resolve) => setTimeout(resolve, waitTime));\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: false,\r\n      error: lastError!.message,\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const firecrawl = new FirecrawlService();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'APIMonitor' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'APIMonitor'.","line":2,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":20,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[45,100],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorContext' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":76,"endColumn":45},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":93,"endColumn":47},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":110,"endColumn":50},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":127,"endColumn":54}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APIUsageService } from './supabase';\r\nimport { APIMonitor } from './monitoring/apiMonitor';\r\nimport { GeminiApiClient } from './gemini/geminiApiClient';\r\nimport { GeminiUsageLimits } from './gemini/usageLimits';\r\nimport { PromptTemplates } from './gemini/promptTemplates';\r\nimport { GeminiResponseParser } from './gemini/responseParser';\r\n\r\nimport {\r\n  MenuCategory,\r\n  LocationData,\r\n  OperatingHours,\r\n  SentimentAnalysisResult,\r\n  EnhancedFoodTruckData,\r\n  ExtractedFoodTruckDetails,\r\n  GeminiResponse,\r\n} from './types';\r\n\r\nexport class GeminiService {\r\n  private apiClient: GeminiApiClient;\r\n  private dailyRequestLimit = 1500;\r\n  private dailyTokenLimit = 32_000;\r\n\r\n  constructor() {\r\n    this.apiClient = new GeminiApiClient();\r\n  }\r\n\r\n   checkUsageLimits() {\r\n    return GeminiUsageLimits.checkUsageLimits({\r\n      dailyRequestLimit: this.dailyRequestLimit,\r\n      dailyTokenLimit: this.dailyTokenLimit,\r\n    });\r\n  }\r\n\r\n  private  makeGeminiRequest<T>(\r\n    prompt: string,\r\n    parser: (text: string) => T,\r\n    errorContext: string\r\n  ): Promise<GeminiResponse<T>> {\r\n    return this.apiClient.makeRequestWithParsing(prompt, parser);\r\n  }\r\n\r\n  async processMenuData(rawMenuText: string): Promise<GeminiResponse<MenuCategory[]>> {\r\n    const estimatedTokens = Math.ceil(rawMenuText.length / 4) + 500;\r\n    const usageCheck = await GeminiUsageLimits.checkWithMonitoring(estimatedTokens);\r\n\r\n    if (!usageCheck.allowed) {\r\n      return {\r\n        success: false,\r\n        error: usageCheck.reason ?? 'API limit reached',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.menuProcessing(rawMenuText);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      (text: string) => {\r\n        const parsedData = JSON.parse(text) as { categories: MenuCategory[] };\r\n        return parsedData.categories;\r\n      },\r\n      'menu processing'\r\n    );\r\n  }\r\n\r\n  async extractLocationFromText(textInput: string): Promise<GeminiResponse<LocationData>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.locationExtraction(textInput);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      GeminiResponseParser.parseLocationData,\r\n      'location extraction'\r\n    );\r\n  }\r\n\r\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiResponse<OperatingHours>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.operatingHours(hoursText);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      GeminiResponseParser.parseOperatingHours,\r\n      'hours standardization'\r\n    );\r\n  }\r\n\r\n  async analyzeSentiment(reviewText: string): Promise<GeminiResponse<SentimentAnalysisResult>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.sentimentAnalysis(reviewText);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      GeminiResponseParser.parseSentimentAnalysis,\r\n      'sentiment analysis'\r\n    );\r\n  }\r\n\r\n  async enhanceFoodTruckData(rawData: unknown): Promise<GeminiResponse<EnhancedFoodTruckData>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.dataEnhancement(rawData);\r\n    return this.makeGeminiRequest(\r\n      prompt,\r\n      GeminiResponseParser.parseEnhancedFoodTruckData,\r\n      'data enhancement'\r\n    );\r\n  }\r\n\r\n  async batchProcess(\r\n    items: Array<{ type: string; data: unknown }>,\r\n  ): Promise<Array<GeminiResponse<unknown>>> {\r\n    const results: Array<GeminiResponse<unknown>> = [];\r\n\r\n    for (const item of items) {\r\n      let result: GeminiResponse<unknown>;\r\n      switch (item.type) {\r\n        case 'menu': {\r\n          result = await this.processMenuData(item.data as string);\r\n          break;\r\n        }\r\n        case 'location': {\r\n          result = await this.extractLocationFromText(item.data as string);\r\n          break;\r\n        }\r\n        case 'hours': {\r\n          result = await this.standardizeOperatingHours(item.data as string);\r\n          break;\r\n        }\r\n        case 'sentiment': {\r\n          result = await this.analyzeSentiment(item.data as string);\r\n          break;\r\n        }\r\n        case 'enhance': {\r\n          result = await this.enhanceFoodTruckData(item.data); // item.data is already unknown\r\n          break;\r\n        }\r\n        default: {\r\n          result = { success: false, error: `Unknown processing type: ${item.type}` };\r\n          break;\r\n        }\r\n      }\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  async getUsageStats(): Promise<{ requests_count: number; tokens_used: number } | undefined> {\r\n    const usage = await APIUsageService.getTodayUsage('gemini');\r\n    return usage ?? undefined;\r\n  }\r\n\r\n  async extractFoodTruckDetailsFromMarkdown(\r\n    markdownContent: string,\r\n    sourceUrl?: string,\r\n  ): Promise<GeminiResponse<ExtractedFoodTruckDetails>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded for Gemini',\r\n      };\r\n    }\r\n\r\n    const prompt = PromptTemplates.foodTruckExtraction(markdownContent, sourceUrl);\r\n\r\n\r\n    const response = await this.makeGeminiRequest(\r\n      prompt,\r\n      (text: string) => {\r\n        const cleanedText = GeminiResponseParser.cleanMarkdownResponse(text);\r\n        return GeminiResponseParser.parseExtractedFoodTruckDetails(cleanedText);\r\n      },\r\n      'food truck extraction'\r\n    );\r\n\r\n    // Add promptSent to response for this specific method\r\n    return {\r\n      ...response,\r\n      promptSent: prompt,\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const gemini = new GeminiService();\r\n\r\n// Centralized Gemini operation dispatcher to eliminate duplication\r\nexport async function dispatchGeminiOperation(\r\n  type: 'menu' | 'location' | 'hours' | 'sentiment' | 'enhance',\r\n  data: unknown\r\n): Promise<unknown> {\r\n  switch (type) {\r\n    case 'menu': {\r\n      return await gemini.processMenuData(data as string);\r\n    }\r\n    case 'location': {\r\n      return await gemini.extractLocationFromText(data as string);\r\n    }\r\n    case 'hours': {\r\n      return await gemini.standardizeOperatingHours(data as string);\r\n    }\r\n    case 'sentiment': {\r\n      return await gemini.analyzeSentiment(data as string);\r\n    }\r\n    case 'enhance': {\r\n      return await gemini.enhanceFoodTruckData(data);\r\n    }\r\n    default: {\r\n      throw new Error(`Unknown Gemini operation type: ${String(type)}`);\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\geminiApiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\promptTemplates.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Method 'foodTruckExtraction' has too many lines (79). Maximum allowed is 50.","line":151,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":229,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":223,"column":3,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":223,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7319,7328],"text":"(sourceUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7319,7328],"text":"(sourceUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7319,7328],"text":"(Boolean(sourceUrl))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const PromptTemplates = {\r\n  menuProcessing: (rawMenuText: string) => `\r\nParse the following food truck menu text and return a structured JSON format.\r\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\r\n\r\nMenu text:\r\n${rawMenuText}\r\n\r\nExpected JSON format:\r\n[\r\n  {\r\n    \"category\": \"string\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"string\",\r\n        \"description\": \"string\",\r\n        \"price\": number,\r\n        \"dietary_tags\": [\"string\"]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nRules:\r\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\r\n- Include dietary restrictions and special tags\r\n- Group items into logical categories\r\n- If no clear categories, use \"Main Items\"\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  locationExtraction: (textInput: string) => `\r\nExtract location information from the following text and return structured data.\r\nLook for addresses, cross streets, landmarks, or location descriptions.\r\n\r\nText:\r\n${textInput}\r\n\r\nExpected JSON format:\r\n{\r\n  \"address\": \"string or undefined\",\r\n  \"city\": \"string or undefined\", \r\n  \"state\": \"string or undefined\",\r\n  \"zipCode\": \"string or undefined\",\r\n  \"coordinates\": {\"lat\": number, \"lng\": number} or undefined,\r\n  \"confidence\": number,\r\n  \"landmarks\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Set coordinates to undefined if not explicitly provided\r\n- Confidence should be 0.0 to 1.0 based on clarity\r\n- Include any mentioned landmarks or cross streets\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  operatingHours: (hoursText: string) => `\r\nParse the following operating hours text and return standardized format.\r\nConvert all times to 24-hour format and handle various input formats.\r\n\r\nHours text:\r\n${hoursText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n}\r\n\r\nRules:\r\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\r\n- If closed on a day, set \"closed\": true and omit open/close times\r\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\r\n- Default to reasonable hours if ambiguous\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  sentimentAnalysis: (reviewText: string) => `\r\nAnalyze the sentiment of this food truck review and extract key insights.\r\nFocus on food quality, service, value, and overall experience.\r\n\r\nReview text:\r\n${reviewText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"score\": number,\r\n  \"confidence\": number,\r\n  \"aspects\": {\r\n    \"food_quality\": number,\r\n    \"service\": number,\r\n    \"value\": number,\r\n    \"overall\": number\r\n  },\r\n  \"summary\": \"string\",\r\n  \"keywords\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Score should be 0.0 (very negative) to 1.0 (very positive)\r\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\r\n- Include specific aspects mentioned in the review\r\n- Summary should be 1-2 sentences max\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  dataEnhancement: (rawData: unknown) => `\r\nEnhance and standardize the following food truck data.\r\nFill in missing information where possible and improve data quality.\r\n\r\nRaw data:\r\n${JSON.stringify(rawData, undefined, 2)}\r\n\r\nExpected JSON format:\r\n{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"cuisine_type\": \"string\",\r\n  \"price_range\": \"$ | $$ | $$$ | $$$$\",\r\n  \"contact\": {\r\n    \"phone\": \"string\",\r\n    \"email\": \"string\",\r\n    \"website\": \"string\",\r\n    \"social_media\": {}\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string\",\r\n    \"city\": \"string\",\r\n    \"state\": \"string\",\r\n    \"coordinates\": {\"lat\": number, \"lng\": number}\r\n  },\r\n  \"operating_hours\": {},\r\n  \"menu_categories\": [\"string\"],\r\n  \"specialties\": [\"string\"],\r\n  \"dietary_options\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Preserve all original data while enhancing it\r\n- Standardize naming conventions\r\n- Infer cuisine type from menu items\r\n- Estimate price range from menu prices\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  foodTruckExtraction: (markdownContent: string, sourceUrl?: string) => {\r\n    const schema = `\r\nExpected JSON schema:\r\n{\r\n  \"name\": \"string (food truck name)\",\r\n  \"description\": \"string (brief description of the food truck)\",\r\n  \"cuisine_type\": \"string (type of cuisine served)\",\r\n  \"contact\": {\r\n    \"phone\": \"string (phone number if found)\",\r\n    \"email\": \"string (email if found)\", \r\n    \"website\": \"string (website URL if found)\",\r\n    \"social_media\": {\r\n      \"facebook\": \"string (Facebook URL if found)\",\r\n      \"instagram\": \"string (Instagram URL if found)\",\r\n      \"twitter\": \"string (Twitter URL if found)\"\r\n    }\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string (physical address if found)\",\r\n    \"city\": \"string (city name)\",\r\n    \"state\": \"string (state abbreviation)\",\r\n    \"coordinates\": {\r\n      \"lat\": \"number (latitude if found)\",\r\n      \"lng\": \"number (longitude if found)\"\r\n    }\r\n  },\r\n  \"operating_hours\": {\r\n    \"monday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"tuesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"wednesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"thursday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"friday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"saturday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"sunday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"}\r\n  },\r\n  \"menu\": [\r\n    {\r\n      \"category\": \"string (menu category)\",\r\n      \"items\": [\r\n        {\r\n          \"name\": \"string (item name)\",\r\n          \"description\": \"string (item description)\",\r\n          \"price\": \"number (price as number, not string)\",\r\n          \"dietary_tags\": [\"string (dietary restrictions/tags)\"]\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"specialties\": [\"string (signature dishes or specialties)\"],\r\n  \"dietary_options\": [\"string (dietary accommodations like vegan, gluten-free)\"],\r\n  \"price_range\": \"string ($ for under $10, $$ for $10-20, $$$ for $20-30, $$$$ for over $30)\"\r\n}\r\n`;\r\n\r\n    const instructions = `\r\nInstructions:\r\n- Extract as much information as possible from the provided content\r\n- If information is not available, use null for the field\r\n- For operating hours, use 24-hour format (e.g., \"14:30\" for 2:30 PM)\r\n- If a day is closed, set \"closed\": true and omit open/close times\r\n- For prices, extract numeric values only (e.g., 12.99, not \"$12.99\")\r\n- Be thorough in extracting menu items and their details\r\n- Look for social media links and contact information carefully\r\n- Return only the JSON object, no additional text or formatting\r\n`;\r\n\r\n    return `\r\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\r\n\r\nWebsite content:\r\n${markdownContent}\r\n\r\n${sourceUrl ? `Source URL: ${sourceUrl}` : ''}\r\n\r\n${schema}\r\n\r\n${instructions}\r\n`;\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\responseParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\usageLimits.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limits' is assigned a value but never used. Allowed unused args must match /^_/u.","line":60,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APIUsageService } from '../supabase';\r\nimport { APIMonitor } from '../monitoring/apiMonitor';\r\n\r\nexport interface UsageLimits {\r\n  dailyRequestLimit: number;\r\n  dailyTokenLimit: number;\r\n}\r\n\r\nexport interface UsageCheck {\r\n  canMakeRequest: boolean;\r\n  usage?: {\r\n    requests: { used: number; limit: number; remaining: number };\r\n    tokens: { used: number; limit: number; remaining: number };\r\n  };\r\n}\r\n\r\nexport class GeminiUsageLimits {\r\n  private static readonly DEFAULT_LIMITS: UsageLimits = {\r\n    dailyRequestLimit: 1500,\r\n    dailyTokenLimit: 32_000,\r\n  };\r\n\r\n  static async checkUsageLimits(limits: UsageLimits = this.DEFAULT_LIMITS): Promise<UsageCheck> {\r\n    try {\r\n      const usage = await APIUsageService.getTodayUsage('gemini');\r\n\r\n      if (!usage) {\r\n        return { canMakeRequest: true };\r\n      }\r\n\r\n      const requestsUsed = usage.requests_count ?? 0;\r\n      const tokensUsed = usage.tokens_used ?? 0;\r\n\r\n      const requestsRemaining = limits.dailyRequestLimit - requestsUsed;\r\n      const tokensRemaining = limits.dailyTokenLimit - tokensUsed;\r\n\r\n      return {\r\n        canMakeRequest: requestsRemaining > 0 && tokensRemaining > 100, // Keep 100 token buffer\r\n        usage: {\r\n          requests: {\r\n            used: requestsUsed,\r\n            limit: limits.dailyRequestLimit,\r\n            remaining: requestsRemaining,\r\n          },\r\n          tokens: {\r\n            used: tokensUsed,\r\n            limit: limits.dailyTokenLimit,\r\n            remaining: tokensRemaining,\r\n          },\r\n        },\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn('Error checking Gemini usage limits:', error);\r\n      return { canMakeRequest: false };\r\n    }\r\n  }\r\n\r\n  static async checkWithMonitoring(\r\n    estimatedTokens: number,\r\n    limits: UsageLimits = this.DEFAULT_LIMITS\r\n  ): Promise<{ allowed: boolean; reason?: string; waitTime?: number }> {\r\n    const canMakeRequest = await APIMonitor.canMakeRequest('gemini', 1, estimatedTokens);\r\n\r\n    if (!canMakeRequest.allowed) {\r\n      return {\r\n        allowed: false,\r\n        reason: `API limit reached: ${canMakeRequest.reason}. Wait time: ${Math.ceil((canMakeRequest.waitTime ?? 0) / 1000 / 60)} minutes`,\r\n      };\r\n    }\r\n\r\n    return { allowed: true };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\middleware\\middlewareHelpers.ts","messages":[{"ruleId":"max-params","severity":2,"message":"Async function 'logAndRedirect' has too many parameters (5). Maximum allowed is 4.","line":12,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":12,"endColumn":30},{"ruleId":"max-params","severity":2,"message":"Async function 'logAndRedirectDenied' has too many parameters (6). Maximum allowed is 4.","line":30,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":30,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":114,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":117,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1080,1083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1080,1083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":128,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":131,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1094,1097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1094,1097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":33,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":34,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":34,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .role on an `any` value.","line":39,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":31}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { AuditLogger } from '@/lib/security/auditLogger';\r\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\r\n\r\ninterface RequestMetadata {\r\n  ip: string;\r\n  userAgent: string;\r\n  url: string;\r\n  method: string;\r\n}\r\n\r\nasync function logAndRedirect(req: NextRequest, res: NextResponse, requestMetadata: RequestMetadata, reason: string, userError?: { message?: string }) {\r\n  await AuditLogger.logSecurityEvent({\r\n    event_type: 'permission_denied',\r\n    ip_address: requestMetadata.ip,\r\n    user_agent: requestMetadata.userAgent,\r\n    details: {\r\n      attempted_url: requestMetadata.url,\r\n      reason,\r\n      error: userError?.message,\r\n    },\r\n    severity: 'warning',\r\n  });\r\n  const redirectUrl = req.nextUrl.clone();\r\n  redirectUrl.pathname = '/login';\r\n  redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname);\r\n  return NextResponse.redirect(redirectUrl);\r\n}\r\n\r\nasync function logAndRedirectDenied(req: NextRequest, res: NextResponse, requestMetadata: RequestMetadata, user: any, profile: any, profileQueryError?: { message?: string }) {\r\n  await AuditLogger.logSecurityEvent({\r\n    event_type: 'permission_denied',\r\n    user_id: user.id,\r\n    user_email: user.email,\r\n    ip_address: requestMetadata.ip,\r\n    user_agent: requestMetadata.userAgent,\r\n    details: {\r\n      attempted_url: requestMetadata.url,\r\n      user_role: profile?.role ?? 'none',\r\n      reason: 'insufficient_privileges',\r\n      error: profileQueryError?.message,\r\n    },\r\n    severity: 'error',\r\n  });\r\n  const redirectUrl = req.nextUrl.clone();\r\n  redirectUrl.pathname = '/access-denied';\r\n  return NextResponse.redirect(redirectUrl);\r\n}\r\n\r\nexport async function protectAdminRoutes(req: NextRequest, res: NextResponse, requestMetadata: RequestMetadata) {\r\n  const supabase = createSupabaseMiddlewareClient(req, res);\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n  if (userError || !user) {\r\n    return logAndRedirect(req, res, requestMetadata, 'no_session', userError ?? undefined);\r\n  }\r\n  const { data: profile, error: profileQueryError } = await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', user.id)\r\n    .single();\r\n  if (profileQueryError || profile?.role !== 'admin') {\r\n    return logAndRedirectDenied(req, res, requestMetadata, user, profile, profileQueryError ?? undefined);\r\n  }\r\n  if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\r\n    await AuditLogger.logDataAccess(\r\n      user.id,\r\n      user.email ?? 'unknown',\r\n      'admin_panel',\r\n      req.nextUrl.pathname,\r\n      req.method === 'GET' ? 'read' : 'admin_access',\r\n      {\r\n        ip: requestMetadata.ip,\r\n        userAgent: requestMetadata.userAgent,\r\n      },\r\n    );\r\n  }\r\n  return res;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\monitoring\\apiMonitor.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static method 'generateAlerts' has too many lines (56). Maximum allowed is 50.","line":232,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":287,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA API Usage Monitoring and Alerting System\r\n * Implements proactive monitoring, alerting, and throttling for all external APIs\r\n */\r\n\r\nimport { APIUsageService } from '@/lib/supabase';\r\n\r\n// API Rate Limits Configuration\r\nexport const API_LIMITS = {\r\n  gemini: {\r\n    requests: { daily: 1500, hourly: 100 },\r\n    tokens: { daily: 32_000, hourly: 2000 },\r\n    alertThresholds: { warning: 0.8, critical: 0.95 }\r\n  },\r\n  firecrawl: {\r\n    requests: { daily: 500, hourly: 50 },\r\n    tokens: { daily: 0, hourly: 0 },\r\n    alertThresholds: { warning: 0.8, critical: 0.95 }\r\n  },\r\n  tavily: {\r\n    requests: { daily: 1000, hourly: 100 },\r\n    tokens: { daily: 0, hourly: 0 },\r\n    alertThresholds: { warning: 0.8, critical: 0.95 }\r\n  },\r\n  supabase: {\r\n    requests: { daily: 50_000, hourly: 5000 },\r\n    tokens: { daily: 0, hourly: 0 },\r\n    alertThresholds: { warning: 0.9, critical: 0.98 }\r\n  }\r\n} as const;\r\n\r\nexport type APIService = keyof typeof API_LIMITS;\r\nexport type AlertLevel = 'info' | 'warning' | 'critical';\r\n\r\nexport interface APIUsageAlert {\r\n  service: APIService;\r\n  level: AlertLevel;\r\n  message: string;\r\n  usage: {\r\n    current: number;\r\n    limit: number;\r\n    percentage: number;\r\n  };\r\n  timestamp: string;\r\n  recommendations: string[];\r\n}\r\n\r\nexport interface APIUsageData {\r\n  requests: { used: number; limit: number; percentage: number };\r\n  tokens?: { used: number; limit: number; percentage: number };\r\n}\r\n\r\nexport interface APIMonitoringResult {\r\n  canMakeRequest: boolean;\r\n  alerts: APIUsageAlert[];\r\n  usage: Record<APIService, APIUsageData>;\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Comprehensive API Monitoring Service\r\n */\r\nexport class APIMonitor {\r\n  private static alertHistory: APIUsageAlert[] = [];\r\n\r\n  /**\r\n   * Check if API request can be made safely\r\n   */\r\n  static async canMakeRequest(\r\n    service: APIService, \r\n    requestCount: number = 1, \r\n    tokenCount: number = 0\r\n  ): Promise<{ allowed: boolean; reason?: string; waitTime?: number }> {\r\n    try {\r\n      const usage = await this.getCurrentUsage(service);\r\n      const limits = API_LIMITS[service];\r\n\r\n      // Check daily limits\r\n      const newRequestCount = usage.requests.used + requestCount;\r\n      const newTokenCount = (usage.tokens?.used ?? 0) + tokenCount;\r\n\r\n      if (newRequestCount > limits.requests.daily) {\r\n        return {\r\n          allowed: false,\r\n          reason: `Daily request limit exceeded (${newRequestCount}/${limits.requests.daily})`,\r\n          waitTime: this.getTimeUntilReset('daily')\r\n        };\r\n      }\r\n\r\n      if (limits.tokens != undefined && newTokenCount > limits.tokens.daily) {\r\n        return {\r\n          allowed: false,\r\n          reason: `Daily token limit exceeded (${newTokenCount}/${limits.tokens.daily})`,\r\n          waitTime: this.getTimeUntilReset('daily')\r\n        };\r\n      }\r\n\r\n      // Check if approaching critical threshold\r\n      const requestPercentage = newRequestCount / limits.requests.daily;\r\n      if (requestPercentage > limits.alertThresholds.critical) {\r\n        return {\r\n          allowed: false,\r\n          reason: `Approaching critical usage threshold (${(requestPercentage * 100).toFixed(1)}%)`,\r\n          waitTime: this.getTimeUntilReset('daily')\r\n        };\r\n      }\r\n\r\n      return { allowed: true };\r\n    } catch (error) {\r\n      console.error(`Error checking API limits for ${service}:`, error);\r\n      // Fail safe - allow request but log error\r\n      return { allowed: true };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current usage for a service\r\n   */\r\n  static async getCurrentUsage(service: APIService): Promise<APIUsageData> {\r\n    const todayUsage = await APIUsageService.getTodayUsage(service);\r\n    const limits = API_LIMITS[service];\r\n\r\n    const usage: APIUsageData = {\r\n      requests: {\r\n        used: todayUsage?.requests_count ?? 0,\r\n        limit: limits.requests.daily,\r\n        percentage: ((todayUsage?.requests_count ?? 0) / limits.requests.daily) * 100\r\n      }\r\n    };\r\n\r\n    if (limits.tokens.daily > 0) {\r\n      usage.tokens = {\r\n        used: todayUsage?.tokens_used ?? 0,\r\n        limit: limits.tokens.daily,\r\n        percentage: ((todayUsage?.tokens_used ?? 0) / limits.tokens.daily) * 100\r\n      };\r\n    }\r\n\r\n    return usage;\r\n  }\r\n\r\n  /**\r\n   * Comprehensive monitoring check for all APIs\r\n   */\r\n  static async checkAllAPIs(): Promise<APIMonitoringResult> {\r\n    const alerts: APIUsageAlert[] = [];\r\n    const usage: Record<APIService, APIUsageData> = {} as Record<APIService, APIUsageData>;\r\n    const recommendations: string[] = [];\r\n    let canMakeRequest = true;\r\n\r\n    for (const service of Object.keys(API_LIMITS) as APIService[]) {\r\n      try {\r\n        const serviceUsage = await this.getCurrentUsage(service);\r\n        usage[service] = serviceUsage;\r\n\r\n        // Check for alerts\r\n        const serviceAlerts = this.generateAlerts(service, serviceUsage);\r\n        alerts.push(...serviceAlerts);\r\n\r\n        // Check if any service is at critical level\r\n        if (serviceUsage.requests.percentage > API_LIMITS[service].alertThresholds.critical * 100) {\r\n          canMakeRequest = false;\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error monitoring ${service}:`, error);\r\n        alerts.push({\r\n          service,\r\n          level: 'warning',\r\n          message: `Failed to check usage for ${service}`,\r\n          usage: { current: 0, limit: 0, percentage: 0 },\r\n          timestamp: new Date().toISOString(),\r\n          recommendations: ['Check API connectivity', 'Verify credentials']\r\n        });\r\n      }\r\n    }\r\n\r\n    // Generate global recommendations\r\n    recommendations.push(...this.generateRecommendations(usage, alerts));\r\n\r\n    return {\r\n      canMakeRequest,\r\n      alerts,\r\n      usage,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  // Helper for token alerts\r\n  private static generateTokenAlerts(service: APIService, usage: APIUsageData, limits: typeof API_LIMITS[APIService], timestamp: string): APIUsageAlert[] {\r\n    const alerts: APIUsageAlert[] = [];\r\n    if (usage.tokens && limits.tokens.daily > 0) {\r\n      const tokenPercentage = usage.tokens.percentage;\r\n      if (tokenPercentage > limits.alertThresholds.critical * 100) {\r\n        alerts.push({\r\n          service,\r\n          level: 'critical',\r\n          message: `Critical: ${service} token usage at ${tokenPercentage.toFixed(1)}%`,\r\n          usage: {\r\n            current: usage.tokens.used,\r\n            limit: usage.tokens.limit,\r\n            percentage: tokenPercentage\r\n          },\r\n          timestamp,\r\n          recommendations: [\r\n            'Reduce prompt complexity',\r\n            'Implement response caching',\r\n            'Optimize token usage patterns'\r\n          ]\r\n        });\r\n      } else if (tokenPercentage > limits.alertThresholds.warning * 100) {\r\n        alerts.push({\r\n          service,\r\n          level: 'warning',\r\n          message: `Warning: ${service} token usage at ${tokenPercentage.toFixed(1)}%`,\r\n          usage: {\r\n            current: usage.tokens.used,\r\n            limit: usage.tokens.limit,\r\n            percentage: tokenPercentage\r\n          },\r\n          timestamp,\r\n          recommendations: [\r\n            'Monitor token consumption',\r\n            'Optimize prompt efficiency',\r\n            'Consider response caching'\r\n          ]\r\n        });\r\n      }\r\n    }\r\n    return alerts;\r\n  }\r\n\r\n  private static generateAlerts(service: APIService, usage: APIUsageData): APIUsageAlert[] {\r\n    const alerts: APIUsageAlert[] = [];\r\n    const limits = API_LIMITS[service];\r\n    const timestamp = new Date().toISOString();\r\n\r\n    // Check request usage\r\n    const requestPercentage = usage.requests.percentage;\r\n    if (requestPercentage > limits.alertThresholds.critical * 100) {\r\n      alerts.push({\r\n        service,\r\n        level: 'critical',\r\n        message: `Critical: ${service} request usage at ${requestPercentage.toFixed(1)}%`,\r\n        usage: {\r\n          current: usage.requests.used,\r\n          limit: usage.requests.limit,\r\n          percentage: requestPercentage\r\n        },\r\n        timestamp,\r\n        recommendations: [\r\n          'Immediately reduce API calls',\r\n          'Implement request queuing',\r\n          'Consider upgrading API plan'\r\n        ]\r\n      });\r\n    } else if (requestPercentage > limits.alertThresholds.warning * 100) {\r\n      alerts.push({\r\n        service,\r\n        level: 'warning',\r\n        message: `Warning: ${service} request usage at ${requestPercentage.toFixed(1)}%`,\r\n        usage: {\r\n          current: usage.requests.used,\r\n          limit: usage.requests.limit,\r\n          percentage: requestPercentage\r\n        },\r\n        timestamp,\r\n        recommendations: [\r\n          'Monitor usage closely',\r\n          'Optimize request patterns',\r\n          'Enable request caching'\r\n        ]\r\n      });\r\n    }\r\n\r\n    // Token alerts\r\n    alerts.push(...this.generateTokenAlerts(service, usage, limits, timestamp));\r\n\r\n    // Store alerts in history\r\n    this.alertHistory.push(...alerts);\r\n    \r\n    // Keep only last 100 alerts\r\n    if (this.alertHistory.length > 100) {\r\n      this.alertHistory = this.alertHistory.slice(-100);\r\n    }\r\n\r\n    return alerts;\r\n  }\r\n\r\n  /**\r\n   * Generate optimization recommendations\r\n   */\r\n  private static generateRecommendations(usage: Record<APIService, APIUsageData>, alerts: APIUsageAlert[]): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // High-level optimization recommendations\r\n    const criticalAlerts = alerts.filter(a => a.level === 'critical');\r\n    const warningAlerts = alerts.filter(a => a.level === 'warning');\r\n\r\n    if (criticalAlerts.length > 0) {\r\n      recommendations.push('URGENT: Implement immediate API throttling', 'Enable aggressive caching for all API responses', 'Consider upgrading API plans for critical services');\r\n    }\r\n\r\n    if (warningAlerts.length > 0) {\r\n      recommendations.push('Implement request queuing and batching', 'Optimize API call patterns and frequency', 'Enable response caching where possible');\r\n    }\r\n\r\n    // Service-specific recommendations\r\n    if (usage.gemini?.requests?.percentage > 70) {\r\n      recommendations.push('Gemini: Optimize prompt length and complexity', 'Gemini: Implement response caching for similar queries');\r\n    }\r\n\r\n    if (usage.firecrawl?.requests?.percentage > 70) {\r\n      recommendations.push('Firecrawl: Implement URL deduplication', 'Firecrawl: Cache crawl results for repeated URLs');\r\n    }\r\n\r\n    return [...new Set(recommendations)]; // Remove duplicates\r\n  }\r\n\r\n  /**\r\n   * Get time until rate limit reset\r\n   */\r\n  private static getTimeUntilReset(period: 'hourly' | 'daily'): number {\r\n    const now = new Date();\r\n    \r\n    if (period === 'hourly') {\r\n      const nextHour = new Date(now);\r\n      nextHour.setHours(now.getHours() + 1, 0, 0, 0);\r\n      return nextHour.getTime() - now.getTime();\r\n    } else {\r\n      const nextDay = new Date(now);\r\n      nextDay.setDate(now.getDate() + 1);\r\n      nextDay.setHours(0, 0, 0, 0);\r\n      return nextDay.getTime() - now.getTime();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get alert history\r\n   */\r\n  static getAlertHistory(): APIUsageAlert[] {\r\n    return [...this.alertHistory];\r\n  }\r\n\r\n  /**\r\n   * Clear alert history\r\n   */\r\n  static clearAlertHistory(): void {\r\n    this.alertHistory = [];\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\bundleAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\databaseCache.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async arrow function has too many lines (66). Maximum allowed is 50.","line":78,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":143,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":142,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":142,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Database Query Optimization and Caching\r\n * Implements Next.js unstable_cache for optimal performance\r\n */\r\n\r\nimport { unstable_cache } from 'next/cache';\r\nimport { supabaseAdmin, FoodTruckService } from '@/lib/supabase';\r\nimport type { FoodTruck } from '@/lib/types';\r\n\r\n// Cache configuration\r\nconst CACHE_CONFIG = {\r\n  // Short-term cache for frequently changing data\r\n  SHORT_TTL: 60 * 5, // 5 minutes\r\n  // Medium-term cache for semi-static data\r\n  MEDIUM_TTL: 60 * 30, // 30 minutes\r\n  // Long-term cache for static data\r\n  LONG_TTL: 60 * 60 * 24, // 24 hours\r\n} as const;\r\n\r\n/**\r\n * Cached food truck queries with optimized database access\r\n */\r\nexport const CachedFoodTruckService = {\r\n  /**\r\n   * Get all food trucks with caching\r\n   * Cache for 30 minutes since truck data changes moderately\r\n   */\r\n  getAllTrucksCached : unstable_cache(\r\n    async (): Promise<{ trucks: FoodTruck[]; count: number }> => {\r\n      console.info('CachedFoodTruckService: Cache miss - fetching all trucks from database');\r\n      const result = await FoodTruckService.getAllTrucks();\r\n      return { trucks: result.trucks, count: result.total };\r\n    },\r\n    ['all-trucks'],\r\n    {\r\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\r\n      tags: ['food-trucks', 'all-trucks']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get trucks by location with caching\r\n   * Cache for 5 minutes since location-based queries are time-sensitive\r\n   */\r\n  getTrucksByLocationCached : unstable_cache(\r\n    async (lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> => {\r\n      console.info(`CachedFoodTruckService: Cache miss - fetching trucks near ${lat},${lng} (${radiusKm}km)`);\r\n      return await FoodTruckService.getTrucksByLocation(lat, lng, radiusKm);\r\n    },\r\n    ['trucks-by-location'],\r\n    {\r\n      revalidate: CACHE_CONFIG.SHORT_TTL,\r\n      tags: ['food-trucks', 'location-search']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get truck by ID with caching\r\n   * Cache for 30 minutes since individual truck data is relatively stable\r\n   */\r\n  getTruckByIdCached : unstable_cache(\r\n    async (id: string): Promise<FoodTruck | null> => {\r\n      console.info(`CachedFoodTruckService: Cache miss - fetching truck ${id} from database`);\r\n      return await FoodTruckService.getTruckById(id);\r\n    },\r\n    ['truck-by-id'],\r\n    {\r\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\r\n      tags: ['food-trucks', 'truck-details']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Search trucks with caching\r\n   * Cache for 5 minutes since search results should be relatively fresh\r\n   */\r\n  searchTrucksCached : unstable_cache(\r\n    async (query: string, filters?: {\r\n      cuisine?: string;\r\n      openNow?: boolean;\r\n      lat?: number;\r\n      lng?: number;\r\n      radius?: number;\r\n    }): Promise<FoodTruck[]> => {\r\n      console.info(`CachedFoodTruckService: Cache miss - searching trucks for \"${query}\"`);\r\n      \r\n      if (supabaseAdmin == undefined) {\r\n        throw new Error('Supabase admin client not available');\r\n      }\r\n\r\n      let dbQuery = supabaseAdmin\r\n        .from('food_trucks')\r\n        .select('*')\r\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%,cuisine_type.cs.{${query}}`);\r\n\r\n      // Apply filters\r\n      if (filters?.cuisine != undefined && filters.cuisine !== '') {\r\n        dbQuery = dbQuery.contains('cuisine_type', [filters.cuisine]);\r\n      }\r\n\r\n      const { data: trucks, error } = await dbQuery.limit(50);\r\n\r\n      if (error != undefined) {\r\n        throw new Error(`Search query failed: ${error.message}`);\r\n      }\r\n\r\n      let results = trucks ?? [];\r\n\r\n      // Apply location filter if provided\r\n      if (filters?.lat != undefined && filters?.lng != undefined && filters?.radius != undefined) {\r\n        results = results.filter((truck: FoodTruck) => {\r\n          if (truck.current_location?.lat == undefined || truck.current_location?.lng == undefined) {\r\n            return false;\r\n          }\r\n          const distance = calculateDistance(\r\n            filters.lat,\r\n            filters.lng,\r\n            truck.current_location.lat,\r\n            truck.current_location.lng\r\n          );\r\n          return distance <= (filters.radius ?? 10);\r\n        });\r\n      }\r\n\r\n      // Apply openNow filter if provided\r\n      if (filters?.openNow === true) {\r\n        const now = new Date();\r\n        const currentDay = now.toLocaleDateString('en-US', { weekday: 'short' }).toLowerCase(); // 'mon', 'tue', etc.\r\n        const currentTime = now.getHours() * 100 + now.getMinutes(); // HHMM format\r\n\r\n        results = results.filter((truck: FoodTruck) => {\r\n          const hours = truck.operating_hours?.[currentDay as keyof typeof truck.operating_hours] as { closed?: boolean; open?: string; close?: string } | undefined;\r\n          if (hours == undefined || hours.closed === true) return false;\r\n\r\n          const openTime = parseTimeString(hours.open ?? '');\r\n          const closeTime = parseTimeString(hours.close ?? '');\r\n\r\n          return currentTime >= openTime && currentTime <= closeTime;\r\n        });\r\n      }\r\n\r\n      return results;\r\n    },\r\n    ['search-trucks'],\r\n    {\r\n      revalidate: CACHE_CONFIG.SHORT_TTL,\r\n      tags: ['food-trucks', 'search']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get data quality statistics with caching\r\n   * Cache for 24 hours since quality stats change slowly\r\n   */\r\n  getDataQualityStatsCached : unstable_cache(\r\n    async (): Promise<{\r\n      averageScore: number;\r\n      distribution: Record<string, number>;\r\n      totalTrucks: number;\r\n    }> => {\r\n      console.info('CachedFoodTruckService: Cache miss - calculating data quality stats');\r\n      \r\n      if (supabaseAdmin == undefined) {\r\n        throw new Error('Supabase admin client not available');\r\n      }\r\n\r\n      const { data: trucks, error } = await supabaseAdmin\r\n        .from('food_trucks')\r\n        .select('data_quality_score');\r\n\r\n      if (error) {\r\n        throw new Error(`Quality stats query failed: ${error.message}`);\r\n      }\r\n\r\n      const scores = trucks == undefined ? [] : trucks.map((t: { data_quality_score?: number }) => t.data_quality_score ?? 0);\r\n      const averageScore = scores.length > 0\r\n        ? scores.reduce((sum: number, score: number) => sum + score, 0) / scores.length\r\n        : 0;\r\n\r\n      const distribution = {\r\n        high: scores.filter((s: number) => s >= 0.8).length,\r\n        medium: scores.filter((s: number) => s >= 0.6 && s < 0.8).length,\r\n        low: scores.filter((s: number) => s < 0.6).length\r\n      };\r\n\r\n      return {\r\n        averageScore: Math.round(averageScore * 100) / 100,\r\n        distribution,\r\n        totalTrucks: scores.length\r\n      };\r\n    },\r\n    ['data-quality-stats'],\r\n    {\r\n      revalidate: CACHE_CONFIG.LONG_TTL,\r\n      tags: ['food-trucks', 'data-quality']\r\n    }\r\n  ),\r\n};\r\n\r\n/**\r\n * Cache invalidation utilities\r\n */\r\nexport const CacheManager = {\r\n  /**\r\n   * Invalidate all food truck related caches\r\n   */\r\n  async invalidateAllFoodTruckCaches(): Promise<void> {\r\n    try {\r\n      const { revalidateTag } = await import('next/cache');\r\n      revalidateTag('food-trucks');\r\n      console.info('CacheManager: Invalidated all food truck caches');\r\n    } catch (error) {\r\n      console.warn('CacheManager: Failed to invalidate caches:', error);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Invalidate specific truck cache\r\n   */\r\n  async invalidateTruckCache(truckId: string): Promise<void> {\r\n    try {\r\n      const { revalidateTag } = await import('next/cache');\r\n      revalidateTag(`truck-${truckId}`);\r\n      revalidateTag('food-trucks'); // Also invalidate general caches\r\n      console.info(`CacheManager: Invalidated cache for truck ${truckId}`);\r\n    } catch (error) {\r\n      console.warn('CacheManager: Failed to invalidate truck cache:', error);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Invalidate search and location caches\r\n   */\r\n  async invalidateSearchCaches(): Promise<void> {\r\n    try {\r\n      const { revalidateTag } = await import('next/cache');\r\n      revalidateTag('search');\r\n      revalidateTag('location-search');\r\n      console.info('CacheManager: Invalidated search caches');\r\n    } catch (error) {\r\n      console.warn('CacheManager: Failed to invalidate search caches:', error);\r\n    }\r\n  },\r\n};\r\n\r\n/**\r\n * Utility functions\r\n */\r\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\r\n  const R = 6371; // Earth's radius in kilometers\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLng = (lng2 - lng1) * Math.PI / 180;\r\n  const a = \r\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n    Math.sin(dLng/2) * Math.sin(dLng/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n}\r\n\r\nfunction parseTimeString(timeStr: string): number {\r\n  if (timeStr == undefined || timeStr === '') return 0;\r\n  const [hours, minutes] = timeStr.split(':').map(Number);\r\n  return hours * 100 + (minutes ?? 0);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\webVitals.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'getPerformanceOptimizationSuggestions' has too many lines (102). Maximum allowed is 50.","line":221,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":322,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":105,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":105,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":107,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":107,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":109,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":109,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":113,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":113,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Core Web Vitals Monitoring Implementation\r\n * Tracks LCP, FID, CLS, FCP, and TTFB metrics for performance optimization\r\n */\r\n\r\n// @ts-expect-error TS(2792): Cannot find module 'web-vitals'. Did you mean to s... Remove this comment to see the full error message\r\nimport { getCLS, getFCP, getFID, getLCP, getTTFB, Metric } from 'web-vitals';\r\n\r\n// Performance thresholds based on Google's Core Web Vitals standards\r\nexport const PERFORMANCE_THRESHOLDS = {\r\n  LCP: { good: 2500, needsImprovement: 4000 }, // Largest Contentful Paint\r\n  FID: { good: 100, needsImprovement: 300 },   // First Input Delay\r\n  CLS: { good: 0.1, needsImprovement: 0.25 },  // Cumulative Layout Shift\r\n  FCP: { good: 1800, needsImprovement: 3000 }, // First Contentful Paint\r\n  TTFB: { good: 800, needsImprovement: 1800 }  // Time to First Byte\r\n} as const;\r\n\r\nexport type MetricName = keyof typeof PERFORMANCE_THRESHOLDS;\r\n\r\nexport interface PerformanceMetric {\r\n  name: MetricName;\r\n  value: number;\r\n  rating: 'good' | 'needs-improvement' | 'poor';\r\n  timestamp: number;\r\n  url: string;\r\n  userAgent: string;\r\n}\r\n\r\n// In-memory storage for metrics (in production, send to analytics service)\r\nconst metricsStore: PerformanceMetric[] = [];\r\n\r\n/**\r\n * Categorizes metric value based on thresholds\r\n */\r\nfunction getRating(name: MetricName, value: number): 'good' | 'needs-improvement' | 'poor' {\r\n  const thresholds = PERFORMANCE_THRESHOLDS[name];\r\n  if (value <= thresholds.good) return 'good';\r\n  if (value <= thresholds.needsImprovement) return 'needs-improvement';\r\n  return 'poor';\r\n}\r\n\r\n/**\r\n * Processes and stores a web vital metric\r\n */\r\nfunction handleMetric(metric: Metric) {\r\n  // Type-safe casting with validation\r\n  const metricName = String((metric as { name: string }).name) as MetricName;\r\n  const metricValue = Number((metric as { value: number }).value);\r\n\r\n  const performanceMetric: PerformanceMetric = {\r\n    name: metricName,\r\n    value: metricValue,\r\n    rating: getRating(metricName, metricValue),\r\n    timestamp: Date.now(),\r\n    url: globalThis.location.href,\r\n    userAgent: navigator.userAgent\r\n  };\r\n\r\n  // Store metric locally\r\n  metricsStore.push(performanceMetric);\r\n\r\n  // Send to analytics endpoint (non-blocking)\r\n  sendMetricToAnalytics(performanceMetric).catch(error => {\r\n    console.warn('Failed to send metric to analytics:', error);\r\n  });\r\n\r\n  // Log performance issues\r\n  if (performanceMetric.rating === 'poor') {\r\n    console.warn(`Poor ${metricName} performance:`, {\r\n      value: metricValue,\r\n      threshold: PERFORMANCE_THRESHOLDS[metricName],\r\n      url: performanceMetric.url\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Sends metric data to analytics endpoint\r\n */\r\nasync function sendMetricToAnalytics(metric: PerformanceMetric): Promise<void> {\r\n  try {\r\n    await fetch('/api/analytics/web-vitals', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(metric),\r\n    });\r\n  } catch (error) {\r\n    // Silently fail - don't impact user experience\r\n    console.info('Analytics endpoint unavailable:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes Core Web Vitals monitoring\r\n * Call this in your app's root component or _app.tsx\r\n */\r\nexport function initWebVitalsMonitoring(): void {\r\n  try {\r\n    // Type-safe metric handlers with explicit casting\r\n    const safeHandleMetric = (metric: Metric) => handleMetric(metric);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getCLS(safeHandleMetric);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getFCP(safeHandleMetric);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getFID(safeHandleMetric);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getLCP(safeHandleMetric);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getTTFB(safeHandleMetric);\r\n  } catch (error) {\r\n    console.warn('Failed to initialize web vitals monitoring:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets current performance metrics summary\r\n */\r\nexport function getPerformanceMetrics(): {\r\n  metrics: PerformanceMetric[];\r\n  summary: Record<MetricName, {\r\n    latest: number | null;\r\n    average: number;\r\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\r\n    count: number;\r\n  }>;\r\n} {\r\n  const summary = {} as Record<MetricName, {\r\n    latest: number | null;\r\n    average: number;\r\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\r\n    count: number;\r\n  }>;\r\n\r\n  // Initialize summary for all metrics\r\n  for (const metricName of Object.keys(PERFORMANCE_THRESHOLDS)) {\r\n    const name = metricName as MetricName;\r\n    const metricData = metricsStore.filter(m => m.name === name);\r\n    \r\n    if (metricData.length === 0) {\r\n      summary[name] = {\r\n        latest: undefined,\r\n        average: 0,\r\n        rating: 'no-data',\r\n        count: 0\r\n      };\r\n    } else {\r\n      const latest = metricData.at(-1);\r\n      const average = metricData.reduce((sum, m) => sum + m.value, 0) / metricData.length;\r\n      \r\n      summary[name] = {\r\n        latest: latest?.value ?? undefined,\r\n        average: Math.round(average),\r\n        rating: getRating(name, average),\r\n        count: metricData.length\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    metrics: [...metricsStore],\r\n    summary\r\n  };\r\n}\r\n\r\n/**\r\n * Performance budget checker\r\n */\r\nexport function checkPerformanceBudget(): {\r\n  passed: boolean;\r\n  violations: Array<{\r\n    metric: MetricName;\r\n    value: number;\r\n    threshold: number;\r\n    severity: 'warning' | 'critical';\r\n  }>;\r\n} {\r\n  const { summary } = getPerformanceMetrics();\r\n  const violations: Array<{\r\n    metric: MetricName;\r\n    value: number;\r\n    threshold: number;\r\n    severity: 'warning' | 'critical';\r\n  }> = [];\r\n\r\n  for (const [metricName, data] of Object.entries(summary)) {\r\n    const name = metricName as MetricName;\r\n    if (data.latest == undefined) continue;\r\n\r\n    const thresholds = PERFORMANCE_THRESHOLDS[name];\r\n    \r\n    if (data.latest > thresholds.needsImprovement) {\r\n      violations.push({\r\n        metric: name,\r\n        value: data.latest,\r\n        threshold: thresholds.needsImprovement,\r\n        severity: 'critical'\r\n      });\r\n    } else if (data.latest > thresholds.good) {\r\n      violations.push({\r\n        metric: name,\r\n        value: data.latest,\r\n        threshold: thresholds.good,\r\n        severity: 'warning'\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    passed: violations.length === 0,\r\n    violations\r\n  };\r\n}\r\n\r\n/**\r\n * Performance optimization suggestions based on metrics\r\n */\r\nexport function getPerformanceOptimizationSuggestions(): Array<{\r\n  metric: MetricName;\r\n  issue: string;\r\n  suggestions: string[];\r\n  priority: 'high' | 'medium' | 'low';\r\n}> {\r\n  const { summary } = getPerformanceMetrics();\r\n  const suggestions: Array<{\r\n    metric: MetricName;\r\n    issue: string;\r\n    suggestions: string[];\r\n    priority: 'high' | 'medium' | 'low';\r\n  }> = [];\r\n\r\n  for (const [metricName, data] of Object.entries(summary)) {\r\n    const name = metricName as MetricName;\r\n    if (data.rating === 'poor' || data.rating === 'needs-improvement') {\r\n      switch (name) {\r\n        case 'LCP': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `Largest Contentful Paint is ${data.latest}ms (target: <2500ms)`,\r\n            suggestions: [\r\n              'Optimize images with Next.js Image component',\r\n              'Implement lazy loading for non-critical content',\r\n              'Use CDN for static assets',\r\n              'Optimize server response times',\r\n              'Preload critical resources'\r\n            ],\r\n            priority: 'high'\r\n          });\r\n          break;\r\n        }\r\n        case 'FID': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `First Input Delay is ${data.latest}ms (target: <100ms)`,\r\n            suggestions: [\r\n              'Reduce JavaScript bundle size',\r\n              'Implement code splitting',\r\n              'Use web workers for heavy computations',\r\n              'Optimize third-party scripts',\r\n              'Defer non-critical JavaScript'\r\n            ],\r\n            priority: 'high'\r\n          });\r\n          break;\r\n        }\r\n        case 'CLS': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `Cumulative Layout Shift is ${data.latest} (target: <0.1)`,\r\n            suggestions: [\r\n              'Set explicit dimensions for images and videos',\r\n              'Reserve space for dynamic content',\r\n              'Use CSS aspect-ratio for responsive images',\r\n              'Avoid inserting content above existing content',\r\n              'Use transform animations instead of layout changes'\r\n            ],\r\n            priority: 'medium'\r\n          });\r\n          break;\r\n        }\r\n        case 'FCP': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `First Contentful Paint is ${data.latest}ms (target: <1800ms)`,\r\n            suggestions: [\r\n              'Optimize critical rendering path',\r\n              'Inline critical CSS',\r\n              'Minimize render-blocking resources',\r\n              'Use resource hints (preload, prefetch)',\r\n              'Optimize web fonts loading'\r\n            ],\r\n            priority: 'medium'\r\n          });\r\n          break;\r\n        }\r\n        case 'TTFB': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `Time to First Byte is ${data.latest}ms (target: <800ms)`,\r\n            suggestions: [\r\n              'Optimize server response times',\r\n              'Use CDN for global distribution',\r\n              'Implement server-side caching',\r\n              'Optimize database queries',\r\n              'Use edge computing for dynamic content'\r\n            ],\r\n            priority: 'high'\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return suggestions.sort((a, b) => {\r\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\r\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\pipelineHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PostgrestError' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'PostgrestError'.","line":4,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":4,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[246,303],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'buildTruckDataSchema' has too many lines (66). Maximum allowed is 50.","line":34,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":99,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4742,4745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4742,4745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6403,6406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6403,6406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":144,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":144,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":82}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from '../types';\r\nimport { ScrapingJobService, FoodTruckService } from '../supabase';\r\nimport { DuplicatePreventionService } from '../data-quality/duplicatePrevention';\r\nimport { PostgrestError } from '@supabase/supabase-js';\r\n\r\n// Helper function to validate input and prepare basic data\r\nexport async function validateInputAndPrepare(\r\n  jobId: string,\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string\r\n): Promise<{ isValid: boolean; name: string }> {\r\n  // Basic input validation\r\n  if (!validateTruckData(jobId, extractedTruckData)) {\r\n    await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n      errors: ['Invalid extracted data received from AI processing step.'],\r\n    });\r\n    return { isValid: false, name: '' };\r\n  }\r\n\r\n  if (!sourceUrl) {\r\n    // Log a warning but proceed if sourceUrl is missing, as it might not be critical for all data.\r\n    console.warn(`Job ${jobId}: Missing sourceUrl for food truck data, proceeding without it.`);\r\n  }\r\n\r\n  const name = extractedTruckData.name ?? 'Unknown Food Truck'; // Ensure name has a fallback\r\n  console.info(\r\n    `Job ${jobId}: Preparing to create/update food truck: ${name} from ${sourceUrl ?? 'Unknown Source'}`,\r\n  );\r\n\r\n  return { isValid: true, name };\r\n}\r\n\r\n// Helper function to build truck data schema\r\nexport function buildTruckDataSchema(\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n  name: string\r\n): FoodTruckSchema {\r\n  const currentLocation = buildLocationData(extractedTruckData);\r\n\r\n  return {\r\n    name: name,\r\n    description: extractedTruckData.description ?? undefined, // Keep as undefined if null/missing\r\n    current_location: currentLocation,\r\n    scheduled_locations: Array.isArray(extractedTruckData.scheduled_locations)\r\n      ? extractedTruckData.scheduled_locations.map((loc) => ({\r\n          lat: typeof loc.lat === 'number' ? loc.lat : 0,\r\n          lng: typeof loc.lng === 'number' ? loc.lng : 0,\r\n          address: loc.address ?? undefined,\r\n          start_time: loc.start_time ?? undefined,\r\n          end_time: loc.end_time ?? undefined,\r\n          timestamp: new Date().toISOString(),\r\n        }))\r\n      : undefined,\r\n    operating_hours: extractedTruckData.operating_hours == undefined\r\n      ? {\r\n          monday: { closed: true },\r\n          tuesday: { closed: true },\r\n          wednesday: { closed: true },\r\n          thursday: { closed: true },\r\n          friday: { closed: true },\r\n          saturday: { closed: true },\r\n          sunday: { closed: true },\r\n        }\r\n      : {\r\n          monday: extractedTruckData.operating_hours.monday ?? { closed: true },\r\n          tuesday: extractedTruckData.operating_hours.tuesday ?? { closed: true },\r\n          wednesday: extractedTruckData.operating_hours.wednesday ?? { closed: true },\r\n          thursday: extractedTruckData.operating_hours.thursday ?? { closed: true },\r\n          friday: extractedTruckData.operating_hours.friday ?? { closed: true },\r\n          saturday: extractedTruckData.operating_hours.saturday ?? { closed: true },\r\n          sunday: extractedTruckData.operating_hours.sunday ?? { closed: true },\r\n        },\r\n    menu: processMenuData(extractedTruckData),\r\n    contact_info: {\r\n      phone: extractedTruckData.contact_info?.phone ?? undefined,\r\n      email: extractedTruckData.contact_info?.email ?? undefined,\r\n      website: extractedTruckData.contact_info?.website ?? undefined,\r\n    },\r\n    social_media: {\r\n      instagram: extractedTruckData.social_media?.instagram ?? undefined,\r\n      facebook: extractedTruckData.social_media?.facebook ?? undefined,\r\n      twitter: extractedTruckData.social_media?.twitter ?? undefined,\r\n      tiktok: extractedTruckData.social_media?.tiktok ?? undefined,\r\n      yelp: extractedTruckData.social_media?.yelp ?? undefined,\r\n    },\r\n    cuisine_type: Array.isArray(extractedTruckData.cuisine_type)\r\n      ? extractedTruckData.cuisine_type\r\n      : [],\r\n    price_range: extractedTruckData.price_range ?? undefined, // Ensure it's one of the allowed enum values or undefined\r\n    specialties: Array.isArray(extractedTruckData.specialties)\r\n      ? extractedTruckData.specialties\r\n      : [],\r\n    data_quality_score: 0.5, // Default score - confidence_score not available in type\r\n    verification_status: 'pending',\r\n    source_urls: sourceUrl != undefined && sourceUrl !== '' ? [sourceUrl] : [], // Ensure source_urls is always an array\r\n    last_scraped_at: new Date().toISOString(),\r\n  };\r\n}\r\n\r\n// Helper function to handle duplicate checking and resolution\r\nexport async function handleDuplicateCheck(\r\n  jobId: string,\r\n  truckData: FoodTruckSchema,\r\n  name: string\r\n): Promise<any> {\r\n  // Check for duplicates before creating\r\n  console.info(`Job ${jobId}: Checking for duplicates before creating truck: ${name}`);\r\n  const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\r\n\r\n  let truck;\r\n  if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\r\n    const { bestMatch } = duplicateCheck;\r\n    console.info(`Job ${jobId}: Found potential duplicate (${Math.round(bestMatch.similarity * 100)}% similarity) with truck: ${bestMatch.existingTruck.name}`);\r\n\r\n    if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\r\n      // Merge with existing truck\r\n      truck = await DuplicatePreventionService.mergeDuplicates(bestMatch.existingTruck.id, bestMatch.existingTruck.id);\r\n      console.info(`Job ${jobId}: Merged data with existing truck: ${truck.name} (ID: ${truck.id})`);\r\n    } else if (bestMatch.recommendation === 'update') {\r\n      // Update existing truck with new data\r\n      truck = await FoodTruckService.updateTruck(bestMatch.existingTruck.id, truckData);\r\n      console.info(`Job ${jobId}: Updated existing truck: ${truck.name} (ID: ${truck.id})`);\r\n    } else {\r\n      // Create new truck but log the potential duplicate\r\n      truck = await FoodTruckService.createTruck(truckData);\r\n      console.warn(`Job ${jobId}: Created new truck despite potential duplicate (${duplicateCheck.reason})`);\r\n    }\r\n  } else {\r\n    // No duplicates found, create new truck\r\n    truck = await FoodTruckService.createTruck(truckData);\r\n  }\r\n\r\n  return truck;\r\n}\r\n\r\n// Helper function to finalize job status\r\nexport async function finalizeJobStatus(\r\n  jobId: string,\r\n  truck: any,\r\n  sourceUrl: string\r\n): Promise<void> {\r\n  console.info(\r\n    `Job ${jobId}: Successfully created food truck: ${truck.name} (ID: ${truck.id}) from ${sourceUrl ?? 'Unknown Source'}`,\r\n  );\r\n\r\n  // Link truck_id back to the scraping job\r\n  await ScrapingJobService.updateJobStatus(jobId, 'completed', {\r\n    completed_at: new Date().toISOString(),\r\n  });\r\n}\r\n\r\n// Helper function to validate input data\r\nfunction validateTruckData(jobId: string, extractedTruckData: ExtractedFoodTruckDetails): boolean {\r\n  if (extractedTruckData == undefined || typeof extractedTruckData !== 'object') {\r\n    console.error(`Job ${jobId}: Invalid extractedTruckData, cannot create/update food truck.`);\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n// Helper function to build location data\r\nfunction buildLocationData(extractedTruckData: ExtractedFoodTruckDetails) {\r\n  const locationData = extractedTruckData.current_location ?? {};\r\n  const fullAddress = [\r\n    locationData.address,\r\n    locationData.city,\r\n    locationData.state,\r\n    locationData.zip_code,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(', ');\r\n\r\n  return {\r\n    lat: typeof locationData.lat === 'number' ? locationData.lat : 0,\r\n    lng: typeof locationData.lng === 'number' ? locationData.lng : 0,\r\n    address: fullAddress || (locationData.raw_text ?? undefined),\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n}\r\n\r\n// Helper function to process menu data\r\nfunction processMenuData(extractedTruckData: ExtractedFoodTruckDetails): MenuCategory[] {\r\n  if (!Array.isArray(extractedTruckData.menu)) {\r\n    return [];\r\n  }\r\n\r\n  return extractedTruckData.menu.map((category: unknown): MenuCategory => {\r\n    const categoryData = category as { items?: unknown[]; category?: string; name?: string };\r\n    const items = (Array.isArray(categoryData.items) ? categoryData.items : []).map(\r\n      (item: unknown): MenuItem => {\r\n        const itemData = item as {\r\n          name?: string;\r\n          description?: string;\r\n          price?: string | number;\r\n          dietary_tags?: string[];\r\n        };\r\n        let price: number | undefined = undefined;\r\n        if (typeof itemData.price === 'number') {\r\n          price = itemData.price;\r\n        } else if (typeof itemData.price === 'string') {\r\n          const parsedPrice = Number.parseFloat(itemData.price.replaceAll(/[^\\d.-]/g, ''));\r\n          if (!Number.isNaN(parsedPrice)) {\r\n            price = parsedPrice;\r\n          }\r\n        }\r\n        return {\r\n          name: itemData.name ?? 'Unknown Item',\r\n          description: itemData.description ?? undefined,\r\n          price: price,\r\n          dietary_tags: Array.isArray(itemData.dietary_tags) ? itemData.dietary_tags : [],\r\n        };\r\n      },\r\n    );\r\n    return {\r\n      name: categoryData.category ?? categoryData.name ?? 'Uncategorized',\r\n      items: items,\r\n    };\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\scrapingProcessor.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[564,592],"text":"((scrapeResult.data?.markdown) == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[565,592],"text":"((scrapeResult.data?.markdown) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[564,592],"text":"(!Boolean((scrapeResult.data?.markdown)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":56,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":56,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":76,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":76,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2899,2914],"text":"job.target_url == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2900,2914],"text":"(job.target_url ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2899,2914],"text":"!Boolean(job.target_url)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":108,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":108,"endColumn":80}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { ScrapingJobService } from '@/lib/supabase';\r\nimport { ExtractedFoodTruckDetails } from '../types';\r\nimport {\r\n  validateInputAndPrepare,\r\n  buildTruckDataSchema,\r\n  handleDuplicateCheck,\r\n  finalizeJobStatus,\r\n} from './pipelineHelpers';\r\n\r\nasync function handleScraping(targetUrl: string, jobId: string) {\r\n  console.info(`Starting scrape for ${targetUrl}`);\r\n  const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(targetUrl);\r\n\r\n  if (!scrapeResult.success || !scrapeResult.data?.markdown) {\r\n    const error = scrapeResult.error ?? 'Scraping failed or markdown content not found';\r\n    await handleJobFailure(jobId, error);\r\n    throw new Error(error);\r\n  }\r\n\r\n  console.info(`Scraping successful for ${targetUrl}, proceeding to Gemini extraction.`);\r\n  return scrapeResult.data;\r\n}\r\n\r\nasync function handleGeminiExtraction(markdown: string, sourceUrl: string, jobId: string) {\r\n  const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(markdown, sourceUrl);\r\n\r\n  if (!geminiResult.success || !geminiResult.data) {\r\n    const error = geminiResult.error ?? 'Gemini data extraction failed';\r\n    await handleJobFailure(jobId, error);\r\n    throw new Error(error);\r\n  }\r\n\r\n  console.info(`Gemini extraction successful for ${sourceUrl}.`);\r\n  return geminiResult.data;\r\n}\r\n\r\nasync function handleJobFailure(jobId: string, error: string) {\r\n  console.error(`Job ${jobId} failed:`, error);\r\n  try {\r\n    const currentJob = await ScrapingJobService.getJobsByStatus('all').then(jobs =>\r\n      jobs.find(j => j.id === jobId)\r\n    );\r\n    if (currentJob && currentJob.status !== 'failed') {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', { errors: [error] });\r\n    }\r\n  } catch (statusUpdateError) {\r\n    console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\r\n  }\r\n}\r\n\r\nasync function handleRetryLogic(jobId: string) {\r\n  try {\r\n    const job = await ScrapingJobService.incrementRetryCount(jobId);\r\n    if (job && typeof job.retry_count === 'number' && typeof job.max_retries === 'number') {\r\n      if (job.retry_count < job.max_retries) {\r\n        console.info(`Retrying job ${jobId} (attempt ${job.retry_count}/${job.max_retries})`);\r\n        setTimeout(() => {\r\n          void processScrapingJob(jobId);\r\n        }, 5000);\r\n      } else {\r\n        console.warn(`Job ${jobId} reached max retries (${job.max_retries}).`);\r\n      }\r\n    } else {\r\n      console.error(`Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`);\r\n    }\r\n  } catch (retryError) {\r\n    console.error(`Error during retry logic for job ${jobId}:`, retryError);\r\n  }\r\n}\r\n\r\nexport async function processScrapingJob(jobId: string): Promise<void> {\r\n  try {\r\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\r\n    if (!job.target_url) {\r\n      throw new Error('No target URL specified');\r\n    }\r\n\r\n    const scrapeData = await handleScraping(job.target_url, jobId);\r\n    const extractedData = await handleGeminiExtraction(scrapeData.markdown, scrapeData.source_url ?? job.target_url, jobId);\r\n\r\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\r\n      data_collected: extractedData as unknown as Record<string, unknown>,\r\n      completed_at: new Date().toISOString(),\r\n    });\r\n\r\n    await createOrUpdateFoodTruck(jobId, extractedData, scrapeData.source_url ?? job.target_url);\r\n\r\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\r\n  } catch {\r\n    await handleRetryLogic(jobId);\r\n  }\r\n}\r\n\r\nexport async function createOrUpdateFoodTruck(\r\n  jobId: string,\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n) {\r\n  try {\r\n    const validation = await validateInputAndPrepare(jobId, extractedTruckData, sourceUrl);\r\n    if (!validation.isValid) {\r\n      return;\r\n    }\r\n\r\n    const truckData = buildTruckDataSchema(extractedTruckData, sourceUrl, validation.name);\r\n    const truck = await handleDuplicateCheck(jobId, truckData, validation.name);\r\n    await finalizeJobStatus(jobId, truck, sourceUrl);\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n    console.error(`Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`, error);\r\n    await handleJobFailure(jobId, `Food truck data processing/saving failed: ${errorMessage}`);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\auditLogger.ts","messages":[{"ruleId":"max-params","severity":2,"message":"Static async method 'logAdminAction' has too many parameters (7). Maximum allowed is 4.","line":42,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":42,"endColumn":30},{"ruleId":"max-params","severity":2,"message":"Static async method 'logAuthEvent' has too many parameters (5). Maximum allowed is 4.","line":117,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":117,"endColumn":28},{"ruleId":"max-params","severity":2,"message":"Static async method 'logDataAccess' has too many parameters (6). Maximum allowed is 4.","line":143,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":143,"endColumn":29}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":234,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":234,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":274,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":274,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Security Audit Logging System\r\n * Implements comprehensive audit logging for admin actions and security events\r\n */\r\n\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\n\r\n// Type alias for severity levels to comply with sonarjs/use-type-alias\r\ntype SeverityLevel = 'info' | 'warning' | 'error' | 'critical';\r\n\r\nexport interface AuditLogEntry {\r\n  user_id: string;\r\n  user_email: string;\r\n  action: string;\r\n  resource_type: string;\r\n  resource_id?: string;\r\n  details?: Record<string, unknown>;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  session_id?: string;\r\n  timestamp: string;\r\n  severity: SeverityLevel;\r\n}\r\n\r\nexport interface SecurityEvent {\r\n  event_type: 'login_attempt' | 'login_success' | 'login_failure' | 'logout' | 'permission_denied' | 'data_access' | 'data_modification' | 'admin_action';\r\n  user_id?: string;\r\n  user_email?: string;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  details?: Record<string, unknown>;\r\n  severity: SeverityLevel;\r\n}\r\n\r\n/**\r\n * Audit Logger Service\r\n */\r\nexport class AuditLogger {\r\n  /**\r\n   * Log admin action with full audit trail\r\n   */\r\n  static async logAdminAction(\r\n    userId: string,\r\n    userEmail: string,\r\n    action: string,\r\n    resourceType: string,\r\n    resourceId?: string,\r\n    details?: Record<string, unknown>,\r\n    request?: {\r\n      ip?: string;\r\n      userAgent?: string;\r\n      sessionId?: string;\r\n    }\r\n  ): Promise<void> {\r\n    const auditEntry: AuditLogEntry = {\r\n      user_id: userId,\r\n      user_email: userEmail,\r\n      action,\r\n      resource_type: resourceType,\r\n      resource_id: resourceId,\r\n      details,\r\n      ip_address: request?.ip,\r\n      user_agent: request?.userAgent,\r\n      session_id: request?.sessionId,\r\n      timestamp: new Date().toISOString(),\r\n      severity: this.determineSeverity(action, resourceType)\r\n    };\r\n\r\n    await this.writeAuditLog(auditEntry);\r\n    \r\n    // Log to console for immediate monitoring\r\n    console.info('Admin Action Audit:', {\r\n      user: userEmail,\r\n      action,\r\n      resource: (resourceId === undefined) ? resourceType : `${resourceType}:${resourceId}`,\r\n      timestamp: auditEntry.timestamp\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log security event\r\n   */\r\n  static async logSecurityEvent(event: SecurityEvent): Promise<void> {\r\n    const logEntry = {\r\n      event_type: event.event_type,\r\n      user_id: event.user_id,\r\n      user_email: event.user_email,\r\n      ip_address: event.ip_address,\r\n      user_agent: event.user_agent,\r\n      details: event.details,\r\n      severity: event.severity,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    try {\r\n      if (supabaseAdmin) {\r\n        await supabaseAdmin\r\n          .from('security_events')\r\n          .insert(logEntry);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to log security event:', error);\r\n    }\r\n\r\n    // Always log security events to console\r\n    console.info('Security Event:', logEntry);\r\n\r\n    // Alert on critical security events\r\n    if (event.severity === 'critical' || event.severity === 'error') {\r\n      console.warn('SECURITY ALERT:', logEntry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log authentication events\r\n   */\r\n  static async logAuthEvent(\r\n    eventType: 'login_attempt' | 'login_success' | 'login_failure' | 'logout',\r\n    userEmail?: string,\r\n    userId?: string,\r\n    request?: {\r\n      ip?: string;\r\n      userAgent?: string;\r\n    },\r\n    details?: Record<string, unknown>\r\n  ): Promise<void> {\r\n    const severity = eventType === 'login_failure' ? 'warning' : 'info';\r\n    \r\n    await this.logSecurityEvent({\r\n      event_type: eventType,\r\n      user_id: userId,\r\n      user_email: userEmail,\r\n      ip_address: request?.ip,\r\n      user_agent: request?.userAgent,\r\n      details,\r\n      severity\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log data access events\r\n   */\r\n  static async logDataAccess(\r\n    userId: string,\r\n    userEmail: string,\r\n    resourceType: string,\r\n    resourceId?: string,\r\n    action: 'read' | 'search' | 'export' | 'admin_access' = 'read',\r\n    request?: {\r\n      ip?: string;\r\n      userAgent?: string;\r\n    }\r\n  ): Promise<void> {\r\n    await this.logSecurityEvent({\r\n      event_type: 'data_access',\r\n      user_id: userId,\r\n      user_email: userEmail,\r\n      ip_address: request?.ip,\r\n      user_agent: request?.userAgent,\r\n      details: {\r\n        resource_type: resourceType,\r\n        resource_id: resourceId,\r\n        action\r\n      },\r\n      severity: 'info'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Write audit log to database\r\n   */\r\n  private static async writeAuditLog(entry: AuditLogEntry): Promise<void> {\r\n    try {\r\n      if (supabaseAdmin) {\r\n        await supabaseAdmin\r\n          .from('audit_logs')\r\n          .insert(entry);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to write audit log:', error);\r\n      // Don't throw - audit logging should not break application flow\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine severity based on action and resource type\r\n   */\r\n  private static determineSeverity(action: string, resourceType: string): SeverityLevel {\r\n    // Critical actions\r\n    if (action.includes('delete') || action.includes('remove')) {\r\n      return 'critical';\r\n    }\r\n    \r\n    // Warning actions\r\n    if (action.includes('update') || action.includes('modify') || action.includes('change')) {\r\n      return 'warning';\r\n    }\r\n    \r\n    // Admin-specific actions\r\n    if (resourceType === 'user' || resourceType === 'admin' || resourceType === 'system') {\r\n      return 'warning';\r\n    }\r\n    \r\n    // Default to info\r\n    return 'info';\r\n  }\r\n\r\n  /**\r\n   * Get audit logs for a specific user\r\n   */\r\n  static async getUserAuditLogs(\r\n    userId: string,\r\n    limit: number = 100,\r\n    offset: number = 0\r\n  ): Promise<AuditLogEntry[]> {\r\n    try {\r\n      if (!supabaseAdmin) {\r\n        return [];\r\n      }\r\n\r\n      const { data, error } = await supabaseAdmin\r\n        .from('audit_logs')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .order('timestamp', { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      if (error) {\r\n        console.error('Failed to fetch user audit logs:', error);\r\n        return [];\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n      return data ?? [];\r\n    } catch (error) {\r\n      console.error('Error fetching user audit logs:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get recent security events\r\n   */\r\n  static async getRecentSecurityEvents(\r\n    hours: number = 24,\r\n    severity?: SeverityLevel\r\n  ): Promise<Record<string, unknown>[]> {\r\n    try {\r\n      if (!supabaseAdmin) {\r\n        return [];\r\n      }\r\n\r\n      const startTime = new Date();\r\n      startTime.setHours(startTime.getHours() - hours);\r\n\r\n      let query = supabaseAdmin\r\n        .from('security_events')\r\n        .select('*')\r\n        .gte('timestamp', startTime.toISOString())\r\n        .order('timestamp', { ascending: false });\r\n\r\n      if (severity) {\r\n        query = query.eq('severity', severity);\r\n      }\r\n\r\n      const { data, error } = await query.limit(500);\r\n\r\n      if (error) {\r\n        console.error('Failed to fetch security events:', error);\r\n        return [];\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n      return data ?? [];\r\n    } catch (error) {\r\n      console.error('Error fetching security events:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Security monitoring utilities\r\n */\r\nexport const SecurityMonitor = {\r\n  /**\r\n   * Check for suspicious activity patterns\r\n   */\r\n  async checkSuspiciousActivity(userId: string): Promise<{\r\n    suspicious: boolean;\r\n    reasons: string[];\r\n    riskLevel: 'low' | 'medium' | 'high';\r\n  }> {\r\n    const reasons: string[] = [];\r\n    let riskLevel: 'low' | 'medium' | 'high' = 'low';\r\n\r\n    try {\r\n      // Check recent failed login attempts\r\n      const recentEvents = await AuditLogger.getRecentSecurityEvents(1, 'warning');\r\n      const failedLogins = recentEvents.filter(\r\n         \r\n        event => event.event_type === 'login_failure' && event.user_id === userId\r\n      );\r\n\r\n      if (failedLogins.length > 5) {\r\n        reasons.push('Multiple failed login attempts');\r\n        riskLevel = 'high';\r\n      } else if (failedLogins.length > 2) {\r\n        reasons.push('Recent failed login attempts');\r\n        riskLevel = 'medium';\r\n      }\r\n\r\n      // Check for unusual access patterns\r\n      const auditLogs = await AuditLogger.getUserAuditLogs(userId, 50);\r\n      const recentActions = auditLogs.filter(\r\n        log => new Date(log.timestamp) > new Date(Date.now() - 60 * 60 * 1000) // Last hour\r\n      );\r\n\r\n      if (recentActions.length > 20) {\r\n        reasons.push('High activity volume');\r\n        riskLevel = riskLevel === 'high' ? 'high' : 'medium';\r\n      }\r\n\r\n      return {\r\n        suspicious: reasons.length > 0,\r\n        reasons,\r\n        riskLevel\r\n      };\r\n    } catch (error) {\r\n      console.error('Error checking suspicious activity:', error);\r\n      return {\r\n        suspicious: false,\r\n        reasons: [],\r\n        riskLevel: 'low'\r\n      };\r\n    }\r\n  },\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\rateLimiter.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":276,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":276,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8196,8213],"text":"result.retryAfter != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8196,8213],"text":"result.retryAfter ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8196,8213],"text":"Boolean(result.retryAfter)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Rate Limiting Implementation\r\n * Prevents brute force attacks and API abuse with intelligent rate limiting\r\n */\r\n\r\nimport { NextResponse } from 'next/server'; // Added import for NextResponse\r\n\r\ninterface RateLimitEntry {\r\n  count: number;\r\n  resetTime: number;\r\n  blocked: boolean;\r\n  blockUntil?: number;\r\n}\r\n\r\n// In-memory rate limit store (in production, use Redis)\r\nconst rateLimitStore = new Map<string, RateLimitEntry>();\r\n\r\n// Rate limit configurations for different endpoints\r\nexport const RATE_LIMIT_CONFIGS = {\r\n  // Authentication endpoints - strict limits\r\n  auth: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    maxRequests: 5, // 5 attempts per 15 minutes\r\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\r\n    skipSuccessfulRequests: true\r\n  },\r\n  // API endpoints - moderate limits\r\n  api: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 60, // 60 requests per minute\r\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\r\n    skipSuccessfulRequests: false\r\n  },\r\n  // Admin endpoints - very strict limits\r\n  admin: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 20, // 20 requests per minute\r\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\r\n    skipSuccessfulRequests: false\r\n  }\r\n} as const;\r\n\r\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\r\n\r\n/**\r\n * Rate Limiter Service\r\n */\r\nexport class RateLimiter {\r\n  // Extract logic from checkRateLimit to reduce function size\r\n  private static isBlocked(entry: RateLimitEntry | undefined, now: number): boolean {\r\n    return Boolean(entry && entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil);\r\n  }\r\n\r\n  private static resetEntry(entry: RateLimitEntry, now: number, config: typeof RATE_LIMIT_CONFIGS[RateLimitType]): void {\r\n    entry.count = 0;\r\n    entry.resetTime = now + config.windowMs;\r\n    entry.blocked = false;\r\n    entry.blockUntil = undefined;\r\n  }\r\n\r\n  /**\r\n   * Check if request should be rate limited\r\n   */\r\n  static checkRateLimit(\r\n    identifier: string,\r\n    type: RateLimitType = 'api'\r\n  ): {\r\n    allowed: boolean;\r\n    remaining: number;\r\n    resetTime: number;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    this.cleanupExpiredEntries();\r\n    let entry = rateLimitStore.get(key);\r\n    if (!entry) {\r\n      entry = { count: 0, resetTime: now + config.windowMs, blocked: false };\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n    if (this.isBlocked(entry, now)) {\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil((entry.blockUntil! - now) / 1000)\r\n      };\r\n    }\r\n    if (now >= entry.resetTime) {\r\n      this.resetEntry(entry, now, config);\r\n    }\r\n    if (entry.count >= config.maxRequests) {\r\n      entry.blocked = true;\r\n      entry.blockUntil = now + config.blockDurationMs;\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil(config.blockDurationMs / 1000)\r\n      };\r\n    }\r\n    entry.count++;\r\n    rateLimitStore.set(key, entry);\r\n    return {\r\n      allowed: true,\r\n      remaining: config.maxRequests - entry.count,\r\n      resetTime: entry.resetTime\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Record successful request (for auth endpoints)\r\n   */\r\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    if (!config.skipSuccessfulRequests) return;\r\n    \r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n    \r\n    if (entry) {\r\n      // Reset counter on successful auth\r\n      entry.count = 0;\r\n      entry.blocked = false;\r\n      entry.blockUntil = undefined;\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get rate limit status without incrementing\r\n   */\r\n  static getStatus(\r\n    identifier: string,\r\n    type: RateLimitType = 'api'\r\n  ): {\r\n    remaining: number;\r\n    resetTime: number;\r\n    blocked: boolean;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n    \r\n    if (!entry) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false\r\n      };\r\n    }\r\n    \r\n    // Check if blocked\r\n    if (entry.blocked && (entry.blockUntil != undefined) && now < entry.blockUntil) { // Changed != undefined to != null\r\n      return {\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        blocked: true,\r\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000)\r\n      };\r\n    }\r\n    \r\n    // Check if window expired\r\n    if (now >= entry.resetTime) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false\r\n      };\r\n    }\r\n    \r\n    return {\r\n      remaining: Math.max(0, config.maxRequests - entry.count),\r\n      resetTime: entry.resetTime,\r\n      blocked: false\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Clean up expired entries to prevent memory leaks\r\n   */\r\n  private static cleanupExpiredEntries(): void {\r\n    const now = Date.now();\r\n    \r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      // Remove entries that are expired and not blocked\r\n      if (now >= entry.resetTime && (!entry.blocked || (entry.blockUntil == undefined) || now >= entry.blockUntil)) { // Changed == undefined to == null\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Clear all rate limit data for an identifier\r\n   */\r\n  static clearLimits(identifier: string, type?: RateLimitType): void {\r\n    if (type) {\r\n      const key = `${type}:${identifier}`;\r\n      rateLimitStore.delete(key);\r\n    } else {\r\n      // Clear all types for this identifier\r\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS) as RateLimitType[]) { // Added type assertion\r\n        const key = `${limitType}:${identifier}`;\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get rate limit statistics\r\n   */\r\n  static getStats(): {\r\n    totalEntries: number;\r\n    blockedEntries: number;\r\n    entriesByType: Record<string, number>;\r\n  } {\r\n    const stats = {\r\n      totalEntries: rateLimitStore.size,\r\n      blockedEntries: 0,\r\n      entriesByType: {} as Record<string, number>\r\n    };\r\n    \r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      const type = key.split(':')[0];\r\n      stats.entriesByType[type] = (stats.entriesByType[type] ?? 0) + 1;\r\n      \r\n      if (entry.blocked) {\r\n        stats.blockedEntries++;\r\n      }\r\n    }\r\n    \r\n    return stats;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility function to get client identifier from request\r\n */\r\nexport function getClientIdentifier(request: Request): string {\r\n  // Try to get IP address from various headers\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIp = request.headers.get('x-real-ip');\r\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\r\n  \r\n  // Use the first available IP\r\n  const ip = (forwarded?.split(',')[0]?.trim() ?? realIp ?? cfConnectingIp) ?? 'unknown';\r\n  \r\n  // Include user agent for more specific identification\r\n  const userAgent = request.headers.get('user-agent') ?? 'unknown';\r\n  \r\n  // Create a hash of IP + User Agent for better identification\r\n  return `${ip}:${userAgent.slice(0, 50)}`;\r\n}\r\n\r\n/**\r\n * Rate limiting middleware for API routes\r\n */\r\nexport function withRateLimit(\r\n  handler: (request: Request) => Promise<Response>,\r\n  type: RateLimitType = 'api'\r\n) {\r\n  return async (request: Request): Promise<Response> => {\r\n    const identifier = getClientIdentifier(request);\r\n    const result = RateLimiter.checkRateLimit(identifier, type);\r\n    \r\n    if (result.allowed === false) {\r\n      const headers = new Headers({\r\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\r\n        'X-RateLimit-Remaining': '0',\r\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\r\n      });\r\n      \r\n      if (result.retryAfter) {\r\n        headers.set('Retry-After', result.retryAfter.toString());\r\n      }\r\n      \r\n      return new NextResponse('Too Many Requests', { status: 429, headers });\r\n    }\r\n    \r\n    const response = await handler(request);\r\n    \r\n    // Update headers on successful requests if not skipped\r\n    if (RATE_LIMIT_CONFIGS[type].skipSuccessfulRequests === false) {\r\n      const status = RateLimiter.getStatus(identifier, type);\r\n      response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\r\n      response.headers.set('X-RateLimit-Remaining', status.remaining.toString());\r\n      response.headers.set('X-RateLimit-Reset', new Date(status.resetTime).toISOString());\r\n    }\r\n    \r\n    return response;\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":112,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":112,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":623,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":623,"endColumn":29},{"ruleId":"sonarjs/no-identical-expressions","severity":2,"message":"Correct one of the identical sub-expressions on both sides of operator \"&&\"","line":634,"column":9,"nodeType":"LogicalExpression","messageId":"correctIdenticalSubExpressions","endLine":634,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":642,"column":19,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":642,"endColumn":24},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":649,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":649,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[21584,21589],"text":"(Boolean(truck))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `FoodTruck`.","line":651,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":651,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":653,"column":13,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":653,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":661,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":661,"endColumn":17}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  createClient,\r\n  type PostgrestSingleResponse,\r\n  type PostgrestResponse,\r\n} from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (supabaseUrl == undefined || supabaseUrl === '') {\r\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\r\n}\r\n\r\nif (supabaseAnonKey == undefined || supabaseAnonKey === '') {\r\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Only create admin client on server side where service key is available\r\nexport const supabaseAdmin = (supabaseServiceKey != undefined && supabaseServiceKey !== '')\r\n  ? createClient(supabaseUrl, supabaseServiceKey)\r\n  : undefined;\r\n\r\n// Database types\r\nimport {\r\n  MenuCategory,\r\n  MenuItem,\r\n  OperatingHours,\r\n  PriceRange,\r\n  ExtractedFoodTruckDetails,\r\n} from './types';\r\n\r\nexport interface FoodTruckLocation {\r\n  lat?: number;\r\n  lng?: number;\r\n  address?: string;\r\n  timestamp: string;\r\n}\r\n\r\n// Re-exporting from types.ts to ensure consistency\r\n\r\nexport interface FoodTruck {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  current_location: FoodTruckLocation;\r\n  scheduled_locations?: ExtractedFoodTruckDetails['scheduled_locations']; // Use type from types.ts\r\n  operating_hours?: OperatingHours; // Use type from types.ts\r\n  menu?: MenuCategory[]; // Use type from types.ts\r\n  contact_info?: ExtractedFoodTruckDetails['contact_info']; // Use type from types.ts\r\n  social_media?: ExtractedFoodTruckDetails['social_media']; // Use type from types.ts\r\n  cuisine_type?: string[];\r\n  price_range?: PriceRange; // Use type from types.ts\r\n  specialties?: string[];\r\n  data_quality_score?: number;\r\n  verification_status: 'pending' | 'verified' | 'flagged' | 'rejected';\r\n  source_urls?: string[];\r\n  created_at: string;\r\n  updated_at: string;\r\n  last_scraped_at?: string;\r\n  exact_location?: FoodTruckLocation;\r\n  city_location?: FoodTruckLocation;\r\n  average_rating?: number; // Added for ratings\r\n  review_count?: number; // Added for ratings\r\n}\r\n\r\nexport interface ScrapingJob {\r\n  id: string;\r\n  job_type: string;\r\n  target_url?: string;\r\n  target_handle?: string;\r\n  platform?: string;\r\n  status: 'pending' | 'running' | 'completed' | 'failed';\r\n  priority: number;\r\n  scheduled_at: string;\r\n  started_at?: string;\r\n  completed_at?: string;\r\n  data_collected?: Record<string, unknown>;\r\n  errors?: string[];\r\n  retry_count: number;\r\n  max_retries: number;\r\n  created_at: string;\r\n}\r\n\r\nexport interface DataProcessingQueue {\r\n  id: string;\r\n  truck_id?: string;\r\n  processing_type: string;\r\n  raw_data: Record<string, unknown>;\r\n  processed_data?: Record<string, unknown>;\r\n  gemini_tokens_used: number;\r\n  status: 'pending' | 'processing' | 'completed' | 'failed';\r\n  priority: number;\r\n  created_at: string;\r\n  processed_at?: string;\r\n}\r\n\r\nexport interface ApiUsage {\r\n  id: string;\r\n  service_name: string;\r\n  usage_date: string;\r\n  requests_count: number;\r\n  tokens_used: number;\r\n}\r\n\r\n// Food truck operations\r\nfunction buildMenuByTruck(menuItems: RawMenuItemFromDB[]): Record<string, RawMenuItemFromDB[]> {\r\n  const menuByTruck: Record<string, RawMenuItemFromDB[]> = {};\r\n  for (const item of menuItems) {\r\n    if (!menuByTruck[item.food_truck_id as string]) {\r\n      menuByTruck[item.food_truck_id as string] = [];\r\n    }\r\n    menuByTruck[item.food_truck_id as string].push(item);\r\n  }\r\n  return menuByTruck;\r\n}\r\n\r\nfunction handleSupabaseError(error: unknown, context: string) {\r\n  console.warn(`Error in ${context}:`, error);\r\n}\r\n\r\nexport const FoodTruckService = {\r\n  async getAllTrucks(limit = 50, offset = 0): Promise<{ trucks: FoodTruck[]; total: number }> {\r\n    try {\r\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\r\n        .from('food_trucks')\r\n        .select('*', { count: 'exact' })\r\n        .order('updated_at', { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n      if (error) throw error;\r\n      const trucks: FoodTruck[] = (data ?? []).map((t: FoodTruck) => normalizeTruckLocation(t));\r\n      if (trucks.length === 0) return { trucks: [], total: count ?? 0 };\r\n      const truckIds = trucks.map((t) => t.id);\r\n      let menuItems: RawMenuItemFromDB[] = [];\r\n      try {\r\n        if (truckIds.length > 0) {\r\n          const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> =\r\n            await supabase.from('menu_items').select('*').in('food_truck_id', truckIds);\r\n          if (menuError) throw menuError;\r\n          menuItems = Array.isArray(items) ? items : [];\r\n        }\r\n      } catch (menuError) {\r\n        handleSupabaseError(menuError, 'getAllTrucks:menu_items');\r\n      }\r\n      const menuByTruck = buildMenuByTruck(menuItems);\r\n      for (const truck of trucks) {\r\n        truck.menu = groupMenuItems(menuByTruck[truck.id] ?? []);\r\n      }\r\n      return { trucks, total: count ?? 0 };\r\n    } catch (error) {\r\n      handleSupabaseError(error, 'getAllTrucks');\r\n      return { trucks: [], total: 0 };\r\n    }\r\n  },\r\n  async getTruckById(id: string): Promise<FoodTruck> {\r\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase\r\n      .from('food_trucks')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n    if (error) throw error;\r\n    const truck: FoodTruck = normalizeTruckLocation(data);\r\n    const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> = await supabase\r\n      .from('menu_items')\r\n      .select('*')\r\n      .eq('food_truck_id', id);\r\n    if (menuError) throw menuError;\r\n    truck.menu = groupMenuItems(Array.isArray(items) ? items : []);\r\n    return truck;\r\n  },\r\n\r\n  async getTrucksByLocation(lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> {\r\n    try {\r\n      const { trucks } = await FoodTruckService.getAllTrucks();\r\n      const nearbyTrucks = trucks.filter((truck) => {\r\n        if (\r\n          truck.current_location == undefined ||\r\n          typeof truck.current_location.lat !== 'number' ||\r\n          typeof truck.current_location.lng !== 'number'\r\n        ) {\r\n          return false;\r\n        }\r\n        const distance = calculateDistance(\r\n          lat,\r\n          lng,\r\n          truck.current_location.lat,\r\n          truck.current_location.lng,\r\n        );\r\n        return distance <= radiusKm;\r\n      });\r\n      return nearbyTrucks;\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching trucks by location:', error);\r\n      return [];\r\n    }\r\n  },\r\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n    const menuData = truckData.menu;\r\n    const truckDataWithoutMenu = { ...truckData };\r\n    delete truckDataWithoutMenu.menu;\r\n    const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n      .from('food_trucks')\r\n      .insert([truckDataWithoutMenu])\r\n      .select()\r\n      .single();\r\n    if (error) throw error;\r\n    await insertMenuItems(truck.id, menuData);\r\n    return truck;\r\n  },\r\n\r\n  async updateTruck(id: string, updates: Partial<FoodTruck>): Promise<FoodTruck> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n    const menuData = updates.menu;\r\n    const updatesWithoutMenu = { ...updates };\r\n    delete updatesWithoutMenu.menu;\r\n    const truck = await updateTruckData(id, updatesWithoutMenu);\r\n    if (menuData != undefined) {\r\n      await updateTruckMenu(id, menuData);\r\n    }\r\n    return truck;\r\n  },\r\n\r\n  async getDataQualityStats(): Promise<{\r\n    total_trucks: number;\r\n    avg_quality_score: number;\r\n    high_quality_count: number;\r\n    medium_quality_count: number;\r\n    low_quality_count: number;\r\n    verified_count: number;\r\n    pending_count: number;\r\n    flagged_count: number;\r\n  }> {\r\n    try {\r\n      const {\r\n        data,\r\n        error,\r\n      }: PostgrestSingleResponse<{\r\n        total_trucks: number;\r\n        avg_quality_score: number;\r\n        high_quality_count: number;\r\n        medium_quality_count: number;\r\n        low_quality_count: number;\r\n        verified_count: number;\r\n        pending_count: number;\r\n        flagged_count: number;\r\n      }> = await supabase.rpc('get_data_quality_stats').single();\r\n      if (error) throw error;\r\n      return data as {\r\n        total_trucks: number;\r\n        avg_quality_score: number;\r\n        high_quality_count: number;\r\n        medium_quality_count: number;\r\n        low_quality_count: number;\r\n        verified_count: number;\r\n        pending_count: number;\r\n        flagged_count: number;\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching data quality stats:', error);\r\n      return {\r\n        total_trucks: 0,\r\n        avg_quality_score: 0,\r\n        high_quality_count: 0,\r\n        medium_quality_count: 0,\r\n        low_quality_count: 0,\r\n        verified_count: 0,\r\n        pending_count: 0,\r\n        flagged_count: 0,\r\n      };\r\n    }\r\n  },\r\n};\r\n\r\n// Helper functions to reduce cognitive complexity\r\nasync function updateTruckData(\r\n  id: string,\r\n  updatesWithoutMenu: Partial<FoodTruck>,\r\n): Promise<FoodTruck> {\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n  }\r\n\r\n  const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n    .from('food_trucks')\r\n    .update(updatesWithoutMenu)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) throw error;\r\n  return truck;\r\n}\r\n\r\nasync function updateTruckMenu(id: string, menuData: MenuCategory[]): Promise<void> {\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n  }\r\n\r\n  // Delete existing menu items\r\n  const { error: deleteError } = await supabaseAdmin\r\n    .from('menu_items')\r\n    .delete()\r\n    .eq('food_truck_id', id);\r\n\r\n  if (deleteError) {\r\n    console.error('Error deleting existing menu items for truck', id, deleteError);\r\n  }\r\n\r\n  // Insert new menu items if they exist\r\n  if (menuData != undefined && menuData.length > 0) {\r\n    const menuItems = menuData.flatMap((category) =>\r\n      (category.items ?? []).map((item) => ({\r\n        food_truck_id: id,\r\n        category: category.name ?? 'Uncategorized',\r\n        name: item.name ?? 'Unknown Item',\r\n        description: item.description ?? undefined,\r\n        price: typeof item.price === 'number' ? item.price : undefined,\r\n        dietary_tags: item.dietary_tags ?? [],\r\n      })),\r\n    );\r\n\r\n    if (menuItems.length > 0) {\r\n      const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\r\n\r\n      if (menuError) {\r\n        console.error('Error inserting updated menu items for truck', id, menuError);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\r\n  const R = 6371;\r\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n  const dLon = ((lon2 - lon1) * Math.PI) / 180;\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos((lat1 * Math.PI) / 180) *\r\n      Math.cos((lat2 * Math.PI) / 180) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const distance = R * c;\r\n  return distance;\r\n}\r\n\r\n// Define a helper type for items coming from the DB, which might include a category field\r\ninterface RawMenuItemFromDB {\r\n  name: string;\r\n  description?: string;\r\n  price?: number;\r\n  dietary_tags?: string[];\r\n  category?: string; // This field is expected from the DB query\r\n  // Potentially other fields like id, food_truck_id, etc.\r\n  [key: string]: unknown; // Allow other properties from DB select *\r\n}\r\n\r\nfunction groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\r\n  const byCategory: Record<string, MenuItem[]> = {}; // Stores processed MenuItems\r\n  for (const rawItem of rawItems) {\r\n    const categoryName: string = rawItem.category ?? 'Uncategorized';\r\n    byCategory[categoryName] ??= [];\r\n    // Construct a MenuItem conforming to the MenuItem interface (no 'category' property)\r\n    const menuItem: MenuItem = {\r\n      name: rawItem.name,\r\n      // Use nullish coalescing to convert null from DB to undefined for the MenuItem type\r\n      description: rawItem.description ?? undefined,\r\n      price: rawItem.price ?? undefined,\r\n      dietary_tags: rawItem.dietary_tags ?? [], // Default to empty array if null/undefined\r\n    };\r\n    byCategory[categoryName].push(menuItem);\r\n  }\r\n  // Map to MenuCategory structure { name: string, items: MenuItem[] }\r\n  return Object.entries(byCategory).map(([categoryName, itemsList]) => ({\r\n    name: categoryName, // 'name' here refers to the category's name\r\n    items: itemsList,\r\n  }));\r\n}\r\n\r\n// Remove redundant type constituent in normalizeTruckLocation\r\nfunction normalizeTruckLocation(truck: FoodTruck): FoodTruck {\r\n  const fallback: FoodTruckLocation = {\r\n    lat: undefined,\r\n    lng: undefined,\r\n    address: 'Unknown',\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n  const loc = truck.exact_location ?? truck.current_location ?? truck.city_location ?? {};\r\n  const lat = typeof loc.lat === 'number' ? loc.lat : undefined;\r\n  const lng = typeof loc.lng === 'number' ? loc.lng : undefined;\r\n  const address = loc.address;\r\n  const timestamp = loc.timestamp;\r\n\r\n  truck.current_location =\r\n    lat == undefined || lng == undefined || (lat === 0 && lng === 0)\r\n      ? { ...fallback, address: address ?? fallback.address }\r\n      : {\r\n          lat,\r\n          lng,\r\n          address: address ?? fallback.address,\r\n          timestamp: timestamp ?? fallback.timestamp,\r\n        };\r\n  return truck;\r\n}\r\n\r\nexport const ScrapingJobService = {\r\n  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .insert([\r\n        {\r\n          ...jobData,\r\n          status: 'pending',\r\n          retry_count: 0,\r\n          max_retries: 3,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getJobsByStatus(status: string): Promise<ScrapingJob[]> {\r\n    try {\r\n      const query =\r\n        status === 'all'\r\n          ? supabase.from('scraping_jobs').select('*')\r\n          : supabase.from('scraping_jobs').select('*').eq('status', status);\r\n\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await query\r\n        .order('priority', { ascending: false })\r\n        .order('scheduled_at', { ascending: true });\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching jobs:', error);\r\n      return [];\r\n    }\r\n  },\r\n  async updateJobStatus(\r\n    id: string,\r\n    status: string,\r\n    updates: Partial<ScrapingJob> = {},\r\n  ): Promise<ScrapingJob> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .update({\r\n        status,\r\n        ...updates,\r\n        ...(status === 'running' && { started_at: new Date().toISOString() }),\r\n        ...(status === 'completed' && { completed_at: new Date().toISOString() }),\r\n      })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  async incrementRetryCount(id: string): Promise<ScrapingJob> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const {\r\n      data: current,\r\n      error: fetchError,\r\n    }: PostgrestSingleResponse<Pick<ScrapingJob, 'retry_count'>> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .select('retry_count')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (fetchError) throw fetchError;\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .update({ retry_count: (current?.retry_count ?? 0) + 1 })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  async getAllJobs(limit = 50, offset = 0): Promise<ScrapingJob[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\r\n        .from('scraping_jobs')\r\n        .select('*')\r\n        .order('created_at', { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching all jobs:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async getJobsFromDate(date: Date): Promise<ScrapingJob[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\r\n        .from('scraping_jobs')\r\n        .select('*')\r\n        .gte('created_at', date.toISOString())\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching jobs from date:', error);\r\n      return [];\r\n    }\r\n  },\r\n};\r\n\r\nexport const DataProcessingService = {\r\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from('data_processing_queue')\r\n      .insert([\r\n        {\r\n          ...queueData,\r\n          status: 'pending',\r\n          gemini_tokens_used: 0,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getNextQueueItem(): Promise<DataProcessingQueue | undefined> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from('data_processing_queue')\r\n      .select('*')\r\n      .eq('status', 'pending')\r\n      .order('priority', { ascending: false })\r\n      .order('created_at', { ascending: true })\r\n      .limit(1)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') throw error;\r\n    return data ?? undefined;\r\n  },\r\n\r\n  async getQueueByStatus(status: string): Promise<DataProcessingQueue[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<DataProcessingQueue> = await supabase\r\n        .from('data_processing_queue')\r\n        .select('*')\r\n        .eq('status', status)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching queue:', error);\r\n      return [];\r\n    }\r\n  },\r\n  async updateQueueItem(\r\n    id: string,\r\n    updates: Partial<DataProcessingQueue>,\r\n  ): Promise<DataProcessingQueue> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from('data_processing_queue')\r\n      .update({\r\n        ...updates,\r\n        ...(updates.status === 'completed' && { processed_at: new Date().toISOString() }),\r\n      })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n};\r\n\r\nexport const DataQualityService = {\r\n  calculateQualityScore: (truck: FoodTruck) => {\r\n    // Placeholder for actual quality score calculation logic\r\n    // This should be implemented based on defined data quality rules\r\n    let score = 0;\r\n    if (typeof truck.name === 'string' && truck.name.trim() !== '') score += 20;\r\n    if (\r\n      truck.current_location &&\r\n      typeof truck.current_location.lat === 'number' && !Number.isNaN(truck.current_location.lat) &&\r\n      typeof truck.current_location.lng === 'number' && !Number.isNaN(truck.current_location.lng)\r\n    ) score += 30;\r\n    if (\r\n      (truck.contact_info &&\r\n        ((typeof truck.contact_info.phone === 'string' && truck.contact_info.phone.trim() !== '') ||\r\n         (typeof truck.contact_info.email === 'string' && truck.contact_info.email.trim() !== '') ||\r\n         (typeof truck.contact_info.website === 'string' && truck.contact_info.website.trim() !== '')))\r\n    ) score += 25;\r\n    if (Array.isArray(truck.menu) && truck.menu.length > 0) score += 15;\r\n    if (truck.operating_hours != undefined && truck.operating_hours != undefined) score += 10;\r\n    return { score: Math.min(100, score) };\r\n  },\r\n\r\n  async updateTruckQualityScore(truckId: string): Promise<FoodTruck> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n    const { data: truck, error: fetchError } = await supabaseAdmin\r\n      .from('food_trucks')\r\n      .select('*')\r\n      .eq('id', truckId)\r\n      .single();\r\n\r\n    if (fetchError) throw fetchError;\r\n    if (!truck) throw new Error(`Truck with ID ${truckId} not found.`);\r\n\r\n    const { score } = this.calculateQualityScore(truck);\r\n\r\n    const { data, error } = await supabaseAdmin\r\n      .from('food_trucks')\r\n      .update({ data_quality_score: score })\r\n      .eq('id', truckId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n};\r\n\r\nexport const APIUsageService = {\r\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<ApiUsage> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    try {\r\n      const today = new Date().toISOString().split('T')[0];\r\n\r\n      const { data: existing }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n        .from('api_usage')\r\n        .select('*')\r\n        .eq('service_name', serviceName)\r\n        .eq('usage_date', today)\r\n        .single();\r\n      if (existing) {\r\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n          .from('api_usage')\r\n          .update({\r\n            requests_count: (existing.requests_count ?? 0) + requests,\r\n            tokens_used: (existing.tokens_used ?? 0) + tokens,\r\n          })\r\n          .eq('id', existing.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      } else {\r\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n          .from('api_usage')\r\n          .insert([\r\n            {\r\n              service_name: serviceName,\r\n              usage_date: today,\r\n              requests_count: requests,\r\n              tokens_used: tokens,\r\n            },\r\n          ])\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn('Error tracking usage:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getTodayUsage(serviceName: string): Promise<ApiUsage | undefined> {\r\n    try {\r\n      const today = new Date().toISOString().split('T')[0];\r\n\r\n      const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabase\r\n        .from('api_usage')\r\n        .select('*')\r\n        .eq('service_name', serviceName)\r\n        .eq('usage_date', today)\r\n        .single();\r\n\r\n      if (error && error.code !== 'PGRST116') throw error;\r\n      return data ?? undefined;\r\n    } catch (error: unknown) {\r\n      console.warn('Error getting today usage:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getAllUsageStats(): Promise<ApiUsage[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ApiUsage> = await supabase\r\n        .from('api_usage')\r\n        .select('*')\r\n        .order('usage_date', { ascending: false })\r\n        .limit(30);\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error getting usage stats:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport { type MenuItem, type MenuCategory, type OperatingHours, type PriceRange } from './types';\r\n\r\n// Helper to prepare menu items for DB insertion\r\nfunction prepareMenuItemsForInsert(truckId: string, menuData: MenuCategory[] | undefined) {\r\n  if (!menuData || menuData.length === 0) return [];\r\n  return menuData.flatMap((category) =>\r\n    (category.items ?? []).map((item) => ({\r\n      food_truck_id: truckId,\r\n      category: category.name ?? 'Uncategorized',\r\n      name: item.name ?? 'Unknown Item',\r\n      description: item.description ?? undefined,\r\n      price: typeof item.price === 'number' ? item.price : undefined,\r\n      dietary_tags: item.dietary_tags ?? [],\r\n    }))\r\n  );\r\n}\r\n\r\nasync function insertMenuItems(truckId: string, menuData: MenuCategory[] | undefined) {\r\n  const menuItems = prepareMenuItemsForInsert(truckId, menuData);\r\n  if (menuItems.length === 0) return;\r\n  const { error: menuError } = await supabaseAdmin!.from('menu_items').insert(menuItems);\r\n  if (menuError) {\r\n    console.error('Error inserting menu items for truck', truckId, menuError);\r\n  }\r\n}\r\n\r\n// Fix all strict-boolean-expressions and always-true/false comparisons below\r\n// Example: if (someString) => if (typeof someString === 'string' && someString.trim() !== '')\r\n// Example: if (someNumber) => if (typeof someNumber === 'number' && !Number.isNaN(someNumber) && someNumber !== 0)\r\n// Example: if (someObject) => if (someObject != null && someObject != null)\r\n\r\n// For all other conditionals, ensure explicit nullish/empty/NaN checks as above\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types\\foodTruck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\dataQualityFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\foodTruckHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":23,"column":83,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":23,"endColumn":87},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":28,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":28,"endColumn":18}],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":48,"endColumn":45,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FoodTruck } from '@/lib/types/foodTruck';\r\n\r\nexport const getCurrentDay = () => {\r\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\r\n  return days[new Date().getDay()];\r\n};\r\n\r\nexport const formatPrice = (price: number) => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  }).format(price);\r\n};\r\n\r\nexport const formatHours = (hours: { open: string; close: string; }) => {\r\n    const open = new Date(`1970-01-01T${hours.open}Z`).toLocaleTimeString('en-US', {hour: 'numeric', minute: 'numeric', hour12: true});\r\n    const close = new Date(`1970-01-01T${hours.close}Z`).toLocaleTimeString('en-US', {hour: 'numeric', minute: 'numeric', hour12: true});\r\n    return `${open} - ${close}`;\r\n}\r\n\r\nexport const getPopularItems = (truck: FoodTruck) => {\r\n    // Explicitly check for nullish and boolean\r\n    return truck.menu?.flatMap(category => category.items).filter(item => Boolean(item && item.is_popular === true)) ?? [];\r\n}\r\n\r\nexport const getPriceRange = (truck: FoodTruck) => {\r\n    const allItems = truck.menu?.flatMap(category => category.items);\r\n    if (!allItems || allItems.length === 0) {\r\n        return 'N/A';\r\n    }\r\n    const prices = allItems.map(item => item.price);\r\n    const minPrice = Math.min(...prices);\r\n    const maxPrice = Math.max(...prices);\r\n    return `${formatPrice(minPrice)} - ${formatPrice(maxPrice)}`;\r\n}\r\n\r\nexport const getTodayHours = (truck: FoodTruck) => {\r\n    const today = getCurrentDay();\r\n    return truck.operating_hours?.[today];\r\n}\r\n\r\n// Get user's current location or default to San Francisco\r\nexport function getUserLocationHelper(\r\n  setUserLocation: (location: { lat: number; lng: number }) => void\r\n) {\r\n  if (typeof navigator !== 'undefined' && navigator.geolocation != undefined) {\r\n    // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        setUserLocation({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n      },\r\n      (error) => {\r\n        console.warn('Location access denied:', error);\r\n        // Default to San Francisco\r\n        setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n      },\r\n    );\r\n  } else {\r\n    // Default to San Francisco if geolocation is not supported\r\n    setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n  }\r\n}\r\n\r\n// Load all food trucks from API\r\nexport async function loadFoodTrucksHelper(\r\n  setTrucks: (trucks: FoodTruck[]) => void,\r\n  setLoading: (loading: boolean) => void\r\n) {\r\n  try {\r\n    const response = await fetch('/api/trucks');\r\n    const data: unknown = await response.json();\r\n    if (typeof data === 'object' && data != undefined && 'trucks' in data && Array.isArray(data.trucks)) {\r\n      setTrucks(data.trucks as FoodTruck[]);\r\n    } else {\r\n      setTrucks([]);\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load food trucks:', error);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}\r\n\r\n// Load nearby food trucks based on user location\r\nexport async function loadNearbyTrucksHelper(\r\n  userLocation: { lat: number; lng: number } | undefined,\r\n  setTrucks: (trucks: FoodTruck[]) => void\r\n) {\r\n  if (!userLocation) return;\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `/api/trucks?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10`,\r\n    );\r\n    const data: unknown = await response.json();\r\n    if (typeof data === 'object' && data != undefined && 'trucks' in data && Array.isArray(data.trucks)) {\r\n      setTrucks(data.trucks as FoodTruck[]);\r\n    } else {\r\n      setTrucks([]);\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load nearby trucks:', error);\r\n  }\r\n}\r\n\r\n// Check if a food truck is currently open\r\nexport function isTruckOpen(truck: FoodTruck): boolean {\r\n  const today = getCurrentDay();\r\n  const hours = truck.operating_hours?.[today];\r\n\r\n  // Ensure hours and its properties are not null/undefined before accessing\r\n  if (hours == undefined || hours.closed === true || hours.open == undefined || hours.close == undefined) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const now = new Date();\r\n    const currentTime = now.getHours() * 100 + now.getMinutes();\r\n    const openTime = Number.parseInt(hours.open.replace(':', ''));\r\n    const closeTime = Number.parseInt(hours.close.replace(':', ''));\r\n\r\n    return currentTime >= openTime && currentTime <= closeTime;\r\n  } catch (error: unknown) {\r\n    console.error('Error parsing operating hours for truck', truck.name, error);\r\n    return false;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\quality-scorer.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `qualityScorer.ts` or `QualityScorer.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"unicorn/no-empty-file","severity":2,"message":"Empty files are not allowed.","line":1,"column":1,"nodeType":"Program","messageId":"no-empty-file","endLine":1,"endColumn":1}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]