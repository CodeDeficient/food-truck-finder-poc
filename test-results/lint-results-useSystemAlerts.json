[{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlerts.ts","messages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":17,"column":69,"nodeType":null,"endLine":17,"endColumn":72,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[639,642],"text":"!="}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { RealtimeEvent } from './useRealtimeAdminEvents.types';\r\n\r\nexport interface SystemAlert {\r\n  id: string;\r\n  type: 'info' | 'warning' | 'error' | 'critical';\r\n  message: string;\r\n  timestamp: string;\r\n  acknowledged?: boolean;\r\n}\r\n\r\nfunction processRecentEvents(recentEvents: RealtimeEvent[]): SystemAlert[] {\r\n  return recentEvents\r\n    .filter(event => (event.severity ?? 'info') !== 'info') // Handle nullable severity explicitly\r\n    .map(event => {\r\n      // Explicitly guard event.data and its message property\r\n      const message = (typeof event.data === 'object' && event.data !== null && 'message' in event.data && typeof event.data.message === 'string')\r\n        ? event.data.message\r\n        : 'System event occurred';\r\n\r\n      // Explicitly ensure event.severity is one of the allowed types for SystemAlert\r\n      const severity: 'info' | 'warning' | 'error' | 'critical' =\r\n        (event.severity === 'info' || event.severity === 'warning' || event.severity === 'error' || event.severity === 'critical')\r\n          ? event.severity\r\n          : 'info'; // Fallback to 'info' if type is unexpected\r\n\r\n      return {\r\n        id: event.id,\r\n        type: severity,\r\n        message: message,\r\n        timestamp: event.timestamp,\r\n        acknowledged: false,\r\n      };\r\n    })\r\n    .slice(0, 5); // Keep only the latest 5 alerts\r\n}\r\n\r\nexport const useSystemAlerts = (recentEvents: RealtimeEvent[]) => {\r\n  const [alerts, setAlerts] = useState<SystemAlert[]>([]);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const newAlerts = processRecentEvents(recentEvents);\r\n\r\n    // Only update if there's a change to avoid unnecessary re-renders\r\n    if (JSON.stringify(newAlerts) !== JSON.stringify(alerts)) {\r\n      setAlerts(newAlerts);\r\n    }\r\n  }, [recentEvents, alerts]);\r\n\r\n  const acknowledgeAlert = (alertId: string) => {\r\n    setAlerts(prev =>\r\n      prev.map(alert =>\r\n        alert.id === alertId ? { ...alert, acknowledged: true } : alert\r\n      )\r\n    );\r\n  };\r\n\r\n  const toggleDetails = () => {\r\n    setShowDetails(prev => !prev);\r\n  };\r\n\r\n  return {\r\n    alerts,\r\n    showDetails,\r\n    acknowledgeAlert,\r\n    toggleDetails,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]}]