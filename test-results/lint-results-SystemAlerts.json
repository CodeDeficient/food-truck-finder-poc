[{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertListDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\RealtimeStatusDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeEvent' is defined but never used.","line":10,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeEvent'.","line":10,"column":15,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":10,"endColumn":28,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[487,563],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'RealtimeStatusDisplay' has too many lines (51). Maximum allowed is 50.","line":34,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":84,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { ConnectionStatusHeader } from './ConnectionStatusHeader';\r\nimport { SystemMetricsGrid } from './SystemMetricsGrid';\r\nimport { ScrapingJobsStatus } from './ScrapingJobsStatus';\r\nimport { SystemAlerts } from './SystemAlerts';\r\nimport { EventControls } from './EventControls';\r\nimport { type SystemAlert } from '@/hooks/useSystemAlerts';\r\nimport { type StatusMetric } from './useSystemMetrics';\r\nimport { type RealtimeEvent } from '@/hooks/useRealtimeAdminEvents.types';\r\n\r\ninterface RealtimeStatusDisplayProps {\r\n  readonly isConnected: boolean;\r\n  readonly isConnecting: boolean;\r\n  readonly connectionError: string | undefined;\r\n  readonly lastEventTime: Date | undefined;\r\n  readonly connect: () => void;\r\n  readonly disconnect: () => void;\r\n  readonly systemMetrics: StatusMetric[];\r\n  readonly scrapingJobs: {\r\n    active: number;\r\n    completed: number;\r\n    failed: number;\r\n    pending: number;\r\n  } | undefined;\r\n  readonly alerts: SystemAlert[];\r\n  readonly showDetails: boolean;\r\n  readonly onToggleDetails: () => void;\r\n  readonly onAcknowledgeAlert: (alertId: string) => void;\r\n  readonly recentEventsCount: number;\r\n  readonly onClearEvents: () => void;\r\n}\r\n\r\nexport function RealtimeStatusDisplay({\r\n  isConnected,\r\n  isConnecting,\r\n  connectionError,\r\n  lastEventTime,\r\n  connect,\r\n  disconnect,\r\n  systemMetrics,\r\n  scrapingJobs,\r\n  alerts,\r\n  showDetails,\r\n  onToggleDetails,\r\n  onAcknowledgeAlert,\r\n  recentEventsCount,\r\n  onClearEvents,\r\n}: RealtimeStatusDisplayProps) {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Card className={`border-l-4 ${isConnected ? 'border-l-green-500' : 'border-l-red-500'}`}>\r\n        <ConnectionStatusHeader\r\n          isConnected={isConnected}\r\n          isConnecting={isConnecting}\r\n          lastEventTime={lastEventTime ? new Date(lastEventTime) : undefined}\r\n          connect={connect}\r\n          disconnect={disconnect}\r\n        />\r\n        <CardContent>\r\n          {connectionError !== undefined && (\r\n            <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md\">\r\n              <p className=\"text-sm text-red-600\">{connectionError}</p>\r\n            </div>\r\n          )}\r\n          <SystemMetricsGrid\r\n            metrics={systemMetrics}\r\n          />\r\n          <ScrapingJobsStatus scrapingJobs={scrapingJobs} />\r\n          <SystemAlerts\r\n            alerts={alerts}\r\n            showDetails={showDetails}\r\n            onToggleDetails={onToggleDetails}\r\n            onAcknowledgeAlert={onAcknowledgeAlert}\r\n          />\r\n          <EventControls\r\n            recentEventsCount={recentEventsCount}\r\n            onClearEvents={onClearEvents}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\StatusHelpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlertItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlerts.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (54). Maximum allowed is 50.","line":12,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":65,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in array predicate return type. Please handle the nullish case explicitly.","line":18,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorNullableBoolean","endLine":18,"endColumn":67,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[555,598],"text":"(event.severity && event.severity !== 'info') ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[555,598],"text":"(event.severity && event.severity !== 'info') === true"},"desc":"Change condition to check if true (`value === true`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[546,551],"text":"(event): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":21,"column":71,"nodeType":null,"endLine":21,"endColumn":74,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[759,762],"text":"!="}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { RealtimeEvent } from './useRealtimeAdminEvents.types';\r\n\r\nexport interface SystemAlert {\r\n  id: string;\r\n  type: 'info' | 'warning' | 'error' | 'critical';\r\n  message: string;\r\n  timestamp: string;\r\n  acknowledged?: boolean;\r\n}\r\n\r\nexport const useSystemAlerts = (recentEvents: RealtimeEvent[]) => {\r\n  const [alerts, setAlerts] = useState<SystemAlert[]>([]);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const newAlerts = recentEvents\r\n      .filter(event => event.severity && event.severity !== 'info')\r\n      .map(event => {\r\n        // Explicitly guard event.data and its message property\r\n        const message = (typeof event.data === 'object' && event.data !== null && 'message' in event.data && typeof event.data.message === 'string')\r\n          ? event.data.message\r\n          : 'System event occurred';\r\n\r\n        // Explicitly ensure event.severity is one of the allowed types for SystemAlert\r\n        const severity: 'info' | 'warning' | 'error' | 'critical' =\r\n          (event.severity === 'info' || event.severity === 'warning' || event.severity === 'error' || event.severity === 'critical')\r\n            ? event.severity\r\n            : 'info'; // Fallback to 'info' if type is unexpected\r\n\r\n        return {\r\n          id: event.id,\r\n          type: severity,\r\n          message: message,\r\n          timestamp: event.timestamp,\r\n          acknowledged: false,\r\n        };\r\n      })\r\n      .slice(0, 5); // Keep only the latest 5 alerts\r\n\r\n    // Only update if there's a change to avoid unnecessary re-renders\r\n    if (JSON.stringify(newAlerts) !== JSON.stringify(alerts)) {\r\n      setAlerts(newAlerts);\r\n    }\r\n  }, [recentEvents, alerts]);\r\n\r\n  const acknowledgeAlert = (alertId: string) => {\r\n    setAlerts(prev =>\r\n      prev.map(alert =>\r\n        alert.id === alertId ? { ...alert, acknowledged: true } : alert\r\n      )\r\n    );\r\n  };\r\n\r\n  const toggleDetails = () => {\r\n    setShowDetails(prev => !prev);\r\n  };\r\n\r\n  return {\r\n    alerts,\r\n    showDetails,\r\n    acknowledgeAlert,\r\n    toggleDetails,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]}]