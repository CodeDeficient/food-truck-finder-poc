[{"filePath":"/app/app/access-denied/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/analytics/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/auto-scraping/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/data-cleanup/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/data-quality/page.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":91,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":92,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":91,"column":44,"nodeType":"Identifier","messageId":"unsafeCall","endLine":91,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":93,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":93,"endColumn":80,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":93,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":95,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":95,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":95,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":108,"column":12,"nodeType":"Identifier","messageId":"unsafeCall","endLine":108,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `error` typed value.","line":114,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/events/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/food-trucks/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/food-trucks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/monitoring/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/pipeline/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/test-pipeline/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/users/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/automated-cleanup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/cron-status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/data-cleanup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/data-quality/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/oauth-status/route.ts","messages":[{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":22,"column":12,"nodeType":"AwaitExpression","messageId":"await","endLine":22,"endColumn":44,"suggestions":[{"messageId":"removeAwait","fix":{"range":[589,594],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"sonarjs/no-invalid-await","severity":2,"message":"Refactor this redundant 'await' on a non-promise.","line":22,"column":12,"nodeType":"AwaitExpression","messageId":"refactorAwait","endLine":22,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport {\n  handleGetRequest,\n  handlePostRequest,\n} from '@/lib/api/admin/oauth-status/helpers';\n\nexport async function GET(request: NextRequest) {\n  try {\n    return await handleGetRequest(request);\n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: 'OAuth status check failed',\n      details: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    return await handlePostRequest(request);\n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to generate OAuth test URL',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/realtime-events/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/scraping-metrics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/analytics/web-vitals/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/auto-scrape-initiate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/autonomous-discovery/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/cron/auto-scrape/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/cron/quality-check/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { NextRequest, NextResponse } from 'next/server';\nimport { logActivity } from '@/lib/activityLogger';\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\nimport { DataQualityService } from '@/lib/utils/qualityScorer';\n\n// Type definitions for quality assessment\ninterface QualityAssessment {\n  score: number;\n  issues: string[]; // Changed from unknown[] to string[]\n}\n\ninterface QualityService {\n  calculateQualityScore: (truck: FoodTruck) => QualityAssessment;\n  categorizeQualityScore: (score: number) => string;\n  batchUpdateQualityScores: (limit: number) => Promise<{ updatedCount: number; errors: string[]; }>;\n\n  updateTruckQualityScore: (truckId: string) => Promise<{ success: boolean; }>;\n\n}\n\ninterface QualityCheckResults {\n  totalTrucks: number;\n  trucksWithMissingData: number;\n  lowQualityTrucks: number;\n  staleDataCount: number;\n  averageQualityScore: number;\n  qualityBreakdown: { high: number; medium: number; low: number };\n  updateResults: { updatedCount: number; errors: string[]; }; // Changed from unknown[] to string[]\n  timestamp: string;\n}\n\nfunction verifyCronSecret(request: NextRequest): NextResponse | undefined {\n  const authHeader = request.headers.get('authorization');\n  const cronSecret = process.env.CRON_SECRET;\n\n  if (cronSecret == undefined) {\n    console.error('CRON_SECRET not configured');\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n  }\n\n  if (authHeader == undefined || authHeader !== `Bearer ${cronSecret}`) {\n    console.error('Unauthorized cron attempt:', authHeader);\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n  return undefined;\n}\n\nfunction logQualityCheckStart() {\n  console.info('Starting daily data quality check...');\n  logActivity({\n    type: 'cron_job',\n    action: 'quality_check_started',\n    details: { timestamp: new Date().toISOString() },\n  });\n}\n\nfunction logQualityCheckCompletion(qualityResults: QualityCheckResults) {\n  logActivity({\n    type: 'cron_job',\n    action: 'quality_check_completed',\n    details: {\n      logTimestamp: new Date().toISOString(),\n      ...qualityResults,\n    },\n  });\n  console.info('Data quality check completed successfully');\n}\n\nfunction logQualityCheckFailure(error: unknown) {\n  console.error('Quality check cron job failed:', error);\n  logActivity({\n    type: 'cron_job',\n    action: 'quality_check_failed',\n    details: {\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : String(error),\n    },\n  });\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authResponse = verifyCronSecret(request);\n    if (authResponse) {\n      return authResponse;\n    }\n\n    logQualityCheckStart();\n    const qualityResults: QualityCheckResults = await performDataQualityCheck();\n    logQualityCheckCompletion(qualityResults);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Quality check completed successfully',\n      data: {\n        ...qualityResults,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error: unknown) {\n    logQualityCheckFailure(error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Quality check failed',\n        message: error instanceof Error ? error.message : String(error),\n      },\n      { status: 500 },\n    );\n  }\n}\n\nfunction assessTrucksQuality(trucks: FoodTruck[]): {\n  trucksWithMissingData: number;\n  lowQualityTrucks: number;\n  staleDataCount: number;\n  averageQualityScore: number;\n  qualityBreakdown: { high: number; medium: number; low: number };\n} {\n  let trucksWithMissingData = 0;\n  let lowQualityTrucks = 0;\n  let totalQualityScore = 0;\n  let staleDataCount = 0;\n  const qualityBreakdown = { high: 0, medium: 0, low: 0 };\n\n  for (const truck of trucks) {\n    const assessment = (DataQualityService as QualityService).calculateQualityScore(truck);\n    totalQualityScore += assessment.score;\n\n    const category = (DataQualityService as QualityService).categorizeQualityScore(assessment.score);\n    qualityBreakdown[category as keyof typeof qualityBreakdown]++;\n\n    if (assessment.issues.length > 0) {\n      trucksWithMissingData++;\n    }\n\n    if (assessment.score < 0.6) {\n      lowQualityTrucks++;\n    }\n\n    if (truck.current_location?.timestamp != undefined) {\n      const locationAge = Date.now() - new Date(truck.current_location.timestamp).getTime();\n      const daysSinceUpdate = locationAge / (1000 * 60 * 60 * 24);\n      if (daysSinceUpdate > 7) {\n        staleDataCount++;\n      }\n    }\n  }\n\n  const averageQualityScore = trucks.length > 0 ? totalQualityScore / trucks.length : 0;\n\n  return {\n    trucksWithMissingData,\n    lowQualityTrucks,\n    staleDataCount,\n    averageQualityScore,\n    qualityBreakdown,\n  };\n}\n\nfunction aggregateQualityCheckResults(\n  totalTrucks: number,\n  assessmentResults: ReturnType<typeof assessTrucksQuality>,\n  updateResults: { updatedCount: number; errors: string[]; },\n  timestamp: string\n): QualityCheckResults {\n  return {\n    totalTrucks: totalTrucks,\n    trucksWithMissingData: assessmentResults.trucksWithMissingData,\n    lowQualityTrucks: assessmentResults.lowQualityTrucks,\n    staleDataCount: assessmentResults.staleDataCount,\n    averageQualityScore: Math.round(assessmentResults.averageQualityScore * 100) / 100,\n    qualityBreakdown: assessmentResults.qualityBreakdown,\n    updateResults: updateResults,\n    timestamp: timestamp,\n  };\n}\n\nasync function performDataQualityCheck() {\n  try {\n    const { trucks, total } = await FoodTruckService.getAllTrucks(1000, 0);\n    const assessmentResults = assessTrucksQuality(trucks);\n    const updateResults = await (DataQualityService as QualityService).batchUpdateQualityScores(100);\n    return aggregateQualityCheckResults(\n      total,\n      assessmentResults,\n      updateResults,\n      new Date().toISOString()\n    );\n  } catch (error: unknown) {\n    console.error('Error performing data quality check:', error);\n    throw error;\n  }\n}\n// Only allow POST requests for cron jobs\nexport function GET() {\n  return NextResponse.json(\n    { error: 'Method not allowed. Use POST for cron jobs.' },\n    { status: 405 },\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/dashboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/enhanced-pipeline/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/firecrawl/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/gemini/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/monitoring/api-usage/route.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handlePostAction' has no 'await' expression.","line":30,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":30,"endColumn":32,"suggestions":[{"messageId":"removeAsync","fix":{"range":[900,1047],"text":"function handlePostAction(\n  action: string | undefined,\n  service: string | undefined,\n  level: string | undefined,\n): NextResponse"},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { type APIService } from '@/lib/monitoring/apiMonitor';\nimport {\n  handleClearAlerts,\n  handleComprehensiveMonitoring,\n  handleGetAlerts,\n  handleServiceSpecificMonitoring,\n  handleTestAlert,\n} from '@/lib/api/monitoring/api-usage/handlers';\n\nexport function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const service = searchParams.get('service') as APIService | null;\n\n    return service ? handleServiceSpecificMonitoring(request, service) : handleComprehensiveMonitoring();\n  } catch (error: unknown) {\n    console.error('API monitoring error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to get API monitoring data',\n        details: error instanceof Error ? error.message : String(error),\n      },\n      { status: 500 },\n    );\n  }\n}\n\nasync function handlePostAction(\n  action: string | undefined,\n  service: string | undefined,\n  level: string | undefined,\n): Promise<NextResponse> {\n  if (action === undefined) {\n    return NextResponse.json({ success: false, error: 'Invalid request body: missing or invalid action' }, { status: 400 });\n  }\n\n  switch (action) {\n    case 'clear-alerts': {\n      return handleClearAlerts();\n    }\n    case 'get-alerts': {\n      return handleGetAlerts();\n    }\n    case 'test-alert': {\n      if (service === undefined || level === undefined) {\n        return NextResponse.json(\n          { success: false, error: 'Missing service or level for test-alert action' },\n          { status: 400 },\n        );\n      }\n      return handleTestAlert({ service, level });\n    }\n    default: {\n      return NextResponse.json(\n        { success: false, error: `Unknown action: ${action}` },\n        { status: 400 },\n      );\n    }\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const rawBody: unknown = await request.json();\n\n    if (typeof rawBody !== 'object' || rawBody === null) {\n      return NextResponse.json({ success: false, error: 'Invalid request body: not an object' }, { status: 400 });\n    }\n\n    const body = rawBody as Record<string, unknown>;\n    const action = typeof body.action === 'string' ? body.action : undefined;\n    const service = typeof body.service === 'string' ? body.service : undefined;\n    const level = typeof body.level === 'string' ? body.level : undefined;\n\n    return handlePostAction(action, service, level);\n  } catch (error: unknown) {\n    console.error('API monitoring POST error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to process monitoring request',\n        details: error instanceof Error ? error.message : String(error),\n      },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/pipeline/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/scheduler/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/scrape/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/search/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/tavily/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/test-integration/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/test-pipeline-run/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":10,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":10,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":10,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":10,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":12,"column":32,"nodeType":"Property","messageId":"anyAssignment","endLine":12,"endColumn":39}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse, NextRequest } from 'next/server';\nimport { runTestPipeline } from '@/lib/api/test-integration/pipeline-runner';\n\nexport async function POST(request: NextRequest) {\n  const logs: string[] = [];\n  logs.push('Test pipeline run started.');\n\n  try {\n    const body = (await request.json()) as { url?: string; rawText?: string; isDryRun?: boolean };\n    const results = await runTestPipeline(body, logs);\n\n    return NextResponse.json({ results }, { status: 200 });\n  } catch (error: unknown) {\n    const errorMessage =\n      error instanceof Error\n        ? error.message\n        : 'An unknown error occurred during overall test pipeline run.';\n    logs.push(`Overall test pipeline error: ${errorMessage}`);\n    return NextResponse.json(\n      {\n        message: 'Test pipeline run failed.',\n        error: errorMessage,\n        results: {\n          logs,\n          overallStatus: 'Error',\n        },\n      },\n      { status: 200 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/trucks/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/trucks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/auth/AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/auth/callback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/trucks/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/MapDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/SearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":32,"column":15,"nodeType":null,"endLine":32,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[1099,1102],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/WebVitalsReporter.tsx","messages":[{"ruleId":"sonarjs/no-redundant-jump","severity":2,"message":"Remove this redundant jump.","line":19,"column":3,"nodeType":"ReturnStatement","messageId":"removeRedundantJump","endLine":19,"endColumn":10,"suggestions":[{"messageId":"suggestJumpRemoval","fix":{"range":[464,474],"text":""},"desc":"Remove this redundant jump"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"'use client';\n\nimport { useEffect } from 'react';\nimport { initWebVitalsMonitoring } from '@/lib/performance/webVitals';\n\n/**\n * Web Vitals Reporter Component\n * Initializes Core Web Vitals monitoring for the application\n */\nexport function WebVitalsReporter() {\n  useEffect(() => {\n    // Only initialize in browser environment\n    if (globalThis.window != undefined) {\n      initWebVitalsMonitoring();\n    }\n  }, []);\n\n  // This component doesn't render anything\n  return;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/AdminNavLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/DataCleanupDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/RealtimeStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/UserMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupOperationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupSummaryCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/OperationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/dashboard/DataQualityScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/dashboard/PipelineStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/dashboard/QualityDistributionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/dashboard/RecentErrorsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/dashboard/TotalFoodTrucksCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/BasicInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/ContactField.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":33,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[878,882],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[878,882],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[878,882],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import React from 'react';\n// Removed Mail, Phone, Globe imports as they are not directly used here\n\ninterface ContactFieldProps {\n  readonly icon: React.ComponentType<{ className?: string }>;\n  readonly label: string;\n  readonly value?: string;\n  readonly href?: string;\n  readonly unavailableText: string;\n}\n\nexport function ContactField({\n  icon: Icon,\n  label,\n  value,\n  href,\n  unavailableText\n}: Readonly<ContactFieldProps>) {\n  if (value == undefined || value === '') {\n    return (\n      <div className=\"flex items-center gap-3 text-gray-400\">\n        <Icon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{unavailableText}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <Icon className=\"h-4 w-4 text-gray-500\" />\n      <div>\n        <label className=\"text-sm font-medium text-gray-500\">{label}</label>\n        {href ? (\n          <a\n            href={href}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-blue-600 hover:text-blue-800 underline\"\n          >\n            {value}\n          </a>\n        ) : (\n          <p className=\"text-gray-900\">{value}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/ContactInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Phone, Mail, Globe } from 'lucide-react';\nimport { ContactField } from './ContactField';\nimport { SocialMediaLinks } from './SocialMediaLinks';\n\ninterface ContactInfoCardProps {\n  readonly truck: { contact_info?: { phone?: string; email?: string; website?: string }; social_media?: { instagram?: string; facebook?: string; twitter?: string } };\n}\n\nexport function ContactInfoCard({ truck }: Readonly<ContactInfoCardProps>) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Phone className=\"h-5 w-5\" />\n          Contact Information\n        </CardTitle>\n        <CardDescription>Phone, email, website, and social media</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <ContactField\n          icon={Phone}\n          label=\"Phone\"\n          value={truck.contact_info?.phone}\n          href={truck.contact_info?.phone != undefined && truck.contact_info.phone !== '' ? `tel:${truck.contact_info.phone}` : undefined}\n          unavailableText=\"No phone number available\"\n        />\n\n        <ContactField\n          icon={Mail}\n          label=\"Email\"\n          value={truck.contact_info?.email}\n          href={truck.contact_info?.email != undefined && truck.contact_info.email !== '' ? `mailto:${truck.contact_info.email}` : undefined}\n          unavailableText=\"No email address available\"\n        />\n\n        <ContactField\n          icon={Globe}\n          label=\"Website\"\n          value={truck.contact_info?.website}\n          href={truck.contact_info?.website}\n          unavailableText=\"No website available\"\n        />\n\n        <SocialMediaLinks socialMedia={truck.social_media} />\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/DataQualityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/LocationInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/OperatingHoursCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock } from 'lucide-react';\n\nimport { type FoodTruck, type OperatingHours } from '@/lib/supabase';\n\ninterface OperatingHoursCardProps {\n  readonly truck: FoodTruck;\n}\n\nexport function OperatingHoursCard({ truck }: Readonly<OperatingHoursCardProps>) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Clock className=\"h-5 w-5\" />\n          Operating Hours\n        </CardTitle>\n        <CardDescription>Daily operating schedule</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {truck.operating_hours != undefined && Object.keys(truck.operating_hours).length > 0 ? (\n          <div className=\"space-y-2\">\n            {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map((day) => {\n              const dayData = truck.operating_hours?.[day as keyof OperatingHours];\n              const dayName = day.charAt(0).toUpperCase() + day.slice(1);\n\n              return (\n                <div key={day} className=\"flex justify-between items-center py-1\">\n                  <span className=\"font-medium text-gray-700\">{dayName}</span>\n                  {(() => {\n                    if (dayData?.closed === true) {\n                      return <span className=\"text-red-600 text-sm\">Closed</span>;\n                    }\n                    if (\n                      dayData?.open != undefined && dayData.open !== '' &&\n                      dayData?.close != undefined && dayData.close !== ''\n                    ) {\n                      return (\n                        <span className=\"text-gray-900 text-sm\">\n                          {dayData.open} - {dayData.close}\n                        </span>\n                      );\n                    }\n                    return <span className=\"text-gray-400 text-sm\">Not specified</span>;\n                  })()}\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <p className=\"text-gray-400 text-sm\">No operating hours available</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/QualityMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import React from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { formatQualityScore, type QualityCategory } from '@/lib/utils/dataQualityFormatters';\nimport { QualityScoreMetric } from './QualityScoreMetric';\n\ninterface QualityMetricsGridProps {\n  readonly truck: {\n    data_quality_score?: number;\n    verification_status?: string;\n    created_at?: string;\n    updated_at?: string\n  };\n  readonly qualityCategory: QualityCategory;\n}\n\nexport function QualityMetricsGrid({\n  truck,\n  qualityCategory: _qualityCategory // Renamed to _qualityCategory\n}: QualityMetricsGridProps) {\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n      <QualityScoreMetric\n        value={\n          <div className=\"text-2xl font-bold text-blue-600\">\n            {formatQualityScore(truck.data_quality_score)}\n          </div>\n        }\n        label=\"Overall Score\"\n        className=\"\"\n      />\n\n      <QualityScoreMetric\n        value={\n          <Badge variant={truck.verification_status === 'verified' ? 'default' : 'outline'}>\n            {truck.verification_status}\n          </Badge>\n        }\n        label=\"Status\"\n        className=\"\"\n      />\n\n      <QualityScoreMetric\n        value={(truck.created_at != undefined && truck.created_at !== '') ? new Date(truck.created_at).toLocaleDateString() : 'N/A'}\n        label=\"Created\"\n      />\n\n      <QualityScoreMetric\n        value={(truck.updated_at != undefined && truck.updated_at !== '') ? new Date(truck.updated_at).toLocaleDateString() : 'N/A'}\n        label=\"Updated\"\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/QualityScoreMetric.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/RatingsReviewsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/SocialMediaLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/food-trucks/detail/TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/pipeline/FailedProcessingQueueTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/pipeline/PipelineStatisticsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/pipeline/RecentScrapingJobsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/pipeline/ScrapingJobRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/pipeline/ScrapingJobsTableContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/AlertListDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/AlertToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/ConnectionStatusHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/EventControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/RealtimeStatusDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeEvent' is defined but never used.","line":10,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeEvent'.","line":10,"column":15,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":10,"endColumn":28,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[471,546],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'RealtimeStatusDisplay' has too many lines (51). Maximum allowed is 50.","line":34,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":84,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ConnectionStatusHeader } from './ConnectionStatusHeader';\nimport { SystemMetricsGrid } from './SystemMetricsGrid';\nimport { ScrapingJobsStatus } from './ScrapingJobsStatus';\nimport { SystemAlerts } from './SystemAlerts';\nimport { EventControls } from './EventControls';\nimport { type SystemAlert } from './StatusHelpers';\nimport { type StatusMetric } from './useSystemMetrics';\nimport { type RealtimeEvent } from '@/hooks/useRealtimeAdminEvents.types';\n\ninterface RealtimeStatusDisplayProps {\n  readonly isConnected: boolean;\n  readonly isConnecting: boolean;\n  readonly connectionError: string | undefined;\n  readonly lastEventTime: Date | undefined;\n  readonly connect: () => void;\n  readonly disconnect: () => void;\n  readonly systemMetrics: StatusMetric[];\n  readonly scrapingJobs: {\n    active: number;\n    completed: number;\n    failed: number;\n    pending: number;\n  } | undefined;\n  readonly alerts: SystemAlert[];\n  readonly showDetails: boolean;\n  readonly onToggleDetails: () => void;\n  readonly onAcknowledgeAlert: (alertId: string) => void;\n  readonly recentEventsCount: number;\n  readonly onClearEvents: () => void;\n}\n\nexport function RealtimeStatusDisplay({\n  isConnected,\n  isConnecting,\n  connectionError,\n  lastEventTime,\n  connect,\n  disconnect,\n  systemMetrics,\n  scrapingJobs,\n  alerts,\n  showDetails,\n  onToggleDetails,\n  onAcknowledgeAlert,\n  recentEventsCount,\n  onClearEvents,\n}: RealtimeStatusDisplayProps) {\n  return (\n    <div className=\"space-y-4\">\n      <Card className={`border-l-4 ${isConnected ? 'border-l-green-500' : 'border-l-red-500'}`}>\n        <ConnectionStatusHeader\n          isConnected={isConnected}\n          isConnecting={isConnecting}\n          lastEventTime={lastEventTime ? new Date(lastEventTime) : undefined}\n          connect={connect}\n          disconnect={disconnect}\n        />\n        <CardContent>\n          {connectionError !== undefined && (\n            <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n              <p className=\"text-sm text-red-600\">{connectionError}</p>\n            </div>\n          )}\n          <SystemMetricsGrid\n            metrics={systemMetrics}\n          />\n          <ScrapingJobsStatus scrapingJobs={scrapingJobs} />\n          <SystemAlerts\n            alerts={alerts}\n            showDetails={showDetails}\n            onToggleDetails={onToggleDetails}\n            onAcknowledgeAlert={onAcknowledgeAlert}\n          />\n          <EventControls\n            recentEventsCount={recentEventsCount}\n            onClearEvents={onClearEvents}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/ScrapingJobsStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/StatusHelpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/SystemAlertItem.tsx","messages":[{"ruleId":"unicorn/consistent-function-scoping","severity":2,"message":"Move arrow function 'getAlertClasses' to the outer scope.","line":14,"column":91,"nodeType":"ArrowFunctionExpression","messageId":"consistent-function-scoping","endLine":14,"endColumn":93}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { type SystemAlert } from './StatusHelpers';\n\ninterface SystemAlertItemProps {\n  readonly alert: SystemAlert;\n  readonly onAcknowledgeAlert: (id: string) => void;\n}\n\nexport function SystemAlertItem({ alert, onAcknowledgeAlert }: Readonly<SystemAlertItemProps>) {\n  const getAlertClasses = (type: 'warning' | 'error' | 'critical', acknowledged: boolean) => {\n    if (acknowledged) {\n      return 'border-gray-300 bg-gray-50 text-gray-500';\n    }\n    switch (type) {\n      case 'warning': {\n        return 'border-yellow-500 bg-yellow-50 text-yellow-800';\n      }\n      case 'error': {\n        return 'border-red-500 bg-red-50 text-red-800';\n      }\n      case 'critical': {\n        return 'border-red-700 bg-red-100 text-red-900 font-bold';\n      }\n      default: {\n        return 'border-gray-300 bg-gray-50 text-gray-800';\n      }\n    }\n  };\n\n  return (\n    <div className={`p-2 rounded border-l-4 ${getAlertClasses(alert.type, alert.acknowledged)}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={alert.type === 'critical' ? 'destructive' : 'secondary'}>\n            {alert.type}\n          </Badge>\n          <span className=\"text-sm\">{alert.message}</span>\n        </div>\n        {alert.acknowledged !== true && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onAcknowledgeAlert(alert.id)}\n          >\n            Acknowledge\n          </Button>\n        )}\n      </div>\n      <p className=\"text-xs text-gray-500 mt-1\">\n        {new Date(alert.timestamp).toLocaleString()}\n      </p>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/SystemAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/SystemMetricsGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":47,"nodeType":"Identifier","messageId":"unsafeCall","endLine":17,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":24,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":24,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":30,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":30,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { type StatusMetric } from './useSystemMetrics'; // Import StatusMetric type\nimport { getStatusColor, getStatusIcon, getTrendIcon } from './status-helpers'; // Import helper functions\n\ninterface SystemMetricsGridProps {\n  readonly metrics: StatusMetric[];\n}\n\nexport function SystemMetricsGrid({ metrics }: SystemMetricsGridProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {metrics.map((metric, index) => (\n        <div\n          key={index}\n          className={`p-3 rounded-lg border ${getStatusColor(metric.status)}`}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center gap-2\">\n              {metric.icon}\n              <span className=\"text-sm font-medium\">{metric.label}</span>\n            </div>\n            {getStatusIcon(metric.status)}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-lg font-bold\">\n              {metric.value}{metric.unit}\n            </span>\n            {getTrendIcon(metric.trend)}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/useSystemAlertsLogic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/realtime/useSystemMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/users/UserTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/home/AppHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/home/LoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/home/MainContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/home/MapSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import React from 'react';\nimport dynamic from 'next/dynamic';\nimport { FoodTruck } from '@/lib/types/foodTruck';\n\nconst MapDisplay = dynamic(() => import('@/components/MapDisplay'), {\n  ssr: false,\n  loading: () => (\n    <div className=\"h-96 flex items-center justify-center bg-gray-100 dark:bg-slate-800 rounded-lg\">\n      <p>Loading map...</p>\n    </div>\n  ),\n});\n\n// Helper function to get selected truck location\nfunction getSelectedTruckLocation(\n  selectedTruckId: string | undefined,\n  filteredTrucks: FoodTruck[]\n): [number, number] | undefined {\n  if (selectedTruckId == undefined) return undefined;\n\n  const truck = filteredTrucks.find((t) => t.id === selectedTruckId);\n  return (truck?.current_location?.lat == undefined) || (truck?.current_location?.lng == undefined)\n    ? undefined\n    : [truck.current_location.lat, truck.current_location.lng];\n}\n\ninterface MapSectionProps {\n  readonly filteredTrucks: FoodTruck[];\n  readonly userLocation: { lat: number; lng: number } | undefined;\n  readonly selectedTruckId: string | undefined;\n  readonly setSelectedTruckId: (id: string | undefined) => void;\n}\n\nexport function MapSection({\n  filteredTrucks,\n  userLocation,\n  selectedTruckId,\n  setSelectedTruckId\n}: Readonly<MapSectionProps>) { // Added readonly\n  return (\n    <div\n      key=\"map-container-parent\"\n      className=\"lg:col-span-2 h-80 min-h-[320px] sm:h-96 sm:min-h-[400px] dark:bg-slate-800 rounded-lg shadow\"\n    >\n      <MapDisplay\n        trucks={filteredTrucks}\n        userLocation={userLocation}\n        onSelectTruck={setSelectedTruckId}\n        defaultCenter={\n          userLocation ? [userLocation.lat, userLocation.lng] : [37.7749, -122.4194]\n        }\n        selectedTruckLocation={getSelectedTruckLocation(selectedTruckId, filteredTrucks)}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/home/TruckAccordionContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/home/TruckListHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/home/TruckListSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/login/EmailFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/map/MapContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/map/MapLoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/map/MapViewUpdater.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/map/TruckMarkers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/map/UserLocationMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/map/mapHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/monitoring/ApiMonitoringDashboard.tsx","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":41,"column":37,"nodeType":"Literal","messageId":"error","endLine":41,"endColumn":41,"suggestions":[{"messageId":"replace","fix":{"range":[1539,1543],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\n\ninterface APIUsageData {\n  success: boolean;\n  data: Record<string, unknown>; // Changed from any to Record<string, unknown>\n  timestamp: string;\n}\n\nexport function ApiMonitoringDashboard() {\n  const [usage, setUsage] = useState<APIUsageData | undefined>(); // Changed null to undefined\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | undefined>(); // Changed null to undefined\n\n  useEffect(() => {\n    async function fetchUsage() {\n      setLoading(true);\n      setError(undefined); // Changed null to undefined\n      try {\n        const res = await fetch('/api/monitoring/api-usage');\n        if (!res.ok) throw new Error('Failed to fetch API usage');\n        const data = (await res.json()) as APIUsageData;\n        setUsage(data);\n      } catch (error_: unknown) {\n        const errorMessage = error_ instanceof Error ? error_.message : String(error_);\n        setError(errorMessage);\n      } finally {\n        setLoading(false);\n      }\n    }\n    void fetchUsage();\n  }, []);\n\n  if (loading) return <div>Loading API usage...</div>;\n  if (error !== undefined) return <div className=\"text-red-600\">Error: {error}</div>;\n  if (usage === undefined) return <div>No data available.</div>;\n\n  return (\n    <div className=\"mt-4 p-4 border rounded bg-muted\">\n      <h2 className=\"text-lg font-semibold mb-2\">API Usage Monitoring</h2>\n      <pre className=\"text-xs bg-background p-2 rounded overflow-x-auto\">\n        {JSON.stringify(usage.data, null, 2)}\n      </pre>\n      <div className=\"text-xs text-muted-foreground mt-2\">Last updated: {usage.timestamp}</div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/monitoring/FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/monitoring/FeatureList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/monitoring/FeatureOverviewCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/monitoring/FeatureOverviewContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/monitoring/MonitoringFeaturesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/monitoring/MonitoringFeaturesContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/monitoring/MonitoringPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/monitoring/TechnicalDetailsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/search/AdvancedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/search/CuisineTypesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/search/DistanceSliderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/search/FilterToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/search/MainSearchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/search/QuickFiltersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/search/SearchFilterContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/search/SearchInputWithIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/test-pipeline/ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/test-pipeline/StageResultCard.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'StageResultCard' has too many lines (83). Maximum allowed is 50.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":93,"endColumn":2},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":60,"column":44,"nodeType":"Literal","messageId":"error","endLine":60,"endColumn":48,"suggestions":[{"messageId":"replace","fix":{"range":[1960,1964],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":68,"column":52,"nodeType":"Literal","messageId":"error","endLine":68,"endColumn":56,"suggestions":[{"messageId":"replace","fix":{"range":[2315,2319],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":86,"column":48,"nodeType":"Literal","messageId":"error","endLine":86,"endColumn":52,"suggestions":[{"messageId":"replace","fix":{"range":[2945,2949],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { StageResult } from '@/lib/types';\n\ninterface StageResultCardProps {\n  readonly stageName: string;\n  readonly result?: StageResult;\n}\n\nexport function StageResultCard({ stageName, result }: Readonly<StageResultCardProps>) {\n  if (!result) return;\n\n  return (\n    <Card className=\"border-red-500\">\n      <CardHeader>\n        <CardTitle>{stageName}</CardTitle>\n        <CardDescription>\n          Status:{' '}\n          <span className={result.status === 'Success' ? 'text-green-500' : 'text-red-500'}>\n            {result.status}\n          </span>\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {result.error !== undefined && (\n          <p className=\"text-red-500\">\n            <strong>Error:</strong> {result.error}\n          </p>\n        )}\n        {result.details !== undefined && (\n          <p>\n            <strong>Details:</strong> {result.details}\n          </p>\n        )}\n        {result.prompt !== undefined && (\n          <div>\n            <strong>Prompt:</strong>\n            <Textarea\n              readOnly\n              value={result.prompt}\n              className=\"mt-1 h-32 bg-gray-50 dark:bg-slate-700\"\n            />\n          </div>\n        )}\n        {result.rawContent !== undefined && (\n          <div>\n            <strong>Raw Content (Firecrawl):</strong>\n            <Textarea\n              readOnly\n              value={result.rawContent}\n              className=\"mt-1 h-48 bg-gray-50 dark:bg-slate-700\"\n            />\n          </div>\n        )}\n        {result.data !== undefined && (\n          <div className=\"mt-2\">\n            <strong>Data Output:</strong>{' '}\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\n              {JSON.stringify(result.data, null, 2)}\n            </pre>\n          </div>\n        )}\n        {result.preparedData !== undefined && (\n          <div className=\"mt-2\">\n            <strong>Data Prepared for Supabase:</strong>{' '}\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\n              {JSON.stringify(result.preparedData, null, 2)}\n            </pre>\n          </div>\n        )}\n        {result.recordId !== undefined && (\n          <p>\n            <strong>Supabase Record id:</strong> {result.recordId}\n          </p>\n        )}\n        {result.tokensUsed !== undefined && (\n          <p>\n            <strong>Gemini Tokens Used:</strong> {result.tokensUsed}\n          </p>\n        )}\n        {result.metadata !== undefined && (\n          <div>\n            <strong>Metadata (Firecrawl):</strong>{' '}\n            <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\n              {JSON.stringify(result.metadata, null, 2)}\n            </pre>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/test-pipeline/TestPipelineForm.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'TestPipelineForm' has too many lines (73). Maximum allowed is 50.","line":23,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":95,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { FormEvent } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\n\ninterface TestPipelineFormProps {\n  readonly url: string;\n  readonly setUrl: (url: string) => void;\n  readonly rawText: string;\n  readonly setRawText: (text: string) => void;\n  readonly useRawText: boolean;\n  readonly setUseRawText: (use: boolean) => void;\n  readonly isDryRun: boolean;\n  readonly setIsDryRun: (isDry: boolean) => void;\n  readonly isLoading: boolean;\n  readonly onSubmit: (event: FormEvent<HTMLFormElement>) => void;\n}\n\nexport function TestPipelineForm({\n  url, setUrl, rawText, setRawText, useRawText, setUseRawText,\n  isDryRun, setIsDryRun, isLoading, onSubmit\n}: Readonly<TestPipelineFormProps>) {\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle>Test Data Pipeline</CardTitle>\n        <CardDescription>\n          Use this page to test the data scraping and processing pipeline with a specific url or\n          raw text.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form\n          onSubmit={(e) => {\n            onSubmit(e);\n          }}\n          className=\"space-y-6\"\n        >\n          <div>\n            <Label htmlFor=\"url-input\">url to Scrape</Label>\n            <Input\n              id=\"url-input\"\n              type=\"url\"\n              placeholder=\"https://example.com\"\n              value={url}\n              onChange={(e) => setUrl(e.target.value)}\n              disabled={useRawText || isLoading}\n              className=\"mt-1\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"use-raw-text-checkbox\"\n              checked={useRawText}\n              onCheckedChange={(checked: boolean) => setUseRawText(Boolean(checked))}\n              disabled={isLoading}\n            />\n            <Label htmlFor=\"use-raw-text-checkbox\">Use Raw Text Input Instead</Label>\n          </div>\n\n          <div>\n            <Label htmlFor=\"raw-text-input\">Raw Text (Markdown/html)</Label>\n            <Textarea\n              id=\"raw-text-input\"\n              placeholder=\"Paste Markdown or html content here...\"\n              value={rawText}\n              onChange={(e) => setRawText(e.target.value)}\n              disabled={!useRawText || isLoading}\n              className=\"mt-1 h-40\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"dry-run-checkbox\"\n              checked={isDryRun}\n              onCheckedChange={(checked: boolean) => setIsDryRun(Boolean(checked))}\n              disabled={isLoading}\n            />\n            <Label htmlFor=\"dry-run-checkbox\">Dry Run (Do not save to Supabase)</Label>\n          </div>\n\n          <Button type=\"submit\" disabled={isLoading || (useRawText ? !rawText : !url)}>\n            {isLoading ? 'Testing...' : 'Run Test'}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/test-pipeline/TestPipelineSubmitHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/test-pipeline/TestResultsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/ContactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/OperatingHoursSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/SocialMediaSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckAccordionItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedTruckId' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion';\nimport { Badge } from '@/components/ui/badge';\nimport { TruckCard } from '@/components/TruckCard';\nimport { FoodTruck } from '@/lib/types/foodTruck';\n\ninterface TruckAccordionItemProps {\n  readonly truck: FoodTruck;\n  readonly selectedTruckId: string | undefined;\n  readonly setSelectedTruckId: (id: string | undefined) => void;\n  readonly isOpen: (truck: FoodTruck) => boolean;\n  readonly userLocation: { lat: number; lng: number } | undefined;\n}\n\nexport function TruckAccordionItem({\n  truck,\n  selectedTruckId,\n  setSelectedTruckId,\n  isOpen,\n  userLocation,\n}: TruckAccordionItemProps) {\n  return (\n    <AccordionItem value={truck.id} key={truck.id}>\n      <AccordionTrigger className=\"flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-slate-700 rounded-md\">\n        <div className=\"flex-1 text-left\">\n          <h4 className=\"font-medium dark:text-gray-100\">{truck.name}</h4>\n          {truck.current_location?.address && (\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-1\">\n              {truck.current_location.address}\n            </p>\n          )}\n        </div>\n        <Badge variant={isOpen(truck) ? 'default' : 'secondary'}>\n          {isOpen(truck) ? 'Open' : 'Closed'}\n        </Badge>\n      </AccordionTrigger>\n      <AccordionContent>\n        <TruckCard\n          truck={truck}\n          isOpen={isOpen(truck)}\n          onSelectTruck={() => setSelectedTruckId(truck.id)}\n          userLocation={userLocation}\n          hideHeader={true}\n        />\n      </AccordionContent>\n    </AccordionItem>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckBasicInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckCardContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatPrice' is defined but never used.","line":9,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":34},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'formatPrice'.","line":9,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":9,"endColumn":34,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[414,427],"text":""},"desc":"Remove this variable import"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { FoodTruck } from '@/lib/types/foodTruck';\nimport { RatingSection } from './RatingSection';\nimport { MenuSection } from './MenuSection';\nimport { ContactSection } from './ContactSection';\nimport { SocialMediaSection } from './SocialMediaSection';\nimport { OperatingHoursSection } from './OperatingHoursSection';\nimport { formatHours, formatPrice } from '@/lib/utils/foodTruckHelpers';\n\ninterface TruckCardContentProps {\n  readonly truck: FoodTruck;\n  readonly todayHours?: { open: string; close: string; closed: boolean };\n  readonly popularItems: { name: string; price: number }[];\n}\n\nexport function TruckCardContent({\n  truck,\n  todayHours,\n  popularItems,\n}: TruckCardContentProps) {\n  return (\n    <>\n      {truck.description && (\n        <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">{truck.description}</p>\n      )}\n      <div className=\"space-y-4\">\n        {/* Ratings & Hours Row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <RatingSection averageRating={truck.average_rating} reviewCount={truck.review_count} />\n          <OperatingHoursSection todayHours={todayHours} formatHours={formatHours} />\n        </div>\n\n        {/* Menu & Contact Row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <MenuSection popularItems={popularItems} />\n          <ContactSection contactInfo={truck.contact_info} verificationStatus={truck.verification_status} />\n        </div>\n\n        <SocialMediaSection socialMedia={truck.social_media} />\n      </div>\n      {truck.verification_status && (\n        <div className=\"mt-2\">\n          <Badge variant={truck.verification_status === 'verified' ? 'default' : 'secondary'}>\n            <span className=\"capitalize\">{truck.verification_status}</span>\n          </Badge>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckCardFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckCardHeader.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":35,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":35,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1324,1335],"text":"item.price == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1325,1335],"text":"(item.price ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1324,1335],"text":"!Boolean(item.price)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":35,"column":57,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":35,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1340,1350],"text":"(priceRange != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1340,1350],"text":"(priceRange ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1340,1350],"text":"(Boolean(priceRange))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import React from 'react';\nimport { CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { MapPin } from 'lucide-react';\nimport { FoodTruck } from '@/lib/types/foodTruck';\n\ninterface TruckCardHeaderProps {\n  readonly truck: FoodTruck;\n  readonly isOpen: boolean;\n  readonly popularItems: Array<{ name: string; price?: number }>;\n  readonly priceRange: string | undefined;\n}\n\nexport function TruckCardHeader({\n  truck,\n  isOpen,\n  popularItems,\n  priceRange\n}: TruckCardHeaderProps) {\n  return (\n    <CardHeader>\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex-1\">\n          <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\n          {(truck.current_location?.address != undefined) && (\n            <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\n              <MapPin className=\"h-4 w-4 mr-1\" />\n              {truck.current_location.address}\n            </CardDescription>\n          )}\n        </div>\n        <div className=\"flex flex-col items-end space-y-1\">\n          <Badge variant={isOpen ? 'default' : 'secondary'}>{isOpen ? 'Open' : 'Closed'}</Badge>\n          {/* Show price range fallback if no explicit prices */}\n          {popularItems.every((item) => !item.price) && priceRange && (\n            <Badge variant=\"outline\" className=\"mt-1\">\n              {priceRange}\n            </Badge>\n          )}\n        </div>\n      </div>\n    </CardHeader>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckContactInfo.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":23,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":22,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[383,518],"text":"Readonly<{\n  icon: React.ComponentType<{ className?: string }>;\n  label: string;\n  value?: string;\n  href?: string;\n  unavailableText: string;\n}>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":37,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":37,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[969,973],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[969,973],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[969,973],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":54,"column":27,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":54,"endColumn":84,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[1541,1581],"text":"Readonly<{ socialMedia?: Record<string, string> }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":106,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":106,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3401,3426],"text":"((truck.contact_info?.phone) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3401,3426],"text":"((truck.contact_info?.phone) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3401,3426],"text":"(Boolean((truck.contact_info?.phone)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":114,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":114,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3670,3695],"text":"((truck.contact_info?.email) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3670,3695],"text":"((truck.contact_info?.email) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3670,3695],"text":"(Boolean((truck.contact_info?.email)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Phone, Mail, Globe } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckContactInfoProps {\n  readonly truck: FoodTruck;\n}\n\nfunction ContactField({ \n  icon: Icon, \n  label, \n  value, \n  href, \n  unavailableText \n}: {\n  icon: React.ComponentType<{ className?: string }>;\n  label: string;\n  value?: string;\n  href?: string;\n  unavailableText: string;\n}) {\n  if (value == undefined) {\n    return (\n      <div className=\"flex items-center gap-3 text-gray-400\">\n        <Icon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{unavailableText}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <Icon className=\"h-4 w-4 text-gray-500\" />\n      <div>\n        <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{label}</label>\n        {href ? (\n          <a \n            href={href}\n            target={href.startsWith('http') ? '_blank' : undefined}\n            rel={href.startsWith('http') ? 'noopener noreferrer' : undefined}\n            className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline\"\n          >\n            {href.startsWith('http') ? 'Visit Website' : value}\n          </a>\n        ) : (\n          <p className=\"text-gray-900 dark:text-gray-200\">{value}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction SocialMediaLinks({ socialMedia }: { socialMedia?: Record<string, string> }) {\n  if (!socialMedia || Object.keys(socialMedia).length === 0) {\n    \n  }\n\n  const socialPlatforms = [\n    { key: 'instagram', name: 'Instagram', baseUrl: 'https://instagram.com/', color: 'pink' },\n    { key: 'facebook', name: 'Facebook', baseUrl: 'https://facebook.com/', color: 'blue' },\n    { key: 'twitter', name: 'Twitter', baseUrl: 'https://twitter.com/', color: 'sky' },\n  ];\n\n  return (\n    <div>\n      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Social Media</label>\n      <div className=\"flex flex-wrap gap-2 mt-2\">\n        {socialPlatforms.map(({ key, name, baseUrl, color }) => {\n          const handle = socialMedia[key];\n          if (handle == undefined) return;\n\n          return (\n            <a\n              key={key}\n              href={`${baseUrl}${handle}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={`flex items-center gap-1 px-2 py-1 bg-${color}-100 text-${color}-800 rounded-md text-sm hover:bg-${color}-200 dark:bg-${color}-900 dark:text-${color}-200`}\n            >\n              <Globe className=\"h-3 w-3\" />\n              {name}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function TruckContactInfo({ truck }: TruckContactInfoProps) {\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Phone className=\"h-5 w-5\" />\n          Contact Information\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Get in touch</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <ContactField\n          icon={Phone}\n          label=\"Phone\"\n          value={truck.contact_info?.phone}\n          href={truck.contact_info?.phone ? `tel:${truck.contact_info.phone}` : undefined}\n          unavailableText=\"No phone number available\"\n        />\n\n        <ContactField\n          icon={Mail}\n          label=\"Email\"\n          value={truck.contact_info?.email}\n          href={truck.contact_info?.email ? `mailto:${truck.contact_info.email}` : undefined}\n          unavailableText=\"No email available\"\n        />\n\n        <ContactField\n          icon={Globe}\n          label=\"Website\"\n          value={truck.contact_info?.website}\n          href={truck.contact_info?.website}\n          unavailableText=\"No website available\"\n        />\n\n        <SocialMediaLinks socialMedia={truck.social_media} />\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckLocationInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckOperatingHours.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":16,"column":22,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":16,"endColumn":74,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[399,433],"text":"Readonly<{ day: string; dayData?: DayData }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":43,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":43,"endColumn":27,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1523,1540],"text":"(hasOperatingHours ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1523,1540],"text":"(hasOperatingHours === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckOperatingHoursProps {\n  readonly truck: FoodTruck;\n}\n\ninterface DayData {\n  closed?: boolean;\n  open?: string;\n  close?: string;\n}\n\nfunction DaySchedule({ day, dayData }: { day: string; dayData?: DayData }) {\n  const dayName = day.charAt(0).toUpperCase() + day.slice(1);\n  \n  return (\n    <div className=\"flex justify-between items-center\">\n      <span className=\"text-sm font-medium dark:text-gray-200\">{dayName}</span>\n      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n        {dayData?.closed === true ? 'Closed' : `${dayData?.open ?? 'N/A'} - ${dayData?.close ?? 'N/A'}`}\n      </span>\n    </div>\n  );\n}\n\nexport function TruckOperatingHours({ truck }: TruckOperatingHoursProps) {\n  const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n  const hasOperatingHours = truck.operating_hours && Object.keys(truck.operating_hours).length > 0;\n\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Clock className=\"h-5 w-5\" />\n          Operating Hours\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Daily schedule</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {hasOperatingHours ? (\n          <div className=\"space-y-2\">\n            {daysOfWeek.map((day) => {\n              const dayData = truck.operating_hours?.[day as keyof typeof truck.operating_hours] as DayData | undefined;\n              return (\n                <DaySchedule key={day} day={day} dayData={dayData} />\n              );\n            })}\n          </div>\n        ) : (\n          <p className=\"text-gray-400 text-sm\">Operating hours not available</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckRatingsReviews.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":21,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":51,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[355,373],"text":"Readonly<{ rating: number }>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Star, Users } from 'lucide-react';\nimport type { FoodTruckWithRatings } from '@/hooks/useFoodTruckDetails';\n\ninterface TruckRatingsReviewsProps {\n  readonly truck: FoodTruckWithRatings;\n}\n\nfunction StarRating({ rating }: { rating: number }) {\n  return (\n    <div className=\"flex\">\n      {[1, 2, 3, 4, 5].map((star) => (\n        <Star\n          key={star}\n          className={`h-6 w-6 ${\n            star <= Math.round(rating)\n              ? 'text-yellow-400 fill-current'\n              : 'text-gray-300'\n          }`}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport function TruckRatingsReviews({ truck }: TruckRatingsReviewsProps) {\n  if (truck.average_rating == undefined) {\n    \n  }\n\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Star className=\"h-5 w-5\" />\n          Ratings & Reviews\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Customer feedback</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <StarRating rating={truck.average_rating} />\n            <span className=\"text-xl font-semibold dark:text-gray-100\">\n              {truck.average_rating.toFixed(1)}\n            </span>\n          </div>\n          {truck.review_count != undefined && (\n            <div className=\"flex items-center gap-1 text-gray-600 dark:text-gray-400\">\n              <Users className=\"h-4 w-4\" />\n              <span className=\"text-sm\">{truck.review_count} reviews</span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/NavigationMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/ToggleGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/UseToast.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":65,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":119,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// Inspired by react-hot-toast library\nimport * as React from 'react';\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1_000_000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype Action =\n  | {\n      type: 'ADD_TOAST';\n      toast: ToasterToast;\n    }\n  | {\n      type: 'UPDATE_TOAST';\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: 'DISMISS_TOAST';\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: 'REMOVE_TOAST';\n      toastId?: ToasterToast['id'];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST': {\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n    }\n\n    case 'UPDATE_TOAST': {\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      };\n    }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId != undefined && toastId !== '') {\n        addToRemoveQueue(toastId);\n      } else {\n        for (const toast of state.toasts) {\n          addToRemoveQueue(toast.id);\n        }\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case 'REMOVE_TOAST': {\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n    }\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  for (const listener of listeners) {\n    listener(memoryState);\n  }\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open: boolean) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index !== -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, []);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":15,"column":9,"nodeType":null,"messageId":"deprecation","endLine":15,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/carousel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (91). Maximum allowed is 50.","line":48,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":138,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\n// @ts-expect-error TS(2792): Cannot find module 'embla-carousel-react'. Did you... Remove this comment to see the full error message\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: 'horizontal' | 'vertical';\n  setApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | undefined>(undefined);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />');\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(({ orientation = 'horizontal', opts, setApi, plugins, className, children, ...props }, ref) => {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      // @ts-expect-error TS(2698): Spread types may only be created from object types... Remove this comment to see the full error message\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins,\n  );\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n  const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      \n    }\n\n    setCanScrollPrev(api.canScrollPrev());\n    setCanScrollNext(api.canScrollNext());\n  }, []);\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev();\n  }, [api]);\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext();\n  }, [api]);\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault();\n        scrollPrev();\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault();\n        scrollNext();\n      }\n    },\n    [scrollPrev, scrollNext],\n  );\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      \n    }\n\n    setApi(api);\n  }, [api, setApi]);\n\n  React.useEffect(() => {\n    if (!api) {\n      \n    }\n\n    onSelect(api);\n    api.on('reInit', onSelect);\n    api.on('select', onSelect);\n\n    return () => {\n      api?.off('select', onSelect);\n    };\n  }, [api, onSelect]);\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        // @ts-expect-error TS(2571): Object is of type 'unknown'.\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        ref={ref}\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n});\nCarousel.displayName = 'Carousel';\n\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { carouselRef, orientation } = useCarousel();\n\n    return (\n      <div ref={carouselRef} className=\"overflow-hidden\">\n        <div\n          ref={ref}\n          className={cn(\n            'flex',\n            orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n            className,\n          )}\n          {...props}\n        />\n      </div>\n    );\n  },\n);\nCarouselContent.displayName = 'CarouselContent';\n\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel();\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        aria-roledescription=\"slide\"\n        className={cn(\n          'min-w-0 shrink-0 grow-0 basis-full',\n          orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nCarouselItem.displayName = 'CarouselItem';\n\nconst CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  // @ts-expect-error TS(2339): Property 'variant' does not exist on type 'Omit<Bu... Remove this comment to see the full error message\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; defaultChecked?: bool... Remove this comment to see the full error message\n        variant={variant}\n        size={size}\n        className={cn(\n          'absolute  h-8 w-8 rounded-full',\n          orientation === 'horizontal'\n            ? '-left-12 top-1/2 -translate-y-1/2'\n            : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n          className,\n        )}\n        disabled={!canScrollPrev}\n        onClick={scrollPrev}\n        {...props}\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Previous slide</span>\n      </Button>\n    );\n  },\n);\nCarouselPrevious.displayName = 'CarouselPrevious';\n\nconst CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  // @ts-expect-error TS(2339): Property 'variant' does not exist on type 'Omit<Bu... Remove this comment to see the full error message\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; defaultChecked?: bool... Remove this comment to see the full error message\n        variant={variant}\n        size={size}\n        className={cn(\n          'absolute h-8 w-8 rounded-full',\n          orientation === 'horizontal'\n            ? '-right-12 top-1/2 -translate-y-1/2'\n            : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n          className,\n        )}\n        disabled={!canScrollNext}\n        onClick={scrollNext}\n        {...props}\n      >\n        <ArrowRight className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Next slide</span>\n      </Button>\n    );\n  },\n);\nCarouselNext.displayName = 'CarouselNext';\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/chart.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (101). Maximum allowed is 50.","line":116,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":216,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":151,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":151,"endColumn":16,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[4520,4526],"text":"(active ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[4519,4526],"text":"(active === false)"},"desc":"Change condition to check if false (`value === false`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":151,"column":21,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":151,"endColumn":32},{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":202,"column":44,"nodeType":"TSFunctionType","messageId":"exceed","endLine":202,"endColumn":44},{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":229,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":283,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":236,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":236,"endColumn":19}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport * as RechartsPrimitive from 'recharts';\nimport {\n  NameType,\n  Payload,\n  ValueType,\n} from 'recharts/types/component/DefaultTooltipContent';\n\nimport { cn } from '@/lib/utils';\nimport { useTooltipLabel } from './chart/useTooltipLabel';\nimport { TooltipIndicator } from './chart/TooltipIndicator';\nimport { TooltipItemContent } from './chart/TooltipItemContent';\nimport { getPayloadConfigFromPayload } from './chart/getPayloadConfigFromPayload';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | undefined>(undefined);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (context === undefined) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    readonly config: ChartConfig;\n    readonly children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id ?? uniqueId.replaceAll(':', '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = 'Chart';\n\nconst ChartStyle = ({ id, config }: { readonly id: string; readonly config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([_, itemConfig]) => (itemConfig.theme ?? itemConfig.color) !== undefined);\n  if (colorConfig.length === 0) {\n    return;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ?? itemConfig.color;\n    return color !== undefined && color !== '' ? `  --color-${key}: ${color};` : undefined;\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<'div'> & {\n      readonly hideLabel?: boolean;\n      readonly hideIndicator?: boolean;\n      readonly indicator?: 'line' | 'dot' | 'dashed';\n      readonly nameKey?: string;\n      readonly labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = 'dot',\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    // Ensure payload is properly typed\n    const safePayload: Payload<ValueType, NameType>[] = Array.isArray(payload)\n      ? (payload)\n      : [];\n\n    const tooltipLabel = useTooltipLabel({\n      hideLabel,\n      payload: safePayload,\n      label,\n      labelFormatter,\n      labelClassName,\n      config,\n      labelKey\n    });\n\n    if (!active || !safePayload || safePayload.length === 0) {\n      return;\n    }\n\n    const nestLabel = safePayload.length === 1 && indicator !== 'dot';\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\n          className,\n        )}\n      >\n        {nestLabel ? undefined : tooltipLabel}\n        <div className=\"grid gap-1.5\">\n          {safePayload.map((item, index) => {\n            // Add explicit type for itemData\n            const dataKey = typeof item.dataKey === 'string' ? item.dataKey : undefined;\n            const itemData: { name?: string; dataKey?: string; payload?: Record<string, unknown>; color?: string; value?: number } = {\n              name: item.name === undefined ? undefined : String(item.name),\n              dataKey,\n              payload: typeof item.payload === 'object' && item.payload !== null ? (item.payload as Record<string, unknown>) : undefined,\n              color: typeof item.color === 'string' ? item.color : undefined,\n              value: typeof item.value === 'number' ? item.value : undefined,\n            };\n            const key = nameKey ?? itemData.name ?? itemData.dataKey ?? 'value';\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor =\n              color ??\n              (itemData.payload && typeof itemData.payload === 'object' && 'fill' in itemData.payload\n                ? String(itemData.payload.fill)\n                : undefined) ??\n              itemData.color;\n\n            return (\n              <div\n                key={itemData.dataKey ?? index}\n                className={cn(\n                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\n                  indicator === 'dot' && 'items-center',\n                )}\n              >\n                <TooltipIndicator\n                  indicator={indicator}\n                  hideIndicator={hideIndicator}\n                  indicatorColor={indicatorColor}\n                  nestLabel={nestLabel}\n                  itemConfig={itemConfig}\n                />\n                <TooltipItemContent\n                  formatter={formatter as ((value: number, name: string, item: unknown, index: number, payload: Record<string, unknown>[]) => React.ReactNode) | undefined}\n                  itemData={itemData}\n                  item={item}\n                  index={index}\n                  itemConfig={itemConfig}\n                  nestLabel={nestLabel}\n                  tooltipLabel={tooltipLabel}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = 'ChartTooltip';\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Legend> &\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\n  const { config } = useChart();\n\n  const safePayload: Payload<ValueType, NameType>[] = Array.isArray(payload)\n    ? (payload as Payload<ValueType, NameType>[])\n    : [];\n\n  if (!safePayload || safePayload.length === 0) {\n    return;\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className,\n      )}\n    >\n      {safePayload.map((item, idx) => {\n        const dataKey = typeof item.dataKey === 'string' ? item.dataKey : undefined;\n        const itemData: { dataKey?: string; value?: string; color?: string } = {\n          dataKey,\n          value: typeof item.value === 'string' ? item.value : undefined,\n          color: typeof item.color === 'string' ? item.color : undefined,\n        };\n        const keyValue = nameKey ?? (itemData.dataKey !== undefined && itemData.dataKey !== '' ? String(itemData.dataKey) : 'value');\n        const key = keyValue;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={itemData.value ?? idx}\n            className={cn(\n              'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground',\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: itemData.color !== undefined && itemData.color !== '' ? String(itemData.color) : undefined,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\nChartLegendContent.displayName = 'ChartLegend';\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/chart/QualityPieChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ [s: string]: unknown; } | ArrayLike<unknown>`.","line":37,"column":35,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":37,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';\nimport { QUALITY_COLORS } from '../dataQualityCharts';\nimport { CustomTooltip } from '../dataQualityCharts';\n\ninterface QualityPieChartProps {\n  readonly data: {\n    name: string;\n    value: number;\n    percentage: string;\n  }[];\n}\n\nexport function QualityPieChart({ data }: QualityPieChartProps) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <PieChart>\n        <Pie\n          data={data}\n          cx=\"50%\"\n          cy=\"50%\"\n          labelLine={false}\n          label={({\n            name,\n            percentage\n          }: {\n            name?: string;\n            percentage?: string;\n          }) => `${name ?? 'Unknown'}: ${percentage ?? '0'}%`}\n          outerRadius={80}\n          fill=\"#8884d8\"\n          dataKey=\"value\"\n        >\n          {data.map((entry, index) => (\n            <Cell \n              key={`cell-${index}`} \n              fill={Object.values(QUALITY_COLORS)[index]} \n            />\n          ))}\n        </Pie>\n        <Tooltip content={<CustomTooltip />} />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/chart/TooltipIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/chart/TooltipItemContent.tsx","messages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":5,"column":24,"nodeType":"TSFunctionType","messageId":"exceed","endLine":5,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface TooltipItemContentProps {\n  readonly formatter?: (value: number, name: string, item: unknown, index: number, payload: Record<string, unknown>[]) => React.ReactNode;\n  readonly itemData: { name?: string; dataKey?: string; payload?: unknown; color?: string; value?: number };\n  readonly item: unknown;\n  readonly index: number;\n  readonly itemConfig?: { label?: React.ReactNode };\n  readonly nestLabel: boolean;\n  readonly tooltipLabel: React.ReactNode;\n}\n\nexport function TooltipItemContent({\n  formatter,\n  itemData,\n  item,\n  index,\n  itemConfig,\n  nestLabel,\n  tooltipLabel\n}: TooltipItemContentProps) {\n  if (formatter !== undefined && itemData?.value !== undefined && itemData.name !== undefined && itemData.name !== '') {\n    const payloadArray = Array.isArray(itemData.payload)\n      ? (itemData.payload as Record<string, unknown>[])\n      : [];\n    return <>{formatter(itemData.value, itemData.name, item, index, payloadArray)}</>;\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex flex-1 justify-between leading-none',\n        nestLabel ? 'items-end' : 'items-center',\n      )}\n    >\n      <div className=\"grid gap-1.5\">\n        {nestLabel ? tooltipLabel : undefined}\n        <span className=\"text-muted-foreground\">\n          {itemConfig?.label ?? itemData.name}\n        </span>\n      </div>\n      {itemData.value !== undefined && itemData.value !== 0 && (\n        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n          {itemData.value.toLocaleString()}\n        </span>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/chart/getPayloadConfigFromPayload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/chart/useTooltipLabel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/dataQualityCharts.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (60). Maximum allowed is 50.","line":70,"column":80,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":129,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\n// SOTA color scheme for data quality categories\nconst QUALITY_COLORS = {\n  high: '#22c55e',    // Green for high quality (≥80%)\n  medium: '#f59e0b',  // Amber for medium quality (60-79%)\n  low: '#ef4444',     // Red for low quality (<60%)\n};\n\ninterface DataQualityStats {\n  total_trucks: number;\n  avg_quality_score: number;\n  high_quality_count: number;\n  medium_quality_count: number;\n  low_quality_count: number;\n  verified_count: number;\n  pending_count: number;\n  flagged_count: number;\n}\n\ninterface DataQualityChartsProps {\n  readonly qualityStats: DataQualityStats;\n}\n\n// Custom tooltip for better accessibility and UX\ninterface TooltipProps {\n  readonly active?: boolean;\n  readonly payload?: Array<{\n    value: number;\n    payload: {\n      percentage?: string;\n    };\n  }>;\n  readonly label?: string;\n}\n\nconst CustomTooltip = ({ active, payload, label }: TooltipProps) => {\n  if (active === true && payload != undefined && payload.length > 0) {\n    return (\n      <div\n        className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\"\n        role=\"status\"\n        aria-live=\"assertive\"\n      >\n        <p className=\"font-medium\">{`${label ?? 'Unknown'}: ${payload[0].value}`}</p>\n        <p className=\"text-sm text-gray-600\">\n          {payload[0].payload.percentage != undefined && payload[0].payload.percentage !== '' && `${payload[0].payload.percentage}% of total`}\n        </p>\n      </div>\n    );\n  }\n};\n\n// Quality Distribution Pie Chart Component\nconst QualityDistributionChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\n  const data = [\n    {\n      name: 'High Quality',\n      value: qualityStats.high_quality_count,\n      percentage: ((qualityStats.high_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Medium Quality',\n      value: qualityStats.medium_quality_count,\n      percentage: ((qualityStats.medium_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Low Quality',\n      value: qualityStats.low_quality_count,\n      percentage: ((qualityStats.low_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quality Distribution</CardTitle>\n        <CardDescription>\n          Breakdown of food trucks by data quality categories\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({\n                name,\n                percentage\n              }: {\n                name?: string;\n                percentage?: string;\n              }) => `${name ?? 'Unknown'}: ${percentage ?? '0'}%`}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {data.map((entry, index) => (\n                <Cell \n                  key={`cell-${index}`} \n                  fill={Object.values(QUALITY_COLORS)[index]} \n                />\n              ))}\n            </Pie>\n            <Tooltip content={<CustomTooltip />} />\n          </PieChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Verification Status Bar Chart Component\nconst VerificationStatusChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\n  const data = [\n    {\n      name: 'Verified',\n      count: qualityStats.verified_count,\n      percentage: ((qualityStats.verified_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Pending',\n      count: qualityStats.pending_count,\n      percentage: ((qualityStats.pending_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Flagged',\n      count: qualityStats.flagged_count,\n      percentage: ((qualityStats.flagged_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Verification Status</CardTitle>\n        <CardDescription>\n          Current verification status of all food trucks\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip content={<CustomTooltip />} />\n            <Bar dataKey=\"count\" fill=\"#3b82f6\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Helper function to get score color\nconst getScoreColor = (score: number): string => {\n  if (score >= 0.8) return 'text-green-600';\n  if (score >= 0.6) return 'text-yellow-600';\n  return 'text-red-600';\n};\n\n// Helper function to get quality threshold label\nconst getQualityThreshold = (score: number): string => {\n  if (score >= 0.8) return 'High';\n  if (score >= 0.6) return 'Medium';\n  return 'Low';\n};\n\n// Quality Score Overview Component\nconst QualityScoreOverview: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\n  const averageScore = (qualityStats.avg_quality_score * 100).toFixed(1);\n  const scoreColor = getScoreColor(qualityStats.avg_quality_score);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Overall Quality Score</CardTitle>\n        <CardDescription>\n          Average data quality score across all food trucks\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className={`text-6xl font-bold ${scoreColor}`}>\n            {averageScore}%\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Based on {qualityStats.total_trucks} food trucks\n          </p>\n          <div className=\"mt-4 text-sm\">\n            <div className=\"flex justify-between items-center\">\n              <span>Quality Threshold:</span>\n              <span className=\"font-medium\">\n                {getQualityThreshold(qualityStats.avg_quality_score)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main Data Quality Charts Component\nexport const DataQualityCharts: React.FC<DataQualityChartsProps> = ({ qualityStats }) => {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      <QualityScoreOverview qualityStats={qualityStats} />\n      <QualityDistributionChart qualityStats={qualityStats} />\n      <VerificationStatusChart qualityStats={qualityStats} />\n    </div>\n  );\n};\n\nexport default DataQualityCharts;\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/sheet.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VariantProps' is defined but never used.","line":7,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":32},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'VariantProps'.","line":7,"column":20,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":7,"endColumn":32,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[385,404],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":55,"column":26,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":55,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[2214,2216],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[2214,2216],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":63,"column":39,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ClassValue`.","line":63,"column":48,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":63,"endColumn":57}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\n// @ts-expect-error TS(2792): Cannot find module '@radix-ui/react-dialog'. Did y... Remove this comment to see the full error message\nimport * as SheetPrimitive from '@radix-ui/react-dialog';\n// @ts-expect-error TS(2792): Cannot find module 'class-variance-authority'. Did... Remove this comment to see the full error message\nimport { cva, type VariantProps } from 'class-variance-authority';\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\nimport { X } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\n\nconst Sheet = SheetPrimitive.Root;\n\nconst SheetTrigger = SheetPrimitive.Trigger;\n\nconst SheetClose = SheetPrimitive.Close;\n\nconst SheetPortal = SheetPrimitive.Portal;\n\nconst SheetOverlay = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\n\nconst sheetVariants = cva(\n  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\n  {\n    variants: {\n      side: {\n        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',\n        bottom:\n          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',\n        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',\n        right:\n          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',\n      },\n    },\n    defaultVariants: {\n      side: 'right',\n    },\n  },\n);\n\ntype SheetContentProps = {}\n\nconst SheetContent = React.forwardRef<HTMLDivElement, SheetContentProps>(\n  ({ side = 'right', className, children, ...props }, ref) => (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        ref={ref}\n        className={cn(sheetVariants({ side }), className)}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  ),\n);\nSheetContent.displayName = SheetPrimitive.Content.displayName;\n\nconst SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />\n);\nSheetHeader.displayName = 'SheetHeader';\n\nconst SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\n    {...props}\n  />\n);\nSheetFooter.displayName = 'SheetFooter';\n\nconst SheetTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold text-foreground', className)}\n    {...props}\n  />\n));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\n\nconst SheetDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/sidebar.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (96). Maximum allowed is 50.","line":57,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":152,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (92). Maximum allowed is 50.","line":164,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":255,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\n// @ts-expect-error TS(2792): Cannot find module '@radix-ui/react-slot'. Did you... Remove this comment to see the full error message\nimport { Slot } from '@radix-ui/react-slot';\n// @ts-expect-error TS(2792): Cannot find module 'class-variance-authority'. Did... Remove this comment to see the full error message\nimport { VariantProps, cva } from 'class-variance-authority';\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\nimport { PanelLeft } from 'lucide-react';\n\nimport { useIsMobile } from '@/hooks/UseMobile';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\nimport { Sheet, SheetContent } from '@/components/ui/sheet';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport Cookies from 'js-cookie';\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar:state';\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = '16rem';\nconst SIDEBAR_WIDTH_MOBILE = '18rem';\nconst SIDEBAR_WIDTH_ICON = '3rem';\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b';\n\ntype SidebarContext = {\n  state: 'expanded' | 'collapsed';\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | undefined>(undefined);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error('useSidebar must be used within a SidebarProvider.');\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === 'function' ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        Cookies.set(SIDEBAR_COOKIE_NAME, String(openState), {\n          path: '/',\n          expires: SIDEBAR_COOKIE_MAX_AGE / (60 * 60 * 24), // Convert seconds to days\n        });\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      globalThis.addEventListener('keydown', handleKeyDown);\n      return () => globalThis.removeEventListener('keydown', handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? 'expanded' : 'collapsed';\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                '--sidebar-width': SIDEBAR_WIDTH,\n                '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              'group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar',\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = 'SidebarProvider';\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    side?: 'left' | 'right';\n    variant?: 'sidebar' | 'floating' | 'inset';\n    collapsible?: 'offcanvas' | 'icon' | 'none';\n  }\n>(\n  (\n    {\n      side = 'left',\n      variant = 'sidebar',\n      collapsible = 'offcanvas',\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === 'none') {\n      return (\n        <div\n          className={cn(\n            'flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground',\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === 'collapsed' ? collapsible : ''}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            'duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear',\n            'group-data-[collapsible=offcanvas]:w-0',\n            'group-data-[side=right]:rotate-180',\n            variant === 'floating' || variant === 'inset'\n              ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]'\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon]',\n          )}\n        />\n        <div\n          className={cn(\n            'duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex',\n            side === 'left'\n              ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\n              : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\n            // Adjust the padding for floating and inset variants.\n            variant === 'floating' || variant === 'inset'\n              ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = 'Sidebar';\n\nconst SidebarTrigger = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, onClick, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <Button\n        ref={ref}\n        data-sidebar=\"trigger\"\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; form?: string | undef... Remove this comment to see the full error message\n        variant=\"ghost\"\n        size=\"icon\"\n        className={cn('h-7 w-7', className)}\n        onClick={(event) => {\n          onClick?.(event);\n          toggleSidebar();\n        }}\n        {...props}\n      >\n        <PanelLeft />\n        <span className=\"sr-only\">Toggle Sidebar</span>\n      </Button>\n    );\n  },\n);\nSidebarTrigger.displayName = 'SidebarTrigger';\n\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<'button'>>(\n  ({ className, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <button\n        ref={ref}\n        data-sidebar=\"rail\"\n        aria-label=\"Toggle Sidebar\"\n        tabIndex={-1}\n        onClick={toggleSidebar}\n        title=\"Toggle Sidebar\"\n        className={cn(\n          'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',\n          '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',\n          '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\n          'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar',\n          '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\n          '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarRail.displayName = 'SidebarRail';\n\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<'main'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <main\n        ref={ref}\n        className={cn(\n          'relative flex min-h-svh flex-1 flex-col bg-background',\n          'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInset.displayName = 'SidebarInset';\n\nconst SidebarInput = React.forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Input\n        ref={ref}\n        data-sidebar=\"input\"\n        className={cn(\n          'h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInput.displayName = 'SidebarInput';\n\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"header\"\n        className={cn('flex flex-col gap-2 p-2', className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarHeader.displayName = 'SidebarHeader';\n\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"footer\"\n        className={cn('flex flex-col gap-2 p-2', className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarFooter.displayName = 'SidebarFooter';\n\nconst SidebarSeparator = React.forwardRef<HTMLDivElement, React.ComponentProps<typeof Separator>>(\n  ({ className, ...props }, ref) => (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn('mx-2 w-auto bg-sidebar-border', className)}\n      {...props}\n    />\n  ),\n);\nSidebarSeparator.displayName = 'SidebarSeparator';\n\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"content\"\n        className={cn(\n          'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarContent.displayName = 'SidebarContent';\n\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"group\"\n        className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroup.displayName = 'SidebarGroup';\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        'duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = 'SidebarGroupLabel';\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        'absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 after:md:hidden',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = 'SidebarGroupAction';\n\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"group-content\"\n      className={cn('w-full text-sm', className)}\n      {...props}\n    />\n  ),\n);\nSidebarGroupContent.displayName = 'SidebarGroupContent';\n\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu\"\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\n      {...props}\n    />\n  ),\n);\nSidebarMenu.displayName = 'SidebarMenu';\n\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\n  ({ className, ...props }, ref) => (\n    <li\n      ref={ref}\n      data-sidebar=\"menu-item\"\n      className={cn('group/menu-item relative', className)}\n      {...props}\n    />\n  ),\n);\nSidebarMenuItem.displayName = 'SidebarMenuItem';\n\nconst sidebarMenuButtonVariants = cva(\n  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\n        outline:\n          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\n      },\n      size: {\n        default: 'h-8 text-sm',\n        sm: 'h-7 text-xs',\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = 'default',\n      size = 'default',\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : 'button';\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (tooltip == undefined) {\n      return button;\n    }\n\n    if (typeof tooltip === 'string') {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== 'collapsed' || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = 'SidebarMenuButton';\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        'absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 after:md:hidden',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        showOnHover &&\n          'group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = 'SidebarMenuAction';\n\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        'absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none',\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuBadge.displayName = 'SidebarMenuBadge';\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Predictable width between 50 to 90%.\n\n  const width = React.useMemo(() => {\n    // Use a more predictable approach for skeleton width to avoid pseudorandom warning\n    const widths = ['50%', '60%', '70%', '80%', '90%'];\n    const index = Math.floor(Date.now() / 1000) % widths.length;\n    return widths[index];\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn('rounded-md h-8 flex gap-2 px-2 items-center', className)}\n      {...props}\n    >\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            '--skeleton-width': width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = 'SidebarMenuSkeleton';\n\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        'mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuSub.displayName = 'SidebarMenuSub';\n\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\n  ({ ...props }, ref) => <li ref={ref} {...props} />,\n);\nSidebarMenuSubItem.displayName = 'SidebarMenuSubItem';\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<'a'> & {\n    asChild?: boolean;\n    size?: 'sm' | 'md';\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = 'md', isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'a';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        'flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground',\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\n        size === 'sm' && 'text-xs',\n        size === 'md' && 'text-sm',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = 'SidebarMenuSubButton';\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/simpleQualityPanel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (93). Maximum allowed is 50.","line":13,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":105,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":34,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1136,1150],"text":"Boolean(result.success)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":34,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":36,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":36,"column":101,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":105,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":40,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":40,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":40,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":65,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":65,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { RefreshCw, Settings, Loader2 } from 'lucide-react';\n\ninterface SimpleQualityPanelProps {\n  readonly onRefresh?: () => void;\n}\n\nexport const SimpleQualityPanel: React.FC<SimpleQualityPanelProps> = ({ onRefresh }) => {\n  const [isRecalculating, setIsRecalculating] = useState(false);\n\n  const handleRecalculateAll = async () => {\n    setIsRecalculating(true);\n\n    try {\n      const response = await fetch('/api/admin/data-quality', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'recalculate_all',\n        }),\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const result = await response.json();\n\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access\n      if (result.success) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-member-access\n        alert(`Quality scores updated successfully! ${result.data.updated} trucks updated, ${result.data.errors} errors.`);\n        onRefresh?.();\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\n        throw new Error(result.error ?? 'Failed to recalculate quality scores');\n      }\n    } catch (error) {\n      console.error('Error recalculating quality scores:', error);\n      alert('Failed to recalculate quality scores. Please try again.');\n    } finally {\n      setIsRecalculating(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Settings className=\"h-5 w-5\" />\n          Quality Management Operations\n        </CardTitle>\n        <CardDescription>\n          Bulk operations for managing data quality scores across all food trucks\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Button\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            onClick={handleRecalculateAll}\n            disabled={isRecalculating}\n            className=\"flex items-center gap-2\"\n            variant=\"default\"\n          >\n            {isRecalculating ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4\" />\n            )}\n            Recalculate All Scores\n          </Button>\n        </div>\n\n        <div className=\"border rounded-lg p-4 bg-blue-50/50\">\n          <h4 className=\"font-medium mb-2 text-blue-900\">Quality Score Thresholds</h4>\n          <div className=\"space-y-1 text-sm text-blue-800\">\n            <div className=\"flex justify-between\">\n              <span>High Quality:</span>\n              <Badge className=\"bg-green-100 text-green-800\">≥ 80%</Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Medium Quality:</span>\n              <Badge className=\"bg-yellow-100 text-yellow-800\">60% - 79%</Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Low Quality:</span>\n              <Badge className=\"bg-red-100 text-red-800\">&lt; 60%</Badge>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-xs text-muted-foreground\">\n          <p>\n            <strong>Recalculate All:</strong> Updates quality scores for all food trucks using the latest algorithm.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SimpleQualityPanel;\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/UseToast.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":65,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":119,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// Inspired by react-hot-toast library\nimport * as React from 'react';\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1_000_000;\n\nexport type ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype Action =\n  | {\n      type: 'ADD_TOAST';\n      toast: ToasterToast;\n    }\n  | {\n      type: 'UPDATE_TOAST';\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: 'DISMISS_TOAST';\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: 'REMOVE_TOAST';\n      toastId?: ToasterToast['id'];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST': {\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n    }\n\n    case 'UPDATE_TOAST': {\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      };\n    }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId != undefined && toastId !== '') {\n        addToRemoveQueue(toastId);\n      } else {\n        for (const toast of state.toasts) {\n          addToRemoveQueue(toast.id);\n        }\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case 'REMOVE_TOAST': {\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n    }\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  for (const listener of listeners) {\n    listener(memoryState);\n  }\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open: boolean) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index !== -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, []);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/realtime/createEventSourceConnection.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeMetrics' is defined but never used.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeMetrics'.","line":2,"column":25,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[49,66],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parseEventData' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'parseEventData'.","line":3,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":3,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[118,134],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setupEventListeners' is defined but never used.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":45},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'setupEventListeners'.","line":3,"column":26,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":3,"endColumn":45,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[132,153],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'createEventSourceConnection' has too many lines (60). Maximum allowed is 50.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":66,"endColumn":2},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":19,"column":25,"nodeType":null,"messageId":"deprecation","endLine":19,"endColumn":41},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":21,"column":36,"nodeType":null,"messageId":"deprecation","endLine":21,"endColumn":52},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":25,"column":30,"nodeType":null,"messageId":"deprecation","endLine":25,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsConnected' is assigned a value but never used.","line":34,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":62},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'setIsConnected' variable.","line":34,"column":48,"nodeType":"Identifier","messageId":"unusedVariable","endLine":34,"endColumn":62},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"setIsConnected\".","line":34,"column":48,"nodeType":null,"messageId":"removeAssignment","endLine":34,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setConnectionAttempts' is assigned a value but never used.","line":34,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":85},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'setConnectionAttempts' variable.","line":34,"column":64,"nodeType":"Identifier","messageId":"unusedVariable","endLine":34,"endColumn":85},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"setConnectionAttempts\".","line":34,"column":64,"nodeType":null,"messageId":"removeAssignment","endLine":34,"endColumn":85}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { RealtimeEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\nimport { parseEventData, setupEventListeners, setupEventSourceAuth } from '../useRealtimeAdminEventsHelpers';\nimport { useConnectionState } from './useConnectionState';\nimport { setupEventSourceListeners } from './setupEventSourceListeners';\n\nexport function createEventSourceConnection({\n  eventSourceRef,\n  isConnecting,\n  isManuallyDisconnectedRef,\n  connectionAttempts,\n  maxReconnectAttempts,\n  reconnectInterval,\n  reconnectTimeoutRef,\n  handleEvent,\n  connectionState,\n  connect\n}: {\n  eventSourceRef: React.MutableRefObject<EventSource | undefined>;\n  isConnecting: boolean;\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>;\n  connectionAttempts: number;\n  maxReconnectAttempts: number;\n  reconnectInterval: number;\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>;\n  handleEvent: (event: RealtimeEvent) => void;\n  connectionState: ReturnType<typeof useConnectionState>;\n  connect: () => void;\n}) {\n  if (eventSourceRef.current || isConnecting) {\n    return;\n  }\n\n  const { setIsConnecting, setConnectionError, setIsConnected, setConnectionAttempts } = connectionState;\n\n  setIsConnecting(true);\n  setConnectionError(undefined);\n  isManuallyDisconnectedRef.current = false;\n\n  try {\n    // Setup authentication\n    setupEventSourceAuth();\n\n    const eventSource = new EventSource('/api/admin/realtime-events');\n\n    // Setup all event listeners\n    setupEventSourceListeners(\n      eventSource,\n      handleEvent,\n      connectionState,\n      isManuallyDisconnectedRef,\n      connectionAttempts,\n      maxReconnectAttempts,\n      reconnectInterval,\n      reconnectTimeoutRef,\n      connect\n    );\n\n    eventSourceRef.current = eventSource;\n\n  } catch (error) {\n    console.error('Failed to establish real-time connection:', error);\n    setIsConnecting(false);\n    setConnectionError(error instanceof Error ? error.message : 'Connection failed');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/realtime/setupEventSourceListeners.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeMetrics' is defined but never used.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeMetrics'.","line":2,"column":25,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[49,66],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'setupEventSourceListeners' has too many lines (51). Maximum allowed is 50.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":56,"endColumn":2},{"ruleId":"max-params","severity":2,"message":"Function 'setupEventSourceListeners' has too many parameters (9). Maximum allowed is 4.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":6,"endColumn":42},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":10,"column":36,"nodeType":null,"messageId":"deprecation","endLine":10,"endColumn":52},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":14,"column":30,"nodeType":null,"messageId":"deprecation","endLine":14,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":28,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":71},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":29,"column":9,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":29,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1170,1180],"text":"Boolean(adminEvent)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `RealtimeEvent`.","line":30,"column":19,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":30,"endColumn":29}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { RealtimeEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\nimport { parseEventData, setupEventListeners } from '../useRealtimeAdminEventsHelpers';\nimport { useConnectionState } from './useConnectionState';\n\nexport function setupEventSourceListeners(\n  eventSource: EventSource,\n  handleEvent: (event: RealtimeEvent) => void,\n  connectionState: ReturnType<typeof useConnectionState>,\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>,\n  connectionAttempts: number,\n  maxReconnectAttempts: number,\n  reconnectInterval: number,\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>,\n  connect: () => void\n) {\n  const { setIsConnected, setIsConnecting, setConnectionError, setConnectionAttempts } = connectionState;\n\n  eventSource.addEventListener('open', () => {\n    console.info('Real-time admin events connected');\n    setIsConnected(true);\n    setIsConnecting(false);\n    setConnectionError(undefined);\n    setConnectionAttempts(0);\n  });\n\n  eventSource.addEventListener('message', (event: MessageEvent) => {\n    const adminEvent = parseEventData(event.data as string, 'message');\n    if (adminEvent) {\n      handleEvent(adminEvent);\n    }\n  });\n\n  eventSource.addEventListener('error', (error) => {\n    console.error('Real-time admin events error:', error);\n    setIsConnected(false);\n    setIsConnecting(false);\n    setConnectionError('Connection error occurred');\n\n    // Attempt reconnection if not manually disconnected\n    if (!isManuallyDisconnectedRef.current && connectionAttempts < maxReconnectAttempts) {\n      setConnectionAttempts(prev => prev + 1);\n\n      reconnectTimeoutRef.current = setTimeout(() => {\n        if (!isManuallyDisconnectedRef.current) {\n          connect();\n        }\n      }, reconnectInterval);\n    } else if (connectionAttempts >= maxReconnectAttempts) {\n      setConnectionError('Max reconnection attempts reached');\n    }\n  });\n\n  // Handle specific event types\n  setupEventListeners(eventSource, handleEvent);\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/realtime/useAutoConnect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/realtime/useConnectionManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'useRef'.","line":1,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":29,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[20,28],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtimeMetrics' is defined but never used.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'RealtimeMetrics'.","line":2,"column":25,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[67,84],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'useConnectionManagement' has too many lines (52). Maximum allowed is 50.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":57,"endColumn":2},{"ruleId":"max-params","severity":2,"message":"Function 'useConnectionManagement' has too many parameters (9). Maximum allowed is 4.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":6,"endColumn":40},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":7,"column":25,"nodeType":null,"messageId":"deprecation","endLine":7,"endColumn":41},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":8,"column":30,"nodeType":null,"messageId":"deprecation","endLine":8,"endColumn":46},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":9,"column":36,"nodeType":null,"messageId":"deprecation","endLine":9,"endColumn":52}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\nimport { RealtimeEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\nimport { useConnectionState } from './useConnectionState';\nimport { createEventSourceConnection } from './createEventSourceConnection';\n\nexport function useConnectionManagement(\n  eventSourceRef: React.MutableRefObject<EventSource | undefined>,\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>,\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>,\n  connectionState: ReturnType<typeof useConnectionState>,\n  handleEvent: (event: RealtimeEvent) => void,\n  connectionAttempts: number,\n  maxReconnectAttempts: number,\n  reconnectInterval: number,\n  isConnecting: boolean\n) {\n  const { setIsConnected, setIsConnecting, setConnectionError, setRecentEvents } = connectionState;\n\n  const connect = useCallback(() => {\n    createEventSourceConnection({\n      eventSourceRef,\n      isConnecting,\n      isManuallyDisconnectedRef,\n      connectionAttempts,\n      maxReconnectAttempts,\n      reconnectInterval,\n      reconnectTimeoutRef,\n      handleEvent,\n      connectionState,\n      connect: () => connect()\n    });\n  }, [handleEvent, connectionAttempts, maxReconnectAttempts, reconnectInterval, isConnecting, connectionState]);\n\n  const disconnect = useCallback(() => {\n    isManuallyDisconnectedRef.current = true;\n\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = undefined;\n    }\n\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = undefined;\n    }\n\n    setIsConnected(false);\n    setIsConnecting(false);\n    setConnectionError(undefined);\n  }, [setIsConnected, setIsConnecting, setConnectionError]);\n\n  const clearEvents = useCallback(() => {\n    setRecentEvents([]);\n  }, [setRecentEvents]);\n\n  return { connect, disconnect, clearEvents };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/realtime/useConnectionState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/realtime/useEventHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { useCallback } from 'react';\nimport { RealtimeEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\n\nexport function useEventHandlers(\n  eventFilter: ((event: RealtimeEvent) => boolean) | undefined,\n  setLastEventTime: (date: Date) => void,\n  setLatestMetrics: (metrics: RealtimeMetrics) => void,\n  setRecentEvents: React.Dispatch<React.SetStateAction<RealtimeEvent[]>>\n) {\n  return useCallback((event: RealtimeEvent) => {\n    // Apply filter if provided\n    if (eventFilter && !eventFilter(event)) {\n      return;\n    }\n\n    setLastEventTime(new Date());\n\n    // Handle different event types\n    switch (event.type) {\n      case 'heartbeat': {\n        if (event.data != undefined && typeof event.data === 'object') {\n          setLatestMetrics(event.data as unknown as RealtimeMetrics);\n        }\n        break;\n      }\n\n      case 'scraping_update':\n      case 'data_quality_change':\n      case 'system_alert':\n      case 'user_activity': {\n        setRecentEvents(prev => {\n          const newEvents = [event, ...prev].slice(0, 50); // Keep last 50 events\n          return newEvents;\n        });\n        break;\n      }\n    }\n  }, [eventFilter, setLastEventTime, setLatestMetrics, setRecentEvents]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/realtime/useRealtimeAdminEventsLogic.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'useRealtimeAdminEventsLogic' has too many lines (83). Maximum allowed is 50.","line":35,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":117,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef } from 'react';\nimport { RealtimeEvent, RealtimeMetrics } from '../useRealtimeAdminEvents.types';\nimport { useConnectionState } from './useConnectionState';\nimport { useEventHandlers } from './useEventHandlers';\nimport { useConnectionManagement } from './useConnectionManagement';\nimport { useAutoConnect } from './useAutoConnect';\n\ninterface UseRealtimeAdminEventsOptions {\n  autoConnect?: boolean;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n  eventFilter?: (event: RealtimeEvent) => boolean;\n}\n\ninterface UseRealtimeAdminEventsReturn {\n  // Connection state\n  isConnected: boolean;\n  isConnecting: boolean;\n  connectionError: string | undefined;\n  \n  // Data\n  latestMetrics: RealtimeMetrics | undefined;\n  recentEvents: RealtimeEvent[];\n  \n  // Controls\n  connect: () => void;\n  disconnect: () => void;\n  clearEvents: () => void;\n  \n  // Statistics\n  connectionAttempts: number;\n  lastEventTime: Date | undefined;\n}\n\nexport function useRealtimeAdminEventsLogic(\n  options: UseRealtimeAdminEventsOptions = {}\n): UseRealtimeAdminEventsReturn {\n  const {\n    autoConnect = true,\n    reconnectInterval = 5000,\n    maxReconnectAttempts = 10,\n    eventFilter\n  } = options;\n\n  // State management\n  const connectionState = useConnectionState();\n  const {\n    isConnected,\n    isConnecting,\n    connectionError,\n    latestMetrics,\n    recentEvents,\n    connectionAttempts,\n    lastEventTime\n  } = connectionState;\n\n  // Refs\n  const eventSourceRef = useRef<EventSource | undefined>(undefined);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\n  const isManuallyDisconnectedRef = useRef(false);\n\n  // Event handlers\n  const handleEvent = useEventHandlers(\n    eventFilter,\n    connectionState.setLastEventTime,\n    connectionState.setLatestMetrics,\n    connectionState.setRecentEvents\n  );\n\n  // Connection management\n  const { connect, disconnect, clearEvents } = useConnectionManagement(\n    eventSourceRef,\n    reconnectTimeoutRef,\n    isManuallyDisconnectedRef,\n    connectionState,\n    handleEvent,\n    connectionAttempts,\n    maxReconnectAttempts,\n    reconnectInterval,\n    isConnecting\n  );\n\n  // Auto-connect on mount\n  useAutoConnect(autoConnect, connect, disconnect);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n      }\n    };\n  }, []);\n\n  return {\n    // Connection state\n    isConnected,\n    isConnecting,\n    connectionError,\n    \n    // Data\n    latestMetrics,\n    recentEvents,\n    \n    // Controls\n    connect,\n    disconnect,\n    clearEvents,\n    \n    // Statistics\n    connectionAttempts,\n    lastEventTime\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/useAdminAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/useAuthHandlers.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'useAuthHandlers' has too many lines (87). Maximum allowed is 50.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":102,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { useRouter } from 'next/navigation';\n\ninterface UseAuthHandlersReturn {\n  handleEmailLogin: (e: React.FormEvent) => Promise<void>;\n  handleGoogleLogin: () => Promise<void>;\n  loading: boolean;\n  error: string | undefined;\n  email: string;\n  setEmail: (email: string) => void;\n  password: string;\n  setPassword: (password: string) => void;\n}\n\nexport function useAuthHandlers(redirectTo: string): UseAuthHandlersReturn {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const router = useRouter();\n\n  const handleEmailLogin = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      setError(undefined);\n\n      const { error: signInError } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (signInError) {\n        throw signInError;\n      }\n\n      const { data: { user }, error: userError } = await supabase.auth.getUser();\n\n      if (userError) {\n        throw userError;\n      }\n\n      if (user) {\n        const { data: profile, error: profileError } = await supabase\n          .from('profiles')\n          .select('role')\n          .eq('id', user.id)\n          .single();\n\n        if (profileError) {\n          throw profileError;\n        }\n\n        if (profile?.role === 'admin') {\n          router.push(redirectTo);\n        } else {\n          router.push('/access-denied');\n        }\n      }\n    } catch (error_: unknown) {\n      console.error('Login error:', error_);\n      setError(error_ instanceof Error ? error_.message : 'An error occurred during login');\n    } finally {\n      setLoading(false);\n    }\n  }, [email, password, router, redirectTo]);\n\n  const handleGoogleLogin = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(undefined);\n\n      const { error: signInError } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${globalThis.location.origin}/auth/callback?redirectTo=${encodeURIComponent(redirectTo)}`,\n        },\n      });\n\n      if (signInError) {\n        throw signInError;\n      }\n    } catch (error_: unknown) {\n      console.error('Login error:', error_);\n      setError(error_ instanceof Error ? error_.message : 'An error occurred during login');\n    } finally {\n      setLoading(false);\n    }\n  }, [router, redirectTo]);\n\n  return {\n    handleEmailLogin,\n    handleGoogleLogin,\n    loading,\n    error,\n    email,\n    setEmail,\n    password,\n    setPassword,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/useDataCleanup.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'useDataCleanup' has too many lines (72). Maximum allowed is 50.","line":26,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":97,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\n\nexport interface CleanupOperation {\n  type: string;\n  description: string;\n  affectedCount: number;\n  successCount: number;\n  errorCount: number;\n  errors: string[];\n}\n\nexport interface CleanupResult {\n  totalProcessed: number;\n  operations: CleanupOperation[];\n  summary: {\n    trucksImproved: number;\n    duplicatesRemoved: number;\n    qualityScoreImprovement: number;\n    placeholdersRemoved: number;\n  };\n  duration: number;\n}\n\nexport function useDataCleanup() {\n  const [isRunning, setIsRunning] = useState(false);\n  const [lastResult, setLastResult] = useState<CleanupResult | undefined>();\n  const [previewData, setPreviewData] = useState<unknown>();\n  const [selectedOperations, setSelectedOperations] = useState<string[]>([\n    'remove_placeholders',\n    'normalize_phone',\n    'fix_coordinates',\n    'update_quality_scores'\n  ]);\n\n  const runCleanup = async (dryRun: boolean = false) => {\n    setIsRunning(true);\n    try {\n      const response = await fetch('/api/admin/data-cleanup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: dryRun ? 'dry-run' : 'full-cleanup',\n          options: {\n            operations: selectedOperations,\n            batchSize: 50,\n            dryRun\n          }\n        })\n      });\n\n      const data = await response.json() as { success: boolean; result?: CleanupResult; error?: string };\n\n      if (data.success === true) {\n        setLastResult(data.result);\n      } else {\n        console.error('Cleanup failed:', data.error);\n      }\n    } catch (error) {\n      console.error('Error running cleanup:', error);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const loadPreview = async () => {\n    try {\n      const response = await fetch('/api/admin/data-cleanup?action=preview');\n      const data = await response.json() as { success: boolean; preview?: unknown };\n\n      if (data.success === true) {\n        setPreviewData(data.preview);\n      }\n    } catch (error) {\n      console.error('Error loading preview:', error);\n    }\n  };\n\n  const toggleOperation = (operation: string) => {\n    setSelectedOperations(prev => \n      prev.includes(operation)\n        ? prev.filter(op => op !== operation)\n        : [...prev, operation]\n    );\n  };\n\n  return {\n    isRunning,\n    lastResult,\n    previewData,\n    selectedOperations,\n    runCleanup,\n    loadPreview,\n    toggleOperation\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/useFoodTruckDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/useFoodTruckFinder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/useRealtimeAdminEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/useRealtimeAdminEvents.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/useRealtimeAdminEventsHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'AdminEvent' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":5,"column":71,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":5,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":20,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":20,"endColumn":73},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":21,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":21,"endColumn":21,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[888,898],"text":"Boolean(adminEvent)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Extracted helpers from useRealtimeAdminEvents.ts for MLPF compliance\nimport { AdminEvent } from './useRealtimeAdminEvents.types';\n\n// Utility function for parsing event data\nexport function parseEventData(eventData: string, eventType: string): AdminEvent | undefined {\n  try {\n    return JSON.parse(eventData) as AdminEvent;\n  } catch (error) {\n    console.warn(`Failed to parse ${eventType} event:`, error);\n    return undefined;\n  }\n}\n\n// Setup event listeners for different event types\nexport function setupEventListeners(eventSource: EventSource, handleEvent: (event: AdminEvent) => void) {\n  const eventTypes = ['heartbeat', 'scraping_update', 'data_quality_change', 'system_alert'];\n\n  for (const eventType of eventTypes) {\n    eventSource.addEventListener(eventType, (event: MessageEvent) => {\n      const adminEvent = parseEventData(event.data as string, eventType);\n      if (adminEvent) {\n        handleEvent(adminEvent);\n      }\n    });\n  }\n}\n\n// Helper function to setup authentication for event source\nexport function setupEventSourceAuth(): string {\n  const token = localStorage.getItem('supabase.auth.token') ??\n               sessionStorage.getItem('supabase.auth.token');\n\n  if (token == undefined || token === '') {\n    throw new Error('No authentication token available');\n  }\n\n  return token;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/useSearchFiltersLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/useSidebarKeyboardShortcut.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/useSystemAlerts.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in array predicate return type. Please handle the nullish case explicitly.","line":18,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"conditionErrorNullableBoolean","endLine":18,"endColumn":67,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[538,581],"text":"(event.severity && event.severity !== 'info') ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[538,581],"text":"(event.severity && event.severity !== 'info') === true"},"desc":"Change condition to check if true (`value === true`)"},{"messageId":"explicitBooleanReturnType","fix":{"range":[529,534],"text":"(event): boolean"},"desc":"Add an explicit `boolean` return type annotation."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { RealtimeEvent } from './useRealtimeAdminEvents.types';\n\nexport interface SystemAlert {\n  id: string;\n  type: 'info' | 'warning' | 'error' | 'critical';\n  message: string;\n  timestamp: string;\n  acknowledged?: boolean;\n}\n\nexport const useSystemAlerts = (recentEvents: RealtimeEvent[]) => {\n  const [alerts, setAlerts] = useState<SystemAlert[]>([]);\n  const [showDetails, setShowDetails] = useState(false);\n\n  useEffect(() => {\n    const newAlerts = recentEvents\n      .filter(event => event.severity && event.severity !== 'info')\n      .map(event => ({\n        id: event.id,\n        type: event.severity as 'warning' | 'error' | 'critical',\n        message: (typeof event.data?.message === 'string' && event.data.message) || 'System event occurred',\n        timestamp: event.timestamp,\n        acknowledged: false,\n      }))\n      .slice(0, 5); // Keep only the latest 5 alerts\n\n    // Only update if there's a change to avoid unnecessary re-renders\n    if (JSON.stringify(newAlerts) !== JSON.stringify(alerts)) {\n      setAlerts(newAlerts);\n    }\n  }, [recentEvents, alerts]);\n\n  const acknowledgeAlert = (alertId: string) => {\n    setAlerts(prev =>\n      prev.map(alert =>\n        alert.id === alertId ? { ...alert, acknowledged: true } : alert\n      )\n    );\n  };\n\n  const toggleDetails = () => {\n    setShowDetails(prev => !prev);\n  };\n\n  return {\n    alerts,\n    showDetails,\n    acknowledgeAlert,\n    toggleDetails,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/useSystemAlertsLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/useTruckCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/ScraperEngine.ts","messages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":319,"column":24,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":319,"endColumn":37},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":333,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":333,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":635,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":635,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":636,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":636,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[19640,19646],"text":"(Boolean(parsed))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/no-redundant-optional","severity":2,"message":"Consider removing 'undefined' type or '?' specifier, one of them is redundant.","line":694,"column":30,"nodeType":null,"endLine":694,"endColumn":31,"suggestions":[{"desc":"Remove \"?\" operator","fix":{"range":[21699,21700],"text":""}},{"desc":"Remove \"undefined\" type annotation","fix":{"range":[21702,21720],"text":"number"}}]},{"ruleId":"sonarjs/no-redundant-optional","severity":2,"message":"Consider removing 'undefined' type or '?' specifier, one of them is redundant.","line":697,"column":30,"nodeType":null,"endLine":697,"endColumn":31,"suggestions":[{"desc":"Remove \"?\" operator","fix":{"range":[21827,21828],"text":""}},{"desc":"Remove \"undefined\" type annotation","fix":{"range":[21830,21848],"text":"number"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":730,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":730,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":765,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":765,"endColumn":42}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { firecrawl } from './firecrawl'; // Import the firecrawl singleton\nimport * as crypto from 'node:crypto'; // Node.js crypto for secure randomness\n\ninterface InstagramPost {\n  id: string;\n  caption: string;\n  timestamp: string;\n  location: string;\n  hashtags: string[];\n  engagement: { likes: number; comments: number };\n}\n\ninterface InstagramProfile {\n  followers: number;\n  following: number;\n  posts_count: number;\n  bio: string;\n  contact_info: { email: string; phone: string };\n}\n\ninterface FacebookPost {\n  id: string;\n  content: string;\n  timestamp: string;\n  reactions: { likes: number; loves: number; shares: number };\n  comments: number;\n}\n\ninterface FacebookPageInfo {\n  likes: number;\n  followers: number;\n  check_ins: number;\n  about: string;\n  hours: Record<string, string>;\n}\n\ninterface TwitterTweet {\n  id: string;\n  text: string;\n  timestamp: string;\n  retweets: number;\n  likes: number;\n  replies: number;\n  location: string;\n}\n\ninterface TwitterProfile {\n  followers: number;\n  following: number;\n  tweets_count: number;\n  bio: string;\n  location: string;\n  website: string;\n}\n\ninterface InstagramData {\n  posts: InstagramPost[];\n  profile: InstagramProfile;\n}\n\ninterface FacebookData {\n  posts: FacebookPost[];\n  page_info: FacebookPageInfo;\n}\n\ninterface TwitterData {\n  tweets: TwitterTweet[];\n  profile: TwitterProfile;\n}\n\nexport interface WebsiteScrapeData {\n  markdown?: string;\n  html?: string;\n  metadata?: Record<string, unknown>;\n  is_fallback?: boolean;\n}\n\nexport interface ExtractedHTMLData {\n  name?: string;\n  location?: string;\n  phone?: string;\n  hours?: string;\n  menu?: { item: string; price: string }[];\n}\n\ninterface ScrapeResult {\n  success: boolean;\n  error?: string;\n  data?: InstagramData | FacebookData | TwitterData | WebsiteScrapeData | ExtractedHTMLData;\n  timestamp: string;\n  source: string;\n  note?: string;\n}\n\n// Core scraping engine with anti-detection measures\nexport class ScraperEngine {\n  private userAgents: string[];\n  private requestDelay: number;\n  private maxRetries: number;\n\n  constructor() {\n    this.userAgents = [\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    ];\n    this.requestDelay = 2000;\n    this.maxRetries = 3;\n  }\n\n  private async performFallbackScrape(url: string): Promise<ScrapeResult> {\n    try {\n      const response = await fetch(url, { headers: { 'User-Agent': this.getRandomUserAgent() } });\n      if (!response.ok) {\n        throw new Error(\n          `HTTP error ${response.status}: ${response.statusText} during fallback fetch.`,\n        );\n      }\n      const htmlContent = await response.text();\n      return {\n        success: true,\n        data: {\n          html: htmlContent,\n          is_fallback: true,\n        },\n        timestamp: new Date().toISOString(),\n        source: url,\n        note: 'Fetched using basic fetch as Firecrawl failed.',\n      };\n    } catch (fallbackError: unknown) {\n      console.warn(`Fallback fetch error for ${url}:`, fallbackError);\n      return {\n        success: false,\n        error:\n          fallbackError instanceof Error ? fallbackError.message : 'Unknown fallback fetch error',\n        timestamp: new Date().toISOString(),\n        source: url,\n      };\n    }\n  }\n\n  async scrapeWebsite(url: string, _selectors?: Record<string, string>): Promise<ScrapeResult> {\n    try {\n      const firecrawlResult = await firecrawl.scrapeUrl(url, {\n        formats: ['markdown', 'html'],\n        onlyMainContent: true,\n      });\n\n      if (!firecrawlResult.success || !firecrawlResult.data) {\n        throw new Error(firecrawlResult.error ?? 'Firecrawl scraping failed to return data.');\n      }\n\n      const returnedData: WebsiteScrapeData = {};\n      if (firecrawlResult.data.markdown != undefined && firecrawlResult.data.markdown !== '') {\n        returnedData.markdown = firecrawlResult.data.markdown;\n      }\n      if (firecrawlResult.data.html != undefined && firecrawlResult.data.html !== '') {\n        returnedData.html = firecrawlResult.data.html;\n      }\n      if (firecrawlResult.data.metadata != undefined) {\n        returnedData.metadata = firecrawlResult.data.metadata;\n      }\n\n      if (\n        (returnedData.markdown == undefined || returnedData.markdown === '') &&\n        (returnedData.html == undefined || returnedData.html === '')\n      ) {\n        throw new Error('Firecrawl returned no markdown or HTML content.');\n      }\n\n      return {\n        success: true,\n        data: returnedData,\n        timestamp: new Date().toISOString(),\n        source: url,\n      };\n    } catch (error: unknown) {\n      console.warn(`Scraping error for ${url} using Firecrawl:`, error);\n      console.info(`Falling back to basic fetch for ${url}`);\n      return await this.performFallbackScrape(url);\n    }\n  }\n\n  async scrapeSocialMedia(platform: string, handle: string): Promise<ScrapeResult> {\n    try {\n      await this.randomDelay();\n\n      switch (platform) {\n        case 'instagram': {\n          return this.scrapeInstagram(handle);\n        }\n        case 'facebook': {\n          return this.scrapeFacebook(handle);\n        }\n        case 'twitter': {\n          return this.scrapeTwitter(handle);\n        }\n        default: {\n          throw new Error(`Unsupported platform: ${platform}`);\n        }\n      }\n    } catch (error: unknown) {\n      console.warn(`Social media scraping error for ${platform}/${handle}:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        source: `social_media:${platform}:${handle}`,\n      };\n    }\n  }\n\n  private async scrapeInstagram(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    return {\n      success: true,\n      data: {\n        posts: [\n          {\n            id: 'post_001',\n            caption: 'Fresh tacos available now at Mission St! 🌮 #foodtruck #tacos',\n            timestamp: new Date(Date.now() - 3_600_000).toISOString(),\n            location: 'Mission St, San Francisco',\n            hashtags: ['foodtruck', 'tacos', 'fresh'],\n            engagement: { likes: 45, comments: 8 },\n          },\n        ],\n        profile: {\n          followers: 1250,\n          following: 340,\n          posts_count: 156,\n          bio: 'Best tacos in SF 🌮 Follow for daily locations!',\n          contact_info: {\n            email: 'contact@tacoparadise.com',\n            phone: '+1-555-0456',\n          },\n        },\n      } as InstagramData, // Type assertion\n      timestamp: new Date().toISOString(),\n      source: `instagram:${handle}`,\n    };\n  }\n\n  private async scrapeFacebook(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    return {\n      success: true,\n      data: {\n        posts: [\n          {\n            id: 'fb_post_001',\n            content:\n              \"Today we'll be at Union Square from 11 AM to 3 PM! Come try our new BBQ burger!\",\n            timestamp: new Date(Date.now() - 7_200_000).toISOString(),\n            reactions: { likes: 23, loves: 5, shares: 3 },\n            comments: 12,\n          },\n        ],\n        page_info: {\n          likes: 890,\n          followers: 1100,\n          check_ins: 450,\n          about: 'Gourmet food truck serving the Bay Area',\n          hours: {\n            monday: '11:00-15:00',\n            tuesday: '11:00-15:00',\n            wednesday: '11:00-15:00',\n            thursday: '11:00-15:00',\n            friday: '11:00-20:00',\n            saturday: '12:00-20:00',\n            sunday: '12:00-16:00',\n          },\n        },\n      } as FacebookData, // Type assertion\n      timestamp: new Date().toISOString(),\n      source: `facebook:${handle}`,\n    };\n  }\n\n  private async scrapeTwitter(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    return {\n      success: true,\n      data: {\n        tweets: [\n          {\n            id: 'tweet_001',\n            text: 'LIVE at Dolores Park! Fresh burritos and quesadillas available now 🌯',\n            timestamp: new Date(Date.now() - 1_800_000).toISOString(),\n            retweets: 8,\n            likes: 34,\n            replies: 5,\n            location: 'Dolores Park, San Francisco',\n          },\n        ],\n        profile: {\n          followers: 2340,\n          following: 567,\n          tweets_count: 1890,\n          bio: '🚚 SF Food Truck | Fresh Mexican Food | Follow for locations',\n          location: 'San Francisco, CA',\n          website: 'https://tacoparadise.com',\n        },\n      } as TwitterData, // Type assertion\n      timestamp: new Date().toISOString(),\n      source: `twitter:${handle}`,\n    };\n  }\n\n  private getRandomUserAgent(): string {\n    // Use Node.js crypto for stronger randomness if available, fallback to Math.random otherwise.\n    let idx: number;\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\n      idx = array[0] % this.userAgents.length;\n    } else if (typeof crypto.randomInt === 'function') {\n      idx = crypto.randomInt(0, this.userAgents.length);\n    } else {\n      idx = Math.floor(Math.random() * this.userAgents.length);\n    }\n    return this.userAgents[idx];\n  }\n\n  private  randomDelay(): Promise<void> {\n    // Use Node.js crypto for stronger randomness if available, fallback to Math.random otherwise.\n    let randomMs: number;\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\n      randomMs = array[0] % 1000;\n    } else if (typeof crypto.randomInt === 'function') {\n      randomMs = crypto.randomInt(0, 1000);\n    } else {\n      randomMs = Math.floor(Math.random() * 1000);\n    }\n    const delay = this.requestDelay + randomMs;\n    return new Promise((resolve) => setTimeout(resolve, delay));\n  }\n\n   handleRateLimit(retryAfter: number): Promise<void> {\n    console.info(`Rate limited. Waiting ${retryAfter} seconds before retry...`);\n    return new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));\n  }\n\n  async retryWithBackoff<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = this.maxRetries,\n  ): Promise<T> {\n    let lastError: unknown;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error: unknown) {\n        lastError = error;\n        if (attempt === maxRetries) {\n          throw lastError instanceof Error ? lastError : new Error(String(lastError));\n        }\n\n        const backoffDelay = Math.pow(2, attempt) * 1000;\n        console.info(`Attempt ${attempt} failed. Retrying in ${backoffDelay}ms...`);\n        await new Promise((resolve) => setTimeout(resolve, backoffDelay));\n      }\n    }\n\n    throw lastError instanceof Error ? lastError : new Error('Request failed after all retries');\n  }\n}\n\ninterface LocationData {\n  current?: {\n    lat: number | undefined;\n    lng: number | undefined;\n    address?: string;\n  };\n}\n\ninterface ContactInfo {\n  phone?: string;\n  email?: string;\n}\n\ninterface OperatingHours {\n  [key: string]: {\n    open: string;\n    close: string;\n    closed: boolean;\n  };\n}\n\ninterface MenuItem {\n  name: string;\n  description?: string;\n  price: number;\n  dietary_tags?: string[];\n}\n\ninterface MenuCategory {\n  category: string;\n  items: MenuItem[];\n}\n\ninterface TruckData {\n  name: string;\n  location: LocationData;\n  contact?: ContactInfo;\n  operating_hours?: OperatingHours;\n  menu?: MenuCategory[];\n  last_updated?: string;\n}\n\nexport class DataQualityAssessor {\n  private assessBasicInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.name == undefined || truckData.name.trim().length === 0) {\n      issues.push('Missing or empty truck name');\n      score -= 20;\n    }\n    return score;\n  }\n\n  private assessLocationInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.location?.current == undefined) {\n      issues.push('Missing current location data');\n      score -= 25;\n    } else {\n      if (\n        truckData.location.current.lat == undefined ||\n        truckData.location.current.lng == undefined\n      ) {\n        issues.push('Missing GPS coordinates');\n        score -= 15;\n      }\n      if (truckData.location.current.address == undefined || truckData.location.current.address === '') {\n        issues.push('Missing address information');\n        score -= 10;\n      }\n    }\n    return score;\n  }\n\n  private assessContactInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.contact == undefined) {\n      issues.push('Missing contact information');\n      score -= 20;\n    } else {\n      if ((truckData.contact.phone == undefined || truckData.contact.phone === '') && (truckData.contact.email == undefined || truckData.contact.email === '')) {\n        issues.push('No phone or email contact available');\n        score -= 15;\n      }\n      if (truckData.contact.phone != undefined && truckData.contact.phone !== '' && !this.isValidPhone(truckData.contact.phone)) {\n        issues.push('Invalid phone number format');\n        score -= 5;\n      }\n      if (truckData.contact.email != undefined && truckData.contact.email !== '' && !this.isValidEmail(truckData.contact.email)) {\n        issues.push('Invalid email format');\n        score -= 5;\n      }\n    }\n    return score;\n  }\n\n  private assessOperatingHours(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.operating_hours == undefined || Object.keys(truckData.operating_hours).length === 0) {\n      issues.push('Missing operating hours');\n      score -= 15;\n    }\n    return score;\n  }\n\n  private assessMenuInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.menu == undefined || truckData.menu.length === 0) {\n      issues.push('Missing menu information');\n      score -= 10;\n    } else {\n      const menuIssues = this.validateMenuData(truckData.menu);\n      issues.push(...menuIssues);\n      score -= menuIssues.length * 2;\n    }\n    return score;\n  }\n\n  private assessLastUpdated(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.last_updated != undefined && truckData.last_updated !== '') {\n      const lastUpdate = new Date(truckData.last_updated);\n      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);\n\n      if (daysSinceUpdate > 7) {\n        issues.push('Data is more than 7 days old');\n        score -= 10;\n      } else if (daysSinceUpdate > 3) {\n        issues.push('Data is more than 3 days old');\n        score -= 5;\n      }\n    }\n    return score;\n  }\n\n  assessTruckData(truckData: TruckData): { score: number; issues: string[] } {\n    const issues: string[] = [];\n    let score = 100;\n\n    score = this.assessBasicInfo(truckData, issues, score);\n    score = this.assessLocationInfo(truckData, issues, score);\n    score = this.assessContactInfo(truckData, issues, score);\n    score = this.assessOperatingHours(truckData, issues, score);\n    score = this.assessMenuInfo(truckData, issues, score);\n    score = this.assessLastUpdated(truckData, issues, score);\n\n    return {\n      score: Math.max(0, score) / 100,\n      issues,\n    };\n  }\n\n  private validateMenuCategory(category: MenuCategory, categoryIndex: number, issues: string[]): void {\n    if (category.category == undefined || category.category.trim().length === 0) {\n      issues.push(`Menu category ${categoryIndex + 1} missing name`);\n    }\n  }\n\n  private validateMenuItems(category: MenuCategory, issues: string[]): void {\n    if (category.items == undefined || category.items.length === 0) {\n      issues.push(`Menu category \"${category.category ?? 'Unknown'}\" has no items`);\n    } else {\n      for (const [itemIndex, item] of category.items.entries()) {\n        if (item.name == undefined || item.name.trim().length === 0) {\n          issues.push(`Menu item ${itemIndex + 1} in \"${category.category ?? 'Unknown'}\" missing name`);\n        }\n        if (typeof item.price !== 'number' || item.price <= 0) {\n          issues.push(`Menu item \"${item.name ?? 'Unknown'}\" has invalid price`);\n        }\n      }\n    }\n  }\n\n  private validateMenuData(menu: MenuCategory[]): string[] {\n    const issues: string[] = [];\n\n    for (const [categoryIndex, category] of menu.entries()) {\n      this.validateMenuCategory(category, categoryIndex, issues);\n      this.validateMenuItems(category, issues);\n    }\n\n    return issues;\n  }\n  private isValidPhone(phone: string): boolean {\n    // Regex for phone number validation. Not vulnerable to super-linear runtime due to backtracking.\n    // Accepts +, digits, spaces, dashes, and parentheses. At least 10 digits.\n    const phoneRegex = /^\\+?[\\d\\s\\-()]{10,}$/;\n    return phoneRegex.test(phone);\n  }\n  private isValidEmail(email: string): boolean {\n    // Regex for email validation optimized to avoid backtracking\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);\n  }\n}\n\ninterface GeminiLocationData {\n  address: string;\n  city: string;\n  state: string;\n  coordinates: {\n    lat?: number;\n    lng?: number;\n  };\n  confidence: number;\n}\n\ninterface GeminiOperatingHours {\n  monday: { open: string; close: string; closed: boolean };\n  tuesday: { open: string; close: string; closed: boolean };\n  wednesday: { open: string; close: string; closed: boolean };\n  thursday: { open: string; close: string; closed: boolean };\n  friday: { open: string; close: string; closed: boolean };\n  saturday: { open: string; close: string; closed: boolean };\n  sunday: { open: string; close: string; closed: boolean };\n}\n\ninterface GeminiSentimentAnalysis {\n  sentiment: 'positive' | 'negative' | 'neutral';\n  score: number;\n  key_topics: string[];\n  summary: string;\n}\n\nexport class GeminiDataProcessor {\n  private _apiKey: string;\n  private _baseUrl: string;\n  private requestCount: number;\n  private tokenCount: number;\n  private dailyLimit: { requests: number; tokens: number };\n\n  constructor(apiKey: string) {\n    this._apiKey = apiKey;\n    this._baseUrl = 'https://generativelanguage.googleapis.com/v1beta';\n    this.requestCount = 0;\n    this.tokenCount = 0;\n    this.dailyLimit = { requests: 1500, tokens: 32_000 };\n  }\n  async processMenuData(rawMenuText: string): Promise<{ categories: MenuCategory[] }> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Parse the following food truck menu text and return a structured JSON format:\n        \n        ${rawMenuText}\n        \n        Return format:\n        {\n          \"categories\": [\n            {\n              \"name\": \"category_name\",\n              \"items\": [\n                {\n                  \"name\": \"item_name\",\n                  \"description\": \"item_description\",\n                  \"price\": 0.00,\n                  \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", etc.]\n                }\n              ]\n            }\n          ]\n        }\n        \n        Only return valid JSON, no additional text.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n\n      // Ensure type safety for parsed response\n      const parsed = JSON.parse(response);\n      if (!parsed || typeof parsed !== 'object' || !('categories' in parsed)) {\n        throw new Error('Invalid Gemini menu response');\n      }\n      return parsed as { categories: MenuCategory[] };\n    } catch (error) {\n      console.error('Error processing menu data with Gemini:', error);\n      throw error;\n    }\n  }\n\n  async extractLocationFromText(text: string): Promise<GeminiLocationData> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Extract location information from the following text and return structured data:\n        \n        \"${text}\"\n        \n        Return format:\n        {\n          \"address\": \"full_address\",\n          \"city\": \"city_name\",\n          \"state\": \"state\",\n          \"coordinates\": {\n            \"lat\": 0.0,\n            \"lng\": 0.0\n          },\n          \"confidence\": 0.95\n        }\n        \n        If coordinates cannot be determined, set them to undefined. Only return valid JSON.\n      `;\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsedResponse: unknown = JSON.parse(response);\n      const validatedResponse = this.validateGeminiLocationResponse(parsedResponse);\n      return validatedResponse;\n    } catch (error) {\n      console.error('Error extracting location with Gemini:', error);\n      throw error;\n    }\n  }\n\n  private validateGeminiLocationResponse(parsedResponse: unknown): GeminiLocationData {\n    if (\n      parsedResponse == undefined ||\n      typeof parsedResponse !== 'object' ||\n      !('coordinates' in parsedResponse) ||\n      typeof (parsedResponse as Record<string, unknown>).coordinates !== 'object'\n    ) {\n      throw new Error('Invalid Gemini location response');\n    }\n    const coordinates = (parsedResponse as { coordinates?: { lat?: unknown; lng?: unknown } }).coordinates;\n    if (coordinates && typeof coordinates === 'object') {\n      if (typeof coordinates.lat !== 'number') {\n        (coordinates as { lat?: number | undefined }).lat = undefined;\n      }\n      if (typeof coordinates.lng !== 'number') {\n        (coordinates as { lng?: number | undefined }).lng = undefined;\n      }\n    }\n    return parsedResponse as GeminiLocationData;\n  }\n\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiOperatingHours> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Parse the following operating hours text and return standardized format:\n        \n        \"${hoursText}\"\n        \n        Return format:\n        {\n          \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\n        }\n          Use 24-hour format. If closed on a day, set \"closed\": true and omit open/close times.\n        Only return valid JSON.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsed = JSON.parse(response);\n      if (parsed == undefined || typeof parsed !== 'object') {\n        throw new Error('Invalid Gemini hours response');\n      }\n      return parsed as GeminiOperatingHours;\n    } catch (error) {\n      console.error('Error standardizing hours with Gemini:', error);\n      throw error;\n    }\n  }\n\n  async analyzeSentiment(reviewText: string): Promise<GeminiSentimentAnalysis> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Analyze the sentiment of this food truck review and extract key insights:\n        \n        \"${reviewText}\"\n        \n        Return format:\n        {\n          \"sentiment\": \"positive|negative|neutral\",\n          \"score\": 0.85,\n          \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\"],\n          \"summary\": \"brief_summary_of_review\"\n        }\n          Score should be between 0 (very negative) and 1 (very positive).\n        Only return valid JSON.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsed = JSON.parse(response);\n      if (parsed == undefined || typeof parsed !== 'object') {\n        throw new Error('Invalid Gemini sentiment response');\n      }\n      return parsed as GeminiSentimentAnalysis;\n    } catch (error) {\n      console.error('Error analyzing sentiment with Gemini:', error);\n      throw error;\n    }\n  }\n\n  private async makeGeminiRequest(prompt: string): Promise<string> {\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay\n    return this.getMockGeminiResponse(prompt);\n  }\n\n  private getMockGeminiResponse(prompt: string): string {\n    if (prompt.includes('menu text')) {\n      return JSON.stringify({\n        categories: [\n          {\n            name: 'Burgers',\n            items: [\n              {\n                name: 'Classic Cheeseburger',\n                description: 'Beef patty with cheese, lettuce, tomato',\n                price: 12.99,\n                dietary_tags: [],\n              },\n            ],\n          },\n        ],\n      });\n    } else if (prompt.includes('location information')) {\n      return JSON.stringify({\n        address: '123 Market St, San Francisco, CA 94105',\n        city: 'San Francisco',\n        state: 'CA',\n        coordinates: {\n          lat: 37.7749,\n          lng: -122.4194,\n        },\n        confidence: 0.95,\n      });\n    } else if (prompt.includes('operating hours')) {\n      return JSON.stringify({\n        monday: { open: '11:00', close: '15:00', closed: false },\n        tuesday: { open: '11:00', close: '15:00', closed: false },\n        wednesday: { open: '11:00', close: '15:00', closed: false },\n        thursday: { open: '11:00', close: '15:00', closed: false },\n        friday: { open: '11:00', close: '20:00', closed: false },\n        saturday: { open: '12:00', close: '20:00', closed: false },\n        sunday: { open: '12:00', close: '16:00', closed: false },\n      });\n    } else if (prompt.includes('sentiment')) {\n      return JSON.stringify({\n        sentiment: 'positive',\n        score: 0.85,\n        key_topics: ['food_quality', 'service'],\n        summary: 'Customer enjoyed the food and service',\n      });\n    }\n    return '{\"processed\": true}';\n  }\n\n  private canMakeRequest(): boolean {\n    return this.requestCount < this.dailyLimit.requests && this.tokenCount < this.dailyLimit.tokens;\n  }\n\n  private updateUsageCounters(requests: number, tokens: number): void {\n    this.requestCount += requests;\n    this.tokenCount += tokens;\n  }\n\n  getUsageStats(): {\n    requests: { used: number; limit: number; remaining: number };\n    tokens: { used: number; limit: number; remaining: number };\n  } {\n    return {\n      requests: {\n        used: this.requestCount,\n        limit: this.dailyLimit.requests,\n        remaining: this.dailyLimit.requests - this.requestCount,\n      },\n      tokens: {\n        used: this.tokenCount,\n        limit: this.dailyLimit.tokens,\n        remaining: this.dailyLimit.tokens - this.tokenCount,\n      },\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":45,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":45,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/automated-cleanup/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/automated-cleanup/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/data-cleanup/handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1783,1786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1783,1786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3416,3419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3416,3419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { BatchCleanupService } from '@/lib/data-quality/batchCleanup';\nimport { DuplicatePreventionService } from '@/lib/data-quality/duplicatePrevention';\n\nexport interface DataCleanupRequestBody {\n  action: string;\n  options?: {\n    batchSize?: number;\n    dryRun?: boolean;\n    operations?: string[];\n    truckData?: Record<string, unknown>;\n    targetId?: string;\n    sourceId?: string;\n  };\n}\n\nexport async function handlePostRequest(body: DataCleanupRequestBody): Promise<NextResponse> {\n  const { action, options = {} } = body;\n\n  switch (action) {\n    case 'full-cleanup': {\n      return await handleFullCleanup(options);\n    }\n    case 'check-duplicates': {\n      return await handleCheckDuplicates(options);\n    }\n    case 'merge-duplicates': {\n      return await handleMergeDuplicates(options);\n    }\n    case 'dry-run': {\n      return await handleDryRun(options);\n    }\n    default: {\n      return NextResponse.json(\n        { success: false, error: `Unknown action: ${action}` },\n        { status: 400 }\n      );\n    }\n  }\n}\n\nexport async function handleGetRequest(request: NextRequest): Promise<NextResponse> {\n  const { searchParams } = new URL(request.url);\n  const action = searchParams.get('action');\n\n  switch (action) {\n    case 'status': {\n      return await handleGetStatus();\n    }\n    case 'preview': {\n      return await handleGetPreview();\n    }\n    default: {\n      return await handleGetDefault();\n    }\n  }\n}\n\nexport async function handleFullCleanup(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\n  const result = await BatchCleanupService.runFullCleanup({\n    batchSize: options?.batchSize ?? 50,\n    dryRun: options?.dryRun ?? false,\n    operations: options?.operations as any\n  });\n  \n  return NextResponse.json({\n    success: true,\n    action: 'full-cleanup',\n    result,\n    message: `Cleanup completed: ${result.summary.trucksImproved} trucks improved, ${result.summary.duplicatesRemoved} duplicates removed`\n  });\n}\n\nexport async function handleCheckDuplicates(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\n  const { truckData } = options ?? {};\n  if (!truckData) {\n    return NextResponse.json(\n      { success: false, error: 'Missing truckData for duplicate check' },\n      { status: 400 }\n    );\n  }\n\n  const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\n  \n  return NextResponse.json({\n    success: true,\n    action: 'check-duplicates',\n    result: duplicateCheck\n  });\n}\n\nexport async function handleMergeDuplicates(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\n  const { targetId, sourceId } = options ?? {};\n  if (targetId === undefined || sourceId === undefined) {\n    return NextResponse.json(\n      { success: false, error: 'Missing targetId or sourceId for merge operation' },\n      { status: 400 }\n    );\n  }\n\n  const mergedTruck = await DuplicatePreventionService.mergeDuplicates(targetId, sourceId);\n  \n  return NextResponse.json({\n    success: true,\n    action: 'merge-duplicates',\n    result: mergedTruck,\n    message: `Successfully merged truck ${sourceId} into ${targetId}`\n  });\n}\n\nexport async function handleDryRun(options: DataCleanupRequestBody['options']): Promise<NextResponse> {\n  const result = await BatchCleanupService.runFullCleanup({\n    ...options,\n    operations: options?.operations as any,\n    dryRun: true\n  });\n  \n  return NextResponse.json({\n    success: true,\n    action: 'dry-run',\n    result,\n    message: 'Dry run completed - no changes made to database'\n  });\n}\n\nexport  function handleGetStatus(): Promise<NextResponse> {\n  return NextResponse.json({\n    success: true,\n    status: {\n      available_operations: [\n        'remove_placeholders',\n        'normalize_phone',\n        'fix_coordinates',\n        'update_quality_scores',\n        'merge_duplicates'\n      ],\n      default_batch_size: 50,\n      supports_dry_run: true\n    }\n  });\n}\n\nexport async function handleGetPreview(): Promise<NextResponse> {\n  const result = await BatchCleanupService.runFullCleanup({\n    batchSize: 10,\n    dryRun: true\n  });\n  \n  return NextResponse.json({\n    success: true,\n    preview: {\n      estimated_improvements: result.summary.trucksImproved,\n      estimated_duplicates: result.summary.duplicatesRemoved,\n      operations: result.operations.map(op => ({\n        type: op.type,\n        description: op.description,\n        affected_count: op.affectedCount\n      }))\n    }\n  });\n}\n\nexport  function handleGetDefault(): Promise<NextResponse> {\n  return NextResponse.json({\n    success: true,\n    endpoints: [\n      'GET /api/admin/data-cleanup?action=status - Get cleanup system status',\n      'GET /api/admin/data-cleanup?action=preview - Preview cleanup changes',\n      'POST /api/admin/data-cleanup - Run cleanup operations'\n    ],\n    actions: [\n      'full-cleanup - Run all cleanup operations',\n      'check-duplicates - Check if truck data is duplicate',\n      'merge-duplicates - Merge two duplicate trucks',\n      'dry-run - Preview changes without making them'\n    ]\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/data-quality/handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QualityThresholds' is defined but never used.","line":4,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QualityAssessment' is defined but never used.","line":11,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QualityCategory' is defined but never used.","line":24,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limit' is assigned a value but never used.","line":34,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":14},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'limit' variable.","line":34,"column":9,"nodeType":"Identifier","messageId":"unusedVariable","endLine":34,"endColumn":14},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"limit\".","line":34,"column":9,"nodeType":null,"messageId":"removeAssignment","endLine":34,"endColumn":14},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":41,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[929,937],"text":"truckId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[930,937],"text":"(truckId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[929,937],"text":"!Boolean(truckId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":54,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":58,"column":12,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":58,"endColumn":19,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1418,1425],"text":"(Boolean(truckId))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":61,"column":39,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":61,"endColumn":46},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":64,"column":14,"nodeType":"AwaitExpression","messageId":"await","endLine":64,"endColumn":44,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1653,1658],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"sonarjs/no-invalid-await","severity":2,"message":"Refactor this redundant 'await' on a non-promise.","line":64,"column":14,"nodeType":"AwaitExpression","messageId":"refactorAwait","endLine":64,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number | undefined`.","line":64,"column":38,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":64,"endColumn":43},{"ruleId":"unicorn/prefer-default-parameters","severity":2,"message":"Prefer default parameters over reassignment.","line":130,"column":3,"nodeType":"VariableDeclaration","messageId":"preferDefaultParameters","endLine":130,"endColumn":35,"suggestions":[{"messageId":"preferDefaultParametersSuggest","fix":{"range":[3276,3329],"text":"batchLimit = 100) {\n"},"data":{},"desc":"Replace reassignment with default parameter."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'truckData' is assigned a value but never used.","line":149,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":22},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'truckData' variable.","line":149,"column":13,"nodeType":"Identifier","messageId":"unusedVariable","endLine":149,"endColumn":22},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"truckData\".","line":149,"column":13,"nodeType":null,"messageId":"removeAssignment","endLine":149,"endColumn":22}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { FoodTruckService, supabase } from '@/lib/supabase';\n\ninterface QualityThresholds {\n  excellent: number;\n  good: number;\n  fair: number;\n  poor: number;\n}\n\ninterface QualityAssessment {\n  score: number;\n  breakdown: Record<string, number>;\n  recommendations: string[];\n}\n\ninterface TruckData {\n  id: string;\n  name: string;\n  data_quality_score: number;\n  verification_status: string;\n}\n\ninterface QualityCategory {\n  label: string;\n  color: string;\n  description: string;\n}\n\nexport async function handleGetRequest(request: NextRequest): Promise<NextResponse> {\n  const { searchParams } = new URL(request.url);\n  const action = searchParams.get('action');\n  const truckId = searchParams.get('truckId');\n  const limit = searchParams.get('limit');\n\n  switch (action) {\n    case 'stats': {\n      return await handleStatsAction();\n    }\n    case 'assess': {\n      if (!truckId) {\n        return NextResponse.json({ success: false, error: 'Missing truckId for assess action' }, { status: 400 });\n      }\n      return await handleAssessAction(truckId);\n    }\n    default: {\n      return await handleDefaultGetAction();\n    }\n  }\n}\n\nexport async function handlePostRequest(request: NextRequest): Promise<NextResponse> {\n  const body = await request.json();\n  const { action, truckId, limit } = body;\n\n  switch (action) {\n    case 'update-single': {\n      if (!truckId) {\n        return NextResponse.json({ success: false, error: 'Missing truckId for update-single action' }, { status: 400 });\n      }\n      return await handleUpdateSingle(truckId);\n    }\n    case 'batch-update': {\n      return await handleBatchUpdate(limit);\n    }\n    case 'recalculate-all': {\n      return await handleRecalculateAll();\n    }\n    default: {\n      return NextResponse.json({ success: false, error: `Unknown action: ${action}` }, { status: 400 });\n    }\n  }\n}\n\nasync function handleStatsAction() {\n  const qualityStatsRaw = await FoodTruckService.getDataQualityStats();\n\n  const qualityStats = qualityStatsRaw as Record<string, unknown>;\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      ...qualityStats,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nasync function handleAssessAction(truckId: string) {\n  const truckRaw = await FoodTruckService.getTruckById(truckId);\n\n  const truck = truckRaw as TruckData;\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      truckId,\n      truckName: truck.name,\n      currentScore: truck.data_quality_score,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nasync function handleDefaultGetAction() {\n  const qualityStats = await FoodTruckService.getDataQualityStats();\n  return NextResponse.json({\n    success: true,\n    data: qualityStats\n  });\n}\n\nasync function handleUpdateSingle(truckId: string) {\n  const updatedTruck = await FoodTruckService.getTruckById(truckId);\n  \n  return NextResponse.json({\n    success: true,\n    message: 'Quality score updated successfully',\n    data: {\n      truckId: updatedTruck.id,\n      truckName: updatedTruck.name,\n      newScore: updatedTruck.data_quality_score,\n      verificationStatus: updatedTruck.verification_status,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\n function handleBatchUpdate(limit?: number) {\n  const batchLimit = limit ?? 100;\n  \n  return NextResponse.json({\n    success: true,\n    message: 'Batch quality score update completed',\n    data: {\n      limit: batchLimit,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nasync function handleRecalculateAll() {\n  const { trucks } = await FoodTruckService.getAllTrucks(1000, 0);\n  let updated = 0;\n  let errors = 0;\n\n  for (const truck of trucks) {\n    try {\n      const truckData = truck as TruckData;\n      updated++;\n    } catch (error: unknown) {\n      const truckData = truck as TruckData;\n      console.error(`Failed to update truck ${truckData.id}:`, error);\n      errors++;\n    }\n  }\n\n  return NextResponse.json({\n    success: true,\n    message: 'Quality score recalculation completed',\n    data: {\n      totalTrucks: trucks.length,\n      updated,\n      errors,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (authHeader == undefined) return false;\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    \n    if (error || !user) return false;\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/oauth-status/helpers.ts","messages":[{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":30,"column":127,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":30,"endColumn":153},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2993,2996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2993,2996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":91,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":91,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":91,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":91,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":91,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":91,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .select on an `any` value.","line":91,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .limit on an `any` value.","line":91,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":95,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":95,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":95,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4364,4367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4364,4367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":130,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":136,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":130,"column":41,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":130,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth on an `any` value.","line":130,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":54},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":137,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":137,"endColumn":20,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[4612,4622],"text":"(Boolean(oauthError))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":137,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":42}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabase } from '@/lib/supabase';\nimport { OAuthStatus } from './types';\n\nexport async function handleGetRequest(_request: NextRequest) {\n  const status = await getOAuthStatus();\n\n  return NextResponse.json({\n    success: true,\n    ...status,\n    legacy_format: {\n      oauth_status: status.overall_status,\n      message: getStatusMessage(status.overall_status),\n      configuration_steps: status.overall_status === 'ready' ? undefined : [\n        '1. Go to Supabase Dashboard > Authentication > Providers',\n        '2. Enable Google provider',\n        '3. Add Google OAuth Client ID and Secret',\n        '4. Configure redirect URLs',\n        '5. Test OAuth flow'\n      ]\n    }\n  });\n}\n\nexport  function handlePostRequest(_request: NextRequest) {\n  const baseUrl = process.env.NODE_ENV === 'production'\n    ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\n    : 'http://localhost:3000';\n\n  const testUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/auth/v1/authorize?provider=google&redirect_to=${encodeURIComponent(`${baseUrl}/auth/callback`)}`;\n\n  return NextResponse.json({\n    success: true,\n    message: 'OAuth test URL generated',\n    test_url: testUrl,\n    environment: process.env.NODE_ENV ?? 'development',\n    instructions: [\n      '1. Open the test_url in a new browser tab',\n      '2. Complete Google OAuth flow',\n      '3. Verify redirect to admin dashboard',\n      '4. Check for proper role assignment'\n    ],\n    manual_test_steps: [\n      'Navigate to /login page',\n      'Click Google login button',\n      'Complete OAuth flow',\n      'Verify admin access'\n    ],\n    automation_commands: [\n      'npm run oauth:verify - Check configuration',\n      'npm run oauth:test:dev - Test development flow',\n      'npm run oauth:test:prod - Test production flow'\n    ]\n  });\n}\n\nasync function getOAuthStatus(): Promise<OAuthStatus> {\n  const status: OAuthStatus = {\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\n    supabase: {\n      connected: false,\n      projectId: 'zkwliyjjkdnigizidlln'\n    },\n    environment_variables: {\n      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL != undefined,\n      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY != undefined,\n      supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY != undefined\n    },\n    oauth_flow: {\n      loginPageExists: true,\n      callbackRouteExists: true,\n      authProviderConfigured: false\n    },\n    recommendations: [],\n    overall_status: 'not_configured'\n  };\n\n  await checkSupabaseConnection(status, supabase);\n  await checkSupabaseAuthSettings(status);\n  await testOAuthProvider(status, supabase);\n\n  status.recommendations = generateRecommendations(status);\n  status.overall_status = determineOverallStatus(status);\n\n  return status;\n}\n\nasync function checkSupabaseConnection(status: OAuthStatus, supabase: any) {\n  try {\n    const { error } = await supabase.from('profiles').select('count').limit(1);\n    if (error == undefined) {\n      status.supabase.connected = true;\n    } else {\n      status.supabase.error = error.message;\n    }\n  } catch (error) {\n    status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\n  }\n}\n\nasync function checkSupabaseAuthSettings(status: OAuthStatus) {\n  try {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    if (supabaseUrl != undefined && supabaseUrl !== '') {\n      const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\n      if (settingsResponse.ok === true) {\n        const settings = await settingsResponse.json() as {\n          external?: { google?: boolean };\n          disable_signup?: boolean;\n          autoconfirm?: boolean;\n        };\n        status.supabase.authSettings = {\n          googleEnabled: settings.external?.google ?? false,\n          signupEnabled: settings.disable_signup !== true,\n          autoconfirm: settings.autoconfirm ?? false\n        };\n        if (settings.external?.google != undefined) {\n          status.oauth_flow.authProviderConfigured = true;\n        }\n      }\n    }\n  } catch {\n    console.info('Auth settings endpoint requires authentication (normal)');\n  }\n}\n\nasync function testOAuthProvider(status: OAuthStatus, supabase: any) {\n  try {\n    const { error: oauthError } = await supabase.auth.signInWithOAuth({\n      provider: 'google',\n      options: {\n        redirectTo: 'http://localhost:3000/auth/callback',\n        skipBrowserRedirect: true\n      }\n    });\n    if (!oauthError || oauthError.message !== 'Provider not found') {\n      status.oauth_flow.authProviderConfigured = true;\n    }\n  } catch {\n    console.info('OAuth provider test failed (may be normal)');\n  }\n}\n\nfunction generateRecommendations(status: OAuthStatus): string[] {\n  const recommendations: string[] = [];\n\n  if (!status.environment_variables.supabaseUrl) {\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\n  }\n  if (!status.environment_variables.supabaseAnonKey) {\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n  }\n  if (!status.environment_variables.supabaseServiceKey) {\n    recommendations.push('❌ Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\n  }\n\n  if (!status.supabase.connected) {\n    recommendations.push('❌ Fix Supabase connection issue');\n    if (status.supabase.error != undefined && status.supabase.error !== '') {\n      recommendations.push(`   Error: ${status.supabase.error}`);\n    }\n  }\n\n  if (status.supabase.authSettings == undefined) {\n    recommendations.push('🔧 Configure Google OAuth in Supabase Dashboard', '   1. Create Google Cloud Console OAuth credentials', '   2. Add credentials to Supabase Auth settings');\n  } else {\n    if (status.supabase.authSettings.googleEnabled === true) {\n      recommendations.push('✅ Google OAuth provider is enabled');\n    } else {\n      recommendations.push('🔧 Enable Google OAuth provider in Supabase Dashboard', '   Go to: Authentication > Providers > Google');\n    }\n  }\n\n  if (status.overall_status === 'ready') {\n    recommendations.push('🎉 OAuth configuration is complete!', '✅ Test the login flow at /login');\n  }\n\n  if (recommendations.length > 1) {\n    recommendations.push('📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions', '🔧 Run: npm run oauth:verify for automated checks');\n  }\n\n  return recommendations;\n}\n\nfunction determineOverallStatus(status: OAuthStatus): 'ready' | 'partial' | 'not_configured' | 'error' {\n  if (status.supabase.connected !== true || (status.supabase.error != undefined && status.supabase.error !== '')) {\n    return 'error';\n  }\n\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\n  if (!envVarsComplete) {\n    return 'not_configured';\n  }\n\n  if (status.supabase.authSettings?.googleEnabled === true && status.oauth_flow.authProviderConfigured === true) {\n    return 'ready';\n  }\n\n  if (status.supabase.connected === true && envVarsComplete) {\n    return 'partial';\n  }\n\n  return 'not_configured';\n}\n\nfunction getStatusMessage(status: string): string {\n  switch (status) {\n    case 'ready': {\n      return 'Google OAuth is fully configured and ready to use';\n    }\n    case 'partial': {\n      return 'Basic configuration complete, OAuth provider needs setup';\n    }\n    case 'not_configured': {\n      return 'Google OAuth is not configured';\n    }\n    case 'error': {\n      return 'Configuration error detected';\n    }\n    default: {\n      return 'Unknown configuration status';\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/oauth-status/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/realtime-events/handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":35},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextResponse'.","line":1,"column":23,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[20,34],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'handleGetRequest' has too many lines (76). Maximum allowed is 50.","line":54,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":129,"endColumn":2},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'handleGetRequest' has no 'await' expression.","line":54,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":54,"endColumn":39,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1215,1287],"text":"function handleGetRequest(request: NextRequest): Response"},"desc":"Remove 'async'."}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Method 'start' has too many lines (62). Maximum allowed is 50.","line":56,"column":5,"nodeType":"Property","messageId":"exceed","endLine":117,"endColumn":6},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":104,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":110,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `ReadableStreamDefaultController<any>` assigned to a parameter of type `ReadableStreamDefaultController<Uint8Array<ArrayBufferLike>>`.","line":106,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":106,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":133,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":133,"endColumn":38},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":291,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":291,"endColumn":40}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabase, supabaseAdmin, ScrapingJobService, FoodTruckService } from '@/lib/supabase';\nimport { AdminEvent } from './types';\n\ninterface RealtimeMetrics {\n  scrapingJobs: {\n    active: number;\n    completed: number;\n    failed: number;\n    pending: number;\n  };\n  dataQuality: {\n    averageScore: number;\n    totalTrucks: number;\n    recentChanges: number;\n  };\n  systemHealth: {\n    status: 'healthy' | 'warning' | 'error';\n    uptime: number;\n    lastUpdate: string;\n  };\n}\n\nexport async function verifyAdminAccess(request: NextRequest): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (authHeader?.startsWith('Bearer ') !== true) {\n      return false;\n    }\n\n    const token = authHeader.slice(7);\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) {\n      return false;\n    }\n\n    if (!supabaseAdmin) {\n      return false;\n    }\n\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nexport async function handleGetRequest(request: NextRequest): Promise<Response> {\n  const stream = new ReadableStream({\n    start(controller) {\n      const encoder = new TextEncoder();\n\n      const connectionEvent: AdminEvent = {\n        id: generateEventId(),\n        type: 'heartbeat',\n        timestamp: new Date().toISOString(),\n        data: {\n          message: 'Real-time admin dashboard connected',\n          connectionId: generateEventId()\n        }\n      };\n      \n      controller.enqueue(encoder.encode(formatSSEMessage(connectionEvent)));\n\n      const handleHeartbeatEvent = async () => {\n        try {\n          const metrics = await fetchRealtimeMetrics();\n          const event: AdminEvent = {\n            id: generateEventId(),\n            type: 'heartbeat',\n            timestamp: new Date().toISOString(),\n            data: { ...metrics }\n          };\n\n          controller.enqueue(encoder.encode(formatSSEMessage(event)));\n        } catch (error) {\n          console.error('Error fetching realtime metrics:', error);\n\n          const errorEvent: AdminEvent = {\n            id: generateEventId(),\n            type: 'system_alert',\n            timestamp: new Date().toISOString(),\n            data: {\n              error: 'Failed to fetch metrics',\n              details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            severity: 'error'\n          };\n\n          controller.enqueue(encoder.encode(formatSSEMessage(errorEvent)));\n        }\n      };\n\n      const intervalId = setInterval(() => {\n        void handleHeartbeatEvent();\n      }, 5000);\n\n      const changeMonitorId = setInterval(async () => {\n        try {\n          await monitorDataChanges(controller, encoder);\n        } catch (error) {\n          console.error('Error monitoring data changes:', error);\n        }\n      }, 10_000);\n\n      request.signal.addEventListener('abort', () => {\n        clearInterval(intervalId);\n        clearInterval(changeMonitorId);\n        controller.close();\n      });\n    }\n  });\n\n  return new Response(stream, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control'\n    }\n  });\n}\n\nexport async function handlePostRequest(request: NextRequest): Promise<Response> {\n  try {\n    const body = await request.json();\n    const { action } = body as { action: string };\n\n    switch (action) {\n      case 'health_check': {\n        return await handleHealthCheck();\n      }\n\n      case 'trigger_test_event': {\n        return handleTriggerTestEvent();\n      }\n\n      default: {\n        return new Response(JSON.stringify({\n          success: false,\n          error: 'Unknown action',\n          available_actions: ['health_check', 'trigger_test_event']\n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Realtime events POST error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Internal server error',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\nasync function fetchRealtimeMetrics(): Promise<RealtimeMetrics> {\n  try {\n    const recentJobs = await ScrapingJobService.getJobsByStatus('all');\n    const typedJobs = recentJobs as Array<{ status?: string }>;\n    const scrapingMetrics = {\n      active: typedJobs.filter(job => job.status === 'running').length,\n      completed: typedJobs.filter(job => job.status === 'completed').length,\n      failed: typedJobs.filter(job => job.status === 'failed').length,\n      pending: typedJobs.filter(job => job.status === 'pending').length\n    };\n\n    const qualityStats = await FoodTruckService.getDataQualityStats();\n    const dataQualityMetrics = {\n      averageScore: qualityStats.avg_quality_score ?? 0,\n      totalTrucks: qualityStats.total_trucks ?? 0,\n      recentChanges: 0\n    };\n\n    const systemHealth = {\n      status: 'healthy' as const,\n      uptime: process.uptime(),\n      lastUpdate: new Date().toISOString()\n    };\n\n    return {\n      scrapingJobs: scrapingMetrics,\n      dataQuality: dataQualityMetrics,\n      systemHealth\n    };\n  } catch (error) {\n    console.error('Error fetching realtime metrics:', error);\n    return {\n      scrapingJobs: { active: 0, completed: 0, failed: 0, pending: 0 },\n      dataQuality: { averageScore: 0, totalTrucks: 0, recentChanges: 0 },\n      systemHealth: {\n        status: 'error',\n        uptime: 0,\n        lastUpdate: new Date().toISOString()\n      }\n    };\n  }\n}\n\nasync function sendScrapingUpdateEvent(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): Promise<void> {\n  const recentJobs = await ScrapingJobService.getJobsByStatus('all');\n\n  if (recentJobs.length > 0) {\n    const event: AdminEvent = {\n      id: generateEventId(),\n      type: 'scraping_update',\n      timestamp: new Date().toISOString(),\n      data: {\n        recentJobs: recentJobs.map((job: unknown) => {\n          const jobData = job as { id?: string; status?: string; started_at?: string; completed_at?: string };\n          return {\n            id: jobData.id,\n            status: jobData.status,\n            started_at: jobData.started_at,\n            completed_at: jobData.completed_at\n          };\n        }),\n        count: recentJobs.length\n      },\n      severity: 'info'\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\n  }\n}\n\nasync function sendDataQualityChangeEvent(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): Promise<void> {\n  const recentTrucks = await FoodTruckService.getAllTrucks(10, 0);\n  const recentlyUpdated = recentTrucks.trucks.filter(truck => {\n    const updatedAt = new Date(truck.updated_at);\n    const oneMinuteAgo = new Date(Date.now() - 60_000);\n    return updatedAt > oneMinuteAgo;\n  });\n\n  if (recentlyUpdated.length > 0) {\n    const event: AdminEvent = {\n      id: generateEventId(),\n      type: 'data_quality_change',\n      timestamp: new Date().toISOString(),\n      data: {\n        updatedTrucks: recentlyUpdated.map(truck => ({\n          id: truck.id,\n          name: truck.name,\n          data_quality_score: truck.data_quality_score,\n          updated_at: truck.updated_at\n        })),\n        count: recentlyUpdated.length\n      },\n      severity: 'info'\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\n  }\n}\n\nasync function monitorDataChanges(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): Promise<void> {\n  try {\n    await sendScrapingUpdateEvent(controller, encoder);\n    await sendDataQualityChangeEvent(controller, encoder);\n  } catch (error) {\n    console.error('Error monitoring data changes:', error);\n  }\n}\n\nfunction formatSSEMessage(event: AdminEvent): string {\n  return `id: ${event.id}\\nevent: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`;\n}\n\nfunction generateEventId(): string {\n  return `${Date.now()}-${Math.random().toString(36).slice(2, 11)}`;\n}\n\nasync function handleHealthCheck(): Promise<Response> {\n  const metrics = await fetchRealtimeMetrics();\n  return new Response(JSON.stringify({\n    success: true,\n    status: 'healthy',\n    metrics,\n    timestamp: new Date().toISOString()\n  }), {\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n\nfunction handleTriggerTestEvent(): Response {\n  return new Response(JSON.stringify({\n    success: true,\n    message: 'Test event triggered',\n    timestamp: new Date().toISOString()\n  }), {\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/realtime-events/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/scraping-metrics/handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextRequest'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[9,22],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'getScrapingMetrics' has too many lines (67). Maximum allowed is 50.","line":36,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":102,"endColumn":2},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is assigned a value but never used.","line":75,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":16},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'metrics' variable.","line":75,"column":9,"nodeType":"Identifier","messageId":"unusedVariable","endLine":75,"endColumn":16},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"metrics\".","line":75,"column":9,"nodeType":null,"messageId":"removeAssignment","endLine":75,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { ScrapingJobService, FoodTruckService, supabase } from '@/lib/supabase';\nimport { RealtimeMetrics } from './types';\n\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (authHeader == undefined) return false;\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) return false;\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nexport async function handleGetRequest(): Promise<NextResponse> {\n  const metrics = await getScrapingMetrics();\n  return NextResponse.json({\n    success: true,\n    data: metrics,\n    timestamp: new Date().toISOString()\n  });\n}\n\nasync function getScrapingMetrics(): Promise<RealtimeMetrics> {\n  // Fetch real scraping metrics from database\n  const [allJobs, , recentTrucks] = await Promise.all([\n    ScrapingJobService.getAllJobs(100, 0), // Get last 100 jobs for metrics\n    ScrapingJobService.getJobsFromDate(new Date(Date.now() - 24 * 60 * 60 * 1000)), // Last 24 hours (unused but kept for potential future use)\n    FoodTruckService.getAllTrucks(1000, 0), // Get trucks for processing count\n  ]);\n\n  const totalRuns = allJobs.length;\n  const typedJobs = allJobs as Array<{ status?: string; started_at?: string; completed_at?: string }>;\n  const successfulRuns = typedJobs.filter(job => job.status === 'completed').length;\n  const failedRuns = typedJobs.filter(job => job.status === 'failed').length;\n\n  // Calculate average run time from completed jobs\n  const completedJobs = typedJobs.filter(job =>\n    job.status === 'completed' && job.started_at !== undefined && job.completed_at !== undefined\n  );\n\n  let totalRunTime = 0;\n  for (const job of completedJobs) {\n    const start = new Date(job.started_at ?? '').getTime();\n    const end = new Date(job.completed_at ?? '').getTime();\n    totalRunTime += (end - start) / 1000; // Convert to seconds\n  }\n\n  const averageRunTime = completedJobs.length > 0\n    ? Math.round(totalRunTime / completedJobs.length)\n    : 0;\n\n  // Count trucks processed today and new trucks\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const typedTrucks = recentTrucks.trucks as Array<{ created_at: string }>;\n  const newTrucksToday = typedTrucks.filter(truck => {\n    const createdAt = new Date(truck.created_at);\n    return createdAt >= today;\n  }).length;\n\n  const metrics = {\n    totalRuns,\n    successfulRuns,\n    failedRuns,\n    averageRunTime,\n    totalTrucksProcessed: recentTrucks.total,\n    newTrucksToday,\n  };\n\n  return {\n    scrapingJobs: {\n      active: typedJobs.filter(job => job.status === 'running').length,\n      completed: successfulRuns,\n      failed: failedRuns,\n      pending: typedJobs.filter(job => job.status === 'pending').length,\n    },\n    dataQuality: {\n      averageScore: 0, // Placeholder, actual calculation might be complex\n      totalTrucks: recentTrucks.total,\n      recentChanges: 0, // Placeholder\n    },\n    systemHealth: {\n      status: 'healthy',\n      uptime: process.uptime(),\n      lastUpdate: new Date().toISOString(),\n    },\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/admin/scraping-metrics/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/analytics/web-vitals/handlers.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'handlePostRequest' has too many lines (52). Maximum allowed is 50.","line":113,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":164,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any[]` assigned to a parameter of type `{ metric_name: string; metric_value: number; rating: string; }[]`.","line":170,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":170,"endColumn":52}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { WebVitalMetric } from './types';\n\n/**\n * Get Web Vitals Analytics Data\n */\nexport function getRequestParams(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const days = Number.parseInt(searchParams.get('days') ?? '7');\n  const page = searchParams.get('page');\n  return { days, page };\n}\n\nexport async function fetchAndFilterMetrics(request: NextRequest) {\n  const { days, page } = getRequestParams(request);\n\n  if (!supabaseAdmin) {\n    throw new Error('Database not available');\n  }\n\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - days);\n\n  let query = supabaseAdmin\n    .from('web_vitals_metrics')\n    .select('*')\n    .gte('recorded_at', startDate.toISOString())\n    .order('recorded_at', { ascending: false });\n\n  if (page != undefined && page !== '') {\n    query = query.ilike('page_url', `%${page}%`);\n  }\n\n  const { data: metrics, error } = await query.limit(1000);\n\n  if (error) {\n    throw error;\n  }\n\n  return { metrics: metrics ?? [], days, startDate };\n}\n\n/**\n * Calculate summary statistics for metrics\n */\nexport function calculateMetricsSummary(metrics: { metric_name: string; metric_value: number; rating: string }[]) {\n  const metricTypes: ('LCP' | 'FID' | 'CLS' | 'FCP' | 'TTFB')[] = ['LCP', 'FID', 'CLS', 'FCP', 'TTFB'];\n  const summary: Record<string, {\n    count: number;\n    average: number | undefined;\n    median: number | undefined;\n    p75: number | undefined;\n    p95: number | undefined;\n    goodCount: number;\n    needsImprovementCount: number;\n    poorCount: number;\n  }> = {};\n\n  for (const metricName of metricTypes) {\n    const metricData = metrics.filter(m => m.metric_name === metricName);\n    \n    if (metricData.length === 0) {\n      summary[metricName] = {\n        count: 0,\n        average: undefined,\n        median: undefined,\n        p75: undefined,\n        p95: undefined,\n        goodCount: 0,\n        needsImprovementCount: 0,\n        poorCount: 0\n      };\n      continue;\n    }\n\n    const values = metricData.map(m => m.metric_value).sort((a, b) => a - b);\n    const ratings = metricData.map(m => m.rating);\n\n    summary[metricName] = {\n      count: metricData.length,\n      average: Math.round(values.reduce((sum: number, val: number) => sum + val, 0) / values.length),\n      median: getPercentile(values, 50),\n      p75: getPercentile(values, 75),\n      p95: getPercentile(values, 95),\n      goodCount: ratings.filter(r => r === 'good').length,\n      needsImprovementCount: ratings.filter(r => r === 'needs-improvement').length,\n      poorCount: ratings.filter(r => r === 'poor').length\n    };\n  }\n\n  return summary;\n}\n\n/**\n * Calculate percentile value from sorted array\n */\nexport function getPercentile(sortedValues: number[], percentile: number): number {\n  if (sortedValues.length === 0) return 0;\n  \n  const index = (percentile / 100) * (sortedValues.length - 1);\n  const lower = Math.floor(index);\n  const upper = Math.ceil(index);\n  \n  if (lower === upper) {\n    return Math.round(sortedValues[lower]);\n  }\n  \n  const weight = index - lower;\n  return Math.round(sortedValues[lower] * (1 - weight) + sortedValues[upper] * weight);\n}\n\nexport async function handlePostRequest(request: NextRequest) {\n  try {\n    const metric = await request.json() as WebVitalMetric;\n\n    // Validate metric data\n    if (!metric.name || typeof metric.value !== 'number' || !metric.url) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid metric data' },\n        { status: 400 }\n      );\n    }\n\n    if (supabaseAdmin) {\n      try {\n        const { error } = await supabaseAdmin\n          .from('web_vitals_metrics')\n          .insert({\n            metric_name: metric.name,\n            metric_value: metric.value,\n            rating: metric.rating,\n            page_url: metric.url,\n            user_agent: metric.userAgent,\n            recorded_at: new Date(metric.timestamp).toISOString()\n          });\n\n        if (error) {\n          console.warn('Failed to store web vital metric:', error);\n          // Don't fail the request - metrics collection should be non-blocking\n        }\n      } catch (dbError) {\n        console.warn('Database error storing web vital:', dbError);\n      }\n    }\n\n    // Log performance issues for monitoring\n    if (metric.rating === 'poor') {\n      console.warn(`Poor ${metric.name} performance detected:`, {\n        value: metric.value,\n        url: metric.url,\n        timestamp: new Date(metric.timestamp).toISOString()\n      });\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Web vitals endpoint error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function handleGetRequest(request: NextRequest) {\n  try {\n    const { metrics, days, startDate } = await fetchAndFilterMetrics(request);\n\n    const summary = calculateMetricsSummary(metrics);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        metrics,\n        summary,\n        period: {\n          days,\n          startDate: startDate.toISOString(),\n          endDate: new Date().toISOString()\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Failed to fetch web vitals analytics:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch analytics data' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/analytics/web-vitals/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/cron/auto-scrape/handlers.ts","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":20,"column":10,"nodeType":"Literal","messageId":"error","endLine":20,"endColumn":14,"suggestions":[{"messageId":"remove","fix":{"range":[817,821],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[817,821],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":72,"column":51,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":72,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2288,2297],"text":"(e.details != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2288,2297],"text":"(e.details ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2288,2297],"text":"(Boolean(e.details))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { autoScraper } from '@/lib/autoScraper';\nimport { scheduler } from '@/lib/scheduler';\nimport { logActivity } from '@/lib/activityLogger';\nimport { AutoScrapeResult } from './types';\n\nfunction verifyCronSecret(request: NextRequest): NextResponse | null {\n  const authHeader = request.headers.get('authorization');\n  const cronSecret = process.env.CRON_SECRET;\n\n  if (cronSecret === undefined || cronSecret === '') {\n    console.error('CRON_SECRET not configured');\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n  }\n\n  if (authHeader !== `Bearer ${cronSecret}`) {\n    console.error('Unauthorized cron attempt:', authHeader);\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n  return null;\n}\n\nfunction logAutoScrapeStart() {\n  console.info('Starting automated scraping job...');\n  logActivity({\n    type: 'cron_job',\n    action: 'auto_scrape_started',\n    details: { timestamp: new Date().toISOString() },\n  });\n}\n\nfunction logAutoScrapeCompletion(result: AutoScrapeResult) {\n  logActivity({\n    type: 'cron_job',\n    action: 'auto_scrape_completed',\n    details: {\n      timestamp: new Date().toISOString(),\n      trucksProcessed: result.trucksProcessed,\n      newTrucksFound: result.newTrucksFound,\n      errorsCount: result.errors?.length ?? 0,\n    },\n  });\n  console.info('Automated scraping job completed successfully');\n}\n\nfunction logAutoScrapeFailure(error: unknown) {\n  console.error('Auto-scraping cron job failed:', error);\n  logActivity({\n    type: 'cron_job',\n    action: 'auto_scrape_failed',\n    details: {\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error',\n    },\n  });\n}\n\nexport async function handlePostRequest(request: NextRequest) {\n  try {\n    const authResponse = verifyCronSecret(request);\n    if (authResponse) {\n      return authResponse;\n    }\n\n    logAutoScrapeStart();\n\n    const rawResult = await autoScraper.runAutoScraping();\n    // Map errors to string[] for compatibility\n    const result: AutoScrapeResult = {\n      trucksProcessed: rawResult.trucksProcessed,\n      newTrucksFound: rawResult.newTrucksFound,\n      errors: rawResult.errors?.map(e => e.url + (e.details ? `: ${e.details}` : '')),\n    };\n    scheduler.scheduleFollowUpTasks(result);\n    logAutoScrapeCompletion(result);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Auto-scraping completed successfully',\n      data: {\n        trucksProcessed: result.trucksProcessed,\n        newTrucksFound: result.newTrucksFound,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    logAutoScrapeFailure(error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Auto-scraping failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    );\n  }\n}\n\nexport function handleGetRequest() {\n  return NextResponse.json(\n    { error: 'Method not allowed. Use POST for cron jobs.' },\n    { status: 405 },\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/cron/auto-scrape/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/firecrawl/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/firecrawl/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/monitoring/api-usage/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { NextRequest, NextResponse } from 'next/server';\nimport { APIMonitor, type APIService } from '@/lib/monitoring/apiMonitor';\n\nexport function handleComprehensiveMonitoring() {\n  const monitoringResult = APIMonitor.checkAllAPIs();\n  return NextResponse.json({\n    success: true,\n    data: monitoringResult,\n    timestamp: new Date().toISOString(),\n  });\n}\n\nexport async function handleServiceSpecificMonitoring(\n  request: NextRequest,\n  service: APIService,\n) {\n  const { searchParams } = new URL(request.url);\n  const action = searchParams.get('action');\n\n  if (action === 'check') {\n    const requestCount = Number.parseInt(searchParams.get('requests') ?? '1', 10);\n    const tokenCount = Number.parseInt(searchParams.get('tokens') ?? '0', 10);\n\n    const canMakeRequest = await APIMonitor.canMakeRequest(\n      service,\n      requestCount,\n      tokenCount,\n    );\n    const usage = APIMonitor.getCurrentUsage(service);\n\n    return NextResponse.json({\n      success: true,\n      service,\n      canMakeRequest: canMakeRequest.allowed,\n      reason: canMakeRequest.reason,\n      waitTime: canMakeRequest.waitTime,\n      usage,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  const usage = APIMonitor.getCurrentUsage(service);\n\n  return NextResponse.json({\n    success: true,\n    service,\n    usage,\n    timestamp: new Date().toISOString(),\n  });\n}\n\nexport function handleClearAlerts() {\n  APIMonitor.clearAlertHistory();\n  return NextResponse.json({\n    success: true,\n    message: 'Alert history cleared',\n  });\n}\n\nexport function handleGetAlerts() {\n  const alerts = APIMonitor.getAlertHistory();\n  return NextResponse.json({\n    success: true,\n    alerts,\n    count: alerts.length,\n  });\n}\n\nexport function handleTestAlert(body: { service: string; level: string }) {\n  const { service, level } = body;\n  if (service == undefined || level == undefined) {\n    return NextResponse.json(\n      { success: false, error: 'Missing service or level' },\n      { status: 400 },\n    );\n  }\n\n  // This would trigger a test alert in a real implementation\n  return NextResponse.json({\n    success: true,\n    message: `Test alert triggered for ${service} at ${level} level`,\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/pipeline/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/pipeline/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/scheduler/data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/scheduler/handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":103,"column":7,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":103,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { NextResponse } from 'next/server';\nimport { schedulerInstance, schedulerTasks, setSchedulerInstance } from './data';\nimport { PutRequestBody } from './types';\n\nexport function handleSchedulerStatus() {\n  return NextResponse.json({\n    isRunning: schedulerInstance != undefined,\n    tasks: schedulerTasks,\n    summary: {\n      totalTasks: schedulerTasks.length,\n      enabledTasks: schedulerTasks.filter((t) => t.enabled).length,\n      runningTasks: schedulerTasks.filter((t) => t.enabled && t.nextRun != undefined).length,\n      totalSuccesses: schedulerTasks.reduce((acc, t) => acc + t.successCount, 0),\n      totalErrors: schedulerTasks.reduce((acc, t) => acc + t.errorCount, 0),\n    },\n  });\n}\n\nexport function handleSchedulerLogs() {\n  return NextResponse.json({\n    logs: [\n      {\n        timestamp: new Date(Date.now() - 300_000).toISOString(),\n        taskId: 'location_update',\n        level: 'info',\n        message: 'Successfully updated locations for 12 food trucks',\n      },\n      {\n        timestamp: new Date(Date.now() - 900_000).toISOString(),\n        taskId: 'instagram_scrape',\n        level: 'info',\n        message: 'Scraped 3 Instagram accounts, found 8 new posts',\n      },\n      {\n        timestamp: new Date(Date.now() - 1_800_000).toISOString(),\n        taskId: 'gemini_processing',\n        level: 'error',\n        message: 'Rate limit exceeded, skipping AI processing',\n      },\n      {\n        timestamp: new Date(Date.now() - 3_600_000).toISOString(),\n        taskId: 'website_crawl',\n        level: 'warning',\n        message: 'Failed to crawl tacoparadise.com - site temporarily unavailable',\n      },\n    ],\n  });\n}\n\nexport function handleSchedulerDefault() {\n  return NextResponse.json({\n    message: 'Task Scheduler API',\n    endpoints: [\n      'GET /api/scheduler?action=status - Get scheduler status',\n      'GET /api/scheduler?action=logs - Get execution logs',\n      'POST /api/scheduler - Start/stop scheduler or execute task',\n      'PUT /api/scheduler - Update task configuration',\n    ],\n  });\n}\n\nexport function handleStartScheduler() {\n  if (schedulerInstance) {\n    return NextResponse.json({ error: 'Scheduler is already running' }, { status: 409 });\n  }\n\n  setSchedulerInstance({ started: new Date().toISOString() });\n\n  return NextResponse.json({\n    message: 'Scheduler started successfully',\n    status: 'running',\n  });\n}\n\nexport function handleStopScheduler() {\n  if (!schedulerInstance) {\n    return NextResponse.json({ error: 'Scheduler is not running' }, { status: 409 });\n  }\n\n  setSchedulerInstance(undefined);\n\n  return NextResponse.json({\n    message: 'Scheduler stopped successfully',\n    status: 'stopped',\n  });\n}\n\nexport function handleExecuteTask(taskId: string) {\n  if (taskId == undefined || taskId === '') {\n    return NextResponse.json({ error: 'Task ID is required for execution' }, { status: 400 });\n  }\n\n  const task = schedulerTasks.find((t) => t.id === taskId);\n  if (!task) {\n    return NextResponse.json({ error: 'Task not found' }, { status: 404 });\n  }\n\n  // Simulate task execution\n  task.lastRun = new Date().toISOString();\n\n  // Simulate success/failure\n  // eslint-disable-next-line sonarjs/pseudo-random\n  if (Math.random() > 0.1) {\n    // 90% success rate\n    task.lastSuccess = task.lastRun;\n    task.successCount++;\n    task.lastError = undefined;\n  } else {\n    task.errorCount++;\n    task.lastError = 'Simulated execution error';\n  }\n\n  return NextResponse.json({\n    message: `Task ${taskId} executed`,\n    task: task,\n  });\n}\n\nexport function handleUpdateTask(body: PutRequestBody) {\n  const { taskId, config } = body;\n\n  if (!taskId) {\n    return NextResponse.json({ error: 'Task ID is required' }, { status: 400 });\n  }\n\n  const taskIndex = schedulerTasks.findIndex((t) => t.id === taskId);\n  if (taskIndex === -1) {\n    return NextResponse.json({ error: 'Task not found' }, { status: 404 });\n  }\n\n  // Update task configuration\n  schedulerTasks[taskIndex] = {\n    ...schedulerTasks[taskIndex],\n    ...config,\n  };\n\n  // Update next run time if interval changed\n  if (config.intervalMinutes != undefined && config.intervalMinutes > 0 && schedulerTasks[taskIndex].enabled) {\n    const lastRun = new Date(schedulerTasks[taskIndex].lastRun ?? Date.now());\n    const nextRun = new Date(lastRun.getTime() + config.intervalMinutes * 60 * 1000);\n    schedulerTasks[taskIndex].nextRun = nextRun.toISOString();\n  }\n\n  return NextResponse.json({\n    message: 'Task configuration updated',\n    task: schedulerTasks[taskIndex],\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/scheduler/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/search/data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/search/filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/search/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/tavily/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/tavily/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/api/test-integration/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[461,464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[461,464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl, FirecrawlResponse } from '@/lib/firecrawl';\nimport { gemini } from '@/lib/gemini';\nimport { FoodTruckService, ScrapingJobService, DataProcessingService, FoodTruck, ScrapingJob, DataProcessingQueue } from '@/lib/supabase';\nimport { GeminiResponse, MenuCategory } from '@/lib/types';\n\n// Helper function to test Firecrawl scraping\ninterface FirecrawlTestResult {\n  success: boolean;\n  result?: FirecrawlResponse;\n  error?: string;\n  details?: any;\n}\n\n// Helper function to test Firecrawl scraping\nexport async function testFirecrawlScraping(testUrl: string): Promise<FirecrawlTestResult> {\n  console.info('Testing Firecrawl scraping...');\n  const scrapeResult = await firecrawl.scrapeUrl(testUrl, {\n    formats: ['markdown'],\n    onlyMainContent: true,\n  });\n\n  if (!scrapeResult.success) {\n    return {\n      success: false,\n      error: 'Firecrawl test failed',\n      details: scrapeResult.error,\n    };\n  }\n\n  return { success: true, result: scrapeResult };\n}\n\n// Helper function to test Gemini processing\nexport async function testGeminiProcessing() {\n  console.info('Testing Gemini processing...');\n  const testMenuText =\n    'Burgers: Classic Burger $12.99, Veggie Burger $11.99. Sides: Fries $4.99, Onion Rings $5.99';\n\n  const geminiResult = await gemini.processMenuData(testMenuText);\n\n  if (!geminiResult.success) {\n    return {\n      success: false,\n      error: 'Gemini test failed',\n      details: geminiResult.error,\n    };\n  }\n\n  return { success: true, result: geminiResult };\n}\n\ntype GeminiProcessMenuDataResult = MenuCategory[];\n\ninterface SupabaseTestResults {\n  testTruck: FoodTruck;\n  testJob: ScrapingJob;\n  queueItem: DataProcessingQueue;\n  nearbyTrucks: FoodTruck[];\n}\n\ninterface FormattedTestResults {\n  success: boolean;\n  message: string;\n  results: {\n    firecrawl: {\n      success: boolean;\n      dataLength: number;\n    };\n    gemini: {\n      success: boolean;\n      tokensUsed: number | undefined;\n      categoriesFound: number;\n    };\n    supabase: {\n      truckCreated: string;\n      jobCreated: string;\n      queueItemCreated: string;\n      nearbyTrucksFound: number;\n    };\n  };\n  testData: {\n    truck: FoodTruck;\n    processedMenu: MenuCategory[] | undefined;\n    nearbyTrucks: FoodTruck[];\n  };\n}\n\n function createTestFoodTruck(testUrl: string, menuData: MenuCategory[]): Promise<FoodTruck> {\n  return FoodTruckService.createTruck({\n    name: 'Test Food Truck',\n    description: 'Integration test truck',\n    current_location: {\n      lat: 37.7749,\n      lng: -122.4194,\n      address: 'San Francisco, CA',\n      timestamp: new Date().toISOString(),\n    },\n    scheduled_locations: [],\n    operating_hours: {\n      monday: { closed: true },\n      tuesday: { closed: true },\n      wednesday: { closed: true },\n      thursday: { closed: true },\n      friday: { closed: true },\n      saturday: { closed: true },\n      sunday: { closed: true },\n    },\n    menu: menuData,\n    contact_info: { phone: '+1-555-TEST', email: undefined, website: undefined },\n    social_media: {\n      instagram: undefined,\n      facebook: undefined,\n      twitter: undefined,\n      tiktok: undefined,\n      yelp: undefined,\n    },\n    source_urls: [testUrl],\n    data_quality_score: 0.8,\n    verification_status: 'pending',\n  });\n}\n\n function createTestScrapingJob(testUrl: string): Promise<ScrapingJob> {\n  return ScrapingJobService.createJob({\n    job_type: 'integration_test',\n    target_url: testUrl,\n    priority: 10,\n    scheduled_at: new Date().toISOString(),\n  });\n}\n\n function addTestToProcessingQueue(truckId: string): Promise<DataProcessingQueue> {\n  return DataProcessingService.addToQueue({\n    truck_id: truckId,\n    processing_type: 'integration_test',\n    raw_data: { test: true },\n    priority: 10,\n  });\n}\n\n// Helper function to test Supabase operations\nexport async function testSupabaseOperations(\n  testUrl: string,\n  geminiResult: GeminiResponse<GeminiProcessMenuDataResult>\n): Promise<SupabaseTestResults> {\n  // Create a test food truck\n  const testTruck = await createTestFoodTruck(testUrl, geminiResult.data ?? []);\n\n  // Create a test scraping job\n  const testJob = await createTestScrapingJob(testUrl);\n\n  // Add to processing queue\n  const queueItem = await addTestToProcessingQueue(testTruck.id);\n\n  // Test geospatial query\n  const nearbyTrucks = await FoodTruckService.getTrucksByLocation(37.7749, -122.4194, 10);\n\n  return {\n    testTruck,\n    testJob,\n    queueItem,\n    nearbyTrucks,\n  };\n}\n\n// Helper function to format test results\nexport function formatTestResults(\n  scrapeResult: FirecrawlTestResult,\n  geminiResult: GeminiResponse<GeminiProcessMenuDataResult>,\n  supabaseResults: SupabaseTestResults\n): FormattedTestResults {\n  return {\n    success: true,\n    message: 'Integration test completed successfully',\n    results: {\n      firecrawl: {\n        success: scrapeResult.result?.success ?? false,\n        dataLength: scrapeResult.result?.data?.markdown?.length ?? 0,\n      },\n      gemini: {\n        success: geminiResult.success,\n        tokensUsed: geminiResult.tokensUsed,\n        categoriesFound: geminiResult.data?.length ?? 0,\n      },\n      supabase: {\n        truckCreated: supabaseResults.testTruck.id,\n        jobCreated: supabaseResults.testJob.id,\n        queueItemCreated: supabaseResults.queueItem.id,\n        nearbyTrucksFound: supabaseResults.nearbyTrucks.length,\n      },\n    },\n    testData: {\n      truck: supabaseResults.testTruck,\n      processedMenu: geminiResult.data,\n      nearbyTrucks: supabaseResults.nearbyTrucks.slice(0, 3),\n    },\n  };\n}\n\nexport async function runIntegrationTestSteps(testUrl: string) {\n  console.info('Starting integration test...');\n\n  // Step 1: Test Firecrawl scraping\n  const firecrawlTest = await testFirecrawlScraping(testUrl);\n  if (!firecrawlTest.success) {\n    return firecrawlTest;\n  }\n\n  // Step 2: Test Gemini processing\n  const geminiTest = await testGeminiProcessing();\n  if (!geminiTest.success) {\n    return geminiTest;\n  }\n\n  // Step 3: Test Supabase operations\n  console.info('Testing Supabase operations...');\n  const supabaseResults = await testSupabaseOperations(testUrl, geminiTest.result as GeminiResponse<GeminiProcessMenuDataResult>);\n\n  // Step 4: Format and return results\n  const results = formatTestResults(firecrawlTest, geminiTest.result as GeminiResponse<GeminiProcessMenuDataResult>, supabaseResults);\n  return { success: true, results };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/test-integration/pipelineRunner.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextResponse'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[0,43],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StageResult' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'StageResult'.","line":7,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":7,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[147,190],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'runTestPipeline' has too many lines (60). Maximum allowed is 50.","line":9,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":68,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":16,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":16,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":16,"column":38,"nodeType":"Identifier","messageId":"unsafeCall","endLine":16,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":17,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":19,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":21,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":21,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":27,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":35,"nodeType":"Identifier","messageId":"unsafeCall","endLine":27,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":32,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":34,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":26},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":43,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":34,"endColumn":56,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[969,982],"text":"(Boolean(extractedData))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":37,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":43,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":48,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":43,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":43,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":50,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":52,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":53,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":54,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":54,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":62,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":63,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":64,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":64,"endColumn":29}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport {\n  handleFirecrawlStage,\n  handleGeminiStage,\n  handleSupabaseStage,\n} from './stage-handlers';\nimport { StageResult } from '@/lib/types';\n\nexport async function runTestPipeline(\n  body: { url?: string; rawText?: string; isDryRun?: boolean },\n  logs: string[],\n) {\n  const { url, rawText, isDryRun = true } = body;\n  logs.push(`Request body: ${JSON.stringify(body)}`);\n\n  const firecrawlStageOutput = await handleFirecrawlStage(url ?? '', rawText, logs);\n  const { firecrawlResult, contentToProcess, sourceUrlForProcessing } = firecrawlStageOutput;\n\n  if (firecrawlResult.status === 'Error') {\n    return {\n      firecrawl: firecrawlResult,\n      logs,\n      overallStatus: 'Error',\n    };\n  }\n\n  const geminiStageOutput = await handleGeminiStage(\n    contentToProcess,\n    sourceUrlForProcessing,\n    logs,\n  );\n  const { geminiResult, extractedData } = geminiStageOutput;\n\n  if (geminiResult.status === 'Error' || !extractedData) {\n    return {\n      firecrawl: firecrawlResult,\n      gemini: geminiResult,\n      logs,\n      overallStatus: 'Error',\n    };\n  }\n\n  const supabaseResult = await handleSupabaseStage(\n    extractedData,\n    sourceUrlForProcessing,\n    isDryRun,\n    logs,\n  );\n\n  if (supabaseResult.status === 'Error') {\n    return {\n      firecrawl: firecrawlResult,\n      gemini: geminiResult,\n      supabase: supabaseResult,\n      logs,\n      overallStatus: 'Error',\n    };\n  }\n\n  logs.push('Test pipeline run completed successfully.');\n  return {\n    firecrawl: firecrawlResult,\n    gemini: geminiResult,\n    supabase: supabaseResult,\n    logs,\n    overallStatus: 'Success',\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/test-integration/schemaMapper.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'mapExtractedDataToTruckSchema' has too many lines (55). Maximum allowed is 50.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":62,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":13,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":13,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ExtractedFoodTruckDetails,\n  FoodTruckSchema,\n  MenuCategory,\n  MenuItem,\n} from '@/lib/types';\n\nexport function mapExtractedDataToTruckSchema(\n  extractedData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n  isDryRun: boolean,\n): FoodTruckSchema {\n  if (!extractedData || typeof extractedData !== 'object') {\n    throw new Error('Invalid extractedData for mapping.');\n  }\n\n  const name = extractedData.name ?? 'Unknown Test Truck';\n  const locationData = extractedData.current_location ?? {};\n  const fullAddress = [\n    locationData.address,\n    locationData.city,\n    locationData.state,\n    locationData.zip_code,\n  ]\n    .filter(Boolean)\n    .join(', ');\n\n  return {\n    name: name,\n    description: extractedData.description ?? undefined,\n    current_location: {\n      lat: locationData.lat ?? 0,\n      lng: locationData.lng ?? 0,\n      address: fullAddress ?? (locationData.raw_text ?? undefined),\n      timestamp: new Date().toISOString(),\n    },\n    scheduled_locations: extractedData.scheduled_locations ?? undefined,\n    operating_hours: extractedData.operating_hours ?? undefined,\n    menu: (extractedData.menu ?? []).map((category: MenuCategory) => ({\n      name: category.name ?? 'Uncategorized',\n      items: (category.items ?? []).map((item: MenuItem) => ({\n        name: item.name ?? 'Unknown Item',\n        description: item.description ?? undefined,\n        price:\n          typeof item.price === 'number' || typeof item.price === 'string'\n            ? item.price\n            : undefined,\n        dietary_tags: item.dietary_tags ?? [],\n      })),\n    })),\n    contact_info: extractedData.contact_info ?? undefined,\n    social_media: extractedData.social_media ?? undefined,\n    cuisine_type: extractedData.cuisine_type ?? [],\n    price_range: extractedData.price_range ?? undefined,\n    specialties: extractedData.specialties ?? [],\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\n    verification_status: 'pending',\n    source_urls: [sourceUrl].filter(Boolean),\n    last_scraped_at: new Date().toISOString(),\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/test-integration/stageHandlers.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'handleFirecrawlStage' has too many lines (58). Maximum allowed is 50.","line":12,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":69,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":25,"column":15,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":25,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[707,715],"text":"(rawText == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[708,715],"text":"(rawText ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[707,715],"text":"(!Boolean(rawText))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":31,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":30,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[932,955],"text":"((fcOutput.data?.markdown) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[932,955],"text":"((fcOutput.data?.markdown) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[932,955],"text":"(Boolean((fcOutput.data?.markdown)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":51,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":51,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1826,1833],"text":"rawText != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1826,1833],"text":"rawText ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1826,1833],"text":"Boolean(rawText)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":63,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":63,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2201,2218],"text":"contentToProcess == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2202,2218],"text":"(contentToProcess ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2201,2218],"text":"!Boolean(contentToProcess)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":117,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":121,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":117,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":117,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":122,"column":44,"nodeType":"Property","messageId":"anyAssignment","endLine":122,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `Partial<FoodTruck>`.","line":130,"column":63,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":130,"endColumn":78},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":131,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":131,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":136,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":136,"endColumn":38}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\nimport { gemini } from '@/lib/gemini';\nimport { FoodTruckService } from '@/lib/supabase';\nimport {\n  ExtractedFoodTruckDetails,\n  FirecrawlOutputData,\n  GeminiResponse,\n  StageResult,\n} from '@/lib/types';\nimport { mapExtractedDataToTruckSchema } from './schema-mapper';\n\nexport async function handleFirecrawlStage(\n  url: string,\n  rawText: string | undefined,\n  logs: string[],\n): Promise<{\n  firecrawlResult: StageResult;\n  contentToProcess: string | undefined;\n  sourceUrlForProcessing: string;\n}> {\n  let firecrawlResult: StageResult;\n  let contentToProcess: string | undefined;\n  let sourceUrlForProcessing: string = url ?? 'raw_text_input';\n\n  if (url && !rawText) {\n    logs.push(`Starting Firecrawl scrape for URL: ${url}`);\n    try {\n      const fcOutput: GeminiResponse<FirecrawlOutputData> =\n        await firecrawl.scrapeFoodTruckWebsite(url);\n      if (fcOutput.success && fcOutput.data?.markdown) {\n        contentToProcess = fcOutput.data.markdown;\n        sourceUrlForProcessing = fcOutput.data.source_url ?? url;\n        firecrawlResult = {\n          status: 'Success',\n          rawContent: fcOutput.data.markdown,\n          metadata: { name: fcOutput.data.name, source_url: fcOutput.data.source_url },\n          details: `Markdown length: ${fcOutput.data.markdown.length}`,\n        };\n        logs.push('Firecrawl scrape successful.');\n      } else {\n        throw new Error(fcOutput.error ?? 'Firecrawl failed to return markdown.');\n      }\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'An unknown error occurred during Firecrawl scrape.';\n      logs.push(`Firecrawl error: ${errorMessage}`);\n      firecrawlResult = { status: 'Error', error: errorMessage };\n    }\n  } else if (rawText) {\n    logs.push('Using raw text input for processing.');\n    contentToProcess = rawText;\n    firecrawlResult = {\n      status: 'Skipped (Raw Text Provided)',\n      details: `Raw text length: ${rawText.length}`,\n    };\n  } else {\n    logs.push('No URL or raw text provided.');\n    throw new Error('Either a URL or raw text must be provided for testing.');\n  }\n\n  if (!contentToProcess) {\n    logs.push('Content to process is empty after Firecrawl/raw text stage.');\n    throw new Error('Content to process is empty.');\n  }\n\n  return { firecrawlResult, contentToProcess, sourceUrlForProcessing };\n}\n\nexport async function handleGeminiStage(\n  contentToProcess: string,\n  sourceUrlForProcessing: string,\n  logs: string[],\n): Promise<{ geminiResult: StageResult; extractedData: ExtractedFoodTruckDetails | undefined }> {\n  let geminiResult: StageResult;\n  let extractedData: ExtractedFoodTruckDetails | undefined;\n\n  logs.push('Starting Gemini processing.');\n  try {\n    const geminiOutput: GeminiResponse<ExtractedFoodTruckDetails> =\n      await gemini.extractFoodTruckDetailsFromMarkdown(contentToProcess, sourceUrlForProcessing);\n    if (geminiOutput.success && geminiOutput.data) {\n      extractedData = geminiOutput.data;\n      geminiResult = {\n        status: 'Success',\n        data: geminiOutput.data,\n        tokensUsed: geminiOutput.tokensUsed,\n        prompt: geminiOutput.promptSent,\n        details: 'Gemini extraction successful.',\n      };\n      logs.push('Gemini processing successful.');\n    } else {\n      throw new Error(geminiOutput.error ?? 'Gemini processing failed to return data.');\n    }\n  } catch (error: unknown) {\n    const errorMessage =\n      error instanceof Error\n        ? error.message\n        : 'An unknown error occurred during Gemini processing.';\n    logs.push(`Gemini error: ${errorMessage}`);\n    geminiResult = { status: 'Error', error: errorMessage };\n  }\n  return { geminiResult, extractedData };\n}\n\nexport async function handleSupabaseStage(\n  extractedData: ExtractedFoodTruckDetails,\n  sourceUrlForProcessing: string,\n  isDryRun: boolean,\n  logs: string[],\n): Promise<StageResult> {\n  let supabaseResult: StageResult = { status: 'Skipped' };\n\n  logs.push('Preparing for Supabase interaction.');\n  try {\n    const truckDataToSave = mapExtractedDataToTruckSchema(\n      extractedData,\n      sourceUrlForProcessing,\n      isDryRun,\n    );\n    supabaseResult = { status: 'Prepared', preparedData: truckDataToSave };\n\n    if (isDryRun) {\n      supabaseResult.status = 'Success (Dry Run)';\n      supabaseResult.details = 'Dry Run: Data was prepared but not saved.';\n      logs.push('Supabase interaction skipped (Dry Run).');\n    } else {\n      logs.push('Attempting to save to Supabase (Dry Run is FALSE).');\n      const createdTruck = await FoodTruckService.createTruck(truckDataToSave);\n      if (!createdTruck) {\n        throw new Error('Failed to create truck in Supabase.');\n      }\n      supabaseResult = {\n        status: 'Success (Saved)',\n        preparedData: truckDataToSave,\n        recordId: createdTruck.id,\n        details: `Truck data saved with ID: ${createdTruck.id}`,\n      };\n      logs.push(`Data saved to Supabase. Record ID: ${createdTruck.id}`);\n    }\n  } catch (error: unknown) {\n    const errorMessage =\n      error instanceof Error\n        ? error.message\n        : 'An unknown error occurred during Supabase interaction.';\n    logs.push(`Supabase interaction error: ${errorMessage}`);\n    supabaseResult = { ...supabaseResult, status: 'Error', error: errorMessage };\n  }\n  return supabaseResult;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/api/trucks/handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FoodTruck' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'FoodTruck'.","line":3,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":3,"endColumn":19,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[94,135],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":38,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":38,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":42,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":42,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1510,1513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1510,1513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Partial<FoodTruck>`.","line":50,"column":55,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":50,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1784,1787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1784,1787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Partial<FoodTruck>`.","line":61,"column":63,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":61,"endColumn":70}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { FoodTruckService } from '@/lib/supabase';\nimport { FoodTruck } from '@/lib/types';\n\nexport async function handleGetTruckById(id: string) {\n  const truck = await FoodTruckService.getTruckById(id);\n  return NextResponse.json({ truck });\n}\n\nexport async function handleGetTrucksByLocation(lat: string, lng: string, radius: string) {\n  const userLat = Number.parseFloat(lat);\n  const userLng = Number.parseFloat(lng);\n  const radiusKm = Number.parseFloat(radius);\n\n  const nearbyTrucks = await FoodTruckService.getTrucksByLocation(userLat, userLng, radiusKm);\n\n  return NextResponse.json({\n    trucks: nearbyTrucks,\n    total: nearbyTrucks.length,\n    limit: nearbyTrucks.length, // Assuming no pagination for location-based\n    offset: 0,\n    hasMore: false,\n  });\n}\n\nexport async function handleGetAllTrucks(limit: number, offset: number) {\n  const { trucks, total } = await FoodTruckService.getAllTrucks(limit, offset);\n\n  return NextResponse.json({\n    trucks,\n    total,\n    limit,\n    offset,\n    hasMore: offset + limit < (total ?? 0),\n    summary: {\n      totalTrucks: total,\n      averageQuality:\n        trucks && trucks.length > 0\n          ? trucks.reduce((acc, t) => acc + (t.data_quality_score ?? 0), 0) / trucks.length\n          : 0,\n      lastUpdated:\n        trucks && trucks.length > 0\n          ? Math.max(...trucks.map((t) => new Date(t.updated_at).getTime()))\n          : 0,\n    },\n  });\n}\n\nexport async function handlePostTruck(truckData: any) {\n  const newTruck = await FoodTruckService.createTruck(truckData);\n  return NextResponse.json(\n    {\n      message: 'Food truck created successfully',\n      truck: newTruck,\n    },\n    { status: 201 },\n  );\n}\n\nexport async function handlePutTruck(id: string, updates: any) {\n  const updatedTruck = await FoodTruckService.updateTruck(id, updates);\n  return NextResponse.json({\n    message: 'Food truck updated successfully',\n    truck: updatedTruck,\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/auth/authHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'NextRequest'.","line":1,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":1,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[9,22],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"max-params","severity":2,"message":"Async function 'handleSuccessfulAuth' has too many parameters (5). Maximum allowed is 4.","line":12,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":12,"endColumn":43}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { User } from '@supabase/supabase-js';\nimport { supabase } from '@/lib/supabase';\nimport { RateLimiter } from '@/lib/security/rateLimiter';\nimport { AuditLogger } from '@/lib/security/auditLogger';\n\ninterface RequestMetadata {\n  ip: string;\n  userAgent: string;\n}\n\nexport async function handleSuccessfulAuth(\n  user: User,\n  redirectTo: string,\n  origin: string,\n  identifier: string,\n  requestMetadata: RequestMetadata,\n) {\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('role')\n    .eq('id', user.id)\n    .single();\n\n  await AuditLogger.logAuthEvent(\n    'login_success',\n    user.email,\n    user.id,\n    requestMetadata,\n    { provider: 'google', role: profile?.role },\n  );\n\n  RateLimiter.recordSuccess(identifier, 'auth');\n\n  if (profile?.role === 'admin') {\n    return NextResponse.redirect(`${origin}${redirectTo}`);\n  } else {\n    await AuditLogger.logSecurityEvent({\n      event_type: 'permission_denied',\n      user_id: user.id,\n      user_email: user.email,\n      ip_address: requestMetadata.ip,\n      user_agent: requestMetadata.userAgent,\n      details: {\n        reason: 'insufficient_role',\n        user_role: profile?.role ?? 'none',\n      },\n      severity: 'warning',\n    });\n    return NextResponse.redirect(`${origin}/access-denied`);\n  }\n}\n\nexport async function handleAuthFailure(\n  error: Error,\n  identifier: string,\n  requestMetadata: RequestMetadata,\n) {\n  await AuditLogger.logAuthEvent(\n    'login_failure',\n    undefined,\n    undefined,\n    requestMetadata,\n    { provider: 'google', error: error.message },\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/data-quality/batchCleanup.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static async method 'runFullCleanup' has too many lines (55). Maximum allowed is 50.","line":38,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":92,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Static async method 'removePlaceholders' has too many lines (65). Maximum allowed is 50.","line":187,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":251,"endColumn":4},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 36 to the 15 allowed.","line":187,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":187,"endColumn":42},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":256,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":256,"endColumn":45},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":272,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":283,"endColumn":14},{"ruleId":"max-lines-per-function","severity":2,"message":"Static async method 'fixCoordinates' has too many lines (54). Maximum allowed is 50.","line":295,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":348,"endColumn":4},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 29 to the 15 allowed.","line":295,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":295,"endColumn":38},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":330,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":341,"endColumn":14},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":353,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":353,"endColumn":43},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 26 to the 15 allowed.","line":388,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":388,"endColumn":39},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":409,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":416,"endColumn":14}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Batch Data Cleanup System\n * Implements automated data quality improvements and cleanup operations\n */\n\nimport { FoodTruckService, type FoodTruck, DataQualityService } from '@/lib/supabase';\nimport { DuplicatePreventionService } from './duplicatePrevention';\n\nexport interface CleanupOperation {\n  type: 'normalize_phone' | 'fix_coordinates' | 'remove_placeholders' | 'update_quality_scores' | 'merge_duplicates';\n  description: string;\n  affectedCount: number;\n  successCount: number;\n  errorCount: number;\n  errors: string[];\n}\n\nexport interface BatchCleanupResult {\n  totalProcessed: number;\n  operations: CleanupOperation[];\n  summary: {\n    trucksImproved: number;\n    duplicatesRemoved: number;\n    qualityScoreImprovement: number;\n    placeholdersRemoved: number;\n  };\n  duration: number;\n}\n\n/**\n * Automated Data Quality Cleanup Service\n */\nexport class BatchCleanupService {\n  \n  /**\n   * Run comprehensive data cleanup operations\n   */\n  static async runFullCleanup(options: {\n    batchSize?: number;\n    dryRun?: boolean;\n    operations?: CleanupOperation['type'][];\n  } = {}): Promise<BatchCleanupResult> {\n    const startTime = Date.now();\n    const { batchSize = 50, dryRun = false, operations = [\n      'remove_placeholders',\n      'normalize_phone',\n      'fix_coordinates',\n      'update_quality_scores',\n      'merge_duplicates'\n    ] } = options;\n    \n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\n    \n    const result: BatchCleanupResult = {\n      totalProcessed: 0,\n      operations: [],\n      summary: {\n        trucksImproved: 0,\n        duplicatesRemoved: 0,\n        qualityScoreImprovement: 0,\n        placeholdersRemoved: 0\n      },\n      duration: 0\n    };\n    \n    try {\n      // Get all trucks for processing\n      const allTrucks = await FoodTruckService.getAllTrucks();\n      result.totalProcessed = allTrucks.total;\n      \n      // Process trucks in batches\n      for (let i = 0; i < allTrucks.trucks.length; i += batchSize) {\n        const batch = allTrucks.trucks.slice(i, i + batchSize);\n        \n        for (const operation of operations) {\n          const opResult = await this.runOperation(operation, batch, dryRun);\n          result.operations.push(opResult);\n        }\n      }\n      \n      // Calculate summary\n      result.summary = this.calculateSummary(result.operations);\n      result.duration = Date.now() - startTime;\n      \n      console.info(`Batch cleanup completed in ${result.duration}ms`);\n      return result;\n      \n    } catch (error) {\n      console.error('Batch cleanup failed:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Run a specific cleanup operation\n   */\n  private static async runOperation(\n    type: CleanupOperation['type'],\n    trucks: FoodTruck[],\n    dryRun: boolean\n  ): Promise<CleanupOperation> {\n    const operation: CleanupOperation = {\n      type,\n      description: this.getOperationDescription(type),\n      affectedCount: 0,\n      successCount: 0,\n      errorCount: 0,\n      errors: []\n    };\n    \n    try {\n      switch (type) {\n        case 'remove_placeholders': {\n          return await this.removePlaceholders(trucks, dryRun, operation);\n        }\n        case 'normalize_phone': {\n          return await this.normalizePhoneNumbers(trucks, dryRun, operation);\n        }\n        case 'fix_coordinates': {\n          return await this.fixCoordinates(trucks, dryRun, operation);\n        }\n        case 'update_quality_scores': {\n          return await this.updateQualityScores(trucks, dryRun, operation);\n        }\n        case 'merge_duplicates': {\n          return await this.mergeDuplicates(trucks, dryRun, operation);\n        }\n        default: {\n          operation.errors.push(`Unknown operation type: ${String(type)}`);\n          return operation;\n        }\n      }\n    } catch (error) {\n      operation.errors.push(`Operation failed: ${error instanceof Error ? error.message : String(error)}`);\n      return operation;\n    }\n  }\n  \n  /**\n   * Get placeholder detection patterns\n   */\n  private static getPlaceholderPatterns(): RegExp[] {\n    return [\n      /undefined/i,\n      /placeholder/i,\n      /example\\.com/i,\n      /test\\s*truck/i,\n      /lorem\\s*ipsum/i,\n      /\\bna\\b/i,\n      /\\bn\\/a\\b/i,\n      /^0+$/,\n      /^null$/i\n    ];\n  }\n\n  /**\n   * Check if truck data needs placeholder cleanup\n   */\n  private static checkForPlaceholders(truck: FoodTruck, patterns: RegExp[]): { updates: Partial<FoodTruck>; needsUpdate: boolean } {\n    const updates: Partial<FoodTruck> = {};\n    let needsUpdate = false;\n\n    // Check name\n    if (truck.name && patterns.some(pattern => pattern.test(truck.name ?? ''))) {\n      updates.name = undefined;\n      needsUpdate = true;\n    }\n\n    // Check description\n    if (truck.description !== undefined && typeof truck.description === 'string' && patterns.some(pattern => pattern.test(truck.description ?? ''))) {\n      updates.description = undefined;\n      needsUpdate = true;\n    }\n\n    // Check price range\n    if (truck.price_range !== undefined && typeof truck.price_range === 'string' && patterns.some(pattern => pattern.test(truck.price_range ?? ''))) {\n      updates.price_range = undefined;\n      needsUpdate = true;\n    }\n\n    return { updates, needsUpdate };\n  }\n\n  /**\n   * Remove placeholder and mock data\n   */\n  private static async removePlaceholders(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    const placeholderPatterns = this.getPlaceholderPatterns();\n\n    for (const truck of trucks) {\n      const { updates, needsUpdate: initialNeedsUpdate } = this.checkForPlaceholders(truck, placeholderPatterns);\n      let needsUpdate = initialNeedsUpdate;\n\n      // Check contact info\n      if (truck.contact_info) {\n        const cleanContact = { ...truck.contact_info };\n        let contactUpdated = false;\n\n        if (cleanContact.phone !== undefined && typeof cleanContact.phone === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.phone ?? ''))) {\n          cleanContact.phone = undefined;\n          contactUpdated = true;\n        }\n\n        if (cleanContact.website !== undefined && typeof cleanContact.website === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.website ?? ''))) {\n          cleanContact.website = undefined;\n          contactUpdated = true;\n        }\n\n        if (cleanContact.email !== undefined && typeof cleanContact.email === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.email ?? ''))) {\n          cleanContact.email = undefined;\n          contactUpdated = true;\n        }\n\n        if (contactUpdated) {\n          updates.contact_info = cleanContact;\n          needsUpdate = true;\n        }\n      }\n\n      // Check address\n      if (truck.current_location?.address !== undefined && typeof truck.current_location.address === 'string' && placeholderPatterns.some(pattern => pattern.test(truck.current_location.address ?? ''))) {\n        updates.current_location = {\n          ...truck.current_location,\n          address: undefined\n        };\n        needsUpdate = true;\n      }\n      \n      if (needsUpdate) {\n        operation.affectedCount++;\n        \n        if (dryRun) {\n          operation.successCount++;\n        } else {\n          try {\n            await FoodTruckService.updateTruck(truck.id, updates);\n            operation.successCount++;\n          } catch (error) {\n            operation.errorCount++;\n            operation.errors.push(`Failed to update truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Normalize phone numbers to consistent format\n   */\n  private static async normalizePhoneNumbers(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    for (const truck of trucks) {\n      if (truck.contact_info?.phone !== undefined) {\n        const originalPhone = truck.contact_info.phone;\n        const normalizedPhone = this.normalizePhone(originalPhone);\n\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\n          operation.affectedCount++;\n          \n          if (dryRun) {\n            operation.successCount++;\n          } else {\n            try {\n              await FoodTruckService.updateTruck(truck.id, {\n                contact_info: {\n                  ...truck.contact_info,\n                  phone: normalizedPhone\n                }\n              });\n              operation.successCount++;\n            } catch (error) {\n              operation.errorCount++;\n              operation.errors.push(`Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n            }\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Fix invalid GPS coordinates\n   */\n  private static async fixCoordinates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    // Charleston, SC default coordinates\n    const defaultLat = 32.7767;\n    const defaultLng = -79.9311;\n    \n    for (const truck of trucks) {\n      if (truck.current_location != undefined) {\n        const { lat, lng } = truck.current_location;\n        let needsUpdate = false;\n        const updates: Partial<FoodTruck['current_location']> = {};\n\n        // Fix invalid coordinates (0,0 or null)\n        if (lat == undefined || lat === 0 || lng == undefined || lng === 0) {\n          updates.lat = defaultLat;\n          updates.lng = defaultLng;\n          needsUpdate = true;\n        }\n\n        // Fix coordinates outside reasonable bounds for Charleston area\n        if (lat != undefined && lng != undefined && (lat < 32 || lat > 34 || lng > -79 || lng < -81)) {\n          updates.lat = defaultLat;\n          updates.lng = defaultLng;\n          needsUpdate = true;\n        }\n        \n        if (needsUpdate) {\n          operation.affectedCount++;\n          \n          if (dryRun) {\n            operation.successCount++;\n          } else {\n            try {\n              await FoodTruckService.updateTruck(truck.id, {\n                current_location: {\n                  ...truck.current_location,\n                  ...updates\n                }\n              });\n              operation.successCount++;\n            } catch (error) {\n              operation.errorCount++;\n              operation.errors.push(`Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n            }\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Update quality scores for all trucks\n   */\n  private static async updateQualityScores(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    for (const truck of trucks) {\n      const qualityAssessment: { score: number } = DataQualityService.calculateQualityScore(truck);\n      const newScore: number = qualityAssessment.score;\n      const currentScore = truck.data_quality_score ?? 0;\n      \n      // Only update if score changed significantly (>5% difference)\n      if (Math.abs(newScore - currentScore) > 0.05) {\n        operation.affectedCount++;\n        \n        if (dryRun) {\n          operation.successCount++;\n        } else {\n          try {\n             \n            await DataQualityService.updateTruckQualityScore(truck.id);\n            operation.successCount++;\n          } catch (error) {\n            operation.errorCount++;\n            operation.errors.push(`Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Identify and merge duplicate trucks\n   */\n  private static async mergeDuplicates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    const processedIds = new Set<string>();\n    \n    for (const truck of trucks) {\n      if (processedIds.has(truck.id)) continue;\n      \n      const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\n      \n      if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\n        const { bestMatch } = duplicateCheck;\n        \n        if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\n          operation.affectedCount++;\n          \n          if (dryRun) {\n            operation.successCount++;\n          } else {\n            try {\n              await DuplicatePreventionService.mergeDuplicates(truck.id, bestMatch.existingTruck.id);\n              processedIds.add(bestMatch.existingTruck.id);\n              operation.successCount++;\n            } catch (error) {\n              operation.errorCount++;\n              operation.errors.push(`Failed to merge duplicates ${truck.id} and ${bestMatch.existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`);\n            }\n          }\n        }\n      }\n      \n      processedIds.add(truck.id);\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Normalize phone number format\n   */\n  private static normalizePhone(phone: string): string | undefined {\n    if (!phone) return undefined;\n    \n    // Remove all non-digit characters\n    const digits = phone.replaceAll(/\\D/g, '');\n    \n    // Handle US phone numbers\n    if (digits.length === 10) {\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\n    } else if (digits.length === 11 && digits[0] === '1') {\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\n    }\n    \n    // Return original if can't normalize\n    return phone;\n  }\n  \n  /**\n   * Get operation description\n   */\n  private static getOperationDescription(type: CleanupOperation['type']): string {\n    const descriptions = {\n      remove_placeholders: 'Remove placeholder and mock data values',\n      normalize_phone: 'Normalize phone numbers to consistent format',\n      fix_coordinates: 'Fix invalid GPS coordinates',\n      update_quality_scores: 'Recalculate data quality scores',\n      merge_duplicates: 'Identify and merge duplicate truck entries'\n    };\n    \n    return descriptions[type] ?? 'Unknown operation';\n  }\n  \n  /**\n   * Calculate cleanup summary\n   */\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\n    return {\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\n      duplicatesRemoved: operations.find(op => op.type === 'merge_duplicates')?.successCount ?? 0,\n      qualityScoreImprovement: operations.find(op => op.type === 'update_quality_scores')?.successCount ?? 0,\n      placeholdersRemoved: operations.find(op => op.type === 'remove_placeholders')?.successCount ?? 0\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/data-quality/duplicatePrevention.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static method 'calculateSimilarity' has too many lines (57). Maximum allowed is 50.","line":101,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":157,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Duplicate Prevention System\n * Implements intelligent duplicate detection and prevention for food truck data\n */\n\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\n\n// Duplicate detection configuration\nexport const DUPLICATE_DETECTION_CONFIG = {\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\n  thresholds: {\n    name: 0.85,        // High threshold for name matching\n    location: 0.9,     // Very high threshold for location matching\n    phone: 1,        // Exact match for phone numbers\n    website: 1,      // Exact match for websites\n    overall: 0.8       // Overall similarity threshold\n  },\n  \n  // Weight factors for different fields\n  weights: {\n    name: 0.4,         // 40% weight for name similarity\n    location: 0.3,     // 30% weight for location similarity\n    contact: 0.2,      // 20% weight for contact info similarity\n    menu: 0.1          // 10% weight for menu similarity\n  }\n} as const;\n\nexport interface DuplicateMatch {\n  existingTruck: FoodTruck;\n  similarity: number;\n  matchedFields: string[];\n  confidence: 'high' | 'medium' | 'low';\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\n}\n\nexport interface DuplicateDetectionResult {\n  isDuplicate: boolean;\n  matches: DuplicateMatch[];\n  bestMatch?: DuplicateMatch;\n  action: 'create' | 'update' | 'merge' | 'manual_review';\n  reason: string;\n}\n\n/**\n * Advanced Duplicate Prevention Service\n */\nexport class DuplicatePreventionService {\n  \n  /**\n   * Check if a food truck is a duplicate of existing trucks\n   */\n  static async checkForDuplicates(candidateTruck: Partial<FoodTruck>): Promise<DuplicateDetectionResult> {\n    try {\n      // Get all existing trucks for comparison\n      const existingTrucks = await FoodTruckService.getAllTrucks();\n      \n      const matches: DuplicateMatch[] = [];\n      \n      for (const existingTruck of existingTrucks.trucks) {\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\n        \n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\n          matches.push({\n            existingTruck,\n            similarity: similarity.overall,\n            matchedFields: similarity.matchedFields,\n            confidence: this.getConfidenceLevel(similarity.overall),\n            recommendation: this.getRecommendation(similarity)\n          });\n        }\n      }\n      \n      // Sort matches by similarity (highest first)\n      matches.sort((a, b) => b.similarity - a.similarity);\n      \n      const bestMatch = matches[0];\n      const isDuplicate = matches.length > 0;\n      \n      return {\n        isDuplicate,\n        matches,\n        bestMatch,\n        action: this.determineAction(matches, candidateTruck),\n        reason: this.generateReason(matches, candidateTruck)\n      };\n      \n    } catch (error) {\n      console.error('Error checking for duplicates:', error);\n      return {\n        isDuplicate: false,\n        matches: [],\n        action: 'create',\n        reason: 'Error during duplicate detection - proceeding with creation'\n      };\n    }\n  }\n  \n  /**\n   * Calculate similarity between two food trucks\n   */\n  private static calculateSimilarity(\n    candidate: Partial<FoodTruck>, \n    existing: FoodTruck\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\n    const breakdown: Record<string, number> = {};\n    const matchedFields: string[] = [];\n    \n    // Name similarity\n    const nameSimilarity = this.calculateStringSimilarity(\n      candidate.name ?? '', \n      existing.name ?? ''\n    );\n    breakdown.name = nameSimilarity;\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\n      matchedFields.push('name');\n    }\n    \n    // Location similarity\n    const locationSimilarity = this.calculateLocationSimilarity(\n      candidate.current_location,\n      existing.current_location\n    );\n    breakdown.location = locationSimilarity;\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\n      matchedFields.push('location');\n    }\n    \n    // Contact similarity\n    const contactSimilarity = this.calculateContactSimilarity(\n      candidate.contact_info,\n      existing.contact_info\n    );\n    breakdown.contact = contactSimilarity;\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\n      matchedFields.push('contact');\n    }\n    \n    // Menu similarity (basic)\n    const menuSimilarity = this.calculateMenuSimilarity(\n      candidate.menu,\n      existing.menu\n    );\n    breakdown.menu = menuSimilarity;\n    if (menuSimilarity > 0.7) {\n      matchedFields.push('menu');\n    }\n    \n    // Calculate weighted overall similarity\n    const overall = (\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu\n    );\n    \n    return { overall, matchedFields, breakdown };\n  }\n  \n  /**\n   * Calculate string similarity using Levenshtein distance\n   */\n  private static calculateStringSimilarity(str1: string, str2: string): number {\n    if (!str1 || !str2) return 0;\n    \n    // Normalize strings\n    const s1 = str1.toLowerCase().trim();\n    const s2 = str2.toLowerCase().trim();\n    \n    if (s1 === s2) return 1;\n    \n    // Calculate Levenshtein distance\n    const matrix: number[][] = [];\n    const len1 = s1.length;\n    const len2 = s2.length;\n    \n    for (let i = 0; i <= len1; i++) {\n      matrix[i] = [i];\n    }\n    \n    for (let j = 0; j <= len2; j++) {\n      matrix[0][j] = j;\n    }\n    \n    for (let i = 1; i <= len1; i++) {\n      for (let j = 1; j <= len2; j++) {\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1,      // deletion\n          matrix[i][j - 1] + 1,      // insertion\n          matrix[i - 1][j - 1] + cost // substitution\n        );\n      }\n    }\n    \n    const distance = matrix[len1][len2];\n    const maxLength = Math.max(len1, len2);\n    \n    return maxLength === 0 ? 1 : 1 - (distance / maxLength);\n  }\n  \n  /**\n   * Calculate location similarity\n   */\n  private static calculateLocationSimilarity(\n    loc1: FoodTruck['current_location'],\n    loc2: FoodTruck['current_location']\n  ): number {\n    if (loc1 == undefined || loc2 == undefined) return 0;\n    \n    let similarity = 0;\n    let factors = 0;\n    \n    // Address similarity\n    if (loc1.address != undefined && loc2.address != undefined) {\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\n      factors++;\n    }\n    \n    // GPS coordinate similarity (within 100 meters = high similarity)\n    if (loc1.lat != undefined && loc1.lng != undefined && loc2.lat != undefined && loc2.lng != undefined) {\n      const distance = this.calculateGPSDistance(\n        loc1.lat, loc1.lng,\n        loc2.lat, loc2.lng\n      );\n      \n      // Distance similarity (closer = higher similarity)\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - (distance / 1)); // 1km max\n      similarity += distanceSimilarity;\n      factors++;\n    }\n    \n    return factors > 0 ? similarity / factors : 0;\n  }\n  \n  /**\n   * Calculate GPS distance in kilometers\n   */\n  private static calculateGPSDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n  \n  /**\n   * Calculate contact similarity\n   */\n  private static calculateContactSimilarity(\n    contact1: FoodTruck['contact_info'],\n    contact2: FoodTruck['contact_info']\n  ): number {\n    if (!contact1 || !contact2) return 0;\n    \n    let matches = 0;\n    let total = 0;\n    \n    // Phone number exact match\n    if (contact1.phone != undefined && contact2.phone != undefined) {\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\n      if (phone1 === phone2) matches++;\n      total++;\n    }\n    \n    // Website exact match\n    if (contact1.website != undefined && contact2.website != undefined) {\n      const url1 = contact1.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\n      const url2 = contact2.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\n      if (url1 === url2) matches++;\n      total++;\n    }\n    \n    // Email similarity\n    if (contact1.email != undefined && contact2.email != undefined) {\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches++;\n      total++;\n    }\n    \n    return total > 0 ? matches / total : 0;\n  }\n  \n  /**\n   * Calculate menu similarity (basic implementation)\n   */\n  private static calculateMenuSimilarity(\n    menu1: FoodTruck['menu'],\n    menu2: FoodTruck['menu']\n  ): number {\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\n    \n    // Simple category name matching\n    const categories1 = menu1.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\n    const categories2 = menu2.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\n    \n    const commonCategories = categories1.filter(cat => categories2.includes(cat));\n    const totalCategories = new Set([...categories1, ...categories2]).size;\n    \n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\n  }\n  \n  /**\n   * Get confidence level based on similarity score\n   */\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\n    if (similarity >= 0.95) return 'high';\n    if (similarity >= 0.85) return 'medium';\n    return 'low';\n  }\n  \n  /**\n   * Get recommendation based on similarity analysis\n   */\n  private static getRecommendation(similarity: { overall: number; matchedFields: string[] }): 'merge' | 'update' | 'skip' | 'manual_review' {\n    if (similarity.overall >= 0.95) return 'merge';\n    if (similarity.overall >= 0.9) return 'update';\n    if (similarity.overall >= 0.8) return 'manual_review';\n    return 'skip';\n  }\n  \n  /**\n   * Determine action based on matches\n   */\n  private static determineAction(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): 'create' | 'update' | 'merge' | 'manual_review' {\n    if (matches.length === 0) return 'create';\n    \n    const bestMatch = matches[0];\n    \n    if (bestMatch.confidence === 'high') {\n      const recommendation = bestMatch.recommendation;\n      if (recommendation === 'merge' || recommendation === 'update') {\n        return recommendation;\n      }\n      return 'manual_review';\n    }\n    \n    return 'manual_review';\n  }\n  \n  /**\n   * Generate human-readable reason\n   */\n  private static generateReason(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): string {\n    if (matches.length === 0) {\n      return 'No duplicates found - safe to create new truck entry';\n    }\n    \n    const bestMatch = matches[0];\n    const similarity = Math.round(bestMatch.similarity * 100);\n    \n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\n  }\n  \n  /**\n   * Merge duplicate truck data intelligently\n   */\n  static async mergeDuplicates(targetId: string, sourceId: string): Promise<FoodTruck> {\n    const target = await FoodTruckService.getTruckById(targetId);\n    const source = await FoodTruckService.getTruckById(sourceId);\n    \n    // Merge logic: prefer non-null, more complete data\n    const mergedData: Partial<FoodTruck> = {\n      name: target.name ?? source.name,\n      description: target.description ?? source.description,\n      cuisine_type: (target.cuisine_type?.length ?? 0) > 0 ? target.cuisine_type : source.cuisine_type,\n      price_range: target.price_range ?? source.price_range,\n      current_location: target.current_location ?? source.current_location,\n      contact_info: {\n        ...source.contact_info,\n        ...target.contact_info // Target takes precedence\n      },\n      operating_hours: target.operating_hours ?? source.operating_hours,\n      menu: (target.menu?.length ?? 0) > 0 ? target.menu : source.menu,\n      social_media: {\n        ...source.social_media,\n        ...target.social_media\n      },\n      source_urls: [...new Set([...(target.source_urls ?? []), ...(source.source_urls ?? [])])],\n      last_scraped_at: new Date().toISOString()\n    };\n\n    // Update target with merged data\n    const updatedTruck = await FoodTruckService.updateTruck(targetId, mergedData);\n\n    // Note: Delete functionality would need to be implemented in FoodTruckService\n    console.info(`Merged truck ${sourceId} into ${targetId}`);\n    \n    return updatedTruck;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/discoveryEngine.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'isFoodTruckUrl' has too many lines (86). Maximum allowed is 50.","line":363,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":448,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'storeDiscoveredUrl' has too many lines (58). Maximum allowed is 50.","line":605,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":662,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/discoveryEngine.ts\nimport { supabaseAdmin } from './supabase';\nimport { SC_TARGET_CITIES, DISCOVERY_CONFIG } from './config';\n\nexport interface DiscoveredUrl {\n  url: string;\n  source_directory_url?: string;\n  region?: string;\n  status: 'new' | 'processing' | 'processed' | 'irrelevant';\n  notes?: string;\n}\n\nexport interface DiscoveryResult {\n  urls_discovered: number;\n  urls_stored: number;\n  urls_duplicates: number;\n  errors: string[];\n}\n\n/**\n * Autonomous Discovery Engine\n *\n * This engine discovers new food truck websites across South Carolina using Tavily for search\n * and Firecrawl for crawling. It operates autonomously without human intervention, finding and\n * validating new URLs to add to the discovered_urls table for subsequent scraping.\n *\n * Strategy:\n * 1. Search for food trucks in each SC city using Tavily search\n * 2. Find food truck directories and event listings using Firecrawl crawling\n * 3. Extract individual food truck website URLs from discovered content\n * 4. Validate and filter URLs to avoid false positives\n * 5. Store new URLs in discovered_urls table for processing\n *\n * NOTE: Uses Tavily for search operations and Firecrawl for crawling/scraping\n */\n\n// Helper functions to call APIs\n// Use Tavily for search, Firecrawl for crawling/scraping\ninterface TavilySearchResult {\n  url: string;\n  content?: string;\n  raw_content?: string;\n}\n\nasync function tavilySearch(\n  query: string,\n  options: Record<string, unknown> = {},\n): Promise<TavilySearchResult[]> {\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL ?? 'http://localhost:3003';\n  const response = await fetch(`${baseUrl}/api/tavily`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      operation: 'search',\n      params: {\n        query,\n        limit: options.limit ?? 10,\n        ...options,\n      },\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(`Tavily search failed: ${response.statusText}`);\n  }\n\n  const result = (await response.json()) as {\n    data?: { results?: TavilySearchResult[] };\n    results?: TavilySearchResult[];\n  };\n  return result.data?.results ?? result.results ?? [];\n}\n\ninterface CrawlResult {\n  url: string;\n}\n\nasync function firecrawlCrawl(\n  url: string,\n  options: Record<string, unknown> = {},\n): Promise<CrawlResult[]> {\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL ?? 'http://localhost:3003';\n  const response = await fetch(`${baseUrl}/api/firecrawl`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      operation: 'crawl',\n      url,\n      options: {\n        maxDepth: options.maxDepth ?? 2,\n        limit: options.limit ?? 20,\n        ...options,\n      },\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(`Firecrawl crawl failed: ${response.statusText}`);\n  }\n\n  const result = (await response.json()) as { data: CrawlResult[] };\n  return result.data ?? [];\n}\n\nexport class FoodTruckDiscoveryEngine {\n  private readonly searchTerms = [\n    'food truck South Carolina',\n    'mobile food vendor SC',\n    'food truck Charleston',\n    'food truck Columbia SC',\n    'food truck Greenville SC',\n    'street food South Carolina',\n    'food truck directory SC',\n  ];\n\n  private readonly directoryUrls = [\n    'https://www.foodtrucksin.com/south-carolina',\n    'https://www.roaminghunger.com/sc/',\n    'https://southcarolinafoodtrucks.com',\n    'https://www.yelp.com/sc/food-trucks',\n  ];\n\n  // Helper method to process search results\n  private async processSearchResults(\n    searchResults: TavilySearchResult[],\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    for (const result of searchResults) {\n      if (result.url && (await this.isFoodTruckUrl(result.url))) {\n        discoveredUrls.add(result.url);\n      }\n\n      // Extract URLs from content\n      if (result.content != undefined || result.raw_content != undefined) {\n        const content = result.content ?? result.raw_content ?? '';\n        const extractedUrls = this.extractFoodTruckUrls(content);\n        for (const url of extractedUrls) {\n          if (await this.isFoodTruckUrl(url)) {\n            discoveredUrls.add(url);\n          }\n        }\n      }\n    }\n  }\n\n  // Helper method to perform search term discovery\n  private async performSearchTermDiscovery(\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    for (const searchTerm of this.searchTerms) {\n      try {\n        console.info(`🔍 Searching for: ${searchTerm}`);\n\n        const searchResults = await tavilySearch(searchTerm, {\n          limit: DISCOVERY_CONFIG.searchResultsLimit,\n        });\n\n        if (searchResults != undefined && searchResults.length > 0) {\n          await this.processSearchResults(searchResults, discoveredUrls);\n        }\n      } catch (error) {\n        console.error(`❌ Search failed for \"${searchTerm}\":`, error);\n        results.errors.push(\n          `Search failed for \"${searchTerm}\": ${error instanceof Error ? error.message : 'Unknown error'}`,\n        );\n      }\n\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\n    }\n  }\n\n  // Helper method to perform directory crawling\n  private async performDirectoryCrawling(\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    for (const directoryUrl of this.directoryUrls) {\n      await this.crawlSingleDirectory(directoryUrl, discoveredUrls, results);\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\n    }\n  }\n\n  // Helper method to crawl a single directory\n  private async crawlSingleDirectory(\n    directoryUrl: string,\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    try {\n      console.info(`🕷️ Crawling directory: ${directoryUrl}`);\n\n      const crawlResults = await firecrawlCrawl(directoryUrl, {\n        maxDepth: DISCOVERY_CONFIG.maxDepthCrawl,\n        limit: DISCOVERY_CONFIG.maxUrlsPerRun,\n      });\n\n      await this.processCrawlResults(crawlResults, discoveredUrls);\n    } catch (error) {\n      console.error(`❌ Crawl failed for ${directoryUrl}:`, error);\n      results.errors.push(\n        `Crawl failed for ${directoryUrl}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  // Helper method to process crawl results\n  private async processCrawlResults(\n    crawlResults: unknown,\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    if (crawlResults != undefined && Array.isArray(crawlResults) && crawlResults.length > 0) {\n      for (const result of crawlResults) {\n        if (typeof result === 'object' && result !== null && 'url' in result) {\n          const resultUrl = (result as { url?: string }).url;\n          if (\n            resultUrl != undefined &&\n            typeof resultUrl === 'string' &&\n            (await this.isFoodTruckUrl(resultUrl))\n          ) {\n            discoveredUrls.add(resultUrl);\n          }\n        }\n      }\n    }\n  }\n\n  // Helper method to perform location-specific discovery\n  private async performLocationDiscovery(\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    for (const city of SC_TARGET_CITIES) {\n      await this.searchSingleCity(city, discoveredUrls, results);\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\n    }\n  }\n\n  // Helper method to search a single city\n  private async searchSingleCity(\n    city: string,\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    try {\n      console.info(`📍 Searching for food trucks in ${city}, SC`);\n      const locationQuery = `food trucks in ${city} South Carolina`;\n      const searchResults = await tavilySearch(locationQuery, {\n        limit: 5,\n      });\n\n      await this.processLocationSearchResults(searchResults, discoveredUrls);\n    } catch (error) {\n      console.error(`❌ Location search failed for ${city}:`, error);\n      results.errors.push(\n        `Location search failed for ${city}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  // Helper method to process location search results\n  private async processLocationSearchResults(\n    searchResults: unknown,\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    if (searchResults != undefined && Array.isArray(searchResults) && searchResults.length > 0) {\n      for (const result of searchResults) {\n        if (typeof result === 'object' && result !== null && 'url' in result) {\n          const resultUrl = (result as { url?: string }).url;\n          if (\n            resultUrl != undefined &&\n            typeof resultUrl === 'string' &&\n            (await this.isFoodTruckUrl(resultUrl))\n          ) {\n            discoveredUrls.add(resultUrl);\n          }\n        }\n      }\n    }\n  }\n\n  // Helper method to store discovered URLs from discovery process\n  private async storeDiscoveredUrlsFromDiscovery(\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    for (const url of discoveredUrls) {\n      try {\n        const stored = await this.storeDiscoveredUrl(url, 'autonomous_search', {\n          search_context: 'full_discovery',\n          discovery_timestamp: new Date().toISOString(),\n        });\n        if (stored.isNew === true) {\n          results.urls_stored++;\n        } else {\n          results.urls_duplicates++;\n        }\n      } catch (error) {\n        console.error(`❌ Failed to store URL ${url}:`, error);\n        results.errors.push(\n          `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        );\n      }\n    }\n  }\n\n  async discoverNewFoodTrucks(): Promise<DiscoveryResult> {\n    console.info('🔍 Starting autonomous food truck discovery...');\n\n    const results: DiscoveryResult = {\n      urls_discovered: 0,\n      urls_stored: 0,\n      urls_duplicates: 0,\n      errors: [],\n    };\n\n    const discoveredUrls = new Set<string>();\n\n    // 1. Search for food trucks using Tavily search\n    await this.performSearchTermDiscovery(discoveredUrls, results);\n\n    // 2. Crawl known food truck directory sites\n    await this.performDirectoryCrawling(discoveredUrls, results);\n\n    // 3. Location-specific discovery for SC cities\n    await this.performLocationDiscovery(discoveredUrls, results);\n\n    results.urls_discovered = discoveredUrls.size;\n    console.info(`🎯 Discovered ${results.urls_discovered} potential food truck URLs`);\n\n    // 4. Store new URLs in database\n    await this.storeDiscoveredUrlsFromDiscovery(discoveredUrls, results);\n\n    console.info(\n      `✅ Discovery complete: ${results.urls_stored} new URLs stored, ${results.urls_duplicates} duplicates skipped`,\n    );\n\n    return results;\n  }\n  private extractFoodTruckUrls(content: string): string[] {\n    const urls: string[] = [];\n\n    // Look for URL patterns in content - using a safer regex to avoid backtracking\n    const urlRegex = /https?:\\/\\/[^\\s<>\"']{1,200}/g;\n    const foundUrls = content.match(urlRegex) ?? [];\n\n    for (const url of foundUrls) {\n      try {\n        // Basic URL validation\n        new URL(url);\n        // Remove trailing punctuation - using safer regex to avoid backtracking\n        const cleanUrl = url.replace(/[.,;!?]$/, '');\n        urls.push(cleanUrl);\n      } catch {\n        // Invalid URL, skip\n        continue;\n      }\n    }\n\n    return urls;\n  }\n\n  private async isFoodTruckUrl(url: string): Promise<boolean> {\n    try {\n      // Basic URL validation\n      new URL(url);\n\n      // Food truck indicators in URL\n      const foodTruckKeywords = [\n        'food-truck',\n        'foodtruck',\n        'mobile-food',\n        'street-food',\n        'truck',\n        'kitchen',\n        'eats',\n        'bbq',\n        'burger',\n        'taco',\n        'catering',\n        'mobile',\n        'chef',\n        'bistro',\n        'cafe',\n      ];\n\n      // Blacklist - skip these domains\n      const blacklistKeywords = [\n        'facebook.com',\n        'instagram.com',\n        'twitter.com',\n        'linkedin.com',\n        'youtube.com',\n        'yelp.com',\n        'google.com',\n        'maps.google.com',\n        'foursquare.com',\n        'tripadvisor.com',\n        'zomato.com',\n        'eventbrite.com',\n        'meetup.com',\n      ];\n\n      const urlLower = url.toLowerCase();\n\n      // Skip social media and review sites\n      if (blacklistKeywords.some((keyword) => urlLower.includes(keyword))) {\n        return false;\n      }\n\n      // Check if we already have this URL in discovered_urls\n      if (supabaseAdmin == undefined) {\n        return false;\n      }\n\n      const { data: existingDiscovered } = await supabaseAdmin\n        .from('discovered_urls')\n        .select('id')\n        .eq('url', url)\n        .limit(1);\n\n      if (existingDiscovered != undefined && existingDiscovered.length > 0) {\n        return false; // Already discovered\n      }\n\n      // Check if we already have this URL in food_trucks\n      const { data: existingTrucks } = await supabaseAdmin\n        .from('food_trucks')\n        .select('id')\n        .contains('source_urls', [url])\n        .limit(1);\n\n      if (existingTrucks != undefined && existingTrucks.length > 0) {\n        return false; // Already have this URL\n      }\n\n      // Accept if has food truck keywords or if it's a business domain\n      return (\n        foodTruckKeywords.some((keyword) => urlLower.includes(keyword)) ||\n        (/\\.(com|net|org|biz|info)/.test(urlLower) &&\n          !urlLower.includes('blog') &&\n          !urlLower.includes('news'))\n      );\n    } catch (error) {\n      console.error('Error validating food truck URL:', error);\n      return false;\n    }\n  }\n\n  async getLocationSpecificDiscovery(city: string, state: string = 'SC'): Promise<DiscoveryResult> {\n    console.info(`🔍 Starting location-specific discovery for ${city}, ${state}`);\n\n    const locationQuery = `food trucks in ${city} ${state}`;\n    const results: DiscoveryResult = {\n      urls_discovered: 0,\n      urls_stored: 0,\n      urls_duplicates: 0,\n      errors: [],\n    };\n\n    const discoveredUrls = new Set<string>();\n\n    try {\n      await this.performLocationSpecificSearch(locationQuery, discoveredUrls);\n      results.urls_discovered = discoveredUrls.size;\n      await this.storeLocationDiscoveryResults({ discoveredUrls, locationQuery, city, state, results });\n    } catch (error) {\n      console.error(`❌ Location search failed for ${city}:`, error);\n      results.errors.push(\n        `Location search failed for ${city}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n\n    console.info(\n      `✅ Location discovery complete for ${city}: ${results.urls_stored} new URLs stored`,\n    );\n    return results;\n  }\n\n  // Helper method to perform location-specific search\n  private async performLocationSpecificSearch(\n    locationQuery: string,\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    const searchResults = await tavilySearch(locationQuery, { limit: 15 });\n\n    if (searchResults != undefined && searchResults.length > 0) {\n      for (const result of searchResults) {\n        await this.processSearchResult(result, discoveredUrls);\n      }\n    }\n  }\n\n  // Helper method to process a single search result\n  private async processSearchResult(result: unknown, discoveredUrls: Set<string>): Promise<void> {\n    if (typeof result === 'object' && result !== null && 'url' in result) {\n      const resultUrl = (result as { url?: string }).url;\n      if (resultUrl != undefined && resultUrl !== '' && (await this.isFoodTruckUrl(resultUrl))) {\n        discoveredUrls.add(resultUrl);\n      }\n\n      // Extract URLs from content\n      await this.extractUrlsFromContent(result, discoveredUrls);\n    }\n  }\n\n  // Helper method to extract URLs from content\n  private async extractUrlsFromContent(\n    result: unknown,\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    if (typeof result === 'object' && result != undefined) {\n      const resultObj = result as { content?: string; raw_content?: string };\n      if (resultObj.content != undefined || resultObj.raw_content != undefined) {\n        const content = resultObj.content ?? resultObj.raw_content ?? '';\n        const extractedUrls = this.extractFoodTruckUrls(content);\n        for (const url of extractedUrls) {\n          if (await this.isFoodTruckUrl(url)) {\n            discoveredUrls.add(url);\n          }\n        }\n      }\n    }\n  }\n\n  // Helper method to store location discovery results\n  private async storeLocationDiscoveryResults(\n    params: {\n      discoveredUrls: Set<string>;\n      locationQuery: string;\n      city: string;\n      state: string;\n      results: DiscoveryResult;\n    }\n  ): Promise<void> {\n    const { discoveredUrls, locationQuery, city, state, results } = params;\n    for (const url of discoveredUrls) {\n      try {\n        const stored = await this.storeDiscoveredUrl(url, 'tavily_search', {\n          search_query: locationQuery,\n          target_city: city,\n          target_state: state,\n        });\n        if (stored.isNew === true) {\n          results.urls_stored++;\n        } else {\n          results.urls_duplicates++;\n        }\n      } catch (error) {\n        console.error(`❌ Failed to store URL ${url}:`, error);\n        results.errors.push(\n          `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        );\n      }\n    }\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Store multiple discovered URLs with metadata\n   */\n  async storeDiscoveredUrls(\n    urls: string[],\n    discoveryMethod: string = 'manual',\n    metadata: Record<string, unknown> = {},\n  ): Promise<{\n    urls_stored: number;\n    urls_duplicates: number;\n    errors: string[];\n  }> {\n    const result: {\n      urls_stored: number;\n      urls_duplicates: number;\n      errors: string[];\n    } = {\n      urls_stored: 0,\n      urls_duplicates: 0,\n      errors: [],\n    };\n\n    for (const url of urls) {\n      try {\n        const stored = await this.storeDiscoveredUrl(url, discoveryMethod, metadata);\n        if (stored.isNew === true) {\n          result.urls_stored++;\n        } else {\n          result.urls_duplicates++;\n        }\n      } catch (error) {\n        const errorMsg = `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`;\n        result.errors.push(errorMsg);\n        console.error(errorMsg);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Enhanced store method with discovery method and metadata\n   */\n  private async storeDiscoveredUrl(\n    url: string,\n    discoveryMethod: string = 'manual',\n    metadata: Record<string, unknown> = {},\n  ): Promise<{ isNew: boolean }> {\n    try {\n      if (!supabaseAdmin) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      // Check if URL already exists\n      const { data: existing } = await supabaseAdmin\n        .from('discovered_urls')\n        .select('id')\n        .eq('url', url)\n        .limit(1);\n\n      if (existing && existing.length > 0) {\n        return { isNew: false };\n      }\n\n      // Store new URL - handle missing columns gracefully\n      const insertData: Record<string, unknown> = {\n        url,\n        status: 'new',\n        notes: `Discovered via ${discoveryMethod}`,\n      };\n\n      // Add optional columns only if they exist in the table\n      try {\n        // Check if discovery_method column exists\n        const { error: testError } = await supabaseAdmin\n          .from('discovered_urls')\n          .select('discovery_method')\n          .limit(1);\n\n        if (!testError) {\n          insertData.discovery_method = discoveryMethod;\n          insertData.region = 'SC';\n          insertData.metadata = metadata;\n        }\n      } catch {\n        // Column doesn't exist, continue without it\n        console.info('Some columns missing in discovered_urls table, using basic structure');\n      }\n\n      const { error } = await supabaseAdmin.from('discovered_urls').insert(insertData);\n\n      if (error) {\n        throw error;\n      }\n\n      return { isNew: true };\n    } catch (error) {\n      console.error('Error storing discovered URL:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for food truck directories\n   */\n  async searchFoodTruckDirectories(\n    query: string = 'food truck directory South Carolina',\n  ): Promise<TavilySearchResult[]> {\n    try {\n      return await tavilySearch(query, { limit: 10 });\n    } catch (error) {\n      console.error('Error searching food truck directories:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Search for food truck websites\n   */\n  async searchFoodTruckWebsites(query: string): Promise<TavilySearchResult[]> {\n    try {\n      return await tavilySearch(query, { limit: 15 });\n    } catch (error) {\n      console.error('Error searching food truck websites:', error);\n      return [];\n    }\n  }\n}\n\nexport const discoveryEngine = new FoodTruckDiscoveryEngine();\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/firecrawl.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'crawlWebsite' has too many lines (60). Maximum allowed is 50.","line":145,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":204,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface FirecrawlResponse {\n  success: boolean;\n  data?: {\n    markdown?: string;\n    html?: string;\n    metadata?: {\n      title?: string;\n      description?: string;\n      language?: string;\n      sourceURL?: string;\n    };\n    links?: string[];\n  };\n  error?: string;\n}\n\ninterface CrawlJobResponse {\n  success: boolean;\n  jobId?: string;\n  error?: string;\n}\n\ninterface ScrapedMetadata {\n  title?: string;\n  description?: string;\n  language?: string;\n  sourceURL?: string;\n}\n\ninterface CrawlStatusResponse {\n  success: boolean;\n  status?: 'scraping' | 'completed' | 'failed';\n  data?: Array<{\n    markdown?: string;\n    html?: string;\n    metadata?: ScrapedMetadata;\n  }>;\n  error?: string;\n}\n\ninterface ContactInfo {\n  phone?: string;\n  email?: string;\n}\n\ninterface SocialMediaInfo {\n  instagram?: string;\n  facebook?: string;\n  twitter?: string;\n}\n\nconst FIRECRAWL_CACHE_TTL_MS = 1000 * 60 * 60 * 12; // 12 hours\nconst firecrawlCache: Record<string, { data: unknown; timestamp: number }> = {};\n\nexport class FirecrawlService {\n  private apiKey: string;\n  private baseUrl: string;\n\n  constructor() {\n    this.apiKey = process.env.FIRECRAWL_API_KEY!;\n    this.baseUrl = 'https://api.firecrawl.dev/v0';\n  }\n\n  private getCachedResult(\n    cacheKey: string,\n  ): FirecrawlResponse | CrawlJobResponse | CrawlStatusResponse | undefined {\n    const now = Date.now();\n    // Clean up expired cache\n    for (const key in firecrawlCache) {\n      if (\n        Object.prototype.hasOwnProperty.call(firecrawlCache, key) &&\n        now - firecrawlCache[key].timestamp > FIRECRAWL_CACHE_TTL_MS\n      ) {\n        delete firecrawlCache[key];\n      }\n    }\n    if (\n      firecrawlCache[cacheKey] != undefined &&\n      now - firecrawlCache[cacheKey].timestamp < FIRECRAWL_CACHE_TTL_MS\n    ) {\n      console.info(`FirecrawlService: Cache hit for ${cacheKey}`);\n      return firecrawlCache[cacheKey].data as\n        | FirecrawlResponse\n        | CrawlJobResponse\n        | CrawlStatusResponse;\n    }\n    return undefined;\n  }\n\n  private setCacheResult(cacheKey: string, data: unknown) {\n    firecrawlCache[cacheKey] = { data, timestamp: Date.now() };\n  }\n\n  async scrapeUrl(\n    url: string,\n    options: {\n      formats?: ('markdown' | 'html')[];\n      includeTags?: string[];\n      excludeTags?: string[];\n      onlyMainContent?: boolean;\n      waitFor?: number;\n    } = {},\n  ): Promise<FirecrawlResponse> {\n    const cacheKey = `scrape:${url}:${JSON.stringify(options)}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) {\n      return cached as FirecrawlResponse;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/scrape`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          url,\n          formats: options.formats ?? ['markdown'],\n          includeTags: options.includeTags,\n          excludeTags: options.excludeTags,\n          onlyMainContent: options.onlyMainContent ?? true,\n          waitFor: options.waitFor ?? 0,\n        }),\n      });\n\n      const data: unknown = await response.json();\n\n      if (!response.ok) {\n        const errorData = data as { error?: string };\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\n      }\n\n      this.setCacheResult(cacheKey, data);\n      return data as FirecrawlResponse;\n    } catch (error: unknown) {\n      console.warn('Firecrawl scrape error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  async crawlWebsite(\n    url: string,\n    options: {\n      crawlerOptions?: {\n        includes?: string[];\n        excludes?: string[];\n        maxDepth?: number;\n        limit?: number;\n      };\n      pageOptions?: {\n        formats?: ('markdown' | 'html')[];\n        onlyMainContent?: boolean;\n      };\n    } = {},\n  ): Promise<CrawlJobResponse> {\n    const cacheKey = `crawl:${url}:${JSON.stringify(options)}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) {\n      return cached as CrawlJobResponse;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/crawl`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          url,\n          crawlerOptions: {\n            maxDepth: 2,\n            limit: 10,\n            ...options.crawlerOptions,\n          },\n          pageOptions: {\n            formats: ['markdown'],\n            onlyMainContent: true,\n            ...options.pageOptions,\n          },\n        }),\n      });\n\n      const data: unknown = await response.json();\n\n      if (!response.ok) {\n        const errorData = data as { error?: string };\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\n      }\n\n      this.setCacheResult(cacheKey, data);\n      return data as CrawlJobResponse;\n    } catch (error: unknown) {\n      console.warn('Firecrawl crawl error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  async getCrawlStatus(jobId: string): Promise<CrawlStatusResponse> {\n    const cacheKey = `crawlStatus:${jobId}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) {\n      return cached as CrawlStatusResponse;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/crawl/status/${jobId}`, {\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n      });\n\n      const data: unknown = await response.json();\n\n      if (!response.ok) {\n        const errorData = data as { error?: string };\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\n      }\n\n      this.setCacheResult(cacheKey, data);\n      return data as CrawlStatusResponse;\n    } catch (error: unknown) {\n      console.warn('Firecrawl status error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  // Specialized methods for food truck data\n  async scrapeFoodTruckWebsite(url: string): Promise<{\n    success: boolean;\n    data?: { markdown: string; name?: string; source_url?: string };\n    error?: string;\n  }> {\n    const result = await this.scrapeUrl(url, {\n      formats: ['markdown'],\n      onlyMainContent: true,\n      waitFor: 2000,\n    });\n\n    return result.success && result.data?.markdown != undefined\n      ? {\n          success: true,\n          data: {\n            markdown: result.data.markdown,\n            name: result.data.metadata?.title,\n            source_url: result.data.metadata?.sourceURL,\n          },\n        }\n      : { success: false, error: result.error ?? 'Markdown content not found' };\n  }\n\n  private extractPattern(text: string, pattern: RegExp): string | undefined {\n    const match = pattern.exec(text);\n    return match ? match[1].trim() : undefined;\n  }\n  private extractMenuSection(markdown: string): string | undefined {\n    // Use simpler, more efficient regex patterns with fixed max length\n    const menuPatterns = [\n      /menu\\s*:\\s*([^\\n]{1,50})/i,\n      /food\\s*:\\s*([^\\n]{1,50})/i,\n      /items?\\s*:\\s*([^\\n]{1,50})/i,\n      /what we serve\\s*:\\s*([^\\n]{1,50})/i,\n      /our food\\s*:\\s*([^\\n]{1,50})/i,\n    ];\n\n    for (const pattern of menuPatterns) {\n      const match = pattern.exec(markdown);\n      if (match) {\n        return match[1].trim();\n      }\n    }\n\n    return undefined;\n  }\n  private extractContactInfo(markdown: string): ContactInfo | undefined {\n    const contact: ContactInfo = {}; // Phone number - Use specific patterns to prevent backtracking\n    const phoneRegex = /(?:phone|call|contact)(?:\\s*:\\s*)?([+]?\\d{3,4}[.\\s-]\\d{3}[.\\s-]\\d{3,4})/i;\n    const phoneMatch = phoneRegex.exec(markdown);\n    if (phoneMatch) {\n      contact.phone = phoneMatch[1].trim();\n    } // Email - Use specific pattern to avoid backtracking\n    const emailRegex = /([a-zA-Z0-9._%-]{1,64}@[a-zA-Z0-9-]{1,63}\\.[a-zA-Z]{2,6})/;\n    const emailMatch = emailRegex.exec(markdown);\n    if (emailMatch) {\n      contact.email = emailMatch[1].trim();\n    }\n\n    return Object.keys(contact).length > 0 ? contact : undefined;\n  }\n\n  private extractSocialMedia(markdown: string): SocialMediaInfo | undefined {\n    const social: SocialMediaInfo = {};\n    // Instagram - Use concise character class\n    const instagramRegex = /(?:instagram|@)\\s*([\\w.]+)/i;\n    const instagramMatch = instagramRegex.exec(markdown);\n    if (instagramMatch) {\n      social.instagram = instagramMatch[1].trim();\n    }\n    // Facebook - With fixed character class\n    const facebookRegex = /facebook\\.com\\/([\\w.-]+)/i;\n    const facebookMatch = facebookRegex.exec(markdown);\n    if (facebookMatch) {\n      social.facebook = facebookMatch[1].trim();\n    }\n    // Twitter - Use concise character class\n    const twitterRegex = /(?:twitter|@)\\s*([\\w.]+)/i; // Changed \\w+ to [\\w.]+ to allow dots in usernames\n    const twitterMatch = twitterRegex.exec(markdown);\n    if (twitterMatch) {\n      social.twitter = twitterMatch[1].trim();\n    }\n\n    return Object.keys(social).length > 0 ? social : undefined;\n  }\n\n  async scrapeMultipleUrls(\n    urls: string[],\n    options: {\n      batchSize?: number;\n      delay?: number;\n    } = {},\n  ): Promise<Array<{ url: string; result: FirecrawlResponse }>> {\n    const batchSize = options.batchSize ?? 5;\n    const delay = options.delay ?? 1000;\n    const results: Array<{ url: string; result: FirecrawlResponse }> = [];\n\n    for (let i = 0; i < urls.length; i += batchSize) {\n      const batch = urls.slice(i, i + batchSize);\n\n      const batchPromises = batch.map(async (url) => {\n        const result = await this.scrapeUrl(url);\n        return { url, result };\n      });\n\n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n\n      // Add delay between batches to respect rate limits\n      if (i + batchSize < urls.length) {\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      }\n    }\n\n    return results;\n  }\n\n  // Rate limiting and error handling\n  async scrapeWithRetry(url: string, maxRetries = 3, backoffMs = 1000): Promise<FirecrawlResponse> {\n    let lastError: Error;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await this.scrapeUrl(url);\n\n        if (result.success) {\n          return result;\n        }\n\n        // If it's a rate limit error, wait longer\n        if (result.error?.includes('rate limit') === true) {\n          const waitTime = backoffMs * Math.pow(2, attempt);\n          console.info(`Rate limited. Waiting ${waitTime}ms before retry ${attempt}/${maxRetries}`);\n          await new Promise((resolve) => setTimeout(resolve, waitTime));\n          continue;\n        }\n\n        throw new Error(result.error);\n      } catch (error: unknown) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n\n        if (attempt === maxRetries) {\n          break;\n        }\n\n        const waitTime = backoffMs * Math.pow(2, attempt);\n        console.info(`Attempt ${attempt} failed. Retrying in ${waitTime}ms...`);\n        await new Promise((resolve) => setTimeout(resolve, waitTime));\n      }\n    }\n\n    return {\n      success: false,\n      error: lastError!.message,\n    };\n  }\n}\n\n// Export singleton instance\nexport const firecrawl = new FirecrawlService();\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'APIMonitor' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'APIMonitor'.","line":2,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":20,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[45,99],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorContext' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":76,"endColumn":45},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":93,"endColumn":47},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":110,"endColumn":50},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":127,"endColumn":54}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APIUsageService } from './supabase';\nimport { APIMonitor } from './monitoring/apiMonitor';\nimport { GeminiApiClient } from './gemini/geminiApiClient';\nimport { GeminiUsageLimits } from './gemini/usageLimits';\nimport { PromptTemplates } from './gemini/promptTemplates';\nimport { GeminiResponseParser } from './gemini/responseParser';\n\nimport {\n  MenuCategory,\n  LocationData,\n  OperatingHours,\n  SentimentAnalysisResult,\n  EnhancedFoodTruckData,\n  ExtractedFoodTruckDetails,\n  GeminiResponse,\n} from './types';\n\nexport class GeminiService {\n  private apiClient: GeminiApiClient;\n  private dailyRequestLimit = 1500;\n  private dailyTokenLimit = 32_000;\n\n  constructor() {\n    this.apiClient = new GeminiApiClient();\n  }\n\n   checkUsageLimits() {\n    return GeminiUsageLimits.checkUsageLimits({\n      dailyRequestLimit: this.dailyRequestLimit,\n      dailyTokenLimit: this.dailyTokenLimit,\n    });\n  }\n\n  private  makeGeminiRequest<T>(\n    prompt: string,\n    parser: (text: string) => T,\n    errorContext: string\n  ): Promise<GeminiResponse<T>> {\n    return this.apiClient.makeRequestWithParsing(prompt, parser);\n  }\n\n  async processMenuData(rawMenuText: string): Promise<GeminiResponse<MenuCategory[]>> {\n    const estimatedTokens = Math.ceil(rawMenuText.length / 4) + 500;\n    const usageCheck = await GeminiUsageLimits.checkWithMonitoring(estimatedTokens);\n\n    if (!usageCheck.allowed) {\n      return {\n        success: false,\n        error: usageCheck.reason ?? 'API limit reached',\n      };\n    }\n\n    const prompt = PromptTemplates.menuProcessing(rawMenuText);\n    return this.makeGeminiRequest(\n      prompt,\n      (text: string) => {\n        const parsedData = JSON.parse(text) as { categories: MenuCategory[] };\n        return parsedData.categories;\n      },\n      'menu processing'\n    );\n  }\n\n  async extractLocationFromText(textInput: string): Promise<GeminiResponse<LocationData>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded',\n      };\n    }\n\n    const prompt = PromptTemplates.locationExtraction(textInput);\n    return this.makeGeminiRequest(\n      prompt,\n      GeminiResponseParser.parseLocationData,\n      'location extraction'\n    );\n  }\n\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiResponse<OperatingHours>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded',\n      };\n    }\n\n    const prompt = PromptTemplates.operatingHours(hoursText);\n    return this.makeGeminiRequest(\n      prompt,\n      GeminiResponseParser.parseOperatingHours,\n      'hours standardization'\n    );\n  }\n\n  async analyzeSentiment(reviewText: string): Promise<GeminiResponse<SentimentAnalysisResult>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded',\n      };\n    }\n\n    const prompt = PromptTemplates.sentimentAnalysis(reviewText);\n    return this.makeGeminiRequest(\n      prompt,\n      GeminiResponseParser.parseSentimentAnalysis,\n      'sentiment analysis'\n    );\n  }\n\n  async enhanceFoodTruckData(rawData: unknown): Promise<GeminiResponse<EnhancedFoodTruckData>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded',\n      };\n    }\n\n    const prompt = PromptTemplates.dataEnhancement(rawData);\n    return this.makeGeminiRequest(\n      prompt,\n      GeminiResponseParser.parseEnhancedFoodTruckData,\n      'data enhancement'\n    );\n  }\n\n  async batchProcess(\n    items: Array<{ type: string; data: unknown }>,\n  ): Promise<Array<GeminiResponse<unknown>>> {\n    const results: Array<GeminiResponse<unknown>> = [];\n\n    for (const item of items) {\n      let result: GeminiResponse<unknown>;\n      switch (item.type) {\n        case 'menu': {\n          result = await this.processMenuData(item.data as string);\n          break;\n        }\n        case 'location': {\n          result = await this.extractLocationFromText(item.data as string);\n          break;\n        }\n        case 'hours': {\n          result = await this.standardizeOperatingHours(item.data as string);\n          break;\n        }\n        case 'sentiment': {\n          result = await this.analyzeSentiment(item.data as string);\n          break;\n        }\n        case 'enhance': {\n          result = await this.enhanceFoodTruckData(item.data); // item.data is already unknown\n          break;\n        }\n        default: {\n          result = { success: false, error: `Unknown processing type: ${item.type}` };\n          break;\n        }\n      }\n      results.push(result);\n    }\n\n    return results;\n  }\n\n  async getUsageStats(): Promise<{ requests_count: number; tokens_used: number } | undefined> {\n    const usage = await APIUsageService.getTodayUsage('gemini');\n    return usage ?? undefined;\n  }\n\n  async extractFoodTruckDetailsFromMarkdown(\n    markdownContent: string,\n    sourceUrl?: string,\n  ): Promise<GeminiResponse<ExtractedFoodTruckDetails>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded for Gemini',\n      };\n    }\n\n    const prompt = PromptTemplates.foodTruckExtraction(markdownContent, sourceUrl);\n\n\n    const response = await this.makeGeminiRequest(\n      prompt,\n      (text: string) => {\n        const cleanedText = GeminiResponseParser.cleanMarkdownResponse(text);\n        return GeminiResponseParser.parseExtractedFoodTruckDetails(cleanedText);\n      },\n      'food truck extraction'\n    );\n\n    // Add promptSent to response for this specific method\n    return {\n      ...response,\n      promptSent: prompt,\n    };\n  }\n}\n\n// Export singleton instance\nexport const gemini = new GeminiService();\n\n// Centralized Gemini operation dispatcher to eliminate duplication\nexport async function dispatchGeminiOperation(\n  type: 'menu' | 'location' | 'hours' | 'sentiment' | 'enhance',\n  data: unknown\n): Promise<unknown> {\n  switch (type) {\n    case 'menu': {\n      return await gemini.processMenuData(data as string);\n    }\n    case 'location': {\n      return await gemini.extractLocationFromText(data as string);\n    }\n    case 'hours': {\n      return await gemini.standardizeOperatingHours(data as string);\n    }\n    case 'sentiment': {\n      return await gemini.analyzeSentiment(data as string);\n    }\n    case 'enhance': {\n      return await gemini.enhanceFoodTruckData(data);\n    }\n    default: {\n      throw new Error(`Unknown Gemini operation type: ${String(type)}`);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini/geminiApiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini/promptTemplates.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Method 'foodTruckExtraction' has too many lines (79). Maximum allowed is 50.","line":151,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":229,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":223,"column":3,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":223,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7097,7106],"text":"(sourceUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7097,7106],"text":"(sourceUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7097,7106],"text":"(Boolean(sourceUrl))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const PromptTemplates = {\n  menuProcessing: (rawMenuText: string) => `\nParse the following food truck menu text and return a structured JSON format.\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\n\nMenu text:\n${rawMenuText}\n\nExpected JSON format:\n[\n  {\n    \"category\": \"string\",\n    \"items\": [\n      {\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"price\": number,\n        \"dietary_tags\": [\"string\"]\n      }\n    ]\n  }\n]\n\nRules:\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\n- Include dietary restrictions and special tags\n- Group items into logical categories\n- If no clear categories, use \"Main Items\"\n- Return only the json, no additional text\n  `,\n\n  locationExtraction: (textInput: string) => `\nExtract location information from the following text and return structured data.\nLook for addresses, cross streets, landmarks, or location descriptions.\n\nText:\n${textInput}\n\nExpected JSON format:\n{\n  \"address\": \"string or undefined\",\n  \"city\": \"string or undefined\", \n  \"state\": \"string or undefined\",\n  \"zipCode\": \"string or undefined\",\n  \"coordinates\": {\"lat\": number, \"lng\": number} or undefined,\n  \"confidence\": number,\n  \"landmarks\": [\"string\"]\n}\n\nRules:\n- Set coordinates to undefined if not explicitly provided\n- Confidence should be 0.0 to 1.0 based on clarity\n- Include any mentioned landmarks or cross streets\n- Return only the json, no additional text\n  `,\n\n  operatingHours: (hoursText: string) => `\nParse the following operating hours text and return standardized format.\nConvert all times to 24-hour format and handle various input formats.\n\nHours text:\n${hoursText}\n\nExpected JSON format:\n{\n  \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\n}\n\nRules:\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\n- If closed on a day, set \"closed\": true and omit open/close times\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\n- Default to reasonable hours if ambiguous\n- Return only the json, no additional text\n  `,\n\n  sentimentAnalysis: (reviewText: string) => `\nAnalyze the sentiment of this food truck review and extract key insights.\nFocus on food quality, service, value, and overall experience.\n\nReview text:\n${reviewText}\n\nExpected JSON format:\n{\n  \"score\": number,\n  \"confidence\": number,\n  \"aspects\": {\n    \"food_quality\": number,\n    \"service\": number,\n    \"value\": number,\n    \"overall\": number\n  },\n  \"summary\": \"string\",\n  \"keywords\": [\"string\"]\n}\n\nRules:\n- Score should be 0.0 (very negative) to 1.0 (very positive)\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\n- Include specific aspects mentioned in the review\n- Summary should be 1-2 sentences max\n- Return only the json, no additional text\n  `,\n\n  dataEnhancement: (rawData: unknown) => `\nEnhance and standardize the following food truck data.\nFill in missing information where possible and improve data quality.\n\nRaw data:\n${JSON.stringify(rawData, undefined, 2)}\n\nExpected JSON format:\n{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"cuisine_type\": \"string\",\n  \"price_range\": \"$ | $$ | $$$ | $$$$\",\n  \"contact\": {\n    \"phone\": \"string\",\n    \"email\": \"string\",\n    \"website\": \"string\",\n    \"social_media\": {}\n  },\n  \"location\": {\n    \"address\": \"string\",\n    \"city\": \"string\",\n    \"state\": \"string\",\n    \"coordinates\": {\"lat\": number, \"lng\": number}\n  },\n  \"operating_hours\": {},\n  \"menu_categories\": [\"string\"],\n  \"specialties\": [\"string\"],\n  \"dietary_options\": [\"string\"]\n}\n\nRules:\n- Preserve all original data while enhancing it\n- Standardize naming conventions\n- Infer cuisine type from menu items\n- Estimate price range from menu prices\n- Return only the json, no additional text\n  `,\n\n  foodTruckExtraction: (markdownContent: string, sourceUrl?: string) => {\n    const schema = `\nExpected JSON schema:\n{\n  \"name\": \"string (food truck name)\",\n  \"description\": \"string (brief description of the food truck)\",\n  \"cuisine_type\": \"string (type of cuisine served)\",\n  \"contact\": {\n    \"phone\": \"string (phone number if found)\",\n    \"email\": \"string (email if found)\", \n    \"website\": \"string (website URL if found)\",\n    \"social_media\": {\n      \"facebook\": \"string (Facebook URL if found)\",\n      \"instagram\": \"string (Instagram URL if found)\",\n      \"twitter\": \"string (Twitter URL if found)\"\n    }\n  },\n  \"location\": {\n    \"address\": \"string (physical address if found)\",\n    \"city\": \"string (city name)\",\n    \"state\": \"string (state abbreviation)\",\n    \"coordinates\": {\n      \"lat\": \"number (latitude if found)\",\n      \"lng\": \"number (longitude if found)\"\n    }\n  },\n  \"operating_hours\": {\n    \"monday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"tuesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"wednesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"thursday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"friday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"saturday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"sunday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"}\n  },\n  \"menu\": [\n    {\n      \"category\": \"string (menu category)\",\n      \"items\": [\n        {\n          \"name\": \"string (item name)\",\n          \"description\": \"string (item description)\",\n          \"price\": \"number (price as number, not string)\",\n          \"dietary_tags\": [\"string (dietary restrictions/tags)\"]\n        }\n      ]\n    }\n  ],\n  \"specialties\": [\"string (signature dishes or specialties)\"],\n  \"dietary_options\": [\"string (dietary accommodations like vegan, gluten-free)\"],\n  \"price_range\": \"string ($ for under $10, $$ for $10-20, $$$ for $20-30, $$$$ for over $30)\"\n}\n`;\n\n    const instructions = `\nInstructions:\n- Extract as much information as possible from the provided content\n- If information is not available, use null for the field\n- For operating hours, use 24-hour format (e.g., \"14:30\" for 2:30 PM)\n- If a day is closed, set \"closed\": true and omit open/close times\n- For prices, extract numeric values only (e.g., 12.99, not \"$12.99\")\n- Be thorough in extracting menu items and their details\n- Look for social media links and contact information carefully\n- Return only the JSON object, no additional text or formatting\n`;\n\n    return `\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\n\nWebsite content:\n${markdownContent}\n\n${sourceUrl ? `Source URL: ${sourceUrl}` : ''}\n\n${schema}\n\n${instructions}\n`;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini/responseParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini/usageLimits.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limits' is assigned a value but never used. Allowed unused args must match /^_/u.","line":60,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APIUsageService } from '../supabase';\nimport { APIMonitor } from '../monitoring/apiMonitor';\n\nexport interface UsageLimits {\n  dailyRequestLimit: number;\n  dailyTokenLimit: number;\n}\n\nexport interface UsageCheck {\n  canMakeRequest: boolean;\n  usage?: {\n    requests: { used: number; limit: number; remaining: number };\n    tokens: { used: number; limit: number; remaining: number };\n  };\n}\n\nexport class GeminiUsageLimits {\n  private static readonly DEFAULT_LIMITS: UsageLimits = {\n    dailyRequestLimit: 1500,\n    dailyTokenLimit: 32_000,\n  };\n\n  static async checkUsageLimits(limits: UsageLimits = this.DEFAULT_LIMITS): Promise<UsageCheck> {\n    try {\n      const usage = await APIUsageService.getTodayUsage('gemini');\n\n      if (!usage) {\n        return { canMakeRequest: true };\n      }\n\n      const requestsUsed = usage.requests_count ?? 0;\n      const tokensUsed = usage.tokens_used ?? 0;\n\n      const requestsRemaining = limits.dailyRequestLimit - requestsUsed;\n      const tokensRemaining = limits.dailyTokenLimit - tokensUsed;\n\n      return {\n        canMakeRequest: requestsRemaining > 0 && tokensRemaining > 100, // Keep 100 token buffer\n        usage: {\n          requests: {\n            used: requestsUsed,\n            limit: limits.dailyRequestLimit,\n            remaining: requestsRemaining,\n          },\n          tokens: {\n            used: tokensUsed,\n            limit: limits.dailyTokenLimit,\n            remaining: tokensRemaining,\n          },\n        },\n      };\n    } catch (error: unknown) {\n      console.warn('Error checking Gemini usage limits:', error);\n      return { canMakeRequest: false };\n    }\n  }\n\n  static async checkWithMonitoring(\n    estimatedTokens: number,\n    limits: UsageLimits = this.DEFAULT_LIMITS\n  ): Promise<{ allowed: boolean; reason?: string; waitTime?: number }> {\n    const canMakeRequest = await APIMonitor.canMakeRequest('gemini', 1, estimatedTokens);\n\n    if (!canMakeRequest.allowed) {\n      return {\n        allowed: false,\n        reason: `API limit reached: ${canMakeRequest.reason}. Wait time: ${Math.ceil((canMakeRequest.waitTime ?? 0) / 1000 / 60)} minutes`,\n      };\n    }\n\n    return { allowed: true };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/middleware/middlewareHelpers.ts","messages":[{"ruleId":"max-params","severity":2,"message":"Async function 'logAndRedirect' has too many parameters (5). Maximum allowed is 4.","line":12,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":12,"endColumn":30},{"ruleId":"max-params","severity":2,"message":"Async function 'logAndRedirectDenied' has too many parameters (6). Maximum allowed is 4.","line":30,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":30,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":114,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":117,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1051,1054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1051,1054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":128,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":131,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1065,1068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1065,1068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":33,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":34,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":34,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .role on an `any` value.","line":39,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":31}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AuditLogger } from '@/lib/security/auditLogger';\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\n\ninterface RequestMetadata {\n  ip: string;\n  userAgent: string;\n  url: string;\n  method: string;\n}\n\nasync function logAndRedirect(req: NextRequest, res: NextResponse, requestMetadata: RequestMetadata, reason: string, userError?: { message?: string }) {\n  await AuditLogger.logSecurityEvent({\n    event_type: 'permission_denied',\n    ip_address: requestMetadata.ip,\n    user_agent: requestMetadata.userAgent,\n    details: {\n      attempted_url: requestMetadata.url,\n      reason,\n      error: userError?.message,\n    },\n    severity: 'warning',\n  });\n  const redirectUrl = req.nextUrl.clone();\n  redirectUrl.pathname = '/login';\n  redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname);\n  return NextResponse.redirect(redirectUrl);\n}\n\nasync function logAndRedirectDenied(req: NextRequest, res: NextResponse, requestMetadata: RequestMetadata, user: any, profile: any, profileQueryError?: { message?: string }) {\n  await AuditLogger.logSecurityEvent({\n    event_type: 'permission_denied',\n    user_id: user.id,\n    user_email: user.email,\n    ip_address: requestMetadata.ip,\n    user_agent: requestMetadata.userAgent,\n    details: {\n      attempted_url: requestMetadata.url,\n      user_role: profile?.role ?? 'none',\n      reason: 'insufficient_privileges',\n      error: profileQueryError?.message,\n    },\n    severity: 'error',\n  });\n  const redirectUrl = req.nextUrl.clone();\n  redirectUrl.pathname = '/access-denied';\n  return NextResponse.redirect(redirectUrl);\n}\n\nexport async function protectAdminRoutes(req: NextRequest, res: NextResponse, requestMetadata: RequestMetadata) {\n  const supabase = createSupabaseMiddlewareClient(req, res);\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser();\n  if (userError || !user) {\n    return logAndRedirect(req, res, requestMetadata, 'no_session', userError ?? undefined);\n  }\n  const { data: profile, error: profileQueryError } = await supabase\n    .from('profiles')\n    .select('role')\n    .eq('id', user.id)\n    .single();\n  if (profileQueryError || profile?.role !== 'admin') {\n    return logAndRedirectDenied(req, res, requestMetadata, user, profile, profileQueryError ?? undefined);\n  }\n  if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\n    await AuditLogger.logDataAccess(\n      user.id,\n      user.email ?? 'unknown',\n      'admin_panel',\n      req.nextUrl.pathname,\n      req.method === 'GET' ? 'read' : 'admin_access',\n      {\n        ip: requestMetadata.ip,\n        userAgent: requestMetadata.userAgent,\n      },\n    );\n  }\n  return res;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/monitoring/apiMonitor.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static method 'generateAlerts' has too many lines (56). Maximum allowed is 50.","line":232,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":287,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA API Usage Monitoring and Alerting System\n * Implements proactive monitoring, alerting, and throttling for all external APIs\n */\n\nimport { APIUsageService } from '@/lib/supabase';\n\n// API Rate Limits Configuration\nexport const API_LIMITS = {\n  gemini: {\n    requests: { daily: 1500, hourly: 100 },\n    tokens: { daily: 32_000, hourly: 2000 },\n    alertThresholds: { warning: 0.8, critical: 0.95 }\n  },\n  firecrawl: {\n    requests: { daily: 500, hourly: 50 },\n    tokens: { daily: 0, hourly: 0 },\n    alertThresholds: { warning: 0.8, critical: 0.95 }\n  },\n  tavily: {\n    requests: { daily: 1000, hourly: 100 },\n    tokens: { daily: 0, hourly: 0 },\n    alertThresholds: { warning: 0.8, critical: 0.95 }\n  },\n  supabase: {\n    requests: { daily: 50_000, hourly: 5000 },\n    tokens: { daily: 0, hourly: 0 },\n    alertThresholds: { warning: 0.9, critical: 0.98 }\n  }\n} as const;\n\nexport type APIService = keyof typeof API_LIMITS;\nexport type AlertLevel = 'info' | 'warning' | 'critical';\n\nexport interface APIUsageAlert {\n  service: APIService;\n  level: AlertLevel;\n  message: string;\n  usage: {\n    current: number;\n    limit: number;\n    percentage: number;\n  };\n  timestamp: string;\n  recommendations: string[];\n}\n\nexport interface APIUsageData {\n  requests: { used: number; limit: number; percentage: number };\n  tokens?: { used: number; limit: number; percentage: number };\n}\n\nexport interface APIMonitoringResult {\n  canMakeRequest: boolean;\n  alerts: APIUsageAlert[];\n  usage: Record<APIService, APIUsageData>;\n  recommendations: string[];\n}\n\n/**\n * Comprehensive API Monitoring Service\n */\nexport class APIMonitor {\n  private static alertHistory: APIUsageAlert[] = [];\n\n  /**\n   * Check if API request can be made safely\n   */\n  static async canMakeRequest(\n    service: APIService, \n    requestCount: number = 1, \n    tokenCount: number = 0\n  ): Promise<{ allowed: boolean; reason?: string; waitTime?: number }> {\n    try {\n      const usage = await this.getCurrentUsage(service);\n      const limits = API_LIMITS[service];\n\n      // Check daily limits\n      const newRequestCount = usage.requests.used + requestCount;\n      const newTokenCount = (usage.tokens?.used ?? 0) + tokenCount;\n\n      if (newRequestCount > limits.requests.daily) {\n        return {\n          allowed: false,\n          reason: `Daily request limit exceeded (${newRequestCount}/${limits.requests.daily})`,\n          waitTime: this.getTimeUntilReset('daily')\n        };\n      }\n\n      if (limits.tokens != undefined && newTokenCount > limits.tokens.daily) {\n        return {\n          allowed: false,\n          reason: `Daily token limit exceeded (${newTokenCount}/${limits.tokens.daily})`,\n          waitTime: this.getTimeUntilReset('daily')\n        };\n      }\n\n      // Check if approaching critical threshold\n      const requestPercentage = newRequestCount / limits.requests.daily;\n      if (requestPercentage > limits.alertThresholds.critical) {\n        return {\n          allowed: false,\n          reason: `Approaching critical usage threshold (${(requestPercentage * 100).toFixed(1)}%)`,\n          waitTime: this.getTimeUntilReset('daily')\n        };\n      }\n\n      return { allowed: true };\n    } catch (error) {\n      console.error(`Error checking API limits for ${service}:`, error);\n      // Fail safe - allow request but log error\n      return { allowed: true };\n    }\n  }\n\n  /**\n   * Get current usage for a service\n   */\n  static async getCurrentUsage(service: APIService): Promise<APIUsageData> {\n    const todayUsage = await APIUsageService.getTodayUsage(service);\n    const limits = API_LIMITS[service];\n\n    const usage: APIUsageData = {\n      requests: {\n        used: todayUsage?.requests_count ?? 0,\n        limit: limits.requests.daily,\n        percentage: ((todayUsage?.requests_count ?? 0) / limits.requests.daily) * 100\n      }\n    };\n\n    if (limits.tokens.daily > 0) {\n      usage.tokens = {\n        used: todayUsage?.tokens_used ?? 0,\n        limit: limits.tokens.daily,\n        percentage: ((todayUsage?.tokens_used ?? 0) / limits.tokens.daily) * 100\n      };\n    }\n\n    return usage;\n  }\n\n  /**\n   * Comprehensive monitoring check for all APIs\n   */\n  static async checkAllAPIs(): Promise<APIMonitoringResult> {\n    const alerts: APIUsageAlert[] = [];\n    const usage: Record<APIService, APIUsageData> = {} as Record<APIService, APIUsageData>;\n    const recommendations: string[] = [];\n    let canMakeRequest = true;\n\n    for (const service of Object.keys(API_LIMITS) as APIService[]) {\n      try {\n        const serviceUsage = await this.getCurrentUsage(service);\n        usage[service] = serviceUsage;\n\n        // Check for alerts\n        const serviceAlerts = this.generateAlerts(service, serviceUsage);\n        alerts.push(...serviceAlerts);\n\n        // Check if any service is at critical level\n        if (serviceUsage.requests.percentage > API_LIMITS[service].alertThresholds.critical * 100) {\n          canMakeRequest = false;\n        }\n      } catch (error) {\n        console.error(`Error monitoring ${service}:`, error);\n        alerts.push({\n          service,\n          level: 'warning',\n          message: `Failed to check usage for ${service}`,\n          usage: { current: 0, limit: 0, percentage: 0 },\n          timestamp: new Date().toISOString(),\n          recommendations: ['Check API connectivity', 'Verify credentials']\n        });\n      }\n    }\n\n    // Generate global recommendations\n    recommendations.push(...this.generateRecommendations(usage, alerts));\n\n    return {\n      canMakeRequest,\n      alerts,\n      usage,\n      recommendations\n    };\n  }\n\n  // Helper for token alerts\n  private static generateTokenAlerts(service: APIService, usage: APIUsageData, limits: typeof API_LIMITS[APIService], timestamp: string): APIUsageAlert[] {\n    const alerts: APIUsageAlert[] = [];\n    if (usage.tokens && limits.tokens.daily > 0) {\n      const tokenPercentage = usage.tokens.percentage;\n      if (tokenPercentage > limits.alertThresholds.critical * 100) {\n        alerts.push({\n          service,\n          level: 'critical',\n          message: `Critical: ${service} token usage at ${tokenPercentage.toFixed(1)}%`,\n          usage: {\n            current: usage.tokens.used,\n            limit: usage.tokens.limit,\n            percentage: tokenPercentage\n          },\n          timestamp,\n          recommendations: [\n            'Reduce prompt complexity',\n            'Implement response caching',\n            'Optimize token usage patterns'\n          ]\n        });\n      } else if (tokenPercentage > limits.alertThresholds.warning * 100) {\n        alerts.push({\n          service,\n          level: 'warning',\n          message: `Warning: ${service} token usage at ${tokenPercentage.toFixed(1)}%`,\n          usage: {\n            current: usage.tokens.used,\n            limit: usage.tokens.limit,\n            percentage: tokenPercentage\n          },\n          timestamp,\n          recommendations: [\n            'Monitor token consumption',\n            'Optimize prompt efficiency',\n            'Consider response caching'\n          ]\n        });\n      }\n    }\n    return alerts;\n  }\n\n  private static generateAlerts(service: APIService, usage: APIUsageData): APIUsageAlert[] {\n    const alerts: APIUsageAlert[] = [];\n    const limits = API_LIMITS[service];\n    const timestamp = new Date().toISOString();\n\n    // Check request usage\n    const requestPercentage = usage.requests.percentage;\n    if (requestPercentage > limits.alertThresholds.critical * 100) {\n      alerts.push({\n        service,\n        level: 'critical',\n        message: `Critical: ${service} request usage at ${requestPercentage.toFixed(1)}%`,\n        usage: {\n          current: usage.requests.used,\n          limit: usage.requests.limit,\n          percentage: requestPercentage\n        },\n        timestamp,\n        recommendations: [\n          'Immediately reduce API calls',\n          'Implement request queuing',\n          'Consider upgrading API plan'\n        ]\n      });\n    } else if (requestPercentage > limits.alertThresholds.warning * 100) {\n      alerts.push({\n        service,\n        level: 'warning',\n        message: `Warning: ${service} request usage at ${requestPercentage.toFixed(1)}%`,\n        usage: {\n          current: usage.requests.used,\n          limit: usage.requests.limit,\n          percentage: requestPercentage\n        },\n        timestamp,\n        recommendations: [\n          'Monitor usage closely',\n          'Optimize request patterns',\n          'Enable request caching'\n        ]\n      });\n    }\n\n    // Token alerts\n    alerts.push(...this.generateTokenAlerts(service, usage, limits, timestamp));\n\n    // Store alerts in history\n    this.alertHistory.push(...alerts);\n    \n    // Keep only last 100 alerts\n    if (this.alertHistory.length > 100) {\n      this.alertHistory = this.alertHistory.slice(-100);\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Generate optimization recommendations\n   */\n  private static generateRecommendations(usage: Record<APIService, APIUsageData>, alerts: APIUsageAlert[]): string[] {\n    const recommendations: string[] = [];\n\n    // High-level optimization recommendations\n    const criticalAlerts = alerts.filter(a => a.level === 'critical');\n    const warningAlerts = alerts.filter(a => a.level === 'warning');\n\n    if (criticalAlerts.length > 0) {\n      recommendations.push('URGENT: Implement immediate API throttling', 'Enable aggressive caching for all API responses', 'Consider upgrading API plans for critical services');\n    }\n\n    if (warningAlerts.length > 0) {\n      recommendations.push('Implement request queuing and batching', 'Optimize API call patterns and frequency', 'Enable response caching where possible');\n    }\n\n    // Service-specific recommendations\n    if (usage.gemini?.requests?.percentage > 70) {\n      recommendations.push('Gemini: Optimize prompt length and complexity', 'Gemini: Implement response caching for similar queries');\n    }\n\n    if (usage.firecrawl?.requests?.percentage > 70) {\n      recommendations.push('Firecrawl: Implement URL deduplication', 'Firecrawl: Cache crawl results for repeated URLs');\n    }\n\n    return [...new Set(recommendations)]; // Remove duplicates\n  }\n\n  /**\n   * Get time until rate limit reset\n   */\n  private static getTimeUntilReset(period: 'hourly' | 'daily'): number {\n    const now = new Date();\n    \n    if (period === 'hourly') {\n      const nextHour = new Date(now);\n      nextHour.setHours(now.getHours() + 1, 0, 0, 0);\n      return nextHour.getTime() - now.getTime();\n    } else {\n      const nextDay = new Date(now);\n      nextDay.setDate(now.getDate() + 1);\n      nextDay.setHours(0, 0, 0, 0);\n      return nextDay.getTime() - now.getTime();\n    }\n  }\n\n  /**\n   * Get alert history\n   */\n  static getAlertHistory(): APIUsageAlert[] {\n    return [...this.alertHistory];\n  }\n\n  /**\n   * Clear alert history\n   */\n  static clearAlertHistory(): void {\n    this.alertHistory = [];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/performance/bundleAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/performance/databaseCache.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async arrow function has too many lines (66). Maximum allowed is 50.","line":78,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":143,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":142,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":142,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Database Query Optimization and Caching\n * Implements Next.js unstable_cache for optimal performance\n */\n\nimport { unstable_cache } from 'next/cache';\nimport { supabaseAdmin, FoodTruckService } from '@/lib/supabase';\nimport type { FoodTruck } from '@/lib/types';\n\n// Cache configuration\nconst CACHE_CONFIG = {\n  // Short-term cache for frequently changing data\n  SHORT_TTL: 60 * 5, // 5 minutes\n  // Medium-term cache for semi-static data\n  MEDIUM_TTL: 60 * 30, // 30 minutes\n  // Long-term cache for static data\n  LONG_TTL: 60 * 60 * 24, // 24 hours\n} as const;\n\n/**\n * Cached food truck queries with optimized database access\n */\nexport const CachedFoodTruckService = {\n  /**\n   * Get all food trucks with caching\n   * Cache for 30 minutes since truck data changes moderately\n   */\n  getAllTrucksCached : unstable_cache(\n    async (): Promise<{ trucks: FoodTruck[]; count: number }> => {\n      console.info('CachedFoodTruckService: Cache miss - fetching all trucks from database');\n      const result = await FoodTruckService.getAllTrucks();\n      return { trucks: result.trucks, count: result.total };\n    },\n    ['all-trucks'],\n    {\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\n      tags: ['food-trucks', 'all-trucks']\n    }\n  ),\n\n  /**\n   * Get trucks by location with caching\n   * Cache for 5 minutes since location-based queries are time-sensitive\n   */\n  getTrucksByLocationCached : unstable_cache(\n    async (lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> => {\n      console.info(`CachedFoodTruckService: Cache miss - fetching trucks near ${lat},${lng} (${radiusKm}km)`);\n      return await FoodTruckService.getTrucksByLocation(lat, lng, radiusKm);\n    },\n    ['trucks-by-location'],\n    {\n      revalidate: CACHE_CONFIG.SHORT_TTL,\n      tags: ['food-trucks', 'location-search']\n    }\n  ),\n\n  /**\n   * Get truck by ID with caching\n   * Cache for 30 minutes since individual truck data is relatively stable\n   */\n  getTruckByIdCached : unstable_cache(\n    async (id: string): Promise<FoodTruck | null> => {\n      console.info(`CachedFoodTruckService: Cache miss - fetching truck ${id} from database`);\n      return await FoodTruckService.getTruckById(id);\n    },\n    ['truck-by-id'],\n    {\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\n      tags: ['food-trucks', 'truck-details']\n    }\n  ),\n\n  /**\n   * Search trucks with caching\n   * Cache for 5 minutes since search results should be relatively fresh\n   */\n  searchTrucksCached : unstable_cache(\n    async (query: string, filters?: {\n      cuisine?: string;\n      openNow?: boolean;\n      lat?: number;\n      lng?: number;\n      radius?: number;\n    }): Promise<FoodTruck[]> => {\n      console.info(`CachedFoodTruckService: Cache miss - searching trucks for \"${query}\"`);\n      \n      if (supabaseAdmin == undefined) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      let dbQuery = supabaseAdmin\n        .from('food_trucks')\n        .select('*')\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%,cuisine_type.cs.{${query}}`);\n\n      // Apply filters\n      if (filters?.cuisine != undefined && filters.cuisine !== '') {\n        dbQuery = dbQuery.contains('cuisine_type', [filters.cuisine]);\n      }\n\n      const { data: trucks, error } = await dbQuery.limit(50);\n\n      if (error != undefined) {\n        throw new Error(`Search query failed: ${error.message}`);\n      }\n\n      let results = trucks ?? [];\n\n      // Apply location filter if provided\n      if (filters?.lat != undefined && filters?.lng != undefined && filters?.radius != undefined) {\n        results = results.filter((truck: FoodTruck) => {\n          if (truck.current_location?.lat == undefined || truck.current_location?.lng == undefined) {\n            return false;\n          }\n          const distance = calculateDistance(\n            filters.lat,\n            filters.lng,\n            truck.current_location.lat,\n            truck.current_location.lng\n          );\n          return distance <= (filters.radius ?? 10);\n        });\n      }\n\n      // Apply openNow filter if provided\n      if (filters?.openNow === true) {\n        const now = new Date();\n        const currentDay = now.toLocaleDateString('en-US', { weekday: 'short' }).toLowerCase(); // 'mon', 'tue', etc.\n        const currentTime = now.getHours() * 100 + now.getMinutes(); // HHMM format\n\n        results = results.filter((truck: FoodTruck) => {\n          const hours = truck.operating_hours?.[currentDay as keyof typeof truck.operating_hours] as { closed?: boolean; open?: string; close?: string } | undefined;\n          if (hours == undefined || hours.closed === true) return false;\n\n          const openTime = parseTimeString(hours.open ?? '');\n          const closeTime = parseTimeString(hours.close ?? '');\n\n          return currentTime >= openTime && currentTime <= closeTime;\n        });\n      }\n\n      return results;\n    },\n    ['search-trucks'],\n    {\n      revalidate: CACHE_CONFIG.SHORT_TTL,\n      tags: ['food-trucks', 'search']\n    }\n  ),\n\n  /**\n   * Get data quality statistics with caching\n   * Cache for 24 hours since quality stats change slowly\n   */\n  getDataQualityStatsCached : unstable_cache(\n    async (): Promise<{\n      averageScore: number;\n      distribution: Record<string, number>;\n      totalTrucks: number;\n    }> => {\n      console.info('CachedFoodTruckService: Cache miss - calculating data quality stats');\n      \n      if (supabaseAdmin == undefined) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      const { data: trucks, error } = await supabaseAdmin\n        .from('food_trucks')\n        .select('data_quality_score');\n\n      if (error) {\n        throw new Error(`Quality stats query failed: ${error.message}`);\n      }\n\n      const scores = trucks == undefined ? [] : trucks.map((t: { data_quality_score?: number }) => t.data_quality_score ?? 0);\n      const averageScore = scores.length > 0\n        ? scores.reduce((sum: number, score: number) => sum + score, 0) / scores.length\n        : 0;\n\n      const distribution = {\n        high: scores.filter((s: number) => s >= 0.8).length,\n        medium: scores.filter((s: number) => s >= 0.6 && s < 0.8).length,\n        low: scores.filter((s: number) => s < 0.6).length\n      };\n\n      return {\n        averageScore: Math.round(averageScore * 100) / 100,\n        distribution,\n        totalTrucks: scores.length\n      };\n    },\n    ['data-quality-stats'],\n    {\n      revalidate: CACHE_CONFIG.LONG_TTL,\n      tags: ['food-trucks', 'data-quality']\n    }\n  ),\n};\n\n/**\n * Cache invalidation utilities\n */\nexport const CacheManager = {\n  /**\n   * Invalidate all food truck related caches\n   */\n  async invalidateAllFoodTruckCaches(): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag('food-trucks');\n      console.info('CacheManager: Invalidated all food truck caches');\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate caches:', error);\n    }\n  },\n\n  /**\n   * Invalidate specific truck cache\n   */\n  async invalidateTruckCache(truckId: string): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag(`truck-${truckId}`);\n      revalidateTag('food-trucks'); // Also invalidate general caches\n      console.info(`CacheManager: Invalidated cache for truck ${truckId}`);\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate truck cache:', error);\n    }\n  },\n\n  /**\n   * Invalidate search and location caches\n   */\n  async invalidateSearchCaches(): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag('search');\n      revalidateTag('location-search');\n      console.info('CacheManager: Invalidated search caches');\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate search caches:', error);\n    }\n  },\n};\n\n/**\n * Utility functions\n */\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nfunction parseTimeString(timeStr: string): number {\n  if (timeStr == undefined || timeStr === '') return 0;\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  return hours * 100 + (minutes ?? 0);\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/performance/webVitals.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'getPerformanceOptimizationSuggestions' has too many lines (102). Maximum allowed is 50.","line":221,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":322,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":105,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":105,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":107,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":107,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":109,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":109,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":113,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":113,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Core Web Vitals Monitoring Implementation\n * Tracks LCP, FID, CLS, FCP, and TTFB metrics for performance optimization\n */\n\n// @ts-expect-error TS(2792): Cannot find module 'web-vitals'. Did you mean to s... Remove this comment to see the full error message\nimport { getCLS, getFCP, getFID, getLCP, getTTFB, Metric } from 'web-vitals';\n\n// Performance thresholds based on Google's Core Web Vitals standards\nexport const PERFORMANCE_THRESHOLDS = {\n  LCP: { good: 2500, needsImprovement: 4000 }, // Largest Contentful Paint\n  FID: { good: 100, needsImprovement: 300 },   // First Input Delay\n  CLS: { good: 0.1, needsImprovement: 0.25 },  // Cumulative Layout Shift\n  FCP: { good: 1800, needsImprovement: 3000 }, // First Contentful Paint\n  TTFB: { good: 800, needsImprovement: 1800 }  // Time to First Byte\n} as const;\n\nexport type MetricName = keyof typeof PERFORMANCE_THRESHOLDS;\n\nexport interface PerformanceMetric {\n  name: MetricName;\n  value: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  timestamp: number;\n  url: string;\n  userAgent: string;\n}\n\n// In-memory storage for metrics (in production, send to analytics service)\nconst metricsStore: PerformanceMetric[] = [];\n\n/**\n * Categorizes metric value based on thresholds\n */\nfunction getRating(name: MetricName, value: number): 'good' | 'needs-improvement' | 'poor' {\n  const thresholds = PERFORMANCE_THRESHOLDS[name];\n  if (value <= thresholds.good) return 'good';\n  if (value <= thresholds.needsImprovement) return 'needs-improvement';\n  return 'poor';\n}\n\n/**\n * Processes and stores a web vital metric\n */\nfunction handleMetric(metric: Metric) {\n  // Type-safe casting with validation\n  const metricName = String((metric as { name: string }).name) as MetricName;\n  const metricValue = Number((metric as { value: number }).value);\n\n  const performanceMetric: PerformanceMetric = {\n    name: metricName,\n    value: metricValue,\n    rating: getRating(metricName, metricValue),\n    timestamp: Date.now(),\n    url: globalThis.location.href,\n    userAgent: navigator.userAgent\n  };\n\n  // Store metric locally\n  metricsStore.push(performanceMetric);\n\n  // Send to analytics endpoint (non-blocking)\n  sendMetricToAnalytics(performanceMetric).catch(error => {\n    console.warn('Failed to send metric to analytics:', error);\n  });\n\n  // Log performance issues\n  if (performanceMetric.rating === 'poor') {\n    console.warn(`Poor ${metricName} performance:`, {\n      value: metricValue,\n      threshold: PERFORMANCE_THRESHOLDS[metricName],\n      url: performanceMetric.url\n    });\n  }\n}\n\n/**\n * Sends metric data to analytics endpoint\n */\nasync function sendMetricToAnalytics(metric: PerformanceMetric): Promise<void> {\n  try {\n    await fetch('/api/analytics/web-vitals', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(metric),\n    });\n  } catch (error) {\n    // Silently fail - don't impact user experience\n    console.info('Analytics endpoint unavailable:', error);\n  }\n}\n\n/**\n * Initializes Core Web Vitals monitoring\n * Call this in your app's root component or _app.tsx\n */\nexport function initWebVitalsMonitoring(): void {\n  try {\n    // Type-safe metric handlers with explicit casting\n    const safeHandleMetric = (metric: Metric) => handleMetric(metric);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getCLS(safeHandleMetric);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getFCP(safeHandleMetric);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getFID(safeHandleMetric);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getLCP(safeHandleMetric);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getTTFB(safeHandleMetric);\n  } catch (error) {\n    console.warn('Failed to initialize web vitals monitoring:', error);\n  }\n}\n\n/**\n * Gets current performance metrics summary\n */\nexport function getPerformanceMetrics(): {\n  metrics: PerformanceMetric[];\n  summary: Record<MetricName, {\n    latest: number | null;\n    average: number;\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\n    count: number;\n  }>;\n} {\n  const summary = {} as Record<MetricName, {\n    latest: number | null;\n    average: number;\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\n    count: number;\n  }>;\n\n  // Initialize summary for all metrics\n  for (const metricName of Object.keys(PERFORMANCE_THRESHOLDS)) {\n    const name = metricName as MetricName;\n    const metricData = metricsStore.filter(m => m.name === name);\n    \n    if (metricData.length === 0) {\n      summary[name] = {\n        latest: undefined,\n        average: 0,\n        rating: 'no-data',\n        count: 0\n      };\n    } else {\n      const latest = metricData.at(-1);\n      const average = metricData.reduce((sum, m) => sum + m.value, 0) / metricData.length;\n      \n      summary[name] = {\n        latest: latest?.value ?? undefined,\n        average: Math.round(average),\n        rating: getRating(name, average),\n        count: metricData.length\n      };\n    }\n  }\n\n  return {\n    metrics: [...metricsStore],\n    summary\n  };\n}\n\n/**\n * Performance budget checker\n */\nexport function checkPerformanceBudget(): {\n  passed: boolean;\n  violations: Array<{\n    metric: MetricName;\n    value: number;\n    threshold: number;\n    severity: 'warning' | 'critical';\n  }>;\n} {\n  const { summary } = getPerformanceMetrics();\n  const violations: Array<{\n    metric: MetricName;\n    value: number;\n    threshold: number;\n    severity: 'warning' | 'critical';\n  }> = [];\n\n  for (const [metricName, data] of Object.entries(summary)) {\n    const name = metricName as MetricName;\n    if (data.latest == undefined) continue;\n\n    const thresholds = PERFORMANCE_THRESHOLDS[name];\n    \n    if (data.latest > thresholds.needsImprovement) {\n      violations.push({\n        metric: name,\n        value: data.latest,\n        threshold: thresholds.needsImprovement,\n        severity: 'critical'\n      });\n    } else if (data.latest > thresholds.good) {\n      violations.push({\n        metric: name,\n        value: data.latest,\n        threshold: thresholds.good,\n        severity: 'warning'\n      });\n    }\n  }\n\n  return {\n    passed: violations.length === 0,\n    violations\n  };\n}\n\n/**\n * Performance optimization suggestions based on metrics\n */\nexport function getPerformanceOptimizationSuggestions(): Array<{\n  metric: MetricName;\n  issue: string;\n  suggestions: string[];\n  priority: 'high' | 'medium' | 'low';\n}> {\n  const { summary } = getPerformanceMetrics();\n  const suggestions: Array<{\n    metric: MetricName;\n    issue: string;\n    suggestions: string[];\n    priority: 'high' | 'medium' | 'low';\n  }> = [];\n\n  for (const [metricName, data] of Object.entries(summary)) {\n    const name = metricName as MetricName;\n    if (data.rating === 'poor' || data.rating === 'needs-improvement') {\n      switch (name) {\n        case 'LCP': {\n          suggestions.push({\n            metric: name,\n            issue: `Largest Contentful Paint is ${data.latest}ms (target: <2500ms)`,\n            suggestions: [\n              'Optimize images with Next.js Image component',\n              'Implement lazy loading for non-critical content',\n              'Use CDN for static assets',\n              'Optimize server response times',\n              'Preload critical resources'\n            ],\n            priority: 'high'\n          });\n          break;\n        }\n        case 'FID': {\n          suggestions.push({\n            metric: name,\n            issue: `First Input Delay is ${data.latest}ms (target: <100ms)`,\n            suggestions: [\n              'Reduce JavaScript bundle size',\n              'Implement code splitting',\n              'Use web workers for heavy computations',\n              'Optimize third-party scripts',\n              'Defer non-critical JavaScript'\n            ],\n            priority: 'high'\n          });\n          break;\n        }\n        case 'CLS': {\n          suggestions.push({\n            metric: name,\n            issue: `Cumulative Layout Shift is ${data.latest} (target: <0.1)`,\n            suggestions: [\n              'Set explicit dimensions for images and videos',\n              'Reserve space for dynamic content',\n              'Use CSS aspect-ratio for responsive images',\n              'Avoid inserting content above existing content',\n              'Use transform animations instead of layout changes'\n            ],\n            priority: 'medium'\n          });\n          break;\n        }\n        case 'FCP': {\n          suggestions.push({\n            metric: name,\n            issue: `First Contentful Paint is ${data.latest}ms (target: <1800ms)`,\n            suggestions: [\n              'Optimize critical rendering path',\n              'Inline critical CSS',\n              'Minimize render-blocking resources',\n              'Use resource hints (preload, prefetch)',\n              'Optimize web fonts loading'\n            ],\n            priority: 'medium'\n          });\n          break;\n        }\n        case 'TTFB': {\n          suggestions.push({\n            metric: name,\n            issue: `Time to First Byte is ${data.latest}ms (target: <800ms)`,\n            suggestions: [\n              'Optimize server response times',\n              'Use CDN for global distribution',\n              'Implement server-side caching',\n              'Optimize database queries',\n              'Use edge computing for dynamic content'\n            ],\n            priority: 'high'\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  return suggestions.sort((a, b) => {\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/pipeline/pipelineHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PostgrestError' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'PostgrestError'.","line":4,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":4,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[244,300],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'buildTruckDataSchema' has too many lines (66). Maximum allowed is 50.","line":34,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":99,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4637,4640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4637,4640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6264,6267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6264,6267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":144,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":144,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":82}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from '../types';\nimport { ScrapingJobService, FoodTruckService } from '../supabase';\nimport { DuplicatePreventionService } from '../data-quality/duplicatePrevention';\nimport { PostgrestError } from '@supabase/supabase-js';\n\n// Helper function to validate input and prepare basic data\nexport async function validateInputAndPrepare(\n  jobId: string,\n  extractedTruckData: ExtractedFoodTruckDetails,\n  sourceUrl: string\n): Promise<{ isValid: boolean; name: string }> {\n  // Basic input validation\n  if (!validateTruckData(jobId, extractedTruckData)) {\n    await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n      errors: ['Invalid extracted data received from AI processing step.'],\n    });\n    return { isValid: false, name: '' };\n  }\n\n  if (!sourceUrl) {\n    // Log a warning but proceed if sourceUrl is missing, as it might not be critical for all data.\n    console.warn(`Job ${jobId}: Missing sourceUrl for food truck data, proceeding without it.`);\n  }\n\n  const name = extractedTruckData.name ?? 'Unknown Food Truck'; // Ensure name has a fallback\n  console.info(\n    `Job ${jobId}: Preparing to create/update food truck: ${name} from ${sourceUrl ?? 'Unknown Source'}`,\n  );\n\n  return { isValid: true, name };\n}\n\n// Helper function to build truck data schema\nexport function buildTruckDataSchema(\n  extractedTruckData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n  name: string\n): FoodTruckSchema {\n  const currentLocation = buildLocationData(extractedTruckData);\n\n  return {\n    name: name,\n    description: extractedTruckData.description ?? undefined, // Keep as undefined if null/missing\n    current_location: currentLocation,\n    scheduled_locations: Array.isArray(extractedTruckData.scheduled_locations)\n      ? extractedTruckData.scheduled_locations.map((loc) => ({\n          lat: typeof loc.lat === 'number' ? loc.lat : 0,\n          lng: typeof loc.lng === 'number' ? loc.lng : 0,\n          address: loc.address ?? undefined,\n          start_time: loc.start_time ?? undefined,\n          end_time: loc.end_time ?? undefined,\n          timestamp: new Date().toISOString(),\n        }))\n      : undefined,\n    operating_hours: extractedTruckData.operating_hours == undefined\n      ? {\n          monday: { closed: true },\n          tuesday: { closed: true },\n          wednesday: { closed: true },\n          thursday: { closed: true },\n          friday: { closed: true },\n          saturday: { closed: true },\n          sunday: { closed: true },\n        }\n      : {\n          monday: extractedTruckData.operating_hours.monday ?? { closed: true },\n          tuesday: extractedTruckData.operating_hours.tuesday ?? { closed: true },\n          wednesday: extractedTruckData.operating_hours.wednesday ?? { closed: true },\n          thursday: extractedTruckData.operating_hours.thursday ?? { closed: true },\n          friday: extractedTruckData.operating_hours.friday ?? { closed: true },\n          saturday: extractedTruckData.operating_hours.saturday ?? { closed: true },\n          sunday: extractedTruckData.operating_hours.sunday ?? { closed: true },\n        },\n    menu: processMenuData(extractedTruckData),\n    contact_info: {\n      phone: extractedTruckData.contact_info?.phone ?? undefined,\n      email: extractedTruckData.contact_info?.email ?? undefined,\n      website: extractedTruckData.contact_info?.website ?? undefined,\n    },\n    social_media: {\n      instagram: extractedTruckData.social_media?.instagram ?? undefined,\n      facebook: extractedTruckData.social_media?.facebook ?? undefined,\n      twitter: extractedTruckData.social_media?.twitter ?? undefined,\n      tiktok: extractedTruckData.social_media?.tiktok ?? undefined,\n      yelp: extractedTruckData.social_media?.yelp ?? undefined,\n    },\n    cuisine_type: Array.isArray(extractedTruckData.cuisine_type)\n      ? extractedTruckData.cuisine_type\n      : [],\n    price_range: extractedTruckData.price_range ?? undefined, // Ensure it's one of the allowed enum values or undefined\n    specialties: Array.isArray(extractedTruckData.specialties)\n      ? extractedTruckData.specialties\n      : [],\n    data_quality_score: 0.5, // Default score - confidence_score not available in type\n    verification_status: 'pending',\n    source_urls: sourceUrl != undefined && sourceUrl !== '' ? [sourceUrl] : [], // Ensure source_urls is always an array\n    last_scraped_at: new Date().toISOString(),\n  };\n}\n\n// Helper function to handle duplicate checking and resolution\nexport async function handleDuplicateCheck(\n  jobId: string,\n  truckData: FoodTruckSchema,\n  name: string\n): Promise<any> {\n  // Check for duplicates before creating\n  console.info(`Job ${jobId}: Checking for duplicates before creating truck: ${name}`);\n  const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\n\n  let truck;\n  if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\n    const { bestMatch } = duplicateCheck;\n    console.info(`Job ${jobId}: Found potential duplicate (${Math.round(bestMatch.similarity * 100)}% similarity) with truck: ${bestMatch.existingTruck.name}`);\n\n    if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\n      // Merge with existing truck\n      truck = await DuplicatePreventionService.mergeDuplicates(bestMatch.existingTruck.id, bestMatch.existingTruck.id);\n      console.info(`Job ${jobId}: Merged data with existing truck: ${truck.name} (ID: ${truck.id})`);\n    } else if (bestMatch.recommendation === 'update') {\n      // Update existing truck with new data\n      truck = await FoodTruckService.updateTruck(bestMatch.existingTruck.id, truckData);\n      console.info(`Job ${jobId}: Updated existing truck: ${truck.name} (ID: ${truck.id})`);\n    } else {\n      // Create new truck but log the potential duplicate\n      truck = await FoodTruckService.createTruck(truckData);\n      console.warn(`Job ${jobId}: Created new truck despite potential duplicate (${duplicateCheck.reason})`);\n    }\n  } else {\n    // No duplicates found, create new truck\n    truck = await FoodTruckService.createTruck(truckData);\n  }\n\n  return truck;\n}\n\n// Helper function to finalize job status\nexport async function finalizeJobStatus(\n  jobId: string,\n  truck: any,\n  sourceUrl: string\n): Promise<void> {\n  console.info(\n    `Job ${jobId}: Successfully created food truck: ${truck.name} (ID: ${truck.id}) from ${sourceUrl ?? 'Unknown Source'}`,\n  );\n\n  // Link truck_id back to the scraping job\n  await ScrapingJobService.updateJobStatus(jobId, 'completed', {\n    completed_at: new Date().toISOString(),\n  });\n}\n\n// Helper function to validate input data\nfunction validateTruckData(jobId: string, extractedTruckData: ExtractedFoodTruckDetails): boolean {\n  if (extractedTruckData == undefined || typeof extractedTruckData !== 'object') {\n    console.error(`Job ${jobId}: Invalid extractedTruckData, cannot create/update food truck.`);\n    return false;\n  }\n  return true;\n}\n\n// Helper function to build location data\nfunction buildLocationData(extractedTruckData: ExtractedFoodTruckDetails) {\n  const locationData = extractedTruckData.current_location ?? {};\n  const fullAddress = [\n    locationData.address,\n    locationData.city,\n    locationData.state,\n    locationData.zip_code,\n  ]\n    .filter(Boolean)\n    .join(', ');\n\n  return {\n    lat: typeof locationData.lat === 'number' ? locationData.lat : 0,\n    lng: typeof locationData.lng === 'number' ? locationData.lng : 0,\n    address: fullAddress || (locationData.raw_text ?? undefined),\n    timestamp: new Date().toISOString(),\n  };\n}\n\n// Helper function to process menu data\nfunction processMenuData(extractedTruckData: ExtractedFoodTruckDetails): MenuCategory[] {\n  if (!Array.isArray(extractedTruckData.menu)) {\n    return [];\n  }\n\n  return extractedTruckData.menu.map((category: unknown): MenuCategory => {\n    const categoryData = category as { items?: unknown[]; category?: string; name?: string };\n    const items = (Array.isArray(categoryData.items) ? categoryData.items : []).map(\n      (item: unknown): MenuItem => {\n        const itemData = item as {\n          name?: string;\n          description?: string;\n          price?: string | number;\n          dietary_tags?: string[];\n        };\n        let price: number | undefined = undefined;\n        if (typeof itemData.price === 'number') {\n          price = itemData.price;\n        } else if (typeof itemData.price === 'string') {\n          const parsedPrice = Number.parseFloat(itemData.price.replaceAll(/[^\\d.-]/g, ''));\n          if (!Number.isNaN(parsedPrice)) {\n            price = parsedPrice;\n          }\n        }\n        return {\n          name: itemData.name ?? 'Unknown Item',\n          description: itemData.description ?? undefined,\n          price: price,\n          dietary_tags: Array.isArray(itemData.dietary_tags) ? itemData.dietary_tags : [],\n        };\n      },\n    );\n    return {\n      name: categoryData.category ?? categoryData.name ?? 'Uncategorized',\n      items: items,\n    };\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/pipeline/scrapingProcessor.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[549,577],"text":"((scrapeResult.data?.markdown) == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[550,577],"text":"((scrapeResult.data?.markdown) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[549,577],"text":"(!Boolean((scrapeResult.data?.markdown)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":56,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":56,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":76,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":76,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2824,2839],"text":"job.target_url == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2825,2839],"text":"(job.target_url ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2824,2839],"text":"!Boolean(job.target_url)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":108,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":108,"endColumn":80}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\nimport { gemini } from '@/lib/gemini';\nimport { ScrapingJobService } from '@/lib/supabase';\nimport { ExtractedFoodTruckDetails } from '../types';\nimport {\n  validateInputAndPrepare,\n  buildTruckDataSchema,\n  handleDuplicateCheck,\n  finalizeJobStatus,\n} from './pipelineHelpers';\n\nasync function handleScraping(targetUrl: string, jobId: string) {\n  console.info(`Starting scrape for ${targetUrl}`);\n  const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(targetUrl);\n\n  if (!scrapeResult.success || !scrapeResult.data?.markdown) {\n    const error = scrapeResult.error ?? 'Scraping failed or markdown content not found';\n    await handleJobFailure(jobId, error);\n    throw new Error(error);\n  }\n\n  console.info(`Scraping successful for ${targetUrl}, proceeding to Gemini extraction.`);\n  return scrapeResult.data;\n}\n\nasync function handleGeminiExtraction(markdown: string, sourceUrl: string, jobId: string) {\n  const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(markdown, sourceUrl);\n\n  if (!geminiResult.success || !geminiResult.data) {\n    const error = geminiResult.error ?? 'Gemini data extraction failed';\n    await handleJobFailure(jobId, error);\n    throw new Error(error);\n  }\n\n  console.info(`Gemini extraction successful for ${sourceUrl}.`);\n  return geminiResult.data;\n}\n\nasync function handleJobFailure(jobId: string, error: string) {\n  console.error(`Job ${jobId} failed:`, error);\n  try {\n    const currentJob = await ScrapingJobService.getJobsByStatus('all').then(jobs =>\n      jobs.find(j => j.id === jobId)\n    );\n    if (currentJob && currentJob.status !== 'failed') {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', { errors: [error] });\n    }\n  } catch (statusUpdateError) {\n    console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\n  }\n}\n\nasync function handleRetryLogic(jobId: string) {\n  try {\n    const job = await ScrapingJobService.incrementRetryCount(jobId);\n    if (job && typeof job.retry_count === 'number' && typeof job.max_retries === 'number') {\n      if (job.retry_count < job.max_retries) {\n        console.info(`Retrying job ${jobId} (attempt ${job.retry_count}/${job.max_retries})`);\n        setTimeout(() => {\n          void processScrapingJob(jobId);\n        }, 5000);\n      } else {\n        console.warn(`Job ${jobId} reached max retries (${job.max_retries}).`);\n      }\n    } else {\n      console.error(`Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`);\n    }\n  } catch (retryError) {\n    console.error(`Error during retry logic for job ${jobId}:`, retryError);\n  }\n}\n\nexport async function processScrapingJob(jobId: string): Promise<void> {\n  try {\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\n    if (!job.target_url) {\n      throw new Error('No target URL specified');\n    }\n\n    const scrapeData = await handleScraping(job.target_url, jobId);\n    const extractedData = await handleGeminiExtraction(scrapeData.markdown, scrapeData.source_url ?? job.target_url, jobId);\n\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\n      data_collected: extractedData as unknown as Record<string, unknown>,\n      completed_at: new Date().toISOString(),\n    });\n\n    await createOrUpdateFoodTruck(jobId, extractedData, scrapeData.source_url ?? job.target_url);\n\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\n  } catch {\n    await handleRetryLogic(jobId);\n  }\n}\n\nexport async function createOrUpdateFoodTruck(\n  jobId: string,\n  extractedTruckData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n) {\n  try {\n    const validation = await validateInputAndPrepare(jobId, extractedTruckData, sourceUrl);\n    if (!validation.isValid) {\n      return;\n    }\n\n    const truckData = buildTruckDataSchema(extractedTruckData, sourceUrl, validation.name);\n    const truck = await handleDuplicateCheck(jobId, truckData, validation.name);\n    await finalizeJobStatus(jobId, truck, sourceUrl);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.error(`Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`, error);\n    await handleJobFailure(jobId, `Food truck data processing/saving failed: ${errorMessage}`);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/pipelineProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/security/auditLogger.ts","messages":[{"ruleId":"max-params","severity":2,"message":"Static async method 'logAdminAction' has too many parameters (7). Maximum allowed is 4.","line":42,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":42,"endColumn":30},{"ruleId":"max-params","severity":2,"message":"Static async method 'logAuthEvent' has too many parameters (5). Maximum allowed is 4.","line":117,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":117,"endColumn":28},{"ruleId":"max-params","severity":2,"message":"Static async method 'logDataAccess' has too many parameters (6). Maximum allowed is 4.","line":143,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":143,"endColumn":29}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":234,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":234,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":274,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":274,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Security Audit Logging System\n * Implements comprehensive audit logging for admin actions and security events\n */\n\nimport { supabaseAdmin } from '@/lib/supabase';\n\n// Type alias for severity levels to comply with sonarjs/use-type-alias\ntype SeverityLevel = 'info' | 'warning' | 'error' | 'critical';\n\nexport interface AuditLogEntry {\n  user_id: string;\n  user_email: string;\n  action: string;\n  resource_type: string;\n  resource_id?: string;\n  details?: Record<string, unknown>;\n  ip_address?: string;\n  user_agent?: string;\n  session_id?: string;\n  timestamp: string;\n  severity: SeverityLevel;\n}\n\nexport interface SecurityEvent {\n  event_type: 'login_attempt' | 'login_success' | 'login_failure' | 'logout' | 'permission_denied' | 'data_access' | 'data_modification' | 'admin_action';\n  user_id?: string;\n  user_email?: string;\n  ip_address?: string;\n  user_agent?: string;\n  details?: Record<string, unknown>;\n  severity: SeverityLevel;\n}\n\n/**\n * Audit Logger Service\n */\nexport class AuditLogger {\n  /**\n   * Log admin action with full audit trail\n   */\n  static async logAdminAction(\n    userId: string,\n    userEmail: string,\n    action: string,\n    resourceType: string,\n    resourceId?: string,\n    details?: Record<string, unknown>,\n    request?: {\n      ip?: string;\n      userAgent?: string;\n      sessionId?: string;\n    }\n  ): Promise<void> {\n    const auditEntry: AuditLogEntry = {\n      user_id: userId,\n      user_email: userEmail,\n      action,\n      resource_type: resourceType,\n      resource_id: resourceId,\n      details,\n      ip_address: request?.ip,\n      user_agent: request?.userAgent,\n      session_id: request?.sessionId,\n      timestamp: new Date().toISOString(),\n      severity: this.determineSeverity(action, resourceType)\n    };\n\n    await this.writeAuditLog(auditEntry);\n    \n    // Log to console for immediate monitoring\n    console.info('Admin Action Audit:', {\n      user: userEmail,\n      action,\n      resource: (resourceId === undefined) ? resourceType : `${resourceType}:${resourceId}`,\n      timestamp: auditEntry.timestamp\n    });\n  }\n\n  /**\n   * Log security event\n   */\n  static async logSecurityEvent(event: SecurityEvent): Promise<void> {\n    const logEntry = {\n      event_type: event.event_type,\n      user_id: event.user_id,\n      user_email: event.user_email,\n      ip_address: event.ip_address,\n      user_agent: event.user_agent,\n      details: event.details,\n      severity: event.severity,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      if (supabaseAdmin) {\n        await supabaseAdmin\n          .from('security_events')\n          .insert(logEntry);\n      }\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n\n    // Always log security events to console\n    console.info('Security Event:', logEntry);\n\n    // Alert on critical security events\n    if (event.severity === 'critical' || event.severity === 'error') {\n      console.warn('SECURITY ALERT:', logEntry);\n    }\n  }\n\n  /**\n   * Log authentication events\n   */\n  static async logAuthEvent(\n    eventType: 'login_attempt' | 'login_success' | 'login_failure' | 'logout',\n    userEmail?: string,\n    userId?: string,\n    request?: {\n      ip?: string;\n      userAgent?: string;\n    },\n    details?: Record<string, unknown>\n  ): Promise<void> {\n    const severity = eventType === 'login_failure' ? 'warning' : 'info';\n    \n    await this.logSecurityEvent({\n      event_type: eventType,\n      user_id: userId,\n      user_email: userEmail,\n      ip_address: request?.ip,\n      user_agent: request?.userAgent,\n      details,\n      severity\n    });\n  }\n\n  /**\n   * Log data access events\n   */\n  static async logDataAccess(\n    userId: string,\n    userEmail: string,\n    resourceType: string,\n    resourceId?: string,\n    action: 'read' | 'search' | 'export' | 'admin_access' = 'read',\n    request?: {\n      ip?: string;\n      userAgent?: string;\n    }\n  ): Promise<void> {\n    await this.logSecurityEvent({\n      event_type: 'data_access',\n      user_id: userId,\n      user_email: userEmail,\n      ip_address: request?.ip,\n      user_agent: request?.userAgent,\n      details: {\n        resource_type: resourceType,\n        resource_id: resourceId,\n        action\n      },\n      severity: 'info'\n    });\n  }\n\n  /**\n   * Write audit log to database\n   */\n  private static async writeAuditLog(entry: AuditLogEntry): Promise<void> {\n    try {\n      if (supabaseAdmin) {\n        await supabaseAdmin\n          .from('audit_logs')\n          .insert(entry);\n      }\n    } catch (error) {\n      console.error('Failed to write audit log:', error);\n      // Don't throw - audit logging should not break application flow\n    }\n  }\n\n  /**\n   * Determine severity based on action and resource type\n   */\n  private static determineSeverity(action: string, resourceType: string): SeverityLevel {\n    // Critical actions\n    if (action.includes('delete') || action.includes('remove')) {\n      return 'critical';\n    }\n    \n    // Warning actions\n    if (action.includes('update') || action.includes('modify') || action.includes('change')) {\n      return 'warning';\n    }\n    \n    // Admin-specific actions\n    if (resourceType === 'user' || resourceType === 'admin' || resourceType === 'system') {\n      return 'warning';\n    }\n    \n    // Default to info\n    return 'info';\n  }\n\n  /**\n   * Get audit logs for a specific user\n   */\n  static async getUserAuditLogs(\n    userId: string,\n    limit: number = 100,\n    offset: number = 0\n  ): Promise<AuditLogEntry[]> {\n    try {\n      if (!supabaseAdmin) {\n        return [];\n      }\n\n      const { data, error } = await supabaseAdmin\n        .from('audit_logs')\n        .select('*')\n        .eq('user_id', userId)\n        .order('timestamp', { ascending: false })\n        .range(offset, offset + limit - 1);\n\n      if (error) {\n        console.error('Failed to fetch user audit logs:', error);\n        return [];\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return data ?? [];\n    } catch (error) {\n      console.error('Error fetching user audit logs:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get recent security events\n   */\n  static async getRecentSecurityEvents(\n    hours: number = 24,\n    severity?: SeverityLevel\n  ): Promise<Record<string, unknown>[]> {\n    try {\n      if (!supabaseAdmin) {\n        return [];\n      }\n\n      const startTime = new Date();\n      startTime.setHours(startTime.getHours() - hours);\n\n      let query = supabaseAdmin\n        .from('security_events')\n        .select('*')\n        .gte('timestamp', startTime.toISOString())\n        .order('timestamp', { ascending: false });\n\n      if (severity) {\n        query = query.eq('severity', severity);\n      }\n\n      const { data, error } = await query.limit(500);\n\n      if (error) {\n        console.error('Failed to fetch security events:', error);\n        return [];\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return data ?? [];\n    } catch (error) {\n      console.error('Error fetching security events:', error);\n      return [];\n    }\n  }\n}\n\n/**\n * Security monitoring utilities\n */\nexport const SecurityMonitor = {\n  /**\n   * Check for suspicious activity patterns\n   */\n  async checkSuspiciousActivity(userId: string): Promise<{\n    suspicious: boolean;\n    reasons: string[];\n    riskLevel: 'low' | 'medium' | 'high';\n  }> {\n    const reasons: string[] = [];\n    let riskLevel: 'low' | 'medium' | 'high' = 'low';\n\n    try {\n      // Check recent failed login attempts\n      const recentEvents = await AuditLogger.getRecentSecurityEvents(1, 'warning');\n      const failedLogins = recentEvents.filter(\n         \n        event => event.event_type === 'login_failure' && event.user_id === userId\n      );\n\n      if (failedLogins.length > 5) {\n        reasons.push('Multiple failed login attempts');\n        riskLevel = 'high';\n      } else if (failedLogins.length > 2) {\n        reasons.push('Recent failed login attempts');\n        riskLevel = 'medium';\n      }\n\n      // Check for unusual access patterns\n      const auditLogs = await AuditLogger.getUserAuditLogs(userId, 50);\n      const recentActions = auditLogs.filter(\n        log => new Date(log.timestamp) > new Date(Date.now() - 60 * 60 * 1000) // Last hour\n      );\n\n      if (recentActions.length > 20) {\n        reasons.push('High activity volume');\n        riskLevel = riskLevel === 'high' ? 'high' : 'medium';\n      }\n\n      return {\n        suspicious: reasons.length > 0,\n        reasons,\n        riskLevel\n      };\n    } catch (error) {\n      console.error('Error checking suspicious activity:', error);\n      return {\n        suspicious: false,\n        reasons: [],\n        riskLevel: 'low'\n      };\n    }\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/security/rateLimiter.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":276,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":276,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7921,7938],"text":"result.retryAfter != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7921,7938],"text":"result.retryAfter ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7921,7938],"text":"Boolean(result.retryAfter)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"/**\n * SOTA Rate Limiting Implementation\n * Prevents brute force attacks and API abuse with intelligent rate limiting\n */\n\nimport { NextResponse } from 'next/server'; // Added import for NextResponse\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  blocked: boolean;\n  blockUntil?: number;\n}\n\n// In-memory rate limit store (in production, use Redis)\nconst rateLimitStore = new Map<string, RateLimitEntry>();\n\n// Rate limit configurations for different endpoints\nexport const RATE_LIMIT_CONFIGS = {\n  // Authentication endpoints - strict limits\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5, // 5 attempts per 15 minutes\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\n    skipSuccessfulRequests: true\n  },\n  // API endpoints - moderate limits\n  api: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 60, // 60 requests per minute\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\n    skipSuccessfulRequests: false\n  },\n  // Admin endpoints - very strict limits\n  admin: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 20, // 20 requests per minute\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\n    skipSuccessfulRequests: false\n  }\n} as const;\n\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\n\n/**\n * Rate Limiter Service\n */\nexport class RateLimiter {\n  // Extract logic from checkRateLimit to reduce function size\n  private static isBlocked(entry: RateLimitEntry | undefined, now: number): boolean {\n    return Boolean(entry && entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil);\n  }\n\n  private static resetEntry(entry: RateLimitEntry, now: number, config: typeof RATE_LIMIT_CONFIGS[RateLimitType]): void {\n    entry.count = 0;\n    entry.resetTime = now + config.windowMs;\n    entry.blocked = false;\n    entry.blockUntil = undefined;\n  }\n\n  /**\n   * Check if request should be rate limited\n   */\n  static checkRateLimit(\n    identifier: string,\n    type: RateLimitType = 'api'\n  ): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    this.cleanupExpiredEntries();\n    let entry = rateLimitStore.get(key);\n    if (!entry) {\n      entry = { count: 0, resetTime: now + config.windowMs, blocked: false };\n      rateLimitStore.set(key, entry);\n    }\n    if (this.isBlocked(entry, now)) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil((entry.blockUntil! - now) / 1000)\n      };\n    }\n    if (now >= entry.resetTime) {\n      this.resetEntry(entry, now, config);\n    }\n    if (entry.count >= config.maxRequests) {\n      entry.blocked = true;\n      entry.blockUntil = now + config.blockDurationMs;\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil(config.blockDurationMs / 1000)\n      };\n    }\n    entry.count++;\n    rateLimitStore.set(key, entry);\n    return {\n      allowed: true,\n      remaining: config.maxRequests - entry.count,\n      resetTime: entry.resetTime\n    };\n  }\n  \n  /**\n   * Record successful request (for auth endpoints)\n   */\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\n    const config = RATE_LIMIT_CONFIGS[type];\n    if (!config.skipSuccessfulRequests) return;\n    \n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n    \n    if (entry) {\n      // Reset counter on successful auth\n      entry.count = 0;\n      entry.blocked = false;\n      entry.blockUntil = undefined;\n      rateLimitStore.set(key, entry);\n    }\n  }\n  \n  /**\n   * Get rate limit status without incrementing\n   */\n  static getStatus(\n    identifier: string,\n    type: RateLimitType = 'api'\n  ): {\n    remaining: number;\n    resetTime: number;\n    blocked: boolean;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n    \n    if (!entry) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false\n      };\n    }\n    \n    // Check if blocked\n    if (entry.blocked && (entry.blockUntil != undefined) && now < entry.blockUntil) { // Changed != undefined to != null\n      return {\n        remaining: 0,\n        resetTime: entry.resetTime,\n        blocked: true,\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000)\n      };\n    }\n    \n    // Check if window expired\n    if (now >= entry.resetTime) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false\n      };\n    }\n    \n    return {\n      remaining: Math.max(0, config.maxRequests - entry.count),\n      resetTime: entry.resetTime,\n      blocked: false\n    };\n  }\n  \n  /**\n   * Clean up expired entries to prevent memory leaks\n   */\n  private static cleanupExpiredEntries(): void {\n    const now = Date.now();\n    \n    for (const [key, entry] of rateLimitStore.entries()) {\n      // Remove entries that are expired and not blocked\n      if (now >= entry.resetTime && (!entry.blocked || (entry.blockUntil == undefined) || now >= entry.blockUntil)) { // Changed == undefined to == null\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n  \n  /**\n   * Clear all rate limit data for an identifier\n   */\n  static clearLimits(identifier: string, type?: RateLimitType): void {\n    if (type) {\n      const key = `${type}:${identifier}`;\n      rateLimitStore.delete(key);\n    } else {\n      // Clear all types for this identifier\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS) as RateLimitType[]) { // Added type assertion\n        const key = `${limitType}:${identifier}`;\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n  \n  /**\n   * Get rate limit statistics\n   */\n  static getStats(): {\n    totalEntries: number;\n    blockedEntries: number;\n    entriesByType: Record<string, number>;\n  } {\n    const stats = {\n      totalEntries: rateLimitStore.size,\n      blockedEntries: 0,\n      entriesByType: {} as Record<string, number>\n    };\n    \n    for (const [key, entry] of rateLimitStore.entries()) {\n      const type = key.split(':')[0];\n      stats.entriesByType[type] = (stats.entriesByType[type] ?? 0) + 1;\n      \n      if (entry.blocked) {\n        stats.blockedEntries++;\n      }\n    }\n    \n    return stats;\n  }\n}\n\n/**\n * Utility function to get client identifier from request\n */\nexport function getClientIdentifier(request: Request): string {\n  // Try to get IP address from various headers\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\n  \n  // Use the first available IP\n  const ip = (forwarded?.split(',')[0]?.trim() ?? realIp ?? cfConnectingIp) ?? 'unknown';\n  \n  // Include user agent for more specific identification\n  const userAgent = request.headers.get('user-agent') ?? 'unknown';\n  \n  // Create a hash of IP + User Agent for better identification\n  return `${ip}:${userAgent.slice(0, 50)}`;\n}\n\n/**\n * Rate limiting middleware for API routes\n */\nexport function withRateLimit(\n  handler: (request: Request) => Promise<Response>,\n  type: RateLimitType = 'api'\n) {\n  return async (request: Request): Promise<Response> => {\n    const identifier = getClientIdentifier(request);\n    const result = RateLimiter.checkRateLimit(identifier, type);\n    \n    if (result.allowed === false) {\n      const headers = new Headers({\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\n        'X-RateLimit-Remaining': '0',\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\n      });\n      \n      if (result.retryAfter) {\n        headers.set('Retry-After', result.retryAfter.toString());\n      }\n      \n      return new NextResponse('Too Many Requests', { status: 429, headers });\n    }\n    \n    const response = await handler(request);\n    \n    // Update headers on successful requests if not skipped\n    if (RATE_LIMIT_CONFIGS[type].skipSuccessfulRequests === false) {\n      const status = RateLimiter.getStatus(identifier, type);\n      response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\n      response.headers.set('X-RateLimit-Remaining', status.remaining.toString());\n      response.headers.set('X-RateLimit-Reset', new Date(status.resetTime).toISOString());\n    }\n    \n    return response;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/supabase.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":112,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":112,"endColumn":51},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":623,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":623,"endColumn":29},{"ruleId":"sonarjs/no-identical-expressions","severity":2,"message":"Correct one of the identical sub-expressions on both sides of operator \"&&\"","line":634,"column":9,"nodeType":"LogicalExpression","messageId":"correctIdenticalSubExpressions","endLine":634,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":642,"column":19,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":642,"endColumn":24},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":649,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":649,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[20936,20941],"text":"(Boolean(truck))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `FoodTruck`.","line":651,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":651,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":653,"column":13,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":653,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":661,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":661,"endColumn":17}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import {\n  createClient,\n  type PostgrestSingleResponse,\n  type PostgrestResponse,\n} from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (supabaseUrl == undefined || supabaseUrl === '') {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\n}\n\nif (supabaseAnonKey == undefined || supabaseAnonKey === '') {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Only create admin client on server side where service key is available\nexport const supabaseAdmin = (supabaseServiceKey != undefined && supabaseServiceKey !== '')\n  ? createClient(supabaseUrl, supabaseServiceKey)\n  : undefined;\n\n// Database types\nimport {\n  MenuCategory,\n  MenuItem,\n  OperatingHours,\n  PriceRange,\n  ExtractedFoodTruckDetails,\n} from './types';\n\nexport interface FoodTruckLocation {\n  lat?: number;\n  lng?: number;\n  address?: string;\n  timestamp: string;\n}\n\n// Re-exporting from types.ts to ensure consistency\n\nexport interface FoodTruck {\n  id: string;\n  name: string;\n  description?: string;\n  current_location: FoodTruckLocation;\n  scheduled_locations?: ExtractedFoodTruckDetails['scheduled_locations']; // Use type from types.ts\n  operating_hours?: OperatingHours; // Use type from types.ts\n  menu?: MenuCategory[]; // Use type from types.ts\n  contact_info?: ExtractedFoodTruckDetails['contact_info']; // Use type from types.ts\n  social_media?: ExtractedFoodTruckDetails['social_media']; // Use type from types.ts\n  cuisine_type?: string[];\n  price_range?: PriceRange; // Use type from types.ts\n  specialties?: string[];\n  data_quality_score?: number;\n  verification_status: 'pending' | 'verified' | 'flagged' | 'rejected';\n  source_urls?: string[];\n  created_at: string;\n  updated_at: string;\n  last_scraped_at?: string;\n  exact_location?: FoodTruckLocation;\n  city_location?: FoodTruckLocation;\n  average_rating?: number; // Added for ratings\n  review_count?: number; // Added for ratings\n}\n\nexport interface ScrapingJob {\n  id: string;\n  job_type: string;\n  target_url?: string;\n  target_handle?: string;\n  platform?: string;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  priority: number;\n  scheduled_at: string;\n  started_at?: string;\n  completed_at?: string;\n  data_collected?: Record<string, unknown>;\n  errors?: string[];\n  retry_count: number;\n  max_retries: number;\n  created_at: string;\n}\n\nexport interface DataProcessingQueue {\n  id: string;\n  truck_id?: string;\n  processing_type: string;\n  raw_data: Record<string, unknown>;\n  processed_data?: Record<string, unknown>;\n  gemini_tokens_used: number;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  priority: number;\n  created_at: string;\n  processed_at?: string;\n}\n\nexport interface ApiUsage {\n  id: string;\n  service_name: string;\n  usage_date: string;\n  requests_count: number;\n  tokens_used: number;\n}\n\n// Food truck operations\nfunction buildMenuByTruck(menuItems: RawMenuItemFromDB[]): Record<string, RawMenuItemFromDB[]> {\n  const menuByTruck: Record<string, RawMenuItemFromDB[]> = {};\n  for (const item of menuItems) {\n    if (!menuByTruck[item.food_truck_id as string]) {\n      menuByTruck[item.food_truck_id as string] = [];\n    }\n    menuByTruck[item.food_truck_id as string].push(item);\n  }\n  return menuByTruck;\n}\n\nfunction handleSupabaseError(error: unknown, context: string) {\n  console.warn(`Error in ${context}:`, error);\n}\n\nexport const FoodTruckService = {\n  async getAllTrucks(limit = 50, offset = 0): Promise<{ trucks: FoodTruck[]; total: number }> {\n    try {\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*', { count: 'exact' })\n        .order('updated_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n      if (error) throw error;\n      const trucks: FoodTruck[] = (data ?? []).map((t: FoodTruck) => normalizeTruckLocation(t));\n      if (trucks.length === 0) return { trucks: [], total: count ?? 0 };\n      const truckIds = trucks.map((t) => t.id);\n      let menuItems: RawMenuItemFromDB[] = [];\n      try {\n        if (truckIds.length > 0) {\n          const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> =\n            await supabase.from('menu_items').select('*').in('food_truck_id', truckIds);\n          if (menuError) throw menuError;\n          menuItems = Array.isArray(items) ? items : [];\n        }\n      } catch (menuError) {\n        handleSupabaseError(menuError, 'getAllTrucks:menu_items');\n      }\n      const menuByTruck = buildMenuByTruck(menuItems);\n      for (const truck of trucks) {\n        truck.menu = groupMenuItems(menuByTruck[truck.id] ?? []);\n      }\n      return { trucks, total: count ?? 0 };\n    } catch (error) {\n      handleSupabaseError(error, 'getAllTrucks');\n      return { trucks: [], total: 0 };\n    }\n  },\n  async getTruckById(id: string): Promise<FoodTruck> {\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase\n      .from('food_trucks')\n      .select('*')\n      .eq('id', id)\n      .single();\n    if (error) throw error;\n    const truck: FoodTruck = normalizeTruckLocation(data);\n    const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> = await supabase\n      .from('menu_items')\n      .select('*')\n      .eq('food_truck_id', id);\n    if (menuError) throw menuError;\n    truck.menu = groupMenuItems(Array.isArray(items) ? items : []);\n    return truck;\n  },\n\n  async getTrucksByLocation(lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> {\n    try {\n      const { trucks } = await FoodTruckService.getAllTrucks();\n      const nearbyTrucks = trucks.filter((truck) => {\n        if (\n          truck.current_location == undefined ||\n          typeof truck.current_location.lat !== 'number' ||\n          typeof truck.current_location.lng !== 'number'\n        ) {\n          return false;\n        }\n        const distance = calculateDistance(\n          lat,\n          lng,\n          truck.current_location.lat,\n          truck.current_location.lng,\n        );\n        return distance <= radiusKm;\n      });\n      return nearbyTrucks;\n    } catch (error: unknown) {\n      console.warn('Error fetching trucks by location:', error);\n      return [];\n    }\n  },\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n    const menuData = truckData.menu;\n    const truckDataWithoutMenu = { ...truckData };\n    delete truckDataWithoutMenu.menu;\n    const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .insert([truckDataWithoutMenu])\n      .select()\n      .single();\n    if (error) throw error;\n    await insertMenuItems(truck.id, menuData);\n    return truck;\n  },\n\n  async updateTruck(id: string, updates: Partial<FoodTruck>): Promise<FoodTruck> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n    const menuData = updates.menu;\n    const updatesWithoutMenu = { ...updates };\n    delete updatesWithoutMenu.menu;\n    const truck = await updateTruckData(id, updatesWithoutMenu);\n    if (menuData != undefined) {\n      await updateTruckMenu(id, menuData);\n    }\n    return truck;\n  },\n\n  async getDataQualityStats(): Promise<{\n    total_trucks: number;\n    avg_quality_score: number;\n    high_quality_count: number;\n    medium_quality_count: number;\n    low_quality_count: number;\n    verified_count: number;\n    pending_count: number;\n    flagged_count: number;\n  }> {\n    try {\n      const {\n        data,\n        error,\n      }: PostgrestSingleResponse<{\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      }> = await supabase.rpc('get_data_quality_stats').single();\n      if (error) throw error;\n      return data as {\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      };\n    } catch (error: unknown) {\n      console.warn('Error fetching data quality stats:', error);\n      return {\n        total_trucks: 0,\n        avg_quality_score: 0,\n        high_quality_count: 0,\n        medium_quality_count: 0,\n        low_quality_count: 0,\n        verified_count: 0,\n        pending_count: 0,\n        flagged_count: 0,\n      };\n    }\n  },\n};\n\n// Helper functions to reduce cognitive complexity\nasync function updateTruckData(\n  id: string,\n  updatesWithoutMenu: Partial<FoodTruck>,\n): Promise<FoodTruck> {\n  if (!supabaseAdmin) {\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n  }\n\n  const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n    .from('food_trucks')\n    .update(updatesWithoutMenu)\n    .eq('id', id)\n    .select()\n    .single();\n\n  if (error) throw error;\n  return truck;\n}\n\nasync function updateTruckMenu(id: string, menuData: MenuCategory[]): Promise<void> {\n  if (!supabaseAdmin) {\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n  }\n\n  // Delete existing menu items\n  const { error: deleteError } = await supabaseAdmin\n    .from('menu_items')\n    .delete()\n    .eq('food_truck_id', id);\n\n  if (deleteError) {\n    console.error('Error deleting existing menu items for truck', id, deleteError);\n  }\n\n  // Insert new menu items if they exist\n  if (menuData != undefined && menuData.length > 0) {\n    const menuItems = menuData.flatMap((category) =>\n      (category.items ?? []).map((item) => ({\n        food_truck_id: id,\n        category: category.name ?? 'Uncategorized',\n        name: item.name ?? 'Unknown Item',\n        description: item.description ?? undefined,\n        price: typeof item.price === 'number' ? item.price : undefined,\n        dietary_tags: item.dietary_tags ?? [],\n      })),\n    );\n\n    if (menuItems.length > 0) {\n      const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\n\n      if (menuError) {\n        console.error('Error inserting updated menu items for truck', id, menuError);\n      }\n    }\n  }\n}\n\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6371;\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\n  const dLon = ((lon2 - lon1) * Math.PI) / 180;\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos((lat1 * Math.PI) / 180) *\n      Math.cos((lat2 * Math.PI) / 180) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance;\n}\n\n// Define a helper type for items coming from the DB, which might include a category field\ninterface RawMenuItemFromDB {\n  name: string;\n  description?: string;\n  price?: number;\n  dietary_tags?: string[];\n  category?: string; // This field is expected from the DB query\n  // Potentially other fields like id, food_truck_id, etc.\n  [key: string]: unknown; // Allow other properties from DB select *\n}\n\nfunction groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\n  const byCategory: Record<string, MenuItem[]> = {}; // Stores processed MenuItems\n  for (const rawItem of rawItems) {\n    const categoryName: string = rawItem.category ?? 'Uncategorized';\n    byCategory[categoryName] ??= [];\n    // Construct a MenuItem conforming to the MenuItem interface (no 'category' property)\n    const menuItem: MenuItem = {\n      name: rawItem.name,\n      // Use nullish coalescing to convert null from DB to undefined for the MenuItem type\n      description: rawItem.description ?? undefined,\n      price: rawItem.price ?? undefined,\n      dietary_tags: rawItem.dietary_tags ?? [], // Default to empty array if null/undefined\n    };\n    byCategory[categoryName].push(menuItem);\n  }\n  // Map to MenuCategory structure { name: string, items: MenuItem[] }\n  return Object.entries(byCategory).map(([categoryName, itemsList]) => ({\n    name: categoryName, // 'name' here refers to the category's name\n    items: itemsList,\n  }));\n}\n\n// Remove redundant type constituent in normalizeTruckLocation\nfunction normalizeTruckLocation(truck: FoodTruck): FoodTruck {\n  const fallback: FoodTruckLocation = {\n    lat: undefined,\n    lng: undefined,\n    address: 'Unknown',\n    timestamp: new Date().toISOString(),\n  };\n  const loc = truck.exact_location ?? truck.current_location ?? truck.city_location ?? {};\n  const lat = typeof loc.lat === 'number' ? loc.lat : undefined;\n  const lng = typeof loc.lng === 'number' ? loc.lng : undefined;\n  const address = loc.address;\n  const timestamp = loc.timestamp;\n\n  truck.current_location =\n    lat == undefined || lng == undefined || (lat === 0 && lng === 0)\n      ? { ...fallback, address: address ?? fallback.address }\n      : {\n          lat,\n          lng,\n          address: address ?? fallback.address,\n          timestamp: timestamp ?? fallback.timestamp,\n        };\n  return truck;\n}\n\nexport const ScrapingJobService = {\n  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .insert([\n        {\n          ...jobData,\n          status: 'pending',\n          retry_count: 0,\n          max_retries: 3,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getJobsByStatus(status: string): Promise<ScrapingJob[]> {\n    try {\n      const query =\n        status === 'all'\n          ? supabase.from('scraping_jobs').select('*')\n          : supabase.from('scraping_jobs').select('*').eq('status', status);\n\n      const { data, error }: PostgrestResponse<ScrapingJob> = await query\n        .order('priority', { ascending: false })\n        .order('scheduled_at', { ascending: true });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs:', error);\n      return [];\n    }\n  },\n  async updateJobStatus(\n    id: string,\n    status: string,\n    updates: Partial<ScrapingJob> = {},\n  ): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({\n        status,\n        ...updates,\n        ...(status === 'running' && { started_at: new Date().toISOString() }),\n        ...(status === 'completed' && { completed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    if (error) throw error;\n    return data;\n  },\n  async incrementRetryCount(id: string): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const {\n      data: current,\n      error: fetchError,\n    }: PostgrestSingleResponse<Pick<ScrapingJob, 'retry_count'>> = await supabaseAdmin\n      .from('scraping_jobs')\n      .select('retry_count')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) throw fetchError;\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({ retry_count: (current?.retry_count ?? 0) + 1 })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n  async getAllJobs(limit = 50, offset = 0): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching all jobs:', error);\n      return [];\n    }\n  },\n\n  async getJobsFromDate(date: Date): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .gte('created_at', date.toISOString())\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs from date:', error);\n      return [];\n    }\n  },\n};\n\nexport const DataProcessingService = {\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .insert([\n        {\n          ...queueData,\n          status: 'pending',\n          gemini_tokens_used: 0,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getNextQueueItem(): Promise<DataProcessingQueue | undefined> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .select('*')\n      .eq('status', 'pending')\n      .order('priority', { ascending: false })\n      .order('created_at', { ascending: true })\n      .limit(1)\n      .single();\n\n    if (error && error.code !== 'PGRST116') throw error;\n    return data ?? undefined;\n  },\n\n  async getQueueByStatus(status: string): Promise<DataProcessingQueue[]> {\n    try {\n      const { data, error }: PostgrestResponse<DataProcessingQueue> = await supabase\n        .from('data_processing_queue')\n        .select('*')\n        .eq('status', status)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching queue:', error);\n      return [];\n    }\n  },\n  async updateQueueItem(\n    id: string,\n    updates: Partial<DataProcessingQueue>,\n  ): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .update({\n        ...updates,\n        ...(updates.status === 'completed' && { processed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n};\n\nexport const DataQualityService = {\n  calculateQualityScore: (truck: FoodTruck) => {\n    // Placeholder for actual quality score calculation logic\n    // This should be implemented based on defined data quality rules\n    let score = 0;\n    if (typeof truck.name === 'string' && truck.name.trim() !== '') score += 20;\n    if (\n      truck.current_location &&\n      typeof truck.current_location.lat === 'number' && !Number.isNaN(truck.current_location.lat) &&\n      typeof truck.current_location.lng === 'number' && !Number.isNaN(truck.current_location.lng)\n    ) score += 30;\n    if (\n      (truck.contact_info &&\n        ((typeof truck.contact_info.phone === 'string' && truck.contact_info.phone.trim() !== '') ||\n         (typeof truck.contact_info.email === 'string' && truck.contact_info.email.trim() !== '') ||\n         (typeof truck.contact_info.website === 'string' && truck.contact_info.website.trim() !== '')))\n    ) score += 25;\n    if (Array.isArray(truck.menu) && truck.menu.length > 0) score += 15;\n    if (truck.operating_hours != undefined && truck.operating_hours != undefined) score += 10;\n    return { score: Math.min(100, score) };\n  },\n\n  async updateTruckQualityScore(truckId: string): Promise<FoodTruck> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n    const { data: truck, error: fetchError } = await supabaseAdmin\n      .from('food_trucks')\n      .select('*')\n      .eq('id', truckId)\n      .single();\n\n    if (fetchError) throw fetchError;\n    if (!truck) throw new Error(`Truck with ID ${truckId} not found.`);\n\n    const { score } = this.calculateQualityScore(truck);\n\n    const { data, error } = await supabaseAdmin\n      .from('food_trucks')\n      .update({ data_quality_score: score })\n      .eq('id', truckId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n};\n\nexport const APIUsageService = {\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<ApiUsage> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const { data: existing }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n      if (existing) {\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .update({\n            requests_count: (existing.requests_count ?? 0) + requests,\n            tokens_used: (existing.tokens_used ?? 0) + tokens,\n          })\n          .eq('id', existing.id)\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      } else {\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .insert([\n            {\n              service_name: serviceName,\n              usage_date: today,\n              requests_count: requests,\n              tokens_used: tokens,\n            },\n          ])\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      }\n    } catch (error: unknown) {\n      console.warn('Error tracking usage:', error);\n      throw error;\n    }\n  },\n  async getTodayUsage(serviceName: string): Promise<ApiUsage | undefined> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      return data ?? undefined;\n    } catch (error: unknown) {\n      console.warn('Error getting today usage:', error);\n      throw error;\n    }\n  },\n\n  async getAllUsageStats(): Promise<ApiUsage[]> {\n    try {\n      const { data, error }: PostgrestResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .order('usage_date', { ascending: false })\n        .limit(30);\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error getting usage stats:', error);\n      throw error;\n    }\n  },\n};\n\nexport { type MenuItem, type MenuCategory, type OperatingHours, type PriceRange } from './types';\n\n// Helper to prepare menu items for DB insertion\nfunction prepareMenuItemsForInsert(truckId: string, menuData: MenuCategory[] | undefined) {\n  if (!menuData || menuData.length === 0) return [];\n  return menuData.flatMap((category) =>\n    (category.items ?? []).map((item) => ({\n      food_truck_id: truckId,\n      category: category.name ?? 'Uncategorized',\n      name: item.name ?? 'Unknown Item',\n      description: item.description ?? undefined,\n      price: typeof item.price === 'number' ? item.price : undefined,\n      dietary_tags: item.dietary_tags ?? [],\n    }))\n  );\n}\n\nasync function insertMenuItems(truckId: string, menuData: MenuCategory[] | undefined) {\n  const menuItems = prepareMenuItemsForInsert(truckId, menuData);\n  if (menuItems.length === 0) return;\n  const { error: menuError } = await supabaseAdmin!.from('menu_items').insert(menuItems);\n  if (menuError) {\n    console.error('Error inserting menu items for truck', truckId, menuError);\n  }\n}\n\n// Fix all strict-boolean-expressions and always-true/false comparisons below\n// Example: if (someString) => if (typeof someString === 'string' && someString.trim() !== '')\n// Example: if (someNumber) => if (typeof someNumber === 'number' && !Number.isNaN(someNumber) && someNumber !== 0)\n// Example: if (someObject) => if (someObject != null && someObject != null)\n\n// For all other conditionals, ensure explicit nullish/empty/NaN checks as above\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/types/foodTruck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/utils/dataQualityFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/utils/foodTruckHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":23,"column":83,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":23,"endColumn":87},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":28,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":28,"endColumn":18}],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":48,"endColumn":45,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import { FoodTruck } from '@/lib/types/foodTruck';\n\nexport const getCurrentDay = () => {\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  return days[new Date().getDay()];\n};\n\nexport const formatPrice = (price: number) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(price);\n};\n\nexport const formatHours = (hours: { open: string; close: string; }) => {\n    const open = new Date(`1970-01-01T${hours.open}Z`).toLocaleTimeString('en-US', {hour: 'numeric', minute: 'numeric', hour12: true});\n    const close = new Date(`1970-01-01T${hours.close}Z`).toLocaleTimeString('en-US', {hour: 'numeric', minute: 'numeric', hour12: true});\n    return `${open} - ${close}`;\n}\n\nexport const getPopularItems = (truck: FoodTruck) => {\n    // Explicitly check for nullish and boolean\n    return truck.menu?.flatMap(category => category.items).filter(item => Boolean(item && item.is_popular === true)) ?? [];\n}\n\nexport const getPriceRange = (truck: FoodTruck) => {\n    const allItems = truck.menu?.flatMap(category => category.items);\n    if (!allItems || allItems.length === 0) {\n        return 'N/A';\n    }\n    const prices = allItems.map(item => item.price);\n    const minPrice = Math.min(...prices);\n    const maxPrice = Math.max(...prices);\n    return `${formatPrice(minPrice)} - ${formatPrice(maxPrice)}`;\n}\n\nexport const getTodayHours = (truck: FoodTruck) => {\n    const today = getCurrentDay();\n    return truck.operating_hours?.[today];\n}\n\n// Get user's current location or default to San Francisco\nexport function getUserLocationHelper(\n  setUserLocation: (location: { lat: number; lng: number }) => void\n) {\n  if (typeof navigator !== 'undefined' && navigator.geolocation != undefined) {\n    // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      },\n      (error) => {\n        console.warn('Location access denied:', error);\n        // Default to San Francisco\n        setUserLocation({ lat: 37.7749, lng: -122.4194 });\n      },\n    );\n  } else {\n    // Default to San Francisco if geolocation is not supported\n    setUserLocation({ lat: 37.7749, lng: -122.4194 });\n  }\n}\n\n// Load all food trucks from API\nexport async function loadFoodTrucksHelper(\n  setTrucks: (trucks: FoodTruck[]) => void,\n  setLoading: (loading: boolean) => void\n) {\n  try {\n    const response = await fetch('/api/trucks');\n    const data: unknown = await response.json();\n    if (typeof data === 'object' && data != undefined && 'trucks' in data && Array.isArray(data.trucks)) {\n      setTrucks(data.trucks as FoodTruck[]);\n    } else {\n      setTrucks([]);\n    }\n  } catch (error: unknown) {\n    console.error('Failed to load food trucks:', error);\n  } finally {\n    setLoading(false);\n  }\n}\n\n// Load nearby food trucks based on user location\nexport async function loadNearbyTrucksHelper(\n  userLocation: { lat: number; lng: number } | undefined,\n  setTrucks: (trucks: FoodTruck[]) => void\n) {\n  if (!userLocation) return;\n\n  try {\n    const response = await fetch(\n      `/api/trucks?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10`,\n    );\n    const data: unknown = await response.json();\n    if (typeof data === 'object' && data != undefined && 'trucks' in data && Array.isArray(data.trucks)) {\n      setTrucks(data.trucks as FoodTruck[]);\n    } else {\n      setTrucks([]);\n    }\n  } catch (error: unknown) {\n    console.error('Failed to load nearby trucks:', error);\n  }\n}\n\n// Check if a food truck is currently open\nexport function isTruckOpen(truck: FoodTruck): boolean {\n  const today = getCurrentDay();\n  const hours = truck.operating_hours?.[today];\n\n  // Ensure hours and its properties are not null/undefined before accessing\n  if (hours == undefined || hours.closed === true || hours.open == undefined || hours.close == undefined) {\n    return false;\n  }\n\n  try {\n    const now = new Date();\n    const currentTime = now.getHours() * 100 + now.getMinutes();\n    const openTime = Number.parseInt(hours.open.replace(':', ''));\n    const closeTime = Number.parseInt(hours.close.replace(':', ''));\n\n    return currentTime >= openTime && currentTime <= closeTime;\n  } catch (error: unknown) {\n    console.error('Error parsing operating hours for truck', truck.name, error);\n    return false;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/utils/quality-scorer.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `qualityScorer.ts` or `QualityScorer.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"unicorn/no-empty-file","severity":2,"message":"Empty files are not allowed.","line":1,"column":1,"nodeType":"Program","messageId":"no-empty-file","endLine":1,"endColumn":1}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]}]