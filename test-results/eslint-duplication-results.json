[{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\access-denied\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\analytics\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\auto-scraping\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-cleanup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-quality\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\events\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\monitoring\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\test-pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\users\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\automated-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\cron-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-quality\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\oauth-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\realtime-events\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\scraping-metrics\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\analytics\\web-vitals\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\auto-scrape-initiate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\autonomous-discovery\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\auto-scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\quality-check\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\dashboard\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\enhanced-pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\firecrawl\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\gemini\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\monitoring\\api-usage\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scheduler\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\search\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\tavily\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-integration\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-pipeline-run\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\callback\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\SearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":30,"column":15,"nodeType":null,"endLine":30,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[831,834],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\WebVitalsReporter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\AdminNavLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\DataCleanupDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\RealtimeStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\UserMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupOperationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupSummaryCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\OperationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\DataQualityScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\PipelineStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\QualityDistributionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\RecentErrorsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\TotalFoodTrucksCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\BasicInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\ContactField.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":33,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[885,889],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[885,889],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[885,889],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n// Removed Mail, Phone, Globe imports as they are not directly used here\n\ninterface ContactFieldProps {\n  readonly icon: React.ComponentType<{ className?: string }>;\n  readonly label: string;\n  readonly value?: string;\n  readonly href?: string;\n  readonly unavailableText: string;\n}\n\nexport function ContactField({\n  icon: Icon,\n  label,\n  value,\n  href,\n  unavailableText,\n}: Readonly<ContactFieldProps>) {\n  if (value == undefined || value.length === 0) {\n    return (\n      <div className=\"flex items-center gap-3 text-gray-400\">\n        <Icon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{unavailableText}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <Icon className=\"h-4 w-4 text-gray-500\" />\n      <div>\n        <label className=\"text-sm font-medium text-gray-500\">{label}</label>\n        {href ? (\n          <a\n            href={href}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-blue-600 hover:text-blue-800 underline\"\n          >\n            {value}\n          </a>\n        ) : (\n          <p className=\"text-gray-900\">{value}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\ContactInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\DataQualityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\LocationInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\OperatingHoursCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityScoreMetric.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\RatingsReviewsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\SocialMediaLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\FailedProcessingQueueTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\PipelineStatisticsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\RecentScrapingJobsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobsTableContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertListDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ConnectionStatusHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\EventControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\RealtimeStatusDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ScrapingJobsStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\StatusHelpers.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/function-return-type","severity":2,"message":"Refactor this function to always return the same type.","line":24,"column":64,"nodeType":null,"endLine":24,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/function-return-type","severity":2,"message":"Refactor this function to always return the same type.","line":42,"column":63,"nodeType":null,"endLine":42,"endColumn":65,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlertItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemAlertsLogic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\users\\UserTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\AppHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\LoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MainContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MapSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckAccordionContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\login\\EmailFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\DynamicMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapLoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapViewUpdater.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\TruckMarkers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\UserLocationMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\mapHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\ApiMonitoringDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\TechnicalDetailsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\AdvancedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\CuisineTypesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\DistanceSliderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\FilterToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\MainSearchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\QuickFiltersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchFilterContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchInputWithIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineSubmitHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestResultsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\ContactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\OperatingHoursSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\SocialMediaSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckAccordionItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckBasicInfo.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":32,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":32,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckBasicInfoProps {\n  readonly truck: FoodTruck;\n}\n\nexport function TruckBasicInfo({ truck }: Readonly<TruckBasicInfoProps>) {\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"dark:text-gray-100\">About</CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Food truck information</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Name</label>\n          <p className=\"text-lg font-semibold dark:text-gray-100\">{truck.name}</p>\n        </div>\n\n        {truck.description != undefined && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">\n              Description\n            </label>\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.description}</p>\n          </div>\n        )}\n\n        {truck.cuisine_type && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">\n              Cuisine Type\n            </label>\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.cuisine_type}</p>\n          </div>\n        )}\n\n        {truck.price_range && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">\n              Price Range\n            </label>\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {truck.price_range}\n            </Badge>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardContent.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":8,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":20,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[774,791],"text":"(truck.description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[774,791],"text":"(truck.description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[774,791],"text":"(Boolean(truck.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { FoodTruck, DailyOperatingHours, MenuItem } from '@/lib/types';\nimport { RatingSection } from './RatingSection';\nimport { MenuSection } from './MenuSection';\nimport { ContactSection } from './ContactSection';\nimport { SocialMediaSection } from './SocialMediaSection';\nimport { OperatingHoursSection } from './OperatingHoursSection';\nimport { formatHours } from '@/lib/utils/foodTruckHelpers';\n\ninterface TruckCardContentProps {\n  readonly truck: FoodTruck;\n  readonly todayHours?: DailyOperatingHours;\n  readonly popularItems: MenuItem[]; // Use the full MenuItem type\n}\n\nexport function TruckCardContent({ truck, todayHours, popularItems }: TruckCardContentProps) {\n  return (\n    <>\n      {truck.description && (\n        <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">{truck.description}</p>\n      )}\n      <div className=\"space-y-4\">\n        {/* Ratings & Hours Row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <RatingSection averageRating={truck.average_rating} reviewCount={truck.review_count} />\n          <OperatingHoursSection todayHours={todayHours} formatHours={formatHours} />\n        </div>\n\n        {/* Menu & Contact Row */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <MenuSection popularItems={popularItems} />\n          <ContactSection\n            contactInfo={truck.contact_info}\n            verificationStatus={truck.verification_status}\n          />\n        </div>\n\n        <SocialMediaSection socialMedia={truck.social_media} />\n      </div>\n      {truck.verification_status && (\n        <div className=\"mt-2\">\n          <Badge variant={truck.verification_status === 'verified' ? 'default' : 'secondary'}>\n            <span className=\"capitalize\">{truck.verification_status}</span>\n          </Badge>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardHeader.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected value in conditional. A boolean expression is required.","line":30,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":30,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":57,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":30,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1340,1350],"text":"(priceRange != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1340,1350],"text":"(priceRange ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1340,1350],"text":"(Boolean(priceRange))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { MapPin } from 'lucide-react';\nimport { FoodTruck } from '@/lib/types';\n\ninterface TruckCardHeaderProps {\n  readonly truck: FoodTruck;\n  readonly isOpen: boolean;\n  readonly popularItems: Array<{ name: string; price: number | string | undefined }>;\n  readonly priceRange: string | undefined;\n}\n\nexport function TruckCardHeader({ truck, isOpen, popularItems, priceRange }: TruckCardHeaderProps) {\n  return (\n    <CardHeader>\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex-1\">\n          <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\n          {truck.current_location?.address != undefined && (\n            <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\n              <MapPin className=\"h-4 w-4 mr-1\" />\n              {truck.current_location.address}\n            </CardDescription>\n          )}\n        </div>\n        <div className=\"flex flex-col items-end space-y-1\">\n          <Badge variant={isOpen ? 'default' : 'secondary'}>{isOpen ? 'Open' : 'Closed'}</Badge>\n          {/* Show price range fallback if no explicit prices */}\n          {popularItems.every((item) => !item.price) && priceRange && (\n            <Badge variant=\"outline\" className=\"mt-1\">\n              {priceRange}\n            </Badge>\n          )}\n        </div>\n      </div>\n    </CardHeader>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckContactInfo.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":40,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":40,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1144,1148],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1144,1148],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1144,1148],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":111,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":111,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3694,3719],"text":"((truck.contact_info?.phone) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3694,3719],"text":"((truck.contact_info?.phone) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3694,3719],"text":"(Boolean((truck.contact_info?.phone)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":119,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":119,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3963,3988],"text":"((truck.contact_info?.email) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3963,3988],"text":"((truck.contact_info?.email) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3963,3988],"text":"(Boolean((truck.contact_info?.email)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Phone, Mail, Globe } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckContactInfoProps {\n  readonly truck: FoodTruck;\n}\n\ninterface ContactFieldProps {\n  readonly icon: React.ComponentType<{ className?: string }>;\n  readonly label: string;\n  readonly value?: string | null;\n  readonly href?: string;\n  readonly unavailableText: string;\n}\n\nfunction ContactField({\n  icon: Icon,\n  label,\n  value,\n  href,\n  unavailableText,\n}: Readonly<ContactFieldProps>) {\n  if (value == undefined || value.length === 0) {\n    // Handles null, undefined, and empty string\n    return (\n      <div className=\"flex items-center gap-3 text-gray-400\">\n        <Icon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{unavailableText}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <Icon className=\"h-4 w-4 text-gray-500\" />\n      <div>\n        <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{label}</label>\n        {href ? (\n          <a\n            href={href}\n            target={href.startsWith('http') ? '_blank' : undefined}\n            rel={href.startsWith('http') ? 'noopener noreferrer' : undefined}\n            className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline\"\n          >\n            {href.startsWith('http') ? 'Visit Website' : value}\n          </a>\n        ) : (\n          <p className=\"text-gray-900 dark:text-gray-200\">{value}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction SocialMediaLinks({\n  socialMedia,\n}: Readonly<{ readonly socialMedia?: Record<string, string> }>) {\n  if (socialMedia == undefined || Object.keys(socialMedia).length === 0) {\n    return;\n  }\n\n  const socialPlatforms = [\n    { key: 'instagram', name: 'Instagram', baseUrl: 'https://instagram.com/', color: 'pink' },\n    { key: 'facebook', name: 'Facebook', baseUrl: 'https://facebook.com/', color: 'blue' },\n    { key: 'twitter', name: 'Twitter', baseUrl: 'https://twitter.com/', color: 'sky' },\n  ];\n\n  return (\n    <div>\n      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Social Media</label>\n      <div className=\"flex flex-wrap gap-2 mt-2\">\n        {socialPlatforms.map(({ key, name, baseUrl, color }) => {\n          const handle = socialMedia[key];\n          if (handle == undefined || handle.length === 0) return; // Handles null, undefined, and empty string\n\n          return (\n            <a\n              key={key}\n              href={`${baseUrl}${handle}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={`flex items-center gap-1 px-2 py-1 bg-${color}-100 text-${color}-800 rounded-md text-sm hover:bg-${color}-200 dark:bg-${color}-900 dark:text-${color}-200`}\n            >\n              <Globe className=\"h-3 w-3\" />\n              {name}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function TruckContactInfo({ truck }: Readonly<TruckContactInfoProps>) {\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Phone className=\"h-5 w-5\" />\n          Contact Information\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Get in touch</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <ContactField\n          icon={Phone}\n          label=\"Phone\"\n          value={truck.contact_info?.phone}\n          href={truck.contact_info?.phone ? `tel:${truck.contact_info.phone}` : undefined}\n          unavailableText=\"No phone number available\"\n        />\n\n        <ContactField\n          icon={Mail}\n          label=\"Email\"\n          value={truck.contact_info?.email}\n          href={truck.contact_info?.email ? `mailto:${truck.contact_info.email}` : undefined}\n          unavailableText=\"No email available\"\n        />\n\n        <ContactField\n          icon={Globe}\n          label=\"Website\"\n          value={truck.contact_info?.website}\n          href={truck.contact_info?.website}\n          unavailableText=\"No website available\"\n        />\n\n        <SocialMediaLinks socialMedia={truck.social_media} />\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckLocationInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckOperatingHours.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":33,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":33,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckOperatingHoursProps {\n  readonly truck: FoodTruck;\n}\n\ninterface DayData {\n  closed?: boolean;\n  open?: string;\n  close?: string;\n}\n\nfunction DaySchedule({ day, dayData }: Readonly<{ day: string; dayData?: DayData }>) {\n  const dayName = day.charAt(0).toUpperCase() + day.slice(1);\n\n  return (\n    <div className=\"flex justify-between items-center\">\n      <span className=\"text-sm font-medium dark:text-gray-200\">{dayName}</span>\n      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n        {dayData?.closed === true\n          ? 'Closed'\n          : `${dayData?.open ?? 'N/A'} - ${dayData?.close ?? 'N/A'}`}\n      </span>\n    </div>\n  );\n}\n\nexport function TruckOperatingHours({ truck }: TruckOperatingHoursProps) {\n  const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n  const hasOperatingHours = truck.operating_hours && Object.keys(truck.operating_hours).length > 0;\n\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Clock className=\"h-5 w-5\" />\n          Operating Hours\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Daily schedule</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {hasOperatingHours ? (\n          <div className=\"space-y-2\">\n            {daysOfWeek.map((day) => {\n              const dayData = truck.operating_hours?.[day as keyof typeof truck.operating_hours] as\n                | DayData\n                | undefined;\n              return <DaySchedule key={day} day={day} dayData={dayData} />;\n            })}\n          </div>\n        ) : (\n          <p className=\"text-gray-400 text-sm\">Operating hours not available</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckRatingsReviews.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\NavigationMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\SimpleQualityPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ToggleGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":13,"column":9,"nodeType":null,"messageId":"deprecation","endLine":13,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":195,"column":43,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":195,"endColumn":55,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5879,5891],"text":"(Boolean(item.payload))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":108,"column":25,"nodeType":"TSFunctionType","messageId":"exceed","endLine":108,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable max-params */\n'use client';\n\nimport * as React from 'react';\nimport * as RechartsPrimitive from 'recharts';\nimport { NameType, Payload, ValueType } from 'recharts/types/component/DefaultTooltipContent';\n\nimport { cn } from '@/lib/utils';\nimport { useTooltipLabel } from './chart/useTooltipLabel';\nimport { TooltipIndicator } from './chart/TooltipIndicator';\nimport { TooltipItemContent } from './chart/TooltipItemContent';\nimport { getPayloadConfigFromPayload } from './chart/getPayloadConfigFromPayload';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | undefined>(undefined);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n  if (context === undefined) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    readonly config: ChartConfig;\n    readonly children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >['children'];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id ?? uniqueId.replaceAll(':', '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = 'Chart';\n\nconst ChartStyle = ({ id, config }: { readonly id: string; readonly config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, itemConfig]) => (itemConfig.theme ?? itemConfig.color) !== undefined,\n  );\n  if (colorConfig.length === 0) {\n    return;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ?? itemConfig.color;\n    return color !== undefined && color !== '' ? `  --color-${key}: ${color};` : undefined;\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nfunction isNonEmptyArray<T>(arr: T[] | undefined): arr is T[] {\n  return Array.isArray(arr) && arr.length > 0;\n}\n\ntype TooltipFormatter = (\n  value: number,\n  name: string,\n  item: unknown,\n  index: number,\n  payload: Record<string, unknown>[],\n) => React.ReactNode;\ntype TooltipItemData = {\n  name?: string;\n  dataKey?: string;\n  payload?: Record<string, unknown>;\n  color?: string;\n  value?: number;\n};\n\ntype ChartTooltipIndicatorAndContentProps = {\n  indicator: 'line' | 'dot' | 'dashed';\n  hideIndicator: boolean;\n  indicatorColor?: string;\n  nestLabel: boolean;\n  itemConfig: Record<string, unknown>;\n  formatter: TooltipFormatter | undefined;\n  itemData: TooltipItemData;\n  item: Payload<ValueType, NameType>;\n  index: number;\n  tooltipLabel: React.ReactNode;\n};\n\nfunction ChartTooltipIndicatorAndContent(props: Readonly<ChartTooltipIndicatorAndContentProps>) {\n  const {\n    indicator,\n    hideIndicator,\n    indicatorColor,\n    nestLabel,\n    itemConfig,\n    formatter,\n    itemData,\n    item,\n    index,\n    tooltipLabel,\n  } = props;\n  return (\n    <>\n      <TooltipIndicator\n        indicator={indicator}\n        hideIndicator={hideIndicator}\n        indicatorColor={indicatorColor}\n        nestLabel={nestLabel}\n        itemConfig={itemConfig}\n      />\n      <TooltipItemContent\n        formatter={formatter}\n        itemData={itemData}\n        item={item}\n        index={index}\n        itemConfig={itemConfig}\n        nestLabel={nestLabel}\n        tooltipLabel={tooltipLabel}\n      />\n    </>\n  );\n}\n\ntype ChartTooltipItemProps = {\n  item: Payload<ValueType, NameType>;\n  index: number;\n  indicatorProps: {\n    indicator: 'line' | 'dot' | 'dashed';\n    hideIndicator: boolean;\n    color?: string;\n    nestLabel: boolean;\n    config: ChartConfig;\n    nameKey?: string;\n    tooltipLabel: React.ReactNode;\n    formatter: TooltipFormatter | undefined;\n  };\n};\n\nfunction ChartTooltipItem({ item, index, indicatorProps }: Readonly<ChartTooltipItemProps>) {\n  const { indicator, hideIndicator, color, nestLabel, config, nameKey, tooltipLabel, formatter } =\n    indicatorProps;\n  const dataKey = typeof item.dataKey === 'string' ? item.dataKey : undefined;\n\n  const itemData: TooltipItemData = {\n    name: item.name === undefined ? undefined : String(item.name),\n    dataKey,\n    payload:\n      typeof item.payload === 'object' && item.payload\n        ? (item.payload as Record<string, unknown>)\n        : undefined,\n    color: typeof item.color === 'string' ? item.color : undefined,\n    value: typeof item.value === 'number' ? item.value : undefined,\n  };\n  const key = nameKey ?? itemData.name ?? itemData.dataKey ?? 'value';\n  const itemConfig = getPayloadConfigFromPayload(config, item, key) as Record<string, unknown>;\n  const indicatorColor =\n    color ??\n    (itemData.payload !== undefined &&\n    typeof itemData.payload === 'object' &&\n    'fill' in itemData.payload\n      ? String(itemData.payload.fill)\n      : undefined) ??\n    itemData.color;\n  return (\n    <div\n      key={itemData.dataKey ?? index}\n      className={cn(\n        'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\n        indicator === 'dot' && 'items-center',\n      )}\n    >\n      <ChartTooltipIndicatorAndContent\n        indicator={indicator}\n        hideIndicator={hideIndicator}\n        indicatorColor={indicatorColor}\n        nestLabel={nestLabel}\n        itemConfig={itemConfig}\n        formatter={formatter}\n        itemData={itemData}\n        item={item}\n        index={index}\n        tooltipLabel={tooltipLabel}\n      />\n    </div>\n  );\n}\n\ntype ChartTooltipItemsProps = {\n  safePayload: Payload<ValueType, NameType>[];\n  indicatorProps: {\n    indicator: 'line' | 'dot' | 'dashed';\n    hideIndicator: boolean;\n    formatter: TooltipFormatter | undefined;\n    nameKey?: string;\n    color?: string;\n    tooltipLabel: React.ReactNode;\n    config: ChartConfig;\n    nestLabel: boolean;\n  };\n};\n\nfunction ChartTooltipItems(props: Readonly<ChartTooltipItemsProps>) {\n  const { safePayload, indicatorProps } = props;\n  return (\n    <div className=\"grid gap-1.5\">\n      {safePayload.map((item, index) => (\n        <ChartTooltipItem\n          key={item.dataKey ?? index}\n          item={item}\n          index={index}\n          indicatorProps={indicatorProps}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<'div'> & {\n      readonly hideLabel?: boolean;\n      readonly hideIndicator?: boolean;\n      readonly indicator?: 'line' | 'dot' | 'dashed';\n      readonly nameKey?: string;\n      readonly labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = 'dot',\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n    const safePayload: Payload<ValueType, NameType>[] = isNonEmptyArray(payload) ? payload : [];\n    const tooltipLabel = useTooltipLabel({\n      hideLabel,\n      payload: safePayload,\n      label,\n      labelFormatter,\n      labelClassName,\n      config,\n      labelKey,\n    });\n\n    if (active === false || !isNonEmptyArray(safePayload)) {\n      return;\n    }\n\n    const nestLabel = safePayload.length === 1 && indicator !== 'dot';\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\n          className,\n        )}\n      >\n        {!nestLabel && tooltipLabel}\n        <ChartTooltipItems\n          safePayload={safePayload}\n          indicatorProps={{\n            indicator,\n            hideIndicator,\n            formatter: formatter as TooltipFormatter | undefined,\n            nameKey,\n            color,\n            tooltipLabel,\n            config,\n            nestLabel,\n          }}\n        />\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = 'ChartTooltip';\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\ninterface ChartLegendItemProps {\n  item: Payload<ValueType, NameType>;\n  idx: number;\n  hideIcon: boolean;\n  nameKey?: string;\n  config: ChartConfig;\n}\n\nfunction ChartLegendItem({ item, idx, hideIcon, nameKey, config }: Readonly<ChartLegendItemProps>) {\n  const dataKey = item.dataKey?.toString();\n  const itemData = {\n    dataKey,\n    value: item.value?.toString(),\n    color: item.color?.toString(),\n  };\n  const key = nameKey ?? dataKey ?? 'value';\n  const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n  return (\n    <div\n      key={itemData.value ?? idx}\n      className={cn(\n        'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground',\n      )}\n    >\n      {itemConfig?.icon && !hideIcon ? (\n        <itemConfig.icon />\n      ) : (\n        <div\n          className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n          style={{\n            backgroundColor: itemData.color,\n          }}\n        />\n      )}\n      {itemConfig?.label}\n    </div>\n  );\n}\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Legend> &\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\n  const { config } = useChart();\n  const safePayload: Payload<ValueType, NameType>[] = isNonEmptyArray(payload)\n    ? (payload as Payload<ValueType, NameType>[])\n    : [];\n  if (!isNonEmptyArray(safePayload)) {\n    return;\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className,\n      )}\n    >\n      {safePayload.map((item, idx) => (\n        <ChartLegendItem\n          key={item.dataKey ?? idx}\n          item={item}\n          idx={idx}\n          hideIcon={hideIcon}\n          nameKey={nameKey}\n          config={config}\n        />\n      ))}\n    </div>\n  );\n});\nChartLegendContent.displayName = 'ChartLegend';\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\QualityPieChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipItemContent.tsx","messages":[],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":6,"column":24,"nodeType":"TSFunctionType","messageId":"exceed","endLine":6,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\getPayloadConfigFromPayload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\useTooltipLabel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dataQualityCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":20,"column":9,"nodeType":null,"messageId":"deprecation","endLine":20,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":59,"column":9,"nodeType":null,"messageId":"deprecation","endLine":59,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\connectionManagementHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\createEventSourceConnection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\setupEventSourceListeners.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useAutoConnect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useEventHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useRealtimeAdminEventsLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAdminAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAuthHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useDataCleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckFinder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEventsHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSearchFiltersLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSidebarKeyboardShortcut.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlerts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlertsLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useTruckCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\ScraperEngine.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":325,"column":24,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":325,"endColumn":37,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical user agent selection."}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":341,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":341,"endColumn":42,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical random delays."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":45,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":45,"endColumn":23,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical logging IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-quality\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":14,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":14,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[475,483],"text":"truckId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[476,483],"text":"(truckId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[475,483],"text":"!Boolean(truckId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":187,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":187,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4995,5006],"text":"authHeader == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4996,5006],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4995,5006],"text":"!Boolean(authHeader)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { FoodTruckService, supabase, FoodTruck } from '@/lib/supabase';\n\nexport async function handleGetRequest(request: NextRequest): Promise<NextResponse> {\n  const { searchParams } = new URL(request.url);\n  const action = searchParams.get('action');\n  const truckId = searchParams.get('truckId');\n\n  switch (action) {\n    case 'stats': {\n      return await handleStatsAction();\n    }\n    case 'assess': {\n      if (!truckId) {\n        return NextResponse.json(\n          { success: false, error: 'Missing truckId for assess action' },\n          { status: 400 },\n        );\n      }\n      return await handleAssessAction(truckId);\n    }\n    default: {\n      return await handleDefaultGetAction();\n    }\n  }\n}\n\ninterface PostRequestBody {\n  action: string;\n  truckId?: string;\n}\n\nexport async function handlePostRequest(request: NextRequest): Promise<NextResponse> {\n  const body: unknown = await request.json();\n\n  if (typeof body !== 'object' || body === null) {\n    return NextResponse.json({ success: false, error: 'Invalid request body' }, { status: 400 });\n  }\n\n  const { action, truckId } = body as PostRequestBody;\n\n  switch (action) {\n    case 'update-single': {\n      if (truckId === undefined || truckId === '') {\n        return NextResponse.json(\n          { success: false, error: 'Missing truckId for update-single action' },\n          { status: 400 },\n        );\n      }\n      return await handleUpdateSingle(truckId);\n    }\n    case 'batch-update': {\n      return handleBatchUpdate();\n    }\n    case 'recalculate-all': {\n      return await handleRecalculateAll();\n    }\n    default: {\n      return NextResponse.json(\n        { success: false, error: `Unknown action: ${action}` },\n        { status: 400 },\n      );\n    }\n  }\n}\n\nasync function handleStatsAction() {\n  const qualityStats = await FoodTruckService.getDataQualityStats();\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      ...qualityStats,\n      timestamp: new Date().toISOString(),\n    },\n  });\n}\n\nasync function handleAssessAction(truckId: string) {\n  const truckResult = await FoodTruckService.getTruckById(truckId);\n\n  if ('error' in truckResult) {\n    return NextResponse.json({ success: false, error: truckResult.error }, { status: 404 });\n  }\n\n  const truck: FoodTruck = truckResult; // Explicitly cast to FoodTruck\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      truckId,\n      truckName: truck.name,\n      currentScore: truck.data_quality_score,\n      timestamp: new Date().toISOString(),\n    },\n  });\n}\n\nasync function handleDefaultGetAction() {\n  const qualityStats = await FoodTruckService.getDataQualityStats();\n  return NextResponse.json({\n    success: true,\n    data: qualityStats,\n  });\n}\n\nasync function handleUpdateSingle(truckId: string) {\n  const updatedTruckResult = await FoodTruckService.getTruckById(truckId);\n\n  if ('error' in updatedTruckResult) {\n    return NextResponse.json({ success: false, error: updatedTruckResult.error }, { status: 404 });\n  }\n\n  const updatedTruck = updatedTruckResult;\n\n  return NextResponse.json({\n    success: true,\n    message: 'Quality score updated successfully',\n    data: {\n      truckId: updatedTruck.id,\n      truckName: updatedTruck.name,\n      newScore: updatedTruck.data_quality_score,\n      verificationStatus: updatedTruck.verification_status,\n      timestamp: new Date().toISOString(),\n    },\n  });\n}\n\nfunction handleBatchUpdate() {\n  return NextResponse.json({\n    success: true,\n    message: 'Batch quality score update completed',\n    data: {\n      timestamp: new Date().toISOString(),\n    },\n  });\n}\n\nfunction updateSingleTruckQualityScore(truck: { id: string }): boolean {\n  try {\n    // Placeholder for actual update logic if needed\n    // DataQualityService.updateTruckQualityScore(truck.id);\n    return true;\n  } catch (error: unknown) {\n    console.error(`Failed to update truck ${truck.id}:`, error);\n    return false;\n  }\n}\n\nasync function handleRecalculateAll() {\n  const allTrucksResult = await FoodTruckService.getAllTrucks(1000, 0);\n  if (allTrucksResult.error !== undefined) {\n    console.error('Error fetching all trucks for recalculation:', allTrucksResult.error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch trucks for recalculation' },\n      { status: 500 },\n    );\n  }\n  const { trucks } = allTrucksResult;\n  let updated = 0;\n  let errors = 0;\n\n  for (const truck of trucks) {\n    const success = updateSingleTruckQualityScore(truck);\n    if (success) {\n      updated++;\n    } else {\n      errors++;\n    }\n  }\n\n  return NextResponse.json({\n    success: true,\n    message: 'Quality score recalculation completed',\n    data: {\n      totalTrucks: trucks.length,\n      updated,\n      errors,\n      timestamp: new Date().toISOString(),\n    },\n  });\n}\n\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader) return false;\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data, error } = await supabase.auth.getUser(token);\n    const user = data?.user;\n\n    if (error || !user) return false;\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\helpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":225,"column":7,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":225,"endColumn":50,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[7511,7554],"text":"((status.supabase.authSettings?.googleEnabled) ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[7511,7554],"text":"((status.supabase.authSettings?.googleEnabled) === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":216,"column":59,"nodeType":null,"endLine":216,"endColumn":62,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[7322,7325],"text":"!="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabase } from '@/lib/supabase';\nimport { OAuthStatus } from './types';\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\nexport async function handleGetRequest(_request: NextRequest) {\n  const status = await getOAuthStatus();\n\n  return NextResponse.json({\n    success: true,\n    ...status,\n    legacy_format: {\n      oauth_status: status.overall_status,\n      message: getStatusMessage(status.overall_status),\n      configuration_steps:\n        status.overall_status === 'ready'\n          ? undefined\n          : [\n              '1. Go to Supabase Dashboard > Authentication > Providers',\n              '2. Enable Google provider',\n              '3. Add Google OAuth Client ID and Secret',\n              '4. Configure redirect URLs',\n              '5. Test OAuth flow',\n            ],\n    },\n  });\n}\n\n// 1. Refactor nested template literals in generateOAuthTestUrl\nfunction generateOAuthTestUrl(baseUrl: string): string {\n  const redirectPath = `${baseUrl}/auth/callback`;\n  const encodedRedirect = encodeURIComponent(redirectPath);\n  return (\n    process.env.NEXT_PUBLIC_SUPABASE_URL +\n    '/auth/v1/authorize?provider=google&redirect_to=' +\n    encodedRedirect\n  );\n}\n\nexport function handlePostRequest() {\n  // Removed _request parameter\n  const baseUrl =\n    process.env.NODE_ENV === 'production'\n      ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\n      : 'http://localhost:3000';\n\n  const testUrl = generateOAuthTestUrl(baseUrl);\n\n  return NextResponse.json({\n    success: true,\n    message: 'OAuth test URL generated',\n    test_url: testUrl,\n    environment: process.env.NODE_ENV ?? 'development',\n    instructions: [\n      '1. Open the test_url in a new browser tab',\n      '2. Complete Google OAuth flow',\n      '3. Verify redirect to admin dashboard',\n      '4. Check for proper role assignment',\n    ],\n    manual_test_steps: [\n      'Navigate to /login page',\n      'Click Google login button',\n      'Complete OAuth flow',\n      'Verify admin access',\n    ],\n    automation_commands: [\n      'npm run oauth:verify - Check configuration',\n      'npm run oauth:test:dev - Test development flow',\n      'npm run oauth:test:prod - Test production flow',\n    ],\n  });\n}\n\nasync function getOAuthStatus(): Promise<OAuthStatus> {\n  const status: OAuthStatus = {\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\n    supabase: {\n      connected: false,\n      projectId: 'zkwliyjjkdnigizidlln' as string,\n    },\n    environment_variables: {\n      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL !== undefined,\n      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY !== undefined,\n      supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY !== undefined,\n    },\n    oauth_flow: {\n      loginPageExists: true,\n      callbackRouteExists: true,\n      authProviderConfigured: false,\n    },\n    recommendations: [],\n    overall_status: 'not_configured',\n  };\n\n  await checkSupabaseConnection(status, supabase);\n  await checkSupabaseAuthSettings(status);\n  await testOAuthProvider(status, supabase);\n\n  status.recommendations = generateRecommendations(status);\n  status.overall_status = determineOverallStatus(status);\n\n  return status;\n}\n\nasync function checkSupabaseConnection(status: OAuthStatus, supabase: SupabaseClient) {\n  try {\n    const { error } = await supabase.from('profiles').select('count').limit(1);\n    if (error === null) {\n      status.supabase.connected = true;\n    } else {\n      status.supabase.error = error.message;\n    }\n  } catch (error: unknown) {\n    status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\n  }\n}\n\nasync function checkSupabaseAuthSettings(status: OAuthStatus) {\n  try {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    if (typeof supabaseUrl === 'string' && supabaseUrl.length > 0) {\n      // Explicit check for undefined and empty string\n      const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\n      if (settingsResponse.ok === true) {\n        const settings: {\n          external?: { google?: boolean };\n          disable_signup?: boolean;\n          autoconfirm?: boolean;\n        } = (await settingsResponse.json()) as {\n          external?: { google?: boolean };\n          disable_signup?: boolean;\n          autoconfirm?: boolean;\n        };\n        status.supabase.authSettings = {\n          googleEnabled: settings.external?.google ?? false,\n          signupEnabled: settings.disable_signup === false,\n          autoconfirm: settings.autoconfirm ?? false,\n        };\n        if (settings.external?.google !== undefined) {\n          // Explicit check for undefined\n          status.oauth_flow.authProviderConfigured = true;\n        }\n      }\n    }\n  } catch {\n    console.info('Auth settings endpoint requires authentication (normal)');\n  }\n}\n\nasync function testOAuthProvider(status: OAuthStatus, supabase: SupabaseClient) {\n  try {\n    const { error: oauthError } = await supabase.auth.signInWithOAuth({\n      provider: 'google',\n      options: {\n        redirectTo: 'http://localhost:3000/auth/callback',\n        skipBrowserRedirect: true,\n      },\n    });\n    if (oauthError !== null && oauthError.message !== 'Provider not found') {\n      // Explicitly check for oauthError existence\n      status.oauth_flow.authProviderConfigured = true;\n    }\n  } catch (error: unknown) {\n    console.info('OAuth provider test failed (may be normal):', error);\n  }\n}\n\nfunction generateRecommendations(status: OAuthStatus): string[] {\n  const recommendations: string[] = [];\n\n  if (!status.environment_variables.supabaseUrl) {\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\n  }\n  if (!status.environment_variables.supabaseAnonKey) {\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n  }\n  if (!status.environment_variables.supabaseServiceKey) {\n    recommendations.push('❌ Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\n  }\n\n  if (!status.supabase.connected) {\n    recommendations.push('❌ Fix Supabase connection issue');\n    if (typeof status.supabase.error === 'string' && status.supabase.error.length > 0) {\n      recommendations.push(`   Error: ${status.supabase.error}`);\n    }\n  }\n\n  if (status.supabase.authSettings?.googleEnabled === true) {\n    recommendations.push('✅ Google OAuth provider is enabled');\n  } else {\n    recommendations.push(\n      '🔧 Enable Google OAuth provider in Supabase Dashboard',\n      '   Go to: Authentication > Providers > Google',\n    );\n  }\n\n  if (status.overall_status === 'ready') {\n    recommendations.push('🎉 OAuth configuration is complete!', '✅ Test the login flow at /login');\n  }\n\n  if (recommendations.length > 1) {\n    recommendations.push(\n      '📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions',\n      '🔧 Run: npm run oauth:verify for automated checks',\n    );\n  }\n\n  return recommendations;\n}\n\nfunction determineOverallStatus(\n  status: OAuthStatus,\n): 'ready' | 'partial' | 'not_configured' | 'error' {\n  // eslint-disable-next-line sonarjs/different-types-comparison\n  if (!status.supabase.connected || status.supabase.error !== null) {\n    return 'error';\n  }\n\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\n  if (!envVarsComplete) {\n    return 'not_configured';\n  }\n\n  if (status.supabase.authSettings?.googleEnabled && status.oauth_flow.authProviderConfigured) {\n    return 'ready';\n  }\n\n  if (status.supabase.connected && envVarsComplete) {\n    return 'partial';\n  }\n\n  return 'not_configured';\n}\n\nfunction getStatusMessage(status: string): string {\n  switch (status) {\n    case 'ready': {\n      return 'Google OAuth is fully configured and ready to use';\n    }\n    case 'partial': {\n      return 'Basic configuration complete, OAuth provider needs setup';\n    }\n    case 'not_configured': {\n      return 'Google OAuth is not configured';\n    }\n    case 'error': {\n      return 'Configuration error detected';\n    }\n    default: {\n      return 'Unknown configuration status';\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":35,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":35,"endColumn":43,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[795,828],"text":"((authHeader?.startsWith('Bearer ')) ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[794,828],"text":"(authHeader?.startsWith('Bearer ')) === false"},"desc":"Change condition to check if false (`value === false`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":43,"column":28,"nodeType":null,"endLine":43,"endColumn":31,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[1057,1060],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":81,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":83,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":142,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":148,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":346,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":346,"endColumn":40,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for generating non-security-sensitive event IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-misused-promises */\nimport { NextRequest } from 'next/server';\nimport {\n  supabase,\n  supabaseAdmin,\n  ScrapingJobService,\n  FoodTruckService,\n  type ScrapingJob,\n  type FoodTruck,\n} from '@/lib/supabase';\nimport { AdminEvent } from './types';\n\ninterface RealtimeMetrics {\n  scrapingJobs: {\n    active: number;\n    completed: number;\n    failed: number;\n    pending: number;\n  };\n  dataQuality: {\n    averageScore: number;\n    totalTrucks: number;\n    recentChanges: number;\n  };\n  systemHealth: {\n    status: 'healthy' | 'warning' | 'error';\n    uptime: number;\n    lastUpdate: string;\n  };\n}\n\nexport async function verifyAdminAccess(request: NextRequest): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader?.startsWith('Bearer ')) {\n      return false;\n    }\n\n    const token = authHeader.slice(7);\n    const { data, error } = await supabase.auth.getUser(token);\n\n    // eslint-disable-next-line sonarjs/different-types-comparison\n    if (error || data.user === null) {\n      return false;\n    }\n    const user = data.user;\n\n    if (!supabaseAdmin) {\n      return false;\n    }\n\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nexport function handleGetRequest(request: NextRequest): Response {\n  const stream = new ReadableStream({\n    start(controller: ReadableStreamDefaultController<Uint8Array>) {\n      const encoder = new TextEncoder();\n\n      const connectionEvent: AdminEvent = {\n        id: generateEventId(),\n        type: 'heartbeat',\n        timestamp: new Date().toISOString(),\n        data: {\n          message: 'Real-time admin dashboard connected',\n          connectionId: generateEventId(),\n        },\n      };\n\n      controller.enqueue(encoder.encode(formatSSEMessage(connectionEvent)));\n\n      const intervalId = setInterval(async () => {\n        await sendHeartbeatEvent(controller, encoder);\n      }, 5000);\n\n      const changeMonitorId = setupDataChangeMonitor(controller, encoder);\n\n      request.signal.addEventListener('abort', () => {\n        clearInterval(intervalId);\n        clearInterval(changeMonitorId);\n        controller.close();\n      });\n    },\n  });\n\n  return new Response(stream, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      Connection: 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control',\n    },\n  });\n}\n\nasync function sendHeartbeatEvent(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder,\n): Promise<void> {\n  try {\n    const metrics = await fetchRealtimeMetrics();\n    const event: AdminEvent = {\n      id: generateEventId(),\n      type: 'heartbeat',\n      timestamp: new Date().toISOString(),\n      data: { ...metrics },\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\n  } catch (error) {\n    console.error('Error fetching realtime metrics:', error);\n\n    const errorEvent: AdminEvent = {\n      id: generateEventId(),\n      type: 'system_alert',\n      timestamp: new Date().toISOString(),\n      data: {\n        error: 'Failed to fetch metrics',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      severity: 'error',\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(errorEvent)));\n  }\n}\n\nfunction setupDataChangeMonitor(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder,\n): NodeJS.Timeout {\n  return setInterval(async () => {\n    try {\n      await monitorDataChanges(controller, encoder);\n    } catch (error) {\n      console.error('Error monitoring data changes:', error);\n    }\n  }, 10_000);\n}\n\nexport async function handlePostRequest(request: NextRequest): Promise<Response> {\n  try {\n    const body: unknown = await request.json(); // Explicitly type body as unknown\n    let action: string;\n\n    // Type guard to ensure 'body' has 'action' property and is a string\n    if (\n      typeof body === 'object' &&\n      body !== null &&\n      'action' in body &&\n      typeof (body as { action: string }).action === 'string'\n    ) {\n      action = (body as { action: string }).action;\n    } else {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Invalid request body: 'action' property is missing or not a string.\",\n        }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' },\n        },\n      );\n    }\n\n    switch (action) {\n      case 'health_check': {\n        return await handleHealthCheck();\n      }\n\n      case 'trigger_test_event': {\n        return handleTriggerTestEvent();\n      }\n\n      default: {\n        return new Response(\n          JSON.stringify({\n            success: false,\n            error: \"That didn't work, please try again later.\",\n          }),\n          {\n            status: 400,\n            headers: { 'Content-Type': 'application/json' },\n          },\n        );\n      }\n    }\n  } catch (error) {\n    console.error('Realtime events POST error:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: \"That didn't work, please try again later.\",\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      },\n    );\n  }\n}\n\nasync function fetchRealtimeMetrics(): Promise<RealtimeMetrics> {\n  try {\n    const recentJobs = await ScrapingJobService.getJobsByStatus('all');\n    const scrapingMetrics = {\n      active: recentJobs.filter((job: ScrapingJob) => job.status === 'running').length,\n      completed: recentJobs.filter((job: ScrapingJob) => job.status === 'completed').length,\n      failed: recentJobs.filter((job: ScrapingJob) => job.status === 'failed').length,\n      pending: recentJobs.filter((job: ScrapingJob) => job.status === 'pending').length,\n    };\n\n    const qualityStats = await FoodTruckService.getDataQualityStats();\n    const dataQualityMetrics = {\n      averageScore: qualityStats.avg_quality_score ?? 0,\n      totalTrucks: qualityStats.total_trucks ?? 0,\n      recentChanges: 0,\n    };\n\n    const systemHealth = {\n      status: 'healthy' as const,\n      uptime: process.uptime(),\n      lastUpdate: new Date().toISOString(),\n    };\n\n    return {\n      scrapingJobs: scrapingMetrics,\n      dataQuality: dataQualityMetrics,\n      systemHealth,\n    };\n  } catch (error) {\n    console.error('Error fetching realtime metrics:', error);\n    return {\n      scrapingJobs: { active: 0, completed: 0, failed: 0, pending: 0 },\n      dataQuality: { averageScore: 0, totalTrucks: 0, recentChanges: 0 },\n      systemHealth: {\n        status: 'error',\n        uptime: 0,\n        lastUpdate: new Date().toISOString(),\n      },\n    };\n  }\n}\n\nfunction isScrapingJob(obj: unknown): obj is ScrapingJob {\n  return typeof obj === 'object' && obj !== null && 'id' in obj && 'status' in obj;\n}\n\n// Removed isFoodTruck function as it is unused.\n// function isFoodTruck(obj: unknown): obj is FoodTruck {\n//   return typeof obj === 'object' && obj !== null && 'id' in obj && 'name' in obj;\n// }\n\nasync function sendScrapingUpdateEvent(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder,\n): Promise<void> {\n  const recentJobs = await ScrapingJobService.getJobsByStatus('all');\n\n  if (Array.isArray(recentJobs) && recentJobs.length > 0) {\n    const event: AdminEvent = {\n      id: generateEventId(),\n      type: 'scraping_update',\n      timestamp: new Date().toISOString(),\n      data: {\n        recentJobs: recentJobs\n          .filter((job) => isScrapingJob(job))\n          .map((job) => ({\n            // Fixed unicorn/no-array-callback-reference\n            id: job.id,\n            status: job.status,\n            started_at: job.started_at,\n            completed_at: job.completed_at,\n          })),\n        count: recentJobs.length,\n      },\n      severity: 'info',\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\n  }\n}\n\nasync function sendDataQualityChangeEvent(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder,\n): Promise<void> {\n  const recentTrucksResult = await FoodTruckService.getAllTrucks(10, 0);\n  const recentlyUpdated = recentTrucksResult.trucks.filter((truck: FoodTruck) => {\n    if (!truck.updated_at) return false;\n    const updatedAt = new Date(truck.updated_at);\n    const oneMinuteAgo = new Date(Date.now() - 60_000);\n    return updatedAt > oneMinuteAgo;\n  });\n\n  if (recentlyUpdated.length > 0) {\n    const event: AdminEvent = {\n      id: generateEventId(),\n      type: 'data_quality_change',\n      timestamp: new Date().toISOString(),\n      data: {\n        updatedTrucks: recentlyUpdated.map((truck) => ({\n          id: truck.id,\n          name: truck.name,\n          data_quality_score: truck.data_quality_score,\n          updated_at: truck.updated_at,\n        })),\n        count: recentlyUpdated.length,\n      },\n      severity: 'info',\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\n  }\n}\n\nasync function monitorDataChanges(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder,\n): Promise<void> {\n  try {\n    await sendScrapingUpdateEvent(controller, encoder);\n    await sendDataQualityChangeEvent(controller, encoder);\n  } catch (error) {\n    console.error('Error monitoring data changes:', error);\n  }\n}\n\nfunction formatSSEMessage(event: AdminEvent): string {\n  return `id: ${event.id}\\nevent: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`;\n}\n\nfunction generateEventId(): string {\n  // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for generating non-security-sensitive event IDs.\n  return `${Date.now()}-${Math.random().toString(36).slice(2, 11)}`;\n}\n\nasync function handleHealthCheck(): Promise<Response> {\n  const metrics = await fetchRealtimeMetrics();\n  return new Response(\n    JSON.stringify({\n      success: true,\n      status: 'healthy',\n      metrics,\n      timestamp: new Date().toISOString(),\n    }),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    },\n  );\n}\n\nfunction handleTriggerTestEvent(): Response {\n  return new Response(\n    JSON.stringify({\n      success: true,\n      message: 'Test event triggered',\n      timestamp: new Date().toISOString(),\n    }),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    },\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":72,"column":53,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":72,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2295,2304],"text":"(e.details != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2295,2304],"text":"(e.details ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2295,2304],"text":"(Boolean(e.details))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { autoScraper } from '@/lib/autoScraper';\nimport { scheduler } from '@/lib/scheduler';\nimport { logActivity } from '@/lib/activityLogger';\nimport { AutoScrapeResult } from './types';\n\nfunction verifyCronSecret(request: NextRequest): NextResponse | null {\n  const authHeader = request.headers.get('authorization');\n  const cronSecret = process.env.CRON_SECRET;\n\n  if (cronSecret === undefined || cronSecret === '') {\n    console.error('CRON_SECRET not configured');\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n  }\n\n  if (authHeader !== `Bearer ${cronSecret}`) {\n    console.error('Unauthorized cron attempt:', authHeader);\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n  return undefined;\n}\n\nfunction logAutoScrapeStart() {\n  console.info('Starting automated scraping job...');\n  logActivity({\n    type: 'cron_job',\n    action: 'auto_scrape_started',\n    details: { timestamp: new Date().toISOString() },\n  });\n}\n\nfunction logAutoScrapeCompletion(result: AutoScrapeResult) {\n  logActivity({\n    type: 'cron_job',\n    action: 'auto_scrape_completed',\n    details: {\n      timestamp: new Date().toISOString(),\n      trucksProcessed: result.trucksProcessed,\n      newTrucksFound: result.newTrucksFound,\n      errorsCount: result.errors?.length ?? 0,\n    },\n  });\n  console.info('Automated scraping job completed successfully');\n}\n\nfunction logAutoScrapeFailure(error: unknown) {\n  console.error('Auto-scraping cron job failed:', error);\n  logActivity({\n    type: 'cron_job',\n    action: 'auto_scrape_failed',\n    details: {\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error',\n    },\n  });\n}\n\nexport async function handlePostRequest(request: NextRequest) {\n  try {\n    const authResponse = verifyCronSecret(request);\n    if (authResponse) {\n      return authResponse;\n    }\n\n    logAutoScrapeStart();\n\n    const rawResult = await autoScraper.runAutoScraping();\n    // Map errors to string[] for compatibility\n    const result: AutoScrapeResult = {\n      trucksProcessed: rawResult.trucksProcessed,\n      newTrucksFound: rawResult.newTrucksFound,\n      errors: rawResult.errors?.map((e) => e.url + (e.details ? `: ${e.details}` : '')),\n    };\n    scheduler.scheduleFollowUpTasks(result);\n    logAutoScrapeCompletion(result);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Auto-scraping completed successfully',\n      data: {\n        trucksProcessed: result.trucksProcessed,\n        newTrucksFound: result.newTrucksFound,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    logAutoScrapeFailure(error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Auto-scraping failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    );\n  }\n}\n\nexport function handleGetRequest() {\n  return NextResponse.json(\n    { error: 'Method not allowed. Use POST for cron jobs.' },\n    { status: 405 },\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\monitoring\\api-usage\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":103,"column":7,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":103,"endColumn":20,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for simulating task execution."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunnerHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\schemaMapper.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":8,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":8,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from '@/lib/types';\n\nexport function mapExtractedDataToTruckSchema(\n  extractedData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n  isDryRun: boolean,\n): FoodTruckSchema {\n  if (!extractedData || typeof extractedData !== 'object') {\n    throw new Error('Invalid extractedData for mapping.');\n  }\n\n  const name = extractedData.name ?? 'Unknown Test Truck';\n  const locationData = extractedData.current_location ?? {};\n  const fullAddress = [\n    locationData.address,\n    locationData.city,\n    locationData.state,\n    locationData.zip_code,\n  ]\n    .filter(Boolean)\n    .join(', ');\n\n  return {\n    name: name,\n    description: extractedData.description ?? undefined,\n    current_location: {\n      lat: locationData.lat ?? 0,\n      lng: locationData.lng ?? 0,\n      address: fullAddress ?? locationData.raw_text ?? undefined,\n      timestamp: new Date().toISOString(),\n    },\n    scheduled_locations: extractedData.scheduled_locations ?? undefined,\n    operating_hours: extractedData.operating_hours ?? undefined,\n    menu: (extractedData.menu ?? []).map((category: MenuCategory) => ({\n      name: category.name ?? 'Uncategorized',\n      items: (category.items ?? []).map((item: MenuItem) => ({\n        name: item.name ?? 'Unknown Item',\n        description: item.description ?? undefined,\n        price:\n          typeof item.price === 'number' || typeof item.price === 'string' ? item.price : undefined,\n        dietary_tags: item.dietary_tags ?? [],\n      })),\n    })),\n    contact_info: extractedData.contact_info ?? undefined,\n    social_media: extractedData.social_media ?? undefined,\n    cuisine_type: extractedData.cuisine_type ?? [],\n    price_range: extractedData.price_range ?? undefined,\n    specialties: extractedData.specialties ?? [],\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\n    verification_status: 'pending',\n    source_urls: [sourceUrl].filter(Boolean),\n    last_scraped_at: new Date().toISOString(),\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\stageHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\trucks\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\auth\\authHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\batchCleanup.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":168,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":168,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":245,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":245,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":367,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":367,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":424,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":424,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Batch Data Cleanup System\n * Implements automated data quality improvements and cleanup operations\n */\n\nimport { FoodTruckService, type FoodTruck, DataQualityService } from '@/lib/supabase';\nimport { DuplicatePreventionService } from './duplicatePrevention';\nimport { getPlaceholderPatterns, processTruckForPlaceholders } from './placeholderUtils';\n\nexport interface CleanupOperation {\n  type:\n    | 'normalize_phone'\n    | 'fix_coordinates'\n    | 'remove_placeholders'\n    | 'update_quality_scores'\n    | 'merge_duplicates';\n  description: string;\n  affectedCount: number;\n  successCount: number;\n  errorCount: number;\n  errors: string[];\n}\n\nexport interface BatchCleanupResult {\n  totalProcessed: number;\n  operations: CleanupOperation[];\n  summary: {\n    trucksImproved: number;\n    duplicatesRemoved: number;\n    qualityScoreImprovement: number;\n    placeholdersRemoved: number;\n  };\n  duration: number;\n}\n\ninterface MergeOperationContext {\n  operation: CleanupOperation;\n  processedIds: Set<string>;\n}\n\ninterface CoordinateProcessContext {\n  defaultLat: number;\n  defaultLng: number;\n  dryRun: boolean;\n  operation: CleanupOperation;\n}\n\n/**\n * Automated Data Quality Cleanup Service\n */\nexport class BatchCleanupService {\n  /**\n   * Run comprehensive data cleanup operations\n   */\n  static async runFullCleanup(\n    options: {\n      batchSize?: number;\n      dryRun?: boolean;\n      operations?: CleanupOperation['type'][];\n    } = {},\n  ): Promise<BatchCleanupResult> {\n    const startTime = Date.now();\n    const {\n      batchSize = 50,\n      dryRun = false,\n      operations = [\n        'remove_placeholders',\n        'normalize_phone',\n        'fix_coordinates',\n        'update_quality_scores',\n        'merge_duplicates',\n      ],\n    } = options;\n\n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\n    const result = this.initializeCleanupResult();\n    try {\n      const allTrucks = await FoodTruckService.getAllTrucks();\n      result.totalProcessed = allTrucks.total;\n      await this.processTrucksInBatches(allTrucks.trucks, {\n        batchSize,\n        operations,\n        dryRun,\n        result,\n      });\n      return this.finalizeCleanupResult(result, startTime);\n    } catch (error) {\n      console.error('Batch cleanup failed:', error);\n      throw error;\n    }\n  }\n\n  private static initializeCleanupResult(): BatchCleanupResult {\n    return {\n      totalProcessed: 0,\n      operations: [],\n      summary: {\n        trucksImproved: 0,\n        duplicatesRemoved: 0,\n        qualityScoreImprovement: 0,\n        placeholdersRemoved: 0,\n      },\n      duration: 0,\n    };\n  }\n\n  private static finalizeCleanupResult(\n    result: BatchCleanupResult,\n    startTime: number,\n  ): BatchCleanupResult {\n    result.summary = this.calculateSummary(result.operations);\n    result.duration = Date.now() - startTime;\n\n    console.info(`Batch cleanup completed in ${result.duration}ms`);\n    return result;\n  }\n\n  private static async processTrucksInBatches(\n    trucks: FoodTruck[],\n    {\n      batchSize,\n      operations,\n      dryRun,\n      result,\n    }: {\n      batchSize: number;\n      operations: CleanupOperation['type'][];\n      dryRun: boolean;\n      result: BatchCleanupResult;\n    },\n  ): Promise<void> {\n    for (let i = 0; i < trucks.length; i += batchSize) {\n      const batch = trucks.slice(i, i + batchSize);\n      for (const op of operations) {\n        const opResult = await this.runOperation(op, batch, dryRun);\n        result.operations.push(opResult);\n      }\n    }\n  }\n\n  /**\n   * Run a specific cleanup operation\n   */\n  private static async runOperation(\n    type: CleanupOperation['type'],\n    trucks: FoodTruck[],\n    dryRun: boolean,\n  ): Promise<CleanupOperation> {\n    const operation: CleanupOperation = {\n      type,\n      description: this.getOperationDescription(type),\n      affectedCount: 0,\n      successCount: 0,\n      errorCount: 0,\n      errors: [],\n    };\n\n    const operationRunners = {\n      remove_placeholders: this.runRemovePlaceholders,\n      normalize_phone: this.runNormalizePhoneNumbers,\n      fix_coordinates: this.runFixCoordinates,\n      update_quality_scores: this.runUpdateQualityScores,\n      merge_duplicates: this.runMergeDuplicates,\n    };\n\n    try {\n      const runner = operationRunners[type];\n      if (runner) {\n        return await runner.call(this, trucks, dryRun, operation);\n      } else {\n        operation.errors.push(`Unknown operation type: ${String(type)}`);\n        return operation;\n      }\n    } catch (error) {\n      operation.errors.push(\n        `Operation failed: ${error instanceof Error ? error.message : String(error)}`,\n      );\n      return operation;\n    }\n  }\n\n  private static runRemovePlaceholders = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.removePlaceholders(trucks, dryRun, operation);\n  };\n\n  private static runNormalizePhoneNumbers = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.normalizePhoneNumbers(trucks, dryRun, operation);\n  };\n\n  private static runFixCoordinates = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.fixCoordinates(trucks, dryRun, operation);\n  };\n\n  private static runUpdateQualityScores = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.updateQualityScores(trucks, dryRun, operation);\n  };\n\n  private static runMergeDuplicates = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.mergeDuplicates(trucks, dryRun, operation);\n  };\n\n  /**\n   * Remove placeholder and mock data\n   */\n  private static async removePlaceholders(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const placeholderPatterns = getPlaceholderPatterns();\n    const promises = trucks.map((truck) =>\n      this.processSingleTruckForPlaceholders(truck, placeholderPatterns, dryRun, operation),\n    );\n    await Promise.all(promises);\n    return operation;\n  }\n\n  private static async processSingleTruckForPlaceholders(\n    truck: FoodTruck,\n    patterns: RegExp[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    const updates = processTruckForPlaceholders(truck, patterns);\n    if (updates && Object.keys(updates).length > 0) {\n      await this.performUpdateOperation(truck.id, updates, dryRun, operation);\n    }\n  }\n\n  private static async performUpdateOperation(\n    truckId: string,\n    updates: Partial<FoodTruck>,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    operation.affectedCount++;\n    if (dryRun) {\n      operation.successCount++;\n    } else {\n      try {\n        await FoodTruckService.updateTruck(truckId, updates);\n        operation.successCount++;\n      } catch (error) {\n        operation.errorCount++;\n        operation.errors.push(\n          `Failed to update truck ${truckId}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Normalize phone numbers to consistent format\n   */\n  private static async normalizePhoneNumbers(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const promises = trucks.map((truck) => {\n      if (truck.contact_info?.phone !== undefined) {\n        const originalPhone = truck.contact_info.phone;\n        const normalizedPhone = this.normalizePhone(originalPhone);\n\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\n          return this.applyPhoneNormalizationUpdate(truck, normalizedPhone, dryRun, operation);\n        }\n      }\n      return Promise.resolve();\n    });\n    await Promise.all(promises);\n    return operation;\n  }\n\n  private static async applyPhoneNormalizationUpdate(\n    truck: FoodTruck,\n    normalizedPhone: string,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    operation.affectedCount++;\n    if (dryRun) {\n      operation.successCount++;\n    } else {\n      try {\n        await FoodTruckService.updateTruck(truck.id, {\n          contact_info: {\n            ...truck.contact_info,\n            phone: normalizedPhone,\n          },\n        });\n        operation.successCount++;\n      } catch (error) {\n        operation.errorCount++;\n        operation.errors.push(\n          `Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Helper to determine if coordinates need fixing and provide updates\n   */\n  private static getFixedCoordinates(\n    lat: number | undefined,\n    lng: number | undefined,\n    defaultLat: number,\n    defaultLng: number,\n  ): Partial<FoodTruck['current_location']> | undefined {\n    // Fix invalid coordinates (0,0 or undefined)\n    if (lat === undefined || lng === undefined || lat === 0 || lng === 0) {\n      return { lat: defaultLat, lng: defaultLng };\n    }\n    // Fix coordinates outside reasonable bounds for Charleston area\n    if (lat < 32 || lat > 34 || lng > -79 || lng < -81) {\n      return { lat: defaultLat, lng: defaultLng };\n    }\n    return undefined;\n  }\n\n  /**\n   * Fix invalid GPS coordinates\n   */\n  private static async fixCoordinates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const context: Omit<CoordinateProcessContext, 'operation'> = {\n      defaultLat: 32.7767,\n      defaultLng: -79.9311,\n      dryRun,\n    };\n\n    const promises = trucks.map((truck) =>\n      this.processSingleTruckCoordinates(truck, { ...context, operation }),\n    );\n    await Promise.all(promises);\n    return operation;\n  }\n\n  private static async processSingleTruckCoordinates(\n    truck: FoodTruck,\n    context: CoordinateProcessContext,\n  ): Promise<void> {\n    if (!truck.current_location) return;\n    const { defaultLat, defaultLng, dryRun, operation } = context;\n    const { lat, lng } = truck.current_location;\n    const updates = this.getFixedCoordinates(lat, lng, defaultLat, defaultLng);\n    if (updates) {\n      await this.applyCoordinateFixUpdate(truck, updates, dryRun, operation);\n    }\n  }\n\n  private static async applyCoordinateFixUpdate(\n    truck: FoodTruck,\n    updates: Partial<FoodTruck['current_location']>,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    operation.affectedCount++;\n    if (dryRun) {\n      operation.successCount++;\n    } else {\n      try {\n        await FoodTruckService.updateTruck(truck.id, {\n          current_location: {\n            ...truck.current_location,\n            ...updates,\n          },\n        });\n        operation.successCount++;\n      } catch (error) {\n        operation.errorCount++;\n        operation.errors.push(\n          `Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Update quality scores for all trucks\n   */\n  private static async updateQualityScores(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const promises = trucks.map((truck) =>\n      this.processSingleTruckForQualityScore(truck, dryRun, operation),\n    );\n    await Promise.all(promises);\n    return operation;\n  }\n\n  private static async processSingleTruckForQualityScore(\n    truck: FoodTruck,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    const qualityAssessment = DataQualityService.calculateQualityScore(truck);\n    if (qualityAssessment) {\n      const newScore = qualityAssessment.score;\n      const currentScore = truck.data_quality_score ?? 0;\n      // Only update if score changed significantly (>5% difference)\n      if (typeof newScore === 'number' && Math.abs(newScore - currentScore) > 0.05) {\n        await this.applyQualityScoreUpdate(truck, dryRun, operation);\n      }\n    }\n  }\n\n  private static async applyQualityScoreUpdate(\n    truck: FoodTruck,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    operation.affectedCount++;\n    if (dryRun) {\n      operation.successCount++;\n    } else {\n      try {\n        const updateResult = await DataQualityService.updateTruckQualityScore(truck.id);\n        if ('error' in updateResult) {\n          throw new Error(updateResult.error);\n        }\n        operation.successCount++;\n      } catch (error) {\n        operation.errorCount++;\n        operation.errors.push(\n          `Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Identify and merge duplicate trucks\n   */\n  private static async mergeDuplicates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const processedIds = new Set<string>();\n    for (const truck of trucks) {\n      await this.processSingleTruckForDuplicates(truck, dryRun, { operation, processedIds });\n    }\n    return operation;\n  }\n\n  private static async processSingleTruckForDuplicates(\n    truck: FoodTruck,\n    dryRun: boolean,\n    context: MergeOperationContext,\n  ): Promise<void> {\n    const { processedIds } = context;\n    if (processedIds.has(truck.id)) return;\n\n    const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\n    if (\n      duplicateCheck.isDuplicate &&\n      duplicateCheck.bestMatch?.confidence === 'high' &&\n      duplicateCheck.bestMatch.recommendation === 'merge'\n    ) {\n      await this.applyMergeOperation(\n        truck,\n        duplicateCheck.bestMatch.existingTruck,\n        dryRun,\n        context,\n      );\n    }\n    processedIds.add(truck.id);\n  }\n\n  private static async applyMergeOperation(\n    truck: FoodTruck,\n    existingTruck: FoodTruck,\n    dryRun: boolean,\n    context: MergeOperationContext,\n  ): Promise<void> {\n    const { operation, processedIds } = context;\n    operation.affectedCount++;\n    if (dryRun) {\n      operation.successCount++;\n    } else {\n      try {\n        const mergeResult = await DuplicatePreventionService.mergeDuplicates(\n          truck.id,\n          existingTruck.id,\n        );\n        if ('error' in mergeResult) {\n          throw new Error(mergeResult.error);\n        }\n        processedIds.add(existingTruck.id);\n        operation.successCount++;\n      } catch (error) {\n        operation.errorCount++;\n        operation.errors.push(\n          `Failed to merge duplicates ${truck.id} and ${existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Normalize phone number format\n   */\n  private static normalizePhone(phone: string): string | undefined {\n    if (!phone) return undefined;\n\n    // Remove all non-digit characters\n    const digits = phone.replaceAll(/\\D/g, '');\n\n    // Handle US phone numbers\n    if (digits.length === 10) {\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\n    }\n    if (digits.length === 11 && digits.startsWith('1')) {\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\n    }\n\n    // Return original if can't normalize\n    return phone;\n  }\n\n  /**\n   * Get operation description\n   */\n  private static getOperationDescription(type: CleanupOperation['type']): string {\n    const descriptions = {\n      remove_placeholders: 'Remove placeholder and mock data values',\n      normalize_phone: 'Normalize phone numbers to consistent format',\n      fix_coordinates: 'Fix invalid GPS coordinates',\n      update_quality_scores: 'Recalculate data quality scores',\n      merge_duplicates: 'Identify and merge duplicate truck entries',\n    };\n\n    return descriptions[type] ?? 'Unknown operation';\n  }\n\n  /**\n   * Calculate cleanup summary\n   */\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\n    return {\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\n      duplicatesRemoved: operations.find((op) => op.type === 'merge_duplicates')?.successCount ?? 0,\n      qualityScoreImprovement:\n        operations.find((op) => op.type === 'update_quality_scores')?.successCount ?? 0,\n      placeholdersRemoved:\n        operations.find((op) => op.type === 'remove_placeholders')?.successCount ?? 0,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\duplicatePrevention.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":232,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":232,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7077,7089],"text":"(loc1.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7077,7089],"text":"(loc1.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7077,7089],"text":"(Boolean(loc1.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":232,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":232,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7093,7105],"text":"(loc2.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7093,7105],"text":"(loc2.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7093,7105],"text":"(Boolean(loc2.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Duplicate Prevention System\n * Implements intelligent duplicate detection and prevention for food truck data\n */\n\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\n\n// Duplicate detection configuration\nexport const DUPLICATE_DETECTION_CONFIG = {\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\n  thresholds: {\n    name: 0.85, // High threshold for name matching\n    location: 0.9, // Very high threshold for location matching\n    phone: 1, // Exact match for phone numbers\n    website: 1, // Exact match for websites\n    overall: 0.8, // Overall similarity threshold\n  },\n\n  // Weight factors for different fields\n  weights: {\n    name: 0.4, // 40% weight for name similarity\n    location: 0.3, // 30% weight for location similarity\n    contact: 0.2, // 20% weight for contact info similarity\n    menu: 0.1, // 10% weight for menu similarity\n  },\n} as const;\n\nexport interface DuplicateMatch {\n  existingTruck: FoodTruck;\n  similarity: number;\n  matchedFields: string[];\n  confidence: 'high' | 'medium' | 'low';\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\n}\n\nexport interface DuplicateDetectionResult {\n  isDuplicate: boolean;\n  matches: DuplicateMatch[];\n  bestMatch?: DuplicateMatch;\n  action: 'create' | 'update' | 'merge' | 'manual_review';\n  reason: string;\n}\n\n/**\n * Advanced Duplicate Prevention Service\n */\nexport class DuplicatePreventionService {\n  /**\n   * Check if a food truck is a duplicate of existing trucks\n   */\n  static async checkForDuplicates(\n    candidateTruck: Partial<FoodTruck>,\n  ): Promise<DuplicateDetectionResult> {\n    try {\n      // Get all existing trucks for comparison\n      const existingTrucksResult = await FoodTruckService.getAllTrucks();\n\n      if ('error' in existingTrucksResult) {\n        console.error('Error fetching existing trucks:', existingTrucksResult.error);\n        return {\n          isDuplicate: false,\n          matches: [],\n          action: 'create',\n          reason: `Error fetching existing trucks: ${existingTrucksResult.error}`,\n        };\n      }\n\n      const existingTrucks = existingTrucksResult.trucks;\n      const matches: DuplicateMatch[] = [];\n\n      for (const existingTruck of existingTrucks) {\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\n\n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\n          matches.push({\n            existingTruck,\n            similarity: similarity.overall,\n            matchedFields: similarity.matchedFields,\n            confidence: this.getConfidenceLevel(similarity.overall),\n            recommendation: this.getRecommendation(similarity),\n          });\n        }\n      }\n\n      return this.processDuplicateMatches(matches, candidateTruck);\n    } catch (error) {\n      console.error('Error checking for duplicates:', error);\n      return {\n        isDuplicate: false,\n        matches: [],\n        action: 'create',\n        reason:\n          'An unexpected error occurred during duplicate detection - proceeding with creation',\n      };\n    }\n  }\n\n  /**\n   * Processes the matches found during duplicate detection and returns the result.\n   */\n  private static processDuplicateMatches(\n    matches: DuplicateMatch[],\n    candidateTruck: Partial<FoodTruck>,\n  ): DuplicateDetectionResult {\n    // Sort matches by similarity (highest first)\n    matches.sort((a, b) => b.similarity - a.similarity);\n\n    const bestMatch = matches.length > 0 ? matches[0] : undefined;\n    const isDuplicate = matches.length > 0;\n\n    return {\n      isDuplicate,\n      matches,\n      bestMatch,\n      action: this.determineAction(matches, candidateTruck),\n      reason: this.generateReason(matches, candidateTruck),\n    };\n  }\n\n  /**\n   * Calculate similarity between two food trucks\n   */\n  private static calculateSimilarity(\n    candidate: Partial<FoodTruck>,\n    existing: FoodTruck,\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\n    const breakdown: Record<string, number> = {};\n    const matchedFields: string[] = [];\n\n    // Name similarity\n    const nameSimilarity = this.calculateStringSimilarity(\n      candidate.name ?? '',\n      existing.name ?? '',\n    );\n    breakdown.name = nameSimilarity;\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\n      matchedFields.push('name');\n    }\n\n    // Location similarity\n    const locationSimilarity = this.calculateLocationSimilarity(\n      candidate.current_location,\n      existing.current_location,\n    );\n    breakdown.location = locationSimilarity;\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\n      matchedFields.push('location');\n    }\n\n    // Contact similarity\n    const contactSimilarity = this.calculateContactSimilarity(\n      candidate.contact_info,\n      existing.contact_info,\n    );\n    breakdown.contact = contactSimilarity;\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\n      matchedFields.push('contact');\n    }\n\n    // Menu similarity (basic)\n    const menuSimilarity = this.calculateMenuSimilarity(candidate.menu, existing.menu);\n    breakdown.menu = menuSimilarity;\n    if (menuSimilarity > 0.7) {\n      matchedFields.push('menu');\n    }\n\n    // Calculate weighted overall similarity\n    const overall =\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu;\n\n    return { overall, matchedFields, breakdown };\n  }\n\n  /**\n   * Calculate string similarity using Levenshtein distance\n   */\n  private static calculateStringSimilarity(str1: string, str2: string): number {\n    if (!str1 || !str2) return 0;\n\n    // Normalize strings\n    const s1 = str1.toLowerCase().trim();\n    const s2 = str2.toLowerCase().trim();\n\n    if (s1 === s2) return 1;\n\n    // Calculate Levenshtein distance\n    const matrix: number[][] = [];\n    const len1 = s1.length;\n    const len2 = s2.length;\n\n    for (let i = 0; i <= len1; i++) {\n      matrix[i] = [i];\n    }\n\n    for (let j = 0; j <= len2; j++) {\n      matrix[0][j] = j;\n    }\n\n    for (let i = 1; i <= len1; i++) {\n      for (let j = 1; j <= len2; j++) {\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1, // deletion\n          matrix[i][j - 1] + 1, // insertion\n          matrix[i - 1][j - 1] + cost, // substitution\n        );\n      }\n    }\n\n    const distance = matrix[len1][len2];\n    const maxLength = Math.max(len1, len2);\n\n    return maxLength === 0 ? 1 : 1 - distance / maxLength;\n  }\n\n  /**\n   * Calculate location similarity\n   */\n  private static calculateLocationSimilarity(\n    loc1: FoodTruck['current_location'] | undefined | null,\n    loc2: FoodTruck['current_location'] | undefined | null,\n  ): number {\n    if (!loc1 || !loc2) return 0;\n\n    let similarity = 0;\n    let factors = 0;\n\n    // Address similarity\n    if (loc1.address && loc2.address) {\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\n      factors++;\n    }\n\n    // GPS coordinate similarity (within 100 meters = high similarity)\n    if (loc1.lat && loc1.lng && loc2.lat && loc2.lng) {\n      const distance = this.calculateGPSDistance(loc1.lat, loc1.lng, loc2.lat, loc2.lng);\n\n      // Distance similarity (closer = higher similarity)\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - distance / 1); // 1km max\n      similarity += distanceSimilarity;\n      factors++;\n    }\n\n    return factors > 0 ? similarity / factors : 0;\n  }\n\n  /**\n   * Calculate GPS distance in kilometers\n   */\n  private static calculateGPSDistance(\n    lat1: number,\n    lng1: number,\n    lat2: number,\n    lng2: number,\n  ): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = ((lat2 - lat1) * Math.PI) / 180;\n    const dLng = ((lng2 - lng1) * Math.PI) / 180;\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos((lat1 * Math.PI) / 180) *\n        Math.cos((lat2 * Math.PI) / 180) *\n        Math.sin(dLng / 2) *\n        Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  /**\n   * Calculate contact similarity\n   */\n  private static calculateContactSimilarity(\n    contact1: FoodTruck['contact_info'] | undefined | null,\n    contact2: FoodTruck['contact_info'] | undefined | null,\n  ): number {\n    if (!contact1 || !contact2) return 0;\n\n    let matches = 0;\n    let total = 0;\n\n    // Phone number exact match\n    if (contact1.phone != undefined && contact2.phone != undefined) {\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\n      if (phone1 === phone2) matches++;\n      total++;\n    }\n\n    // Website exact match\n    if (contact1.website != undefined && contact2.website != undefined) {\n      const url1 = contact1.website\n        .toLowerCase()\n        .replace(/^https?:\\/\\//, '')\n        .replace(/\\/$/, '');\n      const url2 = contact2.website\n        .toLowerCase()\n        .replace(/^https?:\\/\\//, '')\n        .replace(/\\/$/, '');\n      if (url1 === url2) matches++;\n      total++;\n    }\n\n    // Email similarity\n    if (contact1.email != undefined && contact2.email != undefined) {\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches++;\n      total++;\n    }\n\n    return total > 0 ? matches / total : 0;\n  }\n\n  /**\n   * Calculate menu similarity (basic implementation)\n   */\n  private static calculateMenuSimilarity(\n    menu1: FoodTruck['menu'] | undefined | null,\n    menu2: FoodTruck['menu'] | undefined | null,\n  ): number {\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\n\n    // Simple category name matching\n    const categories1 = menu1\n      .map((cat) => (cat as { category?: string }).category?.toLowerCase() ?? '')\n      .filter(Boolean);\n    const categories2 = menu2\n      .map((cat) => (cat as { category?: string }).category?.toLowerCase() ?? '')\n      .filter(Boolean);\n\n    const commonCategories = categories1.filter((cat) => categories2.includes(cat));\n    const totalCategories = new Set([...categories1, ...categories2]).size;\n\n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\n  }\n\n  /**\n   * Get confidence level based on similarity score\n   */\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\n    if (similarity >= 0.95) return 'high';\n    if (similarity >= 0.85) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * Get recommendation based on similarity analysis\n   */\n  private static getRecommendation(similarity: {\n    overall: number;\n    matchedFields: string[];\n  }): 'merge' | 'update' | 'skip' | 'manual_review' {\n    if (similarity.overall >= 0.95) return 'merge';\n    if (similarity.overall >= 0.9) return 'update';\n    if (similarity.overall >= 0.8) return 'manual_review';\n    return 'skip';\n  }\n\n  /**\n   * Determine action based on matches\n   */\n  private static determineAction(\n    matches: DuplicateMatch[],\n    _candidate: Partial<FoodTruck>,\n  ): 'create' | 'update' | 'merge' | 'manual_review' {\n    if (matches.length === 0) return 'create';\n\n    const bestMatch = matches[0];\n\n    if (bestMatch.confidence === 'high') {\n      const recommendation = bestMatch.recommendation;\n      if (recommendation === 'merge' || recommendation === 'update') {\n        return recommendation;\n      }\n      return 'manual_review';\n    }\n\n    return 'manual_review';\n  }\n\n  /**\n   * Generate human-readable reason\n   */\n  private static generateReason(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): string {\n    if (matches.length === 0) {\n      return 'No duplicates found - safe to create new truck entry';\n    }\n\n    const bestMatch = matches[0];\n    const similarity = Math.round(bestMatch.similarity * 100);\n\n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\n  }\n\n  /**\n   * Merge duplicate truck data intelligently\n   */\n  static async mergeDuplicates(\n    targetId: string,\n    sourceId: string,\n  ): Promise<FoodTruck | { error: string }> {\n    const targetResult = await FoodTruckService.getTruckById(targetId);\n    const sourceResult = await FoodTruckService.getTruckById(sourceId);\n\n    if ('error' in targetResult) {\n      return {\n        error: `Failed to retrieve target truck with ID ${targetId}: ${targetResult.error}`,\n      };\n    }\n    if ('error' in sourceResult) {\n      return {\n        error: `Failed to retrieve source truck with ID ${sourceId}: ${sourceResult.error}`,\n      };\n    }\n\n    const target = targetResult;\n    const source = sourceResult;\n\n    // Merge logic: prefer non-null, more complete data\n    const mergedData: Partial<FoodTruck> = {\n      name: target.name ?? source.name,\n      description: target.description ?? source.description,\n      cuisine_type:\n        (target.cuisine_type?.length ?? 0) > 0 ? target.cuisine_type : source.cuisine_type,\n      price_range: target.price_range ?? source.price_range,\n      current_location: target.current_location ?? source.current_location,\n      contact_info: {\n        ...source.contact_info,\n        ...target.contact_info, // Target takes precedence\n      },\n      operating_hours: target.operating_hours ?? source.operating_hours,\n      menu: (target.menu?.length ?? 0) > 0 ? target.menu : source.menu,\n      social_media: {\n        ...source.social_media,\n        ...target.social_media,\n      },\n      source_urls: [...new Set([...(target.source_urls ?? []), ...(source.source_urls ?? [])])],\n      last_scraped_at: new Date().toISOString(),\n    };\n\n    // Update target with merged data\n    const updatedTruckResult = await FoodTruckService.updateTruck(targetId, mergedData);\n\n    if ('error' in updatedTruckResult) {\n      return {\n        error: `Failed to update target truck with merged data: ${updatedTruckResult.error}`,\n      };\n    }\n\n    console.info(`Merged truck ${sourceId} into ${targetId}`);\n\n    return updatedTruckResult;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\placeholderUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\discoveryEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\geminiApiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\promptTemplates.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":223,"column":3,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":223,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7097,7106],"text":"(sourceUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7097,7106],"text":"(sourceUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7097,7106],"text":"(Boolean(sourceUrl))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const PromptTemplates = {\n  menuProcessing: (rawMenuText: string) => `\nParse the following food truck menu text and return a structured JSON format.\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\n\nMenu text:\n${rawMenuText}\n\nExpected JSON format:\n[\n  {\n    \"category\": \"string\",\n    \"items\": [\n      {\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"price\": number,\n        \"dietary_tags\": [\"string\"]\n      }\n    ]\n  }\n]\n\nRules:\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\n- Include dietary restrictions and special tags\n- Group items into logical categories\n- If no clear categories, use \"Main Items\"\n- Return only the json, no additional text\n  `,\n\n  locationExtraction: (textInput: string) => `\nExtract location information from the following text and return structured data.\nLook for addresses, cross streets, landmarks, or location descriptions.\n\nText:\n${textInput}\n\nExpected JSON format:\n{\n  \"address\": \"string or undefined\",\n  \"city\": \"string or undefined\", \n  \"state\": \"string or undefined\",\n  \"zipCode\": \"string or undefined\",\n  \"coordinates\": {\"lat\": number, \"lng\": number} or undefined,\n  \"confidence\": number,\n  \"landmarks\": [\"string\"]\n}\n\nRules:\n- Set coordinates to undefined if not explicitly provided\n- Confidence should be 0.0 to 1.0 based on clarity\n- Include any mentioned landmarks or cross streets\n- Return only the json, no additional text\n  `,\n\n  operatingHours: (hoursText: string) => `\nParse the following operating hours text and return standardized format.\nConvert all times to 24-hour format and handle various input formats.\n\nHours text:\n${hoursText}\n\nExpected JSON format:\n{\n  \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\n}\n\nRules:\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\n- If closed on a day, set \"closed\": true and omit open/close times\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\n- Default to reasonable hours if ambiguous\n- Return only the json, no additional text\n  `,\n\n  sentimentAnalysis: (reviewText: string) => `\nAnalyze the sentiment of this food truck review and extract key insights.\nFocus on food quality, service, value, and overall experience.\n\nReview text:\n${reviewText}\n\nExpected JSON format:\n{\n  \"score\": number,\n  \"confidence\": number,\n  \"aspects\": {\n    \"food_quality\": number,\n    \"service\": number,\n    \"value\": number,\n    \"overall\": number\n  },\n  \"summary\": \"string\",\n  \"keywords\": [\"string\"]\n}\n\nRules:\n- Score should be 0.0 (very negative) to 1.0 (very positive)\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\n- Include specific aspects mentioned in the review\n- Summary should be 1-2 sentences max\n- Return only the json, no additional text\n  `,\n\n  dataEnhancement: (rawData: unknown) => `\nEnhance and standardize the following food truck data.\nFill in missing information where possible and improve data quality.\n\nRaw data:\n${JSON.stringify(rawData, undefined, 2)}\n\nExpected JSON format:\n{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"cuisine_type\": \"string\",\n  \"price_range\": \"$ | $$ | $$$ | $$$$\",\n  \"contact\": {\n    \"phone\": \"string\",\n    \"email\": \"string\",\n    \"website\": \"string\",\n    \"social_media\": {}\n  },\n  \"location\": {\n    \"address\": \"string\",\n    \"city\": \"string\",\n    \"state\": \"string\",\n    \"coordinates\": {\"lat\": number, \"lng\": number}\n  },\n  \"operating_hours\": {},\n  \"menu_categories\": [\"string\"],\n  \"specialties\": [\"string\"],\n  \"dietary_options\": [\"string\"]\n}\n\nRules:\n- Preserve all original data while enhancing it\n- Standardize naming conventions\n- Infer cuisine type from menu items\n- Estimate price range from menu prices\n- Return only the json, no additional text\n  `,\n\n  foodTruckExtraction: (markdownContent: string, sourceUrl?: string) => {\n    const schema = `\nExpected JSON schema:\n{\n  \"name\": \"string (food truck name)\",\n  \"description\": \"string (brief description of the food truck)\",\n  \"cuisine_type\": \"string (type of cuisine served)\",\n  \"contact\": {\n    \"phone\": \"string (phone number if found)\",\n    \"email\": \"string (email if found)\", \n    \"website\": \"string (website URL if found)\",\n    \"social_media\": {\n      \"facebook\": \"string (Facebook URL if found)\",\n      \"instagram\": \"string (Instagram URL if found)\",\n      \"twitter\": \"string (Twitter URL if found)\"\n    }\n  },\n  \"location\": {\n    \"address\": \"string (physical address if found)\",\n    \"city\": \"string (city name)\",\n    \"state\": \"string (state abbreviation)\",\n    \"coordinates\": {\n      \"lat\": \"number (latitude if found)\",\n      \"lng\": \"number (longitude if found)\"\n    }\n  },\n  \"operating_hours\": {\n    \"monday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"tuesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"wednesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"thursday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"friday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"saturday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"sunday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"}\n  },\n  \"menu\": [\n    {\n      \"category\": \"string (menu category)\",\n      \"items\": [\n        {\n          \"name\": \"string (item name)\",\n          \"description\": \"string (item description)\",\n          \"price\": \"number (price as number, not string)\",\n          \"dietary_tags\": [\"string (dietary restrictions/tags)\"]\n        }\n      ]\n    }\n  ],\n  \"specialties\": [\"string (signature dishes or specialties)\"],\n  \"dietary_options\": [\"string (dietary accommodations like vegan, gluten-free)\"],\n  \"price_range\": \"string ($ for under $10, $$ for $10-20, $$$ for $20-30, $$$$ for over $30)\"\n}\n`;\n\n    const instructions = `\nInstructions:\n- Extract as much information as possible from the provided content\n- If information is not available, use null for the field\n- For operating hours, use 24-hour format (e.g., \"14:30\" for 2:30 PM)\n- If a day is closed, set \"closed\": true and omit open/close times\n- For prices, extract numeric values only (e.g., 12.99, not \"$12.99\")\n- Be thorough in extracting menu items and their details\n- Look for social media links and contact information carefully\n- Return only the JSON object, no additional text or formatting\n`;\n\n    return `\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\n\nWebsite content:\n${markdownContent}\n\n${sourceUrl ? `Source URL: ${sourceUrl}` : ''}\n\n${schema}\n\n${instructions}\n`;\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\responseParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\usageLimits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\middleware\\middlewareHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[728,731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[728,731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":57,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":57,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1290,1306],"text":"redirectFromPath != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1290,1306],"text":"redirectFromPath ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1290,1306],"text":"Boolean(redirectFromPath)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AuditLogger, SecurityEvent } from '@/lib/security/auditLogger';\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\n\ninterface RequestMetadata {\n  ip: string;\n  userAgent: string;\n  url: string;\n  method: string;\n}\n\ninterface SupabaseUser {\n  id: string;\n  email?: string;\n}\n\ninterface SupabaseProfile {\n  role?: string;\n}\n\ninterface LogAndRedirectParams {\n  req: NextRequest;\n  res: NextResponse;\n  requestMetadata: RequestMetadata;\n  reason: string;\n  userError?: { message?: string };\n}\n\ninterface LogSecurityEventParams {\n  event_type: SecurityEvent['event_type'];\n  ip_address: string;\n  user_agent: string;\n  details: Record<string, any>;\n  severity: SecurityEvent['severity'];\n  user_id?: string;\n  user_email?: string;\n}\n\ninterface LogSecurityEventAndRedirectParams {\n  req: NextRequest;\n  res: NextResponse;\n  logParams: LogSecurityEventParams;\n  redirectPath: string;\n  redirectFromPath?: string;\n}\n\nasync function logSecurityEventAndRedirect({\n  req,\n  res: _res,\n  logParams,\n  redirectPath,\n  redirectFromPath,\n}: LogSecurityEventAndRedirectParams) {\n  await AuditLogger.logSecurityEvent(logParams);\n  const redirectUrl = req.nextUrl.clone();\n  redirectUrl.pathname = redirectPath;\n  if (redirectFromPath) {\n    redirectUrl.searchParams.set(`redirectedFrom`, redirectFromPath);\n  }\n  return NextResponse.redirect(redirectUrl);\n}\n\nasync function logAndRedirect({\n  req,\n  res,\n  requestMetadata,\n  reason,\n  userError,\n}: LogAndRedirectParams) {\n  return logSecurityEventAndRedirect({\n    req,\n    res,\n    logParams: {\n      event_type: 'permission_denied',\n      ip_address: requestMetadata.ip,\n      user_agent: requestMetadata.userAgent,\n      details: {\n        attempted_url: requestMetadata.url,\n        reason,\n        error: userError?.message,\n      },\n      severity: 'warning',\n    },\n    redirectPath: '/login',\n    redirectFromPath: req.nextUrl.pathname,\n  });\n}\n\ninterface LogAndRedirectDeniedParams {\n  req: NextRequest;\n  res: NextResponse;\n  requestMetadata: RequestMetadata;\n  user: SupabaseUser;\n  profile: SupabaseProfile | null;\n  profileQueryError?: { message?: string } | null; // Changed to allow null\n}\n\nasync function logAndRedirectDenied({\n  req,\n  res,\n  requestMetadata,\n  user,\n  profile,\n  profileQueryError,\n}: LogAndRedirectDeniedParams) {\n  return logSecurityEventAndRedirect({\n    req,\n    res,\n    logParams: {\n      event_type: 'permission_denied',\n      user_id: user.id,\n      user_email: user.email ?? undefined,\n      ip_address: requestMetadata.ip,\n      user_agent: requestMetadata.userAgent,\n      details: {\n        attempted_url: requestMetadata.url,\n        user_role: profile?.role ?? 'none',\n        reason: 'insufficient_privileges',\n        error: profileQueryError?.message,\n      },\n      severity: 'error',\n    },\n    redirectPath: '/access-denied',\n  });\n}\n\nexport async function protectAdminRoutes(\n  req: NextRequest,\n  res: NextResponse,\n  requestMetadata: RequestMetadata,\n) {\n  const supabase = createSupabaseMiddlewareClient(req, res);\n  const { data, error: userError } = await supabase.auth.getUser();\n  const user = data?.user;\n\n  if (userError || !user) {\n    return logAndRedirect({\n      req,\n      res,\n      requestMetadata,\n      reason: 'no_session',\n      userError: userError ?? undefined,\n    });\n  }\n  // Explicitly type the result of the Supabase query\n  const { data: profile, error: profileQueryError } = (await supabase\n    .from('profiles')\n    .select('role')\n    .eq('id', user.id)\n    .single()) as { data: SupabaseProfile | null; error: { message?: string } | null };\n  if (profileQueryError || (profile && profile.role !== 'admin')) {\n    return logAndRedirectDenied({\n      req,\n      res,\n      requestMetadata,\n      user,\n      profile: profile ?? undefined,\n      profileQueryError: profileQueryError ?? undefined,\n    });\n  }\n  if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\n    await AuditLogger.logDataAccess({\n      userId: user.id,\n      userEmail: user.email ?? 'unknown',\n      resourceType: 'admin_panel',\n      resourceId: req.nextUrl.pathname,\n      action: req.method === 'GET' ? 'read' : 'admin_access',\n      request: {\n        ip: requestMetadata.ip,\n        userAgent: requestMetadata.userAgent,\n      },\n    });\n  }\n  return res;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\monitoring\\apiMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\bundleAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\databaseCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\webVitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\pipelineHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\scrapingProcessor.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[549,577],"text":"((scrapeResult.data?.markdown) == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[550,577],"text":"((scrapeResult.data?.markdown) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[549,577],"text":"(!Boolean((scrapeResult.data?.markdown)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":56,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":56,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":78,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":78,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2846,2861],"text":"job.target_url == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2847,2861],"text":"(job.target_url ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2846,2861],"text":"!Boolean(job.target_url)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\nimport { gemini } from '@/lib/gemini';\nimport { ScrapingJobService } from '@/lib/supabase';\nimport { ExtractedFoodTruckDetails } from '../types';\nimport {\n  validateInputAndPrepare,\n  buildTruckDataSchema,\n  handleDuplicateCheck,\n  finalizeJobStatus,\n} from './pipelineHelpers';\n\nasync function handleScraping(targetUrl: string, jobId: string) {\n  console.info(`Starting scrape for ${targetUrl}`);\n  const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(targetUrl);\n\n  if (!scrapeResult.success || !scrapeResult.data?.markdown) {\n    const error = scrapeResult.error ?? 'Scraping failed or markdown content not found';\n    await handleJobFailure(jobId, error);\n    throw new Error(error);\n  }\n\n  console.info(`Scraping successful for ${targetUrl}, proceeding to Gemini extraction.`);\n  return scrapeResult.data;\n}\n\nasync function handleGeminiExtraction(markdown: string, sourceUrl: string, jobId: string) {\n  const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(markdown, sourceUrl);\n\n  if (!geminiResult.success || !geminiResult.data) {\n    const error = geminiResult.error ?? 'Gemini data extraction failed';\n    await handleJobFailure(jobId, error);\n    throw new Error(error);\n  }\n\n  console.info(`Gemini extraction successful for ${sourceUrl}.`);\n  return geminiResult.data;\n}\n\nasync function handleJobFailure(jobId: string, error: string) {\n  console.error(`Job ${jobId} failed:`, error);\n  try {\n    const currentJob = await ScrapingJobService.getJobsByStatus('all').then((jobs) =>\n      jobs.find((j) => j.id === jobId),\n    );\n    if (currentJob && currentJob.status !== 'failed') {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', { errors: [error] });\n    }\n  } catch (statusUpdateError) {\n    console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\n  }\n}\n\nasync function handleRetryLogic(jobId: string) {\n  try {\n    const job = await ScrapingJobService.incrementRetryCount(jobId);\n    if (job && typeof job.retry_count === 'number' && typeof job.max_retries === 'number') {\n      if (job.retry_count < job.max_retries) {\n        console.info(`Retrying job ${jobId} (attempt ${job.retry_count}/${job.max_retries})`);\n        setTimeout(() => {\n          void processScrapingJob(jobId);\n        }, 5000);\n      } else {\n        console.warn(`Job ${jobId} reached max retries (${job.max_retries}).`);\n      }\n    } else {\n      console.error(\n        `Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`,\n      );\n    }\n  } catch (retryError) {\n    console.error(`Error during retry logic for job ${jobId}:`, retryError);\n  }\n}\n\nexport async function processScrapingJob(jobId: string): Promise<void> {\n  try {\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\n    if (!job.target_url) {\n      throw new Error('No target URL specified');\n    }\n\n    const scrapeData = await handleScraping(job.target_url, jobId);\n    const extractedData = await handleGeminiExtraction(\n      scrapeData.markdown,\n      scrapeData.source_url ?? job.target_url,\n      jobId,\n    );\n\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\n      data_collected: extractedData as unknown as Record<string, unknown>,\n      completed_at: new Date().toISOString(),\n    });\n\n    await createOrUpdateFoodTruck(jobId, extractedData, scrapeData.source_url ?? job.target_url);\n\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\n  } catch {\n    await handleRetryLogic(jobId);\n  }\n}\n\nexport async function createOrUpdateFoodTruck(\n  jobId: string,\n  extractedTruckData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n) {\n  try {\n    const validation = await validateInputAndPrepare(jobId, extractedTruckData, sourceUrl);\n    if (!validation.isValid) {\n      return;\n    }\n\n    const truckData = buildTruckDataSchema(extractedTruckData, sourceUrl, validation.name);\n    const truck = await handleDuplicateCheck(jobId, truckData, validation.name);\n    await finalizeJobStatus(jobId, truck, sourceUrl);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.error(\n      `Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`,\n      error,\n    );\n    await handleJobFailure(jobId, `Food truck data processing/saving failed: ${errorMessage}`);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\auditLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\rateLimiter.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":288,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":288,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7940,7957],"text":"result.retryAfter != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7940,7957],"text":"result.retryAfter ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7940,7957],"text":"Boolean(result.retryAfter)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Rate Limiting Implementation\n * Prevents brute force attacks and API abuse with intelligent rate limiting\n */\n\nimport { NextResponse } from 'next/server'; // Added import for NextResponse\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  blocked: boolean;\n  blockUntil?: number;\n}\n\n// In-memory rate limit store (in production, use Redis)\nconst rateLimitStore = new Map<string, RateLimitEntry>();\n\n// Rate limit configurations for different endpoints\nexport const RATE_LIMIT_CONFIGS = {\n  // Authentication endpoints - strict limits\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5, // 5 attempts per 15 minutes\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\n    skipSuccessfulRequests: true,\n  },\n  // API endpoints - moderate limits\n  api: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 60, // 60 requests per minute\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\n    skipSuccessfulRequests: false,\n  },\n  // Admin endpoints - very strict limits\n  admin: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 20, // 20 requests per minute\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\n    skipSuccessfulRequests: false,\n  },\n} as const;\n\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\n\n/**\n * Rate Limiter Service\n */\nexport class RateLimiter {\n  // Extract logic from checkRateLimit to reduce function size\n  private static isBlocked(entry: RateLimitEntry | undefined, now: number): boolean {\n    return Boolean(\n      entry && entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil,\n    );\n  }\n\n  private static resetEntry(\n    entry: RateLimitEntry,\n    now: number,\n    config: (typeof RATE_LIMIT_CONFIGS)[RateLimitType],\n  ): void {\n    entry.count = 0;\n    entry.resetTime = now + config.windowMs;\n    entry.blocked = false;\n    entry.blockUntil = undefined;\n  }\n\n  /**\n   * Check if request should be rate limited\n   */\n  static checkRateLimit(\n    identifier: string,\n    type: RateLimitType = 'api',\n  ): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    this.cleanupExpiredEntries();\n    let entry = rateLimitStore.get(key);\n    if (!entry) {\n      entry = { count: 0, resetTime: now + config.windowMs, blocked: false };\n      rateLimitStore.set(key, entry);\n    }\n    if (this.isBlocked(entry, now)) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil((entry.blockUntil! - now) / 1000),\n      };\n    }\n    if (now >= entry.resetTime) {\n      this.resetEntry(entry, now, config);\n    }\n    if (entry.count >= config.maxRequests) {\n      entry.blocked = true;\n      entry.blockUntil = now + config.blockDurationMs;\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil(config.blockDurationMs / 1000),\n      };\n    }\n    entry.count++;\n    rateLimitStore.set(key, entry);\n    return {\n      allowed: true,\n      remaining: config.maxRequests - entry.count,\n      resetTime: entry.resetTime,\n    };\n  }\n\n  /**\n   * Record successful request (for auth endpoints)\n   */\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\n    const config = RATE_LIMIT_CONFIGS[type];\n    if (!config.skipSuccessfulRequests) return;\n\n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n\n    if (entry) {\n      // Reset counter on successful auth\n      entry.count = 0;\n      entry.blocked = false;\n      entry.blockUntil = undefined;\n      rateLimitStore.set(key, entry);\n    }\n  }\n\n  /**\n   * Get rate limit status without incrementing\n   */\n  static getStatus(\n    identifier: string,\n    type: RateLimitType = 'api',\n  ): {\n    remaining: number;\n    resetTime: number;\n    blocked: boolean;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n\n    if (!entry) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false,\n      };\n    }\n\n    // Check if blocked\n    if (entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil) {\n      // Changed != undefined to != null\n      return {\n        remaining: 0,\n        resetTime: entry.resetTime,\n        blocked: true,\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000),\n      };\n    }\n\n    // Check if window expired\n    if (now >= entry.resetTime) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false,\n      };\n    }\n\n    return {\n      remaining: Math.max(0, config.maxRequests - entry.count),\n      resetTime: entry.resetTime,\n      blocked: false,\n    };\n  }\n\n  /**\n   * Clean up expired entries to prevent memory leaks\n   */\n  private static cleanupExpiredEntries(): void {\n    const now = Date.now();\n\n    for (const [key, entry] of rateLimitStore.entries()) {\n      // Remove entries that are expired and not blocked\n      if (\n        now >= entry.resetTime &&\n        (!entry.blocked || entry.blockUntil == undefined || now >= entry.blockUntil)\n      ) {\n        // Changed == undefined to == null\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Clear all rate limit data for an identifier\n   */\n  static clearLimits(identifier: string, type?: RateLimitType): void {\n    if (type) {\n      const key = `${type}:${identifier}`;\n      rateLimitStore.delete(key);\n    } else {\n      // Clear all types for this identifier\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS) as RateLimitType[]) {\n        // Added type assertion\n        const key = `${limitType}:${identifier}`;\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Get rate limit statistics\n   */\n  static getStats(): {\n    totalEntries: number;\n    blockedEntries: number;\n    entriesByType: Record<string, number>;\n  } {\n    const stats = {\n      totalEntries: rateLimitStore.size,\n      blockedEntries: 0,\n      entriesByType: {} as Record<string, number>,\n    };\n\n    for (const [key, entry] of rateLimitStore.entries()) {\n      const type = key.split(':')[0];\n      stats.entriesByType[type] = (stats.entriesByType[type] ?? 0) + 1;\n\n      if (entry.blocked) {\n        stats.blockedEntries++;\n      }\n    }\n\n    return stats;\n  }\n}\n\n/**\n * Utility function to get client identifier from request\n */\nexport function getClientIdentifier(request: Request): string {\n  // Try to get IP address from various headers\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\n\n  // Use the first available IP\n  const ip = forwarded?.split(',')[0]?.trim() ?? realIp ?? cfConnectingIp ?? 'unknown';\n\n  // Include user agent for more specific identification\n  const userAgent = request.headers.get('user-agent') ?? 'unknown';\n\n  // Create a hash of IP + User Agent for better identification\n  return `${ip}:${userAgent.slice(0, 50)}`;\n}\n\n/**\n * Rate limiting middleware for API routes\n */\nexport function withRateLimit(\n  handler: (request: Request) => Promise<Response>,\n  type: RateLimitType = 'api',\n) {\n  return async (request: Request): Promise<Response> => {\n    const identifier = getClientIdentifier(request);\n    const result = RateLimiter.checkRateLimit(identifier, type);\n\n    if (result.allowed === false) {\n      const headers = new Headers({\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\n        'X-RateLimit-Remaining': '0',\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\n      });\n\n      if (result.retryAfter) {\n        headers.set('Retry-After', result.retryAfter.toString());\n      }\n\n      return new NextResponse('Too Many Requests', { status: 429, headers });\n    }\n\n    const response = await handler(request);\n\n    // Update headers on successful requests if not skipped\n    if (RATE_LIMIT_CONFIGS[type].skipSuccessfulRequests === false) {\n      const status = RateLimiter.getStatus(identifier, type);\n      response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\n      response.headers.set('X-RateLimit-Remaining', status.remaining.toString());\n      response.headers.set('X-RateLimit-Reset', new Date(status.resetTime).toISOString());\n    }\n\n    return response;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":12,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":12,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[335,347],"text":"supabaseUrl == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[336,347],"text":"(supabaseUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[335,347],"text":"!Boolean(supabaseUrl)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":16,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[434,450],"text":"supabaseAnonKey == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[435,450],"text":"(supabaseAnonKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[434,450],"text":"!Boolean(supabaseAnonKey)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":23,"column":30,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":23,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[710,728],"text":"(supabaseServiceKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[710,728],"text":"(supabaseServiceKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[710,728],"text":"(Boolean(supabaseServiceKey))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":96,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":96,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":154,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":154,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":676,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":676,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":684,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":684,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createClient,\n  type PostgrestSingleResponse,\n  type PostgrestResponse,\n  type PostgrestError,\n} from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\n}\n\nif (!supabaseAnonKey) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Only create admin client on server side where service key is available\nexport const supabaseAdmin = supabaseServiceKey\n  ? createClient(supabaseUrl, supabaseServiceKey)\n  : undefined;\n\n// Database types\nimport { MenuCategory, MenuItem } from './types';\n\nexport interface FoodTruckLocation {\n  lat: number;\n  lng: number;\n  address?: string;\n  timestamp: string;\n}\n\n// Re-exporting from types.ts to ensure consistency\n\nimport { FoodTruckSchema } from './types';\n\nexport interface FoodTruck extends FoodTruckSchema {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  is_active?: boolean; // This property is in lib/types.ts but not in lib/supabase.ts\n  // Add any other properties that are in the database but not in FoodTruckSchema\n  // For example, if the database has 'exact_location' or 'city_location'\n  exact_location?: FoodTruckLocation;\n  city_location?: FoodTruckLocation;\n}\n\nexport interface ScrapingJob {\n  id: string;\n  job_type: string;\n  target_url?: string;\n  target_handle?: string;\n  platform?: string;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  priority: number;\n  scheduled_at: string;\n  started_at?: string;\n  completed_at?: string;\n  data_collected?: Record<string, unknown>;\n  errors?: string[];\n  retry_count: number;\n  max_retries: number;\n  created_at: string;\n}\n\nexport interface DataProcessingQueue {\n  id: string;\n  truck_id?: string;\n  processing_type: string;\n  raw_data: Record<string, unknown>;\n  processed_data?: Record<string, unknown>;\n  gemini_tokens_used: number;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  priority: number;\n  created_at: string;\n  processed_at?: string;\n}\n\nexport interface ApiUsage {\n  id: string;\n  service_name: string;\n  usage_date: string;\n  requests_count: number;\n  tokens_used: number;\n}\n\n// Food truck operations\nfunction buildMenuByTruck(menuItems: RawMenuItemFromDB[]): Record<string, RawMenuItemFromDB[]> {\n  const menuByTruck: Record<string, RawMenuItemFromDB[]> = {};\n  for (const item of menuItems) {\n    if (typeof item.food_truck_id === 'string' && item.food_truck_id.trim() !== '') {\n      if (!menuByTruck[item.food_truck_id]) {\n        menuByTruck[item.food_truck_id] = [];\n      }\n      menuByTruck[item.food_truck_id].push(item);\n    }\n  }\n  return menuByTruck;\n}\n\nfunction handleSupabaseError(error: unknown, context: string) {\n  // Log technical details for developers\n  console.warn(`Error in ${context}:`, error);\n}\n\nexport const FoodTruckService = {\n  async getAllTrucks(\n    limit = 50,\n    offset = 0,\n  ): Promise<{ trucks: FoodTruck[]; total: number; error?: string }> {\n    try {\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*', { count: 'exact' })\n        .order('updated_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n      if (error != undefined) throw error;\n      const trucks: FoodTruck[] = (data ?? []).map((t: FoodTruck) => normalizeTruckLocation(t));\n      if (trucks.length === 0) return { trucks: [], total: count ?? 0 };\n      const truckIds = trucks.map((t: FoodTruck) => t.id);\n      let menuItems: RawMenuItemFromDB[] = [];\n      try {\n        if (truckIds.length > 0) {\n          const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> =\n            await supabase.from('menu_items').select('*').in('food_truck_id', truckIds);\n          if (menuError) throw new Error(menuError.message);\n          menuItems = Array.isArray(items) ? items : [];\n        }\n      } catch (menuError) {\n        handleSupabaseError(menuError, 'getAllTrucks:menu_items');\n      }\n      const menuByTruck = buildMenuByTruck(menuItems);\n      for (const truck of trucks) {\n        truck.menu = groupMenuItems(menuByTruck[truck.id] ?? []);\n      }\n      return { trucks, total: count ?? 0 };\n    } catch (error) {\n      handleSupabaseError(error, 'getAllTrucks');\n      return { trucks: [], total: 0, error: \"That didn't work, please try again later.\" };\n    }\n  },\n  async getTruckById(id: string): Promise<FoodTruck | { error: string }> {\n    try {\n      const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*')\n        .eq('id', id)\n        .single();\n      if (error != undefined) throw error;\n      if (!data) {\n        return { error: \"That didn't work, please try again later.\" };\n      }\n      const truck: FoodTruck = normalizeTruckLocation(data);\n      const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> = await supabase\n        .from('menu_items')\n        .select('*')\n        .eq('food_truck_id', id);\n      if (menuError) throw menuError;\n      truck.menu = groupMenuItems(Array.isArray(items) ? items : []);\n      return truck;\n    } catch (error) {\n      handleSupabaseError(error, 'getTruckById');\n      return { error: \"That didn't work, please try again later.\" };\n    }\n  },\n\n  async getTrucksByLocation(\n    lat: number,\n    lng: number,\n    radiusKm: number,\n  ): Promise<FoodTruck[] | { error: string }> {\n    try {\n      const { trucks } = await FoodTruckService.getAllTrucks();\n      const nearbyTrucks = trucks.filter((truck: FoodTruck) => {\n        if (\n          truck.current_location == undefined ||\n          typeof truck.current_location.lat !== 'number' ||\n          typeof truck.current_location.lng !== 'number'\n        ) {\n          return false;\n        }\n        const distance = calculateDistance(\n          lat,\n          lng,\n          truck.current_location.lat,\n          truck.current_location.lng,\n        );\n        return distance <= radiusKm;\n      });\n      return nearbyTrucks;\n    } catch (error: unknown) {\n      handleSupabaseError(error, 'getTrucksByLocation');\n      return { error: \"That didn't work, please try again later.\" };\n    }\n  },\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const menuData = truckData.menu;\n    const truckDataWithoutMenu = { ...truckData };\n    delete truckDataWithoutMenu.menu;\n    const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .insert([truckDataWithoutMenu])\n      .select()\n      .single();\n    if (error) {\n      handleSupabaseError(error, 'createTruck');\n      return { error: 'Failed to create truck.' };\n    }\n    await insertMenuItems(truck.id, menuData);\n    return truck;\n  },\n\n  async updateTruck(\n    id: string,\n    updates: Partial<FoodTruck>,\n  ): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const menuData = updates.menu;\n    const updatesWithoutMenu = { ...updates };\n    delete updatesWithoutMenu.menu;\n    const truckResult = await updateTruckData(id, updatesWithoutMenu);\n    if ('error' in truckResult) {\n      return truckResult;\n    }\n    if (menuData != undefined) {\n      await updateTruckMenu(id, menuData);\n    }\n    return truckResult;\n  },\n\n  async getDataQualityStats(): Promise<{\n    total_trucks: number;\n    avg_quality_score: number;\n    high_quality_count: number;\n    medium_quality_count: number;\n    low_quality_count: number;\n    verified_count: number;\n    pending_count: number;\n    flagged_count: number;\n  }> {\n    try {\n      const {\n        data,\n        error,\n      }: PostgrestSingleResponse<{\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      }> = await supabase.rpc('get_data_quality_stats').single();\n      if (error) throw error;\n      return data as {\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      };\n    } catch (error: unknown) {\n      console.warn('Error fetching data quality stats:', error);\n      return {\n        total_trucks: 0,\n        avg_quality_score: 0,\n        high_quality_count: 0,\n        medium_quality_count: 0,\n        low_quality_count: 0,\n        verified_count: 0,\n        pending_count: 0,\n        flagged_count: 0,\n      };\n    }\n  },\n};\n\n// Helper functions to reduce cognitive complexity\nconst isMenuCategory = (obj: unknown): obj is MenuCategory =>\n  typeof obj === 'object' &&\n  obj != undefined &&\n  'name' in obj &&\n  'items' in obj &&\n  Array.isArray(obj.items);\n\nconst isMenuItem = (obj: unknown): obj is MenuItem => {\n  if (typeof obj !== 'object' || obj == undefined) return false;\n  const item = obj as Record<string, unknown>;\n  return (\n    typeof item.name === 'string' &&\n    (item.description === undefined || typeof item.description === 'string') &&\n    (item.price === undefined || typeof item.price === 'number') &&\n    (item.dietary_tags === undefined ||\n      (Array.isArray(item.dietary_tags) &&\n        item.dietary_tags.every((tag) => typeof tag === 'string')))\n  );\n};\n\nasync function updateTruckData(\n  id: string,\n  updatesWithoutMenu: Partial<FoodTruck>,\n): Promise<FoodTruck | { error: string }> {\n  if (!supabaseAdmin) {\n    return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n  }\n\n  const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n    .from('food_trucks')\n    .update(updatesWithoutMenu)\n    .eq('id', id)\n    .select()\n    .single();\n\n  if (error) {\n    handleSupabaseError(error, 'updateTruckData');\n    return { error: 'Failed to update truck data.' };\n  }\n  return truck;\n}\n\nasync function updateTruckMenu(id: string, menuData: MenuCategory[] | unknown[]): Promise<void> {\n  if (!supabaseAdmin) {\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n  }\n\n  // Delete existing menu items\n  const { error: deleteError } = await supabaseAdmin\n    .from('menu_items')\n    .delete()\n    .eq('food_truck_id', id);\n\n  if (deleteError) {\n    console.error('Error deleting existing menu items for truck', id, deleteError);\n  }\n\n  // Insert new menu items if they exist\n  if (menuData != undefined && menuData.length > 0) {\n    const menuItems = menuData.flatMap((category: unknown) => {\n      if (!isMenuCategory(category)) {\n        console.warn('Skipping invalid category in updateTruckMenu:', category);\n        return [];\n      }\n\n      return (category.items ?? []).map((item: unknown) => {\n        if (!isMenuItem(item)) {\n          console.warn('Skipping invalid menu item in updateTruckMenu:', item);\n          // Return a default valid MenuItem or skip based on requirements\n          return {\n            food_truck_id: id,\n            category: category.name ?? 'Uncategorized',\n            name: 'Unknown Item',\n            description: undefined,\n            price: undefined,\n            dietary_tags: [],\n          };\n        }\n\n        return {\n          food_truck_id: id,\n          category: category.name ?? 'Uncategorized',\n          name: item.name ?? 'Unknown Item',\n          description: item.description ?? undefined,\n          price: typeof item.price === 'number' ? item.price : undefined,\n          dietary_tags: Array.isArray(item.dietary_tags) ? item.dietary_tags : [],\n        };\n      });\n    });\n\n    if (menuItems.length > 0) {\n      const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\n\n      if (menuError) {\n        console.error('Error inserting updated menu items for truck', id, menuError);\n      }\n    }\n  }\n}\n\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6371;\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\n  const dLon = ((lon2 - lon1) * Math.PI) / 180;\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos((lat1 * Math.PI) / 180) *\n      Math.cos((lat2 * Math.PI) / 180) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance;\n}\n\n// Define a helper type for items coming from the DB, which might include a category field\ninterface RawMenuItemFromDB {\n  name: string;\n  description?: string;\n  price?: number;\n  dietary_tags?: string[];\n  category?: string; // This field is expected from the DB query\n  // Potentially other fields like id, food_truck_id, etc.\n  [key: string]: unknown; // Allow other properties from DB select *\n}\n\nfunction groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\n  const byCategory: Record<string, MenuItem[]> = {}; // Stores processed MenuItems\n  for (const rawItem of rawItems) {\n    const categoryName: string = rawItem.category ?? 'Uncategorized';\n    byCategory[categoryName] ??= [];\n    // Construct a MenuItem conforming to the MenuItem interface (no 'category' property)\n    const menuItem: MenuItem = {\n      name: rawItem.name,\n      // Use nullish coalescing to convert null from DB to undefined for the MenuItem type\n      description: rawItem.description ?? undefined,\n      price: rawItem.price ?? undefined,\n      dietary_tags: (rawItem.dietary_tags as string[]) ?? [], // Explicitly cast to string[]\n    };\n    byCategory[categoryName].push(menuItem);\n  }\n  // Map to MenuCategory structure { name: string, items: MenuItem[] }\n  return Object.entries(byCategory).map(([categoryName, itemsList]: [string, MenuItem[]]) => ({\n    name: categoryName,\n    items: itemsList,\n  }));\n}\n\n// Remove redundant type constituent in normalizeTruckLocation\nfunction normalizeTruckLocation(truck: FoodTruck): FoodTruck {\n  const fallback: FoodTruckLocation = {\n    lat: 0,\n    lng: 0,\n    address: 'Unknown',\n    timestamp: new Date().toISOString(),\n  };\n  const loc = truck.exact_location ?? truck.current_location ?? truck.city_location ?? {};\n  const lat = typeof loc.lat === 'number' ? loc.lat : 0;\n  const lng = typeof loc.lng === 'number' ? loc.lng : 0;\n  const address = loc.address;\n  const timestamp = loc.timestamp;\n\n  truck.current_location =\n    lat === 0 || lng === 0\n      ? { ...fallback, address: address ?? fallback.address }\n      : {\n          lat,\n          lng,\n          address: address ?? fallback.address,\n          timestamp: timestamp ?? fallback.timestamp,\n        };\n  return truck;\n}\n\nexport const ScrapingJobService = {\n  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .insert([\n        {\n          ...jobData,\n          status: 'pending',\n          retry_count: 0,\n          max_retries: 3,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getJobsByStatus(status: string): Promise<ScrapingJob[]> {\n    try {\n      const query = supabase.from('scraping_jobs').select('*');\n\n      const { data, error }: PostgrestResponse<ScrapingJob> = await (\n        status === 'all' ? query : query.eq('status', status)\n      )\n        .order('priority', { ascending: false })\n        .order('scheduled_at', { ascending: true });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs:', error);\n      return [];\n    }\n  },\n  async updateJobStatus(\n    id: string,\n    status: string,\n    updates: Partial<ScrapingJob> = {},\n  ): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({\n        status,\n        ...updates,\n        ...(status === 'running' && { started_at: new Date().toISOString() }),\n        ...(status === 'completed' && { completed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    if (error) throw error;\n    return data;\n  },\n  async incrementRetryCount(id: string): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const {\n      data: current,\n      error: fetchError,\n    }: PostgrestSingleResponse<Pick<ScrapingJob, 'retry_count'>> = await supabaseAdmin\n      .from('scraping_jobs')\n      .select('retry_count')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) throw fetchError;\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({ retry_count: (current?.retry_count ?? 0) + 1 })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n  async getAllJobs(limit = 50, offset = 0): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .order('priority', { ascending: false })\n        .order('scheduled_at', { ascending: true })\n        .range(offset, offset + limit - 1);\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs:', error);\n      return [];\n    }\n  },\n\n  async getJobsFromDate(date: Date): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .gte('created_at', date.toISOString())\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs from date:', error);\n      return [];\n    }\n  },\n};\n\nexport const DataProcessingService = {\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .insert([\n        {\n          ...queueData,\n          status: 'pending',\n          gemini_tokens_used: 0,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getNextQueueItem(): Promise<DataProcessingQueue | undefined> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .select('*')\n      .eq('status', 'pending')\n      .order('priority', { ascending: false })\n      .order('created_at', { ascending: true })\n      .limit(1)\n      .single();\n\n    if (error && String(error.code) !== 'PGRST116') throw error;\n    return data ?? undefined;\n  },\n\n  async getQueueByStatus(status: string): Promise<DataProcessingQueue[]> {\n    try {\n      const { data, error }: PostgrestResponse<DataProcessingQueue> = await supabase\n        .from('data_processing_queue')\n        .select('*')\n        .eq('status', status)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching queue:', error);\n      return [];\n    }\n  },\n  async updateQueueItem(\n    id: string,\n    updates: Partial<DataProcessingQueue>,\n  ): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .update({\n        ...updates,\n        ...(updates.status === 'completed' && { processed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n};\n\nexport const DataQualityService = {\n  calculateQualityScore: (truck: FoodTruck) => {\n    // Placeholder for actual quality score calculation logic\n    // This should be implemented based on defined data quality rules\n    let score = 0;\n    if (typeof truck.name === 'string' && truck.name.trim() !== '') score += 20;\n    if (\n      truck.current_location &&\n      typeof truck.current_location.lat === 'number' &&\n      !Number.isNaN(truck.current_location.lat) &&\n      typeof truck.current_location.lng === 'number' &&\n      !Number.isNaN(truck.current_location.lng)\n    )\n      score += 30;\n    if (\n      truck.contact_info &&\n      ((typeof truck.contact_info.phone === 'string' && truck.contact_info.phone.trim() !== '') ||\n        (typeof truck.contact_info.email === 'string' && truck.contact_info.email.trim() !== '') ||\n        (typeof truck.contact_info.website === 'string' &&\n          truck.contact_info.website.trim() !== ''))\n    )\n      score += 25;\n    if (Array.isArray(truck.menu) && truck.menu.length > 0) score += 15;\n    if (truck.operating_hours != undefined) score += 10;\n    return { score: Math.min(100, score) };\n  },\n\n  async updateTruckQualityScore(truckId: string): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const { data: truck, error: fetchError } = (await supabaseAdmin\n      .from('food_trucks')\n      .select('*')\n      .eq('id', truckId)\n      .single()) as { data: FoodTruck | null; error: PostgrestError | null };\n\n    if (fetchError) {\n      handleSupabaseError(fetchError, 'updateTruckQualityScore:fetch');\n      return { error: `Failed to fetch truck with ID ${truckId}.` };\n    }\n    if (!truck) {\n      return { error: `Truck with ID ${truckId} not found.` };\n    }\n\n    const { score } = this.calculateQualityScore(truck);\n\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .update({ data_quality_score: score })\n      .eq('id', truckId)\n      .select()\n      .single();\n\n    if (error) {\n      handleSupabaseError(error, 'updateTruckQualityScore:update');\n      return { error: `Failed to update quality score for truck with ID ${truckId}.` };\n    }\n    return data;\n  },\n};\n\nexport const APIUsageService = {\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<ApiUsage> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const {\n        data: existing,\n        error: existingError,\n      }: { data: ApiUsage | undefined; error: PostgrestError | undefined } = await supabaseAdmin\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n\n      if (existingError && existingError.code !== 'PGRST116') throw existingError;\n\n      if (existing) {\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .update({\n            requests_count: (existing.requests_count ?? 0) + requests,\n            tokens_used: (existing.tokens_used ?? 0) + tokens,\n          })\n          .eq('id', existing.id)\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      } else {\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .insert([\n            {\n              service_name: serviceName,\n              usage_date: today,\n              requests_count: requests,\n              tokens_used: tokens,\n            },\n          ])\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      }\n    } catch (error: unknown) {\n      console.warn('Error tracking usage:', error);\n      throw error;\n    }\n  },\n  async getTodayUsage(serviceName: string): Promise<ApiUsage | undefined> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n\n      if (error && String(error.code) !== 'PGRST116') throw error;\n      return data ?? undefined;\n    } catch (error: unknown) {\n      console.warn('Error getting today usage:', error);\n      throw error;\n    }\n  },\n\n  async getAllUsageStats(): Promise<ApiUsage[]> {\n    try {\n      const { data, error }: PostgrestResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .order('usage_date', { ascending: false })\n        .limit(30);\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error getting usage stats:', error);\n      throw error;\n    }\n  },\n};\n\nexport { type MenuItem, type MenuCategory, type OperatingHours, type PriceRange } from './types';\n\n// Helper to prepare menu items for DB insertion\nfunction prepareMenuItemsForInsert(\n  truckId: string,\n  menuData: MenuCategory[] | unknown[] | undefined,\n) {\n  if (!Array.isArray(menuData) || menuData.length === 0) return [];\n  // Explicitly filter for MenuCategory to ensure type safety\n  const categories = menuData.filter(\n    (category): category is MenuCategory =>\n      typeof category === 'object' &&\n      category != undefined &&\n      'name' in category &&\n      'items' in category &&\n      Array.isArray(category.items),\n  ) as MenuCategory[];\n\n  return categories.flatMap(\n    (category) =>\n      (Array.isArray(category.items) ? category.items : [])\n        .map((item: unknown) => {\n          if (!isMenuItem(item)) {\n            console.warn('Skipping invalid menu item:', item);\n            return; // Return undefined for invalid items to be filtered out later\n          }\n\n          return {\n            food_truck_id: truckId,\n            category:\n              typeof category.name === 'string' && category.name !== ''\n                ? category.name\n                : 'Uncategorized',\n            name: typeof item.name === 'string' && item.name !== '' ? item.name : 'Unknown Item',\n            description:\n              typeof item.description === 'string' && item.description !== ''\n                ? item.description\n                : undefined,\n            price:\n              typeof item.price === 'number' && !Number.isNaN(item.price) ? item.price : undefined,\n            dietary_tags: Array.isArray(item.dietary_tags) ? item.dietary_tags : [],\n          };\n        })\n        .filter(Boolean) as MenuItem[], // Filter out nulls and assert type\n  );\n}\n\nasync function insertMenuItems(truckId: string, menuData: MenuCategory[] | unknown[] | undefined) {\n  const menuItems = prepareMenuItemsForInsert(truckId, menuData);\n  if (menuItems.length === 0) return;\n  const { error: menuError } = await supabaseAdmin!.from('menu_items').insert(menuItems);\n  if (menuError) {\n    console.error('Error inserting menu items for truck', truckId, menuError);\n  }\n}\n\n// Fix all strict-boolean-expressions and always-true/false comparisons below\n// Example: if (someString) => if (typeof someString === 'string' && someString.trim() !== '')\n// Example: if (someNumber) => if (typeof someNumber === 'number' && !Number.isNaN(someNumber) && someNumber !== 0)\n// Example: if (someObject) => if (someObject != null && someObject != undefined)\n\n// For all other conditionals, ensure explicit nullish/empty/NaN checks as above\n\nexport { type PostgrestError, type PostgrestResponse } from '@supabase/supabase-js';\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[298,301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[298,301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Shared types for the Food Truck Finder application\n\nexport type PriceRange = '$|$$,$$$';\n\nexport interface MenuCategory {\n  name: string;\n  items: MenuItem[];\n}\n\nexport interface MenuItem {\n  name: string;\n  description: string | undefined;\n  price: number | string | undefined;\n  dietary_tags: any[];\n  is_popular?: boolean;\n}\n\nexport interface LocationData {\n  address: string | undefined;\n  city: string | undefined;\n  state: string | undefined;\n  landmarks: string[];\n  coordinates: {\n    lat: number | undefined;\n    lng: number | undefined;\n  };\n  confidence: number;\n  raw_location_text: string | undefined;\n}\n\nexport type DailyOperatingHours =\n  | { open: string; close: string; closed: boolean }\n  | { closed: true }\n  | undefined;\n\nexport interface OperatingHours {\n  monday: DailyOperatingHours;\n  tuesday: DailyOperatingHours;\n  wednesday: DailyOperatingHours;\n  thursday: DailyOperatingHours;\n  friday: DailyOperatingHours;\n  saturday: DailyOperatingHours;\n  sunday: DailyOperatingHours;\n  [key: string]: DailyOperatingHours; // Add index signature\n}\n\nexport interface SentimentAnalysisResult {\n  sentiment: 'positive' | 'negative' | 'neutral';\n  score: number;\n  confidence: number;\n  key_topics: string[];\n  positive_aspects: string[];\n  negative_aspects: string[];\n  summary: string;\n  recommended: boolean;\n}\n\nexport interface EnhancedFoodTruckData {\n  name: string | undefined;\n  description: string | undefined;\n  cuisine_type: string[];\n  price_range: PriceRange;\n  specialties: string[];\n  dietary_options: string[];\n  enhanced_menu: {\n    categories: MenuCategory[];\n  };\n  standardized_hours: OperatingHours;\n  cleaned_contact: {\n    phone: string | undefined;\n    email: string | undefined;\n    website: string | undefined;\n  };\n  data_quality_improvements: string[];\n  confidence_score: number;\n}\n\nexport interface ExtractedFoodTruckDetails {\n  name: string | undefined;\n  description: string | undefined;\n  cuisine_type: string[];\n  price_range: PriceRange | undefined;\n  specialties: string[];\n  current_location: {\n    address: string | undefined;\n    city: string | undefined;\n    state: string | undefined;\n    zip_code: string | undefined;\n    lat?: number;\n    lng?: number;\n    raw_text: string | undefined;\n  };\n  scheduled_locations?: {\n    // Added scheduled_locations\n    address?: string;\n    city?: string;\n    state?: string;\n    zip_code?: string;\n    lat?: number;\n    lng?: number;\n    timestamp: string;\n    start_time: string; // Added start_time\n    end_time: string; // Added end_time\n  }[];\n  operating_hours: OperatingHours;\n  menu: MenuCategory[];\n  contact_info: {\n    phone?: string;\n    email?: string;\n    website?: string;\n  };\n  social_media: {\n    instagram?: string;\n    facebook?: string;\n    twitter?: string;\n    tiktok?: string;\n    yelp?: string;\n  };\n  source_url: string;\n}\n\nexport interface FirecrawlOutputData {\n  markdown: string;\n  name?: string;\n  source_url?: string;\n}\n\nexport interface FoodTruckSchema {\n  name: string;\n  description?: string;\n  current_location: {\n    lat: number;\n    lng: number;\n    address: string | undefined;\n    timestamp: string;\n  };\n  scheduled_locations: ExtractedFoodTruckDetails['scheduled_locations'];\n  operating_hours: OperatingHours;\n  menu: MenuCategory[];\n  contact_info: ExtractedFoodTruckDetails['contact_info'];\n  social_media: ExtractedFoodTruckDetails['social_media'];\n  cuisine_type: string[];\n  price_range: PriceRange | undefined;\n  specialties: string[];\n  data_quality_score: number;\n  verification_status: 'pending' | 'verified' | 'flagged';\n  source_urls: string[];\n  last_scraped_at: string;\n  test_run_flag?: boolean;\n  website?: string;\n  phone_number?: string;\n  email?: string;\n  instagram_handle?: string;\n  facebook_handle?: string;\n  twitter_handle?: string;\n  schedule?: unknown[]; // Assuming schedule is an array, adjust type if known\n  average_rating?: number;\n  review_count?: number;\n}\n\n// Database record type with additional fields\nexport interface FoodTruck extends FoodTruckSchema {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  is_active?: boolean;\n}\n\nexport interface GeminiResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  tokensUsed?: number;\n  error?: string;\n  promptSent?: string;\n}\n\nexport interface StageResult {\n  status: string;\n  data?: FirecrawlOutputData | ExtractedFoodTruckDetails | FoodTruckSchema;\n  error?: string;\n  details?: string;\n  prompt?: string;\n  tokensUsed?: number;\n  metadata?: { name?: string; source_url?: string };\n  rawContent?: string;\n  preparedData?: FoodTruckSchema;\n  recordId?: string;\n}\n\nexport interface TestPipelineResults {\n  firecrawl?: StageResult;\n  gemini?: StageResult;\n  supabase?: StageResult;\n  overallStatus?: string;\n  logs?: string[];\n  error?: string;\n}\n\nexport interface PipelineRunResult {\n  firecrawl?: StageResult;\n  gemini?: StageResult;\n  supabase?: StageResult;\n  logs: string[];\n  overallStatus: 'Success' | 'Error';\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types\\foodTruck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types\\webVitals.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\QualityScorer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\dataQualityFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\foodTruckHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":44,"column":51,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":44,"endColumn":55},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":50,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":50,"endColumn":16}],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":77,"endColumn":45,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FoodTruck, DailyOperatingHours, MenuItem } from '@/lib/types'; // Added DailyOperatingHours, PriceRange, MenuItem\n\nexport const getCurrentDay = () => {\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  return days[new Date().getDay()];\n};\n\nexport const formatPrice = (price: number | string) => {\n  // Updated to accept string\n  if (typeof price === 'string') {\n    // Handle cases where price might be a string like \"$10-$20\" or \"Varies\"\n    return price;\n  }\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(price);\n};\n\nexport const formatHours = (hours: DailyOperatingHours) => {\n  // Updated to accept DailyOperatingHours\n  if (!hours || hours.closed) {\n    return 'Closed';\n  }\n  const open = new Date(`1970-01-01T${hours.open}Z`).toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  });\n  const close = new Date(`1970-01-01T${hours.close}Z`).toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  });\n  return `${open} - ${close}`;\n};\n\nexport const getPopularItems = (truck: FoodTruck): MenuItem[] => {\n  // Explicitly define return type\n  // Explicitly check for nullish and boolean\n  return (\n    truck.menu\n      ?.flatMap((category) => category.items)\n      .filter((item): item is MenuItem => Boolean(item && item.is_popular === true)) ?? []\n  );\n};\n\nexport const getPriceRange = (truck: FoodTruck) => {\n  const allItems = truck.menu?.flatMap((category) => category.items);\n  if (!allItems || allItems.length === 0) {\n    return 'N/A';\n  }\n  const numericPrices = allItems\n    .map((item) => item.price)\n    .filter((price): price is number => typeof price === 'number' && price != undefined); // Filter for numbers\n\n  if (numericPrices.length === 0) {\n    return 'N/A'; // No numeric prices found\n  }\n\n  const minPrice = Math.min(...numericPrices);\n  const maxPrice = Math.max(...numericPrices);\n  return `${formatPrice(minPrice)} - ${formatPrice(maxPrice)}`;\n};\n\nexport const getTodayHours = (truck: FoodTruck) => {\n  const today = getCurrentDay();\n  return truck.operating_hours?.[today];\n};\n\n// Get user's current location or default to San Francisco\nexport function getUserLocationHelper(\n  setUserLocation: (location: { lat: number; lng: number }) => void,\n) {\n  if (typeof navigator !== 'undefined' && navigator.geolocation != undefined) {\n    // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      },\n      (error) => {\n        console.warn('Location access denied:', error);\n        // Default to San Francisco\n        setUserLocation({ lat: 37.7749, lng: -122.4194 });\n      },\n    );\n  } else {\n    // Default to San Francisco if geolocation is not supported\n    setUserLocation({ lat: 37.7749, lng: -122.4194 });\n  }\n}\n\n// Load all food trucks from API\nexport async function loadFoodTrucksHelper(\n  setTrucks: (trucks: FoodTruck[]) => void,\n  setLoading: (loading: boolean) => void,\n) {\n  try {\n    const response = await fetch('/api/trucks');\n    const data: unknown = await response.json();\n    if (\n      typeof data === 'object' &&\n      data != undefined &&\n      'trucks' in data &&\n      Array.isArray(data.trucks)\n    ) {\n      setTrucks(data.trucks as FoodTruck[]);\n    } else {\n      setTrucks([]);\n    }\n  } catch (error: unknown) {\n    console.error('Failed to load food trucks:', error);\n  } finally {\n    setLoading(false);\n  }\n}\n\n// Load nearby food trucks based on user location\nexport async function loadNearbyTrucksHelper(\n  userLocation: { lat: number; lng: number } | undefined,\n  setTrucks: (trucks: FoodTruck[]) => void,\n) {\n  if (!userLocation) return;\n\n  try {\n    const response = await fetch(\n      `/api/trucks?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10`,\n    );\n    const data: unknown = await response.json();\n    if (\n      typeof data === 'object' &&\n      data != undefined &&\n      'trucks' in data &&\n      Array.isArray(data.trucks)\n    ) {\n      setTrucks(data.trucks as FoodTruck[]);\n    } else {\n      setTrucks([]);\n    }\n  } catch (error: unknown) {\n    console.error('Failed to load nearby trucks:', error);\n  }\n}\n\n// Check if a food truck is currently open\nexport function isTruckOpen(truck: FoodTruck): boolean {\n  const today = getCurrentDay();\n  const hours = truck.operating_hours?.[today];\n\n  // Ensure hours and its properties are not null/undefined before accessing\n  if (\n    hours == undefined ||\n    hours.closed === true ||\n    hours.open == undefined ||\n    hours.close == undefined\n  ) {\n    return false;\n  }\n\n  try {\n    const now = new Date();\n    const currentTime = now.getHours() * 100 + now.getMinutes();\n    const openTime = Number.parseInt(hours.open.replace(':', ''));\n    const closeTime = Number.parseInt(hours.close.replace(':', ''));\n\n    return currentTime >= openTime && currentTime <= closeTime;\n  } catch (error: unknown) {\n    console.error('Error parsing operating hours for truck', truck.name, error);\n    return false;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
