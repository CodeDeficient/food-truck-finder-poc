[
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\access-denied\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\analytics\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'AnalyticsPage' has too many lines (55). Maximum allowed is 50.",
        "line": 14,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 68,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { APIUsageService } from '@/lib/supabase';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { BarChart3 } from 'lucide-react';\r\n\r\nexport default async function AnalyticsPage() {\r\n  const usageStats = await APIUsageService.getAllUsageStats();\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <h1 className=\"text-2xl font-bold\">Analytics & Reporting</h1>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>API Usage Statistics</CardTitle>\r\n          <CardDescription>\r\n            Monitor API requests and token usage for various services.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Service Name</TableHead>\r\n                <TableHead>Usage Date</TableHead>\r\n                <TableHead>Requests Count</TableHead>\r\n                <TableHead>Tokens Used</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {usageStats.map((stat) => (\r\n                <TableRow key={stat.id}>\r\n                  <TableCell className=\"font-medium\">{stat.service_name}</TableCell>\r\n                  <TableCell>{new Date(stat.usage_date).toLocaleDateString()}</TableCell>\r\n                  <TableCell>{stat.requests_count}</TableCell>\r\n                  <TableCell>{stat.tokens_used}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Food Truck Data Trends</CardTitle>\r\n          <CardDescription>\r\n            Visualize trends in new food truck additions, menu changes, and event activity.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center h-48 text-muted-foreground\">\r\n            <BarChart3 className=\"h-12 w-12 mr-2\" />\r\n            Coming Soon: Advanced Charts & Visualizations\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\auto-scraping\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'AutoScrapingDashboard' has too many lines (258). Maximum allowed is 50.",
        "line": 43,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 300,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { RefreshCw, Play, AlertCircle, CheckCircle, Clock } from 'lucide-react';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\n\r\ninterface CronJobStatus {\r\n  id: string;\r\n  name: string;\r\n  schedule: string;\r\n  lastRun: string | null;\r\n  nextRun: string | null;\r\n  status: 'running' | 'idle' | 'error';\r\n  lastResult?: {\r\n    success: boolean;\r\n    message: string;\r\n    trucksProcessed?: number;\r\n    newTrucksFound?: number;\r\n    errors?: number;\r\n  };\r\n}\r\n\r\ninterface ScrapingMetrics {\r\n  totalRuns: number;\r\n  successfulRuns: number;\r\n  failedRuns: number;\r\n  averageRunTime: number;\r\n  totalTrucksProcessed: number;\r\n  newTrucksToday: number;\r\n}\r\n\r\nexport default function AutoScrapingDashboard() {\r\n  const [cronJobs, setCronJobs] = useState<CronJobStatus[]>([]);\r\n  const [metrics, setMetrics] = useState<ScrapingMetrics | undefined>();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string>();\r\n\r\n  useEffect(() => {\r\n    void fetchDashboardData();\r\n    // Refresh every 30 seconds\r\n    const interval = setInterval(() => {\r\n      void fetchDashboardData();\r\n    }, 30_000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(undefined);\r\n      // Fetch cron job statuses\r\n      const cronResponse = await fetch('/api/admin/cron-status');\r\n      if (!cronResponse.ok) {\r\n        throw new Error('Failed to fetch cron status');\r\n      }\r\n      const cronData = (await cronResponse.json()) as unknown;\r\n      setCronJobs(\r\n        Array.isArray((cronData as { jobs?: unknown }).jobs)\r\n          ? (cronData as { jobs: CronJobStatus[] }).jobs\r\n          : [],\r\n      );\r\n      // Fetch scraping metrics\r\n      const metricsResponse = await fetch('/api/admin/scraping-metrics');\r\n      if (!metricsResponse.ok) {\r\n        throw new Error('Failed to fetch metrics');\r\n      }\r\n      const metricsData = (await metricsResponse.json()) as unknown;\r\n      setMetrics((metricsData as { metrics?: ScrapingMetrics }).metrics);\r\n    } catch (error_) {\r\n      setError(error_ instanceof Error ? error_.message : 'Unknown error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const triggerManualScrape = async () => {\r\n    try {\r\n      setError(undefined);\r\n      const response = await fetch('/api/auto-scrape-initiate', {\r\n        method: 'POST',\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to trigger manual scrape');\r\n      }\r\n      setTimeout(() => {\r\n        void fetchDashboardData();\r\n      }, 2000);\r\n    } catch (error_) {\r\n      setError(error_ instanceof Error ? error_.message : 'Failed to trigger scrape');\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'running': {\r\n        return <RefreshCw className=\"h-4 w-4 animate-spin text-blue-500\" />;\r\n      }\r\n      case 'error': {\r\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\r\n      }\r\n      default: {\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      }\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const variants: Record<string, 'default' | 'secondary' | 'destructive'> = {\r\n      running: 'default',\r\n      idle: 'secondary',\r\n      error: 'destructive',\r\n    };\r\n    return <Badge variant={variants[status] ?? 'secondary'}>{status}</Badge>;\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <h1 className=\"text-3xl font-bold\">Auto-Scraping Dashboard</h1>\r\n        </div>\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          {Array.from({ length: 4 }).map((_, i) => (\r\n            <Card key={i}>\r\n              <CardHeader className=\"animate-pulse\">\r\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\r\n                <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\r\n              </CardHeader>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h1 className=\"text-3xl font-bold\">Auto-Scraping Dashboard</h1>\r\n        <div className=\"flex gap-2\">\r\n          <Button\r\n            onClick={() => {\r\n              void fetchDashboardData();\r\n            }}\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n          >\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            Refresh\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              void triggerManualScrape();\r\n            }}\r\n            size=\"sm\"\r\n          >\r\n            <Play className=\"h-4 w-4 mr-2\" />\r\n            Trigger Manual Scrape\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {error !== undefined && (\r\n        <Alert variant=\"destructive\">\r\n          <AlertCircle className=\"h-4 w-4\" />\r\n          <AlertDescription>{error}</AlertDescription>\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Metrics Cards */}\r\n      {metrics !== undefined && (\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Runs</CardTitle>\r\n              <RefreshCw className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.totalRuns}</div>\r\n              <p className=\"text-xs text-muted-foreground\">{metrics.successfulRuns} successful</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\r\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">\r\n                {metrics.totalRuns > 0\r\n                  ? Math.round((metrics.successfulRuns / metrics.totalRuns) * 100)\r\n                  : 0}\r\n                %\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground\">{metrics.failedRuns} failed runs</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Trucks Processed</CardTitle>\r\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.totalTrucksProcessed}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Total trucks processed</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">New Today</CardTitle>\r\n              <Play className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.newTrucksToday}</div>\r\n              <p className=\"text-xs text-muted-foreground\">New trucks found today</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Cron Jobs Status */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Scheduled Jobs</CardTitle>\r\n          <CardDescription>Background scraping jobs and their current status</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table className=\"w-full\">\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Job Name</TableHead>\r\n                <TableHead>Schedule</TableHead>\r\n                <TableHead>Status</TableHead>\r\n                <TableHead>Last Run</TableHead>\r\n                <TableHead>Next Run</TableHead>\r\n                <TableHead>Last Result</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {cronJobs.map((job) => (\r\n                <TableRow key={job.id}>\r\n                  <TableCell className=\"flex items-center gap-2\">\r\n                    {getStatusIcon(job.status)}\r\n                    {job.name}\r\n                  </TableCell>\r\n                  <TableCell className=\"font-mono text-sm\">{job.schedule}</TableCell>\r\n                  <TableCell>{getStatusBadge(job.status)}</TableCell>\r\n                  <TableCell>\r\n                    {job.lastRun == undefined ? 'Never' : new Date(job.lastRun).toLocaleString()}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {job.nextRun == undefined ? 'Unknown' : new Date(job.nextRun).toLocaleString()}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {job.lastResult ? (\r\n                      <div className=\"text-sm\">\r\n                        <div className={job.lastResult.success ? 'text-green-600' : 'text-red-600'}>\r\n                          {job.lastResult.success ? 'Success' : 'Failed'}\r\n                        </div>\r\n                        {job.lastResult.trucksProcessed !== undefined && (\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {job.lastResult.trucksProcessed} trucks, {job.lastResult.newTrucksFound}{' '}\r\n                            new\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    ) : (\r\n                      'No data'\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n              {cronJobs.length === 0 && (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} className=\"text-center text-muted-foreground\">\r\n                    No scheduled jobs found\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\data-cleanup\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'FeatureOverviewCards' has too many lines (57). Maximum allowed is 50.",
        "line": 27,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 83,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'SystemFeatures' has too many lines (59). Maximum allowed is 50.",
        "line": 86,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 144,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { DataCleanupDashboard } from '@/components/admin/DataCleanupDashboard';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { Shield, Zap, RefreshCw, Merge } from 'lucide-react';\r\n\r\n// Helper component for page header\r\nfunction PageHeader() {\r\n  return (\r\n    <div className=\"flex items-center justify-between\">\r\n      <div>\r\n        <h1 className=\"text-3xl font-bold tracking-tight\">Data Cleanup & Quality Management</h1>\r\n        <p className=\"text-muted-foreground\">\r\n          Automated data quality improvements, duplicate prevention, and batch cleanup operations\r\n        </p>\r\n      </div>\r\n      <Badge variant=\"outline\" className=\"text-sm\">\r\n        <Shield className=\"h-4 w-4 mr-1\" />\r\n        SOTA Quality System\r\n      </Badge>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper component for feature overview cards\r\nfunction FeatureOverviewCards() {\r\n  return (\r\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n          <CardTitle className=\"text-sm font-medium\">Duplicate Prevention</CardTitle>\r\n          <Merge className=\"h-4 w-4 text-purple-600\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-2xl font-bold text-purple-600\">85%+</div>\r\n          <p className=\"text-xs text-muted-foreground\">\r\n            Similarity detection with intelligent merging\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n          <CardTitle className=\"text-sm font-medium\">Automated Cleanup</CardTitle>\r\n          <RefreshCw className=\"h-4 w-4 text-blue-600\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-2xl font-bold text-blue-600\">5 Types</div>\r\n          <p className=\"text-xs text-muted-foreground\">\r\n            Placeholder removal, phone normalization, coordinate fixes\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n          <CardTitle className=\"text-sm font-medium\">Quality Scoring</CardTitle>\r\n          <Zap className=\"h-4 w-4 text-green-600\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-2xl font-bold text-green-600\">Real-time</div>\r\n          <p className=\"text-xs text-muted-foreground\">\r\n            Automatic quality score recalculation\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n          <CardTitle className=\"text-sm font-medium\">Batch Processing</CardTitle>\r\n          <Shield className=\"h-4 w-4 text-yellow-600\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-2xl font-bold text-yellow-600\">Safe</div>\r\n          <p className=\"text-xs text-muted-foreground\">\r\n            Dry run mode with comprehensive error handling\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper component for system features\r\nfunction SystemFeatures() {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Data Quality System Features</CardTitle>\r\n        <CardDescription>\r\n          State-of-the-art data quality management and cleanup capabilities\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"grid gap-4 md:grid-cols-2\">\r\n          <div className=\"space-y-3\">\r\n            <h4 className=\"font-semibold text-sm\">Duplicate Prevention</h4>\r\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\r\n              <li className=\"flex items-center gap-2\">\r\n                <Merge className=\"h-3 w-3 text-purple-600\" />\r\n                Advanced similarity detection (85%+ accuracy)\r\n              </li>\r\n              <li className=\"flex items-center gap-2\">\r\n                <Shield className=\"h-3 w-3 text-green-600\" />\r\n                Multi-field matching (name, location, contact)\r\n              </li>\r\n              <li className=\"flex items-center gap-2\">\r\n                <Zap className=\"h-3 w-3 text-blue-600\" />\r\n                Intelligent merging with data preservation\r\n              </li>\r\n              <li className=\"flex items-center gap-2\">\r\n                <RefreshCw className=\"h-3 w-3 text-yellow-600\" />\r\n                Real-time duplicate checking in pipeline\r\n              </li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"space-y-3\">\r\n            <h4 className=\"font-semibold text-sm\">Automated Cleanup</h4>\r\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\r\n              <li className=\"flex items-center gap-2\">\r\n                <RefreshCw className=\"h-3 w-3 text-red-600\" />\r\n                Placeholder and mock data removal\r\n              </li>\r\n              <li className=\"flex items-center gap-2\">\r\n                <Shield className=\"h-3 w-3 text-blue-600\" />\r\n                Phone number normalization\r\n              </li>\r\n              <li className=\"flex items-center gap-2\">\r\n                <Zap className=\"h-3 w-3 text-green-600\" />\r\n                GPS coordinate validation and correction\r\n              </li>\r\n              <li className=\"flex items-center gap-2\">\r\n                <Merge className=\"h-3 w-3 text-purple-600\" />\r\n                Quality score recalculation\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// Helper component for technical implementation details\r\nfunction TechnicalImplementation() {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Technical Implementation</CardTitle>\r\n        <CardDescription>\r\n          Advanced algorithms and safety measures for data quality management\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"grid gap-4 md:grid-cols-3\">\r\n          <div className=\"space-y-2\">\r\n            <h4 className=\"font-semibold text-sm\">Duplicate Detection Algorithm</h4>\r\n            <ul className=\"space-y-1 text-sm text-muted-foreground\">\r\n              <li>ΓÇó Levenshtein distance for name similarity</li>\r\n              <li>ΓÇó GPS coordinate proximity matching</li>\r\n              <li>ΓÇó Exact contact information matching</li>\r\n              <li>ΓÇó Weighted scoring with confidence levels</li>\r\n              <li>ΓÇó Multi-threshold alerting (80%, 95%)</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            <h4 className=\"font-semibold text-sm\">Cleanup Operations</h4>\r\n            <ul className=\"space-y-1 text-sm text-muted-foreground\">\r\n              <li>ΓÇó Pattern-based placeholder detection</li>\r\n              <li>ΓÇó US phone number normalization</li>\r\n              <li>ΓÇó Charleston area coordinate validation</li>\r\n              <li>ΓÇó Quality score recalculation</li>\r\n              <li>ΓÇó Batch processing with error handling</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            <h4 className=\"font-semibold text-sm\">Safety Features</h4>\r\n            <ul className=\"space-y-1 text-sm text-muted-foreground\">\r\n              <li>ΓÇó Dry run mode for safe testing</li>\r\n              <li>ΓÇó Comprehensive error logging</li>\r\n              <li>ΓÇó Rollback-friendly operations</li>\r\n              <li>ΓÇó Batch size limiting</li>\r\n              <li>ΓÇó Progress tracking and reporting</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// Helper component for usage guidelines\r\nfunction UsageGuidelines() {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Best Practices & Guidelines</CardTitle>\r\n        <CardDescription>\r\n          Recommended usage patterns for optimal data quality management\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          <div>\r\n            <h4 className=\"font-semibold text-sm mb-2\">Before Running Cleanup:</h4>\r\n            <ul className=\"space-y-1 text-sm text-muted-foreground ml-4\">\r\n              <li>1. Always run a <strong>Preview</strong> first to see estimated changes</li>\r\n              <li>2. Use <strong>Dry Run</strong> mode to test operations without making changes</li>\r\n              <li>3. Review the operations you want to run - deselect any you don't need</li>\r\n              <li>4. Consider running operations individually for better control</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div>\r\n            <h4 className=\"font-semibold text-sm mb-2\">Recommended Schedule:</h4>\r\n            <ul className=\"space-y-1 text-sm text-muted-foreground ml-4\">\r\n              <li>ΓÇó <strong>Daily:</strong> Quality score updates and placeholder removal</li>\r\n              <li>ΓÇó <strong>Weekly:</strong> Phone normalization and coordinate fixes</li>\r\n              <li>ΓÇó <strong>Monthly:</strong> Full duplicate detection and merging</li>\r\n              <li>ΓÇó <strong>As needed:</strong> Manual duplicate resolution</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div>\r\n            <h4 className=\"font-semibold text-sm mb-2\">Safety Considerations:</h4>\r\n            <ul className=\"space-y-1 text-sm text-muted-foreground ml-4\">\r\n              <li>ΓÇó Duplicate merging is irreversible - review carefully</li>\r\n              <li>ΓÇó Coordinate fixes use Charleston, SC defaults</li>\r\n              <li>ΓÇó Phone normalization assumes US format</li>\r\n              <li>ΓÇó Quality scores are recalculated based on current data</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n/**\r\n * Data Cleanup & Quality Management Page\r\n * Provides comprehensive data quality improvements and duplicate prevention\r\n */\r\nexport default function DataCleanupPage() {\r\n  return (\r\n    <div className=\"flex flex-col gap-6\">\r\n      <PageHeader />\r\n      <FeatureOverviewCards />\r\n      <SystemFeatures />\r\n      <DataCleanupDashboard />\r\n      <TechnicalImplementation />\r\n      <UsageGuidelines />\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\data-quality\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'DataQualityPage' has too many lines (124). Maximum allowed is 50.",
        "line": 38,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 161,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 109,
        "column": 23,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 109,
        "endColumn": 106,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 109,
        "column": 58,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 109,
        "endColumn": 80,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 111,
        "column": 23,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 111,
        "endColumn": 94,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 111,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 111,
        "endColumn": 68,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 113,
        "column": 23,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 113,
        "endColumn": 93,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 113,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 113,
        "endColumn": 67,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 128,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 128,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .label on an `error` typed value.",
        "line": 134,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 134,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { FoodTruckService, FoodTruck, supabase } from '@/lib/supabase';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Edit, BarChart3 } from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { DataQualityCharts } from '@/components/ui/data-quality-charts';\r\nimport { SimpleQualityPanel } from '@/components/ui/simple-quality-panel';\r\nimport {\r\n  formatQualityScore,\r\n  categorizeQualityScore,\r\n  getQualityBadgeClasses,\r\n  getQualityScoreAriaLabel,\r\n  type QualityCategory\r\n} from '@/lib/utils/data-quality-formatters';\r\n\r\n// Define the data quality stats type based on the database function\r\ninterface DataQualityStats {\r\n  total_trucks: number;\r\n  avg_quality_score: number;\r\n  high_quality_count: number;\r\n  medium_quality_count: number;\r\n  low_quality_count: number;\r\n  verified_count: number;\r\n  pending_count: number;\r\n  flagged_count: number;\r\n}\r\n\r\nexport default async function DataQualityPage() {\r\n  const { trucks } = await FoodTruckService.getAllTrucks(100, 0); // Fetch first 100 trucks\r\n\r\n  // Fetch data quality stats using the Supabase function\r\n  const { data: qualityStatsResult, error: qualityError } = await supabase\r\n    .rpc('get_data_quality_stats')\r\n    .single();\r\n\r\n  if (qualityError != undefined) {\r\n    console.error('Error fetching data quality stats:', qualityError);\r\n  }\r\n\r\n  const dataQualityStats: DataQualityStats = (qualityStatsResult as DataQualityStats) ?? {\r\n    total_trucks: 0,\r\n    avg_quality_score: 0,\r\n    high_quality_count: 0,\r\n    medium_quality_count: 0,\r\n    low_quality_count: 0,\r\n    verified_count: 0,\r\n    pending_count: 0,\r\n    flagged_count: 0,\r\n  };\r\n\r\n  // Sort trucks by data quality score (lowest first for review)\r\n  const sortedTrucks = [...trucks].sort(\r\n    (a: FoodTruck, b: FoodTruck) => (a.data_quality_score ?? 0) - (b.data_quality_score ?? 0),\r\n  );\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h1 className=\"text-3xl font-bold tracking-tight\">Data Quality Management</h1>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\" asChild>\r\n            <Link href=\"/admin/data-quality/reports\">\r\n              <BarChart3 className=\"h-4 w-4 mr-2\" />\r\n              View Reports\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Data Quality Charts Section */}\r\n      <DataQualityCharts qualityStats={dataQualityStats} />\r\n\r\n      {/* Quality Management Panel */}\r\n      <SimpleQualityPanel />\r\n\r\n      {/* Food Truck Quality Table */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Food Truck Data Quality Details</CardTitle>\r\n          <CardDescription>\r\n            Review and manage individual food truck data quality scores. Trucks are sorted by quality score (lowest first for priority review).\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Name</TableHead>\r\n                <TableHead>Verification Status</TableHead>\r\n                <TableHead>Quality Score</TableHead>\r\n                <TableHead>Quality Category</TableHead>\r\n                <TableHead>Last Scraped</TableHead>\r\n                <TableHead className=\"text-right\">Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {sortedTrucks.map((truck: FoodTruck) => {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n                const qualityCategory: QualityCategory = categorizeQualityScore(truck.data_quality_score);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n                const badgeClasses: string = getQualityBadgeClasses(truck.data_quality_score);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n                const ariaLabel: string = getQualityScoreAriaLabel(truck.data_quality_score);\r\n\r\n                return (\r\n                  <TableRow key={truck.id}>\r\n                    <TableCell className=\"font-medium\">{truck.name}</TableCell>\r\n                    <TableCell>\r\n                      <Badge\r\n                        variant={truck.verification_status === 'verified' ? 'default' : 'outline'}\r\n                      >\r\n                        {truck.verification_status}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <span aria-label={ariaLabel}>\r\n                        {/* eslint-disable-next-line @typescript-eslint/no-unsafe-call */}\r\n                        {formatQualityScore(truck.data_quality_score)}\r\n                      </span>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge className={badgeClasses}>\r\n                        {/* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */}\r\n                        {qualityCategory.label}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {(truck.last_scraped_at === undefined)\r\n                        ? 'N/A'\r\n                        : new Date(truck.last_scraped_at).toLocaleDateString()}\r\n                    </TableCell>\r\n                    <TableCell className=\"text-right\">\r\n                      <div className=\"flex items-center gap-2 justify-end\">\r\n                        <Button variant=\"outline\" size=\"sm\" asChild>\r\n                          <Link href={`/admin/food-trucks/${truck.id}?tab=data-quality`}>\r\n                            <Edit className=\"h-4 w-4\" />\r\n                            <span className=\"sr-only\">Edit {truck.name}</span>\r\n                          </Link>\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\events\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'EventManagementPage' has too many lines (105). Maximum allowed is 50.",
        "line": 67,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 171,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { PlusCircle, Edit } from 'lucide-react';\r\n// @ts-expect-error TS(2792): Cannot find module 'next/link'. Did you mean to se... Remove this comment to see the full error message\r\nimport Link from 'next/link';\r\n\r\ninterface Event {\r\n  id: string;\r\n  created_at: string;\r\n  date: string;\r\n  time: string;\r\n  location: string;\r\n  description: string;\r\n  food_truck_id: string;\r\n}\r\n\r\ninterface FoodTruckSchedule {\r\n  id: string;\r\n  created_at: string;\r\n  food_truck_id: string;\r\n  day_of_week: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  is_recurring: boolean;\r\n  location: string;\r\n}\r\n\r\nasync function getEventsAndSchedules() {\r\n  const { data: events, error: eventsError } = await supabase\r\n    .from('events')\r\n    .select('*')\r\n    .order('date', { ascending: false })\r\n    .order('time', { ascending: false });\r\n\r\n  if (eventsError != undefined) {\r\n    console.error('Error fetching events:', eventsError);\r\n  }\r\n\r\n  const { data: schedules, error: schedulesError } = await supabase\r\n    .from('food_truck_schedules')\r\n    .select('*')\r\n    .order('day_of_week', { ascending: true })\r\n    .order('start_time', { ascending: true });\r\n\r\n  if (schedulesError != undefined) {\r\n    console.error('Error fetching schedules:', schedulesError);\r\n  }\r\n\r\n  return {\r\n    events: events ?? [],\r\n    schedules: schedules ?? [],\r\n  };\r\n}\r\n\r\nexport default async function EventManagementPage() {\r\n  const { events, schedules } = await getEventsAndSchedules();\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h1 className=\"text-2xl font-bold\">Event & Schedule Management</h1>\r\n        <Button asChild>\r\n          <Link href=\"/admin/events/new\">\r\n            <PlusCircle className=\"mr-2 h-4 w-4\" />\r\n            Add New Event/Schedule\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Upcoming Events</CardTitle>\r\n          <CardDescription>\r\n            Manage one-time and recurring events for food trucks. ({events.length} total)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Food Truck ID</TableHead>\r\n                <TableHead>Date</TableHead>\r\n                <TableHead>Time</TableHead>\r\n                <TableHead>Location</TableHead>\r\n                <TableHead>Description</TableHead>\r\n                <TableHead className=\"text-right\">Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {events.map((event: Event) => (\r\n                <TableRow key={event.id}>\r\n                  <TableCell className=\"font-medium\">{event.food_truck_id}</TableCell>\r\n                  <TableCell>{event.date}</TableCell>\r\n                  <TableCell>{event.time}</TableCell>\r\n                  <TableCell>{event.location}</TableCell>\r\n                  <TableCell>{event.description}</TableCell>\r\n                  <TableCell className=\"text-right\">\r\n                    <Button variant=\"outline\" size=\"sm\" asChild>\r\n                      <Link href={`/admin/events/${event.id}`}>\r\n                        <Edit className=\"h-4 w-4\" />\r\n                        <span className=\"sr-only\">Edit</span>\r\n                      </Link>\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Food Truck Schedules</CardTitle>\r\n          <CardDescription>\r\n            Manage regular operating schedules for food trucks. ({schedules.length} total)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Food Truck ID</TableHead>\r\n                <TableHead>Day of Week</TableHead>\r\n                <TableHead>Time</TableHead>\r\n                <TableHead>Location</TableHead>\r\n                <TableHead>Recurring</TableHead>\r\n                <TableHead className=\"text-right\">Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {schedules.map((schedule: FoodTruckSchedule) => (\r\n                <TableRow key={schedule.id}>\r\n                  <TableCell className=\"font-medium\">{schedule.food_truck_id}</TableCell>\r\n                  <TableCell>{schedule.day_of_week}</TableCell>\r\n                  <TableCell>{`${schedule.start_time} - ${schedule.end_time}`}</TableCell>\r\n                  <TableCell>{schedule.location}</TableCell>\r\n                  <TableCell>\r\n                    <Badge variant={schedule.is_recurring ? 'default' : 'outline'}>\r\n                      {schedule.is_recurring ? 'Yes' : 'No'}\r\n                    </Badge>\r\n                  </TableCell>\r\n                  <TableCell className=\"text-right\">\r\n                    <Button variant=\"outline\" size=\"sm\" asChild>\r\n                      <Link href={`/admin/schedules/${schedule.id}`}>\r\n                        <Edit className=\"h-4 w-4\" />\r\n                        <span className=\"sr-only\">Edit</span>\r\n                      </Link>\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\[id]\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'FoodTruckDetailPage' has too many lines (384). Maximum allowed is 50.",
        "line": 31,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 414,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 50,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 50,
        "endColumn": 92,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 50,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 50,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 52,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 52,
        "endColumn": 80,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 52,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 52,
        "endColumn": 54,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .label on an `error` typed value.",
        "line": 75,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 75,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 375,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 375,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .label on an `error` typed value.",
        "line": 377,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 377,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 385,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 385,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { FoodTruckService } from '@/lib/supabase';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  MapPin,\r\n  Phone,\r\n  Mail,\r\n  Globe,\r\n  Clock,\r\n  Star,\r\n  Users,\r\n  Edit,\r\n  ArrowLeft\r\n} from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport {\r\n  formatQualityScore,\r\n  categorizeQualityScore,\r\n  getQualityBadgeClasses,\r\n  type QualityCategory\r\n} from '@/lib/utils/data-quality-formatters';\r\n\r\ninterface FoodTruckDetailPageProps {\r\n  readonly params: {\r\n    readonly id: string;\r\n  };\r\n}\r\n\r\nexport default async function FoodTruckDetailPage({ params }: FoodTruckDetailPageProps) {\r\n  const truck = await FoodTruckService.getTruckById(params.id);\r\n\r\n  if (truck == undefined) {\r\n    return (\r\n      <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\r\n        <h1 className=\"text-2xl font-bold text-gray-900\">Food Truck Not Found</h1>\r\n        <p className=\"text-gray-600 mt-2\">The requested food truck could not be found.</p>\r\n        <Button asChild className=\"mt-4\">\r\n          <Link href=\"/admin/food-trucks\">\r\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n            Back to Food Trucks\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n  const qualityCategory: QualityCategory = categorizeQualityScore(truck.data_quality_score);\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n  const badgeClasses: string = getQualityBadgeClasses(truck.data_quality_score);\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <Button variant=\"outline\" size=\"sm\" asChild>\r\n            <Link href=\"/admin/food-trucks\">\r\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n              Back\r\n            </Link>\r\n          </Button>\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight\">{truck.name}</h1>\r\n            <p className=\"text-muted-foreground\">\r\n              Food truck details and data quality information\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Badge className={badgeClasses}>\r\n            {/* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */}\r\n            {qualityCategory.label} Quality\r\n          </Badge>\r\n          <Button asChild>\r\n            <Link href={`/admin/food-trucks/${truck.id}/edit`}>\r\n              <Edit className=\"h-4 w-4 mr-2\" />\r\n              Edit\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Basic Information */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Basic Information</CardTitle>\r\n            <CardDescription>Core food truck details</CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"text-sm font-medium text-gray-500\">Name</label>\r\n              <p className=\"text-lg font-semibold\">{truck.name}</p>\r\n            </div>\r\n            \r\n            {(truck.description !== undefined) && truck.description !== '' && (\r\n              <div>\r\n                <label className=\"text-sm font-medium text-gray-500\">Description</label>\r\n                <p className=\"text-gray-900\">{truck.description}</p>\r\n              </div>\r\n            )}\r\n\r\n            {truck.cuisine_type && truck.cuisine_type.length > 0 && (\r\n              <div>\r\n                <label className=\"text-sm font-medium text-gray-500\">Cuisine Type</label>\r\n                <div className=\"flex flex-wrap gap-1 mt-1\">\r\n                  {truck.cuisine_type.map((cuisine, index) => (\r\n                    <Badge key={index} variant=\"secondary\">\r\n                      {cuisine}\r\n                    </Badge>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {truck.price_range && truck.price_range !== '' && (\r\n              <div>\r\n                <label className=\"text-sm font-medium text-gray-500\">Price Range</label>\r\n                <p className=\"text-gray-900\">{truck.price_range}</p>\r\n              </div>\r\n            )}\r\n\r\n            {truck.specialties && truck.specialties.length > 0 && (\r\n              <div>\r\n                <label className=\"text-sm font-medium text-gray-500\">Specialties</label>\r\n                <div className=\"flex flex-wrap gap-1 mt-1\">\r\n                  {truck.specialties.map((specialty, index) => (\r\n                    <Badge key={index} variant=\"outline\">\r\n                      {specialty}\r\n                    </Badge>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Contact Information - Enhanced for Task 4.1.1-4.1.4 */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Phone className=\"h-5 w-5\" />\r\n              Contact Information\r\n            </CardTitle>\r\n            <CardDescription>Phone, email, website, and social media</CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {(truck.contact_info?.phone !== undefined) && truck.contact_info.phone !== '' ? (\r\n              <div className=\"flex items-center gap-3\">\r\n                <Phone className=\"h-4 w-4 text-gray-500\" />\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Phone</label>\r\n                  <p className=\"text-gray-900\">{truck.contact_info.phone}</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex items-center gap-3 text-gray-400\">\r\n                <Phone className=\"h-4 w-4\" />\r\n                <span className=\"text-sm\">No phone number available</span>\r\n              </div>\r\n            )}\r\n\r\n            {(truck.contact_info?.email !== undefined) && truck.contact_info.email !== '' ? (\r\n              <div className=\"flex items-center gap-3\">\r\n                <Mail className=\"h-4 w-4 text-gray-500\" />\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Email</label>\r\n                  <p className=\"text-gray-900\">{truck.contact_info.email}</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex items-center gap-3 text-gray-400\">\r\n                <Mail className=\"h-4 w-4\" />\r\n                <span className=\"text-sm\">No email address available</span>\r\n              </div>\r\n            )}\r\n\r\n            {(truck.contact_info?.website !== undefined) && truck.contact_info.website !== '' ? (\r\n              <div className=\"flex items-center gap-3\">\r\n                <Globe className=\"h-4 w-4 text-gray-500\" />\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500\">Website</label>\r\n                  <a\r\n                    href={truck.contact_info.website}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"text-blue-600 hover:text-blue-800 underline\"\r\n                  >\r\n                    {truck.contact_info.website}\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex items-center gap-3 text-gray-400\">\r\n                <Globe className=\"h-4 w-4\" />\r\n                <span className=\"text-sm\">No website available</span>\r\n              </div>\r\n            )}\r\n\r\n            {/* Social Media */}\r\n            {(truck.social_media !== undefined) && Object.keys(truck.social_media).length > 0 && (\r\n              <div>\r\n                <label className=\"text-sm font-medium text-gray-500\">Social Media</label>\r\n                <div className=\"flex flex-wrap gap-2 mt-2\">\r\n                  {(truck.social_media.instagram !== undefined) && truck.social_media.instagram !== '' && (\r\n                    <a\r\n                      href={`https://instagram.com/${truck.social_media.instagram}`}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      className=\"flex items-center gap-1 px-2 py-1 bg-pink-100 text-pink-800 rounded-md text-sm hover:bg-pink-200\"\r\n                    >\r\n                      <Globe className=\"h-3 w-3\" />\r\n                      Instagram\r\n                    </a>\r\n                  )}\r\n                  {(truck.social_media.facebook !== undefined) && truck.social_media.facebook !== '' && (\r\n                    <a\r\n                      href={`https://facebook.com/${truck.social_media.facebook}`}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      className=\"flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-sm hover:bg-blue-200\"\r\n                    >\r\n                      <Globe className=\"h-3 w-3\" />\r\n                      Facebook\r\n                    </a>\r\n                  )}\r\n                  {(truck.social_media.twitter !== undefined) && truck.social_media.twitter !== '' && (\r\n                    <a\r\n                      href={`https://twitter.com/${truck.social_media.twitter}`}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      className=\"flex items-center gap-1 px-2 py-1 bg-sky-100 text-sky-800 rounded-md text-sm hover:bg-sky-200\"\r\n                    >\r\n                      <Globe className=\"h-3 w-3\" />\r\n                      Twitter\r\n                    </a>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Location Information */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <MapPin className=\"h-5 w-5\" />\r\n              Location Information\r\n            </CardTitle>\r\n            <CardDescription>Current location and address details</CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {(truck.current_location?.address === undefined) ? (\r\n              <p className=\"text-gray-400 text-sm\">No address available</p>\r\n            ) : (\r\n              <div>\r\n                <label className=\"text-sm font-medium text-gray-500\">Address</label>\r\n                <p className=\"text-gray-900\">{truck.current_location.address}</p>\r\n              </div>\r\n            )}\r\n\r\n            {truck.current_location?.lat !== undefined && truck.current_location?.lng !== undefined && (\r\n              <div>\r\n                <label className=\"text-sm font-medium text-gray-500\">Coordinates</label>\r\n                <p className=\"text-gray-900 font-mono text-sm\">\r\n                  {truck.current_location.lat.toFixed(6)}, {truck.current_location.lng.toFixed(6)}\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            {truck.current_location?.timestamp != undefined && (\r\n              <div>\r\n                <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\r\n                <p className=\"text-gray-900\">\r\n                  {new Date(truck.current_location.timestamp).toLocaleString()}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Operating Hours - Enhanced for Task 4.1.1-4.1.4 */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Clock className=\"h-5 w-5\" />\r\n              Operating Hours\r\n            </CardTitle>\r\n            <CardDescription>Daily operating schedule</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            {(truck.operating_hours !== undefined) && Object.keys(truck.operating_hours).length > 0 ? (\r\n              <div className=\"space-y-2\">\r\n                {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map((day) => {\r\n                  const dayData = truck.operating_hours ? truck.operating_hours[day as keyof typeof truck.operating_hours] as { closed?: boolean; open?: string; close?: string } | undefined : undefined;\r\n                  const dayName = day.charAt(0).toUpperCase() + day.slice(1);\r\n\r\n                  return (\r\n                    <div key={day} className=\"flex justify-between items-center py-1\">\r\n                      <span className=\"font-medium text-gray-700\">{dayName}</span>\r\n                      {(() => {\r\n                        if (dayData !== undefined && typeof dayData === 'object') {\r\n                          if (dayData.closed === true) {\r\n                            return <span className=\"text-red-600 text-sm\">Closed</span>;\r\n                          }\r\n                          return (\r\n                            <span className=\"text-gray-900 text-sm\">\r\n                              {dayData.open ?? 'N/A'} - {dayData.close ?? 'N/A'}\r\n                            </span>\r\n                          );\r\n                        }\r\n                        return <span className=\"text-gray-400 text-sm\">Not specified</span>;\r\n                      })()}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ) : (\r\n              <p className=\"text-gray-400 text-sm\">No operating hours available</p>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Ratings & Reviews - Enhanced for Task 4.1.1-4.1.4 */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Star className=\"h-5 w-5\" />\r\n              Ratings & Reviews\r\n            </CardTitle>\r\n            <CardDescription>Customer feedback and ratings</CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {((truck as { average_rating?: number }).average_rating === undefined) ? (\r\n              <p className=\"text-gray-400 text-sm\">No ratings available</p>\r\n            ) : (\r\n              <div className=\"flex items-center gap-4\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"flex\">\r\n                    {[1, 2, 3, 4, 5].map((star) => (\r\n                      <Star\r\n                        key={star}\r\n                        className={`h-5 w-5 ${\r\n                          star <= Math.round((truck as { average_rating?: number }).average_rating ?? 0)\r\n                            ? 'text-yellow-400 fill-current'\r\n                            : 'text-gray-300'\r\n                        }`}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                  <span className=\"text-lg font-semibold\">{((truck as { average_rating?: number }).average_rating ?? 0).toFixed(1)}</span>\r\n                </div>\r\n                {((truck as { review_count?: number }).review_count !== undefined) && (\r\n                  <div className=\"flex items-center gap-1 text-gray-600\">\r\n                    <Users className=\"h-4 w-4\" />\r\n                    <span className=\"text-sm\">{(truck as { review_count?: number }).review_count} reviews</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Data Quality Information */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Data Quality Assessment</CardTitle>\r\n          <CardDescription>\r\n            {/* eslint-disable-next-line @typescript-eslint/no-unsafe-call */}\r\n            Quality score: {formatQualityScore(truck.data_quality_score)}\r\n            {/* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */}\r\n            ({qualityCategory.label} quality)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">\r\n                {/* eslint-disable-next-line @typescript-eslint/no-unsafe-call */}\r\n                {formatQualityScore(truck.data_quality_score)}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">Overall Score</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-lg font-semibold\">\r\n                <Badge variant={truck.verification_status === 'verified' ? 'default' : 'outline'}>\r\n                  {truck.verification_status}\r\n                </Badge>\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">Status</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-lg font-semibold text-gray-900\">\r\n                {truck.created_at ? new Date(truck.created_at).toLocaleDateString() : 'N/A'}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">Created</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-lg font-semibold text-gray-900\">\r\n                {truck.updated_at ? new Date(truck.updated_at).toLocaleDateString() : 'N/A'}\r\n              </div>\r\n              <div className=\"text-sm text-gray-500\">Updated</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'FoodTruckManagementPage' has too many lines (103). Maximum allowed is 50.",
        "line": 17,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 119,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (60). Maximum allowed is 50.",
        "line": 53,
        "column": 27,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 112,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { FoodTruckService, FoodTruck } from '@/lib/supabase';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { PlusCircle } from 'lucide-react';\r\nimport Link from 'next/link';\r\n\r\nexport default function FoodTruckManagementPage() {\r\n  const { trucks, total } = await FoodTruckService.getAllTrucks(100, 0); // Fetch first 100 trucks\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h1 className=\"text-2xl font-bold\">Food Truck Management</h1>\r\n        <Button asChild>\r\n          <Link href=\"/admin/food-trucks/new\">\r\n            <PlusCircle className=\"mr-2 h-4 w-4\" />\r\n            Add Food Truck\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Food Trucks</CardTitle>\r\n          <CardDescription>\r\n            Manage your food trucks and their details. ({total} total)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Name</TableHead>\r\n                <TableHead>Contact</TableHead>\r\n                <TableHead>Cuisine</TableHead>\r\n                <TableHead>Status</TableHead>\r\n                <TableHead>Quality Score</TableHead>\r\n                <TableHead>Last Scraped</TableHead>\r\n                <TableHead className=\"text-right\">Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {trucks.map((truck: FoodTruck) => (\r\n                <TableRow key={truck.id}>\r\n                  <TableCell className=\"font-medium\">{truck.name}</TableCell>\r\n                  <TableCell>\r\n                    <div className=\"space-y-1\">\r\n                      {truck.contact_info?.phone !== undefined && (\r\n                        <div className=\"text-sm\">≡ƒô₧ {truck.contact_info.phone}</div>\r\n                      )}\r\n                      {truck.contact_info?.email !== undefined && (\r\n                        <div className=\"text-sm\">Γ£ë∩╕Å {truck.contact_info.email}</div>\r\n                      )}\r\n                      {truck.contact_info?.website !== undefined && (\r\n                        <div className=\"text-sm\">≡ƒîÉ {truck.contact_info.website}</div>\r\n                      )}\r\n                      {(truck.contact_info?.phone === undefined) && (truck.contact_info?.email === undefined) && (truck.contact_info?.website === undefined) && (\r\n                        <span className=\"text-muted-foreground\">No contact info</span>\r\n                      )}\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell>{truck.cuisine_type?.join(', ') ?? 'N/A'}</TableCell>\r\n                  <TableCell>\r\n                    <Badge\r\n                      variant={truck.verification_status === 'verified' ? 'default' : 'outline'}\r\n                    >\r\n                      {truck.verification_status}\r\n                    </Badge>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span>{((truck.data_quality_score ?? 0) * 100).toFixed(0)}%</span>\r\n                      <Badge\r\n                        variant={(() => {\r\n                          const score = truck.data_quality_score ?? 0;\r\n                          if (score >= 0.8) return 'default';\r\n                          if (score >= 0.6) return 'secondary';\r\n                          return 'destructive';\r\n                        })()}\r\n                        className=\"text-xs\"\r\n                      >\r\n                        {(() => {\r\n                          const score = truck.data_quality_score ?? 0;\r\n                          if (score >= 0.8) return 'High';\r\n                          if (score >= 0.6) return 'Medium';\r\n                          return 'Low';\r\n                        })()}\r\n                      </Badge>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {(truck.last_scraped_at === undefined)\r\n                      ? 'N/A'\r\n                      : new Date(truck.last_scraped_at).toLocaleDateString()}\r\n                  </TableCell>\r\n                  <TableCell className=\"text-right\">\r\n                    <Button variant=\"outline\" size=\"sm\" asChild>\r\n                      <Link href={`/admin/food-trucks/${truck.id}`}>Edit</Link>\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\layout.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'AdminLayoutContent' has too many lines (212). Maximum allowed is 50.",
        "line": 33,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 244,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\n// @ts-expect-error TS(2792): Cannot find module 'next/link'. Did you mean to se... Remove this comment to see the full error message\r\nimport Link from 'next/link';\r\nimport {\r\n  Home,\r\n  Truck,\r\n  Settings,\r\n  Activity,\r\n  Users,\r\n  CalendarDays,\r\n  BarChart3,\r\n  LogOut,\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\n} from 'lucide-react';\r\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/DropdownMenu';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { ModeToggle } from '@/components/ModeToggle';\r\nimport { AuthProvider, useAuth } from '@/app/auth/AuthProvider';\r\n// @ts-expect-error TS(2792): Cannot find module 'next/navigation'. Did you mean... Remove this comment to see the full error message\r\nimport { useRouter } from 'next/navigation';\r\n\r\nfunction AdminLayoutContent({ children }: { readonly children: React.ReactNode }) {\r\n  const { user, signOut } = useAuth();\r\n  const router = useRouter();\r\n\r\n  const handleSignOut = async () => {\r\n    await signOut();\r\n    router.push('/');\r\n  };\r\n\r\n  const userInitials = user?.user_metadata?.full_name == undefined\r\n    ? user?.email?.slice(0, 2).toUpperCase() ?? 'AD'\r\n    : (user.user_metadata.full_name as string)\r\n        .split(' ')\r\n        .map((n: string) => n[0])\r\n        .join('')\r\n        .toUpperCase();\r\n\r\n  return (\r\n    <div className=\"grid min-h-screen w-full md:grid-cols-[220px_1fr] lg:grid-cols-[280px_1fr]\">\r\n      <div className=\"hidden border-r bg-muted/40 md:block\">\r\n        <div className=\"flex h-full max-h-screen flex-col gap-2\">\r\n          <div className=\"flex h-14 items-center border-b px-4 lg:h-[60px] lg:px-6\">\r\n            <Link href=\"/admin\" className=\"flex items-center gap-2 font-semibold\">\r\n              <Truck className=\"h-6 w-6\" />\r\n              <span className=\"\">Food Truck Admin</span>\r\n            </Link>\r\n          </div>\r\n          <div className=\"flex-1\">\r\n            <nav className=\"grid items-start px-2 text-sm font-medium lg:px-4\">\r\n              <Link\r\n                href=\"/admin\"\r\n                className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\r\n              >\r\n                <Home className=\"h-4 w-4\" />\r\n                Dashboard\r\n              </Link>\r\n              <Link\r\n                href=\"/admin/food-trucks\"\r\n                className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\r\n              >\r\n                <Truck className=\"h-4 w-4\" />\r\n                Food Truck Management\r\n              </Link>\r\n              <Link\r\n                href=\"/admin/pipeline\"\r\n                className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\r\n              >\r\n                <Activity className=\"h-4 w-4\" />\r\n                Pipeline Monitoring\r\n              </Link>\r\n              <Link\r\n                href=\"/admin/auto-scraping\"\r\n                className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\r\n              >\r\n                <Settings className=\"h-4 w-4\" />\r\n                Auto-Scraping\r\n              </Link>\r\n              <Link\r\n                href=\"/admin/data-quality\"\r\n                className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\r\n              >\r\n                <Settings className=\"h-4 w-4\" />\r\n                Data Quality\r\n              </Link>\r\n              <Link\r\n                href=\"/admin/users\"\r\n                className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\r\n              >\r\n                <Users className=\"h-4 w-4\" />\r\n                User Management\r\n              </Link>\r\n              <Link\r\n                href=\"/admin/events\"\r\n                className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\r\n              >\r\n                <CalendarDays className=\"h-4 w-4\" />\r\n                Event Management\r\n              </Link>\r\n              <Link\r\n                href=\"/admin/analytics\"\r\n                className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\r\n              >\r\n                <BarChart3 className=\"h-4 w-4\" />\r\n                Analytics\r\n              </Link>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex flex-col\">\r\n        <header className=\"flex h-14 items-center gap-4 border-b bg-muted/40 px-4 lg:h-[60px] lg:px-6\">\r\n          <Sheet>\r\n            <SheetTrigger asChild>\r\n              <Button variant=\"outline\" size=\"icon\" className=\"shrink-0 md:hidden\">\r\n                <Home className=\"h-5 w-5\" />\r\n                <span className=\"sr-only\">Toggle navigation menu</span>\r\n              </Button>\r\n            </SheetTrigger>\r\n            <SheetContent side=\"left\" className=\"flex flex-col\">\r\n              <nav className=\"grid gap-2 text-lg font-medium\">\r\n                <Link href=\"/admin\" className=\"flex items-center gap-2 text-lg font-semibold\">\r\n                  <Truck className=\"h-6 w-6\" />\r\n                  <span className=\"sr-only\">Food Truck Admin</span>\r\n                </Link>\r\n                <Link\r\n                  href=\"/admin\"\r\n                  className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\r\n                >\r\n                  <Home className=\"h-5 w-5\" />\r\n                  Dashboard\r\n                </Link>\r\n                <Link\r\n                  href=\"/admin/food-trucks\"\r\n                  className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\r\n                >\r\n                  <Truck className=\"h-5 w-5\" />\r\n                  Food Truck Management\r\n                </Link>\r\n                <Link\r\n                  href=\"/admin/pipeline\"\r\n                  className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\r\n                >\r\n                  <Activity className=\"h-5 w-5\" />\r\n                  Pipeline Monitoring\r\n                </Link>\r\n                <Link\r\n                  href=\"/admin/auto-scraping\"\r\n                  className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\r\n                >\r\n                  <Settings className=\"h-5 w-5\" />\r\n                  Auto-Scraping\r\n                </Link>\r\n                <Link\r\n                  href=\"/admin/data-quality\"\r\n                  className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\r\n                >\r\n                  <Settings className=\"h-5 w-5\" />\r\n                  Data Quality\r\n                </Link>\r\n                <Link\r\n                  href=\"/admin/users\"\r\n                  className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\r\n                >\r\n                  <Users className=\"h-5 w-5\" />\r\n                  User Management\r\n                </Link>\r\n                <Link\r\n                  href=\"/admin/events\"\r\n                  className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\r\n                >\r\n                  <CalendarDays className=\"h-5 w-5\" />\r\n                  Event Management\r\n                </Link>\r\n                <Link\r\n                  href=\"/admin/analytics\"\r\n                  className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\r\n                >\r\n                  <BarChart3 className=\"h-5 w-5\" />\r\n                  Analytics\r\n                </Link>\r\n              </nav>\r\n            </SheetContent>\r\n          </Sheet>\r\n          <div className=\"w-full flex-1\">\r\n            <form>\r\n              <div className=\"relative\">\r\n                <Input\r\n                  type=\"search\"\r\n                  placeholder=\"Search...\"\r\n                  className=\"w-full rounded-lg bg-background pl-8 md:w-[200px] lg:w-[336px]\"\r\n                />\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <ModeToggle /> {/* Dark mode toggle */}\r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n              <Button variant=\"secondary\" size=\"icon\" className=\"rounded-full\">\r\n                <Avatar>\r\n                  <AvatarImage src={user?.user_metadata?.avatar_url as string} alt=\"Avatar\" />\r\n                  <AvatarFallback>{userInitials}</AvatarFallback>\r\n                </Avatar>\r\n                <span className=\"sr-only\">Toggle user menu</span>\r\n              </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent align=\"end\">\r\n              <DropdownMenuLabel>\r\n                <div className=\"flex flex-col space-y-1\">\r\n                  <p className=\"text-sm font-medium\">{user?.user_metadata?.full_name ?? 'Admin'}</p>\r\n                  <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\r\n                </div>\r\n              </DropdownMenuLabel>\r\n              <DropdownMenuSeparator />\r\n              <DropdownMenuItem>Settings</DropdownMenuItem>\r\n              <DropdownMenuItem>Support</DropdownMenuItem>\r\n              <DropdownMenuSeparator />\r\n              <DropdownMenuItem\r\n                onClick={() => {\r\n                  handleSignOut().catch((error) => console.warn('Sign out failed:', error));\r\n                }}\r\n              >\r\n                <LogOut className=\"mr-2 h-4 w-4\" />\r\n                Logout\r\n              </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n        </header>\r\n        <main className=\"flex flex-1 flex-col gap-4 p-4 lg:gap-6 lg:p-6\">{children}</main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function AdminLayout({ children }: { readonly children: React.ReactNode }) {\r\n  return (\r\n    <AuthProvider>\r\n      <AdminLayoutContent>{children}</AdminLayoutContent>\r\n    </AuthProvider>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\monitoring\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'MonitoringPage' has too many lines (177). Maximum allowed is 50.",
        "line": 11,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 187,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { APIMonitoringDashboard } from '@/components/monitoring/ApiMonitoringDashboard';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Activity, Shield, Zap, TrendingUp } from 'lucide-react';\r\n\r\n/**\r\n * API Monitoring Page\r\n * Provides comprehensive real-time monitoring of all external API usage\r\n */\r\nexport default function MonitoringPage() {\r\n  return (\r\n    <div className=\"flex flex-col gap-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">API Monitoring & Alerting</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Real-time monitoring, alerting, and optimization for external API usage\r\n          </p>\r\n        </div>\r\n        <Badge variant=\"outline\" className=\"text-sm\">\r\n          <Activity className=\"h-4 w-4 mr-1\" />\r\n          Live Monitoring\r\n        </Badge>\r\n      </div>\r\n\r\n      {/* Feature Overview */}\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Proactive Monitoring</CardTitle>\r\n            <Activity className=\"h-4 w-4 text-blue-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold text-blue-600\">Real-time</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Live API usage tracking with 30-second refresh\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Smart Alerting</CardTitle>\r\n            <Shield className=\"h-4 w-4 text-yellow-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold text-yellow-600\">80% / 95%</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Warning / Critical thresholds with recommendations\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Auto Throttling</CardTitle>\r\n            <Zap className=\"h-4 w-4 text-green-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold text-green-600\">Enabled</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Prevents quota exceeded errors automatically\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Optimization</CardTitle>\r\n            <TrendingUp className=\"h-4 w-4 text-purple-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold text-purple-600\">SOTA</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              AI-powered usage optimization recommendations\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Key Features */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Monitoring Features</CardTitle>\r\n          <CardDescription>\r\n            State-of-the-art API monitoring and alerting capabilities\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid gap-4 md:grid-cols-2\">\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-semibold text-sm\">Proactive Monitoring</h4>\r\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\r\n                <li className=\"flex items-center gap-2\">\r\n                  <Activity className=\"h-3 w-3 text-blue-600\" />\r\n                  Real-time usage tracking for all APIs\r\n                </li>\r\n                <li className=\"flex items-center gap-2\">\r\n                  <Shield className=\"h-3 w-3 text-green-600\" />\r\n                  Predictive limit checking before requests\r\n                </li>\r\n                <li className=\"flex items-center gap-2\">\r\n                  <Zap className=\"h-3 w-3 text-yellow-600\" />\r\n                  Automatic throttling to prevent quota exceeded\r\n                </li>\r\n                <li className=\"flex items-center gap-2\">\r\n                  <TrendingUp className=\"h-3 w-3 text-purple-600\" />\r\n                  Historical usage trends and analytics\r\n                </li>\r\n              </ul>\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-semibold text-sm\">Smart Alerting</h4>\r\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\r\n                <li className=\"flex items-center gap-2\">\r\n                  <Activity className=\"h-3 w-3 text-orange-600\" />\r\n                  Multi-level alerts (Warning 80%, Critical 95%)\r\n                </li>\r\n                <li className=\"flex items-center gap-2\">\r\n                  <Shield className=\"h-3 w-3 text-red-600\" />\r\n                  Service-specific recommendations\r\n                </li>\r\n                <li className=\"flex items-center gap-2\">\r\n                  <Zap className=\"h-3 w-3 text-blue-600\" />\r\n                  Optimization suggestions for high usage\r\n                </li>\r\n                <li className=\"flex items-center gap-2\">\r\n                  <TrendingUp className=\"h-3 w-3 text-green-600\" />\r\n                  Wait time calculations for rate limit resets\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Main Monitoring Dashboard */}\r\n      <APIMonitoringDashboard />\r\n\r\n      {/* Technical Details */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Technical Implementation</CardTitle>\r\n          <CardDescription>\r\n            Advanced monitoring system built with SOTA practices\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid gap-4 md:grid-cols-3\">\r\n            <div className=\"space-y-2\">\r\n              <h4 className=\"font-semibold text-sm\">Monitored APIs</h4>\r\n              <ul className=\"space-y-1 text-sm text-muted-foreground\">\r\n                <li>ΓÇó Gemini AI (1,500 req/day, 32K tokens)</li>\r\n                <li>ΓÇó Firecrawl (500 req/day)</li>\r\n                <li>ΓÇó Tavily Search (1,000 req/day)</li>\r\n                <li>ΓÇó Supabase (50K req/day)</li>\r\n              </ul>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <h4 className=\"font-semibold text-sm\">Alert Thresholds</h4>\r\n              <ul className=\"space-y-1 text-sm text-muted-foreground\">\r\n                <li>ΓÇó Warning: 80% usage</li>\r\n                <li>ΓÇó Critical: 95% usage</li>\r\n                <li>ΓÇó Auto-throttling: 95%+</li>\r\n                <li>ΓÇó Rate limit reset tracking</li>\r\n              </ul>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <h4 className=\"font-semibold text-sm\">Optimization Features</h4>\r\n              <ul className=\"space-y-1 text-sm text-muted-foreground\">\r\n                <li>ΓÇó Request queuing recommendations</li>\r\n                <li>ΓÇó Caching strategy suggestions</li>\r\n                <li>ΓÇó Token usage optimization</li>\r\n                <li>ΓÇó Batch processing guidance</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'AdminDashboard' has too many lines (84). Maximum allowed is 50.",
        "line": 67,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 150,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  FoodTruckService,\r\n  ScrapingJobService,\r\n  DataProcessingService,\r\n  supabase,\r\n} from '@/lib/supabase';\r\nimport { Truck, Activity, Settings, AlertTriangle } from 'lucide-react'; // Import icons\r\n\r\n// Define the data quality stats type based on the database function\r\ninterface DataQualityStats {\r\n  total_trucks: number;\r\n  avg_quality_score: number;\r\n  high_quality_count: number;\r\n  medium_quality_count: number;\r\n  low_quality_count: number;\r\n  verified_count: number;\r\n  pending_count: number;\r\n  flagged_count: number;\r\n}\r\n\r\nasync function getDashboardData() {\r\n  // Fetch total food trucks and verification statuses\r\n  const { trucks: allTrucks } = await FoodTruckService.getAllTrucks(1000, 0); // Fetch a reasonable number for overview\r\n  const totalFoodTrucks = allTrucks.length;\r\n  const pendingVerifications = allTrucks.filter((t) => t.verification_status === 'pending').length;\r\n\r\n  // Fetch pipeline status (e.g., pending scraping jobs)\r\n  const pendingScrapingJobs = await ScrapingJobService.getJobsByStatus('pending');\r\n  const runningScrapingJobs = await ScrapingJobService.getJobsByStatus('running');\r\n  const failedScrapingJobs = await ScrapingJobService.getJobsByStatus('failed');\r\n\r\n  // Fetch recent errors from data processing queue\r\n  const failedProcessingQueueItems = await DataProcessingService.getQueueByStatus('failed');\r\n  // Fetch data quality stats using the Supabase function\r\n  const { data: qualityStatsResult, error: qualityError } = await supabase\r\n    .rpc('get_data_quality_stats')\r\n    .single();\r\n\r\n  if (qualityError != undefined) {\r\n    console.error('Error fetching data quality stats:', qualityError);\r\n  }\r\n\r\n  const dataQualityStats: DataQualityStats = (qualityStatsResult as DataQualityStats) ?? {\r\n    total_trucks: 0,\r\n    avg_quality_score: 0,\r\n    high_quality_count: 0,\r\n    medium_quality_count: 0,\r\n    low_quality_count: 0,\r\n    verified_count: 0,\r\n    pending_count: 0,\r\n    flagged_count: 0,\r\n  };\r\n\r\n  return {\r\n    totalFoodTrucks,\r\n    pendingVerifications,\r\n    pendingScrapingJobsCount: pendingScrapingJobs.length,\r\n    runningScrapingJobsCount: runningScrapingJobs.length,\r\n    failedScrapingJobsCount: failedScrapingJobs.length,\r\n    failedProcessingQueueItemsCount: failedProcessingQueueItems.length,\r\n    dataQualityStats,\r\n  };\r\n}\r\n\r\nexport default async function AdminDashboard() {\r\n  const {\r\n    totalFoodTrucks,\r\n    pendingVerifications,\r\n    pendingScrapingJobsCount,\r\n    runningScrapingJobsCount,\r\n    failedScrapingJobsCount,\r\n    failedProcessingQueueItemsCount,\r\n    dataQualityStats,\r\n  } = await getDashboardData();\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\r\n\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Food Trucks</CardTitle>\r\n            <Truck className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{totalFoodTrucks}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              {pendingVerifications} pending verification\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Pipeline Status</CardTitle>\r\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{pendingScrapingJobsCount} pending</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              {runningScrapingJobsCount} running, {failedScrapingJobsCount} failed\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Data Quality Score</CardTitle>\r\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {((dataQualityStats.avg_quality_score ?? 0) * 100).toFixed(1)}%\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Average quality score across all trucks\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Quality Distribution</CardTitle>\r\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold text-green-600\">\r\n              {dataQualityStats.high_quality_count ?? 0}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              <span className=\"text-green-600\">{dataQualityStats.high_quality_count ?? 0} high</span>,{' '}\r\n              <span className=\"text-yellow-600\">{dataQualityStats.medium_quality_count ?? 0} medium</span>,{' '}\r\n              <span className=\"text-red-600\">{dataQualityStats.low_quality_count ?? 0} low</span>\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Recent Errors</CardTitle>\r\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{failedProcessingQueueItemsCount}</div>\r\n            <p className=\"text-xs text-muted-foreground\">from data processing queue</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\pipeline\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'PipelineMonitoringPage' has too many lines (147). Maximum allowed is 50.",
        "line": 59,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 205,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport {\r\n  ScrapingJobService,\r\n  DataProcessingService,\r\n  ScrapingJob,\r\n  DataProcessingQueue,\r\n} from '@/lib/supabase';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { RefreshCcw, PlayCircle, XCircle } from 'lucide-react';\r\n\r\nfunction getBadgeVariant(status: string) {\r\n  if (status === 'completed') {\r\n    return 'default';\r\n  }\r\n  if (status === 'failed') {\r\n    return 'destructive';\r\n  }\r\n  return 'outline';\r\n}\r\n\r\nasync function getPipelineData() {\r\n  const pendingScrapingJobs = await ScrapingJobService.getJobsByStatus('pending');\r\n  const runningScrapingJobs = await ScrapingJobService.getJobsByStatus('running');\r\n  const completedScrapingJobs = await ScrapingJobService.getJobsByStatus('completed');\r\n  const failedScrapingJobs = await ScrapingJobService.getJobsByStatus('failed');\r\n\r\n  const pendingProcessingQueue = await DataProcessingService.getQueueByStatus('pending');\r\n  const processingProcessingQueue = await DataProcessingService.getQueueByStatus('processing');\r\n  const completedProcessingQueue = await DataProcessingService.getQueueByStatus('completed');\r\n  const failedProcessingQueue = await DataProcessingService.getQueueByStatus('failed');\r\n\r\n  return {\r\n    scrapingJobs: {\r\n      pending: pendingScrapingJobs,\r\n      running: runningScrapingJobs,\r\n      completed: completedScrapingJobs,\r\n      failed: failedScrapingJobs,\r\n    },\r\n    processingQueue: {\r\n      pending: pendingProcessingQueue,\r\n      processing: processingProcessingQueue,\r\n      completed: completedProcessingQueue,\r\n      failed: failedProcessingQueue,\r\n    },\r\n  };\r\n}\r\n\r\nexport default function PipelineMonitoringPage() {\r\n  const { scrapingJobs, processingQueue } = await getPipelineData();\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <h1 className=\"text-2xl font-bold\">Pipeline Monitoring</h1>\r\n\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Scraping Jobs (Pending)</CardTitle>\r\n            <RefreshCcw className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{scrapingJobs.pending.length}</div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Scraping Jobs (Running)</CardTitle>\r\n            <PlayCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{scrapingJobs.running.length}</div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Scraping Jobs (Failed)</CardTitle>\r\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{scrapingJobs.failed.length}</div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Processing Queue (Failed)</CardTitle>\r\n            <XCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{processingQueue.failed.length}</div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Recent Scraping Jobs</CardTitle>\r\n          <CardDescription>Overview of recent web scraping activities.</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Job Type</TableHead>\r\n                <TableHead>Target URL/Handle</TableHead>\r\n                <TableHead>Status</TableHead>\r\n                <TableHead>Priority</TableHead>\r\n                <TableHead>Retries</TableHead>\r\n                <TableHead>Scheduled At</TableHead>\r\n                <TableHead>Completed At</TableHead>\r\n                <TableHead className=\"text-right\">Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {[\r\n                ...scrapingJobs.pending,\r\n                ...scrapingJobs.running,\r\n                ...scrapingJobs.failed,\r\n                ...scrapingJobs.completed,\r\n              ]\r\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\r\n                .slice(0, 20) // Show latest 20 jobs\r\n                .map((job: ScrapingJob) => (\r\n                  <TableRow key={job.id}>\r\n                    <TableCell className=\"font-medium\">{job.job_type}</TableCell>\r\n                    <TableCell>{job.target_url ?? job.target_handle}</TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={getBadgeVariant(job.status)}>{job.status}</Badge>\r\n                    </TableCell>\r\n                    <TableCell>{job.priority}</TableCell>\r\n                    <TableCell>\r\n                      {job.retry_count}/{job.max_retries}\r\n                    </TableCell>\r\n                    <TableCell>{new Date(job.scheduled_at).toLocaleString()}</TableCell>\r\n                    <TableCell>\r\n                      {job.completed_at == undefined ? 'N/A'  : new Date(job.completed_at).toLocaleString()}\r\n                    </TableCell>\r\n                    <TableCell className=\"text-right\">\r\n                      {job.status === 'failed' && (\r\n                        <Button variant=\"outline\" size=\"sm\" className=\"mr-2\">\r\n                          Retry\r\n                        </Button>\r\n                      )}\r\n                      <Button variant=\"outline\" size=\"sm\">\r\n                        View Logs\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Failed Data Processing Queue Items</CardTitle>\r\n          <CardDescription>\r\n            Items that failed during data processing (e.g., Gemini API errors).\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Truck ID</TableHead>\r\n                <TableHead>Processing Type</TableHead>\r\n                <TableHead>Status</TableHead>\r\n                <TableHead>Created At</TableHead>\r\n                <TableHead className=\"text-right\">Errors</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {processingQueue.failed.map((item: DataProcessingQueue) => (\r\n                <TableRow key={item.id}>\r\n                  <TableCell className=\"font-medium\">{item.truck_id ?? 'N/A'}</TableCell>\r\n                  <TableCell>{item.processing_type}</TableCell>\r\n                  <TableCell>\r\n                    <Badge variant=\"destructive\">{item.status}</Badge>\r\n                  </TableCell>\r\n                  <TableCell>{new Date(item.created_at).toLocaleString()}</TableCell>\r\n                  <TableCell className=\"text-right\">\r\n                    <Button variant=\"outline\" size=\"sm\">\r\n                      View Details\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\test-pipeline\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'TestPipelinePage' has too many lines (254). Maximum allowed is 50.",
        "line": 58,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 311,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (85). Maximum allowed is 50.",
        "line": 99,
        "column": 29,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 183,
        "endColumn": 4
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 198,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 198,
        "endColumn": 36
      },
      {
        "ruleId": "sonarjs/no-use-of-empty-return-value",
        "severity": 2,
        "message": "Remove this use of the output from \"handleSubmit\"; \"handleSubmit\" doesn't return anything.",
        "line": 198,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "removeUseOfOutput",
        "endLine": 198,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 148,
        "column": 46,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 148,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [6494, 6498], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 157,
        "column": 54,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 157,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [6938, 6942], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 176,
        "column": 50,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 176,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [7699, 7703], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/*\r\n  Test Pipeline Admin Page\r\n\r\n  Purpose:\r\n  This page provides an interface for manually testing the entire data pipeline,\r\n  from web scraping with Firecrawl, through data extraction with Gemini,\r\n  to data preparation and (optional) saving to Supabase. It allows for step-by-step\r\n  inspection of outputs from each stage, aiding in debugging, prompt engineering,\r\n  and validation of the pipeline's components.\r\n\r\n  How to Use:\r\n  1. Input a url to test the full scraping and processing flow.\r\n  2. Alternatively, select \"Use Raw Text Input Instead\" and paste Markdown/html\r\n     directly into the textarea to test only the Gemini processing stage onwards.\r\n  3. Use the \"Dry Run\" checkbox to control whether data is actually saved to\r\n     Supabase or if the save operation is just simulated. By default, it's a dry run.\r\n  4. Click \"Run Test\" to execute the pipeline with the provided inputs.\r\n  5. Results from each stage (Firecrawl, Gemini, Supabase) will be displayed in tabs,\r\n     including status, raw outputs, processed data, errors, and relevant metadata\r\n     (like prompts sent to Gemini or tokens used).\r\n\r\n  Automated Testing:\r\n  As part of a comprehensive testing strategy, placeholder files for automated unit tests\r\n  (e.g., `firecrawl.test.ts`, `gemini.test.ts`, `pipelineProcessor.test.ts`) have been\r\n  added to the `lib/` directory. These outline future tests to be implemented using a\r\n  framework like Jest or Vitest.\r\n*/\r\n'use client';\r\n\r\n/*\r\nAdmin Dashboard Architecture Proposal (wbs 3.1.2)\r\n--------------------------------------------------\r\nRecommended Approach: Sub-domain or separate route within the existing Next.js app, with robust access control.\r\n\r\n- Security: Use Supabase rls and custom roles to restrict access. Consider deploying the admin dashboard at /admin or on a sub-domain (admin.yoursite.com) for separation.\r\n- Separation of Concerns: Keep admin components, logic, and styles in a dedicated /admin directory. Avoid mixing admin and user-facing code.\r\n- Maintainability: Modularize admin features (data editing, pipeline monitoring, quality management) as separate components/pages.\r\n- Authentication: Require login with admin role for all admin routes. Use Supabase Auth or a similar provider.\r\n- Deployment: Can be deployed as part of the main app or as a separate Next.js app if stricter separation is needed in the future.\r\n*/\r\n\r\nimport { useState, FormEvent } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; // If you want to use tabs for results\r\nimport {\r\n  StageResult,\r\n  TestPipelineResults,\r\n  // FirecrawlOutputData, // Already imported via StageResult's data union if needed directly\r\n  // ExtractedFoodTruckDetails, // Already imported via StageResult's data union\r\n  // FoodTruckSchema // Already imported via StageResult's data union\r\n} from '@/lib/types';\r\n\r\nexport default function TestPipelinePage() {\r\n  const [url, setUrl] = useState<string>('');\r\n  const [rawText, setRawText] = useState<string>('');\r\n  const [useRawText, setUseRawText] = useState<boolean>(false);\r\n  const [isDryRun, setIsDryRun] = useState<boolean>(true);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [results, setResults] = useState<TestPipelineResults | undefined>();\r\n  const [error, setError] = useState<string | undefined>();\r\n\r\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    setResults(undefined);\r\n    setError(undefined);\r\n\r\n    const payload = {\r\n      url: useRawText ? undefined : url,\r\n      rawText: useRawText ? rawText : undefined,\r\n      isDryRun,\r\n    };\r\n    try {\r\n      const response = await fetch('/api/test-pipeline-run', {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const data = (await response.json()) as TestPipelineResults;\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error ?? 'Test run failed');\r\n      }\r\n      setResults(data);\r\n    } catch (error_) {\r\n      const errorMessage = error_ instanceof Error ? error_.message : 'An unknown error occurred';\r\n      setError(errorMessage);\r\n      setResults({ error: errorMessage });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  const renderStageResult = (stageName: string, result?: StageResult) => {\r\n    if (!result) return;\r\n    return (\r\n      <Card className=\"mt-4\">\r\n        <CardHeader>\r\n          <CardTitle>{stageName}</CardTitle>\r\n          <CardDescription>\r\n            Status:{' '}\r\n            <span className={result.status === 'Success' ? 'text-green-500' : 'text-red-500'}>\r\n              {result.status}\r\n            </span>\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {result.error != undefined && (\r\n            <p className=\"text-red-500\">\r\n              <strong>Error:</strong> {result.error}\r\n            </p>\r\n          )}\r\n          {result.details != undefined && (\r\n            <p>\r\n              <strong>Details:</strong> {result.details}\r\n            </p>\r\n          )}\r\n          {result.prompt != undefined && (\r\n            <div>\r\n              <strong>Prompt:</strong>\r\n              <Textarea\r\n                readOnly\r\n                value={result.prompt}\r\n                className=\"mt-1 h-32 bg-gray-50 dark:bg-slate-700\"\r\n              />\r\n            </div>\r\n          )}\r\n          {result.rawContent != undefined && (\r\n            <div>\r\n              <strong>Raw Content (Firecrawl):</strong>\r\n              <Textarea\r\n                readOnly\r\n                value={result.rawContent}\r\n                className=\"mt-1 h-48 bg-gray-50 dark:bg-slate-700\"\r\n              />\r\n            </div>\r\n          )}\r\n          {result.data != undefined && (\r\n            <div className=\"mt-2\">\r\n              <strong>Data Output:</strong>{' '}\r\n              <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\r\n                {/* eslint-disable-next-line unicorn/no-null */}\r\n                {JSON.stringify(result.data, null, 2)}\r\n              </pre>\r\n            </div>\r\n          )}\r\n          {result.preparedData != undefined && (\r\n            <div className=\"mt-2\">\r\n              <strong>Data Prepared for Supabase:</strong>{' '}\r\n              <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\r\n                {/* eslint-disable-next-line unicorn/no-null */}\r\n                {JSON.stringify(result.preparedData, null, 2)}\r\n              </pre>\r\n            </div>\r\n          )}\r\n          {result.recordId != undefined && (\r\n            <p>\r\n              <strong>Supabase Record id:</strong> {result.recordId}\r\n            </p>\r\n          )}\r\n          {result.tokensUsed !== undefined != undefined && (\r\n            <p>\r\n              <strong>Gemini Tokens Used:</strong> {result.tokensUsed}\r\n            </p>\r\n          )}\r\n          {result.metadata != undefined && (\r\n            <div>\r\n              <strong>Metadata (Firecrawl):</strong>{' '}\r\n              <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-700 rounded-md overflow-x-auto text-sm\">\r\n                {/* eslint-disable-next-line unicorn/no-null */}\r\n                {JSON.stringify(result.metadata, null, 2)}\r\n              </pre>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      <Card className=\"mb-6\">\r\n        <CardHeader>\r\n          <CardTitle>Test Data Pipeline</CardTitle>\r\n          <CardDescription>\r\n            Use this page to test the data scraping and processing pipeline with a specific url or\r\n            raw text.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form\r\n            onSubmit={(e) => {\r\n              handleSubmit(e).catch(error => {\r\n                console.warn('Form submission failed:', error);\r\n              });\r\n            }}\r\n            className=\"space-y-6\"\r\n          >\r\n            <div>\r\n              <Label htmlFor=\"url-input\">url to Scrape</Label>\r\n              <Input\r\n                id=\"url-input\"\r\n                type=\"url\"\r\n                placeholder=\"https://example.com\"\r\n                value={url}\r\n                onChange={(e) => setUrl(e.target.value)}\r\n                disabled={useRawText || isLoading}\r\n                className=\"mt-1\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Checkbox\r\n                id=\"use-raw-text-checkbox\"\r\n                checked={useRawText}\r\n                onCheckedChange={(checked: boolean) => setUseRawText(Boolean(checked))}\r\n                disabled={isLoading}\r\n              />\r\n              <Label htmlFor=\"use-raw-text-checkbox\">Use Raw Text Input Instead</Label>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"raw-text-input\">Raw Text (Markdown/html)</Label>\r\n              <Textarea\r\n                id=\"raw-text-input\"\r\n                placeholder=\"Paste Markdown or html content here...\"\r\n                value={rawText}\r\n                onChange={(e) => setRawText(e.target.value)}\r\n                disabled={!useRawText || isLoading}\r\n                className=\"mt-1 h-40\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Checkbox\r\n                id=\"dry-run-checkbox\"\r\n                checked={isDryRun}\r\n                onCheckedChange={(checked: boolean) => setIsDryRun(Boolean(checked))}\r\n                disabled={isLoading}\r\n              />\r\n              <Label htmlFor=\"dry-run-checkbox\">Dry Run (Do not save to Supabase)</Label>\r\n            </div>\r\n\r\n            <Button type=\"submit\" disabled={isLoading || (useRawText ? !rawText : !url)}>\r\n              {isLoading ? 'Testing...' : 'Run Test'}\r\n            </Button>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {error != undefined && error !== '' && (\r\n        <Card className=\"border-red-500\">\r\n          <CardHeader>\r\n            <CardTitle className=\"text-red-600\">Test Failed</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p>{error}</p>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {results != undefined && results.error == undefined && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Test Results</CardTitle>\r\n            {results.overallStatus != undefined && (\r\n              <CardDescription>Overall Status: {results.overallStatus}</CardDescription>\r\n            )}\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Tabs defaultValue=\"firecrawl\" className=\"w-full\">\r\n              <TabsList>\r\n                <TabsTrigger value=\"firecrawl\" disabled={!results.firecrawl}>\r\n                  Firecrawl\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"gemini\" disabled={!results.gemini}>\r\n                  Gemini\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"supabase\" disabled={!results.supabase}>\r\n                  Supabase\r\n                </TabsTrigger>\r\n              </TabsList>\r\n              <TabsContent value=\"firecrawl\">\r\n                {renderStageResult('Firecrawl Stage', results.firecrawl)}\r\n              </TabsContent>\r\n              <TabsContent value=\"gemini\">\r\n                {renderStageResult('Gemini Processing Stage', results.gemini)}\r\n              </TabsContent>\r\n              <TabsContent value=\"supabase\">\r\n                {renderStageResult('Supabase Interaction Stage', results.supabase)}\r\n              </TabsContent>\r\n            </Tabs>\r\n            {results.logs != undefined && results.logs.length > 0 && (\r\n              <div className=\"mt-4\">\r\n                <h3 className=\"text-lg font-semibold\">Logs:</h3>\r\n                <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-slate-800 rounded-md overflow-x-auto text-sm\">\r\n                  {results.logs.join('\\n')}\r\n                </pre>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\users\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'UserManagementPage' has too many lines (62). Maximum allowed is 50.",
        "line": 69,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 130,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { UserPlus } from 'lucide-react';\r\n// @ts-expect-error TS(2792): Cannot find module 'next/link'. Did you mean to se... Remove this comment to see the full error message\r\nimport Link from 'next/link';\r\n// @ts-expect-error TS(2792): Cannot find module '@supabase/supabase-js'. Did yo... Remove this comment to see the full error message\r\nimport { User, PostgrestError } from '@supabase/supabase-js';\r\n\r\ninterface UserDisplayData {\r\n  id: string;\r\n  email: string | undefined;\r\n  created_at: string;\r\n  last_sign_in_at: string | undefined;\r\n  role: string;\r\n}\r\n\r\nasync function getUsersData(): Promise<UserDisplayData[]> {\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Supabase admin client not available');\r\n  }\r\n\r\n  const { data, error } = await supabaseAdmin.auth.admin.listUsers();\r\n\r\n  if (error != undefined) {\r\n    console.error('Error fetching users:', error);\r\n    return [];\r\n  }\r\n\r\n  const users: User[] = data.users ?? [];\r\n\r\n  interface Profile {\r\n    id: string;\r\n    role: string;\r\n  }\r\n\r\n  // Fetch profiles to get roles\r\n  const { data: profiles, error: profilesError } = (await supabaseAdmin\r\n    .from('profiles')\r\n    .select('id, role')) as { data: Profile[] | null; error: PostgrestError | null };\r\n\r\n  if (profilesError != undefined) {\r\n    console.error('Error fetching profiles:', profilesError);\r\n    // Continue with users data even if profiles fetch fails\r\n  }\r\n\r\n  const profilesMap = new Map<string, string>(profiles?.map((p) => [p.id, p.role]) ?? []);\r\n\r\n  return users.map((user) => ({\r\n    id: user.id,\r\n    email: user.email,\r\n    created_at: user.created_at,\r\n    last_sign_in_at: user.last_sign_in_at,\r\n    role: profilesMap.get(user.id) ?? 'user', // Default to 'user' if no profile role\r\n  })) as UserDisplayData[];\r\n}\r\n\r\nexport default async function UserManagementPage() {\r\n  const users = await getUsersData();\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h1 className=\"text-2xl font-bold\">User Management</h1>\r\n        <Button asChild>\r\n          <Link href=\"/admin/users/new\">\r\n            <UserPlus className=\"mr-2 h-4 w-4\" />\r\n            Add New User\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>System Users</CardTitle>\r\n          <CardDescription>\r\n            Manage user accounts and their roles. ({users.length} total)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Email</TableHead>\r\n                <TableHead>Role</TableHead>\r\n                <TableHead>Created At</TableHead>\r\n                <TableHead>Last Sign In</TableHead>\r\n                <TableHead className=\"text-right\">Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {users.map((user) => (\r\n                <TableRow key={user.id}>\r\n                  <TableCell className=\"font-medium\">{user.email}</TableCell>\r\n                  <TableCell>\r\n                    <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\r\n                      {user.role}\r\n                    </Badge>\r\n                  </TableCell>\r\n                  <TableCell>{new Date(user.created_at).toLocaleDateString()}</TableCell>\r\n                  <TableCell>\r\n                    {user.last_sign_in_at == undefined\r\n                      ? 'N/A'\r\n                      : new Date(user.last_sign_in_at).toLocaleDateString()}\r\n                  </TableCell>\r\n                  <TableCell className=\"text-right\">\r\n                    <Button variant=\"outline\" size=\"sm\" asChild>\r\n                      <Link href={`/admin/users/${user.id}`}>Edit</Link>\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\automated-cleanup\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'GET' has too many lines (70). Maximum allowed is 50.",
        "line": 87,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 156,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (114). Maximum allowed is 50.",
        "line": 158,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 271,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { BatchCleanupService } from '@/lib/data-quality/batchCleanup';\r\nimport { supabase, supabaseAdmin } from '@/lib/supabase';\r\n\r\n/**\r\n * SOTA Automated Data Cleanup API\r\n * \r\n * Provides scheduled and on-demand data cleanup operations\r\n * with comprehensive monitoring and reporting capabilities\r\n * \r\n * GET /api/admin/automated-cleanup - Get cleanup status and schedule\r\n * POST /api/admin/automated-cleanup - Run cleanup operations\r\n */\r\n\r\ninterface CleanupSchedule {\r\n  id: string;\r\n  name: string;\r\n  operations: string[];\r\n  schedule: string; // cron expression\r\n  enabled: boolean;\r\n  lastRun?: string;\r\n  nextRun?: string;\r\n  successCount: number;\r\n  errorCount: number;\r\n}\r\n\r\ninterface CleanupResult {\r\n  id: string;\r\n  timestamp: string;\r\n  operation: string;\r\n  success: boolean;\r\n  details: Record<string, unknown>;\r\n}\r\n\r\ninterface RequestBody {\r\n  action: string;\r\n  options?: Record<string, unknown>;\r\n}\r\n\r\ninterface RunScheduledOptions {\r\n  scheduleId: string;\r\n}\r\n\r\ninterface RunImmediateOptions {\r\n  operations?: string[];\r\n  batchSize?: number;\r\n  dryRun?: boolean;\r\n}\r\n\r\ninterface ScheduleCleanupOptions {\r\n  name: string;\r\n  operations: string[];\r\n  schedule: string;\r\n  enabled?: boolean;\r\n}\r\n\r\ninterface UpdateScheduleOptions {\r\n  scheduleId: string;\r\n  updates: Record<string, unknown>;\r\n}\r\n\r\ninterface DeleteScheduleOptions {\r\n  scheduleId: string;\r\n}\r\n\r\ninterface AnalyzeDuplicatesOptions {\r\n  threshold?: number;\r\n}\r\n\r\ninterface AutomatedCleanupStatus {\r\n  isRunning: boolean;\r\n  lastRun: string | null;\r\n  nextScheduledRun: string | null;\r\n  schedules: CleanupSchedule[];\r\n  recentResults: CleanupResult[];\r\n  statistics: {\r\n    totalRuns: number;\r\n    successfulRuns: number;\r\n    failedRuns: number;\r\n    trucksImproved: number;\r\n    duplicatesRemoved: number;\r\n  };\r\n}\r\n\r\ntype CleanupOperationType = 'normalize_phone' | 'fix_coordinates' | 'remove_placeholders' | 'update_quality_scores' | 'merge_duplicates';\r\n\r\nexport async function GET(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    // Verify admin access\r\n    const hasAccess = await verifyAdminAccess(request);\r\n    if (!hasAccess) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n\r\n    switch (action) {\r\n      case 'status': {\r\n        const status = await getCleanupStatus();\r\n        return NextResponse.json({\r\n          success: true,\r\n          status\r\n        });\r\n      }\r\n\r\n      case 'schedules': {\r\n        const schedules = await getCleanupSchedules();\r\n        return NextResponse.json({\r\n          success: true,\r\n          schedules\r\n        });\r\n      }\r\n\r\n      case 'history': {\r\n        const limit = Number.parseInt(searchParams.get('limit') ?? '10');\r\n        const history = await getCleanupHistory(limit);\r\n        return NextResponse.json({\r\n          success: true,\r\n          history\r\n        });\r\n      }\r\n\r\n      case 'preview': {\r\n        const operations = searchParams.get('operations')?.split(',') ?? [];\r\n        const preview = await previewCleanupOperations(operations);\r\n        return NextResponse.json({\r\n          success: true,\r\n          preview\r\n        });\r\n      }\r\n\r\n      default: {\r\n        const status = await getCleanupStatus();\r\n        return NextResponse.json({\r\n          success: true,\r\n          status,\r\n          endpoints: [\r\n            'GET ?action=status - Get overall cleanup status',\r\n            'GET ?action=schedules - Get cleanup schedules',\r\n            'GET ?action=history&limit=N - Get cleanup history',\r\n            'GET ?action=preview&operations=op1,op2 - Preview cleanup operations',\r\n            'POST - Run cleanup operations'\r\n          ]\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Automated cleanup GET error:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to process cleanup request',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest): Promise<NextResponse> {\r\n  try {\r\n    // Verify admin access\r\n    const hasAccess = await verifyAdminAccess(request);\r\n    if (!hasAccess) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json() as RequestBody;\r\n    const { action, options = {} } = body;\r\n\r\n    switch (action) {\r\n      case 'run_scheduled': {\r\n        const { scheduleId } = options as RunScheduledOptions;\r\n        const result = await runScheduledCleanup(scheduleId);\r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'run_scheduled',\r\n          result\r\n        });\r\n      }\r\n\r\n      case 'run_immediate': {\r\n        const {\r\n          operations = ['remove_placeholders', 'normalize_phone', 'fix_coordinates', 'update_quality_scores'],\r\n          batchSize = 50,\r\n          dryRun = false\r\n        } = options as RunImmediateOptions;\r\n\r\n        const result = await BatchCleanupService.runFullCleanup({\r\n          operations: operations as CleanupOperationType[],\r\n          batchSize,\r\n          dryRun\r\n        });\r\n\r\n        // Log the cleanup operation\r\n        // @ts-expect-error TS(2345): Argument of type 'BatchCleanupResult' is not assig... Remove this comment to see the full error message\r\n        await logCleanupOperation('immediate', result, options);\r\n\r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'run_immediate',\r\n          result,\r\n          message: dryRun ? 'Dry run completed successfully' : 'Cleanup completed successfully'\r\n        });\r\n      }\r\n\r\n      case 'schedule_cleanup': {\r\n        // @ts-expect-error TS(2352): Conversion of type 'Record<string, unknown>' to ty... Remove this comment to see the full error message\r\n        const { name, operations, schedule, enabled = true } = options as ScheduleCleanupOptions;\r\n        const scheduleResult = await createCleanupSchedule(name, operations, schedule, enabled);\r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'schedule_cleanup',\r\n          result: scheduleResult\r\n        });\r\n      }\r\n\r\n      case 'update_schedule': {\r\n        // @ts-expect-error TS(2352): Conversion of type 'Record<string, unknown>' to ty... Remove this comment to see the full error message\r\n        const { scheduleId, updates } = options as UpdateScheduleOptions;\r\n        const updateResult = await updateCleanupSchedule(scheduleId, updates);\r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'update_schedule',\r\n          result: updateResult\r\n        });\r\n      }\r\n\r\n      case 'delete_schedule': {\r\n        // @ts-expect-error TS(2352): Conversion of type 'Record<string, unknown>' to ty... Remove this comment to see the full error message\r\n        const { scheduleId } = options as DeleteScheduleOptions;\r\n        const deleteResult = await deleteCleanupSchedule(scheduleId);\r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'delete_schedule',\r\n          result: deleteResult\r\n        });\r\n      }\r\n\r\n      case 'analyze_duplicates': {\r\n        const { threshold = 0.8 } = options as AnalyzeDuplicatesOptions;\r\n        const analysis = await analyzeDuplicates(threshold);\r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'analyze_duplicates',\r\n          result: analysis\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json({\r\n          success: false,\r\n          error: 'Unknown action',\r\n          available_actions: [\r\n            'run_scheduled',\r\n            'run_immediate',\r\n            'schedule_cleanup',\r\n            'update_schedule',\r\n            'delete_schedule',\r\n            'analyze_duplicates'\r\n          ]\r\n        }, { status: 400 });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Automated cleanup POST error:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to process cleanup request',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nasync function verifyAdminAccess(request: NextRequest): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader?.startsWith('Bearer ') !== true) {\r\n      return false;\r\n    }\r\n\r\n    const token = authHeader.slice(7);\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n\r\n    if (error || !user) {\r\n      return false;\r\n    }\r\n\r\n    if (!supabaseAdmin) {\r\n      return false;\r\n    }\r\n\r\n    const { data: profile } = await supabaseAdmin\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function getCleanupStatus(): Promise<AutomatedCleanupStatus> {\r\n  // This would typically fetch from a database table\r\n  // For now, return a mock status\r\n  return {\r\n    isRunning: false,\r\n    lastRun: new Date(Date.now() - 3_600_000).toISOString(), // 1 hour ago\r\n    nextScheduledRun: new Date(Date.now() + 3_600_000).toISOString(), // 1 hour from now\r\n    schedules: await getCleanupSchedules(),\r\n    recentResults: [],\r\n    statistics: {\r\n      totalRuns: 42,\r\n      successfulRuns: 40,\r\n      failedRuns: 2,\r\n      trucksImproved: 156,\r\n      duplicatesRemoved: 23\r\n    }\r\n  };\r\n}\r\n\r\nfunction getCleanupSchedules(): Promise<CleanupSchedule[]> {\r\n  return Promise.resolve([\r\n    // Default cleanup schedules\r\n    {\r\n      id: 'daily-maintenance',\r\n      name: 'Daily Maintenance Cleanup',\r\n      operations: ['remove_placeholders', 'normalize_phone', 'update_quality_scores'],\r\n      schedule: '0 2 * * *', // Daily at 2 AM\r\n      enabled: true,\r\n      lastRun: new Date(Date.now() - 86_400_000).toISOString(), // 24 hours ago\r\n      nextRun: new Date(Date.now() + 3_600_000).toISOString(), // 1 hour from now\r\n      successCount: 30,\r\n      errorCount: 1\r\n    },\r\n    {\r\n      id: 'weekly-deep-clean',\r\n      name: 'Weekly Deep Cleanup',\r\n      operations: ['remove_placeholders', 'normalize_phone', 'fix_coordinates', 'update_quality_scores', 'merge_duplicates'],\r\n      schedule: '0 3 * * 0', // Weekly on Sunday at 3 AM\r\n      enabled: true,\r\n      lastRun: new Date(Date.now() - 604_800_000).toISOString(), // 7 days ago\r\n      nextRun: new Date(Date.now() + 259_200_000).toISOString(), // 3 days from now\r\n      successCount: 4,\r\n      errorCount: 0\r\n    }\r\n  ]);\r\n}\r\n\r\nfunction getCleanupHistory(_limit: number): Promise<CleanupResult[]> {\r\n  // This would fetch from a cleanup_history table\r\n  return Promise.resolve([]);\r\n}\r\n\r\ninterface PreviewResult {\r\n  estimatedChanges: Record<string, unknown>;\r\n  operationDetails: Record<string, unknown>;\r\n  estimatedDuration: number;\r\n  affectedTrucks: number;\r\n}\r\n\r\nasync function previewCleanupOperations(operations: string[]): Promise<PreviewResult> {\r\n  try {\r\n    const result = await BatchCleanupService.runFullCleanup({\r\n      operations: operations as CleanupOperationType[],\r\n      batchSize: 10,\r\n      dryRun: true\r\n    });\r\n\r\n    return {\r\n      estimatedChanges: result.summary as Record<string, unknown>,\r\n      operationDetails: (() => {\r\n        const details: Record<string, unknown> = {};\r\n        for (const [index, op] of result.operations.entries()) {\r\n          details[`operation_${index}`] = {\r\n            type: op.type,\r\n            description: op.description,\r\n            affectedCount: op.affectedCount,\r\n            successCount: op.successCount,\r\n            errorCount: op.errorCount\r\n          };\r\n        }\r\n        return details;\r\n      })(),\r\n      estimatedDuration: result.duration,\r\n      affectedTrucks: result.totalProcessed\r\n    };\r\n  } catch (error) {\r\n    throw new Error(`Preview failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n  }\r\n}\r\n\r\nasync function runScheduledCleanup(scheduleId: string): Promise<Record<string, unknown>> {\r\n  const schedules = await getCleanupSchedules();\r\n  const schedule = schedules.find(s => s.id === scheduleId);\r\n\r\n  if (!schedule) {\r\n    throw new Error(`Schedule ${scheduleId} not found`);\r\n  }\r\n\r\n  if (!schedule.enabled) {\r\n    throw new Error(`Schedule ${scheduleId} is disabled`);\r\n  }\r\n\r\n  const result = await BatchCleanupService.runFullCleanup({\r\n    operations: schedule.operations as CleanupOperationType[],\r\n    batchSize: 50,\r\n    dryRun: false\r\n  });\r\n\r\n  // Log the scheduled cleanup\r\n  // @ts-expect-error TS(2345): Argument of type 'BatchCleanupResult' is not assig... Remove this comment to see the full error message\r\n  await logCleanupOperation('scheduled', result, { scheduleId });\r\n\r\n  // @ts-expect-error TS(2352): Conversion of type 'BatchCleanupResult' to type 'R... Remove this comment to see the full error message\r\n  return result as Record<string, unknown>;\r\n}\r\n\r\ninterface ScheduleCreateResult {\r\n  id: string;\r\n  name: string;\r\n  operations: string[];\r\n  schedule: string;\r\n  enabled: boolean;\r\n  created: string;\r\n}\r\n\r\ninterface ScheduleUpdateResult {\r\n  scheduleId: string;\r\n  updates: Record<string, unknown>;\r\n  updated: string;\r\n}\r\n\r\ninterface ScheduleDeleteResult {\r\n  scheduleId: string;\r\n  deleted: string;\r\n}\r\n\r\ninterface DuplicateAnalysisResult {\r\n  threshold: number;\r\n  potentialDuplicates: number;\r\n  highConfidenceMatches: number;\r\n  mediumConfidenceMatches: number;\r\n  lowConfidenceMatches: number;\r\n  analysisTime: string;\r\n}\r\n\r\nfunction createCleanupSchedule(\r\n  name: string,\r\n  operations: string[],\r\n  schedule: string,\r\n  enabled: boolean\r\n): Promise<ScheduleCreateResult> {\r\n  // This would create a new schedule in the database\r\n  return Promise.resolve({\r\n    id: `schedule-${Date.now()}`,\r\n    name,\r\n    operations,\r\n    schedule,\r\n    enabled,\r\n    created: new Date().toISOString()\r\n  });\r\n}\r\n\r\nfunction updateCleanupSchedule(scheduleId: string, updates: Record<string, unknown>): Promise<ScheduleUpdateResult> {\r\n  // This would update the schedule in the database\r\n  return Promise.resolve({\r\n    scheduleId,\r\n    updates,\r\n    updated: new Date().toISOString()\r\n  });\r\n}\r\n\r\nfunction deleteCleanupSchedule(scheduleId: string): Promise<ScheduleDeleteResult> {\r\n  // This would delete the schedule from the database\r\n  return Promise.resolve({\r\n    scheduleId,\r\n    deleted: new Date().toISOString()\r\n  });\r\n}\r\n\r\nfunction analyzeDuplicates(threshold: number): Promise<DuplicateAnalysisResult> {\r\n  try {\r\n    // This would run a comprehensive duplicate analysis\r\n    return Promise.resolve({\r\n      threshold,\r\n      potentialDuplicates: 0,\r\n      highConfidenceMatches: 0,\r\n      mediumConfidenceMatches: 0,\r\n      lowConfidenceMatches: 0,\r\n      analysisTime: new Date().toISOString()\r\n    });\r\n  } catch (error) {\r\n    throw new Error(`Duplicate analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n  }\r\n}\r\n\r\nfunction logCleanupOperation(type: string, result: Record<string, unknown>, options: Record<string, unknown>): Promise<void> {\r\n  try {\r\n    // This would log the cleanup operation to a database table\r\n    console.info(`Cleanup operation completed:`, {\r\n      type,\r\n      result: result.summary as Record<string, unknown>,\r\n      options,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    return Promise.resolve();\r\n  } catch (error) {\r\n    console.warn('Failed to log cleanup operation:', error);\r\n    return Promise.resolve();\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\cron-status\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'GET' has too many lines (155). Maximum allowed is 50.",
        "line": 55,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 209,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 72,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 72,
        "endColumn": 113,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 72,
        "column": 35,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 72,
        "endColumn": 69,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextResponse } from 'next/server';\r\nimport { ScrapingJobService, FoodTruckService, supabase, supabaseAdmin } from '@/lib/supabase';\r\n\r\n/**\r\n * SOTA CRON Job Monitoring API\r\n *\r\n * Enhanced monitoring system for background processes and scheduled tasks\r\n * Provides real-time status, performance metrics, and alerting capabilities\r\n */\r\n\r\n\r\n\r\n// Type definitions for job data\r\ninterface JobData {\r\n  job_type?: string;\r\n  target_url?: string;\r\n  status?: string;\r\n  created_at?: string;\r\n}\r\n\r\ninterface TruckData {\r\n  created_at: string;\r\n}\r\n\r\ninterface TrucksResponse {\r\n  trucks: TruckData[];\r\n  total: number;\r\n}\r\n\r\n// Enhanced security check for admin API endpoints\r\nasync function verifyAdminAccess(request: Request): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader == undefined) return false;\r\n\r\n    const token = authHeader.replace('Bearer ', '');\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n\r\n    if (error || !user) return false;\r\n\r\n    if (!supabaseAdmin) return false;\r\n\r\n    const { data: profile } = await supabaseAdmin\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function GET(request: Request) {\r\n  // Verify admin access for API endpoint security\r\n  const hasAdminAccess = await verifyAdminAccess(request);\r\n  if (!hasAdminAccess) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Unauthorized access' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    // Fetch real cron job data from database with proper error handling\r\n    let recentJobs: JobData[] = [];\r\n    let todayTrucks: TrucksResponse = { trucks: [], total: 0 };\r\n\r\n    try {\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n      const recentJobsRaw = await ScrapingJobService.getJobsFromDate(new Date(Date.now() - 24 * 60 * 60 * 1000));\r\n      recentJobs = Array.isArray(recentJobsRaw) ? recentJobsRaw as JobData[] : [];\r\n    } catch (error: unknown) {\r\n      console.warn('Failed to fetch recent jobs:', error);\r\n    }\r\n\r\n    try {\r\n      const todayTrucksRaw = await FoodTruckService.getAllTrucks(1000, 0);\r\n      todayTrucks = todayTrucksRaw as TrucksResponse;\r\n    } catch (error: unknown) {\r\n      console.warn('Failed to fetch trucks:', error);\r\n    }\r\n\r\n    // Calculate next run times based on cron schedules\r\n    const now = new Date();\r\n    const getNextCronRun = (hour: number) => {\r\n      const next = new Date(now);\r\n      next.setHours(hour, 0, 0, 0);\r\n      if (next <= now) {\r\n        next.setDate(next.getDate() + 1);\r\n      }\r\n      return next.toISOString();\r\n    };\r\n\r\n    const getLastCronRun = (hour: number) => {\r\n      const last = new Date(now);\r\n      last.setHours(hour, 0, 0, 0);\r\n      if (last > now) {\r\n        last.setDate(last.getDate() - 1);\r\n      }\r\n      return last.toISOString();\r\n    };\r\n\r\n    // Filter jobs by type/purpose for cron status\r\n    const autoScrapeJobs = recentJobs.filter((job: JobData) => {\r\n      return job.job_type === 'auto_scrape' || (job.target_url?.includes('auto') ?? false);\r\n    });\r\n    const qualityCheckJobs = recentJobs.filter((job: JobData) => {\r\n      return job.job_type === 'quality_check' || (job.target_url?.includes('quality') ?? false);\r\n    });\r\n\r\n    // Count today's new trucks\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const newTrucksToday = todayTrucks.trucks.filter((truck: TruckData) => {\r\n      const createdAt = new Date(truck.created_at);\r\n      return createdAt >= today;\r\n    }).length;\r\n\r\n    const jobs = [\r\n      {\r\n        id: 'auto-scrape',\r\n        name: 'Auto Food Truck Scraping',\r\n        schedule: '0 6 * * *', // Daily at 6 AM\r\n        lastRun: getLastCronRun(6),\r\n        nextRun: getNextCronRun(6),\r\n        status: Boolean(autoScrapeJobs.some((job: JobData) => {\r\n          return job.status === 'running';\r\n        })) ? 'running' as const : 'idle' as const,\r\n        lastResult: (() => {\r\n          const firstJob = autoScrapeJobs[0];\r\n          const hasJobs = autoScrapeJobs.length > 0;\r\n          const isCompleted = hasJobs && firstJob?.status === 'completed';\r\n          const isFailed = hasJobs && firstJob?.status === 'failed';\r\n\r\n          let message: string;\r\n          if (isCompleted) {\r\n            message = 'Successfully processed food trucks';\r\n          } else if (isFailed) {\r\n            message = 'Scraping job failed';\r\n          } else {\r\n            message = 'No recent scraping jobs';\r\n          }\r\n\r\n          return {\r\n            success: hasJobs ? firstJob?.status === 'completed' : true,\r\n            message,\r\n            trucksProcessed: todayTrucks.total,\r\n            newTrucksFound: newTrucksToday,\r\n            errors: autoScrapeJobs.filter((job: JobData) => {\r\n              return job.status === 'failed';\r\n            }).length,\r\n          };\r\n        })(),\r\n      },\r\n      {\r\n        id: 'quality-check',\r\n        name: 'Daily Data Quality Check',\r\n        schedule: '0 8 * * *', // Daily at 8 AM\r\n        lastRun: getLastCronRun(8),\r\n        nextRun: getNextCronRun(8),\r\n        status: Boolean(qualityCheckJobs.some((job: JobData) => {\r\n          return job.status === 'running';\r\n        })) ? 'running' as const : 'idle' as const,\r\n        lastResult: (() => {\r\n          const firstJob = qualityCheckJobs[0];\r\n          const hasJobs = qualityCheckJobs.length > 0;\r\n          const isCompleted = hasJobs && firstJob?.status === 'completed';\r\n          const isFailed = hasJobs && firstJob?.status === 'failed';\r\n\r\n          let message: string;\r\n          if (isCompleted) {\r\n            message = 'Quality check completed successfully';\r\n          } else if (isFailed) {\r\n            message = 'Quality check failed';\r\n          } else {\r\n            message = 'No recent quality checks';\r\n          }\r\n\r\n          return {\r\n            success: hasJobs ? firstJob?.status === 'completed' : true,\r\n            message,\r\n            trucksProcessed: todayTrucks.total,\r\n            newTrucksFound: 0, // Quality checks don't find new trucks\r\n            errors: qualityCheckJobs.filter((job: JobData) => {\r\n              return job.status === 'failed';\r\n            }).length,\r\n          };\r\n        })(),\r\n      },\r\n    ];\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      jobs,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching cron status:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to fetch cron status',\r\n        jobs: [],\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-cleanup\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (91). Maximum allowed is 50.",
        "line": 22,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 112,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'GET' has too many lines (74). Maximum allowed is 50.",
        "line": 114,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 187,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { BatchCleanupService } from '@/lib/data-quality/batchCleanup';\r\nimport { DuplicatePreventionService } from '@/lib/data-quality/duplicatePrevention';\r\n\r\n/**\r\n * Data Cleanup API Endpoint\r\n * Provides automated data quality improvements and cleanup operations\r\n */\r\n\r\ninterface DataCleanupRequestBody {\r\n  action: string;\r\n  options?: {\r\n    batchSize?: number;\r\n    dryRun?: boolean;\r\n    operations?: string[];\r\n    truckData?: Record<string, unknown>;\r\n    targetId?: string;\r\n    sourceId?: string;\r\n  };\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json() as DataCleanupRequestBody;\r\n    const { action, options = {} } = body;\r\n\r\n    switch (action) {\r\n      case 'full-cleanup': {\r\n        const result = await BatchCleanupService.runFullCleanup({\r\n          batchSize: options.batchSize ?? 50,\r\n          dryRun: options.dryRun ?? false,\r\n          operations: options.operations\r\n        });\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'full-cleanup',\r\n          result,\r\n          message: `Cleanup completed: ${result.summary.trucksImproved} trucks improved, ${result.summary.duplicatesRemoved} duplicates removed`\r\n        });\r\n      }\r\n\r\n      case 'check-duplicates': {\r\n        const { truckData } = options;\r\n        if (!truckData) {\r\n          return NextResponse.json(\r\n            { success: false, error: 'Missing truckData for duplicate check' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'check-duplicates',\r\n          result: duplicateCheck\r\n        });\r\n      }\r\n\r\n      case 'merge-duplicates': {\r\n        const { targetId, sourceId } = options;\r\n        if (targetId === undefined || sourceId === undefined) {\r\n          return NextResponse.json(\r\n            { success: false, error: 'Missing targetId or sourceId for merge operation' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        const mergedTruck = await DuplicatePreventionService.mergeDuplicates(targetId, sourceId);\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'merge-duplicates',\r\n          result: mergedTruck,\r\n          message: `Successfully merged truck ${sourceId} into ${targetId}`\r\n        });\r\n      }\r\n\r\n      case 'dry-run': {\r\n        const result = await BatchCleanupService.runFullCleanup({\r\n          ...options,\r\n          dryRun: true\r\n        });\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          action: 'dry-run',\r\n          result,\r\n          message: 'Dry run completed - no changes made to database'\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json(\r\n          { success: false, error: `Unknown action: ${action}` },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Data cleanup API error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to process cleanup request',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n\r\n    switch (action) {\r\n      case 'status': {\r\n        // Return cleanup system status\r\n        return NextResponse.json({\r\n          success: true,\r\n          status: {\r\n            available_operations: [\r\n              'remove_placeholders',\r\n              'normalize_phone',\r\n              'fix_coordinates',\r\n              'update_quality_scores',\r\n              'merge_duplicates'\r\n            ],\r\n            default_batch_size: 50,\r\n            supports_dry_run: true\r\n          }\r\n        });\r\n      }\r\n\r\n      case 'preview': {\r\n        // Run a small dry run to preview changes\r\n        const result = await BatchCleanupService.runFullCleanup({\r\n          batchSize: 10,\r\n          dryRun: true\r\n        });\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          preview: {\r\n            estimated_improvements: result.summary.trucksImproved,\r\n            estimated_duplicates: result.summary.duplicatesRemoved,\r\n            operations: result.operations.map(op => ({\r\n              type: op.type,\r\n              description: op.description,\r\n              affected_count: op.affectedCount\r\n            }))\r\n          }\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json({\r\n          success: true,\r\n          endpoints: [\r\n            'GET /api/admin/data-cleanup?action=status - Get cleanup system status',\r\n            'GET /api/admin/data-cleanup?action=preview - Preview cleanup changes',\r\n            'POST /api/admin/data-cleanup - Run cleanup operations'\r\n          ],\r\n          actions: [\r\n            'full-cleanup - Run all cleanup operations',\r\n            'check-duplicates - Check if truck data is duplicate',\r\n            'merge-duplicates - Merge two duplicate trucks',\r\n            'dry-run - Preview changes without making them'\r\n          ]\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Data cleanup GET error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to process cleanup request',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-quality\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'GET' has too many lines (90). Maximum allowed is 50.",
        "line": 55,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 144,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (107). Maximum allowed is 50.",
        "line": 147,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 253,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 76,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 76,
        "endColumn": 72,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 76,
        "column": 31,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 76,
        "endColumn": 70,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .getQualityThresholds on an `error` typed value.",
        "line": 76,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 76,
        "endColumn": 70,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 104,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 104,
        "endColumn": 81,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 104,
        "column": 31,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 104,
        "endColumn": 71,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .calculateQualityScore on an `error` typed value.",
        "line": 104,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 104,
        "endColumn": 71,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 118,
        "column": 23,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 118,
        "endColumn": 64,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .categorizeQualityScore on an `error` typed value.",
        "line": 118,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 118,
        "endColumn": 64,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 171,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 171,
        "endColumn": 90,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 171,
        "column": 39,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 171,
        "endColumn": 81,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .updateTruckQualityScore on an `error` typed value.",
        "line": 171,
        "column": 58,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 171,
        "endColumn": 81,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 190,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 190,
        "endColumn": 89,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 190,
        "column": 34,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 190,
        "endColumn": 77,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .batchUpdateQualityScores on an `error` typed value.",
        "line": 190,
        "column": 53,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 190,
        "endColumn": 77,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 214,
        "column": 19,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 214,
        "endColumn": 61,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .updateTruckQualityScore on an `error` typed value.",
        "line": 214,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 214,
        "endColumn": 61,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { DataQualityService, FoodTruckService, supabase } from '@/lib/supabase';\r\n\r\n// Type definitions for API responses\r\ninterface QualityThresholds {\r\n  excellent: number;\r\n  good: number;\r\n  fair: number;\r\n  poor: number;\r\n}\r\n\r\ninterface QualityAssessment {\r\n  score: number;\r\n  breakdown: Record<string, number>;\r\n  recommendations: string[];\r\n}\r\n\r\ninterface TruckData {\r\n  id: string;\r\n  name: string;\r\n  data_quality_score: number;\r\n  verification_status: string;\r\n}\r\n\r\ninterface QualityCategory {\r\n  label: string;\r\n  color: string;\r\n  description: string;\r\n}\r\n\r\n// Security check for admin API endpoints\r\nasync function verifyAdminAccess(request: Request): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader == undefined) return false;\r\n\r\n    const token = authHeader.replace('Bearer ', '');\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n    \r\n    if (error || !user) return false;\r\n\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// GET: Retrieve data quality statistics and metrics\r\nexport async function GET(request: NextRequest) {\r\n  // Verify admin access\r\n  const hasAdminAccess = await verifyAdminAccess(request);\r\n  if (!hasAdminAccess) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Unauthorized access' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action');\r\n    const truckId = searchParams.get('truckId');\r\n\r\n    switch (action) {\r\n      case 'stats': {\r\n        // Get comprehensive quality statistics\r\n         \r\n        const qualityStatsRaw = await FoodTruckService.getDataQualityStats();\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n        const thresholdsRaw = DataQualityService.getQualityThresholds();\r\n\r\n        // Type-safe casting with proper error handling\r\n        const qualityStats = qualityStatsRaw as Record<string, unknown>;\r\n        const thresholds = thresholdsRaw as QualityThresholds;\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          data: {\r\n            ...qualityStats,\r\n            thresholds,\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        });\r\n      }\r\n\r\n      case 'assess': {\r\n        if (truckId == undefined) {\r\n          return NextResponse.json(\r\n            { success: false, error: 'Truck ID required for assessment' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // Get truck and assess quality\r\n         \r\n        const truckRaw = await FoodTruckService.getTruckById(truckId);\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n        const assessmentRaw = DataQualityService.calculateQualityScore(truckRaw);\r\n\r\n        // Type-safe casting\r\n        const truck = truckRaw as TruckData;\r\n        const assessment = assessmentRaw as QualityAssessment;\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          data: {\r\n            truckId,\r\n            truckName: truck.name,\r\n            currentScore: truck.data_quality_score,\r\n            newAssessment: assessment,\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n            category: DataQualityService.categorizeQualityScore(assessment.score) as QualityCategory,\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        });\r\n      }\r\n\r\n      default: {\r\n        // Default: return overview statistics\r\n        const qualityStats = await FoodTruckService.getDataQualityStats();\r\n        return NextResponse.json({\r\n          success: true,\r\n          data: qualityStats\r\n        });\r\n      }\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Error fetching data quality information:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to fetch data quality information',\r\n        message: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST: Update quality scores or perform quality operations\r\nexport async function POST(request: NextRequest) {\r\n  // Verify admin access\r\n  const hasAdminAccess = await verifyAdminAccess(request);\r\n  if (!hasAdminAccess) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Unauthorized access' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    const body = await request.json() as { action: string; truckId?: string; limit?: number };\r\n    const { action, truckId, limit } = body;\r\n\r\n    switch (action) {\r\n      case 'update_single': {\r\n        if (truckId == undefined) {\r\n          return NextResponse.json(\r\n            { success: false, error: 'Truck ID required' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n        const updatedTruckRaw = await DataQualityService.updateTruckQualityScore(truckId);\r\n        const updatedTruck = updatedTruckRaw as TruckData;\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          message: 'Quality score updated successfully',\r\n          data: {\r\n            truckId: updatedTruck.id,\r\n            truckName: updatedTruck.name,\r\n            newScore: updatedTruck.data_quality_score,\r\n            verificationStatus: updatedTruck.verification_status,\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        });\r\n      }\r\n\r\n      case 'batch_update': {\r\n        const batchLimit = limit ?? 100;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n        const resultsRaw = await DataQualityService.batchUpdateQualityScores(batchLimit);\r\n        const results = resultsRaw as Record<string, unknown>;\r\n        \r\n        return NextResponse.json({\r\n          success: true,\r\n          message: 'Batch quality score update completed',\r\n          data: {\r\n            ...results,\r\n            limit: batchLimit,\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        });\r\n      }\r\n\r\n      case 'recalculate_all': {\r\n        // Recalculate quality scores for all trucks\r\n        const { trucks } = await FoodTruckService.getAllTrucks(1000, 0);\r\n        let updated = 0;\r\n        let errors = 0;\r\n\r\n        for (const truck of trucks) {\r\n          try {\r\n            const truckData = truck as TruckData;\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n            await DataQualityService.updateTruckQualityScore(truckData.id);\r\n            updated++;\r\n          } catch (error: unknown) {\r\n            const truckData = truck as TruckData;\r\n            console.error(`Failed to update truck ${truckData.id}:`, error);\r\n            errors++;\r\n          }\r\n        }\r\n\r\n        return NextResponse.json({\r\n          success: true,\r\n          message: 'Quality score recalculation completed',\r\n          data: {\r\n            totalTrucks: trucks.length,\r\n            updated,\r\n            errors,\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json(\r\n          { success: false, error: 'Invalid action specified' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Error updating data quality:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to update data quality',\r\n        message: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\oauth-status\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'GET' has too many lines (109). Maximum allowed is 50.",
        "line": 37,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 145,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.",
        "line": 37,
        "column": 23,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 37,
        "endColumn": 26
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 91,
        "column": 11,
        "nodeType": "IfStatement",
        "messageId": "tooDeeply",
        "endLine": 93,
        "endColumn": 12
      },
      {
        "ruleId": "sonarjs/no-nested-template-literals",
        "severity": 2,
        "message": "Refactor this code to not use nested template literals.",
        "line": 248,
        "column": 129,
        "nodeType": "TemplateLiteral",
        "messageId": "nestedTemplateLiterals",
        "endLine": 248,
        "endColumn": 155
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\n/**\r\n * OAuth Configuration Status Endpoint\r\n * Provides comprehensive status of Google OAuth configuration\r\n * for admin dashboard monitoring and setup verification.\r\n */\r\n\r\ninterface OAuthStatus {\r\n  timestamp: string;\r\n  environment: 'development' | 'production';\r\n  supabase: {\r\n    connected: boolean;\r\n    projectId: string;\r\n    authSettings?: {\r\n      googleEnabled: boolean;\r\n      signupEnabled: boolean;\r\n      autoconfirm: boolean;\r\n    };\r\n    error?: string;\r\n  };\r\n  environment_variables: {\r\n    supabaseUrl: boolean;\r\n    supabaseAnonKey: boolean;\r\n    supabaseServiceKey: boolean;\r\n  };\r\n  oauth_flow: {\r\n    loginPageExists: boolean;\r\n    callbackRouteExists: boolean;\r\n    authProviderConfigured: boolean;\r\n  };\r\n  recommendations: string[];\r\n  overall_status: 'ready' | 'partial' | 'not_configured' | 'error';\r\n}\r\n\r\nexport async function GET(_request: NextRequest) {\r\n  try {\r\n    const status: OAuthStatus = {\r\n      timestamp: new Date().toISOString(),\r\n      environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\r\n      supabase: {\r\n        connected: false,\r\n        projectId: 'zkwliyjjkdnigizidlln'\r\n      },\r\n      environment_variables: {\r\n        supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL != undefined,\r\n        supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY != undefined,\r\n        supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY != undefined\r\n      },\r\n      oauth_flow: {\r\n        loginPageExists: true, // We know this exists from our codebase\r\n        callbackRouteExists: true, // We know this exists from our codebase\r\n        authProviderConfigured: false\r\n      },\r\n      recommendations: [],\r\n      overall_status: 'not_configured'\r\n    };\r\n\r\n    // Test Supabase connection\r\n    try {\r\n      const { error } = await supabase.from('profiles').select('count').limit(1);\r\n\r\n      if (error == undefined) {\r\n        status.supabase.connected = true;\r\n      } else {\r\n        status.supabase.error = error.message;\r\n      }\r\n    } catch (error) {\r\n      status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\r\n    }\r\n\r\n    // Try to get Supabase auth settings\r\n    try {\r\n      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n      if (supabaseUrl != undefined && supabaseUrl !== '') {\r\n        const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\r\n\r\n        if (settingsResponse.ok === true) {\r\n          const settings = await settingsResponse.json() as {\r\n            external?: { google?: boolean };\r\n            disable_signup?: boolean;\r\n            autoconfirm?: boolean;\r\n          };\r\n          status.supabase.authSettings = {\r\n            googleEnabled: settings.external?.google ?? false,\r\n            signupEnabled: settings.disable_signup !== true,\r\n            autoconfirm: settings.autoconfirm ?? false\r\n          };\r\n\r\n          if (settings.external?.google != undefined) {\r\n            status.oauth_flow.authProviderConfigured = true;\r\n          }\r\n        }\r\n      }\r\n    } catch {\r\n      // Auth settings endpoint might require authentication, which is normal\r\n      console.info('Auth settings endpoint requires authentication (normal)');\r\n    }\r\n\r\n    // Test OAuth provider availability\r\n    try {\r\n      const { error: oauthError } = await supabase.auth.signInWithOAuth({\r\n        provider: 'google',\r\n        options: {\r\n          redirectTo: 'http://localhost:3000/auth/callback',\r\n          skipBrowserRedirect: true\r\n        }\r\n      });\r\n\r\n      if (!oauthError || oauthError.message !== 'Provider not found') {\r\n        status.oauth_flow.authProviderConfigured = true;\r\n      }\r\n    } catch {\r\n      console.info('OAuth provider test failed (may be normal)');\r\n    }\r\n\r\n    // Generate recommendations and determine status\r\n    status.recommendations = generateRecommendations(status);\r\n    status.overall_status = determineOverallStatus(status);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      ...status,\r\n      legacy_format: {\r\n        oauth_status: status.overall_status,\r\n        message: getStatusMessage(status.overall_status),\r\n        configuration_steps: status.overall_status === 'ready' ? undefined : [\r\n          '1. Go to Supabase Dashboard > Authentication > Providers',\r\n          '2. Enable Google provider',\r\n          '3. Add Google OAuth Client ID and Secret',\r\n          '4. Configure redirect URLs',\r\n          '5. Test OAuth flow'\r\n        ]\r\n      }\r\n    });\r\n  } catch (error) {\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'OAuth status check failed',\r\n      details: error instanceof Error ? error.message : 'Unknown error',\r\n      timestamp: new Date().toISOString()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nfunction generateRecommendations(status: OAuthStatus): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  // Environment variables check\r\n  if (!status.environment_variables.supabaseUrl) {\r\n    recommendations.push('Γ¥î Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseAnonKey) {\r\n    recommendations.push('Γ¥î Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseServiceKey) {\r\n    recommendations.push('Γ¥î Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\r\n  }\r\n\r\n  // Supabase connection check\r\n  if (!status.supabase.connected) {\r\n    recommendations.push('Γ¥î Fix Supabase connection issue');\r\n    if (status.supabase.error != undefined && status.supabase.error !== '') {\r\n      recommendations.push(`   Error: ${status.supabase.error}`);\r\n    }\r\n  }\r\n\r\n  // OAuth configuration check\r\n  if (status.supabase.authSettings == undefined) {\r\n    recommendations.push('≡ƒöº Configure Google OAuth in Supabase Dashboard', '   1. Create Google Cloud Console OAuth credentials', '   2. Add credentials to Supabase Auth settings');\r\n  } else {\r\n    if (status.supabase.authSettings.googleEnabled === true) {\r\n      recommendations.push('Γ£à Google OAuth provider is enabled');\r\n    } else {\r\n      recommendations.push('≡ƒöº Enable Google OAuth provider in Supabase Dashboard', '   Go to: Authentication > Providers > Google');\r\n    }\r\n  }\r\n\r\n  // Success state\r\n  if (status.overall_status === 'ready') {\r\n    recommendations.push('≡ƒÄë OAuth configuration is complete!', 'Γ£à Test the login flow at /login');\r\n  }\r\n\r\n  // General guidance\r\n  if (recommendations.length > 1) {\r\n    recommendations.push('≡ƒôû See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions', '≡ƒöº Run: npm run oauth:verify for automated checks');\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\nfunction determineOverallStatus(status: OAuthStatus): 'ready' | 'partial' | 'not_configured' | 'error' {\r\n  // Error state\r\n  if (status.supabase.connected !== true || (status.supabase.error != undefined && status.supabase.error !== '')) {\r\n    return 'error';\r\n  }\r\n\r\n  // Check if all environment variables are present\r\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\r\n  if (!envVarsComplete) {\r\n    return 'not_configured';\r\n  }\r\n\r\n  // Check OAuth configuration\r\n  if (status.supabase.authSettings?.googleEnabled === true && status.oauth_flow.authProviderConfigured === true) {\r\n    return 'ready';\r\n  }\r\n\r\n  // Partial configuration\r\n  if (status.supabase.connected === true && envVarsComplete) {\r\n    return 'partial';\r\n  }\r\n\r\n  return 'not_configured';\r\n}\r\n\r\nfunction getStatusMessage(status: string): string {\r\n  switch (status) {\r\n    case 'ready': {\r\n      return 'Google OAuth is fully configured and ready to use';\r\n    }\r\n    case 'partial': {\r\n      return 'Basic configuration complete, OAuth provider needs setup';\r\n    }\r\n    case 'not_configured': {\r\n      return 'Google OAuth is not configured';\r\n    }\r\n    case 'error': {\r\n      return 'Configuration error detected';\r\n    }\r\n    default: {\r\n      return 'Unknown configuration status';\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Test OAuth Flow Endpoint\r\n * Provides OAuth test URL for manual testing\r\n */\r\nexport function POST() {\r\n  try {\r\n    const baseUrl = process.env.NODE_ENV === 'production'\r\n      ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\r\n      : 'http://localhost:3000';\r\n\r\n    const testUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/auth/v1/authorize?provider=google&redirect_to=${encodeURIComponent(`${baseUrl}/auth/callback`)}`;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'OAuth test URL generated',\r\n      test_url: testUrl,\r\n      environment: process.env.NODE_ENV ?? 'development',\r\n      instructions: [\r\n        '1. Open the test_url in a new browser tab',\r\n        '2. Complete Google OAuth flow',\r\n        '3. Verify redirect to admin dashboard',\r\n        '4. Check for proper role assignment'\r\n      ],\r\n      manual_test_steps: [\r\n        'Navigate to /login page',\r\n        'Click Google login button',\r\n        'Complete OAuth flow',\r\n        'Verify admin access'\r\n      ],\r\n      automation_commands: [\r\n        'npm run oauth:verify - Check configuration',\r\n        'npm run oauth:test:dev - Test development flow',\r\n        'npm run oauth:test:prod - Test production flow'\r\n      ]\r\n    });\r\n  } catch (error) {\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Failed to generate OAuth test URL',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\realtime-events\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'GET' has too many lines (85). Maximum allowed is 50.",
        "line": 40,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 124,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Method 'start' has too many lines (63). Maximum allowed is 50.",
        "line": 50,
        "column": 5,
        "nodeType": "Property",
        "messageId": "exceed",
        "endLine": 112,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise returned in function argument where a void return was expected.",
        "line": 97,
        "column": 43,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "voidReturnArgument",
        "endLine": 104,
        "endColumn": 8
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'monitorDataChanges' has too many lines (68). Maximum allowed is 50.",
        "line": 206,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 273,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (59). Maximum allowed is 50.",
        "line": 285,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 343,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `ReadableStreamDefaultController<any>` assigned to a parameter of type `ReadableStreamDefaultController<Uint8Array<ArrayBufferLike>>`.",
        "line": 100,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 100,
        "endColumn": 46,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 160,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 160,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 160,
        "column": 30,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 160,
        "endColumn": 59,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 171,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 171,
        "endColumn": 68,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 171,
        "column": 32,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 171,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .getQualityStats on an `error` typed value.",
        "line": 171,
        "column": 51,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 171,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 174,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 174,
        "endColumn": 56,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .avg_quality_score on an `error` typed value.",
        "line": 174,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 174,
        "endColumn": 51,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 176,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 176,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .total_trucks on an `error` typed value.",
        "line": 176,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 176,
        "endColumn": 45,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 213,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 215,
        "endColumn": 6,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 213,
        "column": 30,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 213,
        "endColumn": 64,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .length on an `error` typed value.",
        "line": 218,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 218,
        "endColumn": 26,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 225,
        "column": 23,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 225,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .map on an `error` typed value.",
        "line": 225,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 225,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .length on an `error` typed value.",
        "line": 235,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 235,
        "endColumn": 35,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 281,
        "column": 27,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 281,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 293,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 293,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 295,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 295,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest } from 'next/server';\r\nimport { supabase, supabaseAdmin, ScrapingJobService, FoodTruckService, DataQualityService } from '@/lib/supabase';\r\n\r\n/**\r\n * SOTA Real-time Admin Dashboard Events API\r\n * \r\n * Implements Server-Sent Events (SSE) for real-time admin dashboard updates\r\n * Provides live monitoring of scraping jobs, data quality, and system status\r\n * \r\n * GET /api/admin/realtime-events\r\n */\r\n\r\ninterface AdminEvent {\r\n  id: string;\r\n  type: 'scraping_update' | 'data_quality_change' | 'system_alert' | 'user_activity' | 'heartbeat';\r\n  timestamp: string;\r\n  data: Record<string, unknown>;\r\n  severity?: 'info' | 'warning' | 'error' | 'critical';\r\n}\r\n\r\ninterface RealtimeMetrics {\r\n  scrapingJobs: {\r\n    active: number;\r\n    completed: number;\r\n    failed: number;\r\n    pending: number;\r\n  };\r\n  dataQuality: {\r\n    averageScore: number;\r\n    totalTrucks: number;\r\n    recentChanges: number;\r\n  };\r\n  systemHealth: {\r\n    status: 'healthy' | 'warning' | 'error';\r\n    uptime: number;\r\n    lastUpdate: string;\r\n  };\r\n}\r\n\r\nexport async function GET(request: NextRequest): Promise<Response> {\r\n  // Verify admin access\r\n  const hasAccess = await verifyAdminAccess(request);\r\n  if (!hasAccess) {\r\n    return new Response('Unauthorized', { status: 401 });\r\n  }\r\n\r\n  // Create SSE response\r\n  const encoder = new TextEncoder();\r\n  const stream = new ReadableStream({\r\n    start(controller) {\r\n      // Send initial connection event\r\n      const connectionEvent: AdminEvent = {\r\n        id: generateEventId(),\r\n        type: 'heartbeat',\r\n        timestamp: new Date().toISOString(),\r\n        data: {\r\n          message: 'Real-time admin dashboard connected',\r\n          connectionId: generateEventId()\r\n        }\r\n      };\r\n      \r\n      controller.enqueue(encoder.encode(formatSSEMessage(connectionEvent)));\r\n\r\n      // Set up periodic updates\r\n      const intervalId = setInterval(() => {\r\n        void (async () => {\r\n          try {\r\n            const metrics = await fetchRealtimeMetrics();\r\n            const event: AdminEvent = {\r\n              id: generateEventId(),\r\n              type: 'heartbeat',\r\n              timestamp: new Date().toISOString(),\r\n              data: metrics as Record<string, unknown>\r\n            };\r\n\r\n            controller.enqueue(encoder.encode(formatSSEMessage(event)));\r\n          } catch (error) {\r\n            console.error('Error fetching realtime metrics:', error);\r\n\r\n            const errorEvent: AdminEvent = {\r\n              id: generateEventId(),\r\n              type: 'system_alert',\r\n              timestamp: new Date().toISOString(),\r\n              data: {\r\n                error: 'Failed to fetch metrics',\r\n                details: error instanceof Error ? error.message : 'Unknown error'\r\n              },\r\n              severity: 'error'\r\n            };\r\n\r\n            controller.enqueue(encoder.encode(formatSSEMessage(errorEvent)));\r\n          }\r\n        })();\r\n      }, 5000); // Update every 5 seconds\r\n\r\n      // Set up data change monitoring\r\n      const changeMonitorId = setInterval(async () => {\r\n        try {\r\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n          await monitorDataChanges(controller, encoder);\r\n        } catch (error) {\r\n          console.error('Error monitoring data changes:', error);\r\n        }\r\n      }, 10_000); // Check for changes every 10 seconds\r\n\r\n      // Cleanup on connection close\r\n      request.signal.addEventListener('abort', () => {\r\n        clearInterval(intervalId);\r\n        clearInterval(changeMonitorId);\r\n        controller.close();\r\n      });\r\n    }\r\n  });\r\n\r\n  return new Response(stream, {\r\n    headers: {\r\n      'Content-Type': 'text/event-stream',\r\n      'Cache-Control': 'no-cache',\r\n      'Connection': 'keep-alive',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Headers': 'Cache-Control'\r\n    }\r\n  });\r\n}\r\n\r\nasync function verifyAdminAccess(request: NextRequest): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader?.startsWith('Bearer ') !== true) {\r\n      return false;\r\n    }\r\n\r\n    const token = authHeader.slice(7);\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n\r\n    if (error || !user) {\r\n      return false;\r\n    }\r\n\r\n    if (!supabaseAdmin) {\r\n      return false;\r\n    }\r\n\r\n    const { data: profile } = await supabaseAdmin\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function fetchRealtimeMetrics(): Promise<RealtimeMetrics> {\r\n  try {\r\n    // Fetch scraping job metrics\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n    const recentJobs = await ScrapingJobService.getAllJobs(50, 0);\r\n    const typedJobs = recentJobs as Array<{ status?: string }>;\r\n    const scrapingMetrics = {\r\n      active: typedJobs.filter(job => job.status === 'running').length,\r\n      completed: typedJobs.filter(job => job.status === 'completed').length,\r\n      failed: typedJobs.filter(job => job.status === 'failed').length,\r\n      pending: typedJobs.filter(job => job.status === 'pending').length\r\n    };\r\n\r\n    // Fetch data quality metrics\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n    const qualityStats = await DataQualityService.getQualityStats();\r\n    const dataQualityMetrics = {\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\r\n      averageScore: qualityStats.avg_quality_score ?? 0,\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\r\n      totalTrucks: qualityStats.total_trucks ?? 0,\r\n      recentChanges: 0 // This would need additional tracking\r\n    };\r\n\r\n    // System health check\r\n    const systemHealth = {\r\n      status: 'healthy' as const,\r\n      uptime: process.uptime(),\r\n      lastUpdate: new Date().toISOString()\r\n    };\r\n\r\n    return {\r\n      scrapingJobs: scrapingMetrics,\r\n      dataQuality: dataQualityMetrics,\r\n      systemHealth\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching realtime metrics:', error);\r\n    return {\r\n      scrapingJobs: { active: 0, completed: 0, failed: 0, pending: 0 },\r\n      dataQuality: { averageScore: 0, totalTrucks: 0, recentChanges: 0 },\r\n      systemHealth: {\r\n        status: 'error',\r\n        uptime: 0,\r\n        lastUpdate: new Date().toISOString()\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nasync function monitorDataChanges(\r\n  controller: ReadableStreamDefaultController<Uint8Array>,\r\n  encoder: TextEncoder\r\n): Promise<void> {\r\n  try {\r\n    // Check for recent scraping job changes\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\r\n    const recentJobs = await ScrapingJobService.getJobsFromDate(\r\n      new Date(Date.now() - 60_000) // Last minute\r\n    );\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n    if (recentJobs.length > 0) {\r\n      const event: AdminEvent = {\r\n        id: generateEventId(),\r\n        type: 'scraping_update',\r\n        timestamp: new Date().toISOString(),\r\n        data: {\r\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n          recentJobs: recentJobs.map((job: unknown) => {\r\n            const jobData = job as { id?: string; status?: string; started_at?: string; completed_at?: string };\r\n            return {\r\n              id: jobData.id,\r\n              status: jobData.status,\r\n              started_at: jobData.started_at,\r\n              completed_at: jobData.completed_at\r\n            };\r\n          }),\r\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n          count: recentJobs.length\r\n        },\r\n        severity: 'info'\r\n      };\r\n\r\n      controller.enqueue(encoder.encode(formatSSEMessage(event)));\r\n    }\r\n\r\n    // Check for data quality changes\r\n    const recentTrucks = await FoodTruckService.getAllTrucks(10, 0);\r\n    const recentlyUpdated = recentTrucks.trucks.filter(truck => {\r\n      const updatedAt = new Date(truck.updated_at);\r\n      const oneMinuteAgo = new Date(Date.now() - 60_000);\r\n      return updatedAt > oneMinuteAgo;\r\n    });\r\n\r\n    if (recentlyUpdated.length > 0) {\r\n      const event: AdminEvent = {\r\n        id: generateEventId(),\r\n        type: 'data_quality_change',\r\n        timestamp: new Date().toISOString(),\r\n        data: {\r\n          updatedTrucks: recentlyUpdated.map(truck => ({\r\n            id: truck.id,\r\n            name: truck.name,\r\n            data_quality_score: truck.data_quality_score,\r\n            updated_at: truck.updated_at\r\n          })),\r\n          count: recentlyUpdated.length\r\n        },\r\n        severity: 'info'\r\n      };\r\n\r\n      controller.enqueue(encoder.encode(formatSSEMessage(event)));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error monitoring data changes:', error);\r\n  }\r\n}\r\n\r\nfunction formatSSEMessage(event: AdminEvent): string {\r\n  return `id: ${event.id}\\nevent: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`;\r\n}\r\n\r\nfunction generateEventId(): string {\r\n  // eslint-disable-next-line sonarjs/pseudo-random\r\n  return `${Date.now()}-${Math.random().toString(36).slice(2, 11)}`;\r\n}\r\n\r\n// Health check endpoint for monitoring\r\nexport async function POST(request: NextRequest): Promise<Response> {\r\n  try {\r\n    const hasAccess = await verifyAdminAccess(request);\r\n    if (!hasAccess) {\r\n      return new Response('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    const body = await request.json();\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    const { action } = body;\r\n\r\n    switch (action) {\r\n      case 'health_check': {\r\n        const metrics = await fetchRealtimeMetrics();\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          status: 'healthy',\r\n          metrics,\r\n          timestamp: new Date().toISOString()\r\n        }), {\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n\r\n      case 'trigger_test_event': {\r\n        // This would trigger a test event for debugging\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          message: 'Test event triggered',\r\n          timestamp: new Date().toISOString()\r\n        }), {\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'Unknown action',\r\n          available_actions: ['health_check', 'trigger_test_event']\r\n        }), {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Realtime events POST error:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'Internal server error',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\scraping-metrics\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'GET' has too many lines (81). Maximum allowed is 50.",
        "line": 27,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 107,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 40,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 46,
        "endColumn": 7,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 42,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 42,
        "endColumn": 36,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 44,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 44,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 49,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 49,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .length on an `error` typed value.",
        "line": 49,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 49,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .trucks on an `error` typed value.",
        "line": 75,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 75,
        "endColumn": 44,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 83,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 83,
        "endColumn": 16,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 88,
        "column": 7,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 88,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .total on an `error` typed value.",
        "line": 88,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 88,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextResponse } from 'next/server';\r\nimport { ScrapingJobService, FoodTruckService, supabase } from '@/lib/supabase';\r\n\r\n// Security check for admin API endpoints\r\nasync function verifyAdminAccess(request: Request): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader == undefined) return false;\r\n\r\n    const token = authHeader.replace('Bearer ', '');\r\n    const { data: { user }, error } = await supabase.auth.getUser(token);\r\n\r\n    if (error || !user) return false;\r\n\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function GET(request: Request) {\r\n  // Verify admin access for API endpoint security\r\n  const hasAdminAccess = await verifyAdminAccess(request);\r\n  if (!hasAdminAccess) {\r\n    return NextResponse.json(\r\n      { success: false, error: 'Unauthorized access' },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    // Fetch real scraping metrics from database\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    const [allJobs, , recentTrucks] = await Promise.all([\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n      ScrapingJobService.getAllJobs(100, 0), // Get last 100 jobs for metrics\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n      ScrapingJobService.getJobsFromDate(new Date(Date.now() - 24 * 60 * 60 * 1000)), // Last 24 hours (unused but kept for potential future use)\r\n      FoodTruckService.getAllTrucks(1000, 0), // Get trucks for processing count\r\n    ]);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\r\n    const totalRuns = allJobs.length;\r\n    const typedJobs = allJobs as Array<{ status?: string; started_at?: string; completed_at?: string }>;\r\n    const successfulRuns = typedJobs.filter(job => job.status === 'completed').length;\r\n    const failedRuns = typedJobs.filter(job => job.status === 'failed').length;\r\n\r\n    // Calculate average run time from completed jobs\r\n    const completedJobs = typedJobs.filter(job =>\r\n      job.status === 'completed' && job.started_at !== undefined && job.completed_at !== undefined\r\n    );\r\n\r\n    let totalRunTime = 0;\r\n    for (const job of completedJobs) {\r\n      const start = new Date(job.started_at ?? '').getTime();\r\n      const end = new Date(job.completed_at ?? '').getTime();\r\n      totalRunTime += (end - start) / 1000; // Convert to seconds\r\n    }\r\n\r\n    const averageRunTime = completedJobs.length > 0\r\n      ? Math.round(totalRunTime / completedJobs.length)\r\n      : 0;\r\n\r\n    // Count trucks processed today and new trucks\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n    const typedTrucks = recentTrucks.trucks as Array<{ created_at: string }>;\r\n    const newTrucksToday = typedTrucks.filter(truck => {\r\n      const createdAt = new Date(truck.created_at);\r\n      return createdAt >= today;\r\n    }).length;\r\n\r\n    const metrics = {\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n      totalRuns,\r\n      successfulRuns,\r\n      failedRuns,\r\n      averageRunTime,\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\r\n      totalTrucksProcessed: recentTrucks.total,\r\n      newTrucksToday,\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      metrics,\r\n    });\r\n  } catch (error: unknown) {\r\n    console.error('Error fetching scraping metrics:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to fetch scraping metrics',\r\n        metrics: undefined,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\analytics\\web-vitals\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (53). Maximum allowed is 50.",
        "line": 18,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 70,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'GET' has too many lines (57). Maximum allowed is 50.",
        "line": 75,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 131,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\n\r\n/**\r\n * Web Vitals Analytics Endpoint\r\n * Collects and stores Core Web Vitals metrics for performance monitoring\r\n */\r\n\r\ninterface WebVitalMetric {\r\n  name: string;\r\n  value: number;\r\n  rating: 'good' | 'needs-improvement' | 'poor';\r\n  timestamp: number;\r\n  url: string;\r\n  userAgent: string;\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const metric = await request.json() as WebVitalMetric;\r\n\r\n    // Validate metric data\r\n    if (!metric.name || typeof metric.value !== 'number' || !metric.url) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid metric data' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Store metric in database (if admin client available)\r\n    if (supabaseAdmin) {\r\n      try {\r\n        const { error } = await supabaseAdmin\r\n          .from('web_vitals_metrics')\r\n          .insert({\r\n            metric_name: metric.name,\r\n            metric_value: metric.value,\r\n            rating: metric.rating,\r\n            page_url: metric.url,\r\n            user_agent: metric.userAgent,\r\n            recorded_at: new Date(metric.timestamp).toISOString()\r\n          });\r\n\r\n        if (error) {\r\n          console.warn('Failed to store web vital metric:', error);\r\n          // Don't fail the request - metrics collection should be non-blocking\r\n        }\r\n      } catch (dbError) {\r\n        console.warn('Database error storing web vital:', dbError);\r\n      }\r\n    }\r\n\r\n    // Log performance issues for monitoring\r\n    if (metric.rating === 'poor') {\r\n      console.warn(`Poor ${metric.name} performance detected:`, {\r\n        value: metric.value,\r\n        url: metric.url,\r\n        timestamp: new Date(metric.timestamp).toISOString()\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error('Web vitals endpoint error:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Get Web Vitals Analytics Data\r\n */\r\nexport function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const days = Number.parseInt(searchParams.get('days') ?? '7');\r\n    const page = searchParams.get('page');\r\n\r\n    if (!supabaseAdmin) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Database not available' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    // Calculate date range\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - days);\r\n\r\n    let query = supabaseAdmin\r\n      .from('web_vitals_metrics')\r\n      .select('*')\r\n      .gte('recorded_at', startDate.toISOString())\r\n      .order('recorded_at', { ascending: false });\r\n\r\n    // Filter by page if specified\r\n    if (page != undefined && page !== '') {\r\n      query = query.ilike('page_url', `%${page}%`);\r\n    }\r\n\r\n    const { data: metrics, error } = await query.limit(1000);\r\n\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    // Calculate summary statistics\r\n    const summary = calculateMetricsSummary((metrics ?? []) as Array<{ metric_name: string; metric_value: number; rating: string }>);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        metrics: metrics ?? [],\r\n        summary,\r\n        period: {\r\n          days,\r\n          startDate: startDate.toISOString(),\r\n          endDate: new Date().toISOString()\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to fetch web vitals analytics:', error);\r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to fetch analytics data' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Calculate summary statistics for metrics\r\n */\r\nfunction calculateMetricsSummary(metrics: Array<{ metric_name: string; metric_value: number; rating: string }>) {\r\n  const metricTypes = ['LCP', 'FID', 'CLS', 'FCP', 'TTFB'];\r\n  const summary: Record<string, {\r\n    count: number;\r\n    average: number | undefined;\r\n    median: number | undefined;\r\n    p75: number | undefined;\r\n    p95: number | undefined;\r\n    goodCount: number;\r\n    needsImprovementCount: number;\r\n    poorCount: number;\r\n  }> = {};\r\n\r\n  for (const metricName of metricTypes) {\r\n    const metricData = metrics.filter(m => m.metric_name === metricName);\r\n    \r\n    if (metricData.length === 0) {\r\n      summary[metricName] = {\r\n        count: 0,\r\n        average: undefined,\r\n        median: undefined,\r\n        p75: undefined,\r\n        p95: undefined,\r\n        goodCount: 0,\r\n        needsImprovementCount: 0,\r\n        poorCount: 0\r\n      };\r\n      continue;\r\n    }\r\n\r\n    const values = metricData.map(m => m.metric_value).sort((a, b) => a - b);\r\n    const ratings = metricData.map(m => m.rating);\r\n\r\n    summary[metricName] = {\r\n      count: metricData.length,\r\n      average: Math.round(values.reduce((sum: number, val: number) => sum + val, 0) / values.length),\r\n      median: getPercentile(values, 50),\r\n      p75: getPercentile(values, 75),\r\n      p95: getPercentile(values, 95),\r\n      goodCount: ratings.filter(r => r === 'good').length,\r\n      needsImprovementCount: ratings.filter(r => r === 'needs-improvement').length,\r\n      poorCount: ratings.filter(r => r === 'poor').length\r\n    };\r\n  }\r\n\r\n  return summary;\r\n}\r\n\r\n/**\r\n * Calculate percentile value from sorted array\r\n */\r\nfunction getPercentile(sortedValues: number[], percentile: number): number {\r\n  if (sortedValues.length === 0) return 0;\r\n  \r\n  const index = (percentile / 100) * (sortedValues.length - 1);\r\n  const lower = Math.floor(index);\r\n  const upper = Math.ceil(index);\r\n  \r\n  if (lower === upper) {\r\n    return Math.round(sortedValues[lower]);\r\n  }\r\n  \r\n  const weight = index - lower;\r\n  return Math.round(sortedValues[lower] * (1 - weight) + sortedValues[upper] * weight);\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\auto-scrape-initiate\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\autonomous-discovery\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\auto-scrape\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'POST' has too many lines (77). Maximum allowed is 50.",
        "line": 8,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 84,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { autoScraper } from '@/lib/autoScraper';\r\nimport { scheduler } from '@/lib/scheduler';\r\nimport { logActivity } from '@/lib/activityLogger';\r\nimport { AutoScrapeResult } from '@/lib/autoScraper';\r\n\r\nexport function POST(request: NextRequest) {\r\n  try {\r\n    // Verify cron secret for security\r\n    const authHeader = request.headers.get('authorization');\r\n    const cronSecret = process.env.CRON_SECRET;\r\n\r\n    if (cronSecret === undefined || cronSecret === '') {\r\n      console.error('CRON_SECRET not configured');\r\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\r\n    }\r\n\r\n    if (authHeader !== `Bearer ${cronSecret}`) {\r\n      console.error('Unauthorized cron attempt:', authHeader);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    console.info('Starting automated scraping job...');\r\n\r\n    // Log the start of the cron job\r\n    logActivity({\r\n      type: 'cron_job',\r\n      action: 'auto_scrape_started',\r\n      details: { timestamp: new Date().toISOString() },\r\n    });\r\n\r\n    // Execute the auto-scraping system\r\n    const result: AutoScrapeResult = await autoScraper.runAutoScraping();\r\n\r\n    // Schedule follow-up tasks if needed\r\n    scheduler.scheduleFollowUpTasks(result);\r\n\r\n    // Log successful completion\r\n    logActivity({\r\n      type: 'cron_job',\r\n      action: 'auto_scrape_completed',\r\n      details: {\r\n        timestamp: new Date().toISOString(),\r\n        trucksProcessed: result.trucksProcessed,\r\n        newTrucksFound: result.newTrucksFound,\r\n        errorsCount: result.errors?.length ?? 0,\r\n      },\r\n    });\r\n\r\n    console.info('Automated scraping job completed successfully');\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Auto-scraping completed successfully',\r\n      data: {\r\n        trucksProcessed: result.trucksProcessed,\r\n        newTrucksFound: result.newTrucksFound,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Auto-scraping cron job failed:', error);\r\n\r\n    // Log the error\r\n    logActivity({\r\n      type: 'cron_job',\r\n      action: 'auto_scrape_failed',\r\n      details: {\r\n        timestamp: new Date().toISOString(),\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Auto-scraping failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\n// Only allow POST requests for cron jobs\r\nexport function GET() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed. Use POST for cron jobs.' },\r\n    { status: 405 },\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\quality-check\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'POST' has too many lines (71). Maximum allowed is 50.",
        "line": 17,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 87,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'performDataQualityCheck' has too many lines (57). Maximum allowed is 50.",
        "line": 89,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 145,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { logActivity } from '@/lib/activityLogger';\r\nimport { DataQualityService, FoodTruckService } from '@/lib/supabase';\r\n\r\n// Type definitions for quality assessment\r\ninterface QualityAssessment {\r\n  score: number;\r\n  issues: unknown[];\r\n}\r\n\r\ninterface QualityService {\r\n  calculateQualityScore: (truck: unknown) => QualityAssessment;\r\n  categorizeQualityScore: (score: number) => string;\r\n  batchUpdateQualityScores: (limit: number) => Promise<unknown>;\r\n}\r\n\r\nexport function POST(request: NextRequest) {\r\n  try {\r\n    // Verify cron secret for security\r\n    const authHeader = request.headers.get('authorization');\r\n    const cronSecret = process.env.CRON_SECRET;\r\n\r\n    if (cronSecret === undefined) {\r\n      console.error('CRON_SECRET not configured');\r\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\r\n    }\r\n\r\n    if (authHeader !== `Bearer ${cronSecret}`) {\r\n      console.error('Unauthorized cron attempt:', authHeader);\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    console.info('Starting daily data quality check...');\r\n\r\n    // Log the start of the quality check\r\n    logActivity({\r\n      type: 'cron_job',\r\n      action: 'quality_check_started',\r\n      details: { timestamp: new Date().toISOString() },\r\n    });\r\n\r\n    // Perform data quality checks using SOTA algorithm\r\n    const qualityResults = await performDataQualityCheck();\r\n\r\n    // Log completion with results\r\n    logActivity({\r\n      type: 'cron_job',\r\n      action: 'quality_check_completed',\r\n      details: {\r\n        logTimestamp: new Date().toISOString(),\r\n        ...qualityResults,\r\n      },\r\n    });\r\n\r\n    console.info('Data quality check completed successfully');\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Quality check completed successfully',\r\n      data: {\r\n        ...qualityResults,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Quality check cron job failed:', error);\r\n\r\n    // Log the error\r\n    logActivity({\r\n      type: 'cron_job',\r\n      action: 'quality_check_failed',\r\n      details: {\r\n        timestamp: new Date().toISOString(),\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Quality check failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nasync function performDataQualityCheck() {\r\n  try {\r\n    // Get all trucks for quality assessment\r\n    const { trucks, total } = await FoodTruckService.getAllTrucks(1000, 0);\r\n\r\n    let trucksWithMissingData = 0;\r\n    let lowQualityTrucks = 0;\r\n    let totalQualityScore = 0;\r\n    let staleDataCount = 0;\r\n    const qualityBreakdown = { high: 0, medium: 0, low: 0 };\r\n\r\n    // Assess each truck using SOTA algorithm\r\n    for (const truck of trucks) {\r\n      const assessment = (DataQualityService as QualityService).calculateQualityScore(truck);\r\n      totalQualityScore += assessment.score;\r\n\r\n      const category = (DataQualityService as QualityService).categorizeQualityScore(assessment.score);\r\n      (qualityBreakdown as Record<string, number>)[category]++;\r\n\r\n      if (assessment.issues.length > 0) {\r\n        trucksWithMissingData++;\r\n      }\r\n\r\n      if (assessment.score < 0.6) {\r\n        lowQualityTrucks++;\r\n      }\r\n\r\n      // Check for stale data (location timestamp > 7 days old)\r\n      if (truck.current_location?.timestamp) {\r\n        const locationAge = Date.now() - new Date(truck.current_location.timestamp).getTime();\r\n        const daysSinceUpdate = locationAge / (1000 * 60 * 60 * 24);\r\n        if (daysSinceUpdate > 7) {\r\n          staleDataCount++;\r\n        }\r\n      }\r\n    }\r\n\r\n    const averageQualityScore = trucks.length > 0 ? totalQualityScore / trucks.length : 0;\r\n\r\n    // Update quality scores for trucks that need it (batch update)\r\n    const updateResults = await (DataQualityService as QualityService).batchUpdateQualityScores(100);\r\n\r\n    return {\r\n      totalTrucks: total,\r\n      trucksWithMissingData,\r\n      lowQualityTrucks,\r\n      staleDataCount,\r\n      averageQualityScore: Math.round(averageQualityScore * 100) / 100,\r\n      qualityBreakdown,\r\n      updateResults,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  } catch (error) {\r\n    console.error('Error performing data quality check:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Only allow POST requests for cron jobs\r\nexport function GET() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed. Use POST for cron jobs.' },\r\n    { status: 405 },\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\dashboard\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'GET' has too many lines (61). Maximum allowed is 50.",
        "line": 9,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 69,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { type NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  FoodTruckService,\r\n  ScrapingJobService,\r\n  DataProcessingService,\r\n  APIUsageService,\r\n} from '@/lib/supabase';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const section = searchParams.get('section');\r\n\r\n  try {\r\n    switch (section) {\r\n      case 'overview': {\r\n        return NextResponse.json(await getDashboardOverview());\r\n      }\r\n\r\n      case 'scraping': {\r\n        return NextResponse.json(await getScrapingStatus());\r\n      }\r\n\r\n      case 'processing': {\r\n        return NextResponse.json(await getProcessingStatus());\r\n      }\r\n\r\n      case 'quality': {\r\n        return NextResponse.json(await getDataQualityStatus());\r\n      }\r\n\r\n      case 'usage': {\r\n        return NextResponse.json(await getAPIUsageStatus());\r\n      }\r\n\r\n      default: {\r\n        // Return complete dashboard data with error handling\r\n        const [overview, scraping, processing, quality, usage] = await Promise.allSettled([\r\n          getDashboardOverview(),\r\n          getScrapingStatus(),\r\n          getProcessingStatus(),\r\n          getDataQualityStatus(),\r\n          getAPIUsageStatus(),\r\n        ]);\r\n\r\n        return NextResponse.json({\r\n          overview: overview.status === 'fulfilled' ? overview.value : getDefaultOverview(),\r\n          scraping: scraping.status === 'fulfilled' ? scraping.value : getDefaultScraping(),\r\n          processing: processing.status === 'fulfilled' ? processing.value : getDefaultProcessing(),\r\n          quality: quality.status === 'fulfilled' ? quality.value : getDefaultQuality(),\r\n          usage: usage.status === 'fulfilled' ? usage.value : getDefaultUsage(),\r\n          timestamp: new Date().toISOString(),\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Dashboard API error:', error);\r\n\r\n    // Return fallback data instead of error\r\n    return NextResponse.json({\r\n      overview: getDefaultOverview(),\r\n      scraping: getDefaultScraping(),\r\n      processing: getDefaultProcessing(),\r\n      quality: getDefaultQuality(),\r\n      usage: getDefaultUsage(),\r\n      timestamp: new Date().toISOString(),\r\n      error: 'Some data may be unavailable',\r\n    });\r\n  }\r\n}\r\n\r\nasync function getDashboardOverview() {\r\n  try {\r\n    const { trucks, total } = await FoodTruckService.getAllTrucks(10, 0);\r\n    const qualityStats = await FoodTruckService.getDataQualityStats();\r\n\r\n    return {\r\n      totalTrucks: total,\r\n      recentTrucks: trucks.slice(0, 5).map((truck) => ({\r\n        id: truck.id,\r\n        name: truck.name,\r\n        location: truck.current_location ?? { address: 'Unknown location' },\r\n        operating_hours: truck.operating_hours ?? {},\r\n        menu: truck.menu ?? [],\r\n        contact: truck.contact_info ?? {},\r\n        last_updated: truck.updated_at,\r\n        data_quality_score: truck.data_quality_score ?? 0,\r\n      })),\r\n      averageQuality: qualityStats.avg_quality_score,\r\n      verifiedTrucks: qualityStats.verified_count,\r\n      pendingTrucks: qualityStats.pending_count,\r\n      lastUpdated: new Date().toISOString(),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting dashboard overview:', error);\r\n    return getDefaultOverview();\r\n  }\r\n}\r\n\r\nasync function getScrapingStatus() {\r\n  try {\r\n    const [pendingJobs, runningJobs, completedJobs, failedJobs] = await Promise.all([\r\n      ScrapingJobService.getJobsByStatus('pending'),\r\n      ScrapingJobService.getJobsByStatus('running'),\r\n      ScrapingJobService.getJobsByStatus('completed'),\r\n      ScrapingJobService.getJobsByStatus('failed'),\r\n    ]);\r\n\r\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\r\n    const recentCompleted = completedJobs.filter(\r\n      (job) => job.completed_at != undefined && job.completed_at > yesterday,\r\n    );\r\n    const recentFailed = failedJobs.filter((job) => job.created_at > yesterday);\r\n    const totalRecent = recentCompleted.length + recentFailed.length;\r\n\r\n    return {\r\n      pending: pendingJobs.length,\r\n      running: runningJobs.length,\r\n      completedToday: recentCompleted.length,\r\n      failedToday: recentFailed.length,\r\n      recentJobs: [...recentCompleted, ...recentFailed].slice(0, 10),\r\n      successRate: totalRecent > 0 ? (recentCompleted.length / totalRecent) * 100 : 0,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting scraping status:', error);\r\n    return getDefaultScraping();\r\n  }\r\n}\r\n\r\nasync function getProcessingStatus() {\r\n  try {\r\n    const [pendingQueue, processingQueue, completedQueue, failedQueue] = await Promise.all([\r\n      DataProcessingService.getQueueByStatus('pending'),\r\n      DataProcessingService.getQueueByStatus('processing'),\r\n      DataProcessingService.getQueueByStatus('completed'),\r\n      DataProcessingService.getQueueByStatus('failed'),\r\n    ]);\r\n\r\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\r\n\r\n    return {\r\n      pending: pendingQueue.length,\r\n      processing: processingQueue.length,\r\n      completedToday: completedQueue.filter(\r\n        (item) => item.processed_at != undefined && item.processed_at > yesterday,\r\n      ).length,\r\n      failedToday: failedQueue.filter((item) => item.created_at > yesterday).length,\r\n      totalTokensUsed: completedQueue.reduce(\r\n        (sum, item) => sum + (item.gemini_tokens_used ?? 0),\r\n        0,\r\n      ),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting processing status:', error);\r\n    return getDefaultProcessing();\r\n  }\r\n}\r\n\r\nasync function getDataQualityStatus() {\r\n  try {\r\n    const qualityStats = await FoodTruckService.getDataQualityStats();\r\n    return qualityStats;\r\n  } catch (error) {\r\n    console.error('Error getting data quality status:', error);\r\n    return getDefaultQuality();\r\n  }\r\n}\r\n\r\nasync function getAPIUsageStatus() {\r\n  try {\r\n    const [geminiUsage, firecrawlUsage, allUsage] = await Promise.all([\r\n      APIUsageService.getTodayUsage('gemini'),\r\n      APIUsageService.getTodayUsage('firecrawl'),\r\n      APIUsageService.getAllUsageStats(),\r\n    ]);\r\n\r\n    const geminiLimits = { requests: 1500, tokens: 32_000 };\r\n    const firecrawlLimits = { requests: 500, tokens: 0 };\r\n\r\n    return {\r\n      gemini: {\r\n        requests: {\r\n          used: geminiUsage?.requests_count ?? 0,\r\n          limit: geminiLimits.requests,\r\n          remaining: geminiLimits.requests - (geminiUsage?.requests_count ?? 0),\r\n          percentage: ((geminiUsage?.requests_count ?? 0) / geminiLimits.requests) * 100,\r\n        },\r\n        tokens: {\r\n          used: geminiUsage?.tokens_used ?? 0,\r\n          limit: geminiLimits.tokens,\r\n          remaining: geminiLimits.tokens - (geminiUsage?.tokens_used ?? 0),\r\n          percentage: ((geminiUsage?.tokens_used ?? 0) / geminiLimits.tokens) * 100,\r\n        },\r\n      },\r\n      firecrawl: {\r\n        requests: {\r\n          used: firecrawlUsage?.requests_count ?? 0,\r\n          limit: firecrawlLimits.requests,\r\n          remaining: firecrawlLimits.requests - (firecrawlUsage?.requests_count ?? 0),\r\n          percentage: ((firecrawlUsage?.requests_count ?? 0) / firecrawlLimits.requests) * 100,\r\n        },\r\n      },\r\n      history: allUsage.slice(0, 7),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting API usage status:', error);\r\n    return getDefaultUsage();\r\n  }\r\n}\r\n\r\n// Default fallback data\r\nfunction getDefaultOverview() {\r\n  return {\r\n    totalTrucks: 0,\r\n    recentTrucks: [],\r\n    averageQuality: 0,\r\n    verifiedTrucks: 0,\r\n    pendingTrucks: 0,\r\n    lastUpdated: new Date().toISOString(),\r\n  };\r\n}\r\n\r\nfunction getDefaultScraping() {\r\n  return {\r\n    pending: 0,\r\n    running: 0,\r\n    completedToday: 0,\r\n    failedToday: 0,\r\n    recentJobs: [],\r\n    successRate: 0,\r\n  };\r\n}\r\n\r\nfunction getDefaultProcessing() {\r\n  return {\r\n    pending: 0,\r\n    processing: 0,\r\n    completedToday: 0,\r\n    failedToday: 0,\r\n    totalTokensUsed: 0,\r\n  };\r\n}\r\n\r\nfunction getDefaultQuality() {\r\n  return {\r\n    total_trucks: 0,\r\n    avg_quality_score: 0,\r\n    high_quality_count: 0,\r\n    medium_quality_count: 0,\r\n    low_quality_count: 0,\r\n    verified_count: 0,\r\n    pending_count: 0,\r\n    flagged_count: 0,\r\n  };\r\n}\r\n\r\nfunction getDefaultUsage() {\r\n  return {\r\n    gemini: {\r\n      requests: { used: 0, limit: 1500, remaining: 1500, percentage: 0 },\r\n      tokens: { used: 0, limit: 32_000, remaining: 32_000, percentage: 0 },\r\n    },\r\n    firecrawl: {\r\n      requests: { used: 0, limit: 500, remaining: 500, percentage: 0 },\r\n    },\r\n    history: [],\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\enhanced-pipeline\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\firecrawl\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (59). Maximum allowed is 50.",
        "line": 93,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 151,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// app/api/firecrawl/route.ts\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { firecrawl } from '@/lib/firecrawl';\r\n\r\ninterface FirecrawlRequestBody {\r\n  operation: string;\r\n  url?: string;\r\n  query?: string;\r\n  options?: Record<string, unknown>;\r\n}\r\n\r\n// Helper function to handle scrape operation\r\nasync function handleScrapeOperation(url: string, options: Record<string, unknown>) {\r\n  const scrapeResult = await firecrawl.scrapeUrl(url, {\r\n    formats: ['markdown', 'html'],\r\n    onlyMainContent: true,\r\n    ...options,\r\n  });\r\n\r\n  return NextResponse.json({\r\n    success: scrapeResult.success,\r\n    data: scrapeResult.success ? [scrapeResult.data] : undefined,\r\n    error: scrapeResult.error,\r\n  });\r\n}\r\n\r\n// Helper function to poll crawl status\r\nasync function pollCrawlStatus(jobId: string): Promise<NextResponse> {\r\n  let attempts = 0;\r\n  const maxAttempts = 30; // 5 minutes max\r\n  const pollInterval = 10_000; // 10 seconds\r\n\r\n  while (attempts < maxAttempts) {\r\n    await new Promise((resolve) => setTimeout(resolve, pollInterval));\r\n\r\n    const status = await firecrawl.getCrawlStatus(jobId);\r\n    if (status.success && status.status === 'completed' && status.data) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        data: status.data,\r\n      });\r\n    } else if (status.success && status.status === 'failed') {\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          error: 'Crawl job failed',\r\n        },\r\n        { status: 500 },\r\n      );\r\n    }\r\n\r\n    attempts++;\r\n  }\r\n\r\n  // Timeout\r\n  return NextResponse.json(\r\n    {\r\n      success: false,\r\n      error: 'Crawl job timed out',\r\n    },\r\n    { status: 408 },\r\n  );\r\n}\r\n\r\n// Helper function to handle crawl operation\r\nasync function handleCrawlOperation(url: string, options: Record<string, unknown>) {\r\n  const crawlJob = await firecrawl.crawlWebsite(url, {\r\n    crawlerOptions: {\r\n      maxDepth: (options.maxDepth as number) || 2,\r\n      limit: (options.limit as number) || 20,\r\n      includes: options.includes as string[] | undefined,\r\n      excludes: options.excludes as string[] | undefined,\r\n    },\r\n    pageOptions: {\r\n      formats: ['markdown'],\r\n      onlyMainContent: true,\r\n    },\r\n  });\r\n\r\n  if (!crawlJob.success || crawlJob.jobId == undefined) {\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: crawlJob.error ?? 'Failed to start crawl job',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n\r\n  return pollCrawlStatus(crawlJob.jobId);\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = (await request.json()) as FirecrawlRequestBody;\r\n    const { operation, url, options = {} } = body;\r\n\r\n    switch (operation) {\r\n      case 'search': {\r\n        // Note: Firecrawl doesn't have a direct search API, but we can simulate it\r\n        // by scraping search engine results or known directories\r\n        return NextResponse.json(\r\n          {\r\n            success: false,\r\n            error:\r\n              'Search operation not directly supported by Firecrawl API. Use crawl on directory URLs instead.',\r\n          },\r\n          { status: 400 },\r\n        );\r\n      }\r\n\r\n      case 'scrape': {\r\n        if (url == undefined) {\r\n          return NextResponse.json(\r\n            { success: false, error: 'URL is required for scrape operation' },\r\n            { status: 400 },\r\n          );\r\n        }\r\n\r\n        return handleScrapeOperation(url, options);\r\n      }\r\n\r\n      case 'crawl': {\r\n        if (url == undefined) {\r\n          return NextResponse.json(\r\n            { success: false, error: 'URL is required for crawl operation' },\r\n            { status: 400 },\r\n          );\r\n        }\r\n\r\n        return handleCrawlOperation(url, options);\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json(\r\n          { success: false, error: `Unknown operation: ${operation}` },\r\n          { status: 400 },\r\n        );\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Firecrawl API error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Internal server error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const jobId = searchParams.get('jobId');\r\n\r\n  if (jobId == undefined) {\r\n    return NextResponse.json({ success: false, error: 'Job ID is required' }, { status: 400 });\r\n  }\r\n  try {\r\n    const status = await firecrawl.getCrawlStatus(jobId);\r\n    return NextResponse.json(status);\r\n  } catch (error) {\r\n    console.error('Error getting crawl status:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Failed to get crawl status',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\gemini\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\monitoring\\api-usage\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'GET' has too many lines (62). Maximum allowed is 50.",
        "line": 10,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 71,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (62). Maximum allowed is 50.",
        "line": 73,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 134,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 39,
        "column": 9,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 39,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 41,
        "column": 9,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 41,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 43,
        "column": 9,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 43,
        "endColumn": 42,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 76,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 76,
        "endColumn": 38,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 78,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 78,
        "endColumn": 28,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 100,
        "column": 15,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 100,
        "endColumn": 40,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { APIMonitor, type APIService } from '@/lib/monitoring/apiMonitor';\r\n\r\n/**\r\n * API Usage Monitoring Endpoint\r\n * Provides real-time API usage monitoring and alerting\r\n */\r\n\r\nexport function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const service = searchParams.get('service') as APIService | null;\r\n    const action = searchParams.get('action');\r\n\r\n    // Get comprehensive monitoring data\r\n    if (!service) {\r\n      const monitoringResult = APIMonitor.checkAllAPIs();\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: monitoringResult,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    }\r\n\r\n    // Service-specific monitoring\r\n    if (action === 'check') {\r\n      const requestCount = Number.parseInt(searchParams.get('requests') ?? '1', 10);\r\n      const tokenCount = Number.parseInt(searchParams.get('tokens') ?? '0', 10);\r\n      \r\n      const canMakeRequest = APIMonitor.canMakeRequest(service, requestCount, tokenCount);\r\n      const usage = APIMonitor.getCurrentUsage(service);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        service,\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        canMakeRequest: canMakeRequest.allowed,\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        reason: canMakeRequest.reason,\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        waitTime: canMakeRequest.waitTime,\r\n        usage,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    }\r\n\r\n    // Get usage for specific service\r\n    const usage = APIMonitor.getCurrentUsage(service);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      service,\r\n      usage,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n     \r\n    console.error('API monitoring error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to get API monitoring data',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    const body = await request.json();\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    const { action } = body;\r\n\r\n    switch (action) {\r\n      case 'clear-alerts': {\r\n        APIMonitor.clearAlertHistory();\r\n        return NextResponse.json({\r\n          success: true,\r\n          message: 'Alert history cleared'\r\n        });\r\n      }\r\n\r\n      case 'get-alerts': {\r\n        const alerts = APIMonitor.getAlertHistory();\r\n        return NextResponse.json({\r\n          success: true,\r\n          alerts,\r\n          count: alerts.length\r\n        });\r\n      }\r\n\r\n      case 'test-alert': {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const { service, level } = body;\r\n        if (service == undefined || level == undefined) {\r\n          return NextResponse.json(\r\n            { success: false, error: 'Missing service or level' },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        // This would trigger a test alert in a real implementation\r\n        return NextResponse.json({\r\n          success: true,\r\n          message: `Test alert triggered for ${service} at ${level} level`\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json(\r\n          { success: false, error: `Unknown action: ${action}` },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n  } catch (error) {\r\n     \r\n    console.error('API monitoring POST error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Failed to process monitoring request',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\pipeline\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (78). Maximum allowed is 50.",
        "line": 25,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 102,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// app/api/pipeline/route.ts\r\n// Unified Pipeline API - Consolidates all pipeline functionality\r\n\r\n// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\r\nimport { type NextRequest, NextResponse } from 'next/server';\r\nimport { ScrapingJobService } from '@/lib/supabase';\r\nimport { pipelineManager, type PipelineConfig } from '@/lib/pipelineManager';\r\n\r\ninterface PipelineRequestBody {\r\n  action?: 'discovery' | 'processing' | 'full' | 'maintenance';\r\n  target_url?: string;\r\n  config?: {\r\n    maxUrls?: number;\r\n    maxUrlsToProcess?: number;\r\n    targetCities?: string[];\r\n    priority?: number;\r\n    skipDiscovery?: boolean;\r\n    retryFailedJobs?: boolean;\r\n  };\r\n  // Legacy support\r\n  job_type?: string;\r\n  priority?: number;\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = (await request.json()) as PipelineRequestBody;\r\n\r\n    // Handle legacy single URL scraping\r\n    if (body.target_url != undefined && body.action == undefined) {\r\n      const { target_url, job_type = 'website_scrape', priority = 1 } = body;\r\n\r\n      if (target_url == undefined || target_url === '') {\r\n        return NextResponse.json({ error: 'target_url is required' }, { status: 400 });\r\n      }\r\n\r\n      // Basic URL validation\r\n      try {\r\n        new URL(target_url);\r\n      } catch {\r\n        return NextResponse.json({ error: 'Invalid target_url format' }, { status: 400 });\r\n      }\r\n\r\n      // Create a scraping job using the centralized service\r\n      const job = await ScrapingJobService.createJob({\r\n        target_url,\r\n        job_type,\r\n        priority,\r\n        scheduled_at: new Date().toISOString(),\r\n      });\r\n\r\n      if (job == undefined) {\r\n        return NextResponse.json({ error: 'Failed to create scraping job' }, { status: 500 });\r\n      }\r\n\r\n      return NextResponse.json({\r\n        message: 'Scraping job created (legacy mode)',\r\n        job_id: job.id,\r\n        target_url,\r\n        note: 'Consider using the new unified pipeline API with action parameter',\r\n      });\r\n    }\r\n\r\n    // Handle unified pipeline requests\r\n    const { action = 'full', config = {} } = body;\r\n\r\n    const pipelineConfig: PipelineConfig = {\r\n      type: action,\r\n      params: {\r\n        maxUrls: config.maxUrls ?? 50,\r\n        maxUrlsToProcess: config.maxUrlsToProcess ?? 20,\r\n        targetCities: config.targetCities ?? ['Charleston', 'Columbia', 'Greenville'],\r\n        priority: config.priority ?? 5,\r\n        skipDiscovery: config.skipDiscovery ?? false,\r\n        retryFailedJobs: config.retryFailedJobs ?? false,\r\n      },\r\n    };\r\n\r\n    console.info(`≡ƒÜÇ Pipeline API: Starting ${action} pipeline with config:`, pipelineConfig);\r\n\r\n    const result = await pipelineManager.runPipeline(pipelineConfig);\r\n\r\n    return NextResponse.json({\r\n      success: result.success,\r\n      action,\r\n      result,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n  } catch (error: unknown) {\r\n    console.error('Pipeline API error:', error);\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown pipeline error';\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Pipeline processing failed',\r\n        details: errorMessage,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\scheduler\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'GET' has too many lines (69). Maximum allowed is 50.",
        "line": 88,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 156,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (72). Maximum allowed is 50.",
        "line": 158,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 229,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 205,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 205,
        "endColumn": 26,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\r\nimport { type NextRequest, NextResponse } from 'next/server';\r\n\r\n// Mock scheduler instance and tasks\r\ninterface SchedulerTask {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  intervalMinutes: number;\r\n  lastRun: string;\r\n  lastSuccess: string;\r\n  successCount: number;\r\n  errorCount: number;\r\n  nextRun: string | undefined;\r\n  lastError?: string;\r\n}\r\n\r\ninterface PostRequestBody {\r\n  action: 'start' | 'stop' | 'execute';\r\n  taskId?: string;\r\n}\r\n\r\ninterface PutRequestBody {\r\n  taskId: string;\r\n  config: Partial<SchedulerTask>;\r\n}\r\n\r\nlet schedulerInstance: { started: string } | undefined;\r\nconst schedulerTasks: SchedulerTask[] = [\r\n  {\r\n    id: 'instagram_scrape',\r\n    name: 'Instagram Data Scraping',\r\n    enabled: true,\r\n    intervalMinutes: 120,\r\n    lastRun: new Date(Date.now() - 1_800_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 1_800_000).toISOString(),\r\n    successCount: 45,\r\n    errorCount: 3,\r\n    nextRun: new Date(Date.now() + 5_400_000).toISOString(),\r\n  },\r\n  {\r\n    id: 'website_crawl',\r\n    name: 'Website Crawling',\r\n    enabled: true,\r\n    intervalMinutes: 360,\r\n    lastRun: new Date(Date.now() - 7_200_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 7_200_000).toISOString(),\r\n    successCount: 23,\r\n    errorCount: 1,\r\n    nextRun: new Date(Date.now() + 14_400_000).toISOString(),\r\n  },\r\n  {\r\n    id: 'data_quality_check',\r\n    name: 'Data Quality Assessment',\r\n    enabled: true,\r\n    intervalMinutes: 720,\r\n    lastRun: new Date(Date.now() - 21_600_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 21_600_000).toISOString(),\r\n    successCount: 12,\r\n    errorCount: 0,\r\n    nextRun: new Date(Date.now() + 21_600_000).toISOString(),\r\n  },\r\n  {\r\n    id: 'gemini_processing',\r\n    name: 'AI Data Processing',\r\n    enabled: false,\r\n    intervalMinutes: 480,\r\n    lastRun: new Date(Date.now() - 28_800_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 28_800_000).toISOString(),\r\n    successCount: 8,\r\n    errorCount: 2,\r\n    lastError: 'Rate limit exceeded',\r\n    nextRun: undefined,\r\n  },\r\n  {\r\n    id: 'location_update',\r\n    name: 'Real-time Location Updates',\r\n    enabled: true,\r\n    intervalMinutes: 30,\r\n    lastRun: new Date(Date.now() - 900_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 900_000).toISOString(),\r\n    successCount: 156,\r\n    errorCount: 8,\r\n    nextRun: new Date(Date.now() + 900_000).toISOString(),\r\n  },\r\n];\r\n\r\nexport function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const action = searchParams.get('action');\r\n\r\n  try {\r\n    switch (action) {\r\n      case 'status': {\r\n        return NextResponse.json({\r\n          isRunning: schedulerInstance !== undefined,\r\n          tasks: schedulerTasks,\r\n          summary: {\r\n            totalTasks: schedulerTasks.length,\r\n            enabledTasks: schedulerTasks.filter((t) => t.enabled).length,\r\n            runningTasks: schedulerTasks.filter((t) => t.enabled && t.nextRun !== undefined).length,\r\n            totalSuccesses: schedulerTasks.reduce((acc, t) => acc + t.successCount, 0),\r\n            totalErrors: schedulerTasks.reduce((acc, t) => acc + t.errorCount, 0),\r\n          },\r\n        });\r\n      }\r\n\r\n      case 'logs': {\r\n        // Return recent task execution logs\r\n        return NextResponse.json({\r\n          logs: [\r\n            {\r\n              timestamp: new Date(Date.now() - 300_000).toISOString(),\r\n              taskId: 'location_update',\r\n              level: 'info',\r\n              message: 'Successfully updated locations for 12 food trucks',\r\n            },\r\n            {\r\n              timestamp: new Date(Date.now() - 900_000).toISOString(),\r\n              taskId: 'instagram_scrape',\r\n              level: 'info',\r\n              message: 'Scraped 3 Instagram accounts, found 8 new posts',\r\n            },\r\n            {\r\n              timestamp: new Date(Date.now() - 1_800_000).toISOString(),\r\n              taskId: 'gemini_processing',\r\n              level: 'error',\r\n              message: 'Rate limit exceeded, skipping AI processing',\r\n            },\r\n            {\r\n              timestamp: new Date(Date.now() - 3_600_000).toISOString(),\r\n              taskId: 'website_crawl',\r\n              level: 'warning',\r\n              message: 'Failed to crawl tacoparadise.com - site temporarily unavailable',\r\n            },\r\n          ],\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json({\r\n          message: 'Task Scheduler API',\r\n          endpoints: [\r\n            'GET /api/scheduler?action=status - Get scheduler status',\r\n            'GET /api/scheduler?action=logs - Get execution logs',\r\n            'POST /api/scheduler - Start/stop scheduler or execute task',\r\n            'PUT /api/scheduler - Update task configuration',\r\n          ],\r\n        });\r\n      }\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Scheduler API error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = (await request.json()) as PostRequestBody;\r\n    const { action, taskId } = body;\r\n\r\n    switch (action) {\r\n      case 'start': {\r\n        if (schedulerInstance) {\r\n          return NextResponse.json({ error: 'Scheduler is already running' }, { status: 409 });\r\n        }\r\n\r\n        schedulerInstance = { started: new Date().toISOString() };\r\n\r\n        return NextResponse.json({\r\n          message: 'Scheduler started successfully',\r\n          status: 'running',\r\n        });\r\n      }\r\n\r\n      case 'stop': {\r\n        if (!schedulerInstance) {\r\n          return NextResponse.json({ error: 'Scheduler is not running' }, { status: 409 });\r\n        }\r\n\r\n        schedulerInstance = undefined;\r\n\r\n        return NextResponse.json({\r\n          message: 'Scheduler stopped successfully',\r\n          status: 'stopped',\r\n        });\r\n      }\r\n\r\n      case 'execute': {\r\n        if (taskId === undefined || taskId === '') {\r\n          return NextResponse.json({ error: 'Task ID is required for execution' }, { status: 400 });\r\n        }\r\n\r\n        const task = schedulerTasks.find((t) => t.id === taskId);\r\n        if (!task) {\r\n          return NextResponse.json({ error: 'Task not found' }, { status: 404 });\r\n        }\r\n\r\n        // Simulate task execution\r\n        task.lastRun = new Date().toISOString();\r\n\r\n        // Simulate success/failure\r\n        // eslint-disable-next-line sonarjs/pseudo-random\r\n        if (Math.random() > 0.1) {\r\n          // 90% success rate\r\n          task.lastSuccess = task.lastRun;\r\n          task.successCount++;\r\n          task.lastError = undefined;\r\n        } else {\r\n          task.errorCount++;\r\n          task.lastError = 'Simulated execution error';\r\n        }\r\n\r\n        return NextResponse.json({\r\n          message: `Task ${taskId} executed`,\r\n          task: task,\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });\r\n      }\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Error in scheduler POST:', error);\r\n    return NextResponse.json({ error: 'Failed to process request' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const body = (await request.json()) as PutRequestBody;\r\n    const { taskId, config } = body;\r\n\r\n    if (!taskId) {\r\n      return NextResponse.json({ error: 'Task ID is required' }, { status: 400 });\r\n    }\r\n\r\n    const taskIndex = schedulerTasks.findIndex((t) => t.id === taskId);\r\n    if (taskIndex === -1) {\r\n      return NextResponse.json({ error: 'Task not found' }, { status: 404 });\r\n    }\r\n\r\n    // Update task configuration\r\n    schedulerTasks[taskIndex] = {\r\n      ...schedulerTasks[taskIndex],\r\n      ...config,\r\n    };\r\n\r\n    // Update next run time if interval changed\r\n    if (config.intervalMinutes !== undefined && config.intervalMinutes > 0 && schedulerTasks[taskIndex].enabled) {\r\n      const lastRun = new Date(schedulerTasks[taskIndex].lastRun ?? Date.now());\r\n      const nextRun = new Date(lastRun.getTime() + config.intervalMinutes * 60 * 1000);\r\n      schedulerTasks[taskIndex].nextRun = nextRun.toISOString();\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: 'Task configuration updated',\r\n      task: schedulerTasks[taskIndex],\r\n    });\r\n  } catch (error: unknown) {\r\n    console.error('Error updating task configuration:', error);\r\n    return NextResponse.json({ error: 'Failed to update task configuration' }, { status: 500 });\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\scrape\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\search\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'GET' has too many lines (95). Maximum allowed is 50.",
        "line": 5,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 99,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { type NextRequest, NextResponse } from 'next/server';\r\nimport { CachedFoodTruckService } from '@/lib/performance/databaseCache';\r\nimport { MenuCategory, MenuItem, OperatingHours, type FoodTruck } from '@/lib/types';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const query = searchParams.get('q');\r\n  const cuisine = searchParams.get('cuisine');\r\n  const openNow = searchParams.get('openNow') === 'true';\r\n  const lat = searchParams.get('lat');\r\n  const lng = searchParams.get('lng');\r\n  const radius = searchParams.get('radius') ?? '10';\r\n\r\n  try {\r\n    let trucks: FoodTruck[] = [];\r\n\r\n    // Get trucks by location if coordinates provided\r\n    if (lat != undefined && lng != undefined) {\r\n      const userLat = Number.parseFloat(lat);\r\n      const userLng = Number.parseFloat(lng);\r\n      const radiusKm = Number.parseFloat(radius);\r\n      trucks = await CachedFoodTruckService.getTrucksByLocationCached(userLat, userLng, radiusKm);\r\n    } else {\r\n      // Get all trucks\r\n      const result = await CachedFoodTruckService.getAllTrucksCached();\r\n      trucks = result.trucks;\r\n    }\r\n\r\n    // Apply filters\r\n    let filteredTrucks = trucks;\r\n\r\n    // Text search filter\r\n    if (query != undefined && query !== '') {\r\n      filteredTrucks = filteredTrucks.filter(\r\n        (truck: FoodTruck) => truck.name.toLowerCase().includes(query.toLowerCase()) ||\r\n        truck.description?.toLowerCase().includes(query.toLowerCase()) ??\r\n        truck.menu?.some((category: MenuCategory) =>\r\n          category.items?.some(\r\n            (item: MenuItem) =>\r\n              item.name.toLowerCase().includes(query.toLowerCase()) ??\r\n              (item.description?.toLowerCase().includes(query.toLowerCase()) ?? false),\r\n          ) ?? false,\r\n        ) ?? false,\r\n      );\r\n    }\r\n\r\n    // Cuisine filter\r\n    if (cuisine != undefined && cuisine != '') {\r\n      filteredTrucks = filteredTrucks.filter((truck: FoodTruck) => truck.menu?.some((category: MenuCategory) =>\r\n        category.name.toLowerCase().includes(cuisine.toLowerCase()),\r\n      ),\r\n      );\r\n    }\r\n\r\n    // Open now filter\r\n    if (openNow === true) {\r\n      const now = new Date();\r\n      const daysOfWeek: Array<keyof OperatingHours> = [\r\n        'sunday',\r\n        'monday',\r\n        'tuesday',\r\n        'wednesday',\r\n        'thursday',\r\n        'friday',\r\n        'saturday',\r\n      ];\r\n      const currentDay = daysOfWeek[now.getDay()];\r\n      const currentTime = now.getHours() * 100 + now.getMinutes();\r\n\r\n      filteredTrucks = filteredTrucks.filter((truck: FoodTruck) => {\r\n        const hours = truck.operating_hours?.[currentDay];\r\n        if (!hours || hours.closed) return false;\r\n\r\n        const openTime = Number.parseInt(hours.open.replace(':', ''));\r\n        const closeTime = Number.parseInt(hours.close.replace(':', ''));\r\n        return currentTime >= openTime && currentTime <= closeTime;\r\n      });\r\n    }\r\n\r\n    // Sort by data quality score\r\n    filteredTrucks.sort((a: FoodTruck, b: FoodTruck) => (b.data_quality_score ?? 0) - (a.data_quality_score ?? 0));\r\n\r\n    return NextResponse.json({\r\n      trucks: filteredTrucks,\r\n      total: filteredTrucks.length,\r\n      filters: {\r\n        query,\r\n        cuisine,\r\n        openNow,\r\n        location:\r\n          lat != undefined && lng != undefined ? { lat: Number.parseFloat(lat), lng: Number.parseFloat(lng) } : undefined,\r\n        radius: Number.parseFloat(radius),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Search error:', error);\r\n    return NextResponse.json({ error: 'Search failed' }, { status: 500 });\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\tavily\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'performTavilySearch' has too many lines (58). Maximum allowed is 50.",
        "line": 67,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 124,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// app/api/tavily/route.ts\r\n// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\ninterface TavilyRequestBody {\r\n  operation: string;\r\n  params: Record<string, unknown>;\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = (await request.json()) as TavilyRequestBody;\r\n    const { operation, params } = body;\r\n\r\n    if (operation == undefined || params == undefined) {\r\n      return NextResponse.json({ error: 'Missing operation or params' }, { status: 400 });\r\n    }\r\n\r\n    let result;\r\n\r\n    switch (operation) {\r\n      case 'search': {\r\n        // Use Tavily MCP search tool through server-side execution\r\n        // This would be called from the discovery engine\r\n        result = performTavilySearch(params);\r\n        break;\r\n      }\r\n\r\n      case 'crawl': {\r\n        result = performTavilyCrawl(params);\r\n        break;\r\n      }\r\n\r\n      case 'map': {\r\n        result = performTavilyMap(params);\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json({ error: `Unknown operation: ${operation}` }, { status: 400 });\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({ success: true, data: result });\r\n  } catch (error) {\r\n    console.error('Tavily API error:', error);\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\n// These functions would use the Tavily MCP tools\r\n// For now, they return mock data - in production these would be actual MCP calls\r\n\r\ninterface TavilyResult {\r\n  title: string;\r\n  url: string;\r\n  content: string;\r\n  raw_content: string;\r\n}\r\n\r\nfunction performTavilySearch(params: Record<string, unknown>) {\r\n  const apiKey = process.env.TAVILY_API_KEY;\r\n  if (apiKey === undefined || apiKey === '') {\r\n    console.warn('TAVILY_API_KEY not found, using mock data');\r\n    return {\r\n      results: [\r\n        {\r\n          title: 'South Carolina Food Trucks (Mock)',\r\n          url: 'https://example-foodtruck1.com',\r\n          content:\r\n            'Check out the best food trucks in South Carolina. Visit https://carolinabbq.com for amazing BBQ on wheels.',\r\n          raw_content: 'Carolina BBQ Food Truck serves authentic South Carolina barbecue...',\r\n        },\r\n        {\r\n          title: 'Charleston Mobile Food Directory (Mock)',\r\n          url: 'https://example-directory.com',\r\n          content:\r\n            'Directory of Charleston area food trucks including https://charlestontacos.com and https://lowcountryeats.com',\r\n          raw_content: 'Complete listing of mobile food vendors in the Charleston area...',\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  try {\r\n    const response = await fetch('https://api.tavily.com/search', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n      body: JSON.stringify({\r\n        query: (params.query as string) ?? (params.q as string),\r\n        max_results: (params.limit as number) ?? 10,\r\n        search_depth: (params.search_depth as string) ?? 'advanced',\r\n        include_answer: true,\r\n        include_raw_content: true,\r\n      }),\r\n    });\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('Tavily API error response:', errorText);\r\n      throw new Error(`Tavily API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n    }\r\n    const data = (await response.json()) as { results?: TavilyResult[] };\r\n    return {\r\n      results:\r\n        data.results?.map((result: TavilyResult) => ({\r\n          title: result.title,\r\n          url: result.url,\r\n          content: result.content,\r\n          raw_content: result.raw_content,\r\n        })) ?? [],\r\n    };\r\n  } catch (error) {\r\n    console.error('Tavily API call failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction performTavilyCrawl(params: Record<string, unknown>) {\r\n  console.info('Mock Tavily crawl with params:', params);\r\n\r\n  return {\r\n    results: [\r\n      {\r\n        url: 'https://example-crawled-truck.com',\r\n        title: 'Gourmet Food Truck',\r\n        content: 'Premium mobile dining experience...',\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nfunction performTavilyMap(params: Record<string, unknown>) {\r\n  console.info('Mock Tavily map with params:', params);\r\n\r\n  return {\r\n    results: ['https://foodtruckdirectory.com/truck1', 'https://foodtruckdirectory.com/truck2'],\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\test-integration\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'POST' has too many lines (124). Maximum allowed is 50.",
        "line": 7,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 130,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\r\nimport { type NextRequest, NextResponse } from 'next/server';\r\nimport { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { FoodTruckService, ScrapingJobService, DataProcessingService } from '@/lib/supabase';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = (await request.json()) as { testUrl?: string };\r\n    const { testUrl = 'https://example-food-truck.com' } = body;\r\n\r\n    console.info('Starting integration test...');\r\n\r\n    // Step 1: Test Firecrawl scraping\r\n    console.info('Testing Firecrawl scraping...');\r\n    const scrapeResult = await firecrawl.scrapeUrl(testUrl, {\r\n      formats: ['markdown'],\r\n      onlyMainContent: true,\r\n    });\r\n\r\n    if (!scrapeResult.success) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Firecrawl test failed',\r\n        details: scrapeResult.error,\r\n      });\r\n    } // Step 2: Test Gemini processing\r\n    console.info('Testing Gemini processing...');\r\n    const testMenuText =\r\n      'Burgers: Classic Burger $12.99, Veggie Burger $11.99. Sides: Fries $4.99, Onion Rings $5.99';\r\n\r\n    const geminiResult = await gemini.processMenuData(testMenuText);\r\n\r\n    if (!geminiResult.success) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Gemini test failed',\r\n        details: geminiResult.error,\r\n      });\r\n    } // Step 3: Test Supabase operations\r\n    console.info('Testing Supabase operations...');\r\n\r\n    // Create a test food truck\r\n    const testTruck = await FoodTruckService.createTruck({\r\n      name: 'Test Food Truck',\r\n      description: 'Integration test truck',\r\n      current_location: {\r\n        lat: 37.7749,\r\n        lng: -122.4194,\r\n        address: 'San Francisco, CA',\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n      scheduled_locations: [],\r\n      operating_hours: {\r\n        monday: { closed: true },\r\n        tuesday: { closed: true },\r\n        wednesday: { closed: true },\r\n        thursday: { closed: true },\r\n        friday: { closed: true },\r\n        saturday: { closed: true },\r\n        sunday: { closed: true },\r\n      },\r\n      menu: geminiResult.data ?? [],\r\n      contact_info: { phone: '+1-555-TEST', email: undefined, website: undefined },\r\n      social_media: {\r\n        instagram: undefined,\r\n        facebook: undefined,\r\n        twitter: undefined,\r\n        tiktok: undefined,\r\n        yelp: undefined,\r\n      },\r\n      source_urls: [testUrl],\r\n      data_quality_score: 0.8,\r\n      verification_status: 'pending',\r\n    });\r\n\r\n    // Create a test scraping job\r\n    const testJob = await ScrapingJobService.createJob({\r\n      job_type: 'integration_test',\r\n      target_url: testUrl,\r\n      priority: 10,\r\n      scheduled_at: new Date().toISOString(),\r\n    });\r\n\r\n    // Add to processing queue\r\n    const queueItem = await DataProcessingService.addToQueue({\r\n      truck_id: testTruck.id,\r\n      processing_type: 'integration_test',\r\n      raw_data: { test: true },\r\n      priority: 10,\r\n    });\r\n\r\n    // Step 4: Test geospatial query\r\n    const nearbyTrucks = await FoodTruckService.getTrucksByLocation(37.7749, -122.4194, 10);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Integration test completed successfully',\r\n      results: {\r\n        firecrawl: {\r\n          success: scrapeResult.success,\r\n          dataLength: scrapeResult.data?.markdown?.length ?? 0,\r\n        },\r\n        gemini: {\r\n          success: geminiResult.success,\r\n          tokensUsed: geminiResult.tokensUsed,\r\n          categoriesFound: geminiResult.data?.length ?? 0,\r\n        },\r\n        supabase: {\r\n          truckCreated: testTruck.id,\r\n          jobCreated: testJob.id,\r\n          queueItemCreated: queueItem.id,\r\n          nearbyTrucksFound: nearbyTrucks.length,\r\n        },\r\n      },\r\n      testData: {\r\n        truck: testTruck,\r\n        processedMenu: geminiResult.data,\r\n        nearbyTrucks: nearbyTrucks.slice(0, 3),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Integration test failed:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Integration test failed',\r\n      details: error instanceof Error ? error.message : 'Unknown error',\r\n    });\r\n  }\r\n}\r\n\r\nexport function GET() {\r\n  return NextResponse.json({\r\n    message: 'Food Truck Integration Test API',\r\n    description: 'Tests the complete integration of Supabase, Firecrawl, and Gemini',\r\n    usage: \"POST /api/test-integration with optional { testUrl: 'https://example.com' }\",\r\n  });\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\test-pipeline-run\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'mapExtractedDataToTruckSchema' has too many lines (54). Maximum allowed is 50.",
        "line": 18,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 71,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'handleFirecrawlStage' has too many lines (58). Maximum allowed is 50.",
        "line": 73,
        "column": 1,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 130,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'POST' has too many lines (98). Maximum allowed is 50.",
        "line": 214,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 311,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\r\nimport { NextResponse, NextRequest } from 'next/server';\r\nimport { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { FoodTruckService } from '@/lib/supabase';\r\nimport {\r\n  ExtractedFoodTruckDetails,\r\n  FoodTruckSchema,\r\n  FirecrawlOutputData,\r\n  GeminiResponse,\r\n  StageResult,\r\n  MenuCategory,\r\n  MenuItem,\r\n} from '@/lib/types';\r\n\r\n// Helper function to simulate parts of createOrUpdateFoodTruck for dry runs or direct mapping display\r\n// This is a simplified version for testing; actual createOrUpdateFoodTruck handles job IDs etc.\r\nfunction mapExtractedDataToTruckSchema(\r\n  extractedData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n  isDryRun: boolean,\r\n): FoodTruckSchema {\r\n  if (extractedData == undefined || typeof extractedData !== 'object') {\r\n    throw new Error('Invalid extractedData for mapping.');\r\n  }\r\n\r\n  const name = extractedData.name ?? 'Unknown Test Truck';\r\n  const locationData = extractedData.current_location ?? {};\r\n  const fullAddress = [\r\n    locationData.address,\r\n    locationData.city,\r\n    locationData.state,\r\n    locationData.zip_code,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(', ');\r\n\r\n  const truckData: FoodTruckSchema = {\r\n    name: name,\r\n    description: extractedData.description ?? undefined,\r\n    current_location: {\r\n      lat: locationData.lat ?? 0,\r\n      lng: locationData.lng ?? 0,\r\n      address: fullAddress ?? (locationData.raw_text ?? undefined),\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n    scheduled_locations: extractedData.scheduled_locations ?? undefined,\r\n    operating_hours: extractedData.operating_hours ?? undefined,\r\n    menu: (extractedData.menu ?? []).map((category: MenuCategory) => ({\r\n      name: category.name ?? 'Uncategorized',\r\n      items: (category.items ?? []).map((item: MenuItem) => ({\r\n        name: item.name ?? 'Unknown Item',\r\n        description: item.description ?? undefined,\r\n        price:\r\n          typeof item.price === 'number' || typeof item.price === 'string' ? item.price : undefined,\r\n        dietary_tags: item.dietary_tags ?? [],\r\n      })),\r\n    })),\r\n    contact_info: extractedData.contact_info ?? undefined,\r\n    social_media: extractedData.social_media ?? undefined,\r\n    cuisine_type: extractedData.cuisine_type ?? [],\r\n    price_range: extractedData.price_range ?? undefined,\r\n    specialties: extractedData.specialties ?? [],\r\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\r\n    verification_status: 'pending',\r\n    source_urls: [sourceUrl].filter(Boolean),\r\n    last_scraped_at: new Date().toISOString(),\r\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\r\n  };\r\n  return truckData;\r\n}\r\n\r\nasync function handleFirecrawlStage(\r\n  url: string,\r\n  rawText: string | undefined,\r\n  logs: string[],\r\n): Promise<{\r\n  firecrawlResult: StageResult;\r\n  contentToProcess: string | undefined;\r\n  sourceUrlForProcessing: string;\r\n}> {\r\n  let firecrawlResult: StageResult;\r\n  let contentToProcess: string | undefined;\r\n  let sourceUrlForProcessing: string = url ?? 'raw_text_input';\r\n\r\n  if (url != undefined && url != '' && (rawText == undefined || rawText == '')) {\r\n    logs.push(`Starting Firecrawl scrape for URL: ${url}`);\r\n    try {\r\n      const fcOutput: GeminiResponse<FirecrawlOutputData> =\r\n        await firecrawl.scrapeFoodTruckWebsite(url);\r\n      if (fcOutput.success && fcOutput.data?.markdown != undefined && fcOutput.data.markdown != '') {\r\n        contentToProcess = fcOutput.data.markdown;\r\n        sourceUrlForProcessing = fcOutput.data.source_url ?? url;\r\n        firecrawlResult = {\r\n          status: 'Success',\r\n          rawContent: fcOutput.data.markdown,\r\n          metadata: { name: fcOutput.data.name, source_url: fcOutput.data.source_url },\r\n          details: `Markdown length: ${fcOutput.data.markdown.length}`,\r\n        };\r\n        logs.push('Firecrawl scrape successful.');\r\n      } else {\r\n        throw new Error(fcOutput.error ?? 'Firecrawl failed to return markdown.');\r\n      }\r\n    } catch (error: unknown) {\r\n      const errorMessage =\r\n        error instanceof Error\r\n          ? error.message\r\n          : 'An unknown error occurred during Firecrawl scrape.';\r\n      logs.push(`Firecrawl error: ${errorMessage}`);\r\n      firecrawlResult = { status: 'Error', error: errorMessage };\r\n    }\r\n  } else if (rawText != undefined && rawText != '') {\r\n    logs.push('Using raw text input for processing.');\r\n    contentToProcess = rawText;\r\n    firecrawlResult = {\r\n      status: 'Skipped (Raw Text Provided)',\r\n      details: `Raw text length: ${rawText.length}`,\r\n    };\r\n  } else {\r\n    logs.push('No URL or raw text provided.');\r\n    throw new Error('Either a URL or raw text must be provided for testing.');\r\n  }\r\n\r\n  if (contentToProcess == undefined || contentToProcess == '') {\r\n    logs.push('Content to process is empty after Firecrawl/raw text stage.');\r\n    throw new Error('Content to process is empty.');\r\n  }\r\n\r\n  return { firecrawlResult, contentToProcess, sourceUrlForProcessing };\r\n}\r\n\r\nasync function handleGeminiStage(\r\n  contentToProcess: string,\r\n  sourceUrlForProcessing: string,\r\n  logs: string[],\r\n): Promise<{ geminiResult: StageResult; extractedData: ExtractedFoodTruckDetails | undefined }> {\r\n  let geminiResult: StageResult;\r\n  let extractedData: ExtractedFoodTruckDetails | undefined;\r\n\r\n  logs.push('Starting Gemini processing.');\r\n  try {\r\n    const geminiOutput: GeminiResponse<ExtractedFoodTruckDetails> =\r\n      await gemini.extractFoodTruckDetailsFromMarkdown(contentToProcess, sourceUrlForProcessing);\r\n    if (geminiOutput.success && geminiOutput.data) {\r\n      extractedData = geminiOutput.data;\r\n      geminiResult = {\r\n        status: 'Success',\r\n        data: geminiOutput.data,\r\n        tokensUsed: geminiOutput.tokensUsed,\r\n        prompt: geminiOutput.promptSent,\r\n        details: 'Gemini extraction successful.',\r\n      };\r\n      logs.push('Gemini processing successful.');\r\n    } else {\r\n      throw new Error(geminiOutput.error ?? 'Gemini processing failed to return data.');\r\n    }\r\n  } catch (error: unknown) {\r\n    const errorMessage =\r\n      error instanceof Error\r\n        ? error.message\r\n        : 'An unknown error occurred during Gemini processing.';\r\n    logs.push(`Gemini error: ${errorMessage}`);\r\n    geminiResult = { status: 'Error', error: errorMessage };\r\n  }\r\n  return { geminiResult, extractedData };\r\n}\r\n\r\nasync function handleSupabaseStage(\r\n  extractedData: ExtractedFoodTruckDetails,\r\n  sourceUrlForProcessing: string,\r\n  isDryRun: boolean,\r\n  logs: string[],\r\n): Promise<StageResult> {\r\n  let supabaseResult: StageResult = { status: 'Skipped' };\r\n\r\n  logs.push('Preparing for Supabase interaction.');\r\n  try {\r\n    const truckDataToSave = mapExtractedDataToTruckSchema(\r\n      extractedData,\r\n      sourceUrlForProcessing,\r\n      isDryRun,\r\n    );\r\n    supabaseResult = { status: 'Prepared', preparedData: truckDataToSave };\r\n\r\n    if (isDryRun) {\r\n      supabaseResult.status = 'Success (Dry Run)';\r\n      supabaseResult.details = 'Dry Run: Data was prepared but not saved.';\r\n      logs.push('Supabase interaction skipped (Dry Run).');\r\n    } else {\r\n      logs.push('Attempting to save to Supabase (Dry Run is FALSE).');\r\n      const createdTruck = await FoodTruckService.createTruck(truckDataToSave);\r\n      if (createdTruck == undefined) {\r\n        throw new Error('Failed to create truck in Supabase.');\r\n      }\r\n      supabaseResult = {\r\n        status: 'Success (Saved)',\r\n        preparedData: truckDataToSave,\r\n        recordId: createdTruck.id,\r\n        details: `Truck data saved with ID: ${createdTruck.id}`,\r\n      };\r\n      logs.push(`Data saved to Supabase. Record ID: ${createdTruck.id}`);\r\n    }\r\n  } catch (error: unknown) {\r\n    const errorMessage =\r\n      error instanceof Error\r\n        ? error.message\r\n        : 'An unknown error occurred during Supabase interaction.';\r\n    logs.push(`Supabase interaction error: ${errorMessage}`);\r\n    supabaseResult = { ...supabaseResult, status: 'Error', error: errorMessage };\r\n  }\r\n  return supabaseResult;\r\n}\r\n\r\nexport function POST(request: NextRequest) {\r\n  const logs: string[] = [];\r\n  logs.push('Test pipeline run started.');\r\n\r\n  let firecrawlResult: StageResult = { status: 'Incomplete' };\r\n  let geminiResult: StageResult = { status: 'Incomplete' };\r\n  let supabaseResult: StageResult = { status: 'Incomplete' };\r\n  let overallStatus = 'Incomplete';\r\n\r\n  try {\r\n    const body = (await request.json()) as { url?: string; rawText?: string; isDryRun?: boolean };\r\n    const { url, rawText, isDryRun = true } = body;\r\n    logs.push(`Request body: ${JSON.stringify(body)}`);\r\n\r\n    const firecrawlStageOutput = await handleFirecrawlStage(url ?? '', rawText, logs);\r\n    firecrawlResult = firecrawlStageOutput.firecrawlResult;\r\n    const { contentToProcess, sourceUrlForProcessing } = firecrawlStageOutput;\r\n\r\n    if (firecrawlResult.status === 'Error') {\r\n      overallStatus = 'Error';\r\n      return NextResponse.json(\r\n        { results: { firecrawl: firecrawlResult, logs, overallStatus } },\r\n        { status: 200 },\r\n      );\r\n    }\r\n\r\n    const geminiStageOutput = await handleGeminiStage(\r\n      contentToProcess!,\r\n      sourceUrlForProcessing,\r\n      logs,\r\n    );\r\n    geminiResult = geminiStageOutput.geminiResult;\r\n    const { extractedData } = geminiStageOutput;\r\n\r\n    if (geminiResult.status === 'Error' || !extractedData) {\r\n      overallStatus = 'Error';\r\n      return NextResponse.json(\r\n        { results: { firecrawl: firecrawlResult, gemini: geminiResult, logs, overallStatus } },\r\n        { status: 200 },\r\n      );\r\n    }\r\n\r\n    supabaseResult = await handleSupabaseStage(\r\n      extractedData,\r\n      sourceUrlForProcessing,\r\n      isDryRun,\r\n      logs,\r\n    );\r\n\r\n    if (supabaseResult.status === 'Error') {\r\n      overallStatus = 'Error';\r\n      return NextResponse.json(\r\n        {\r\n          results: {\r\n            firecrawl: firecrawlResult,\r\n            gemini: geminiResult,\r\n            supabase: supabaseResult,\r\n            logs,\r\n            overallStatus,\r\n          },\r\n        },\r\n        { status: 200 },\r\n      );\r\n    }\r\n\r\n    overallStatus = 'Success';\r\n    logs.push('Test pipeline run completed successfully.');\r\n    return NextResponse.json({\r\n      results: {\r\n        firecrawl: firecrawlResult,\r\n        gemini: geminiResult,\r\n        supabase: supabaseResult,\r\n        logs,\r\n        overallStatus,\r\n      },\r\n    });\r\n  } catch (error: unknown) {\r\n    const errorMessage =\r\n      error instanceof Error\r\n        ? error.message\r\n        : 'An unknown error occurred during overall test pipeline run.';\r\n    logs.push(`Overall test pipeline error: ${errorMessage}`);\r\n    return NextResponse.json(\r\n      {\r\n        message: 'Test pipeline run failed.',\r\n        error: errorMessage,\r\n        results: {\r\n          firecrawl: firecrawlResult,\r\n          gemini: geminiResult,\r\n          supabase: supabaseResult,\r\n          logs,\r\n          overallStatus: 'Error',\r\n        },\r\n      },\r\n      { status: 200 },\r\n    );\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\[id]\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'GET' has too many lines (59). Maximum allowed is 50.",
        "line": 7,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 65,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\r\nimport { type NextRequest, NextResponse } from 'next/server';\r\nimport { FoodTruckService } from '@/lib/supabase';\r\n// @ts-expect-error TS(2792): Cannot find module 'zod'. Did you mean to set the ... Remove this comment to see the full error message\r\nimport { z, type infer as ZInfer } from 'zod';\r\n\r\nexport function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const id = searchParams.get('id');\r\n  const lat = searchParams.get('lat');\r\n  const lng = searchParams.get('lng');\r\n  const radius = searchParams.get('radius') ?? '5';\r\n  const limit = Number.parseInt(searchParams.get('limit') ?? '50');\r\n  const offset = Number.parseInt(searchParams.get('offset') ?? '0');\r\n\r\n  try {\r\n    // Get specific truck by ID\r\n    if (id != undefined && id != '') {\r\n      const truck = await FoodTruckService.getTruckById(id);\r\n      return NextResponse.json({ truck });\r\n    }\r\n\r\n    // Get trucks by location\r\n    if (lat != undefined && lat != '' && lng != undefined && lng != '') {\r\n      const userLat = Number.parseFloat(lat);\r\n      const userLng = Number.parseFloat(lng);\r\n      const radiusKm = Number.parseFloat(radius);\r\n\r\n      const nearbyTrucks = await FoodTruckService.getTrucksByLocation(userLat, userLng, radiusKm);\r\n\r\n      return NextResponse.json({\r\n        trucks: nearbyTrucks,\r\n        total: nearbyTrucks.length,\r\n        limit,\r\n        offset,\r\n        hasMore: false, // Location-based queries don't use pagination\r\n      });\r\n    }\r\n\r\n    // Get all trucks with pagination\r\n    const { trucks, total } = await FoodTruckService.getAllTrucks(limit, offset);\r\n\r\n    return NextResponse.json({\r\n      trucks,\r\n      total,\r\n      limit,\r\n      offset,\r\n      hasMore: offset + limit < (total ?? 0),\r\n      summary: {\r\n        totalTrucks: total,\r\n        averageQuality:\r\n          trucks != undefined && trucks.length > 0\r\n            ? trucks.reduce((acc, t) => acc + (t.data_quality_score ?? 0), 0) / trucks.length\r\n            : 0,\r\n        lastUpdated:\r\n          trucks != undefined && trucks.length > 0\r\n            ? Math.max(...trucks.map((t) => new Date(t.updated_at).getTime()))\r\n            : 0,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching food trucks:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nconst MenuItemSchema = z.object({\r\n  name: z.string(),\r\n  description: z.string().optional().default(''),\r\n  price: z.union([z.number(), z.string()]).optional().default(0),\r\n  dietary_tags: z.array(z.string()).optional().default([]),\r\n});\r\n\r\nconst MenuCategorySchema = z.object({\r\n  name: z.string(),\r\n  items: z.array(MenuItemSchema),\r\n});\r\n\r\nconst FoodTruckSchema = z.object({\r\n  name: z.string().min(1, 'Name is required'),\r\n  description: z.string().optional(),\r\n  current_location: z\r\n    .object({\r\n      lat: z.number(),\r\n      lng: z.number(),\r\n      address: z.string(),\r\n      timestamp: z.string().datetime().optional().default(new Date().toISOString()),\r\n    })\r\n    .optional(),\r\n  scheduled_locations: z\r\n    .array(\r\n      z.object({\r\n        address: z.string().optional(),\r\n        city: z.string().optional(),\r\n        state: z.string().optional(),\r\n        zip_code: z.string().optional(),\r\n        lat: z.number().optional(),\r\n        lng: z.number().optional(),\r\n        timestamp: z.string().datetime(),\r\n        start_time: z.string().datetime(),\r\n        end_time: z.string().datetime(),\r\n      }),\r\n    )\r\n    .optional()\r\n    .default([]),\r\n  operating_hours: z\r\n    .object({\r\n      monday: z\r\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\r\n        .or(z.object({ closed: z.literal(true) }))\r\n        .default({ closed: true }),\r\n      tuesday: z\r\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\r\n        .or(z.object({ closed: z.literal(true) }))\r\n        .default({ closed: true }),\r\n      wednesday: z\r\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\r\n        .or(z.object({ closed: z.literal(true) }))\r\n        .default({ closed: true }),\r\n      thursday: z\r\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\r\n        .or(z.object({ closed: z.literal(true) }))\r\n        .default({ closed: true }),\r\n      friday: z\r\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\r\n        .or(z.object({ closed: z.literal(true) }))\r\n        .default({ closed: true }),\r\n      saturday: z\r\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\r\n        .or(z.object({ closed: z.literal(true) }))\r\n        .default({ closed: true }),\r\n      sunday: z\r\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\r\n        .or(z.object({ closed: z.literal(true) }))\r\n        .default({ closed: true }),\r\n    })\r\n    .optional()\r\n    .default({\r\n      monday: { closed: true },\r\n      tuesday: { closed: true },\r\n      wednesday: { closed: true },\r\n      thursday: { closed: true },\r\n      friday: { closed: true },\r\n      saturday: { closed: true },\r\n      sunday: { closed: true },\r\n    }),\r\n  menu: z.array(MenuCategorySchema).optional().default([]),\r\n  contact_info: z\r\n    .object({\r\n      email: z.string().email().optional(),\r\n      phone: z.string().optional(),\r\n      website: z.string().url().optional(),\r\n    })\r\n    .optional(),\r\n  social_media: z\r\n    .object({\r\n      instagram: z.string().optional(),\r\n      facebook: z.string().optional(),\r\n      twitter: z.string().optional(),\r\n      tiktok: z.string().optional(),\r\n      yelp: z.string().optional(),\r\n    })\r\n    .optional()\r\n    .default({}),\r\n  source_urls: z.array(z.string().url()).optional().default([]),\r\n  data_quality_score: z.number().min(0).max(1).optional().default(0.5),\r\n  verification_status: z.enum(['pending', 'verified', 'rejected']).optional().default('pending'),\r\n});\r\n\r\nconst UpdateFoodTruckSchema = FoodTruckSchema.partial().extend({\r\n  id: z.string().uuid('Invalid truck ID format').min(1, 'Truck ID is required'),\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = (await request.json()) as ZInfer<typeof FoodTruckSchema>;\r\n    const validatedData = FoodTruckSchema.parse(body);\r\n\r\n    const newTruck = await FoodTruckService.createTruck(validatedData);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        message: 'Food truck created successfully',\r\n        truck: newTruck,\r\n      },\r\n      { status: 201 },\r\n    );\r\n  } catch (error) {\r\n    console.error('Error creating food truck:', error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: error.errors }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ error: 'Failed to create food truck' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const body = (await request.json()) as ZInfer<typeof UpdateFoodTruckSchema>;\r\n    const validatedData = UpdateFoodTruckSchema.parse(body);\r\n    const { id, ...updates } = validatedData;\r\n\r\n    const updatedTruck = await FoodTruckService.updateTruck(id, updates);\r\n\r\n    return NextResponse.json({\r\n      message: 'Food truck updated successfully',\r\n      truck: updatedTruck,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating food truck:', error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: error.errors }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ error: 'Failed to update food truck' }, { status: 500 });\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\auth\\AuthProvider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\auth\\callback\\route.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'GET' has too many lines (93). Maximum allowed is 50.",
        "line": 8,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 100,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\n// @ts-expect-error TS(2792): Cannot find module '@/lib/security/rateLimiter'. D... Remove this comment to see the full error message\r\nimport { RateLimiter, getClientIdentifier } from '@/lib/security/rateLimiter';\r\nimport { AuditLogger } from '@/lib/security/auditLogger';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  // Apply rate limiting to auth callback\r\n  const identifier = getClientIdentifier(request);\r\n  const rateLimitResult = RateLimiter.checkRateLimit(identifier, 'auth');\r\n\r\n  if (!rateLimitResult.allowed) {\r\n    await AuditLogger.logSecurityEvent({\r\n      event_type: 'login_failure',\r\n      ip_address: identifier.split(':')[0],\r\n      user_agent: request.headers.get('user-agent') ?? 'unknown',\r\n      details: {\r\n        reason: 'rate_limit_exceeded',\r\n        retryAfter: rateLimitResult.retryAfter\r\n      },\r\n      severity: 'warning'\r\n    });\r\n\r\n    return NextResponse.redirect(`${new URL(request.url).origin}/login?error=rate_limit`);\r\n  }\r\n\r\n  const { searchParams, origin } = new URL(request.url);\r\n  const code = searchParams.get('code');\r\n  const redirectTo = searchParams.get('redirectTo') ?? '/admin';\r\n\r\n  if (code != undefined && code != '') {\r\n    const { error } = await supabase.auth.exchangeCodeForSession(code);\r\n\r\n    if (error) {\r\n      // Log authentication failure\r\n      await AuditLogger.logAuthEvent(\r\n        'login_failure',\r\n        undefined,\r\n        undefined,\r\n        {\r\n          ip: identifier.split(':')[0],\r\n          userAgent: request.headers.get('user-agent') ?? 'unknown'\r\n        },\r\n        { provider: 'google', error: error.message }\r\n      );\r\n    } else {\r\n      // Check if user has admin role\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n\r\n      if (user) {\r\n        const { data: profile } = await supabase\r\n          .from('profiles')\r\n          .select('role')\r\n          .eq('id', user.id)\r\n          .single();\r\n\r\n        // Log successful authentication\r\n        await AuditLogger.logAuthEvent(\r\n          'login_success',\r\n          user.email,\r\n          user.id,\r\n          {\r\n            ip: identifier.split(':')[0],\r\n            userAgent: request.headers.get('user-agent') ?? 'unknown'\r\n          },\r\n          { provider: 'google', role: profile?.role }\r\n        );\r\n\r\n        // Record successful auth for rate limiting\r\n        RateLimiter.recordSuccess(identifier, 'auth');\r\n\r\n        if (profile?.role === 'admin') {\r\n          return NextResponse.redirect(`${origin}${redirectTo}`);\r\n        } else {\r\n          // Log unauthorized access attempt\r\n          await AuditLogger.logSecurityEvent({\r\n            event_type: 'permission_denied',\r\n            user_id: user.id,\r\n            user_email: user.email,\r\n            ip_address: identifier.split(':')[0],\r\n            user_agent: request.headers.get('user-agent') ?? 'unknown',\r\n            details: {\r\n              reason: 'insufficient_role',\r\n              user_role: profile?.role ?? 'none'\r\n            },\r\n            severity: 'warning'\r\n          });\r\n\r\n          return NextResponse.redirect(`${origin}/access-denied`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // If there was an error or no code, redirect to login\r\n  return NextResponse.redirect(`${origin}/login`);\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\login\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'LoginPage' has too many lines (170). Maximum allowed is 50.",
        "line": 13,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 182,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useRouter, useSearchParams } from 'next/navigation';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Loader2, Shield, Mail } from 'lucide-react';\r\n\r\nexport default function LoginPage() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string>();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n  const redirectTo = searchParams.get('redirectedFrom') ?? '/admin';\r\n\r\n  const handleEmailLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      setLoading(true);\r\n      setError(undefined);\r\n\r\n      const { error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Check if user has admin role\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n\r\n      if (user) {\r\n        const { data: profile } = await supabase\r\n          .from('profiles')\r\n          .select('role')\r\n          .eq('id', user.id)\r\n          .single();\r\n\r\n        if (profile?.role === 'admin') {\r\n          router.push(redirectTo);\r\n        } else {\r\n          // User exists but is not admin - redirect to access denied\r\n          router.push('/access-denied');\r\n        }\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error('Login error:', error);\r\n      setError(error instanceof Error ? error.message : 'An error occurred during login');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleGoogleLogin = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(undefined);\r\n\r\n      const { error } = await supabase.auth.signInWithOAuth({\r\n        provider: 'google',\r\n        options: {\r\n          redirectTo: `${globalThis.location.origin}/auth/callback?redirectTo=${encodeURIComponent(redirectTo)}`,\r\n        },\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error('Login error:', error);\r\n      setError(error instanceof Error ? error.message : 'An error occurred during login');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-background to-secondary/20 p-4\">\r\n      <Card className=\"w-full max-w-md\">\r\n        {' '}\r\n        <CardHeader className=\"text-center\">\r\n          <div className=\"mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-primary/10\">\r\n            <Shield className=\"h-8 w-8 text-primary\" />\r\n          </div>\r\n          <CardTitle className=\"text-2xl\">Admin Login</CardTitle>\r\n          <CardDescription>Sign in to access the admin dashboard</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {error !== undefined && error !== '' && (\r\n            <Alert variant=\"destructive\">\r\n              <AlertDescription>{error}</AlertDescription>\r\n            </Alert>\r\n          )}\r\n\r\n          {/* Email Login Form */}\r\n          <form\r\n            onSubmit={(e) => {\r\n              handleEmailLogin(e).catch((error) => {\r\n                console.warn('Failed to handle email login:', error);\r\n              });\r\n            }}\r\n            className=\"space-y-4\"\r\n          >\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"email\">Email</Label>\r\n              <Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                placeholder=\"zabrien@gmail.com\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"password\">Password</Label>\r\n              <Input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                placeholder=\"Enter your password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <Button type=\"submit\" disabled={loading} className=\"w-full\" size=\"lg\">\r\n              {loading ? (\r\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n              ) : (\r\n                <Mail className=\"mr-2 h-4 w-4\" />\r\n              )}\r\n              {loading ? 'Signing in...' : 'Sign in with Email'}\r\n            </Button>\r\n          </form>\r\n\r\n          <div className=\"relative\">\r\n            <div className=\"absolute inset-0 flex items-center\">\r\n              <span className=\"w-full border-t\" />\r\n            </div>\r\n            <div className=\"relative flex justify-center text-xs uppercase\">\r\n              <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\r\n            </div>\r\n          </div>\r\n\r\n          <Button\r\n            onClick={() => {\r\n              handleGoogleLogin().catch((error) => {\r\n                console.warn('Failed to handle Google login:', error);\r\n              });\r\n            }}\r\n            disabled={loading}\r\n            variant=\"outline\"\r\n            className=\"w-full\"\r\n            size=\"lg\"\r\n          >\r\n            {loading ? (\r\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n            ) : (\r\n              <Mail className=\"mr-2 h-4 w-4\" />\r\n            )}\r\n            Google\r\n          </Button>\r\n\r\n          <div className=\"text-center text-sm text-muted-foreground\">\r\n            <p>Admin access only</p>\r\n            <p>Contact your administrator if you need access</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\middleware.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'middleware' has too many lines (93). Maximum allowed is 50.",
        "line": 6,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 98,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\r\nimport { AuditLogger } from '@/lib/security/auditLogger';\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  const res = NextResponse.next();\r\n  const supabase = createSupabaseMiddlewareClient(req, res);\r\n\r\n  // Extract request metadata for security logging\r\n  const requestMetadata = {\r\n    ip: (req.ip as string | undefined) ?? req.headers.get('x-forwarded-for') ?? req.headers.get('x-real-ip') ?? 'unknown',\r\n    userAgent: req.headers.get('user-agent') ?? 'unknown',\r\n    url: req.nextUrl.pathname,\r\n    method: req.method\r\n  } as {\r\n    ip: string;\r\n    userAgent: string;\r\n    url: string;\r\n    method: string;\r\n  };\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  // Protect admin routes\r\n  if (req.nextUrl.pathname.startsWith('/admin')) {\r\n    if (userError || !user) {\r\n      // Log unauthorized access attempt\r\n      await AuditLogger.logSecurityEvent({\r\n        event_type: 'permission_denied',\r\n        ip_address: requestMetadata.ip,\r\n        user_agent: requestMetadata.userAgent,\r\n        details: {\r\n          attempted_url: requestMetadata.url,\r\n          reason: 'no_session',\r\n          error: userError?.message\r\n        },\r\n        severity: 'warning'\r\n      } as Parameters<typeof AuditLogger.logSecurityEvent>[0]);\r\n\r\n      // Redirect unauthenticated users to login\r\n      const redirectUrl = req.nextUrl.clone();\r\n      redirectUrl.pathname = '/login';\r\n      redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname);\r\n      return NextResponse.redirect(redirectUrl);\r\n    }\r\n\r\n    // Check for admin role (assuming 'profiles' table with 'role' column)\r\n    const { data: profile, error: profileQueryError } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    if (profileQueryError || profile?.role !== 'admin') {\r\n      // Log unauthorized admin access attempt\r\n      await AuditLogger.logSecurityEvent({\r\n        event_type: 'permission_denied',\r\n        user_id: user.id,\r\n        user_email: user.email,\r\n        ip_address: requestMetadata.ip,\r\n        user_agent: requestMetadata.userAgent,\r\n        details: {\r\n          attempted_url: requestMetadata.url,\r\n          user_role: profile?.role ?? 'none',\r\n          reason: 'insufficient_privileges',\r\n          error: profileQueryError?.message\r\n        },\r\n        severity: 'error'\r\n      } as Parameters<typeof AuditLogger.logSecurityEvent>[0]);\r\n\r\n      // Redirect non-admin users to access denied page\r\n      const redirectUrl = req.nextUrl.clone();\r\n      redirectUrl.pathname = '/access-denied';\r\n      return NextResponse.redirect(redirectUrl);\r\n    }\r\n\r\n    // Log successful admin access for audit trail\r\n    if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\r\n      await AuditLogger.logDataAccess(\r\n        user.id,\r\n        user.email ?? 'unknown',\r\n        'admin_panel',\r\n        req.nextUrl.pathname,\r\n        req.method === 'GET' ? 'read' : 'write',\r\n        {\r\n          ip: requestMetadata.ip,\r\n          userAgent: requestMetadata.userAgent\r\n        } as Parameters<typeof AuditLogger.logDataAccess>[5]\r\n      );\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nexport const config = {\r\n  matcher: ['/admin/:path*'],\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'FoodTruckFinder' has too many lines (250). Maximum allowed is 50.",
        "line": 83,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 332,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/no-intrusive-permissions",
        "severity": 2,
        "message": "Make sure the use of the geolocation is necessary.",
        "line": 104,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "checkPermission",
        "endLine": 104,
        "endColumn": 47,
        "suppressions": [
          {
            "kind": "directive",
            "justification": "Geolocation is essential for finding nearby food trucks"
          }
        ]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Switch } from '@/components/ui/switch';\r\n\r\nimport { Search, Navigation, Moon, Sun } from 'lucide-react';\r\nimport { useThemeSwitcher } from '@/components/ThemeProvider';\r\nimport dynamic from 'next/dynamic';\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from '@/components/ui/accordion';\r\nimport { TruckCard } from '@/components/TruckCard';\r\nimport { Badge } from '@/components/ui/badge';\r\n\r\nconst getCurrentDay = () => {\r\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\r\n  return days[new Date().getDay()];\r\n};\r\n\r\nconst formatPrice = (price: number) => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  }).format(price);\r\n};\r\n\r\nconst MapDisplay = dynamic(() => import('@/components/MapDisplay'), {\r\n  ssr: false,\r\n  loading: () => (\r\n    <div className=\"h-96 flex items-center justify-center bg-gray-100 dark:bg-slate-800 rounded-lg\">\r\n      <p>Loading map...</p>\r\n    </div>\r\n  ),\r\n});\r\n\r\ninterface FoodTruck {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  current_location: {\r\n    lat: number;\r\n    lng: number;\r\n    address: string;\r\n    timestamp: string;\r\n  };\r\n  operating_hours: Record<string, { open: string; close: string; closed: boolean }>;\r\n  menu: Array<{\r\n    category: string;\r\n    items: Array<{\r\n      name: string;\r\n      description: string;\r\n      price: number;\r\n      dietary_tags: string[];\r\n    }>;\r\n  }>;\r\n  contact_info: {\r\n    phone?: string;\r\n    email?: string;\r\n    website?: string;\r\n  };\r\n  social_media: {\r\n    instagram?: string;\r\n    facebook?: string;\r\n    twitter?: string;\r\n  };\r\n  data_quality_score: number;\r\n  verification_status: string;\r\n  distance?: number;\r\n}\r\n\r\ninterface TrucksApiResponse {\r\n  trucks: FoodTruck[];\r\n  // Add other properties if your API returns more, e.g., total, page, etc.\r\n}\r\n\r\nexport default function FoodTruckFinder() {\r\n  const [trucks, setTrucks] = useState<FoodTruck[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | undefined>();\r\n  const [selectedTruckId, setSelectedTruckId] = useState<string | undefined>();\r\n\r\n  const { setTheme, resolvedTheme } = useThemeSwitcher();\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n    void loadFoodTrucks();\r\n    getUserLocation();\r\n  }, []);\r\n  const getUserLocation = () => {\r\n    if (navigator.geolocation == undefined) {\r\n      // Default to San Francisco\r\n      setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n    } else {\r\n      // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setUserLocation({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          });\r\n        },\r\n        (error) => {\r\n          console.warn('Location access denied:', error);\r\n          // Default to San Francisco\r\n          setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n        },\r\n      );\r\n    }\r\n  };\r\n\r\n  const loadFoodTrucks = async () => {\r\n    try {\r\n      const response = await fetch('/api/trucks');\r\n      const data: TrucksApiResponse = (await response.json()) as TrucksApiResponse;\r\n      setTrucks(data.trucks ?? []);\r\n    } catch (error) {\r\n      console.error('Failed to load food trucks:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadNearbyTrucks = async () => {\r\n    if (!userLocation) return;\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `/api/trucks?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10`,\r\n      );\r\n      const data: TrucksApiResponse = (await response.json()) as TrucksApiResponse;\r\n      setTrucks(data.trucks ?? []);\r\n    } catch (error) {\r\n      console.error('Failed to load nearby trucks:', error);\r\n    }\r\n  };\r\n\r\n  const filteredTrucks = trucks.filter(\r\n    (truck) =>\r\n      truck.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      (truck.description ?? '').toLowerCase().includes(searchTerm.toLowerCase()),\r\n  );\r\n\r\n  const isOpen = (truck: FoodTruck) => {\r\n    const today = getCurrentDay();\r\n    const hours = truck.operating_hours?.[today];\r\n\r\n    // Ensure hours and its properties are not null/undefined before accessing\r\n    if (hours == undefined || hours.closed || (hours.open == undefined) || (hours.close == undefined)) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const now = new Date();\r\n      const currentTime = now.getHours() * 100 + now.getMinutes();\r\n      const openTime = Number.parseInt(hours.open.replace(':', ''));\r\n      const closeTime = Number.parseInt(hours.close.replace(':', ''));\r\n\r\n      return currentTime >= openTime && currentTime <= closeTime;\r\n    } catch (error) {\r\n      console.error('Error parsing operating hours for truck', truck.name, error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 dark:border-blue-400 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">Finding delicious food trucks...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\r\n      {/* Header */}\r\n      <div className=\"bg-white dark:bg-slate-800 shadow-sm border-b dark:border-slate-700\">\r\n        <div className=\"container mx-auto px-4 py-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\r\n                ≡ƒÜÜ Food Truck Finder\r\n              </h1>\r\n              <p className=\"text-gray-600 dark:text-gray-400\">\r\n                Discover amazing food trucks near you\r\n              </p>\r\n            </div>\r\n            <div className=\"flex flex-wrap items-center justify-end gap-2 sm:space-x-4\">\r\n              {' '}\r\n              {/* Added flex-wrap, justify-end, gap-2. Removed space-x-4 for sm screens */}\r\n              <div className=\"flex items-center space-x-2 order-1 sm:order-none\">\r\n                {' '}\r\n                {/* Control order for small screens if needed */}\r\n                {mounted &&\r\n                  (resolvedTheme === 'dark' ? (\r\n                    <Sun className=\"h-5 w-5 text-yellow-400\" />\r\n                  ) : (\r\n                    <Moon className=\"h-5 w-5 text-slate-500\" />\r\n                  ))}\r\n                <Switch\r\n                  id=\"theme-switcher\"\r\n                  checked={mounted && resolvedTheme === 'dark'}\r\n                  onCheckedChange={(checked: boolean) => {\r\n                    setTheme(checked ? 'dark' : 'light');\r\n                  }}\r\n                  aria-label=\"Switch between dark and light mode\"\r\n                  disabled={!mounted}\r\n                />\r\n                <Label\r\n                  htmlFor=\"theme-switcher\"\r\n                  className=\"hidden sm:block text-sm text-gray-700 dark:text-gray-300\"\r\n                >\r\n                  {mounted && (resolvedTheme === 'dark' ? 'Light Mode' : 'Dark Mode')}\r\n                </Label>\r\n              </div>\r\n              <div className=\"relative order-3 sm:order-none w-full sm:w-64\">\r\n                {' '}\r\n                {/* Full width on small, fixed on sm+ */}\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 h-4 w-4\" />\r\n                <Input\r\n                  placeholder=\"Search food trucks...\"\r\n                  value={searchTerm}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                    setSearchTerm(e.target.value)\r\n                  }\r\n                  className=\"pl-10 w-full bg-white dark:bg-slate-700 dark:text-gray-100 dark:placeholder-gray-400\" // w-full for responsiveness\r\n                />\r\n              </div>\r\n              <Button\r\n                onClick={() => {\r\n                  void loadNearbyTrucks();\r\n                }}\r\n                disabled={!userLocation}\r\n                variant=\"outline\"\r\n                className=\"order-2 sm:order-none\"\r\n              >\r\n                <Navigation className=\"h-4 w-4 mr-2\" />\r\n                Find Nearby\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <div className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n            {/* Real Map */}\r\n            <div\r\n              key=\"map-container-parent\"\r\n              className=\"lg:col-span-2 h-80 min-h-[320px] sm:h-96 sm:min-h-[400px] dark:bg-slate-800 rounded-lg shadow\"\r\n            >\r\n              <MapDisplay\r\n                trucks={filteredTrucks}\r\n                userLocation={userLocation}\r\n                onSelectTruck={setSelectedTruckId}\r\n                defaultCenter={\r\n                  userLocation ? [userLocation.lat, userLocation.lng] : [37.7749, -122.4194]\r\n                } // Provide a stable default\r\n                selectedTruckLocation={\r\n                  (selectedTruckId == undefined)\r\n                    ? undefined\r\n                    : (() => {\r\n                        const truck = filteredTrucks.find((t) => t.id === selectedTruckId);\r\n                        return (truck?.current_location?.lat == undefined) || (truck?.current_location?.lng == undefined)\r\n                          ? undefined\r\n                          : [truck.current_location.lat, truck.current_location.lng];\r\n                      })()\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {/* Combined Truck List and Details */}\r\n            <div className=\"lg:col-span-1 space-y-4\">\r\n              <h3 className=\"text-lg font-semibold dark:text-gray-100\">\r\n                Nearby Trucks ({filteredTrucks.length})\r\n              </h3>\r\n              <Accordion\r\n                type=\"single\"\r\n                collapsible\r\n                className=\"w-full\"\r\n                value={selectedTruckId ?? undefined}\r\n                onValueChange={(value: string | undefined) =>\r\n                  setSelectedTruckId((currentId) => (value === currentId ? undefined : value))\r\n                }\r\n              >\r\n                {filteredTrucks.map((truck) => (\r\n                  <AccordionItem value={truck.id} key={truck.id}>\r\n                    <AccordionTrigger className=\"flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-slate-700 rounded-md\">\r\n                      <div className=\"flex-1 text-left\">\r\n                        <h4 className=\"font-medium dark:text-gray-100\">{truck.name}</h4>\r\n                        {truck.current_location?.address && (\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-1\">\r\n                            {truck.current_location.address}\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                      <Badge variant={isOpen(truck) ? 'default' : 'secondary'}>\r\n                        {isOpen(truck) ? 'Open' : 'Closed'}\r\n                      </Badge>\r\n                    </AccordionTrigger>\r\n                    <AccordionContent>\r\n                      <TruckCard\r\n                        truck={truck}\r\n                        isOpen={isOpen(truck)}\r\n                        onSelectTruck={() => setSelectedTruckId(truck.id)}\r\n                        userLocation={userLocation}\r\n                        formatPrice={formatPrice}\r\n                        hideHeader={true}\r\n                      />\r\n                    </AccordionContent>\r\n                  </AccordionItem>\r\n                ))}\r\n              </Accordion>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\trucks\\[id]\\page.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'FoodTruckDetailPage' has too many lines (303). Maximum allowed is 50.",
        "line": 24,
        "column": 16,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 326,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { FoodTruckService } from '@/lib/supabase';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  MapPin,\r\n  Phone,\r\n  Mail,\r\n  Globe,\r\n  Clock,\r\n  Star,\r\n  Users,\r\n  ArrowLeft\r\n} from 'lucide-react';\r\nimport Link from 'next/link';\r\n\r\ninterface FoodTruckDetailPageProps {\r\n  readonly params: {\r\n    readonly id: string;\r\n  };\r\n}\r\n\r\nexport default async function FoodTruckDetailPage({ params }: FoodTruckDetailPageProps) {\r\n  const truck = await FoodTruckService.getTruckById(params.id);\r\n\r\n  if (truck == undefined) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\r\n        <div className=\"container mx-auto px-4 py-8\">\r\n          <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Food Truck Not Found</h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">The requested food truck could not be found.</p>\r\n            <Button asChild className=\"mt-4\">\r\n              <Link href=\"/\">\r\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n                Back to Map\r\n              </Link>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"flex flex-col gap-6 max-w-4xl mx-auto\">\r\n          {/* Header */}\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-4\">\r\n              <Button variant=\"outline\" size=\"sm\" asChild>\r\n                <Link href=\"/\">\r\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n                  Back to Map\r\n                </Link>\r\n              </Button>\r\n              <div>\r\n                <h1 className=\"text-3xl font-bold tracking-tight dark:text-gray-100\">{truck.name}</h1>\r\n                <p className=\"text-muted-foreground dark:text-gray-400\">\r\n                  Food truck details and information\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Basic Information */}\r\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n              <CardHeader>\r\n                <CardTitle className=\"dark:text-gray-100\">About</CardTitle>\r\n                <CardDescription className=\"dark:text-gray-400\">Food truck information</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Name</label>\r\n                  <p className=\"text-lg font-semibold dark:text-gray-100\">{truck.name}</p>\r\n                </div>\r\n                \r\n                {truck.description != undefined && (\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Description</label>\r\n                    <p className=\"text-gray-900 dark:text-gray-200\">{truck.description}</p>\r\n                  </div>\r\n                )}\r\n\r\n                {truck.cuisine_type && (\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Cuisine Type</label>\r\n                    <p className=\"text-gray-900 dark:text-gray-200\">{truck.cuisine_type}</p>\r\n                  </div>\r\n                )}\r\n\r\n                {truck.price_range && (\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Price Range</label>\r\n                    <Badge variant=\"outline\" className=\"ml-2\">\r\n                      {truck.price_range}\r\n                    </Badge>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Contact Information */}\r\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n                  <Phone className=\"h-5 w-5\" />\r\n                  Contact Information\r\n                </CardTitle>\r\n                <CardDescription className=\"dark:text-gray-400\">Get in touch</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                {truck.contact_info?.phone == undefined ? (\r\n                  <div className=\"flex items-center gap-3 text-gray-400\">\r\n                    <Phone className=\"h-4 w-4\" />\r\n                    <span className=\"text-sm\">No phone number available</span>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <Phone className=\"h-4 w-4 text-gray-500\" />\r\n                    <div>\r\n                      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Phone</label>\r\n                      <a \r\n                        href={`tel:${truck.contact_info.phone}`}\r\n                        className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\r\n                      >\r\n                        {truck.contact_info.phone}\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {truck.contact_info?.email == undefined ? (\r\n                  <div className=\"flex items-center gap-3 text-gray-400\">\r\n                    <Mail className=\"h-4 w-4\" />\r\n                    <span className=\"text-sm\">No email available</span>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <Mail className=\"h-4 w-4 text-gray-500\" />\r\n                    <div>\r\n                      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Email</label>\r\n                      <a \r\n                        href={`mailto:${truck.contact_info.email}`}\r\n                        className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\r\n                      >\r\n                        {truck.contact_info.email}\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {truck.contact_info?.website == undefined ? (\r\n                  <div className=\"flex items-center gap-3 text-gray-400\">\r\n                    <Globe className=\"h-4 w-4\" />\r\n                    <span className=\"text-sm\">No website available</span>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <Globe className=\"h-4 w-4 text-gray-500\" />\r\n                    <div>\r\n                      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Website</label>\r\n                      <a \r\n                        href={truck.contact_info.website} \r\n                        target=\"_blank\" \r\n                        rel=\"noopener noreferrer\"\r\n                        className=\"block text-blue-600 hover:text-blue-800 underline dark:text-blue-400 dark:hover:text-blue-300\"\r\n                      >\r\n                        Visit Website\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Social Media */}\r\n                {truck.social_media && Object.keys(truck.social_media).length > 0 && (\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Social Media</label>\r\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\r\n                      {truck.social_media.instagram != undefined && (\r\n                        <a\r\n                          href={`https://instagram.com/${truck.social_media.instagram}`}\r\n                          target=\"_blank\"\r\n                          rel=\"noopener noreferrer\"\r\n                          className=\"flex items-center gap-1 px-2 py-1 bg-pink-100 text-pink-800 rounded-md text-sm hover:bg-pink-200 dark:bg-pink-900 dark:text-pink-200\"\r\n                        >\r\n                          <Globe className=\"h-3 w-3\" />\r\n                          Instagram\r\n                        </a>\r\n                      )}\r\n                      {truck.social_media.facebook != undefined && (\r\n                        <a\r\n                          href={`https://facebook.com/${truck.social_media.facebook}`}\r\n                          target=\"_blank\"\r\n                          rel=\"noopener noreferrer\"\r\n                          className=\"flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-sm hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200\"\r\n                        >\r\n                          <Globe className=\"h-3 w-3\" />\r\n                          Facebook\r\n                        </a>\r\n                      )}\r\n                      {truck.social_media.twitter != undefined && (\r\n                        <a\r\n                          href={`https://twitter.com/${truck.social_media.twitter}`}\r\n                          target=\"_blank\"\r\n                          rel=\"noopener noreferrer\"\r\n                          className=\"flex items-center gap-1 px-2 py-1 bg-sky-100 text-sky-800 rounded-md text-sm hover:bg-sky-200 dark:bg-sky-900 dark:text-sky-200\"\r\n                        >\r\n                          <Globe className=\"h-3 w-3\" />\r\n                          Twitter\r\n                        </a>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Location Information */}\r\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n                  <MapPin className=\"h-5 w-5\" />\r\n                  Location\r\n                </CardTitle>\r\n                <CardDescription className=\"dark:text-gray-400\">Current location</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                {truck.current_location?.address == undefined ? (\r\n                  <p className=\"text-gray-400 text-sm\">No address available</p>\r\n                ) : (\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Address</label>\r\n                    <p className=\"text-gray-900 dark:text-gray-200\">{truck.current_location.address}</p>\r\n                  </div>\r\n                )}\r\n\r\n                {truck.current_location?.lat != undefined && truck.current_location?.lng != undefined && (\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Coordinates</label>\r\n                    <p className=\"text-gray-900 dark:text-gray-200 text-sm\">\r\n                      {truck.current_location.lat.toFixed(6)}, {truck.current_location.lng.toFixed(6)}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Operating Hours */}\r\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n                  <Clock className=\"h-5 w-5\" />\r\n                  Operating Hours\r\n                </CardTitle>\r\n                <CardDescription className=\"dark:text-gray-400\">Daily schedule</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {truck.operating_hours && Object.keys(truck.operating_hours).length > 0 ? (\r\n                  <div className=\"space-y-2\">\r\n                    {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map((day) => {\r\n                      const dayData = truck.operating_hours?.[day as keyof typeof truck.operating_hours] as { closed?: boolean; open?: string; close?: string } | undefined;\r\n                      const dayName = day.charAt(0).toUpperCase() + day.slice(1);\r\n                      \r\n                      return (\r\n                        <div key={day} className=\"flex justify-between items-center\">\r\n                          <span className=\"text-sm font-medium dark:text-gray-200\">{dayName}</span>\r\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                            {dayData?.closed === true ? 'Closed' : `${dayData?.open ?? 'N/A'} - ${dayData?.close ?? 'N/A'}`}\r\n                          </span>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                ) : (\r\n                  <p className=\"text-gray-400 text-sm\">Operating hours not available</p>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Ratings & Reviews */}\r\n          {(truck as { average_rating?: number }).average_rating != undefined && (\r\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n                  <Star className=\"h-5 w-5\" />\r\n                  Ratings & Reviews\r\n                </CardTitle>\r\n                <CardDescription className=\"dark:text-gray-400\">Customer feedback</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"flex items-center gap-4\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"flex\">\r\n                      {[1, 2, 3, 4, 5].map((star) => (\r\n                        <Star\r\n                          key={star}\r\n                          className={`h-6 w-6 ${\r\n                            star <= Math.round((truck as { average_rating?: number }).average_rating ?? 0)\r\n                              ? 'text-yellow-400 fill-current'\r\n                              : 'text-gray-300'\r\n                          }`}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                    <span className=\"text-xl font-semibold dark:text-gray-100\">{((truck as { average_rating?: number }).average_rating ?? 0).toFixed(1)}</span>\r\n                  </div>\r\n                  {(truck as { review_count?: number }).review_count != undefined && (\r\n                    <div className=\"flex items-center gap-1 text-gray-600 dark:text-gray-400\">\r\n                      <Users className=\"h-4 w-4\" />\r\n                      <span className=\"text-sm\">{(truck as { review_count?: number }).review_count} reviews</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\FoodTruckInfoCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\MapDisplay.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (90). Maximum allowed is 50.",
        "line": 58,
        "column": 20,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 147,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css';\r\nimport 'leaflet-defaulticon-compatibility';\r\n\r\n// @ts-expect-error TS(2792): Cannot find module 'react-leaflet'. Did you mean t... Remove this comment to see the full error message\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\r\nimport type { LatLngExpression } from 'leaflet';\r\nimport L from 'leaflet';\r\nimport { useEffect, useState } from 'react'; // Added useState\r\n\r\ninterface MapDisplayProps {\r\n  trucks: Array<{\r\n    id: string;\r\n    name: string;\r\n    current_location: {\r\n      lat?: number;\r\n      lng?: number;\r\n      address?: string;\r\n    };\r\n  }>;\r\n  userLocation?: { lat: number; lng: number };\r\n  // defaultCenter will be the initial, stable center\r\n  defaultCenter: LatLngExpression;\r\n  defaultZoom?: number;\r\n  onSelectTruck?: (truckId: string) => void;\r\n  selectedTruckLocation?: LatLngExpression;\r\n}\r\n\r\n// Component to handle map view updates\r\nconst MapViewUpdater = ({\r\n  center,\r\n  zoom,\r\n}: {\r\n  center: LatLngExpression | undefined;\r\n  zoom?: number;\r\n}) => {\r\n  const map = useMap();\r\n  useEffect(() => {\r\n    if (center) {\r\n      map.flyTo(center, zoom ?? map.getZoom());\r\n    }\r\n  }, [center, zoom, map]);\r\n  // Empty fragment instead of null\r\n  return <></>;\r\n};\r\n\r\n// Custom food truck icon\r\nconst foodTruckIcon = new L.Icon({\r\n  iconUrl: '/food-truck-icon.svg',\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n  popupAnchor: [0, -32],\r\n  className: 'food-truck-marker-icon',\r\n});\r\n\r\nconst MapDisplay = ({\r\n  trucks,\r\n  userLocation,\r\n  defaultCenter, // No longer has a default here, will be passed from parent\r\n  defaultZoom = 10,\r\n  onSelectTruck,\r\n  selectedTruckLocation,\r\n}: MapDisplayProps) => {\r\n  const [isMounted, setIsMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsMounted(true);\r\n  }, []);\r\n\r\n  const validTrucks = trucks.filter(\r\n    (truck) =>\r\n      truck.current_location != undefined &&\r\n      typeof truck.current_location.lat === 'number' &&\r\n      typeof truck.current_location.lng === 'number',\r\n  );\r\n\r\n  // initialMapCenter is derived from defaultCenter prop or userLocation if available.\r\n  const initialMapCenter: LatLngExpression =\r\n    userLocation && typeof userLocation.lat === 'number' && typeof userLocation.lng === 'number'\r\n      ? [userLocation.lat, userLocation.lng]\r\n      : defaultCenter;\r\n\r\n  if (!isMounted) {\r\n    // You can return a placeholder or null until the component is mounted\r\n    // This helps prevent Leaflet from initializing on a container that might be\r\n    // part of a double-render in StrictMode before full client-side hydration.\r\n    return (\r\n      <div\r\n        style={{\r\n          height: '100%',\r\n          width: '100%',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          backgroundColor: '#f0f0f0',\r\n        }}\r\n      >\r\n        <p>Loading map...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <MapContainer\r\n      center={initialMapCenter}\r\n      zoom={defaultZoom}\r\n      scrollWheelZoom={true}\r\n      style={{ height: '100%', width: '100%' }}\r\n      className=\"rounded-lg\"\r\n    >\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <MapViewUpdater\r\n        center={selectedTruckLocation}\r\n        zoom={selectedTruckLocation ? 13 : undefined}\r\n      />\r\n      {validTrucks.map((truck) => (\r\n        <Marker\r\n          key={truck.id}\r\n          position={[truck.current_location.lat!, truck.current_location.lng!]}\r\n          icon={foodTruckIcon}\r\n          eventHandlers={{\r\n            click: () => {\r\n              if (onSelectTruck) {\r\n                onSelectTruck(truck.id);\r\n              }\r\n            },\r\n          }}\r\n        >\r\n          <Popup>\r\n            <h4 className=\"font-bold\">{truck.name}</h4>\r\n            {truck.current_location.address != undefined && truck.current_location.address != '' && <div>{truck.current_location.address}</div>}\r\n          </Popup>\r\n        </Marker>\r\n      ))}\r\n      {userLocation && (\r\n        <Marker position={[userLocation.lat, userLocation.lng]}>\r\n          <Popup>You are here</Popup>\r\n        </Marker>\r\n      )}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default MapDisplay;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ModeToggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\SearchFilters.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'SearchFilters' has too many lines (164). Maximum allowed is 50.",
        "line": 23,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 186,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { Search, Filter, Clock } from 'lucide-react';\r\n\r\ninterface SearchFiltersProps {\r\n  readonly onSearch: (filters: SearchFilters) => void;\r\n  readonly loading?: boolean;\r\n}\r\n\r\ninterface SearchFilters {\r\n  query: string;\r\n  cuisine: string;\r\n  openNow: boolean;\r\n  radius: number;\r\n}\r\n\r\nexport function SearchFilters({ onSearch, loading }: SearchFiltersProps) {\r\n  const [filters, setFilters] = useState<SearchFilters>({\r\n    query: '',\r\n    cuisine: '',\r\n    openNow: false,\r\n    radius: 10,\r\n  });\r\n\r\n  const [showAdvanced, setShowAdvanced] = useState(false);\r\n\r\n  const cuisineTypes = [\r\n    'Mexican',\r\n    'American',\r\n    'Asian',\r\n    'Italian',\r\n    'BBQ',\r\n    'Burgers',\r\n    'Tacos',\r\n    'Pizza',\r\n    'Sandwiches',\r\n    'Desserts',\r\n  ];\r\n\r\n  const handleSearch = () => {\r\n    onSearch(filters);\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    const clearedFilters = {\r\n      query: '',\r\n      cuisine: '',\r\n      openNow: false,\r\n      radius: 10,\r\n    };\r\n    setFilters(clearedFilters);\r\n    onSearch(clearedFilters);\r\n  };\r\n\r\n  const activeFilterCount = [\r\n    filters.query !== '',\r\n    filters.cuisine !== '',\r\n    filters.openNow === true\r\n  ].filter(Boolean).length;\r\n\r\n  return (\r\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"space-y-4\">\r\n          {/* Main Search */}\r\n          <div className=\"flex flex-wrap items-center gap-2 sm:space-x-2\">\r\n            {' '}\r\n            {/* Allow wrapping and adjust gap */}\r\n            <div className=\"relative flex-grow min-w-[200px]\">\r\n              {' '}\r\n              {/* Use flex-grow and min-w for input section */}\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 h-4 w-4\" />\r\n              <Input\r\n                placeholder=\"Search food trucks, cuisine, or menu items...\"\r\n                value={filters.query}\r\n                onChange={(e) => setFilters({ ...filters, query: e.target.value })}\r\n                className=\"pl-10 w-full dark:bg-slate-700 dark:text-gray-100 dark:placeholder-gray-400\" // Ensure input takes full width of its container\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    handleSearch();\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <Button onClick={handleSearch} disabled={loading} className=\"flex-shrink-0\">\r\n              {' '}\r\n              {/* Prevent button from shrinking excessively */}\r\n              <Search className=\"h-4 w-4 mr-2\" />\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setShowAdvanced(!showAdvanced)}\r\n              className=\"dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700 flex-shrink-0\"\r\n            >\r\n              {' '}\r\n              {/* Prevent button from shrinking */}\r\n              <Filter className=\"h-4 w-4 mr-2\" />\r\n              Filters\r\n              {activeFilterCount > 0 && (\r\n                <Badge variant=\"secondary\" className=\"ml-2 dark:bg-slate-700 dark:text-gray-300\">\r\n                  {activeFilterCount}\r\n                </Badge>\r\n              )}\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Advanced Filters */}\r\n          {showAdvanced && (\r\n            <div className=\"space-y-4 pt-4 border-t dark:border-slate-700\">\r\n              {/* Quick Filters */}\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Button\r\n                  variant={filters.openNow ? 'default' : 'outline'}\r\n                  size=\"sm\"\r\n                  onClick={() => setFilters({ ...filters, openNow: !filters.openNow })}\r\n                  className=\"dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700\"\r\n                >\r\n                  <Clock className=\"h-4 w-4 mr-1\" />\r\n                  Open Now\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={clearFilters}\r\n                  className=\"dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700\"\r\n                >\r\n                  Clear All\r\n                </Button>\r\n              </div>\r\n\r\n              {/* Cuisine Types */}\r\n              <div>\r\n                <label className=\"text-sm font-medium mb-2 block dark:text-gray-100\">\r\n                  Cuisine Type\r\n                </label>\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                  {cuisineTypes.map((cuisine) => (\r\n                    <Badge\r\n                      key={cuisine}\r\n                      variant={filters.cuisine === cuisine ? 'default' : 'outline'}\r\n                      className=\"cursor-pointer dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700\"\r\n                      onClick={() =>\r\n                        setFilters({\r\n                          ...filters,\r\n                          cuisine: filters.cuisine === cuisine ? '' : cuisine,\r\n                        })\r\n                      }\r\n                    >\r\n                      {cuisine}\r\n                    </Badge>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Distance */}\r\n              <div>\r\n                <label className=\"text-sm font-medium mb-2 block dark:text-gray-100\">\r\n                  Distance: {filters.radius} km\r\n                </label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"1\"\r\n                  max=\"50\"\r\n                  value={filters.radius}\r\n                  onChange={(e) => setFilters({ ...filters, radius: Number(e.target.value) })}\r\n                  className=\"w-full accent-blue-600 dark:accent-blue-500\"\r\n                />\r\n                <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n                  <span>1 km</span>\r\n                  <span>50 km</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ThemeProvider.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/different-types-comparison",
        "severity": 2,
        "message": "Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?",
        "line": 32,
        "column": 15,
        "nodeType": null,
        "endLine": 32,
        "endColumn": 18,
        "suggestions": [
          { "desc": "Replace \"===\" with \"==\"", "fix": { "range": [1130, 1133], "text": "==" } }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\TruckCard.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'TruckCard' has too many lines (245). Maximum allowed is 50.",
        "line": 54,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 298,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\n{/* @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message */}\r\nimport { MapPin, Phone, Star, Clock, Globe, Eye } from 'lucide-react';\r\n// @ts-expect-error TS(2792): Cannot find module 'next/link'. Did you mean to se... Remove this comment to see the full error message\r\nimport Link from 'next/link';\r\n\r\ninterface FoodTruck {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  current_location?: {\r\n    address: string;\r\n  };\r\n  operating_hours?: Record<string, { open: string; close: string; closed: boolean }>;\r\n  contact_info?: {\r\n    phone?: string;\r\n    website?: string;\r\n    email?: string;\r\n  };\r\n  social_media?: {\r\n    instagram?: string;\r\n    facebook?: string;\r\n    twitter?: string;\r\n  };\r\n  average_rating?: number;\r\n  review_count?: number;\r\n  data_quality_score: number;\r\n  verification_status: string;\r\n  menu?: Array<{\r\n    category: string;\r\n    items: Array<{ name: string; price: number }>;\r\n  }>;\r\n}\r\n\r\ninterface TruckCardProps {\r\n  readonly truck: FoodTruck;\r\n  readonly isOpen: boolean;\r\n  readonly onSelectTruck: () => void;\r\n  readonly formatPrice: (price: number) => string;\r\n  readonly userLocation?: { lat: number; lng: number };\r\n  readonly hideHeader?: boolean; // Add option to hide header when used in accordion\r\n}\r\n\r\n// Helper to format operating hours\r\nconst formatHours = (hours: { open: string; close: string; closed: boolean }) => {\r\n  if (hours.closed) return 'Closed';\r\n  return `${hours.open} - ${hours.close}`;\r\n};\r\n\r\nexport function TruckCard({\r\n  truck,\r\n  isOpen,\r\n  onSelectTruck,\r\n  formatPrice,\r\n  hideHeader = false,\r\n}: TruckCardProps) {\r\n  const getPopularItems = () => {\r\n    if (!truck.menu || truck.menu.length === 0) return [];\r\n    return truck.menu[0]?.items?.slice(0, 3) ?? [];\r\n  };\r\n\r\n  // Helper to determine price range fallback\r\n  const getPriceRange = () => {\r\n    // Flatten all prices from all menu items\r\n    const prices = (truck.menu ?? [])\r\n      .flatMap((cat) => cat.items)\r\n      .map((item) => (typeof item.price === 'number' ? item.price : undefined))\r\n      .filter((p): p is number => p !== undefined && !Number.isNaN(p));\r\n    if (prices.length === 0) return;\r\n    const min = Math.min(...prices);\r\n    const max = Math.max(...prices);\r\n    if (max < 10) return '$';\r\n    if (min >= 10 && max <= 20) return '$$';\r\n    if (min > 20) return '$$$';\r\n    if (min < 10 && max > 20) return '$-$$$';\r\n    if (min < 10 && max <= 20) return '$-$$';\r\n    if (min >= 10 && max > 20) return '$$-$$$';\r\n    return '$';\r\n  };\r\n\r\n  // Helper to get today's operating hours\r\n  const getTodayHours = () => {\r\n    if (!truck.operating_hours) return;\r\n    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\r\n    const todayKey = days[new Date().getDay()];\r\n    return truck.operating_hours[todayKey];\r\n  };\r\n\r\n  const popularItems = getPopularItems();\r\n  const priceRange = getPriceRange();\r\n  const todayHours = getTodayHours();\r\n\r\n  return (\r\n    <Card\r\n      className={`hover:shadow-md transition-shadow cursor-pointer dark:bg-slate-800 dark:border-slate-700 ${hideHeader ? 'shadow-none border-none bg-transparent dark:bg-transparent' : ''}`}\r\n      onClick={onSelectTruck}\r\n    >\r\n      {!hideHeader && (\r\n        <CardHeader>\r\n          <div className=\"flex justify-between items-start\">\r\n            <div className=\"flex-1\">\r\n              <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\r\n              {(truck.current_location?.address !== undefined) && (\r\n                <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\r\n                  <MapPin className=\"h-4 w-4 mr-1\" />\r\n                  {truck.current_location.address}\r\n                </CardDescription>\r\n              )}\r\n            </div>\r\n            <div className=\"flex flex-col items-end space-y-1\">\r\n              <Badge variant={isOpen ? 'default' : 'secondary'}>{isOpen ? 'Open' : 'Closed'}</Badge>\r\n              {/* Show price range fallback if no explicit prices */}\r\n              {popularItems.every((item) => !item.price) && priceRange && (\r\n                <Badge variant=\"outline\" className=\"mt-1\">\r\n                  {priceRange}\r\n                </Badge>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n      )}\r\n      <CardContent className={hideHeader ? 'pt-0' : ''}>\r\n        {truck.description && (\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">{truck.description}</p>\r\n        )}\r\n        <div className=\"space-y-4\">\r\n          {/* Ratings & Hours Row */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {/* Ratings */}\r\n            {(truck.average_rating !== undefined) && (\r\n              <div>\r\n                <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Rating</h4>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"flex\">\r\n                    {[1, 2, 3, 4, 5].map((star) => (\r\n                      <Star\r\n                        key={star}\r\n                        className={`h-4 w-4 ${\r\n                          star <= Math.round(truck.average_rating ?? 0)\r\n                            ? 'text-yellow-400 fill-current'\r\n                            : 'text-gray-300'\r\n                        }`}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                  <span className=\"text-sm font-medium dark:text-gray-200\">\r\n                    {truck.average_rating.toFixed(1)}\r\n                  </span>\r\n                  {(truck.review_count !== undefined) && (\r\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      ({truck.review_count} reviews)\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Operating Hours */}\r\n            {todayHours && (\r\n              <div>\r\n                <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Today's Hours</h4>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Clock className=\"h-3 w-3 text-gray-500\" />\r\n                  <span className=\"text-sm dark:text-gray-300\">\r\n                    {formatHours(todayHours)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Menu & Contact Row */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Popular Items</h4>\r\n              <div className=\"space-y-1\">\r\n                {popularItems.map((item, idx) => (\r\n                  <div key={idx} className=\"flex justify-between text-sm dark:text-gray-300\">\r\n                    <span className=\"truncate dark:text-gray-200\">{item.name}</span>\r\n                    {typeof item.price === 'number' && item.price > 0 && (\r\n                      <span className=\"text-green-600 dark:text-green-400 ml-2\">\r\n                        {formatPrice(item.price)}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n                {popularItems.length === 0 && (\r\n                  <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Menu not available</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Contact</h4>\r\n              <div className=\"space-y-1 dark:text-gray-300\">\r\n                {(truck.contact_info?.phone !== undefined) && (\r\n                  <a\r\n                    href={`tel:${truck.contact_info.phone}`}\r\n                    className=\"flex items-center text-sm hover:text-blue-600 dark:hover:text-blue-400\"\r\n                  >\r\n                    <Phone className=\"h-3 w-3 mr-1\" />\r\n                    <span className=\"truncate\">{truck.contact_info.phone}</span>\r\n                  </a>\r\n                )}\r\n                {(truck.contact_info?.website !== undefined) && (\r\n                  <a\r\n                    href={truck.contact_info.website}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"flex items-center text-sm hover:text-blue-600 dark:hover:text-blue-400\"\r\n                  >\r\n                    <Globe className=\"h-3 w-3 mr-1\" />\r\n                    <span className=\"truncate\">Website</span>\r\n                  </a>\r\n                )}\r\n                {truck.verification_status && (\r\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\r\n                    <Star className=\"h-3 w-3 mr-1\" />\r\n                    <span className=\"capitalize\">{truck.verification_status}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Social Media */}\r\n          {truck.social_media && Object.keys(truck.social_media).length > 0 && (\r\n            <div>\r\n              <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Social Media</h4>\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                {(truck.social_media.instagram !== undefined) && (\r\n                  <a\r\n                    href={`https://instagram.com/${truck.social_media.instagram}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"flex items-center gap-1 px-2 py-1 bg-pink-100 text-pink-800 rounded-md text-xs hover:bg-pink-200 dark:bg-pink-900 dark:text-pink-200\"\r\n                  >\r\n                    <Globe className=\"h-3 w-3\" />\r\n                    Instagram\r\n                  </a>\r\n                )}\r\n                {(truck.social_media.facebook !== undefined) && (\r\n                  <a\r\n                    href={`https://facebook.com/${truck.social_media.facebook}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-xs hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200\"\r\n                  >\r\n                    <Globe className=\"h-3 w-3\" />\r\n                    Facebook\r\n                  </a>\r\n                )}\r\n                {(truck.social_media.twitter !== undefined) && (\r\n                  <a\r\n                    href={`https://twitter.com/${truck.social_media.twitter}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"flex items-center gap-1 px-2 py-1 bg-sky-100 text-sky-800 rounded-md text-xs hover:bg-sky-200 dark:bg-sky-900 dark:text-sky-200\"\r\n                  >\r\n                    <Globe className=\"h-3 w-3\" />\r\n                    Twitter\r\n                  </a>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {truck.verification_status && (\r\n          <div className=\"mt-2\">\r\n            <Badge variant={truck.verification_status === 'verified' ? 'default' : 'secondary'}>\r\n              <span className=\"capitalize\">{truck.verification_status}</span>\r\n            </Badge>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n      <div className=\"px-4 py-2 border-t border-gray-200 dark:border-gray-700\">\r\n        <div className=\"flex gap-2\">\r\n          {/* @ts-expect-error TS(2322): Type '{ children: Element; asChild: true; classNam... Remove this comment to see the full error message */}\r\n          <Button asChild className=\"flex-1\" variant=\"outline\">\r\n            <Link href={`/trucks/${truck.id}`}>\r\n              <Eye className=\"h-4 w-4 mr-2\" />\r\n              View Details\r\n            </Link>\r\n          </Button>\r\n          {truck.verification_status === 'verified' && (\r\n            <Button className=\"flex-1\" variant=\"default\" disabled>\r\n              Book Me\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\WebVitalsReporter.tsx",
    "messages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 19,
        "column": 10,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 19,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [492, 496], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [492, 496], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport { initWebVitalsMonitoring } from '@/lib/performance/webVitals';\r\n\r\n/**\r\n * Web Vitals Reporter Component\r\n * Initializes Core Web Vitals monitoring for the application\r\n */\r\nexport function WebVitalsReporter() {\r\n  useEffect(() => {\r\n    // Only initialize in browser environment\r\n    if (globalThis.window != undefined) {\r\n      initWebVitalsMonitoring();\r\n    }\r\n  }, []);\r\n\r\n  // This component doesn't render anything\r\n  return null;\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\admin\\DataCleanupDashboard.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'DataCleanupDashboard' has too many lines (314). Maximum allowed is 50.",
        "line": 43,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 356,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\r\nimport { \r\n  Trash2, \r\n  RefreshCw, \r\n  CheckCircle, \r\n  AlertTriangle, \r\n  Play,\r\n  Eye,\r\n  Merge,\r\n  Phone,\r\n  MapPin,\r\n  Star\r\n} from 'lucide-react';\r\n\r\ninterface CleanupOperation {\r\n  type: string;\r\n  description: string;\r\n  affectedCount: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\ninterface CleanupResult {\r\n  totalProcessed: number;\r\n  operations: CleanupOperation[];\r\n  summary: {\r\n    trucksImproved: number;\r\n    duplicatesRemoved: number;\r\n    qualityScoreImprovement: number;\r\n    placeholdersRemoved: number;\r\n  };\r\n  duration: number;\r\n}\r\n\r\nexport function DataCleanupDashboard() {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [lastResult, setLastResult] = useState<CleanupResult | undefined>();\r\n  const [previewData, setPreviewData] = useState<unknown>();\r\n  const [selectedOperations, setSelectedOperations] = useState<string[]>([\r\n    'remove_placeholders',\r\n    'normalize_phone',\r\n    'fix_coordinates',\r\n    'update_quality_scores'\r\n  ]);\r\n\r\n  const operationConfig = {\r\n    remove_placeholders: {\r\n      name: 'Remove Placeholders',\r\n      description: 'Remove placeholder and mock data values',\r\n      icon: <Trash2 className=\"h-4 w-4\" />,\r\n      color: 'text-red-600'\r\n    },\r\n    normalize_phone: {\r\n      name: 'Normalize Phone Numbers',\r\n      description: 'Format phone numbers consistently',\r\n      icon: <Phone className=\"h-4 w-4\" />,\r\n      color: 'text-blue-600'\r\n    },\r\n    fix_coordinates: {\r\n      name: 'Fix GPS Coordinates',\r\n      description: 'Correct invalid location coordinates',\r\n      icon: <MapPin className=\"h-4 w-4\" />,\r\n      color: 'text-green-600'\r\n    },\r\n    update_quality_scores: {\r\n      name: 'Update Quality Scores',\r\n      description: 'Recalculate data quality scores',\r\n      icon: <Star className=\"h-4 w-4\" />,\r\n      color: 'text-yellow-600'\r\n    },\r\n    merge_duplicates: {\r\n      name: 'Merge Duplicates',\r\n      description: 'Identify and merge duplicate entries',\r\n      icon: <Merge className=\"h-4 w-4\" />,\r\n      color: 'text-purple-600'\r\n    }\r\n  };\r\n\r\n  const runCleanup = async (dryRun: boolean = false) => {\r\n    setIsRunning(true);\r\n    try {\r\n      const response = await fetch('/api/admin/data-cleanup', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          action: dryRun ? 'dry-run' : 'full-cleanup',\r\n          options: {\r\n            operations: selectedOperations,\r\n            batchSize: 50,\r\n            dryRun\r\n          }\r\n        })\r\n      });\r\n\r\n      const data = await response.json() as { success: boolean; result?: CleanupResult; error?: string };\r\n\r\n      if (data.success === true) {\r\n        setLastResult(data.result);\r\n      } else {\r\n        console.error('Cleanup failed:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error running cleanup:', error);\r\n    } finally {\r\n      setIsRunning(false);\r\n    }\r\n  };\r\n\r\n  const loadPreview = async () => {\r\n    try {\r\n      const response = await fetch('/api/admin/data-cleanup?action=preview');\r\n      const data = await response.json() as { success: boolean; preview?: unknown };\r\n\r\n      if (data.success === true) {\r\n        setPreviewData(data.preview);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading preview:', error);\r\n    }\r\n  };\r\n\r\n  const toggleOperation = (operation: string) => {\r\n    setSelectedOperations(prev => \r\n      prev.includes(operation)\r\n        ? prev.filter(op => op !== operation)\r\n        : [...prev, operation]\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold tracking-tight\">Data Cleanup & Quality</h2>\r\n          <p className=\"text-muted-foreground\">\r\n            Automated data quality improvements and duplicate prevention\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\" onClick={() => { void loadPreview(); }} disabled={isRunning}>\r\n            <Eye className=\"h-4 w-4 mr-2\" />\r\n            Preview Changes\r\n          </Button>\r\n          <Button variant=\"outline\" onClick={() => { void runCleanup(true); }} disabled={isRunning}>\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRunning ? 'animate-spin' : ''}`} />\r\n            Dry Run\r\n          </Button>\r\n          <Button onClick={() => { void runCleanup(false); }} disabled={isRunning}>\r\n            <Play className=\"h-4 w-4 mr-2\" />\r\n            Run Cleanup\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Operation Selection */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Cleanup Operations</CardTitle>\r\n          <CardDescription>\r\n            Select which cleanup operations to run\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-3\">\r\n            {Object.entries(operationConfig).map(([key, config]) => (\r\n              <div\r\n                key={key}\r\n                className={`flex items-center space-x-3 p-3 border rounded-lg cursor-pointer transition-colors ${\r\n                  selectedOperations.includes(key)\r\n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-950'\r\n                    : 'border-gray-200 hover:border-gray-300'\r\n                }`}\r\n                onClick={() => toggleOperation(key)}\r\n              >\r\n                <div className={config.color}>\r\n                  {config.icon}\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <div className=\"font-medium text-sm\">{config.name}</div>\r\n                  <div className=\"text-xs text-muted-foreground\">{config.description}</div>\r\n                </div>\r\n                {selectedOperations.includes(key) && (\r\n                  <CheckCircle className=\"h-4 w-4 text-blue-600\" />\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Preview Data */}\r\n      {previewData != undefined && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Cleanup Preview</CardTitle>\r\n            <CardDescription>\r\n              Estimated changes (based on sample of 10 trucks)\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">\r\n                  {(previewData as { estimated_improvements: number }).estimated_improvements}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Trucks to Improve</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-purple-600\">\r\n                  {(previewData as { estimated_duplicates: number }).estimated_duplicates}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Duplicates Found</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">\r\n                  {(previewData as { operations?: unknown[] }).operations?.length ?? 0}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Operations Ready</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-yellow-600\">\r\n                  ~{Math.round(((previewData as { estimated_improvements: number }).estimated_improvements / 10) * 100)}%\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Improvement Rate</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Last Cleanup Result */}\r\n      {lastResult && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\r\n              Last Cleanup Results\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Completed in {Math.round(lastResult.duration / 1000)}s - {lastResult.totalProcessed} trucks processed\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {/* Summary Cards */}\r\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n              <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-blue-600\">\r\n                  {lastResult.summary.trucksImproved}\r\n                </div>\r\n                <div className=\"text-sm text-blue-700 dark:text-blue-300\">Trucks Improved</div>\r\n              </div>\r\n              <div className=\"text-center p-3 bg-purple-50 dark:bg-purple-950 rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-purple-600\">\r\n                  {lastResult.summary.duplicatesRemoved}\r\n                </div>\r\n                <div className=\"text-sm text-purple-700 dark:text-purple-300\">Duplicates Removed</div>\r\n              </div>\r\n              <div className=\"text-center p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-green-600\">\r\n                  {lastResult.summary.qualityScoreImprovement}\r\n                </div>\r\n                <div className=\"text-sm text-green-700 dark:text-green-300\">Quality Updates</div>\r\n              </div>\r\n              <div className=\"text-center p-3 bg-red-50 dark:bg-red-950 rounded-lg\">\r\n                <div className=\"text-2xl font-bold text-red-600\">\r\n                  {lastResult.summary.placeholdersRemoved}\r\n                </div>\r\n                <div className=\"text-sm text-red-700 dark:text-red-300\">Placeholders Removed</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Operation Details */}\r\n            <div className=\"space-y-3\">\r\n              <h4 className=\"font-semibold\">Operation Details</h4>\r\n              {lastResult.operations.map((operation, index) => (\r\n                <div key={index} className=\"border rounded-lg p-3\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {operationConfig[operation.type as keyof typeof operationConfig]?.icon}\r\n                      <span className=\"font-medium\">{operation.description}</span>\r\n                    </div>\r\n                    <Badge variant={operation.errorCount > 0 ? 'destructive' : 'default'}>\r\n                      {operation.successCount}/{operation.affectedCount}\r\n                    </Badge>\r\n                  </div>\r\n                  \r\n                  {operation.affectedCount > 0 && (\r\n                    <Progress \r\n                      value={(operation.successCount / operation.affectedCount) * 100} \r\n                      className=\"h-2 mb-2\"\r\n                    />\r\n                  )}\r\n                  \r\n                  {operation.errors.length > 0 && (\r\n                    <Alert variant=\"destructive\" className=\"mt-2\">\r\n                      <AlertTriangle className=\"h-4 w-4\" />\r\n                      <AlertTitle>Errors ({operation.errors.length})</AlertTitle>\r\n                      <AlertDescription>\r\n                        <div className=\"max-h-20 overflow-y-auto text-xs\">\r\n                          {operation.errors.slice(0, 3).map((error, i) => (\r\n                            <div key={i}>{error}</div>\r\n                          ))}\r\n                          {operation.errors.length > 3 && (\r\n                            <div>... and {operation.errors.length - 3} more</div>\r\n                          )}\r\n                        </div>\r\n                      </AlertDescription>\r\n                    </Alert>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Help & Information */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Cleanup Operations Guide</CardTitle>\r\n          <CardDescription>\r\n            Understanding what each cleanup operation does\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-3 text-sm\">\r\n            <div>\r\n              <strong>Remove Placeholders:</strong> Removes test data, \"undefined\" values, and placeholder content that shouldn't be in production.\r\n            </div>\r\n            <div>\r\n              <strong>Normalize Phone Numbers:</strong> Formats phone numbers consistently (e.g., \"(843) 555-0123\").\r\n            </div>\r\n            <div>\r\n              <strong>Fix GPS Coordinates:</strong> Corrects invalid coordinates (0,0) and coordinates outside the Charleston area.\r\n            </div>\r\n            <div>\r\n              <strong>Update Quality Scores:</strong> Recalculates data quality scores based on current data completeness.\r\n            </div>\r\n            <div>\r\n              <strong>Merge Duplicates:</strong> Identifies and merges duplicate food truck entries automatically.\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\admin\\RealtimeStatusIndicator.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'RealtimeStatusIndicator' has too many lines (279). Maximum allowed is 50.",
        "line": 62,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 340,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\n/**\r\n * SOTA Real-time Status Indicator Component\r\n * \r\n * Provides visual real-time status updates for admin dashboard\r\n * with animated indicators, health scores, and alert notifications\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\n\r\nimport { \r\n  Activity, \r\n  AlertTriangle, \r\n  CheckCircle, \r\n  Clock, \r\n  Database, \r\n  RefreshCw, \r\n  Server, \r\n  TrendingUp, \r\n  TrendingDown,\r\n  Wifi,\r\n  WifiOff,\r\n  Zap\r\n} from 'lucide-react';\r\nimport { useRealtimeAdminEvents } from '@/hooks/useRealtimeAdminEvents';\r\n\r\n// Helper function moved to outer scope for consistent function scoping\r\nconst getStatusColor = (status: string) => {\r\n  switch (status) {\r\n    case 'healthy': { return 'text-green-600 bg-green-50 border-green-200';\r\n    }\r\n    case 'warning': { return 'text-yellow-600 bg-yellow-50 border-yellow-200';\r\n    }\r\n    case 'error': { return 'text-red-600 bg-red-50 border-red-200';\r\n    }\r\n    default: { return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  }\r\n};\r\n\r\ninterface StatusMetric {\r\n  label: string;\r\n  value: number | string;\r\n  unit?: string;\r\n  trend?: 'up' | 'down' | 'stable';\r\n  status: 'healthy' | 'warning' | 'error';\r\n  icon: React.ReactNode;\r\n}\r\n\r\ninterface SystemAlert {\r\n  id: string;\r\n  type: 'info' | 'warning' | 'error' | 'critical';\r\n  message: string;\r\n  timestamp: string;\r\n  acknowledged?: boolean;\r\n}\r\n\r\nexport function RealtimeStatusIndicator() {\r\n  const {\r\n    isConnected,\r\n    isConnecting,\r\n    connectionError,\r\n    latestMetrics,\r\n    recentEvents,\r\n    connect,\r\n    disconnect,\r\n    clearEvents,\r\n    lastEventTime\r\n  } = useRealtimeAdminEvents({\r\n    autoConnect: true,\r\n    reconnectInterval: 5000,\r\n    maxReconnectAttempts: 10\r\n  });\r\n\r\n  const [alerts, setAlerts] = useState<SystemAlert[]>([]);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  // Process recent events into alerts\r\n  useEffect(() => {\r\n    const newAlerts = recentEvents\r\n      .filter(event => event.severity != undefined && event.severity != 'info')\r\n      .map(event => ({\r\n        id: event.id,\r\n        type: event.severity as 'warning' | 'error' | 'critical',\r\n        message: typeof event.data.message === 'string' && event.data.message !== '' ? event.data.message : 'System event occurred',\r\n        timestamp: event.timestamp,\r\n        acknowledged: false\r\n      }))\r\n      .slice(0, 5); // Keep only latest 5 alerts\r\n\r\n    setAlerts(newAlerts);\r\n  }, [recentEvents]);\r\n\r\n  // Calculate system metrics\r\n  const systemMetrics: StatusMetric[] = [\r\n    {\r\n      label: 'Connection Status',\r\n      value: (() => {\r\n        if (isConnected) return 'Connected';\r\n        if (isConnecting) return 'Connecting...';\r\n        return 'Disconnected';\r\n      })(),\r\n      status: (() => {\r\n        if (isConnected) return 'healthy';\r\n        if (connectionError == undefined) return 'warning';\r\n        return 'error';\r\n      })(),\r\n      icon: isConnected ? <Wifi className=\"h-4 w-4\" /> : <WifiOff className=\"h-4 w-4\" />\r\n    },\r\n    {\r\n      label: 'Active Jobs',\r\n      value: latestMetrics?.scrapingJobs.active ?? 0,\r\n      status: (latestMetrics?.scrapingJobs.active ?? 0) > 0 ? 'healthy' : 'warning',\r\n      icon: <Activity className=\"h-4 w-4\" />\r\n    },\r\n    {\r\n      label: 'System Health',\r\n      value: latestMetrics?.systemHealth.status ?? 'unknown',\r\n      status: (() => {\r\n        const healthStatus = latestMetrics?.systemHealth.status;\r\n        if (healthStatus === 'healthy') return 'healthy';\r\n        if (healthStatus === 'warning') return 'warning';\r\n        return 'error';\r\n      })(),\r\n      icon: <Server className=\"h-4 w-4\" />\r\n    },\r\n    {\r\n      label: 'Data Quality',\r\n      value: latestMetrics?.dataQuality.averageScore ?? 0,\r\n      unit: '%',\r\n      trend: 'stable',\r\n      status: (() => {\r\n        const score = latestMetrics?.dataQuality.averageScore ?? 0;\r\n        if (score >= 80) return 'healthy';\r\n        if (score >= 60) return 'warning';\r\n        return 'error';\r\n      })(),\r\n      icon: <Database className=\"h-4 w-4\" />\r\n    }\r\n  ];\r\n\r\n\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'healthy': { return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n      }\r\n      case 'warning': { return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\r\n      }\r\n      case 'error': { return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\r\n      }\r\n      default: { return <Clock className=\"h-4 w-4 text-gray-600\" />;\r\n      }\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend?: string) => {\r\n    switch (trend) {\r\n      case 'up': { return <TrendingUp className=\"h-3 w-3 text-green-600\" />;\r\n      }\r\n      case 'down': { return <TrendingDown className=\"h-3 w-3 text-red-600\" />;\r\n      }\r\n      default: { return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const acknowledgeAlert = (alertId: string) => {\r\n    setAlerts(prev => prev.map(alert => \r\n      alert.id === alertId ? { ...alert, acknowledged: true } : alert\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Connection Status Header */}\r\n      <Card className={`border-l-4 ${isConnected ? 'border-l-green-500' : 'border-l-red-500'}`}>\r\n        <CardHeader className=\"pb-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <Zap className=\"h-5 w-5\" />\r\n              Real-time System Status\r\n            </CardTitle>\r\n            <div className=\"flex items-center gap-2\">\r\n              {isConnected && (\r\n                <div className=\"flex items-center gap-1 text-sm text-green-600\">\r\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\r\n                  Live\r\n                </div>\r\n              )}\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={isConnected ? disconnect : connect}\r\n                disabled={isConnecting}\r\n              >\r\n                <RefreshCw className={`h-4 w-4 mr-2 ${isConnecting ? 'animate-spin' : ''}`} />\r\n                {(() => {\r\n                  if (isConnected) return 'Disconnect';\r\n                  if (isConnecting) return 'Connecting...';\r\n                  return 'Connect';\r\n                })()}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          {lastEventTime && (\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              Last update: {lastEventTime.toLocaleTimeString()}\r\n            </p>\r\n          )}\r\n        </CardHeader>\r\n        <CardContent>\r\n          {connectionError != undefined && (\r\n            <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md\">\r\n              <p className=\"text-sm text-red-600\">{connectionError}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* System Metrics Grid */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            {systemMetrics.map((metric, index) => (\r\n              <div\r\n                key={index}\r\n                className={`p-3 rounded-lg border ${getStatusColor(metric.status)}`}\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {metric.icon}\r\n                    <span className=\"text-sm font-medium\">{metric.label}</span>\r\n                  </div>\r\n                  {getStatusIcon(metric.status)}\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-lg font-bold\">\r\n                    {metric.value}{metric.unit}\r\n                  </span>\r\n                  {getTrendIcon(metric.trend)}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Scraping Jobs Progress */}\r\n          {latestMetrics?.scrapingJobs && (\r\n            <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n              <h4 className=\"text-sm font-medium text-blue-900 mb-2\">Scraping Jobs Status</h4>\r\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n                <div>\r\n                  <span className=\"text-blue-600\">Active:</span>\r\n                  <span className=\"ml-1 font-medium\">{latestMetrics.scrapingJobs.active}</span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-green-600\">Completed:</span>\r\n                  <span className=\"ml-1 font-medium\">{latestMetrics.scrapingJobs.completed}</span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-yellow-600\">Pending:</span>\r\n                  <span className=\"ml-1 font-medium\">{latestMetrics.scrapingJobs.pending}</span>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-red-600\">Failed:</span>\r\n                  <span className=\"ml-1 font-medium\">{latestMetrics.scrapingJobs.failed}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* System Alerts */}\r\n          {alerts.length > 0 && (\r\n            <div className=\"mt-4\">\r\n              <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Recent Alerts</h4>\r\n              <div className=\"space-y-2\">\r\n                {alerts.slice(0, 3).map((alert) => (\r\n                  <div\r\n                    key={alert.id}\r\n                    className={`p-2 rounded border-l-4 ${(() => {\r\n                      if (alert.type === 'critical') return 'border-l-red-500 bg-red-50';\r\n                      if (alert.type === 'error') return 'border-l-red-400 bg-red-50';\r\n                      return 'border-l-yellow-400 bg-yellow-50';\r\n                    })()} ${alert.acknowledged === true ? 'opacity-50' : ''}`}\r\n                  >\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Badge variant={alert.type === 'critical' ? 'destructive' : 'secondary'}>\r\n                          {alert.type}\r\n                        </Badge>\r\n                        <span className=\"text-sm\">{alert.message}</span>\r\n                      </div>\r\n                      {alert.acknowledged !== true && (\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={() => acknowledgeAlert(alert.id)}\r\n                        >\r\n                          Acknowledge\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                    <p className=\"text-xs text-gray-500 mt-1\">\r\n                      {new Date(alert.timestamp).toLocaleString()}\r\n                    </p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              {alerts.length > 3 && (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  className=\"mt-2\"\r\n                  onClick={() => setShowDetails(!showDetails)}\r\n                >\r\n                  {showDetails ? 'Hide' : 'Show'} {alerts.length - 3} more alerts\r\n                </Button>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {/* Event Controls */}\r\n          <div className=\"mt-4 flex items-center gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={clearEvents}\r\n              disabled={recentEvents.length === 0}\r\n            >\r\n              Clear Events ({recentEvents.length})\r\n            </Button>\r\n            <Badge variant=\"secondary\">\r\n              {recentEvents.length} events in buffer\r\n            </Badge>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\AlertDialog.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\AspectRatio.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\ContextMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\DropdownMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\HoverCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\InputOtp.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\NavigationMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\RadioGroup.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\ScrollArea.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\ToggleGroup.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\UseMobile.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\UseToast.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (55). Maximum allowed is 50.",
        "line": 65,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 119,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from 'react';\r\n\r\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\r\n\r\nconst TOAST_LIMIT = 1;\r\nconst TOAST_REMOVE_DELAY = 1_000_000;\r\n\r\ntype ToasterToast = ToastProps & {\r\n  id: string;\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  action?: ToastActionElement;\r\n};\r\n\r\nlet count = 0;\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\r\n  return count.toString();\r\n}\r\n\r\ntype Action =\r\n  | {\r\n      type: 'ADD_TOAST';\r\n      toast: ToasterToast;\r\n    }\r\n  | {\r\n      type: 'UPDATE_TOAST';\r\n      toast: Partial<ToasterToast>;\r\n    }\r\n  | {\r\n      type: 'DISMISS_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    }\r\n  | {\r\n      type: 'REMOVE_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    };\r\n\r\ninterface State {\r\n  toasts: ToasterToast[];\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return;\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId);\r\n    dispatch({\r\n      type: 'REMOVE_TOAST',\r\n      toastId: toastId,\r\n    });\r\n  }, TOAST_REMOVE_DELAY);\r\n\r\n  toastTimeouts.set(toastId, timeout);\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'ADD_TOAST': {\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_TOAST': {\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\r\n      };\r\n    }\r\n\r\n    case 'DISMISS_TOAST': {\r\n      const { toastId } = action;\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId != undefined && toastId !== '') {\r\n        addToRemoveQueue(toastId);\r\n      } else {\r\n        for (const toast of state.toasts) {\r\n          addToRemoveQueue(toast.id);\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t,\r\n        ),\r\n      };\r\n    }\r\n    case 'REMOVE_TOAST': {\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst listeners: Array<(state: State) => void> = [];\r\n\r\nlet memoryState: State = { toasts: [] };\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action);\r\n  for (const listener of listeners) {\r\n    listener(memoryState);\r\n  }\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, 'id'>;\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId();\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: 'UPDATE_TOAST',\r\n      toast: { ...props, id },\r\n    });\r\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\r\n\r\n  dispatch({\r\n    type: 'ADD_TOAST',\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open: boolean) => {\r\n        if (!open) dismiss();\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  };\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState);\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState);\r\n    return () => {\r\n      const index = listeners.indexOf(setState);\r\n      if (index !== -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\r\n  };\r\n}\r\n\r\nexport { useToast, toast };\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\accordion.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/deprecation",
        "severity": 2,
        "message": "'ElementRef' is deprecated.",
        "line": 15,
        "column": 9,
        "nodeType": null,
        "messageId": "deprecation",
        "endLine": 15,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\alert.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\avatar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\badge.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\breadcrumb.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\calendar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\card.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\carousel.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (91). Maximum allowed is 50.",
        "line": 48,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 138,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport * as React from 'react';\r\n// @ts-expect-error TS(2792): Cannot find module 'embla-carousel-react'. Did you... Remove this comment to see the full error message\r\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { Button } from '@/components/ui/button';\r\n\r\ntype CarouselApi = UseEmblaCarouselType[1];\r\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\r\ntype CarouselOptions = UseCarouselParameters[0];\r\ntype CarouselPlugin = UseCarouselParameters[1];\r\n\r\ntype CarouselProps = {\r\n  opts?: CarouselOptions;\r\n  plugins?: CarouselPlugin;\r\n  orientation?: 'horizontal' | 'vertical';\r\n  setApi?: (api: CarouselApi) => void;\r\n};\r\n\r\ntype CarouselContextProps = {\r\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\r\n  api: ReturnType<typeof useEmblaCarousel>[1];\r\n  scrollPrev: () => void;\r\n  scrollNext: () => void;\r\n  canScrollPrev: boolean;\r\n  canScrollNext: boolean;\r\n} & CarouselProps;\r\n\r\nconst CarouselContext = React.createContext<CarouselContextProps | undefined>(undefined);\r\n\r\nfunction useCarousel() {\r\n  const context = React.useContext(CarouselContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useCarousel must be used within a <Carousel />');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst Carousel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\r\n>(({ orientation = 'horizontal', opts, setApi, plugins, className, children, ...props }, ref) => {\r\n  const [carouselRef, api] = useEmblaCarousel(\r\n    {\r\n      // @ts-expect-error TS(2698): Spread types may only be created from object types... Remove this comment to see the full error message\r\n      ...opts,\r\n      axis: orientation === 'horizontal' ? 'x' : 'y',\r\n    },\r\n    plugins,\r\n  );\r\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false);\r\n  const [canScrollNext, setCanScrollNext] = React.useState(false);\r\n\r\n  const onSelect = React.useCallback((api: CarouselApi) => {\r\n    if (!api) {\r\n      return;\r\n    }\r\n\r\n    setCanScrollPrev(api.canScrollPrev());\r\n    setCanScrollNext(api.canScrollNext());\r\n  }, []);\r\n\r\n  const scrollPrev = React.useCallback(() => {\r\n    api?.scrollPrev();\r\n  }, [api]);\r\n\r\n  const scrollNext = React.useCallback(() => {\r\n    api?.scrollNext();\r\n  }, [api]);\r\n\r\n  const handleKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n      if (event.key === 'ArrowLeft') {\r\n        event.preventDefault();\r\n        scrollPrev();\r\n      } else if (event.key === 'ArrowRight') {\r\n        event.preventDefault();\r\n        scrollNext();\r\n      }\r\n    },\r\n    [scrollPrev, scrollNext],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (!api || !setApi) {\r\n      return;\r\n    }\r\n\r\n    setApi(api);\r\n  }, [api, setApi]);\r\n\r\n  React.useEffect(() => {\r\n    if (!api) {\r\n      return;\r\n    }\r\n\r\n    onSelect(api);\r\n    api.on('reInit', onSelect);\r\n    api.on('select', onSelect);\r\n\r\n    return () => {\r\n      api?.off('select', onSelect);\r\n    };\r\n  }, [api, onSelect]);\r\n\r\n  return (\r\n    <CarouselContext.Provider\r\n      value={{\r\n        carouselRef,\r\n        api: api,\r\n        opts,\r\n        // @ts-expect-error TS(2571): Object is of type 'unknown'.\r\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\r\n        scrollPrev,\r\n        scrollNext,\r\n        canScrollPrev,\r\n        canScrollNext,\r\n      }}\r\n    >\r\n      <div\r\n        ref={ref}\r\n        onKeyDownCapture={handleKeyDown}\r\n        className={cn('relative', className)}\r\n        role=\"region\"\r\n        aria-roledescription=\"carousel\"\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    </CarouselContext.Provider>\r\n  );\r\n});\r\nCarousel.displayName = 'Carousel';\r\n\r\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\r\n  ({ className, ...props }, ref) => {\r\n    const { carouselRef, orientation } = useCarousel();\r\n\r\n    return (\r\n      <div ref={carouselRef} className=\"overflow-hidden\">\r\n        <div\r\n          ref={ref}\r\n          className={cn(\r\n            'flex',\r\n            orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\r\n            className,\r\n          )}\r\n          {...props}\r\n        />\r\n      </div>\r\n    );\r\n  },\r\n);\r\nCarouselContent.displayName = 'CarouselContent';\r\n\r\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\r\n  ({ className, ...props }, ref) => {\r\n    const { orientation } = useCarousel();\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        role=\"group\"\r\n        aria-roledescription=\"slide\"\r\n        className={cn(\r\n          'min-w-0 shrink-0 grow-0 basis-full',\r\n          orientation === 'horizontal' ? 'pl-4' : 'pt-4',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nCarouselItem.displayName = 'CarouselItem';\r\n\r\nconst CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\r\n  // @ts-expect-error TS(2339): Property 'variant' does not exist on type 'Omit<Bu... Remove this comment to see the full error message\r\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\r\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; defaultChecked?: bool... Remove this comment to see the full error message\r\n        variant={variant}\r\n        size={size}\r\n        className={cn(\r\n          'absolute  h-8 w-8 rounded-full',\r\n          orientation === 'horizontal'\r\n            ? '-left-12 top-1/2 -translate-y-1/2'\r\n            : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\r\n          className,\r\n        )}\r\n        disabled={!canScrollPrev}\r\n        onClick={scrollPrev}\r\n        {...props}\r\n      >\r\n        <ArrowLeft className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Previous slide</span>\r\n      </Button>\r\n    );\r\n  },\r\n);\r\nCarouselPrevious.displayName = 'CarouselPrevious';\r\n\r\nconst CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\r\n  // @ts-expect-error TS(2339): Property 'variant' does not exist on type 'Omit<Bu... Remove this comment to see the full error message\r\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\r\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; defaultChecked?: bool... Remove this comment to see the full error message\r\n        variant={variant}\r\n        size={size}\r\n        className={cn(\r\n          'absolute h-8 w-8 rounded-full',\r\n          orientation === 'horizontal'\r\n            ? '-right-12 top-1/2 -translate-y-1/2'\r\n            : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\r\n          className,\r\n        )}\r\n        disabled={!canScrollNext}\r\n        onClick={scrollNext}\r\n        {...props}\r\n      >\r\n        <ArrowRight className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Next slide</span>\r\n      </Button>\r\n    );\r\n  },\r\n);\r\nCarouselNext.displayName = 'CarouselNext';\r\n\r\nexport {\r\n  type CarouselApi,\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselPrevious,\r\n  CarouselNext,\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\chart.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (142). Maximum allowed is 50.",
        "line": 113,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 254,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (77). Maximum allowed is 50.",
        "line": 174,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 250,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as RechartsPrimitive from 'recharts';\r\n// Remove unused imports\r\n// import {\r\n//   type Payload,\r\n//   type NameType,\r\n//   type ValueType,\r\n// } from \"recharts/types/component/DefaultTooltipContent\"\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\n// Format: { THEME_NAME: CSS_SELECTOR }\r\nconst THEMES = { light: '', dark: '.dark' } as const;\r\n\r\nexport type ChartConfig = {\r\n  [k in string]: {\r\n    label?: React.ReactNode;\r\n    icon?: React.ComponentType;\r\n  } & (\r\n    | { color?: string; theme?: never }\r\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\r\n  );\r\n};\r\n\r\ntype ChartContextProps = {\r\n  config: ChartConfig;\r\n};\r\n\r\nconst ChartContext = React.createContext<ChartContextProps | undefined>(undefined);\r\n\r\nfunction useChart() {\r\n  const context = React.useContext(ChartContext);\r\n\r\n  if (context == undefined) {\r\n    throw new Error('useChart must be used within a <ChartContainer />');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst ChartContainer = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & {\r\n    config: ChartConfig;\r\n    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\r\n  }\r\n>(({ id, className, children, config, ...props }, ref) => {\r\n  const uniqueId = React.useId();\r\n  const chartId = `chart-${id ?? uniqueId.replaceAll(':', '')}`;\r\n\r\n  return (\r\n    <ChartContext.Provider value={{ config }}>\r\n      <div\r\n        data-chart={chartId}\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        <ChartStyle id={chartId} config={config} />\r\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\r\n      </div>\r\n    </ChartContext.Provider>\r\n  );\r\n});\r\nChartContainer.displayName = 'Chart';\r\n\r\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\r\n  const colorConfig = Object.entries(config).filter(([_, itemConfig]) => (itemConfig.theme ?? itemConfig.color) !== undefined);\r\n  if (colorConfig.length === 0) {\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <style\r\n      dangerouslySetInnerHTML={{\r\n        __html: Object.entries(THEMES)\r\n          .map(\r\n            ([theme, prefix]) => `\r\n${prefix} [data-chart=${id}] {\r\n${colorConfig\r\n  .map(([key, itemConfig]) => {\r\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ?? itemConfig.color;\r\n    return color !== undefined && color !== '' ? `  --color-${key}: ${color};` : undefined;\r\n  })\r\n  .join('\\n')}\r\n}\r\n`,\r\n          )\r\n          .join('\\n'),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ChartTooltip = RechartsPrimitive.Tooltip;\r\n\r\nconst ChartTooltipContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\r\n    React.ComponentProps<'div'> & {\r\n      hideLabel?: boolean;\r\n      hideIndicator?: boolean;\r\n      indicator?: 'line' | 'dot' | 'dashed';\r\n      nameKey?: string;\r\n      labelKey?: string;\r\n    }\r\n>(\r\n  (\r\n    {\r\n      active,\r\n      payload,\r\n      className,\r\n      indicator = 'dot',\r\n      hideLabel = false,\r\n      hideIndicator = false,\r\n      label,\r\n      labelFormatter,\r\n      labelClassName,\r\n      formatter,\r\n      color,\r\n      nameKey,\r\n      labelKey,\r\n    },\r\n    ref,\r\n  ) => {\r\n    const { config } = useChart();\r\n\r\n    const tooltipLabel = React.useMemo(() => {\r\n      if (hideLabel === true || (payload?.length ?? 0) === 0) {\r\n        return;\r\n      }\r\n\r\n      const [item] = payload;\r\n       \r\n      const key = `${labelKey ?? (item as { dataKey?: string; name?: string }).dataKey ?? (item as { dataKey?: string; name?: string }).name ?? 'value'}`;\r\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n      const value =\r\n        (labelKey == undefined && typeof label === 'string') ? config[label]?.label ?? label : itemConfig?.label;\r\n\r\n      if (labelFormatter) {\r\n        return (\r\n          <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>\r\n        );\r\n      }\r\n\r\n      if (value === undefined || value === null || value === '') {\r\n        return;\r\n      }\r\n\r\n      return <div className={cn('font-medium', labelClassName)}>{value}</div>;\r\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\r\n\r\n    if (active !== true || (payload?.length ?? 0) === 0) {\r\n      return;\r\n    }\r\n\r\n    const nestLabel = payload.length === 1 && indicator !== 'dot';\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\r\n          className,\r\n        )}\r\n      >\r\n        {nestLabel ? undefined : tooltipLabel}\r\n        <div className=\"grid gap-1.5\">\r\n          {payload.map((item: unknown, index: number) => {\r\n            const itemData = item as { name?: string; dataKey?: string; payload?: unknown; color?: string; value?: number };\r\n            const key = `${nameKey ?? itemData.name ?? itemData.dataKey ?? 'value'}`;\r\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n            const indicatorColor =\r\n              color ??\r\n              (itemData.payload !== undefined && itemData.payload !== null && typeof itemData.payload === 'object' && 'fill' in itemData.payload\r\n                ? String((itemData.payload as Record<string, unknown>).fill)\r\n                : undefined) ??\r\n              itemData.color;\r\n\r\n            return (\r\n              <div\r\n                key={itemData.dataKey}\r\n                className={cn(\r\n                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\r\n                  indicator === 'dot' && 'items-center',\r\n                )}\r\n              >\r\n                {' '}\r\n                {(() => {\r\n                  if (formatter !== undefined && itemData?.value !== undefined && itemData.name !== undefined && itemData.name !== '') {\r\n                    const payloadArray = Array.isArray(itemData.payload)\r\n                      ? (itemData.payload as Record<string, unknown>[])\r\n                      : [];\r\n                    return <>{formatter(itemData.value, itemData.name, item, index, payloadArray)}</>;\r\n                  }\r\n                  return (\r\n                    <>\r\n                      {itemConfig?.icon ? (\r\n                        <itemConfig.icon />\r\n                      ) : (\r\n                        !hideIndicator && (\r\n                          <div\r\n                            className={cn(\r\n                              'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',\r\n                              {\r\n                                'h-2.5 w-2.5': indicator === 'dot',\r\n                                'w-1': indicator === 'line',\r\n                                'w-0 border-[1.5px] border-dashed bg-transparent':\r\n                                  indicator === 'dashed',\r\n                                'my-0.5': nestLabel && indicator === 'dashed',\r\n                              },\r\n                            )}\r\n                            style={\r\n                              {\r\n                                '--color-bg': indicatorColor,\r\n                                '--color-border': indicatorColor,\r\n                              } as React.CSSProperties\r\n                            }\r\n                          />\r\n                        )\r\n                      )}\r\n                      <div\r\n                        className={cn(\r\n                          'flex flex-1 justify-between leading-none',\r\n                          nestLabel ? 'items-end' : 'items-center',\r\n                        )}\r\n                      >\r\n                        <div className=\"grid gap-1.5\">\r\n                          {nestLabel ? tooltipLabel : undefined}\r\n                          <span className=\"text-muted-foreground\">\r\n                            {itemConfig?.label ?? itemData.name}\r\n                          </span>\r\n                        </div>\r\n                        {itemData.value !== undefined && itemData.value !== 0 && (\r\n                          <span className=\"font-mono font-medium tabular-nums text-foreground\">\r\n                            {itemData.value.toLocaleString()}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </>\r\n                  );\r\n                })()}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nChartTooltipContent.displayName = 'ChartTooltip';\r\n\r\nconst ChartLegend = RechartsPrimitive.Legend;\r\n\r\nconst ChartLegendContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> &\r\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\r\n      hideIcon?: boolean;\r\n      nameKey?: string;\r\n    }\r\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\r\n  const { config } = useChart();\r\n\r\n  if ((payload?.length ?? 0) === 0) {\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={cn(\r\n        'flex items-center justify-center gap-4',\r\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\r\n        className,\r\n      )}\r\n    >\r\n      {payload.map((item: unknown) => {\r\n        const itemData = item as { dataKey?: string; value?: string; color?: string };\r\n        const keyValue = nameKey ?? (itemData.dataKey !== undefined && itemData.dataKey !== '' ? String(itemData.dataKey) : 'value');\r\n        const key = `${keyValue}`;\r\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n\r\n        return (\r\n          <div\r\n            key={itemData.value as string}\r\n            className={cn(\r\n              'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground',\r\n            )}\r\n          >\r\n            {itemConfig?.icon && !hideIcon ? (\r\n              <itemConfig.icon />\r\n            ) : (\r\n              <div\r\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\r\n                style={{\r\n                  backgroundColor: itemData.color !== undefined && itemData.color !== '' ? String(itemData.color) : undefined,\r\n                }}\r\n              />\r\n            )}\r\n            {itemConfig?.label}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n});\r\nChartLegendContent.displayName = 'ChartLegend';\r\n\r\n// Helper to extract item config from a payload.\r\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\r\n  if (typeof payload !== 'object' || payload == undefined) {\r\n    return;\r\n  }\r\n\r\n  const payloadPayload =\r\n    'payload' in payload && typeof (payload as Record<string, unknown>).payload === 'object' && (payload as Record<string, unknown>).payload !== undefined\r\n      ? (payload as Record<string, unknown>).payload\r\n      : undefined;\r\n\r\n  let configLabelKey: string = key;\r\n\r\n  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\r\n    configLabelKey = payload[key as keyof typeof payload] as string;\r\n  } else if (\r\n    payloadPayload !== undefined && payloadPayload !== null &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\r\n  ) {\r\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\r\n  }\r\n\r\n  return configLabelKey in config ? config[configLabelKey] : config[key];\r\n}\r\n\r\nexport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n  ChartLegend,\r\n  ChartLegendContent,\r\n  ChartStyle,\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\checkbox.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\collapsible.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\command.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\dataQualityCharts.tsx",
    "messages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 67,
        "column": 10,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 67,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [1751, 1755], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [1751, 1755], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (60). Maximum allowed is 50.",
        "line": 71,
        "column": 80,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 130,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React from 'react';\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n\r\n// SOTA color scheme for data quality categories\r\nconst QUALITY_COLORS = {\r\n  high: '#22c55e',    // Green for high quality (ΓëÑ80%)\r\n  medium: '#f59e0b',  // Amber for medium quality (60-79%)\r\n  low: '#ef4444',     // Red for low quality (<60%)\r\n};\r\n\r\ninterface DataQualityStats {\r\n  total_trucks: number;\r\n  avg_quality_score: number;\r\n  high_quality_count: number;\r\n  medium_quality_count: number;\r\n  low_quality_count: number;\r\n  verified_count: number;\r\n  pending_count: number;\r\n  flagged_count: number;\r\n}\r\n\r\ninterface DataQualityChartsProps {\r\n  qualityStats: DataQualityStats;\r\n}\r\n\r\n// Custom tooltip for better accessibility and UX\r\ninterface TooltipProps {\r\n  active?: boolean;\r\n  payload?: Array<{\r\n    value: number;\r\n    payload: {\r\n      percentage?: string;\r\n    };\r\n  }>;\r\n  label?: string;\r\n}\r\n\r\nconst CustomTooltip = ({ active, payload, label }: TooltipProps) => {\r\n  if (active === true && payload != undefined && payload.length > 0) {\r\n    return (\r\n      <div\r\n        className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\"\r\n        role=\"status\"\r\n        aria-live=\"assertive\"\r\n      >\r\n        <p className=\"font-medium\">{`${label ?? 'Unknown'}: ${payload[0].value}`}</p>\r\n        <p className=\"text-sm text-gray-600\">\r\n          {payload[0].payload.percentage != undefined && payload[0].payload.percentage !== '' && `${payload[0].payload.percentage}% of total`}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\n// Quality Distribution Pie Chart Component\r\nconst QualityDistributionChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\r\n  const data = [\r\n    {\r\n      name: 'High Quality',\r\n      value: qualityStats.high_quality_count,\r\n      percentage: ((qualityStats.high_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Medium Quality',\r\n      value: qualityStats.medium_quality_count,\r\n      percentage: ((qualityStats.medium_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Low Quality',\r\n      value: qualityStats.low_quality_count,\r\n      percentage: ((qualityStats.low_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Quality Distribution</CardTitle>\r\n        <CardDescription>\r\n          Breakdown of food trucks by data quality categories\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <PieChart>\r\n            <Pie\r\n              data={data}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              labelLine={false}\r\n              label={({\r\n                name,\r\n                percentage\r\n              }: {\r\n                name?: string;\r\n                percentage?: string;\r\n              }) => `${name ?? 'Unknown'}: ${percentage ?? '0'}%`}\r\n              outerRadius={80}\r\n              fill=\"#8884d8\"\r\n              dataKey=\"value\"\r\n            >\r\n              {data.map((entry, index) => (\r\n                <Cell \r\n                  key={`cell-${index}`} \r\n                  fill={Object.values(QUALITY_COLORS)[index]} \r\n                />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip content={<CustomTooltip />} />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Verification Status Bar Chart Component\r\nconst VerificationStatusChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\r\n  const data = [\r\n    {\r\n      name: 'Verified',\r\n      count: qualityStats.verified_count,\r\n      percentage: ((qualityStats.verified_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Pending',\r\n      count: qualityStats.pending_count,\r\n      percentage: ((qualityStats.pending_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n    {\r\n      name: 'Flagged',\r\n      count: qualityStats.flagged_count,\r\n      percentage: ((qualityStats.flagged_count / qualityStats.total_trucks) * 100).toFixed(1),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Verification Status</CardTitle>\r\n        <CardDescription>\r\n          Current verification status of all food trucks\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip content={<CustomTooltip />} />\r\n            <Bar dataKey=\"count\" fill=\"#3b82f6\" />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Helper function to get score color\r\nconst getScoreColor = (score: number): string => {\r\n  if (score >= 0.8) return 'text-green-600';\r\n  if (score >= 0.6) return 'text-yellow-600';\r\n  return 'text-red-600';\r\n};\r\n\r\n// Helper function to get quality threshold label\r\nconst getQualityThreshold = (score: number): string => {\r\n  if (score >= 0.8) return 'High';\r\n  if (score >= 0.6) return 'Medium';\r\n  return 'Low';\r\n};\r\n\r\n// Quality Score Overview Component\r\nconst QualityScoreOverview: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\r\n  const averageScore = (qualityStats.avg_quality_score * 100).toFixed(1);\r\n  const scoreColor = getScoreColor(qualityStats.avg_quality_score);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Overall Quality Score</CardTitle>\r\n        <CardDescription>\r\n          Average data quality score across all food trucks\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className={`text-6xl font-bold ${scoreColor}`}>\r\n            {averageScore}%\r\n          </div>\r\n          <p className=\"text-sm text-muted-foreground mt-2\">\r\n            Based on {qualityStats.total_trucks} food trucks\r\n          </p>\r\n          <div className=\"mt-4 text-sm\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span>Quality Threshold:</span>\r\n              <span className=\"font-medium\">\r\n                {getQualityThreshold(qualityStats.avg_quality_score)}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Main Data Quality Charts Component\r\nexport const DataQualityCharts: React.FC<DataQualityChartsProps> = ({ qualityStats }) => {\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n      <QualityScoreOverview qualityStats={qualityStats} />\r\n      <QualityDistributionChart qualityStats={qualityStats} />\r\n      <VerificationStatusChart qualityStats={qualityStats} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataQualityCharts;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\dialog.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\drawer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\form.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\input.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\label.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\menubar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\pagination.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\popover.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\progress.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\resizable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\select.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\separator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\sheet.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\sidebar.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (96). Maximum allowed is 50.",
        "line": 57,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 152,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (92). Maximum allowed is 50.",
        "line": 164,
        "column": 3,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 255,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport * as React from 'react';\r\n// @ts-expect-error TS(2792): Cannot find module '@radix-ui/react-slot'. Did you... Remove this comment to see the full error message\r\nimport { Slot } from '@radix-ui/react-slot';\r\n// @ts-expect-error TS(2792): Cannot find module 'class-variance-authority'. Did... Remove this comment to see the full error message\r\nimport { VariantProps, cva } from 'class-variance-authority';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { PanelLeft } from 'lucide-react';\r\n\r\nimport { useIsMobile } from '@/hooks/UseMobile';\r\nimport { cn } from '@/lib/utils';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Sheet, SheetContent } from '@/components/ui/sheet';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst SIDEBAR_COOKIE_NAME = 'sidebar:state';\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\r\nconst SIDEBAR_WIDTH = '16rem';\r\nconst SIDEBAR_WIDTH_MOBILE = '18rem';\r\nconst SIDEBAR_WIDTH_ICON = '3rem';\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b';\r\n\r\ntype SidebarContext = {\r\n  state: 'expanded' | 'collapsed';\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  openMobile: boolean;\r\n  setOpenMobile: (open: boolean) => void;\r\n  isMobile: boolean;\r\n  toggleSidebar: () => void;\r\n};\r\n\r\nconst SidebarContext = React.createContext<SidebarContext | undefined>(undefined);\r\n\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext);\r\n  if (!context) {\r\n    throw new Error('useSidebar must be used within a SidebarProvider.');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst SidebarProvider = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & {\r\n    defaultOpen?: boolean;\r\n    open?: boolean;\r\n    onOpenChange?: (open: boolean) => void;\r\n  }\r\n>(\r\n  (\r\n    {\r\n      defaultOpen = true,\r\n      open: openProp,\r\n      onOpenChange: setOpenProp,\r\n      className,\r\n      style,\r\n      children,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const isMobile = useIsMobile();\r\n    const [openMobile, setOpenMobile] = React.useState(false);\r\n\r\n    // This is the internal state of the sidebar.\r\n    // We use openProp and setOpenProp for control from outside the component.\r\n    const [_open, _setOpen] = React.useState(defaultOpen);\r\n    const open = openProp ?? _open;\r\n    const setOpen = React.useCallback(\r\n      (value: boolean | ((value: boolean) => boolean)) => {\r\n        const openState = typeof value === 'function' ? value(open) : value;\r\n        if (setOpenProp) {\r\n          setOpenProp(openState);\r\n        } else {\r\n          _setOpen(openState);\r\n        }\r\n\r\n        // This sets the cookie to keep the sidebar state.\r\n        Cookies.set(SIDEBAR_COOKIE_NAME, String(openState), {\r\n          path: '/',\r\n          expires: SIDEBAR_COOKIE_MAX_AGE / (60 * 60 * 24), // Convert seconds to days\r\n        });\r\n      },\r\n      [setOpenProp, open],\r\n    );\r\n\r\n    // Helper to toggle the sidebar.\r\n    const toggleSidebar = React.useCallback(() => {\r\n      return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\r\n    }, [isMobile, setOpen, setOpenMobile]);\r\n\r\n    // Adds a keyboard shortcut to toggle the sidebar.\r\n    React.useEffect(() => {\r\n      const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\r\n          event.preventDefault();\r\n          toggleSidebar();\r\n        }\r\n      };\r\n\r\n      globalThis.addEventListener('keydown', handleKeyDown);\r\n      return () => globalThis.removeEventListener('keydown', handleKeyDown);\r\n    }, [toggleSidebar]);\r\n\r\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n    // This makes it easier to style the sidebar with Tailwind classes.\r\n    const state = open ? 'expanded' : 'collapsed';\r\n\r\n    const contextValue = React.useMemo<SidebarContext>(\r\n      () => ({\r\n        state,\r\n        open,\r\n        setOpen,\r\n        isMobile,\r\n        openMobile,\r\n        setOpenMobile,\r\n        toggleSidebar,\r\n      }),\r\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\r\n    );\r\n\r\n    return (\r\n      <SidebarContext.Provider value={contextValue}>\r\n        <TooltipProvider delayDuration={0}>\r\n          <div\r\n            style={\r\n              {\r\n                '--sidebar-width': SIDEBAR_WIDTH,\r\n                '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\r\n                ...style,\r\n              } as React.CSSProperties\r\n            }\r\n            className={cn(\r\n              'group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar',\r\n              className,\r\n            )}\r\n            ref={ref}\r\n            {...props}\r\n          >\r\n            {children}\r\n          </div>\r\n        </TooltipProvider>\r\n      </SidebarContext.Provider>\r\n    );\r\n  },\r\n);\r\nSidebarProvider.displayName = 'SidebarProvider';\r\n\r\nconst Sidebar = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & {\r\n    side?: 'left' | 'right';\r\n    variant?: 'sidebar' | 'floating' | 'inset';\r\n    collapsible?: 'offcanvas' | 'icon' | 'none';\r\n  }\r\n>(\r\n  (\r\n    {\r\n      side = 'left',\r\n      variant = 'sidebar',\r\n      collapsible = 'offcanvas',\r\n      className,\r\n      children,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\r\n\r\n    if (collapsible === 'none') {\r\n      return (\r\n        <div\r\n          className={cn(\r\n            'flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground',\r\n            className,\r\n          )}\r\n          ref={ref}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (isMobile) {\r\n      return (\r\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n          <SheetContent\r\n            data-sidebar=\"sidebar\"\r\n            data-mobile=\"true\"\r\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\r\n            style={\r\n              {\r\n                '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\r\n              } as React.CSSProperties\r\n            }\r\n            side={side}\r\n          >\r\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n          </SheetContent>\r\n        </Sheet>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className=\"group peer hidden md:block text-sidebar-foreground\"\r\n        data-state={state}\r\n        data-collapsible={state === 'collapsed' ? collapsible : ''}\r\n        data-variant={variant}\r\n        data-side={side}\r\n      >\r\n        {/* This is what handles the sidebar gap on desktop */}\r\n        <div\r\n          className={cn(\r\n            'duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear',\r\n            'group-data-[collapsible=offcanvas]:w-0',\r\n            'group-data-[side=right]:rotate-180',\r\n            variant === 'floating' || variant === 'inset'\r\n              ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]'\r\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon]',\r\n          )}\r\n        />\r\n        <div\r\n          className={cn(\r\n            'duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex',\r\n            side === 'left'\r\n              ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\r\n              : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\r\n            // Adjust the padding for floating and inset variants.\r\n            variant === 'floating' || variant === 'inset'\r\n              ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'\r\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',\r\n            className,\r\n          )}\r\n          {...props}\r\n        >\r\n          <div\r\n            data-sidebar=\"sidebar\"\r\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nSidebar.displayName = 'Sidebar';\r\n\r\nconst SidebarTrigger = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\r\n  ({ className, onClick, ...props }, ref) => {\r\n    const { toggleSidebar } = useSidebar();\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        data-sidebar=\"trigger\"\r\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; form?: string | undef... Remove this comment to see the full error message\r\n        variant=\"ghost\"\r\n        size=\"icon\"\r\n        className={cn('h-7 w-7', className)}\r\n        onClick={(event) => {\r\n          onClick?.(event);\r\n          toggleSidebar();\r\n        }}\r\n        {...props}\r\n      >\r\n        <PanelLeft />\r\n        <span className=\"sr-only\">Toggle Sidebar</span>\r\n      </Button>\r\n    );\r\n  },\r\n);\r\nSidebarTrigger.displayName = 'SidebarTrigger';\r\n\r\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<'button'>>(\r\n  ({ className, ...props }, ref) => {\r\n    const { toggleSidebar } = useSidebar();\r\n\r\n    return (\r\n      <button\r\n        ref={ref}\r\n        data-sidebar=\"rail\"\r\n        aria-label=\"Toggle Sidebar\"\r\n        tabIndex={-1}\r\n        onClick={toggleSidebar}\r\n        title=\"Toggle Sidebar\"\r\n        className={cn(\r\n          'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',\r\n          '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',\r\n          '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\r\n          'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar',\r\n          '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\r\n          '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarRail.displayName = 'SidebarRail';\r\n\r\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<'main'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <main\r\n        ref={ref}\r\n        className={cn(\r\n          'relative flex min-h-svh flex-1 flex-col bg-background',\r\n          'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarInset.displayName = 'SidebarInset';\r\n\r\nconst SidebarInput = React.forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <Input\r\n        ref={ref}\r\n        data-sidebar=\"input\"\r\n        className={cn(\r\n          'h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarInput.displayName = 'SidebarInput';\r\n\r\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-sidebar=\"header\"\r\n        className={cn('flex flex-col gap-2 p-2', className)}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarHeader.displayName = 'SidebarHeader';\r\n\r\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-sidebar=\"footer\"\r\n        className={cn('flex flex-col gap-2 p-2', className)}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarFooter.displayName = 'SidebarFooter';\r\n\r\nconst SidebarSeparator = React.forwardRef<HTMLDivElement, React.ComponentProps<typeof Separator>>(\r\n  ({ className, ...props }, ref) => (\r\n    <Separator\r\n      ref={ref}\r\n      data-sidebar=\"separator\"\r\n      className={cn('mx-2 w-auto bg-sidebar-border', className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarSeparator.displayName = 'SidebarSeparator';\r\n\r\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-sidebar=\"content\"\r\n        className={cn(\r\n          'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarContent.displayName = 'SidebarContent';\r\n\r\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-sidebar=\"group\"\r\n        className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarGroup.displayName = 'SidebarGroup';\r\n\r\nconst SidebarGroupLabel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : 'div';\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-label\"\r\n      className={cn(\r\n        'duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\r\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarGroupLabel.displayName = 'SidebarGroupLabel';\r\n\r\nconst SidebarGroupAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<'button'> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : 'button';\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-action\"\r\n      className={cn(\r\n        'absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\r\n        // Increases the hit area of the button on mobile.\r\n        'after:absolute after:-inset-2 after:md:hidden',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarGroupAction.displayName = 'SidebarGroupAction';\r\n\r\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"group-content\"\r\n      className={cn('w-full text-sm', className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarGroupContent.displayName = 'SidebarGroupContent';\r\n\r\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <ul\r\n      ref={ref}\r\n      data-sidebar=\"menu\"\r\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenu.displayName = 'SidebarMenu';\r\n\r\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <li\r\n      ref={ref}\r\n      data-sidebar=\"menu-item\"\r\n      className={cn('group/menu-item relative', className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenuItem.displayName = 'SidebarMenuItem';\r\n\r\nconst sidebarMenuButtonVariants = cva(\r\n  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\r\n        outline:\r\n          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\r\n      },\r\n      size: {\r\n        default: 'h-8 text-sm',\r\n        sm: 'h-7 text-xs',\r\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n);\r\n\r\nconst SidebarMenuButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<'button'> & {\r\n    asChild?: boolean;\r\n    isActive?: boolean;\r\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\r\n  } & VariantProps<typeof sidebarMenuButtonVariants>\r\n>(\r\n  (\r\n    {\r\n      asChild = false,\r\n      isActive = false,\r\n      variant = 'default',\r\n      size = 'default',\r\n      tooltip,\r\n      className,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    const { isMobile, state } = useSidebar();\r\n\r\n    const button = (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"menu-button\"\r\n        data-size={size}\r\n        data-active={isActive}\r\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\r\n        {...props}\r\n      />\r\n    );\r\n\r\n    if (tooltip == undefined) {\r\n      return button;\r\n    }\r\n\r\n    if (typeof tooltip === 'string') {\r\n      tooltip = {\r\n        children: tooltip,\r\n      };\r\n    }\r\n\r\n    return (\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n        <TooltipContent\r\n          side=\"right\"\r\n          align=\"center\"\r\n          hidden={state !== 'collapsed' || isMobile}\r\n          {...tooltip}\r\n        />\r\n      </Tooltip>\r\n    );\r\n  },\r\n);\r\nSidebarMenuButton.displayName = 'SidebarMenuButton';\r\n\r\nconst SidebarMenuAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<'button'> & {\r\n    asChild?: boolean;\r\n    showOnHover?: boolean;\r\n  }\r\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : 'button';\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-action\"\r\n      className={cn(\r\n        'absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0',\r\n        // Increases the hit area of the button on mobile.\r\n        'after:absolute after:-inset-2 after:md:hidden',\r\n        'peer-data-[size=sm]/menu-button:top-1',\r\n        'peer-data-[size=default]/menu-button:top-1.5',\r\n        'peer-data-[size=lg]/menu-button:top-2.5',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        showOnHover &&\r\n          'group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarMenuAction.displayName = 'SidebarMenuAction';\r\n\r\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-badge\"\r\n      className={cn(\r\n        'absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none',\r\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\r\n        'peer-data-[size=sm]/menu-button:top-1',\r\n        'peer-data-[size=default]/menu-button:top-1.5',\r\n        'peer-data-[size=lg]/menu-button:top-2.5',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenuBadge.displayName = 'SidebarMenuBadge';\r\n\r\nconst SidebarMenuSkeleton = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<'div'> & {\r\n    showIcon?: boolean;\r\n  }\r\n>(({ className, showIcon = false, ...props }, ref) => {\r\n  // Predictable width between 50 to 90%.\r\n\r\n  const width = React.useMemo(() => {\r\n    // Use a more predictable approach for skeleton width to avoid pseudorandom warning\r\n    const widths = ['50%', '60%', '70%', '80%', '90%'];\r\n    const index = Math.floor(Date.now() / 1000) % widths.length;\r\n    return widths[index];\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-skeleton\"\r\n      className={cn('rounded-md h-8 flex gap-2 px-2 items-center', className)}\r\n      {...props}\r\n    >\r\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\r\n      <Skeleton\r\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\r\n        data-sidebar=\"menu-skeleton-text\"\r\n        style={\r\n          {\r\n            '--skeleton-width': width,\r\n          } as React.CSSProperties\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n});\r\nSidebarMenuSkeleton.displayName = 'SidebarMenuSkeleton';\r\n\r\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <ul\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub\"\r\n      className={cn(\r\n        'mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenuSub.displayName = 'SidebarMenuSub';\r\n\r\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\r\n  ({ ...props }, ref) => <li ref={ref} {...props} />,\r\n);\r\nSidebarMenuSubItem.displayName = 'SidebarMenuSubItem';\r\n\r\nconst SidebarMenuSubButton = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentProps<'a'> & {\r\n    asChild?: boolean;\r\n    size?: 'sm' | 'md';\r\n    isActive?: boolean;\r\n  }\r\n>(({ asChild = false, size = 'md', isActive, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : 'a';\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(\r\n        'flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground',\r\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\r\n        size === 'sm' && 'text-xs',\r\n        size === 'md' && 'text-sm',\r\n        'group-data-[collapsible=icon]:hidden',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarMenuSubButton.displayName = 'SidebarMenuSubButton';\r\n\r\nexport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarGroup,\r\n  SidebarGroupAction,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarHeader,\r\n  SidebarInput,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuBadge,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSkeleton,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  SidebarProvider,\r\n  SidebarRail,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n  useSidebar,\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\simpleQualityPanel.tsx",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (93). Maximum allowed is 50.",
        "line": 13,
        "column": 70,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 105,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 31,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 31,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/strict-boolean-expressions",
        "severity": 2,
        "message": "Unexpected any value in conditional. An explicit comparison or type conversion is required.",
        "line": 34,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "conditionErrorAny",
        "endLine": 34,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "conditionFixCastBoolean",
            "fix": { "range": [1160, 1174], "text": "Boolean(result.success)" },
            "desc": "Explicitly convert value to a boolean (`Boolean(value)`)"
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .success on an `any` value.",
        "line": 34,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 34,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .data on an `any` value.",
        "line": 36,
        "column": 62,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 36,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .data on an `any` value.",
        "line": 36,
        "column": 101,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 36,
        "endColumn": 105,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.",
        "line": 40,
        "column": 25,
        "nodeType": "LogicalExpression",
        "messageId": "unsafeArgument",
        "endLine": 40,
        "endColumn": 79,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .error on an `any` value.",
        "line": 40,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 40,
        "endColumn": 37,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 65,
        "column": 21,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 65,
        "endColumn": 43,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { RefreshCw, Settings, Loader2 } from 'lucide-react';\r\n\r\ninterface SimpleQualityPanelProps {\r\n  onRefresh?: () => void;\r\n}\r\n\r\nexport const SimpleQualityPanel: React.FC<SimpleQualityPanelProps> = ({ onRefresh }) => {\r\n  const [isRecalculating, setIsRecalculating] = useState(false);\r\n\r\n  const handleRecalculateAll = async () => {\r\n    setIsRecalculating(true);\r\n\r\n    try {\r\n      const response = await fetch('/api/admin/data-quality', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          action: 'recalculate_all',\r\n        }),\r\n      });\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n      const result = await response.json();\r\n\r\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access\r\n      if (result.success) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-member-access\r\n        alert(`Quality scores updated successfully! ${result.data.updated} trucks updated, ${result.data.errors} errors.`);\r\n        onRefresh?.();\r\n      } else {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\r\n        throw new Error(result.error ?? 'Failed to recalculate quality scores');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error recalculating quality scores:', error);\r\n      alert('Failed to recalculate quality scores. Please try again.');\r\n    } finally {\r\n      setIsRecalculating(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Settings className=\"h-5 w-5\" />\r\n          Quality Management Operations\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Bulk operations for managing data quality scores across all food trucks\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <Button\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            onClick={handleRecalculateAll}\r\n            disabled={isRecalculating}\r\n            className=\"flex items-center gap-2\"\r\n            variant=\"default\"\r\n          >\r\n            {isRecalculating ? (\r\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n            ) : (\r\n              <RefreshCw className=\"h-4 w-4\" />\r\n            )}\r\n            Recalculate All Scores\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"border rounded-lg p-4 bg-blue-50/50\">\r\n          <h4 className=\"font-medium mb-2 text-blue-900\">Quality Score Thresholds</h4>\r\n          <div className=\"space-y-1 text-sm text-blue-800\">\r\n            <div className=\"flex justify-between\">\r\n              <span>High Quality:</span>\r\n              <Badge className=\"bg-green-100 text-green-800\">ΓëÑ 80%</Badge>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span>Medium Quality:</span>\r\n              <Badge className=\"bg-yellow-100 text-yellow-800\">60% - 79%</Badge>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span>Low Quality:</span>\r\n              <Badge className=\"bg-red-100 text-red-800\">&lt; 60%</Badge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"text-xs text-muted-foreground\">\r\n          <p>\r\n            <strong>Recalculate All:</strong> Updates quality scores for all food trucks using the latest algorithm.\r\n          </p>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SimpleQualityPanel;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\skeleton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\slider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\sonner.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\switch.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\table.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/table-header",
        "severity": 2,
        "message": "Add a valid header row or column to this \"<table>\".",
        "line": 9,
        "column": 7,
        "nodeType": "JSXElement",
        "endLine": 9,
        "endColumn": 96,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\tabs.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\textarea.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\toast.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\toaster.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\toggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\tooltip.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\hooks\\UseMobile.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\hooks\\UseToast.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (55). Maximum allowed is 50.",
        "line": 65,
        "column": 24,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 119,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from 'react';\r\n\r\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\r\n\r\nconst TOAST_LIMIT = 1;\r\nconst TOAST_REMOVE_DELAY = 1_000_000;\r\n\r\nexport type ToasterToast = ToastProps & {\r\n  id: string;\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  action?: ToastActionElement;\r\n};\r\n\r\nlet count = 0;\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\r\n  return count.toString();\r\n}\r\n\r\ntype Action =\r\n  | {\r\n      type: 'ADD_TOAST';\r\n      toast: ToasterToast;\r\n    }\r\n  | {\r\n      type: 'UPDATE_TOAST';\r\n      toast: Partial<ToasterToast>;\r\n    }\r\n  | {\r\n      type: 'DISMISS_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    }\r\n  | {\r\n      type: 'REMOVE_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    };\r\n\r\ninterface State {\r\n  toasts: ToasterToast[];\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return;\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId);\r\n    dispatch({\r\n      type: 'REMOVE_TOAST',\r\n      toastId: toastId,\r\n    });\r\n  }, TOAST_REMOVE_DELAY);\r\n\r\n  toastTimeouts.set(toastId, timeout);\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'ADD_TOAST': {\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      };\r\n    }\r\n\r\n    case 'UPDATE_TOAST': {\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\r\n      };\r\n    }\r\n\r\n    case 'DISMISS_TOAST': {\r\n      const { toastId } = action;\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId != undefined && toastId !== '') {\r\n        addToRemoveQueue(toastId);\r\n      } else {\r\n        for (const toast of state.toasts) {\r\n          addToRemoveQueue(toast.id);\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t,\r\n        ),\r\n      };\r\n    }\r\n    case 'REMOVE_TOAST': {\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst listeners: Array<(state: State) => void> = [];\r\n\r\nlet memoryState: State = { toasts: [] };\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action);\r\n  for (const listener of listeners) {\r\n    listener(memoryState);\r\n  }\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, 'id'>;\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId();\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: 'UPDATE_TOAST',\r\n      toast: { ...props, id },\r\n    });\r\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\r\n\r\n  dispatch({\r\n    type: 'ADD_TOAST',\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open: boolean) => {\r\n        if (!open) dismiss();\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  };\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState);\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState);\r\n    return () => {\r\n      const index = listeners.indexOf(setState);\r\n      if (index !== -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\r\n  };\r\n}\r\n\r\nexport { useToast, toast };\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'useRealtimeAdminEvents' has too many lines (227). Maximum allowed is 50.",
        "line": 64,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 290,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Arrow function has too many lines (105). Maximum allowed is 50.",
        "line": 120,
        "column": 31,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 224,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * SOTA Real-time Admin Dashboard Hook\r\n * \r\n * Provides real-time updates for admin dashboard using Server-Sent Events (SSE)\r\n * Implements automatic reconnection, error handling, and event filtering\r\n */\r\n\r\nimport { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\ninterface AdminEvent {\r\n  id: string;\r\n  type: 'scraping_update' | 'data_quality_change' | 'system_alert' | 'user_activity' | 'heartbeat';\r\n  timestamp: string;\r\n  data: Record<string, unknown>;\r\n  severity?: 'info' | 'warning' | 'error' | 'critical';\r\n}\r\n\r\ninterface RealtimeMetrics {\r\n  scrapingJobs: {\r\n    active: number;\r\n    completed: number;\r\n    failed: number;\r\n    pending: number;\r\n  };\r\n  dataQuality: {\r\n    averageScore: number;\r\n    totalTrucks: number;\r\n    recentChanges: number;\r\n  };\r\n  systemHealth: {\r\n    status: 'healthy' | 'warning' | 'error';\r\n    uptime: number;\r\n    lastUpdate: string;\r\n  };\r\n}\r\n\r\ninterface UseRealtimeAdminEventsOptions {\r\n  autoConnect?: boolean;\r\n  reconnectInterval?: number;\r\n  maxReconnectAttempts?: number;\r\n  eventFilter?: (event: AdminEvent) => boolean;\r\n}\r\n\r\ninterface UseRealtimeAdminEventsReturn {\r\n  // Connection state\r\n  isConnected: boolean;\r\n  isConnecting: boolean;\r\n  connectionError: string | null;\r\n  \r\n  // Data\r\n  latestMetrics: RealtimeMetrics | null;\r\n  recentEvents: AdminEvent[];\r\n  \r\n  // Controls\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n  clearEvents: () => void;\r\n  \r\n  // Statistics\r\n  connectionAttempts: number;\r\n  lastEventTime: Date | null;\r\n}\r\n\r\nexport function useRealtimeAdminEvents(\r\n  options: UseRealtimeAdminEventsOptions = {}\r\n): UseRealtimeAdminEventsReturn {\r\n  const {\r\n    autoConnect = true,\r\n    reconnectInterval = 5000,\r\n    maxReconnectAttempts = 10,\r\n    eventFilter\r\n  } = options;\r\n\r\n  // State\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [connectionError, setConnectionError] = useState<string | undefined>();\r\n  const [latestMetrics, setLatestMetrics] = useState<RealtimeMetrics | undefined>();\r\n  const [recentEvents, setRecentEvents] = useState<AdminEvent[]>([]);\r\n  const [connectionAttempts, setConnectionAttempts] = useState(0);\r\n  const [lastEventTime, setLastEventTime] = useState<Date | undefined>();\r\n\r\n  // Refs\r\n  const eventSourceRef = useRef<EventSource | undefined>(undefined);\r\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\r\n  const isManuallyDisconnectedRef = useRef(false);\r\n\r\n  // Event handlers\r\n  const handleEvent = useCallback((event: AdminEvent) => {\r\n    // Apply filter if provided\r\n    if (eventFilter && !eventFilter(event)) {\r\n      return;\r\n    }\r\n\r\n    setLastEventTime(new Date());\r\n\r\n    // Handle different event types\r\n    switch (event.type) {\r\n      case 'heartbeat': {\r\n        if (event.data != undefined && typeof event.data === 'object') {\r\n          setLatestMetrics(event.data as RealtimeMetrics);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'scraping_update':\r\n      case 'data_quality_change':\r\n      case 'system_alert':\r\n      case 'user_activity': {\r\n        setRecentEvents(prev => {\r\n          const newEvents = [event, ...prev].slice(0, 50); // Keep last 50 events\r\n          return newEvents;\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }, [eventFilter]);\r\n\r\n  // Connection management\r\n  const connect = useCallback(() => {\r\n    if (eventSourceRef.current || isConnecting) {\r\n      return;\r\n    }\r\n\r\n    setIsConnecting(true);\r\n    setConnectionError(undefined);\r\n    isManuallyDisconnectedRef.current = false;\r\n\r\n    try {\r\n      // Get auth token from localStorage or context\r\n      const token = localStorage.getItem('supabase.auth.token') ??\r\n                   sessionStorage.getItem('supabase.auth.token');\r\n\r\n      if (token == undefined || token === '') {\r\n        throw new Error('No authentication token available');\r\n      }\r\n\r\n      const eventSource = new EventSource('/api/admin/realtime-events', {\r\n        // Note: EventSource doesn't support custom headers directly\r\n        // We'll need to pass the token via query parameter or use a different approach\r\n      });\r\n\r\n      eventSource.addEventListener('open', () => {\r\n        console.info('Real-time admin events connected');\r\n        setIsConnected(true);\r\n        setIsConnecting(false);\r\n        setConnectionError(undefined);\r\n        setConnectionAttempts(0);\r\n      });\r\n\r\n      eventSource.addEventListener('message', (event: MessageEvent) => {\r\n        try {\r\n          const adminEvent = JSON.parse(event.data as string) as AdminEvent;\r\n          handleEvent(adminEvent);\r\n        } catch (error) {\r\n          console.warn('Failed to parse admin event:', error);\r\n        }\r\n      });\r\n\r\n      eventSource.addEventListener('error', (error) => {\r\n        console.error('Real-time admin events error:', error);\r\n        setIsConnected(false);\r\n        setIsConnecting(false);\r\n        setConnectionError('Connection error occurred');\r\n\r\n        // Attempt reconnection if not manually disconnected\r\n        if (!isManuallyDisconnectedRef.current && connectionAttempts < maxReconnectAttempts) {\r\n          setConnectionAttempts(prev => prev + 1);\r\n          \r\n          reconnectTimeoutRef.current = setTimeout(() => {\r\n            if (!isManuallyDisconnectedRef.current) {\r\n              connect();\r\n            }\r\n          }, reconnectInterval);\r\n        } else if (connectionAttempts >= maxReconnectAttempts) {\r\n          setConnectionError('Max reconnection attempts reached');\r\n        }\r\n      });\r\n\r\n      // Handle specific event types\r\n      eventSource.addEventListener('heartbeat', (event: MessageEvent) => {\r\n        try {\r\n          const adminEvent = JSON.parse(event.data as string) as AdminEvent;\r\n          handleEvent(adminEvent);\r\n        } catch (error) {\r\n          console.warn('Failed to parse heartbeat event:', error);\r\n        }\r\n      });\r\n\r\n      eventSource.addEventListener('scraping_update', (event: MessageEvent) => {\r\n        try {\r\n          const adminEvent = JSON.parse(event.data as string) as AdminEvent;\r\n          handleEvent(adminEvent);\r\n        } catch (error) {\r\n          console.warn('Failed to parse scraping update event:', error);\r\n        }\r\n      });\r\n\r\n      eventSource.addEventListener('data_quality_change', (event: MessageEvent) => {\r\n        try {\r\n          const adminEvent = JSON.parse(event.data as string) as AdminEvent;\r\n          handleEvent(adminEvent);\r\n        } catch (error) {\r\n          console.warn('Failed to parse data quality change event:', error);\r\n        }\r\n      });\r\n\r\n      eventSource.addEventListener('system_alert', (event: MessageEvent) => {\r\n        try {\r\n          const adminEvent = JSON.parse(event.data as string) as AdminEvent;\r\n          handleEvent(adminEvent);\r\n        } catch (error) {\r\n          console.warn('Failed to parse system alert event:', error);\r\n        }\r\n      });\r\n\r\n      eventSourceRef.current = eventSource;\r\n\r\n    } catch (error) {\r\n      console.error('Failed to establish real-time connection:', error);\r\n      setIsConnecting(false);\r\n      setConnectionError(error instanceof Error ? error.message : 'Connection failed');\r\n    }\r\n  }, [handleEvent, connectionAttempts, maxReconnectAttempts, reconnectInterval]);\r\n\r\n  const disconnect = useCallback(() => {\r\n    isManuallyDisconnectedRef.current = true;\r\n    \r\n    if (reconnectTimeoutRef.current) {\r\n      clearTimeout(reconnectTimeoutRef.current);\r\n      reconnectTimeoutRef.current = undefined;\r\n    }\r\n\r\n    if (eventSourceRef.current) {\r\n      eventSourceRef.current.close();\r\n      eventSourceRef.current = undefined;\r\n    }\r\n\r\n    setIsConnected(false);\r\n    setIsConnecting(false);\r\n    setConnectionError(undefined);\r\n  }, []);\r\n\r\n  const clearEvents = useCallback(() => {\r\n    setRecentEvents([]);\r\n  }, []);\r\n\r\n  // Auto-connect on mount\r\n  useEffect(() => {\r\n    if (autoConnect) {\r\n      connect();\r\n    }\r\n\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [autoConnect, connect, disconnect]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (reconnectTimeoutRef.current) {\r\n        clearTimeout(reconnectTimeoutRef.current);\r\n      }\r\n      if (eventSourceRef.current) {\r\n        eventSourceRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    // Connection state\r\n    isConnected,\r\n    isConnecting,\r\n    connectionError,\r\n    \r\n    // Data\r\n    latestMetrics,\r\n    recentEvents,\r\n    \r\n    // Controls\r\n    connect,\r\n    disconnect,\r\n    clearEvents,\r\n    \r\n    // Statistics\r\n    connectionAttempts,\r\n    lastEventTime\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\ScraperEngine.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'scrapeWebsite' has too many lines (65). Maximum allowed is 50.",
        "line": 110,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 174,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.",
        "line": 110,
        "column": 9,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 110,
        "endColumn": 22
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Method 'assessTruckData' has too many lines (76). Maximum allowed is 50.",
        "line": 390,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 465,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'makeGeminiRequest' has too many lines (55). Maximum allowed is 50.",
        "line": 693,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 747,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 305,
        "column": 39,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 305,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 311,
        "column": 39,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 311,
        "endColumn": 52,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 26 to the 15 allowed.",
        "line": 390,
        "column": 3,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 390,
        "endColumn": 18,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.",
        "line": 468,
        "column": 11,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 468,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { firecrawl } from './firecrawl'; // Import the firecrawl singleton\r\n\r\ninterface InstagramPost {\r\n  id: string;\r\n  caption: string;\r\n  timestamp: string;\r\n  location: string;\r\n  hashtags: string[];\r\n  engagement: { likes: number; comments: number };\r\n}\r\n\r\ninterface InstagramProfile {\r\n  followers: number;\r\n  following: number;\r\n  posts_count: number;\r\n  bio: string;\r\n  contact_info: { email: string; phone: string };\r\n}\r\n\r\ninterface FacebookPost {\r\n  id: string;\r\n  content: string;\r\n  timestamp: string;\r\n  reactions: { likes: number; loves: number; shares: number };\r\n  comments: number;\r\n}\r\n\r\ninterface FacebookPageInfo {\r\n  likes: number;\r\n  followers: number;\r\n  check_ins: number;\r\n  about: string;\r\n  hours: Record<string, string>;\r\n}\r\n\r\ninterface TwitterTweet {\r\n  id: string;\r\n  text: string;\r\n  timestamp: string;\r\n  retweets: number;\r\n  likes: number;\r\n  replies: number;\r\n  location: string;\r\n}\r\n\r\ninterface TwitterProfile {\r\n  followers: number;\r\n  following: number;\r\n  tweets_count: number;\r\n  bio: string;\r\n  location: string;\r\n  website: string;\r\n}\r\n\r\ninterface InstagramData {\r\n  posts: InstagramPost[];\r\n  profile: InstagramProfile;\r\n}\r\n\r\ninterface FacebookData {\r\n  posts: FacebookPost[];\r\n  page_info: FacebookPageInfo;\r\n}\r\n\r\ninterface TwitterData {\r\n  tweets: TwitterTweet[];\r\n  profile: TwitterProfile;\r\n}\r\n\r\nexport interface WebsiteScrapeData {\r\n  markdown?: string;\r\n  html?: string;\r\n  metadata?: Record<string, unknown>;\r\n  is_fallback?: boolean;\r\n}\r\n\r\nexport interface ExtractedHTMLData {\r\n  name?: string;\r\n  location?: string;\r\n  phone?: string;\r\n  hours?: string;\r\n  menu?: { item: string; price: string }[];\r\n}\r\n\r\ninterface ScrapeResult {\r\n  success: boolean;\r\n  error?: string;\r\n  data?: InstagramData | FacebookData | TwitterData | WebsiteScrapeData | ExtractedHTMLData;\r\n  timestamp: string;\r\n  source: string;\r\n  note?: string;\r\n}\r\n\r\n// Core scraping engine with anti-detection measures\r\nexport class ScraperEngine {\r\n  private userAgents: string[];\r\n  private requestDelay: number;\r\n  private maxRetries: number;\r\n\r\n  constructor() {\r\n    this.userAgents = [\r\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n    ];\r\n    this.requestDelay = 2000;\r\n    this.maxRetries = 3;\r\n  }\r\n\r\n  async scrapeWebsite(url: string, _selectors?: Record<string, string>): Promise<ScrapeResult> {\r\n    try {\r\n      const firecrawlResult = await firecrawl.scrapeUrl(url, {\r\n        formats: ['markdown', 'html'],\r\n        onlyMainContent: true,\r\n      });\r\n\r\n      if (!firecrawlResult.success || !firecrawlResult.data) {\r\n        throw new Error(firecrawlResult.error ?? 'Firecrawl scraping failed to return data.');\r\n      }\r\n\r\n      const returnedData: WebsiteScrapeData = {};\r\n      if (firecrawlResult.data.markdown != undefined && firecrawlResult.data.markdown !== '') {\r\n        returnedData.markdown = firecrawlResult.data.markdown;\r\n      }\r\n      if (firecrawlResult.data.html != undefined && firecrawlResult.data.html !== '') {\r\n        returnedData.html = firecrawlResult.data.html;\r\n      }\r\n      if (firecrawlResult.data.metadata != undefined) {\r\n        returnedData.metadata = firecrawlResult.data.metadata;\r\n      }\r\n\r\n      if ((returnedData.markdown == undefined || returnedData.markdown === '') && (returnedData.html == undefined || returnedData.html === '')) {\r\n        throw new Error('Firecrawl returned no markdown or HTML content.');\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: returnedData,\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn(`Scraping error for ${url} using Firecrawl:`, error);\r\n      console.info(`Falling back to basic fetch for ${url}`);\r\n      try {\r\n        const response = await fetch(url, { headers: { 'User-Agent': this.getRandomUserAgent() } });\r\n        if (!response.ok) {\r\n          throw new Error(\r\n            `HTTP error ${response.status}: ${response.statusText} during fallback fetch.`,\r\n          );\r\n        }\r\n        const htmlContent = await response.text();\r\n        return {\r\n          success: true,\r\n          data: {\r\n            html: htmlContent,\r\n            is_fallback: true,\r\n          },\r\n          timestamp: new Date().toISOString(),\r\n          source: url,\r\n          note: 'Fetched using basic fetch as Firecrawl failed.',\r\n        };\r\n      } catch (fallbackError: unknown) {\r\n        console.warn(`Fallback fetch error for ${url}:`, fallbackError);\r\n        return {\r\n          success: false,\r\n          error:\r\n            fallbackError instanceof Error ? fallbackError.message : 'Unknown fallback fetch error',\r\n          timestamp: new Date().toISOString(),\r\n          source: url,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  async scrapeSocialMedia(platform: string, handle: string): Promise<ScrapeResult> {\r\n    try {\r\n      await this.randomDelay();\r\n\r\n      switch (platform) {\r\n        case 'instagram': {\r\n          return this.scrapeInstagram(handle);\r\n        }\r\n        case 'facebook': {\r\n          return this.scrapeFacebook(handle);\r\n        }\r\n        case 'twitter': {\r\n          return this.scrapeTwitter(handle);\r\n        }\r\n        default: {\r\n          throw new Error(`Unsupported platform: ${platform}`);\r\n        }\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(`Social media scraping error for ${platform}/${handle}:`, error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        timestamp: new Date().toISOString(),\r\n        source: `social_media:${platform}:${handle}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async scrapeInstagram(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    return {\r\n      success: true,\r\n      data: {\r\n        posts: [\r\n          {\r\n            id: 'post_001',\r\n            caption: 'Fresh tacos available now at Mission St! ≡ƒî« #foodtruck #tacos',\r\n            timestamp: new Date(Date.now() - 3_600_000).toISOString(),\r\n            location: 'Mission St, San Francisco',\r\n            hashtags: ['foodtruck', 'tacos', 'fresh'],\r\n            engagement: { likes: 45, comments: 8 },\r\n          },\r\n        ],\r\n        profile: {\r\n          followers: 1250,\r\n          following: 340,\r\n          posts_count: 156,\r\n          bio: 'Best tacos in SF ≡ƒî« Follow for daily locations!',\r\n          contact_info: {\r\n            email: 'contact@tacoparadise.com',\r\n            phone: '+1-555-0456',\r\n          },\r\n        },\r\n      } as InstagramData, // Type assertion\r\n      timestamp: new Date().toISOString(),\r\n      source: `instagram:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeFacebook(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    return {\r\n      success: true,\r\n      data: {\r\n        posts: [\r\n          {\r\n            id: 'fb_post_001',\r\n            content:\r\n              \"Today we'll be at Union Square from 11 AM to 3 PM! Come try our new BBQ burger!\",\r\n            timestamp: new Date(Date.now() - 7_200_000).toISOString(),\r\n            reactions: { likes: 23, loves: 5, shares: 3 },\r\n            comments: 12,\r\n          },\r\n        ],\r\n        page_info: {\r\n          likes: 890,\r\n          followers: 1100,\r\n          check_ins: 450,\r\n          about: 'Gourmet food truck serving the Bay Area',\r\n          hours: {\r\n            monday: '11:00-15:00',\r\n            tuesday: '11:00-15:00',\r\n            wednesday: '11:00-15:00',\r\n            thursday: '11:00-15:00',\r\n            friday: '11:00-20:00',\r\n            saturday: '12:00-20:00',\r\n            sunday: '12:00-16:00',\r\n          },\r\n        },\r\n      } as FacebookData, // Type assertion\r\n      timestamp: new Date().toISOString(),\r\n      source: `facebook:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeTwitter(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    return {\r\n      success: true,\r\n      data: {\r\n        tweets: [\r\n          {\r\n            id: 'tweet_001',\r\n            text: 'LIVE at Dolores Park! Fresh burritos and quesadillas available now ≡ƒî»',\r\n            timestamp: new Date(Date.now() - 1_800_000).toISOString(),\r\n            retweets: 8,\r\n            likes: 34,\r\n            replies: 5,\r\n            location: 'Dolores Park, San Francisco',\r\n          },\r\n        ],\r\n        profile: {\r\n          followers: 2340,\r\n          following: 567,\r\n          tweets_count: 1890,\r\n          bio: '≡ƒÜÜ SF Food Truck | Fresh Mexican Food | Follow for locations',\r\n          location: 'San Francisco, CA',\r\n          website: 'https://tacoparadise.com',\r\n        },\r\n      } as TwitterData, // Type assertion\r\n      timestamp: new Date().toISOString(),\r\n      source: `twitter:${handle}`,\r\n    };\r\n  }\r\n\r\n  private getRandomUserAgent(): string {\r\n    // Using Math.random() for non-cryptographic purposes (e.g., selecting a user agent) is acceptable.\r\n    // eslint-disable-next-line sonarjs/pseudo-random\r\n    return this.userAgents[Math.floor(Math.random() * this.userAgents.length)];\r\n  }\r\n\r\n  private async randomDelay(): Promise<void> {\r\n    // Using Math.random() for non-cryptographic purposes (e.g., simulating delay) is acceptable.\r\n    // eslint-disable-next-line sonarjs/pseudo-random\r\n    const delay = this.requestDelay + Math.random() * 1000;\r\n    return new Promise((resolve) => setTimeout(resolve, delay));\r\n  }\r\n\r\n  async handleRateLimit(retryAfter: number): Promise<void> {\r\n    console.info(`Rate limited. Waiting ${retryAfter} seconds before retry...`);\r\n    return new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));\r\n  }\r\n\r\n  async retryWithBackoff<T>(\r\n    operation: () => Promise<T>,\r\n    maxRetries: number = this.maxRetries,\r\n  ): Promise<T> {\r\n    let lastError: unknown; // Changed to unknown\r\n\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        return await operation();\r\n      } catch (error: unknown) {\r\n        // Catch error as unknown\r\n        lastError = error;\r\n        if (attempt === maxRetries) {\r\n          throw lastError instanceof Error ? lastError : new Error(String(lastError));\r\n        }\r\n\r\n        const backoffDelay = Math.pow(2, attempt) * 1000;\r\n        console.info(`Attempt ${attempt} failed. Retrying in ${backoffDelay}ms...`);\r\n        await new Promise((resolve) => setTimeout(resolve, backoffDelay));\r\n      }\r\n    }\r\n\r\n    throw lastError instanceof Error ? lastError : new Error('Request failed after all retries');\r\n  }\r\n}\r\n\r\ninterface LocationData {\r\n  current?: {\r\n    lat: number | undefined;\r\n    lng: number | undefined;\r\n    address?: string;\r\n  };\r\n}\r\n\r\ninterface ContactInfo {\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\ninterface OperatingHours {\r\n  [key: string]: {\r\n    open: string;\r\n    close: string;\r\n    closed: boolean;\r\n  };\r\n}\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  description?: string;\r\n  price: number;\r\n  dietary_tags?: string[];\r\n}\r\n\r\ninterface MenuCategory {\r\n  category: string;\r\n  items: MenuItem[];\r\n}\r\n\r\ninterface TruckData {\r\n  name: string;\r\n  location: LocationData;\r\n  contact?: ContactInfo;\r\n  operating_hours?: OperatingHours;\r\n  menu?: MenuCategory[];\r\n  last_updated?: string;\r\n}\r\n\r\nexport class DataQualityAssessor {\r\n  // eslint-disable-next-line sonarjs/cognitive-complexity\r\n  assessTruckData(truckData: TruckData): { score: number; issues: string[] } {\r\n    const issues: string[] = [];\r\n    let score = 100;\r\n\r\n    if (truckData.name == undefined || truckData.name.trim().length === 0) {\r\n      issues.push('Missing or empty truck name');\r\n      score -= 20;\r\n    }\r\n\r\n    if (truckData.location?.current == undefined) {\r\n      issues.push('Missing current location data');\r\n      score -= 25;\r\n    } else {\r\n      if (\r\n        truckData.location.current.lat === undefined ||\r\n        truckData.location.current.lng === undefined\r\n      ) {\r\n        issues.push('Missing GPS coordinates');\r\n        score -= 15;\r\n      }\r\n      if (truckData.location.current.address == undefined || truckData.location.current.address === '') {\r\n        issues.push('Missing address information');\r\n        score -= 10;\r\n      }\r\n    }\r\n\r\n    if (truckData.contact == undefined) {\r\n      issues.push('Missing contact information');\r\n      score -= 20;\r\n    } else {\r\n      if ((truckData.contact.phone == undefined || truckData.contact.phone === '') && (truckData.contact.email == undefined || truckData.contact.email === '')) {\r\n        issues.push('No phone or email contact available');\r\n        score -= 15;\r\n      }\r\n      if (truckData.contact.phone != undefined && truckData.contact.phone !== '' && !this.isValidPhone(truckData.contact.phone)) {\r\n        issues.push('Invalid phone number format');\r\n        score -= 5;\r\n      }\r\n      if (truckData.contact.email != undefined && truckData.contact.email !== '' && !this.isValidEmail(truckData.contact.email)) {\r\n        issues.push('Invalid email format');\r\n        score -= 5;\r\n      }\r\n    }\r\n\r\n    if (truckData.operating_hours == undefined || Object.keys(truckData.operating_hours).length === 0) {\r\n      issues.push('Missing operating hours');\r\n      score -= 15;\r\n    }\r\n\r\n    if (truckData.menu == undefined || truckData.menu.length === 0) {\r\n      issues.push('Missing menu information');\r\n      score -= 10;\r\n    } else {\r\n      const menuIssues = this.validateMenuData(truckData.menu);\r\n      issues.push(...menuIssues);\r\n      score -= menuIssues.length * 2;\r\n    }\r\n\r\n    if (truckData.last_updated != undefined && truckData.last_updated !== '') {\r\n      const lastUpdate = new Date(truckData.last_updated);\r\n      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);\r\n\r\n      if (daysSinceUpdate > 7) {\r\n        issues.push('Data is more than 7 days old');\r\n        score -= 10;\r\n      } else if (daysSinceUpdate > 3) {\r\n        issues.push('Data is more than 3 days old');\r\n        score -= 5;\r\n      }\r\n    }\r\n\r\n    return {\r\n      score: Math.max(0, score) / 100,\r\n      issues,\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line sonarjs/cognitive-complexity\r\n  private validateMenuData(menu: MenuCategory[]): string[] {\r\n    const issues: string[] = [];\r\n\r\n    for (const [categoryIndex, category] of menu.entries()) {\r\n      if (category.category == undefined || category.category.trim().length === 0) {\r\n        issues.push(`Menu category ${categoryIndex + 1} missing name`);\r\n      }\r\n\r\n      if (category.items == undefined || category.items.length === 0) {\r\n        issues.push(`Menu category \"${category.category ?? 'Unknown'}\" has no items`);\r\n      } else {\r\n        for (const [itemIndex, item] of category.items.entries()) {\r\n          if (item.name == undefined || item.name.trim().length === 0) {\r\n            issues.push(`Menu item ${itemIndex + 1} in \"${category.category ?? 'Unknown'}\" missing name`);\r\n          }\r\n          if (typeof item.price !== 'number' || item.price <= 0) {\r\n            issues.push(`Menu item \"${item.name ?? 'Unknown'}\" has invalid price`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return issues;\r\n  }\r\n  private isValidPhone(phone: string): boolean {\r\n    // Regex for phone number validation. Removed duplicate characters in character class.\r\n    // This regex is not vulnerable to super-linear runtime due to backtracking.\r\n\r\n    const phoneRegex = /^\\+?[\\d\\s-()]{10,}$/;\r\n    return phoneRegex.test(phone);\r\n  }\r\n  private isValidEmail(email: string): boolean {\r\n    // Regex for email validation optimized to avoid backtracking\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]{2,}$/;\r\n    return emailRegex.test(email);\r\n  }\r\n}\r\n\r\ninterface GeminiLocationData {\r\n  address: string;\r\n  city: string;\r\n  state: string;\r\n  coordinates: {\r\n    lat: number | undefined;\r\n    lng: number | undefined;\r\n  };\r\n  confidence: number;\r\n}\r\n\r\ninterface GeminiOperatingHours {\r\n  monday: { open: string; close: string; closed: boolean };\r\n  tuesday: { open: string; close: string; closed: boolean };\r\n  wednesday: { open: string; close: string; closed: boolean };\r\n  thursday: { open: string; close: string; closed: boolean };\r\n  friday: { open: string; close: string; closed: boolean };\r\n  saturday: { open: string; close: string; closed: boolean };\r\n  sunday: { open: string; close: string; closed: boolean };\r\n}\r\n\r\ninterface GeminiSentimentAnalysis {\r\n  sentiment: 'positive' | 'negative' | 'neutral';\r\n  score: number;\r\n  key_topics: string[];\r\n  summary: string;\r\n}\r\n\r\nexport class GeminiDataProcessor {\r\n  private _apiKey: string;\r\n  private _baseUrl: string;\r\n  private requestCount: number;\r\n  private tokenCount: number;\r\n  private dailyLimit: { requests: number; tokens: number };\r\n\r\n  constructor(apiKey: string) {\r\n    this._apiKey = apiKey;\r\n    this._baseUrl = 'https://generativelanguage.googleapis.com/v1beta';\r\n    this.requestCount = 0;\r\n    this.tokenCount = 0;\r\n    this.dailyLimit = { requests: 1500, tokens: 32_000 };\r\n  }\r\n  async processMenuData(rawMenuText: string): Promise<{ categories: MenuCategory[] }> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following food truck menu text and return a structured JSON format:\r\n        \r\n        ${rawMenuText}\r\n        \r\n        Return format:\r\n        {\r\n          \"categories\": [\r\n            {\r\n              \"name\": \"category_name\",\r\n              \"items\": [\r\n                {\r\n                  \"name\": \"item_name\",\r\n                  \"description\": \"item_description\",\r\n                  \"price\": 0.00,\r\n                  \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", etc.]\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n        \r\n        Only return valid JSON, no additional text.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      return JSON.parse(response) as { categories: MenuCategory[] };\r\n    } catch (error) {\r\n      console.error('Error processing menu data with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async extractLocationFromText(text: string): Promise<GeminiLocationData> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Extract location information from the following text and return structured data:\r\n        \r\n        \"${text}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"address\": \"full_address\",\r\n          \"city\": \"city_name\",\r\n          \"state\": \"state\",\r\n          \"coordinates\": {\r\n            \"lat\": 0.0,\r\n            \"lng\": 0.0\r\n          },\r\n          \"confidence\": 0.95\r\n        }\r\n        \r\n        If coordinates cannot be determined, set them to undefined. Only return valid JSON.\r\n      `;\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsedResponse = JSON.parse(response) as GeminiLocationData;\r\n      parsedResponse.coordinates.lat ??= undefined;\r\n      parsedResponse.coordinates.lng ??= undefined;\r\n      return parsedResponse;\r\n    } catch (error) {\r\n      console.error('Error extracting location with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiOperatingHours> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following operating hours text and return standardized format:\r\n        \r\n        \"${hoursText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n        }\r\n          Use 24-hour format. If closed on a day, set \"closed\": true and omit open/close times.\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      return JSON.parse(response) as GeminiOperatingHours;\r\n    } catch (error) {\r\n      console.error('Error standardizing hours with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async analyzeSentiment(reviewText: string): Promise<GeminiSentimentAnalysis> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Analyze the sentiment of this food truck review and extract key insights:\r\n        \r\n        \"${reviewText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"sentiment\": \"positive|negative|neutral\",\r\n          \"score\": 0.85,\r\n          \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\"],\r\n          \"summary\": \"brief_summary_of_review\"\r\n        }\r\n          Score should be between 0 (very negative) and 1 (very positive).\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      return JSON.parse(response) as GeminiSentimentAnalysis;\r\n    } catch (error) {\r\n      console.error('Error analyzing sentiment with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async makeGeminiRequest(prompt: string): Promise<string> {\r\n    // Simulate Gemini API call\r\n    // In real implementation, would make actual API call to Google Gemini\r\n\r\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay\r\n\r\n    // Mock responses based on prompt content\r\n    if (prompt.includes('menu text')) {\r\n      return JSON.stringify({\r\n        categories: [\r\n          {\r\n            name: 'Burgers',\r\n            items: [\r\n              {\r\n                name: 'Classic Cheeseburger',\r\n                description: 'Beef patty with cheese, lettuce, tomato',\r\n                price: 12.99,\r\n                dietary_tags: [],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      });\r\n    } else if (prompt.includes('location information')) {\r\n      return JSON.stringify({\r\n        address: '123 Market St, San Francisco, CA 94105',\r\n        city: 'San Francisco',\r\n        state: 'CA',\r\n        coordinates: {\r\n          lat: 37.7749,\r\n          lng: -122.4194,\r\n        },\r\n        confidence: 0.95,\r\n      });\r\n    } else if (prompt.includes('operating hours')) {\r\n      return JSON.stringify({\r\n        monday: { open: '11:00', close: '15:00', closed: false },\r\n        tuesday: { open: '11:00', close: '15:00', closed: false },\r\n        wednesday: { open: '11:00', close: '15:00', closed: false },\r\n        thursday: { open: '11:00', close: '15:00', closed: false },\r\n        friday: { open: '11:00', close: '20:00', closed: false },\r\n        saturday: { open: '12:00', close: '20:00', closed: false },\r\n        sunday: { open: '12:00', close: '16:00', closed: false },\r\n      });\r\n    } else if (prompt.includes('sentiment')) {\r\n      return JSON.stringify({\r\n        sentiment: 'positive',\r\n        score: 0.85,\r\n        key_topics: ['food_quality', 'service'],\r\n        summary: 'Customer enjoyed the food and service',\r\n      });\r\n    }\r\n\r\n    return '{\"processed\": true}';\r\n  }\r\n\r\n  private canMakeRequest(): boolean {\r\n    return this.requestCount < this.dailyLimit.requests && this.tokenCount < this.dailyLimit.tokens;\r\n  }\r\n\r\n  private updateUsageCounters(requests: number, tokens: number): void {\r\n    this.requestCount += requests;\r\n    this.tokenCount += tokens;\r\n  }\r\n\r\n  getUsageStats(): {\r\n    requests: { used: number; limit: number; remaining: number };\r\n    tokens: { used: number; limit: number; remaining: number };\r\n  } {\r\n    return {\r\n      requests: {\r\n        used: this.requestCount,\r\n        limit: this.dailyLimit.requests,\r\n        remaining: this.dailyLimit.requests - this.requestCount,\r\n      },\r\n      tokens: {\r\n        used: this.tokenCount,\r\n        limit: this.dailyLimit.tokens,\r\n        remaining: this.dailyLimit.tokens - this.tokenCount,\r\n      },\r\n    };\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\activityLogger.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 45,
        "column": 10,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 45,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\batchCleanup.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Static async method 'runFullCleanup' has too many lines (55). Maximum allowed is 50.",
        "line": 38,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 92,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Static async method 'removePlaceholders' has too many lines (65). Maximum allowed is 50.",
        "line": 187,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 251,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 36 to the 15 allowed.",
        "line": 187,
        "column": 24,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 187,
        "endColumn": 42
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.",
        "line": 256,
        "column": 24,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 256,
        "endColumn": 45
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 272,
        "column": 13,
        "nodeType": "TryStatement",
        "messageId": "tooDeeply",
        "endLine": 283,
        "endColumn": 14
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Static async method 'fixCoordinates' has too many lines (54). Maximum allowed is 50.",
        "line": 295,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 348,
        "endColumn": 4
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 29 to the 15 allowed.",
        "line": 295,
        "column": 24,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 295,
        "endColumn": 38
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 330,
        "column": 13,
        "nodeType": "TryStatement",
        "messageId": "tooDeeply",
        "endLine": 341,
        "endColumn": 14
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.",
        "line": 353,
        "column": 24,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 353,
        "endColumn": 43
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 26 to the 15 allowed.",
        "line": 390,
        "column": 24,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 390,
        "endColumn": 39
      },
      {
        "ruleId": "max-depth",
        "severity": 2,
        "message": "Blocks are nested too deeply (5). Maximum allowed is 4.",
        "line": 411,
        "column": 13,
        "nodeType": "TryStatement",
        "messageId": "tooDeeply",
        "endLine": 418,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 360,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 360,
        "endColumn": 80,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 360,
        "column": 33,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 360,
        "endColumn": 73,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .calculateQualityScore on an `error` typed value.",
        "line": 360,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 360,
        "endColumn": 73,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 362,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 362,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .score on an `error` typed value.",
        "line": 362,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 362,
        "endColumn": 47,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 374,
        "column": 19,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 374,
        "endColumn": 61,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .updateTruckQualityScore on an `error` typed value.",
        "line": 374,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 374,
        "endColumn": 61,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * SOTA Batch Data Cleanup System\r\n * Implements automated data quality improvements and cleanup operations\r\n */\r\n\r\nimport { FoodTruckService, DataQualityService, type FoodTruck } from '@/lib/supabase';\r\nimport { DuplicatePreventionService } from './duplicatePrevention';\r\n\r\nexport interface CleanupOperation {\r\n  type: 'normalize_phone' | 'fix_coordinates' | 'remove_placeholders' | 'update_quality_scores' | 'merge_duplicates';\r\n  description: string;\r\n  affectedCount: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\nexport interface BatchCleanupResult {\r\n  totalProcessed: number;\r\n  operations: CleanupOperation[];\r\n  summary: {\r\n    trucksImproved: number;\r\n    duplicatesRemoved: number;\r\n    qualityScoreImprovement: number;\r\n    placeholdersRemoved: number;\r\n  };\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * Automated Data Quality Cleanup Service\r\n */\r\nexport class BatchCleanupService {\r\n  \r\n  /**\r\n   * Run comprehensive data cleanup operations\r\n   */\r\n  static async runFullCleanup(options: {\r\n    batchSize?: number;\r\n    dryRun?: boolean;\r\n    operations?: CleanupOperation['type'][];\r\n  } = {}): Promise<BatchCleanupResult> {\r\n    const startTime = Date.now();\r\n    const { batchSize = 50, dryRun = false, operations = [\r\n      'remove_placeholders',\r\n      'normalize_phone',\r\n      'fix_coordinates',\r\n      'update_quality_scores',\r\n      'merge_duplicates'\r\n    ] } = options;\r\n    \r\n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\r\n    \r\n    const result: BatchCleanupResult = {\r\n      totalProcessed: 0,\r\n      operations: [],\r\n      summary: {\r\n        trucksImproved: 0,\r\n        duplicatesRemoved: 0,\r\n        qualityScoreImprovement: 0,\r\n        placeholdersRemoved: 0\r\n      },\r\n      duration: 0\r\n    };\r\n    \r\n    try {\r\n      // Get all trucks for processing\r\n      const allTrucks = await FoodTruckService.getAllTrucks();\r\n      result.totalProcessed = allTrucks.total;\r\n      \r\n      // Process trucks in batches\r\n      for (let i = 0; i < allTrucks.trucks.length; i += batchSize) {\r\n        const batch = allTrucks.trucks.slice(i, i + batchSize);\r\n        \r\n        for (const operation of operations) {\r\n          const opResult = await this.runOperation(operation, batch, dryRun);\r\n          result.operations.push(opResult);\r\n        }\r\n      }\r\n      \r\n      // Calculate summary\r\n      result.summary = this.calculateSummary(result.operations);\r\n      result.duration = Date.now() - startTime;\r\n      \r\n      console.info(`Batch cleanup completed in ${result.duration}ms`);\r\n      return result;\r\n      \r\n    } catch (error) {\r\n      console.error('Batch cleanup failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Run a specific cleanup operation\r\n   */\r\n  private static async runOperation(\r\n    type: CleanupOperation['type'],\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean\r\n  ): Promise<CleanupOperation> {\r\n    const operation: CleanupOperation = {\r\n      type,\r\n      description: this.getOperationDescription(type),\r\n      affectedCount: 0,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      errors: []\r\n    };\r\n    \r\n    try {\r\n      switch (type) {\r\n        case 'remove_placeholders': {\r\n          return await this.removePlaceholders(trucks, dryRun, operation);\r\n        }\r\n        case 'normalize_phone': {\r\n          return await this.normalizePhoneNumbers(trucks, dryRun, operation);\r\n        }\r\n        case 'fix_coordinates': {\r\n          return await this.fixCoordinates(trucks, dryRun, operation);\r\n        }\r\n        case 'update_quality_scores': {\r\n          return await this.updateQualityScores(trucks, dryRun, operation);\r\n        }\r\n        case 'merge_duplicates': {\r\n          return await this.mergeDuplicates(trucks, dryRun, operation);\r\n        }\r\n        default: {\r\n          operation.errors.push(`Unknown operation type: ${String(type)}`);\r\n          return operation;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      operation.errors.push(`Operation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n      return operation;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get placeholder detection patterns\r\n   */\r\n  private static getPlaceholderPatterns(): RegExp[] {\r\n    return [\r\n      /undefined/i,\r\n      /placeholder/i,\r\n      /example\\.com/i,\r\n      /test\\s*truck/i,\r\n      /lorem\\s*ipsum/i,\r\n      /\\bna\\b/i,\r\n      /\\bn\\/a\\b/i,\r\n      /^0+$/,\r\n      /^null$/i\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Check if truck data needs placeholder cleanup\r\n   */\r\n  private static checkForPlaceholders(truck: FoodTruck, patterns: RegExp[]): { updates: Partial<FoodTruck>; needsUpdate: boolean } {\r\n    const updates: Partial<FoodTruck> = {};\r\n    let needsUpdate = false;\r\n\r\n    // Check name\r\n    if (truck.name && patterns.some(pattern => pattern.test(truck.name))) {\r\n      updates.name = undefined;\r\n      needsUpdate = true;\r\n    }\r\n\r\n    // Check description\r\n    if (truck.description !== undefined && typeof truck.description === 'string' && patterns.some(pattern => pattern.test(truck.description))) {\r\n      updates.description = undefined;\r\n      needsUpdate = true;\r\n    }\r\n\r\n    // Check price range\r\n    if (truck.price_range !== undefined && typeof truck.price_range === 'string' && patterns.some(pattern => pattern.test(truck.price_range))) {\r\n      updates.price_range = undefined;\r\n      needsUpdate = true;\r\n    }\r\n\r\n    return { updates, needsUpdate };\r\n  }\r\n\r\n  /**\r\n   * Remove placeholder and mock data\r\n   */\r\n  private static async removePlaceholders(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const placeholderPatterns = this.getPlaceholderPatterns();\r\n\r\n    for (const truck of trucks) {\r\n      const { updates, needsUpdate: initialNeedsUpdate } = this.checkForPlaceholders(truck, placeholderPatterns);\r\n      let needsUpdate = initialNeedsUpdate;\r\n\r\n      // Check contact info\r\n      if (truck.contact_info) {\r\n        const cleanContact = { ...truck.contact_info };\r\n        let contactUpdated = false;\r\n\r\n        if (cleanContact.phone !== undefined && typeof cleanContact.phone === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.phone))) {\r\n          cleanContact.phone = undefined;\r\n          contactUpdated = true;\r\n        }\r\n\r\n        if (cleanContact.website !== undefined && typeof cleanContact.website === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.website))) {\r\n          cleanContact.website = undefined;\r\n          contactUpdated = true;\r\n        }\r\n\r\n        if (cleanContact.email !== undefined && typeof cleanContact.email === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.email))) {\r\n          cleanContact.email = undefined;\r\n          contactUpdated = true;\r\n        }\r\n\r\n        if (contactUpdated) {\r\n          updates.contact_info = cleanContact;\r\n          needsUpdate = true;\r\n        }\r\n      }\r\n\r\n      // Check address\r\n      if (truck.current_location?.address !== undefined && typeof truck.current_location.address === 'string' && placeholderPatterns.some(pattern => pattern.test(truck.current_location.address))) {\r\n        updates.current_location = {\r\n          ...truck.current_location,\r\n          address: undefined\r\n        };\r\n        needsUpdate = true;\r\n      }\r\n      \r\n      if (needsUpdate) {\r\n        operation.affectedCount++;\r\n        \r\n        if (dryRun) {\r\n          operation.successCount++;\r\n        } else {\r\n          try {\r\n            await FoodTruckService.updateTruck(truck.id, updates);\r\n            operation.successCount++;\r\n          } catch (error) {\r\n            operation.errorCount++;\r\n            operation.errors.push(`Failed to update truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Normalize phone numbers to consistent format\r\n   */\r\n  private static async normalizePhoneNumbers(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    for (const truck of trucks) {\r\n      if (truck.contact_info?.phone !== undefined) {\r\n        const originalPhone = truck.contact_info.phone;\r\n        const normalizedPhone = this.normalizePhone(originalPhone);\r\n\r\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\r\n          operation.affectedCount++;\r\n          \r\n          if (dryRun) {\r\n            operation.successCount++;\r\n          } else {\r\n            try {\r\n              await FoodTruckService.updateTruck(truck.id, {\r\n                contact_info: {\r\n                  ...truck.contact_info,\r\n                  phone: normalizedPhone\r\n                }\r\n              });\r\n              operation.successCount++;\r\n            } catch (error) {\r\n              operation.errorCount++;\r\n              operation.errors.push(`Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Fix invalid GPS coordinates\r\n   */\r\n  private static async fixCoordinates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    // Charleston, SC default coordinates\r\n    const defaultLat = 32.7767;\r\n    const defaultLng = -79.9311;\r\n    \r\n    for (const truck of trucks) {\r\n      if (truck.current_location != undefined) {\r\n        const { lat, lng } = truck.current_location;\r\n        let needsUpdate = false;\r\n        const updates: Partial<FoodTruck['current_location']> = {};\r\n\r\n        // Fix invalid coordinates (0,0 or null)\r\n        if (lat == undefined || lat === 0 || lng == undefined || lng === 0) {\r\n          updates.lat = defaultLat;\r\n          updates.lng = defaultLng;\r\n          needsUpdate = true;\r\n        }\r\n\r\n        // Fix coordinates outside reasonable bounds for Charleston area\r\n        if (lat != undefined && lng != undefined && (lat < 32 || lat > 34 || lng > -79 || lng < -81)) {\r\n          updates.lat = defaultLat;\r\n          updates.lng = defaultLng;\r\n          needsUpdate = true;\r\n        }\r\n        \r\n        if (needsUpdate) {\r\n          operation.affectedCount++;\r\n          \r\n          if (dryRun) {\r\n            operation.successCount++;\r\n          } else {\r\n            try {\r\n              await FoodTruckService.updateTruck(truck.id, {\r\n                current_location: {\r\n                  ...truck.current_location,\r\n                  ...updates\r\n                }\r\n              });\r\n              operation.successCount++;\r\n            } catch (error) {\r\n              operation.errorCount++;\r\n              operation.errors.push(`Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Update quality scores for all trucks\r\n   */\r\n  private static async updateQualityScores(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    for (const truck of trucks) {\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n      const qualityAssessment = DataQualityService.calculateQualityScore(truck);\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\r\n      const newScore = qualityAssessment.score;\r\n      const currentScore = truck.data_quality_score ?? 0;\r\n      \r\n      // Only update if score changed significantly (>5% difference)\r\n      if (Math.abs(newScore - currentScore) > 0.05) {\r\n        operation.affectedCount++;\r\n        \r\n        if (dryRun) {\r\n          operation.successCount++;\r\n        } else {\r\n          try {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\r\n            await DataQualityService.updateTruckQualityScore(truck.id);\r\n            operation.successCount++;\r\n          } catch (error) {\r\n            operation.errorCount++;\r\n            operation.errors.push(`Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Identify and merge duplicate trucks\r\n   */\r\n  private static async mergeDuplicates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const processedIds = new Set<string>();\r\n    \r\n    for (const truck of trucks) {\r\n      if (processedIds.has(truck.id)) continue;\r\n      \r\n      const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\r\n      \r\n      if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\r\n        const { bestMatch } = duplicateCheck;\r\n        \r\n        if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\r\n          operation.affectedCount++;\r\n          \r\n          if (dryRun) {\r\n            operation.successCount++;\r\n          } else {\r\n            try {\r\n              await DuplicatePreventionService.mergeDuplicates(truck.id, bestMatch.existingTruck.id);\r\n              processedIds.add(bestMatch.existingTruck.id);\r\n              operation.successCount++;\r\n            } catch (error) {\r\n              operation.errorCount++;\r\n              operation.errors.push(`Failed to merge duplicates ${truck.id} and ${bestMatch.existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      processedIds.add(truck.id);\r\n    }\r\n    \r\n    return operation;\r\n  }\r\n  \r\n  /**\r\n   * Normalize phone number format\r\n   */\r\n  private static normalizePhone(phone: string): string | undefined {\r\n    if (!phone) return undefined;\r\n    \r\n    // Remove all non-digit characters\r\n    const digits = phone.replaceAll(/\\D/g, '');\r\n    \r\n    // Handle US phone numbers\r\n    if (digits.length === 10) {\r\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\r\n    } else if (digits.length === 11 && digits[0] === '1') {\r\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\r\n    }\r\n    \r\n    // Return original if can't normalize\r\n    return phone;\r\n  }\r\n  \r\n  /**\r\n   * Get operation description\r\n   */\r\n  private static getOperationDescription(type: CleanupOperation['type']): string {\r\n    const descriptions = {\r\n      remove_placeholders: 'Remove placeholder and mock data values',\r\n      normalize_phone: 'Normalize phone numbers to consistent format',\r\n      fix_coordinates: 'Fix invalid GPS coordinates',\r\n      update_quality_scores: 'Recalculate data quality scores',\r\n      merge_duplicates: 'Identify and merge duplicate truck entries'\r\n    };\r\n    \r\n    return descriptions[type] ?? 'Unknown operation';\r\n  }\r\n  \r\n  /**\r\n   * Calculate cleanup summary\r\n   */\r\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\r\n    return {\r\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\r\n      duplicatesRemoved: operations.find(op => op.type === 'merge_duplicates')?.successCount ?? 0,\r\n      qualityScoreImprovement: operations.find(op => op.type === 'update_quality_scores')?.successCount ?? 0,\r\n      placeholdersRemoved: operations.find(op => op.type === 'remove_placeholders')?.successCount ?? 0\r\n    };\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\duplicatePrevention.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Static method 'calculateSimilarity' has too many lines (57). Maximum allowed is 50.",
        "line": 101,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 157,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * SOTA Duplicate Prevention System\r\n * Implements intelligent duplicate detection and prevention for food truck data\r\n */\r\n\r\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\r\n\r\n// Duplicate detection configuration\r\nexport const DUPLICATE_DETECTION_CONFIG = {\r\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\r\n  thresholds: {\r\n    name: 0.85,        // High threshold for name matching\r\n    location: 0.9,     // Very high threshold for location matching\r\n    phone: 1,        // Exact match for phone numbers\r\n    website: 1,      // Exact match for websites\r\n    overall: 0.8       // Overall similarity threshold\r\n  },\r\n  \r\n  // Weight factors for different fields\r\n  weights: {\r\n    name: 0.4,         // 40% weight for name similarity\r\n    location: 0.3,     // 30% weight for location similarity\r\n    contact: 0.2,      // 20% weight for contact info similarity\r\n    menu: 0.1          // 10% weight for menu similarity\r\n  }\r\n} as const;\r\n\r\nexport interface DuplicateMatch {\r\n  existingTruck: FoodTruck;\r\n  similarity: number;\r\n  matchedFields: string[];\r\n  confidence: 'high' | 'medium' | 'low';\r\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\r\n}\r\n\r\nexport interface DuplicateDetectionResult {\r\n  isDuplicate: boolean;\r\n  matches: DuplicateMatch[];\r\n  bestMatch?: DuplicateMatch;\r\n  action: 'create' | 'update' | 'merge' | 'manual_review';\r\n  reason: string;\r\n}\r\n\r\n/**\r\n * Advanced Duplicate Prevention Service\r\n */\r\nexport class DuplicatePreventionService {\r\n  \r\n  /**\r\n   * Check if a food truck is a duplicate of existing trucks\r\n   */\r\n  static async checkForDuplicates(candidateTruck: Partial<FoodTruck>): Promise<DuplicateDetectionResult> {\r\n    try {\r\n      // Get all existing trucks for comparison\r\n      const existingTrucks = await FoodTruckService.getAllTrucks();\r\n      \r\n      const matches: DuplicateMatch[] = [];\r\n      \r\n      for (const existingTruck of existingTrucks.trucks) {\r\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\r\n        \r\n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\r\n          matches.push({\r\n            existingTruck,\r\n            similarity: similarity.overall,\r\n            matchedFields: similarity.matchedFields,\r\n            confidence: this.getConfidenceLevel(similarity.overall),\r\n            recommendation: this.getRecommendation(similarity)\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Sort matches by similarity (highest first)\r\n      matches.sort((a, b) => b.similarity - a.similarity);\r\n      \r\n      const bestMatch = matches[0];\r\n      const isDuplicate = matches.length > 0;\r\n      \r\n      return {\r\n        isDuplicate,\r\n        matches,\r\n        bestMatch,\r\n        action: this.determineAction(matches, candidateTruck),\r\n        reason: this.generateReason(matches, candidateTruck)\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('Error checking for duplicates:', error);\r\n      return {\r\n        isDuplicate: false,\r\n        matches: [],\r\n        action: 'create',\r\n        reason: 'Error during duplicate detection - proceeding with creation'\r\n      };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Calculate similarity between two food trucks\r\n   */\r\n  private static calculateSimilarity(\r\n    candidate: Partial<FoodTruck>, \r\n    existing: FoodTruck\r\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\r\n    const breakdown: Record<string, number> = {};\r\n    const matchedFields: string[] = [];\r\n    \r\n    // Name similarity\r\n    const nameSimilarity = this.calculateStringSimilarity(\r\n      candidate.name ?? '', \r\n      existing.name ?? ''\r\n    );\r\n    breakdown.name = nameSimilarity;\r\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\r\n      matchedFields.push('name');\r\n    }\r\n    \r\n    // Location similarity\r\n    const locationSimilarity = this.calculateLocationSimilarity(\r\n      candidate.current_location,\r\n      existing.current_location\r\n    );\r\n    breakdown.location = locationSimilarity;\r\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\r\n      matchedFields.push('location');\r\n    }\r\n    \r\n    // Contact similarity\r\n    const contactSimilarity = this.calculateContactSimilarity(\r\n      candidate.contact_info,\r\n      existing.contact_info\r\n    );\r\n    breakdown.contact = contactSimilarity;\r\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\r\n      matchedFields.push('contact');\r\n    }\r\n    \r\n    // Menu similarity (basic)\r\n    const menuSimilarity = this.calculateMenuSimilarity(\r\n      candidate.menu,\r\n      existing.menu\r\n    );\r\n    breakdown.menu = menuSimilarity;\r\n    if (menuSimilarity > 0.7) {\r\n      matchedFields.push('menu');\r\n    }\r\n    \r\n    // Calculate weighted overall similarity\r\n    const overall = (\r\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\r\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\r\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\r\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu\r\n    );\r\n    \r\n    return { overall, matchedFields, breakdown };\r\n  }\r\n  \r\n  /**\r\n   * Calculate string similarity using Levenshtein distance\r\n   */\r\n  private static calculateStringSimilarity(str1: string, str2: string): number {\r\n    if (!str1 || !str2) return 0;\r\n    \r\n    // Normalize strings\r\n    const s1 = str1.toLowerCase().trim();\r\n    const s2 = str2.toLowerCase().trim();\r\n    \r\n    if (s1 === s2) return 1;\r\n    \r\n    // Calculate Levenshtein distance\r\n    const matrix: number[][] = [];\r\n    const len1 = s1.length;\r\n    const len2 = s2.length;\r\n    \r\n    for (let i = 0; i <= len1; i++) {\r\n      matrix[i] = [i];\r\n    }\r\n    \r\n    for (let j = 0; j <= len2; j++) {\r\n      matrix[0][j] = j;\r\n    }\r\n    \r\n    for (let i = 1; i <= len1; i++) {\r\n      for (let j = 1; j <= len2; j++) {\r\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j] + 1,      // deletion\r\n          matrix[i][j - 1] + 1,      // insertion\r\n          matrix[i - 1][j - 1] + cost // substitution\r\n        );\r\n      }\r\n    }\r\n    \r\n    const distance = matrix[len1][len2];\r\n    const maxLength = Math.max(len1, len2);\r\n    \r\n    return maxLength === 0 ? 1 : 1 - (distance / maxLength);\r\n  }\r\n  \r\n  /**\r\n   * Calculate location similarity\r\n   */\r\n  private static calculateLocationSimilarity(\r\n    loc1: FoodTruck['current_location'],\r\n    loc2: FoodTruck['current_location']\r\n  ): number {\r\n    if (loc1 == undefined || loc2 == undefined) return 0;\r\n    \r\n    let similarity = 0;\r\n    let factors = 0;\r\n    \r\n    // Address similarity\r\n    if (loc1.address != undefined && loc2.address != undefined) {\r\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\r\n      factors++;\r\n    }\r\n    \r\n    // GPS coordinate similarity (within 100 meters = high similarity)\r\n    if (loc1.lat != undefined && loc1.lng != undefined && loc2.lat != undefined && loc2.lng != undefined) {\r\n      const distance = this.calculateGPSDistance(\r\n        loc1.lat, loc1.lng,\r\n        loc2.lat, loc2.lng\r\n      );\r\n      \r\n      // Distance similarity (closer = higher similarity)\r\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - (distance / 1)); // 1km max\r\n      similarity += distanceSimilarity;\r\n      factors++;\r\n    }\r\n    \r\n    return factors > 0 ? similarity / factors : 0;\r\n  }\r\n  \r\n  /**\r\n   * Calculate GPS distance in kilometers\r\n   */\r\n  private static calculateGPSDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLng = (lng2 - lng1) * Math.PI / 180;\r\n    const a = \r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  }\r\n  \r\n  /**\r\n   * Calculate contact similarity\r\n   */\r\n  private static calculateContactSimilarity(\r\n    contact1: FoodTruck['contact_info'],\r\n    contact2: FoodTruck['contact_info']\r\n  ): number {\r\n    if (!contact1 || !contact2) return 0;\r\n    \r\n    let matches = 0;\r\n    let total = 0;\r\n    \r\n    // Phone number exact match\r\n    if (contact1.phone != undefined && contact2.phone != undefined) {\r\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\r\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\r\n      if (phone1 === phone2) matches++;\r\n      total++;\r\n    }\r\n    \r\n    // Website exact match\r\n    if (contact1.website != undefined && contact2.website != undefined) {\r\n      const url1 = contact1.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\r\n      const url2 = contact2.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\r\n      if (url1 === url2) matches++;\r\n      total++;\r\n    }\r\n    \r\n    // Email similarity\r\n    if (contact1.email != undefined && contact2.email != undefined) {\r\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches++;\r\n      total++;\r\n    }\r\n    \r\n    return total > 0 ? matches / total : 0;\r\n  }\r\n  \r\n  /**\r\n   * Calculate menu similarity (basic implementation)\r\n   */\r\n  private static calculateMenuSimilarity(\r\n    menu1: FoodTruck['menu'],\r\n    menu2: FoodTruck['menu']\r\n  ): number {\r\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\r\n    \r\n    // Simple category name matching\r\n    const categories1 = menu1.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\r\n    const categories2 = menu2.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\r\n    \r\n    const commonCategories = categories1.filter(cat => categories2.includes(cat));\r\n    const totalCategories = new Set([...categories1, ...categories2]).size;\r\n    \r\n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\r\n  }\r\n  \r\n  /**\r\n   * Get confidence level based on similarity score\r\n   */\r\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\r\n    if (similarity >= 0.95) return 'high';\r\n    if (similarity >= 0.85) return 'medium';\r\n    return 'low';\r\n  }\r\n  \r\n  /**\r\n   * Get recommendation based on similarity analysis\r\n   */\r\n  private static getRecommendation(similarity: { overall: number; matchedFields: string[] }): 'merge' | 'update' | 'skip' | 'manual_review' {\r\n    if (similarity.overall >= 0.95) return 'merge';\r\n    if (similarity.overall >= 0.9) return 'update';\r\n    if (similarity.overall >= 0.8) return 'manual_review';\r\n    return 'skip';\r\n  }\r\n  \r\n  /**\r\n   * Determine action based on matches\r\n   */\r\n  private static determineAction(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): 'create' | 'update' | 'merge' | 'manual_review' {\r\n    if (matches.length === 0) return 'create';\r\n    \r\n    const bestMatch = matches[0];\r\n    \r\n    if (bestMatch.confidence === 'high') {\r\n      const recommendation = bestMatch.recommendation;\r\n      if (recommendation === 'merge' || recommendation === 'update') {\r\n        return recommendation;\r\n      }\r\n      return 'manual_review';\r\n    }\r\n    \r\n    return 'manual_review';\r\n  }\r\n  \r\n  /**\r\n   * Generate human-readable reason\r\n   */\r\n  private static generateReason(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): string {\r\n    if (matches.length === 0) {\r\n      return 'No duplicates found - safe to create new truck entry';\r\n    }\r\n    \r\n    const bestMatch = matches[0];\r\n    const similarity = Math.round(bestMatch.similarity * 100);\r\n    \r\n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\r\n  }\r\n  \r\n  /**\r\n   * Merge duplicate truck data intelligently\r\n   */\r\n  static async mergeDuplicates(targetId: string, sourceId: string): Promise<FoodTruck> {\r\n    const target = await FoodTruckService.getTruckById(targetId);\r\n    const source = await FoodTruckService.getTruckById(sourceId);\r\n    \r\n    // Merge logic: prefer non-null, more complete data\r\n    const mergedData: Partial<FoodTruck> = {\r\n      name: target.name ?? source.name,\r\n      description: target.description ?? source.description,\r\n      cuisine_type: (target.cuisine_type?.length ?? 0) > 0 ? target.cuisine_type : source.cuisine_type,\r\n      price_range: target.price_range ?? source.price_range,\r\n      current_location: target.current_location ?? source.current_location,\r\n      contact_info: {\r\n        ...source.contact_info,\r\n        ...target.contact_info // Target takes precedence\r\n      },\r\n      operating_hours: target.operating_hours ?? source.operating_hours,\r\n      menu: (target.menu?.length ?? 0) > 0 ? target.menu : source.menu,\r\n      social_media: {\r\n        ...source.social_media,\r\n        ...target.social_media\r\n      },\r\n      source_urls: [...new Set([...(target.source_urls ?? []), ...(source.source_urls ?? [])])],\r\n      last_scraped_at: new Date().toISOString()\r\n    };\r\n\r\n    // Update target with merged data\r\n    const updatedTruck = await FoodTruckService.updateTruck(targetId, mergedData);\r\n\r\n    // Note: Delete functionality would need to be implemented in FoodTruckService\r\n    console.info(`Merged truck ${sourceId} into ${targetId}`);\r\n    \r\n    return updatedTruck;\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\discoveryEngine.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'isFoodTruckUrl' has too many lines (86). Maximum allowed is 50.",
        "line": 363,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 448,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'storeDiscoveredUrl' has too many lines (58). Maximum allowed is 50.",
        "line": 605,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 662,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/discoveryEngine.ts\r\nimport { supabaseAdmin } from './supabase';\r\nimport { SC_TARGET_CITIES, DISCOVERY_CONFIG } from './config';\r\n\r\nexport interface DiscoveredUrl {\r\n  url: string;\r\n  source_directory_url?: string;\r\n  region?: string;\r\n  status: 'new' | 'processing' | 'processed' | 'irrelevant';\r\n  notes?: string;\r\n}\r\n\r\nexport interface DiscoveryResult {\r\n  urls_discovered: number;\r\n  urls_stored: number;\r\n  urls_duplicates: number;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Autonomous Discovery Engine\r\n *\r\n * This engine discovers new food truck websites across South Carolina using Tavily for search\r\n * and Firecrawl for crawling. It operates autonomously without human intervention, finding and\r\n * validating new URLs to add to the discovered_urls table for subsequent scraping.\r\n *\r\n * Strategy:\r\n * 1. Search for food trucks in each SC city using Tavily search\r\n * 2. Find food truck directories and event listings using Firecrawl crawling\r\n * 3. Extract individual food truck website URLs from discovered content\r\n * 4. Validate and filter URLs to avoid false positives\r\n * 5. Store new URLs in discovered_urls table for processing\r\n *\r\n * NOTE: Uses Tavily for search operations and Firecrawl for crawling/scraping\r\n */\r\n\r\n// Helper functions to call APIs\r\n// Use Tavily for search, Firecrawl for crawling/scraping\r\ninterface TavilySearchResult {\r\n  url: string;\r\n  content?: string;\r\n  raw_content?: string;\r\n}\r\n\r\nasync function tavilySearch(\r\n  query: string,\r\n  options: Record<string, unknown> = {},\r\n): Promise<TavilySearchResult[]> {\r\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL ?? 'http://localhost:3003';\r\n  const response = await fetch(`${baseUrl}/api/tavily`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      operation: 'search',\r\n      params: {\r\n        query,\r\n        limit: options.limit ?? 10,\r\n        ...options,\r\n      },\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Tavily search failed: ${response.statusText}`);\r\n  }\r\n\r\n  const result = (await response.json()) as {\r\n    data?: { results?: TavilySearchResult[] };\r\n    results?: TavilySearchResult[];\r\n  };\r\n  return result.data?.results ?? result.results ?? [];\r\n}\r\n\r\ninterface CrawlResult {\r\n  url: string;\r\n}\r\n\r\nasync function firecrawlCrawl(\r\n  url: string,\r\n  options: Record<string, unknown> = {},\r\n): Promise<CrawlResult[]> {\r\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL ?? 'http://localhost:3003';\r\n  const response = await fetch(`${baseUrl}/api/firecrawl`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      operation: 'crawl',\r\n      url,\r\n      options: {\r\n        maxDepth: options.maxDepth ?? 2,\r\n        limit: options.limit ?? 20,\r\n        ...options,\r\n      },\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Firecrawl crawl failed: ${response.statusText}`);\r\n  }\r\n\r\n  const result = (await response.json()) as { data: CrawlResult[] };\r\n  return result.data ?? [];\r\n}\r\n\r\nexport class FoodTruckDiscoveryEngine {\r\n  private readonly searchTerms = [\r\n    'food truck South Carolina',\r\n    'mobile food vendor SC',\r\n    'food truck Charleston',\r\n    'food truck Columbia SC',\r\n    'food truck Greenville SC',\r\n    'street food South Carolina',\r\n    'food truck directory SC',\r\n  ];\r\n\r\n  private readonly directoryUrls = [\r\n    'https://www.foodtrucksin.com/south-carolina',\r\n    'https://www.roaminghunger.com/sc/',\r\n    'https://southcarolinafoodtrucks.com',\r\n    'https://www.yelp.com/sc/food-trucks',\r\n  ];\r\n\r\n  // Helper method to process search results\r\n  private async processSearchResults(\r\n    searchResults: TavilySearchResult[],\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    for (const result of searchResults) {\r\n      if (result.url && (await this.isFoodTruckUrl(result.url))) {\r\n        discoveredUrls.add(result.url);\r\n      }\r\n\r\n      // Extract URLs from content\r\n      if (result.content != undefined || result.raw_content != undefined) {\r\n        const content = result.content ?? result.raw_content ?? '';\r\n        const extractedUrls = this.extractFoodTruckUrls(content);\r\n        for (const url of extractedUrls) {\r\n          if (await this.isFoodTruckUrl(url)) {\r\n            discoveredUrls.add(url);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to perform search term discovery\r\n  private async performSearchTermDiscovery(\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    for (const searchTerm of this.searchTerms) {\r\n      try {\r\n        console.info(`≡ƒöì Searching for: ${searchTerm}`);\r\n\r\n        const searchResults = await tavilySearch(searchTerm, {\r\n          limit: DISCOVERY_CONFIG.searchResultsLimit,\r\n        });\r\n\r\n        if (searchResults != undefined && searchResults.length > 0) {\r\n          await this.processSearchResults(searchResults, discoveredUrls);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Γ¥î Search failed for \"${searchTerm}\":`, error);\r\n        results.errors.push(\r\n          `Search failed for \"${searchTerm}\": ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        );\r\n      }\r\n\r\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\r\n    }\r\n  }\r\n\r\n  // Helper method to perform directory crawling\r\n  private async performDirectoryCrawling(\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    for (const directoryUrl of this.directoryUrls) {\r\n      await this.crawlSingleDirectory(directoryUrl, discoveredUrls, results);\r\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\r\n    }\r\n  }\r\n\r\n  // Helper method to crawl a single directory\r\n  private async crawlSingleDirectory(\r\n    directoryUrl: string,\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    try {\r\n      console.info(`≡ƒò╖∩╕Å Crawling directory: ${directoryUrl}`);\r\n\r\n      const crawlResults = await firecrawlCrawl(directoryUrl, {\r\n        maxDepth: DISCOVERY_CONFIG.maxDepthCrawl,\r\n        limit: DISCOVERY_CONFIG.maxUrlsPerRun,\r\n      });\r\n\r\n      await this.processCrawlResults(crawlResults, discoveredUrls);\r\n    } catch (error) {\r\n      console.error(`Γ¥î Crawl failed for ${directoryUrl}:`, error);\r\n      results.errors.push(\r\n        `Crawl failed for ${directoryUrl}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  // Helper method to process crawl results\r\n  private async processCrawlResults(\r\n    crawlResults: unknown,\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    if (crawlResults != undefined && Array.isArray(crawlResults) && crawlResults.length > 0) {\r\n      for (const result of crawlResults) {\r\n        if (typeof result === 'object' && result !== null && 'url' in result) {\r\n          const resultUrl = (result as { url?: string }).url;\r\n          if (\r\n            resultUrl != undefined &&\r\n            typeof resultUrl === 'string' &&\r\n            (await this.isFoodTruckUrl(resultUrl))\r\n          ) {\r\n            discoveredUrls.add(resultUrl);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to perform location-specific discovery\r\n  private async performLocationDiscovery(\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    for (const city of SC_TARGET_CITIES) {\r\n      await this.searchSingleCity(city, discoveredUrls, results);\r\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\r\n    }\r\n  }\r\n\r\n  // Helper method to search a single city\r\n  private async searchSingleCity(\r\n    city: string,\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    try {\r\n      console.info(`≡ƒôì Searching for food trucks in ${city}, SC`);\r\n      const locationQuery = `food trucks in ${city} South Carolina`;\r\n      const searchResults = await tavilySearch(locationQuery, {\r\n        limit: 5,\r\n      });\r\n\r\n      await this.processLocationSearchResults(searchResults, discoveredUrls);\r\n    } catch (error) {\r\n      console.error(`Γ¥î Location search failed for ${city}:`, error);\r\n      results.errors.push(\r\n        `Location search failed for ${city}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  // Helper method to process location search results\r\n  private async processLocationSearchResults(\r\n    searchResults: unknown,\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    if (searchResults != undefined && Array.isArray(searchResults) && searchResults.length > 0) {\r\n      for (const result of searchResults) {\r\n        if (typeof result === 'object' && result !== null && 'url' in result) {\r\n          const resultUrl = (result as { url?: string }).url;\r\n          if (\r\n            resultUrl != undefined &&\r\n            typeof resultUrl === 'string' &&\r\n            (await this.isFoodTruckUrl(resultUrl))\r\n          ) {\r\n            discoveredUrls.add(resultUrl);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to store discovered URLs from discovery process\r\n  private async storeDiscoveredUrlsFromDiscovery(\r\n    discoveredUrls: Set<string>,\r\n    results: DiscoveryResult,\r\n  ): Promise<void> {\r\n    for (const url of discoveredUrls) {\r\n      try {\r\n        const stored = await this.storeDiscoveredUrl(url, 'autonomous_search', {\r\n          search_context: 'full_discovery',\r\n          discovery_timestamp: new Date().toISOString(),\r\n        });\r\n        if (stored.isNew === true) {\r\n          results.urls_stored++;\r\n        } else {\r\n          results.urls_duplicates++;\r\n        }\r\n      } catch (error) {\r\n        console.error(`Γ¥î Failed to store URL ${url}:`, error);\r\n        results.errors.push(\r\n          `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  async discoverNewFoodTrucks(): Promise<DiscoveryResult> {\r\n    console.info('≡ƒöì Starting autonomous food truck discovery...');\r\n\r\n    const results: DiscoveryResult = {\r\n      urls_discovered: 0,\r\n      urls_stored: 0,\r\n      urls_duplicates: 0,\r\n      errors: [],\r\n    };\r\n\r\n    const discoveredUrls = new Set<string>();\r\n\r\n    // 1. Search for food trucks using Tavily search\r\n    await this.performSearchTermDiscovery(discoveredUrls, results);\r\n\r\n    // 2. Crawl known food truck directory sites\r\n    await this.performDirectoryCrawling(discoveredUrls, results);\r\n\r\n    // 3. Location-specific discovery for SC cities\r\n    await this.performLocationDiscovery(discoveredUrls, results);\r\n\r\n    results.urls_discovered = discoveredUrls.size;\r\n    console.info(`≡ƒÄ» Discovered ${results.urls_discovered} potential food truck URLs`);\r\n\r\n    // 4. Store new URLs in database\r\n    await this.storeDiscoveredUrlsFromDiscovery(discoveredUrls, results);\r\n\r\n    console.info(\r\n      `Γ£à Discovery complete: ${results.urls_stored} new URLs stored, ${results.urls_duplicates} duplicates skipped`,\r\n    );\r\n\r\n    return results;\r\n  }\r\n  private extractFoodTruckUrls(content: string): string[] {\r\n    const urls: string[] = [];\r\n\r\n    // Look for URL patterns in content - using a safer regex to avoid backtracking\r\n    const urlRegex = /https?:\\/\\/[^\\s<>\"']{1,200}/g;\r\n    const foundUrls = content.match(urlRegex) ?? [];\r\n\r\n    for (const url of foundUrls) {\r\n      try {\r\n        // Basic URL validation\r\n        new URL(url);\r\n        // Remove trailing punctuation - using safer regex to avoid backtracking\r\n        const cleanUrl = url.replace(/[.,;!?]$/, '');\r\n        urls.push(cleanUrl);\r\n      } catch {\r\n        // Invalid URL, skip\r\n        continue;\r\n      }\r\n    }\r\n\r\n    return urls;\r\n  }\r\n\r\n  private async isFoodTruckUrl(url: string): Promise<boolean> {\r\n    try {\r\n      // Basic URL validation\r\n      new URL(url);\r\n\r\n      // Food truck indicators in URL\r\n      const foodTruckKeywords = [\r\n        'food-truck',\r\n        'foodtruck',\r\n        'mobile-food',\r\n        'street-food',\r\n        'truck',\r\n        'kitchen',\r\n        'eats',\r\n        'bbq',\r\n        'burger',\r\n        'taco',\r\n        'catering',\r\n        'mobile',\r\n        'chef',\r\n        'bistro',\r\n        'cafe',\r\n      ];\r\n\r\n      // Blacklist - skip these domains\r\n      const blacklistKeywords = [\r\n        'facebook.com',\r\n        'instagram.com',\r\n        'twitter.com',\r\n        'linkedin.com',\r\n        'youtube.com',\r\n        'yelp.com',\r\n        'google.com',\r\n        'maps.google.com',\r\n        'foursquare.com',\r\n        'tripadvisor.com',\r\n        'zomato.com',\r\n        'eventbrite.com',\r\n        'meetup.com',\r\n      ];\r\n\r\n      const urlLower = url.toLowerCase();\r\n\r\n      // Skip social media and review sites\r\n      if (blacklistKeywords.some((keyword) => urlLower.includes(keyword))) {\r\n        return false;\r\n      }\r\n\r\n      // Check if we already have this URL in discovered_urls\r\n      if (supabaseAdmin == undefined) {\r\n        return false;\r\n      }\r\n\r\n      const { data: existingDiscovered } = await supabaseAdmin\r\n        .from('discovered_urls')\r\n        .select('id')\r\n        .eq('url', url)\r\n        .limit(1);\r\n\r\n      if (existingDiscovered != undefined && existingDiscovered.length > 0) {\r\n        return false; // Already discovered\r\n      }\r\n\r\n      // Check if we already have this URL in food_trucks\r\n      const { data: existingTrucks } = await supabaseAdmin\r\n        .from('food_trucks')\r\n        .select('id')\r\n        .contains('source_urls', [url])\r\n        .limit(1);\r\n\r\n      if (existingTrucks != undefined && existingTrucks.length > 0) {\r\n        return false; // Already have this URL\r\n      }\r\n\r\n      // Accept if has food truck keywords or if it's a business domain\r\n      return (\r\n        foodTruckKeywords.some((keyword) => urlLower.includes(keyword)) ||\r\n        (/\\.(com|net|org|biz|info)/.test(urlLower) &&\r\n          !urlLower.includes('blog') &&\r\n          !urlLower.includes('news'))\r\n      );\r\n    } catch (error) {\r\n      console.error('Error validating food truck URL:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getLocationSpecificDiscovery(city: string, state: string = 'SC'): Promise<DiscoveryResult> {\r\n    console.info(`≡ƒöì Starting location-specific discovery for ${city}, ${state}`);\r\n\r\n    const locationQuery = `food trucks in ${city} ${state}`;\r\n    const results: DiscoveryResult = {\r\n      urls_discovered: 0,\r\n      urls_stored: 0,\r\n      urls_duplicates: 0,\r\n      errors: [],\r\n    };\r\n\r\n    const discoveredUrls = new Set<string>();\r\n\r\n    try {\r\n      await this.performLocationSpecificSearch(locationQuery, discoveredUrls);\r\n      results.urls_discovered = discoveredUrls.size;\r\n      await this.storeLocationDiscoveryResults({ discoveredUrls, locationQuery, city, state, results });\r\n    } catch (error) {\r\n      console.error(`Γ¥î Location search failed for ${city}:`, error);\r\n      results.errors.push(\r\n        `Location search failed for ${city}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n\r\n    console.info(\r\n      `Γ£à Location discovery complete for ${city}: ${results.urls_stored} new URLs stored`,\r\n    );\r\n    return results;\r\n  }\r\n\r\n  // Helper method to perform location-specific search\r\n  private async performLocationSpecificSearch(\r\n    locationQuery: string,\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    const searchResults = await tavilySearch(locationQuery, { limit: 15 });\r\n\r\n    if (searchResults != undefined && searchResults.length > 0) {\r\n      for (const result of searchResults) {\r\n        await this.processSearchResult(result, discoveredUrls);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to process a single search result\r\n  private async processSearchResult(result: unknown, discoveredUrls: Set<string>): Promise<void> {\r\n    if (typeof result === 'object' && result !== null && 'url' in result) {\r\n      const resultUrl = (result as { url?: string }).url;\r\n      if (resultUrl != undefined && resultUrl !== '' && (await this.isFoodTruckUrl(resultUrl))) {\r\n        discoveredUrls.add(resultUrl);\r\n      }\r\n\r\n      // Extract URLs from content\r\n      await this.extractUrlsFromContent(result, discoveredUrls);\r\n    }\r\n  }\r\n\r\n  // Helper method to extract URLs from content\r\n  private async extractUrlsFromContent(\r\n    result: unknown,\r\n    discoveredUrls: Set<string>,\r\n  ): Promise<void> {\r\n    if (typeof result === 'object' && result != undefined) {\r\n      const resultObj = result as { content?: string; raw_content?: string };\r\n      if (resultObj.content != undefined || resultObj.raw_content != undefined) {\r\n        const content = resultObj.content ?? resultObj.raw_content ?? '';\r\n        const extractedUrls = this.extractFoodTruckUrls(content);\r\n        for (const url of extractedUrls) {\r\n          if (await this.isFoodTruckUrl(url)) {\r\n            discoveredUrls.add(url);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Helper method to store location discovery results\r\n  private async storeLocationDiscoveryResults(\r\n    params: {\r\n      discoveredUrls: Set<string>;\r\n      locationQuery: string;\r\n      city: string;\r\n      state: string;\r\n      results: DiscoveryResult;\r\n    }\r\n  ): Promise<void> {\r\n    const { discoveredUrls, locationQuery, city, state, results } = params;\r\n    for (const url of discoveredUrls) {\r\n      try {\r\n        const stored = await this.storeDiscoveredUrl(url, 'tavily_search', {\r\n          search_query: locationQuery,\r\n          target_city: city,\r\n          target_state: state,\r\n        });\r\n        if (stored.isNew === true) {\r\n          results.urls_stored++;\r\n        } else {\r\n          results.urls_duplicates++;\r\n        }\r\n      } catch (error) {\r\n        console.error(`Γ¥î Failed to store URL ${url}:`, error);\r\n        results.errors.push(\r\n          `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Store multiple discovered URLs with metadata\r\n   */\r\n  async storeDiscoveredUrls(\r\n    urls: string[],\r\n    discoveryMethod: string = 'manual',\r\n    metadata: Record<string, unknown> = {},\r\n  ): Promise<{\r\n    urls_stored: number;\r\n    urls_duplicates: number;\r\n    errors: string[];\r\n  }> {\r\n    const result: {\r\n      urls_stored: number;\r\n      urls_duplicates: number;\r\n      errors: string[];\r\n    } = {\r\n      urls_stored: 0,\r\n      urls_duplicates: 0,\r\n      errors: [],\r\n    };\r\n\r\n    for (const url of urls) {\r\n      try {\r\n        const stored = await this.storeDiscoveredUrl(url, discoveryMethod, metadata);\r\n        if (stored.isNew === true) {\r\n          result.urls_stored++;\r\n        } else {\r\n          result.urls_duplicates++;\r\n        }\r\n      } catch (error) {\r\n        const errorMsg = `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n        result.errors.push(errorMsg);\r\n        console.error(errorMsg);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Enhanced store method with discovery method and metadata\r\n   */\r\n  private async storeDiscoveredUrl(\r\n    url: string,\r\n    discoveryMethod: string = 'manual',\r\n    metadata: Record<string, unknown> = {},\r\n  ): Promise<{ isNew: boolean }> {\r\n    try {\r\n      if (!supabaseAdmin) {\r\n        throw new Error('Supabase admin client not available');\r\n      }\r\n\r\n      // Check if URL already exists\r\n      const { data: existing } = await supabaseAdmin\r\n        .from('discovered_urls')\r\n        .select('id')\r\n        .eq('url', url)\r\n        .limit(1);\r\n\r\n      if (existing && existing.length > 0) {\r\n        return { isNew: false };\r\n      }\r\n\r\n      // Store new URL - handle missing columns gracefully\r\n      const insertData: Record<string, unknown> = {\r\n        url,\r\n        status: 'new',\r\n        notes: `Discovered via ${discoveryMethod}`,\r\n      };\r\n\r\n      // Add optional columns only if they exist in the table\r\n      try {\r\n        // Check if discovery_method column exists\r\n        const { error: testError } = await supabaseAdmin\r\n          .from('discovered_urls')\r\n          .select('discovery_method')\r\n          .limit(1);\r\n\r\n        if (!testError) {\r\n          insertData.discovery_method = discoveryMethod;\r\n          insertData.region = 'SC';\r\n          insertData.metadata = metadata;\r\n        }\r\n      } catch {\r\n        // Column doesn't exist, continue without it\r\n        console.info('Some columns missing in discovered_urls table, using basic structure');\r\n      }\r\n\r\n      const { error } = await supabaseAdmin.from('discovered_urls').insert(insertData);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      return { isNew: true };\r\n    } catch (error) {\r\n      console.error('Error storing discovered URL:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for food truck directories\r\n   */\r\n  async searchFoodTruckDirectories(\r\n    query: string = 'food truck directory South Carolina',\r\n  ): Promise<TavilySearchResult[]> {\r\n    try {\r\n      return await tavilySearch(query, { limit: 10 });\r\n    } catch (error) {\r\n      console.error('Error searching food truck directories:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for food truck websites\r\n   */\r\n  async searchFoodTruckWebsites(query: string): Promise<TavilySearchResult[]> {\r\n    try {\r\n      return await tavilySearch(query, { limit: 15 });\r\n    } catch (error) {\r\n      console.error('Error searching food truck websites:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport const discoveryEngine = new FoodTruckDiscoveryEngine();\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'crawlWebsite' has too many lines (60). Maximum allowed is 50.",
        "line": 145,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 204,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "interface FirecrawlResponse {\r\n  success: boolean;\r\n  data?: {\r\n    markdown?: string;\r\n    html?: string;\r\n    metadata?: {\r\n      title?: string;\r\n      description?: string;\r\n      language?: string;\r\n      sourceURL?: string;\r\n    };\r\n    links?: string[];\r\n  };\r\n  error?: string;\r\n}\r\n\r\ninterface CrawlJobResponse {\r\n  success: boolean;\r\n  jobId?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface ScrapedMetadata {\r\n  title?: string;\r\n  description?: string;\r\n  language?: string;\r\n  sourceURL?: string;\r\n}\r\n\r\ninterface CrawlStatusResponse {\r\n  success: boolean;\r\n  status?: 'scraping' | 'completed' | 'failed';\r\n  data?: Array<{\r\n    markdown?: string;\r\n    html?: string;\r\n    metadata?: ScrapedMetadata;\r\n  }>;\r\n  error?: string;\r\n}\r\n\r\ninterface ContactInfo {\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\ninterface SocialMediaInfo {\r\n  instagram?: string;\r\n  facebook?: string;\r\n  twitter?: string;\r\n}\r\n\r\nconst FIRECRAWL_CACHE_TTL_MS = 1000 * 60 * 60 * 12; // 12 hours\r\nconst firecrawlCache: Record<string, { data: unknown; timestamp: number }> = {};\r\n\r\nexport class FirecrawlService {\r\n  private apiKey: string;\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    this.apiKey = process.env.FIRECRAWL_API_KEY!;\r\n    this.baseUrl = 'https://api.firecrawl.dev/v0';\r\n  }\r\n\r\n  private getCachedResult(\r\n    cacheKey: string,\r\n  ): FirecrawlResponse | CrawlJobResponse | CrawlStatusResponse | undefined {\r\n    const now = Date.now();\r\n    // Clean up expired cache\r\n    for (const key in firecrawlCache) {\r\n      if (\r\n        Object.prototype.hasOwnProperty.call(firecrawlCache, key) &&\r\n        now - firecrawlCache[key].timestamp > FIRECRAWL_CACHE_TTL_MS\r\n      ) {\r\n        delete firecrawlCache[key];\r\n      }\r\n    }\r\n    if (\r\n      firecrawlCache[cacheKey] != undefined &&\r\n      now - firecrawlCache[cacheKey].timestamp < FIRECRAWL_CACHE_TTL_MS\r\n    ) {\r\n      console.info(`FirecrawlService: Cache hit for ${cacheKey}`);\r\n      return firecrawlCache[cacheKey].data as\r\n        | FirecrawlResponse\r\n        | CrawlJobResponse\r\n        | CrawlStatusResponse;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private setCacheResult(cacheKey: string, data: unknown) {\r\n    firecrawlCache[cacheKey] = { data, timestamp: Date.now() };\r\n  }\r\n\r\n  async scrapeUrl(\r\n    url: string,\r\n    options: {\r\n      formats?: ('markdown' | 'html')[];\r\n      includeTags?: string[];\r\n      excludeTags?: string[];\r\n      onlyMainContent?: boolean;\r\n      waitFor?: number;\r\n    } = {},\r\n  ): Promise<FirecrawlResponse> {\r\n    const cacheKey = `scrape:${url}:${JSON.stringify(options)}`;\r\n    const cached = this.getCachedResult(cacheKey);\r\n    if (cached) {\r\n      return cached as FirecrawlResponse;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/scrape`, {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          url,\r\n          formats: options.formats ?? ['markdown'],\r\n          includeTags: options.includeTags,\r\n          excludeTags: options.excludeTags,\r\n          onlyMainContent: options.onlyMainContent ?? true,\r\n          waitFor: options.waitFor ?? 0,\r\n        }),\r\n      });\r\n\r\n      const data: unknown = await response.json();\r\n\r\n      if (!response.ok) {\r\n        const errorData = data as { error?: string };\r\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\r\n      }\r\n\r\n      this.setCacheResult(cacheKey, data);\r\n      return data as FirecrawlResponse;\r\n    } catch (error: unknown) {\r\n      console.warn('Firecrawl scrape error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  async crawlWebsite(\r\n    url: string,\r\n    options: {\r\n      crawlerOptions?: {\r\n        includes?: string[];\r\n        excludes?: string[];\r\n        maxDepth?: number;\r\n        limit?: number;\r\n      };\r\n      pageOptions?: {\r\n        formats?: ('markdown' | 'html')[];\r\n        onlyMainContent?: boolean;\r\n      };\r\n    } = {},\r\n  ): Promise<CrawlJobResponse> {\r\n    const cacheKey = `crawl:${url}:${JSON.stringify(options)}`;\r\n    const cached = this.getCachedResult(cacheKey);\r\n    if (cached) {\r\n      return cached as CrawlJobResponse;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/crawl`, {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          url,\r\n          crawlerOptions: {\r\n            maxDepth: 2,\r\n            limit: 10,\r\n            ...options.crawlerOptions,\r\n          },\r\n          pageOptions: {\r\n            formats: ['markdown'],\r\n            onlyMainContent: true,\r\n            ...options.pageOptions,\r\n          },\r\n        }),\r\n      });\r\n\r\n      const data: unknown = await response.json();\r\n\r\n      if (!response.ok) {\r\n        const errorData = data as { error?: string };\r\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\r\n      }\r\n\r\n      this.setCacheResult(cacheKey, data);\r\n      return data as CrawlJobResponse;\r\n    } catch (error: unknown) {\r\n      console.warn('Firecrawl crawl error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  async getCrawlStatus(jobId: string): Promise<CrawlStatusResponse> {\r\n    const cacheKey = `crawlStatus:${jobId}`;\r\n    const cached = this.getCachedResult(cacheKey);\r\n    if (cached) {\r\n      return cached as CrawlStatusResponse;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/crawl/status/${jobId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n      });\r\n\r\n      const data: unknown = await response.json();\r\n\r\n      if (!response.ok) {\r\n        const errorData = data as { error?: string };\r\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\r\n      }\r\n\r\n      this.setCacheResult(cacheKey, data);\r\n      return data as CrawlStatusResponse;\r\n    } catch (error: unknown) {\r\n      console.warn('Firecrawl status error:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Specialized methods for food truck data\r\n  async scrapeFoodTruckWebsite(url: string): Promise<{\r\n    success: boolean;\r\n    data?: { markdown: string; name?: string; source_url?: string };\r\n    error?: string;\r\n  }> {\r\n    const result = await this.scrapeUrl(url, {\r\n      formats: ['markdown'],\r\n      onlyMainContent: true,\r\n      waitFor: 2000,\r\n    });\r\n\r\n    return result.success && result.data?.markdown != undefined\r\n      ? {\r\n          success: true,\r\n          data: {\r\n            markdown: result.data.markdown,\r\n            name: result.data.metadata?.title,\r\n            source_url: result.data.metadata?.sourceURL,\r\n          },\r\n        }\r\n      : { success: false, error: result.error ?? 'Markdown content not found' };\r\n  }\r\n\r\n  private extractPattern(text: string, pattern: RegExp): string | undefined {\r\n    const match = pattern.exec(text);\r\n    return match ? match[1].trim() : undefined;\r\n  }\r\n  private extractMenuSection(markdown: string): string | undefined {\r\n    // Use simpler, more efficient regex patterns with fixed max length\r\n    const menuPatterns = [\r\n      /menu\\s*:\\s*([^\\n]{1,50})/i,\r\n      /food\\s*:\\s*([^\\n]{1,50})/i,\r\n      /items?\\s*:\\s*([^\\n]{1,50})/i,\r\n      /what we serve\\s*:\\s*([^\\n]{1,50})/i,\r\n      /our food\\s*:\\s*([^\\n]{1,50})/i,\r\n    ];\r\n\r\n    for (const pattern of menuPatterns) {\r\n      const match = pattern.exec(markdown);\r\n      if (match) {\r\n        return match[1].trim();\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n  private extractContactInfo(markdown: string): ContactInfo | undefined {\r\n    const contact: ContactInfo = {}; // Phone number - Use specific patterns to prevent backtracking\r\n    const phoneRegex = /(?:phone|call|contact)(?:\\s*:\\s*)?([+]?\\d{3,4}[.\\s-]\\d{3}[.\\s-]\\d{3,4})/i;\r\n    const phoneMatch = phoneRegex.exec(markdown);\r\n    if (phoneMatch) {\r\n      contact.phone = phoneMatch[1].trim();\r\n    } // Email - Use specific pattern to avoid backtracking\r\n    const emailRegex = /([a-zA-Z0-9._%-]{1,64}@[a-zA-Z0-9-]{1,63}\\.[a-zA-Z]{2,6})/;\r\n    const emailMatch = emailRegex.exec(markdown);\r\n    if (emailMatch) {\r\n      contact.email = emailMatch[1].trim();\r\n    }\r\n\r\n    return Object.keys(contact).length > 0 ? contact : undefined;\r\n  }\r\n\r\n  private extractSocialMedia(markdown: string): SocialMediaInfo | undefined {\r\n    const social: SocialMediaInfo = {};\r\n    // Instagram - Use concise character class\r\n    const instagramRegex = /(?:instagram|@)\\s*([\\w.]+)/i;\r\n    const instagramMatch = instagramRegex.exec(markdown);\r\n    if (instagramMatch) {\r\n      social.instagram = instagramMatch[1].trim();\r\n    }\r\n    // Facebook - With fixed character class\r\n    const facebookRegex = /facebook\\.com\\/([\\w.-]+)/i;\r\n    const facebookMatch = facebookRegex.exec(markdown);\r\n    if (facebookMatch) {\r\n      social.facebook = facebookMatch[1].trim();\r\n    }\r\n    // Twitter - Use concise character class\r\n    const twitterRegex = /(?:twitter|@)\\s*([\\w.]+)/i; // Changed \\w+ to [\\w.]+ to allow dots in usernames\r\n    const twitterMatch = twitterRegex.exec(markdown);\r\n    if (twitterMatch) {\r\n      social.twitter = twitterMatch[1].trim();\r\n    }\r\n\r\n    return Object.keys(social).length > 0 ? social : undefined;\r\n  }\r\n\r\n  async scrapeMultipleUrls(\r\n    urls: string[],\r\n    options: {\r\n      batchSize?: number;\r\n      delay?: number;\r\n    } = {},\r\n  ): Promise<Array<{ url: string; result: FirecrawlResponse }>> {\r\n    const batchSize = options.batchSize ?? 5;\r\n    const delay = options.delay ?? 1000;\r\n    const results: Array<{ url: string; result: FirecrawlResponse }> = [];\r\n\r\n    for (let i = 0; i < urls.length; i += batchSize) {\r\n      const batch = urls.slice(i, i + batchSize);\r\n\r\n      const batchPromises = batch.map(async (url) => {\r\n        const result = await this.scrapeUrl(url);\r\n        return { url, result };\r\n      });\r\n\r\n      const batchResults = await Promise.all(batchPromises);\r\n      results.push(...batchResults);\r\n\r\n      // Add delay between batches to respect rate limits\r\n      if (i + batchSize < urls.length) {\r\n        await new Promise((resolve) => setTimeout(resolve, delay));\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  // Rate limiting and error handling\r\n  async scrapeWithRetry(url: string, maxRetries = 3, backoffMs = 1000): Promise<FirecrawlResponse> {\r\n    let lastError: Error;\r\n\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        const result = await this.scrapeUrl(url);\r\n\r\n        if (result.success) {\r\n          return result;\r\n        }\r\n\r\n        // If it's a rate limit error, wait longer\r\n        if (result.error?.includes('rate limit') === true) {\r\n          const waitTime = backoffMs * Math.pow(2, attempt);\r\n          console.info(`Rate limited. Waiting ${waitTime}ms before retry ${attempt}/${maxRetries}`);\r\n          await new Promise((resolve) => setTimeout(resolve, waitTime));\r\n          continue;\r\n        }\r\n\r\n        throw new Error(result.error);\r\n      } catch (error: unknown) {\r\n        lastError = error instanceof Error ? error : new Error(String(error));\r\n\r\n        if (attempt === maxRetries) {\r\n          break;\r\n        }\r\n\r\n        const waitTime = backoffMs * Math.pow(2, attempt);\r\n        console.info(`Attempt ${attempt} failed. Retrying in ${waitTime}ms...`);\r\n        await new Promise((resolve) => setTimeout(resolve, waitTime));\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: false,\r\n      error: lastError!.message,\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const firecrawl = new FirecrawlService();\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\gemini.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'processMenuData' has too many lines (89). Maximum allowed is 50.",
        "line": 72,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 160,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'extractLocationFromText' has too many lines (81). Maximum allowed is 50.",
        "line": 162,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 242,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'standardizeOperatingHours' has too many lines (79). Maximum allowed is 50.",
        "line": 244,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 322,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'analyzeSentiment' has too many lines (80). Maximum allowed is 50.",
        "line": 324,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 403,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'enhanceFoodTruckData' has too many lines (84). Maximum allowed is 50.",
        "line": 405,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 488,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'extractFoodTruckDetailsFromMarkdown' has too many lines (141). Maximum allowed is 50.",
        "line": 534,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 674,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-expect-error TS(2792): Cannot find module '@google/genai'. Did you mean t... Remove this comment to see the full error message\r\nimport { GoogleGenAI } from '@google/genai';\r\nimport { APIUsageService } from './supabase';\r\nimport { APIMonitor } from './monitoring/apiMonitor';\r\n\r\nimport {\r\n  MenuCategory,\r\n  LocationData,\r\n  OperatingHours,\r\n  SentimentAnalysisResult,\r\n  EnhancedFoodTruckData,\r\n  ExtractedFoodTruckDetails,\r\n  GeminiResponse,\r\n} from './types';\r\n\r\nexport class GeminiService {\r\n  private genAI: GoogleGenAI;\r\n  private modelName: string;\r\n  private dailyRequestLimit = 1500;\r\n  private dailyTokenLimit = 32_000;\r\n\r\n  constructor() {\r\n    const apiKey = process.env.GEMINI_API_KEY;\r\n    if (apiKey == undefined || apiKey === '') {\r\n      throw new Error('GEMINI_API_KEY environment variable is not set or is empty.');\r\n    }\r\n    console.info(`GEMINI_API_KEY found, starts with: ${apiKey.slice(0, 5)}...`);\r\n    this.genAI = new GoogleGenAI({ apiKey });\r\n    this.modelName = 'gemini-2.0-flash-lite-001';\r\n  }\r\n\r\n  async checkUsageLimits(): Promise<{\r\n    canMakeRequest: boolean;\r\n    usage?: {\r\n      requests: { used: number; limit: number; remaining: number };\r\n      tokens: { used: number; limit: number; remaining: number };\r\n    };\r\n  }> {\r\n    try {\r\n      const usage = await APIUsageService.getTodayUsage('gemini');\r\n\r\n      if (!usage) {\r\n        return { canMakeRequest: true };\r\n      }\r\n      const requestsUsed = usage.requests_count ?? 0;\r\n      const tokensUsed = usage.tokens_used ?? 0;\r\n\r\n      const requestsRemaining = this.dailyRequestLimit - requestsUsed;\r\n      const tokensRemaining = this.dailyTokenLimit - tokensUsed;\r\n\r\n      return {\r\n        canMakeRequest: requestsRemaining > 0 && tokensRemaining > 100, // Keep 100 token buffer\r\n        usage: {\r\n          requests: {\r\n            used: requestsUsed,\r\n            limit: this.dailyRequestLimit,\r\n            remaining: requestsRemaining,\r\n          },\r\n          tokens: {\r\n            used: tokensUsed,\r\n            limit: this.dailyTokenLimit,\r\n            remaining: tokensRemaining,\r\n          },\r\n        },\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn('Error checking Gemini usage limits:', error);\r\n      return { canMakeRequest: false };\r\n    }\r\n  }\r\n\r\n  async processMenuData(rawMenuText: string): Promise<GeminiResponse<MenuCategory[]>> {\r\n    // Enhanced API monitoring with proactive throttling\r\n    const estimatedTokens = Math.ceil(rawMenuText.length / 4) + 500;\r\n    const canMakeRequest = await APIMonitor.canMakeRequest('gemini', 1, estimatedTokens);\r\n\r\n    if (!canMakeRequest.allowed) {\r\n      return {\r\n        success: false,\r\n        error: `API limit reached: ${canMakeRequest.reason}. Wait time: ${Math.ceil((canMakeRequest.waitTime ?? 0) / 1000 / 60)} minutes`,\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nParse the following food truck menu text and return a structured JSON format.\r\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\r\n\r\nMenu text:\r\n${rawMenuText}\r\n\r\nReturn only valid json in this exact format:\r\n{\r\n  \"categories\": [\r\n    {\r\n      \"name\": \"category_name\",\r\n      \"items\": [\r\n        {\r\n          \"name\": \"item_name\",\r\n          \"description\": \"item_description\",\r\n          \"price\": 0,\r\n          \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", \"dairy-free\", \"spicy\", \"popular\"]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\nRules:\r\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\r\n- Include dietary restrictions and special tags\r\n- Group items into logical categories\r\n- If no clear categories, use \"Main Items\"\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = '';\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        config: { temperature: 0 },\r\n      });\r\n      textOutput = sdkResponse.text ?? '';\r\n\r\n      const tokensUsed =\r\n        sdkResponse.usageMetadata?.totalTokenCount ??\r\n        Math.ceil((prompt.length + textOutput.length) / 4);\r\n\r\n      APIUsageService.trackUsage('gemini', 1, tokensUsed).catch((error) => {\r\n        console.warn('Failed to track API usage:', error);\r\n      });\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as { categories: MenuCategory[] };\r\n        return {\r\n          success: true,\r\n          data: parsedData.categories,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.error('Gemini json parsing error:', parseError);\r\n        console.error('Problematic Gemini raw response text:', textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error('Gemini menu processing error:', error);\r\n      const tokensUsed = Math.ceil(\r\n        (prompt.length + (error instanceof Error ? error.message.length : String(error).length)) /\r\n          4,\r\n      );\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async extractLocationFromText(textInput: string): Promise<GeminiResponse<LocationData>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nExtract location information from the following text and return structured data.\r\nLook for addresses, cross streets, landmarks, or location descriptions.\r\n\r\nText:\r\n${textInput}\r\n\r\nReturn only valid json in this exact format:\r\n{\r\n  \"address\": \"full_address_if_available\",\r\n  \"city\": \"city_name\",\r\n  \"state\": \"state_abbreviation\",\r\n  \"landmarks\": [\"nearby_landmark1\", \"nearby_landmark2\"],\r\n  \"coordinates\": {\r\n    \"lat\": undefined,\r\n    \"lng\": undefined\r\n  },\r\n  \"confidence\": 0.95,\r\n  \"raw_location_text\": \"original_location_mention\"\r\n}\r\n\r\nRules:\r\n- Set coordinates to undefined if not explicitly provided\r\n- Confidence should be 0.0 to 1.0 based on clarity\r\n- Include any mentioned landmarks or cross streets\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = '';\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        config: { temperature: 0 },\r\n      });\r\n      textOutput = sdkResponse.text ?? '';\r\n\r\n      const tokensUsed =\r\n        sdkResponse.usageMetadata?.totalTokenCount ??\r\n        Math.ceil((prompt.length + textOutput.length) / 4);\r\n      APIUsageService.trackUsage('gemini', 1, tokensUsed).catch((error) => {\r\n        console.warn('Failed to track API usage:', error);\r\n      });\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as LocationData;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn('Gemini json parsing error:', parseError);\r\n        console.warn('Problematic Gemini raw response text:', textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error('Gemini location extraction error:', error);\r\n      const tokensUsed = Math.ceil(\r\n        (prompt.length + (error instanceof Error ? error.message.length : String(error).length)) /\r\n          4,\r\n      );\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiResponse<OperatingHours>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nParse the following operating hours text and return standardized format.\r\nConvert all times to 24-hour format and handle various input formats.\r\n\r\nHours text:\r\n${hoursText}\r\n\r\nReturn only valid json in this exact format:\r\n{\r\n  \"monday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"tuesday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"wednesday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"thursday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"friday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"saturday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"sunday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false}\r\n}\r\n\r\nRules:\r\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\r\n- If closed on a day, set \"closed\": true and omit open/close times\r\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\r\n- Default to reasonable hours if ambiguous\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = '';\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        config: { temperature: 0 },\r\n      });\r\n      textOutput = sdkResponse.text ?? '';\r\n\r\n      const tokensUsed =\r\n        sdkResponse.usageMetadata?.totalTokenCount ??\r\n        Math.ceil((prompt.length + textOutput.length) / 4);\r\n      APIUsageService.trackUsage('gemini', 1, tokensUsed).catch((error) => {\r\n        console.warn('Failed to track API usage:', error);\r\n      });\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as OperatingHours;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn('Gemini json parsing error:', parseError);\r\n        console.warn('Problematic Gemini raw response text:', textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn('Gemini hours standardization error:', error);\r\n      const tokensUsed = Math.ceil(\r\n        (prompt.length + (error instanceof Error ? error.message.length : String(error).length)) /\r\n          4,\r\n      );\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async analyzeSentiment(reviewText: string): Promise<GeminiResponse<SentimentAnalysisResult>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nAnalyze the sentiment of this food truck review and extract key insights.\r\nFocus on food quality, service, value, and overall experience.\r\n\r\nReview:\r\n${reviewText}\r\n\r\nReturn only valid json in this exact format:\r\n{\r\n  \"sentiment\": \"positive|negative|neutral\",\r\n  \"score\": 0.85,\r\n  \"confidence\": 0.95,\r\n  \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\", \"wait_time\"],\r\n  \"positive_aspects\": [\"great_food\", \"friendly_service\"],\r\n  \"negative_aspects\": [\"long_wait\", \"expensive\"],\r\n  \"summary\": \"brief_summary_of_review\",\r\n  \"recommended\": true\r\n}\r\n\r\nRules:\r\n- Score should be 0.0 (very negative) to 1.0 (very positive)\r\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\r\n- Include specific aspects mentioned in the review\r\n- Summary should be 1-2 sentences max\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = '';\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        config: { temperature: 0 },\r\n      });\r\n      textOutput = sdkResponse.text ?? '';\r\n\r\n      const tokensUsed =\r\n        sdkResponse.usageMetadata?.totalTokenCount ??\r\n        Math.ceil((prompt.length + textOutput.length) / 4);\r\n      APIUsageService.trackUsage('gemini', 1, tokensUsed).catch((error) => {\r\n        console.warn('Failed to track API usage:', error);\r\n      });\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as SentimentAnalysisResult;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn('Gemini json parsing error:', parseError);\r\n        console.warn('Problematic Gemini raw response text:', textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn('Gemini sentiment analysis error:', error);\r\n      const tokensUsed = Math.ceil(\r\n        (prompt.length + (error instanceof Error ? error.message.length : String(error).length)) /\r\n          4,\r\n      );\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async enhanceFoodTruckData(rawData: unknown): Promise<GeminiResponse<EnhancedFoodTruckData>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded',\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nEnhance and standardize this food truck data. Clean up inconsistencies,\r\nfill in missing information where possible, and improve data quality.\r\n\r\nRaw data:\r\n${JSON.stringify(rawData, undefined, 2)}\r\n\r\nReturn only valid json with enhanced data in this format:\r\n{\r\n  \"name\": \"cleaned_truck_name\",\r\n  \"description\": \"enhanced_description\",\r\n  \"cuisine_type\": [\"mexican\", \"american\", \"fusion\"],\r\n  \"price_range\": \"budget|moderate|expensive\",\r\n  \"specialties\": [\"signature_dish1\", \"signature_dish2\"],\r\n  \"dietary_options\": [\"vegetarian\", \"vegan\", \"gluten_free\"],\r\n  \"enhanced_menu\": {\r\n    \"categories\": []\r\n  },\r\n  \"standardized_hours\": {},\r\n  \"cleaned_contact\": {},\r\n  \"data_quality_improvements\": [],\r\n  \"confidence_score\": 0.85\r\n}\r\n\r\nRules:\r\n- Preserve all original data while enhancing it\r\n- Standardize naming conventions\r\n- Infer cuisine type from menu items\r\n- Estimate price range from menu prices\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = '';\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n      });\r\n      textOutput = sdkResponse.text ?? '';\r\n\r\n      const tokensUsed =\r\n        sdkResponse.usageMetadata?.totalTokenCount ??\r\n        Math.ceil((prompt.length + textOutput.length) / 4);\r\n      APIUsageService.trackUsage('gemini', 1, tokensUsed).catch((error) => {\r\n        console.warn('Failed to track API usage:', error);\r\n      });\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as EnhancedFoodTruckData;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn('Gemini json parsing error:', parseError);\r\n        console.warn('Problematic Gemini raw response text:', textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn('Gemini data enhancement error:', error);\r\n      const tokensUsed = Math.ceil(\r\n        (prompt.length + (error instanceof Error ? error.message.length : String(error).length)) /\r\n          4,\r\n      );\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async batchProcess(\r\n    items: Array<{ type: string; data: unknown }>,\r\n  ): Promise<Array<GeminiResponse<unknown>>> {\r\n    const results: Array<GeminiResponse<unknown>> = [];\r\n\r\n    for (const item of items) {\r\n      let result: GeminiResponse<unknown>;\r\n      switch (item.type) {\r\n        case 'menu': {\r\n          result = await this.processMenuData(item.data as string);\r\n          break;\r\n        }\r\n        case 'location': {\r\n          result = await this.extractLocationFromText(item.data as string);\r\n          break;\r\n        }\r\n        case 'hours': {\r\n          result = await this.standardizeOperatingHours(item.data as string);\r\n          break;\r\n        }\r\n        case 'sentiment': {\r\n          result = await this.analyzeSentiment(item.data as string);\r\n          break;\r\n        }\r\n        case 'enhance': {\r\n          result = await this.enhanceFoodTruckData(item.data); // item.data is already unknown\r\n          break;\r\n        }\r\n        default: {\r\n          result = { success: false, error: `Unknown processing type: ${item.type}` };\r\n          break;\r\n        }\r\n      }\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  async getUsageStats(): Promise<{ requests_count: number; tokens_used: number } | undefined> {\r\n    const usage = await APIUsageService.getTodayUsage('gemini');\r\n    return usage ?? undefined;\r\n  }\r\n\r\n  async extractFoodTruckDetailsFromMarkdown(\r\n    markdownContent: string,\r\n    sourceUrl?: string,\r\n  ): Promise<GeminiResponse<ExtractedFoodTruckDetails>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: 'Daily API limits exceeded for Gemini',\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\r\n\r\nMarkdown Content:\r\n---\r\n${markdownContent}\r\n---\r\n\r\nSource url (if available): ${sourceUrl ?? 'Not provided'}\r\n\r\nTarget json Schema:\r\n{{\r\n  \"name\": \"string | undefined\",\r\n  \"description\": \"string | undefined\",\r\n  \"cuisine_type\": [\"string\", ...], // e.g., [\"Mexican\", \"Tacos\", \"Fusion\"]\r\n  \"price_range\": \"$ | $$ | $$$ | undefined\", // Estimate based on menu prices if possible, otherwise undefined\r\n  \"specialties\": [\"string\", ...], // e.g., [\"Birria Tacos\", \"Signature Burger\"]\r\n  \"current_location\": {{\r\n    \"address\": \"string | undefined\",\r\n    \"city\": \"string | undefined\",\r\n    \"state\": \"string | undefined\", // Should be state/province abbreviation e.g. ca, tx, on\r\n    \"zip_code\": \"string | undefined\",\r\n    \"raw_text\": \"original location text from page | undefined\" // The exact text describing the location from the markdown\r\n  }},\r\n  \"operating_hours\": {{ // Use 24-hour format \"hh:mm\". If unable to parse, leave as undefined.\r\n    \"monday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"tuesday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"wednesday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"thursday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"friday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"saturday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"sunday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined\r\n  }},\r\n  \"menu\": [ // If no menu found, this should be an empty array []\r\n    {{\r\n      \"category\": \"string\", // e.g., \"Appetizers\", \"Main Courses\", \"Drinks\"\r\n      \"items\": [\r\n        {{\r\n          \"name\": \"string\",\r\n          \"description\": \"string | undefined\",\r\n          \"price\": \"number (e.g., 12.99) | string (e.g., 'Market Price') | undefined\",\r\n          \"dietary_tags\": [\"string\", ...] // e.g., [\"vegan\", \"gluten-free\", \"spicy\"]\r\n        }}\r\n      ]\r\n    }}\r\n  ],\r\n  \"contact_info\": {{\r\n    \"phone\": \"string | undefined\", // e.g., \"555-123-4567\"\r\n    \"email\": \"string | undefined\",\r\n    \"website\": \"string | undefined\" // This should be the primary business website, not social media links\r\n  }},\r\n  \"social_media\": {{ // Extract usernames or full urls if available\r\n    \"instagram\": \"string | undefined\",\r\n    \"facebook\": \"string | undefined\",\r\n    \"twitter\": \"string | undefined\",\r\n    \"tiktok\": \"string | undefined\",\r\n    \"yelp\": \"string | undefined\"\r\n    // Add other platforms like yelp, tiktok if found\r\n  }},\r\n    \"source_url\": \"${sourceUrl ?? 'Not provided'}\"\r\n}}\r\n\r\nInstructions:\r\n- Parse the Markdown content to extract the information for the json fields.\r\n- If specific details are missing for a field, use 'undefined' for string/object/numeric fields or empty arrays '[]' for array fields like 'cuisine_type', 'specialties', 'menu', 'dietary_tags'.\r\n- For the 'description' field:\r\n  - Generate a brief, natural, and owner-written style summary suitable for a food truck directory (target 1-2 sentences, maximum 200 characters).\r\n  - Do not use the phrase \"food truck\" in the description.\r\n  - Describe the primary cuisine, signature dishes if mentioned, or overall theme.\r\n  - Prefer specific cuisine types (e.g., \"Korean bbq\", \"Neapolitan Pizza\") over general ones (e.g., \"Asian\", \"Pizza\"). If only general types are available, condense to the most specific possible.\r\n  - Maintain a consistent, fact-based, and neutral tone. Avoid subjective superlatives (e.g., \"world's best\", \"most delicious\").\r\n  - If the source text makes specific claims of being \"the first\" or \"the oldest,\" you may include this factually if it seems central to their identity, but phrase it cautiously (e.g., \"States it was established in [year] as one of the first...\"). Avoid if it seems like puffery.\r\n  - Prioritize objective information over marketing language.\r\n- For 'operating_hours', if a day is mentioned but hours are unclear, set the day to 'undefined'. If a day is explicitly stated as closed, use '{{\"closed\": true}}'. If a day is not mentioned at all, also set it to 'undefined'.\r\n- Ensure times are in \"hh:mm\" 24-hour format. For example, \"2 pm\" should be \"14:00\".\r\n- Prices should be extracted as numbers if possible (e.g., 12.99 from \"$12.99\"). If it's a textual price like \"Market Price\" or \"mp\", use the text.\r\n- 'cuisine_type' should be a list of keywords describing the type of food, as specific as possible.\r\n- 'price_range' can be estimated based on typical item prices: $ (most items < $10), $$ ($10-$20), $$$ (most items > $20).\r\n- 'current_location.raw_text' should contain the original text snippet from which location details were extracted.\r\n- Only return the valid json object. Do not include any explanatory text before or after the json.\r\n`;\r\n    let textOutput: string = '';\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n      });\r\n      textOutput = sdkResponse.text ?? ''; // Clean the response to ensure it's valid json      // Remove potential markdown code block delimiters with safer regex patterns\r\n      const cleanedText = textOutput\r\n        .replace(/^```json[ \\t\\r\\n]{0,10}/, '')\r\n        .replace(/[ \\t\\r\\n]{0,10}```$/, '')\r\n        .trim();\r\n\r\n      const tokensUsed =\r\n        sdkResponse.usageMetadata?.totalTokenCount ??\r\n        Math.ceil((prompt.length + cleanedText.length) / 4);\r\n      void APIUsageService.trackUsage('gemini', 1, tokensUsed);\r\n\r\n      try {\r\n        const parsedData = JSON.parse(cleanedText) as ExtractedFoodTruckDetails;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n          promptSent: prompt,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn('Gemini json parsing error:', parseError);\r\n        console.warn('Problematic Gemini raw response text:', cleanedText);\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${cleanedText.slice(0, 200)}...`,\r\n          tokensUsed,\r\n          promptSent: prompt,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn('Gemini content generation error:', error);\r\n      // Fallback token calculation if the api call itself failed before getting usageMetadata\r\n      const tokensUsed = Math.ceil((prompt.length + textOutput.length) / 4);\r\n      return {\r\n        success: false,\r\n        error:\r\n          error instanceof Error ? error.message : 'Unknown error during Gemini content generation',\r\n        tokensUsed: tokensUsed,\r\n        promptSent: prompt,\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const gemini = new GeminiService();\r\n\r\n// Centralized Gemini operation dispatcher to eliminate duplication\r\nexport async function dispatchGeminiOperation(\r\n  type: 'menu' | 'location' | 'hours' | 'sentiment' | 'enhance',\r\n  data: unknown\r\n): Promise<unknown> {\r\n  switch (type) {\r\n    case 'menu': {\r\n      return await gemini.processMenuData(data as string);\r\n    }\r\n    case 'location': {\r\n      return await gemini.extractLocationFromText(data as string);\r\n    }\r\n    case 'hours': {\r\n      return await gemini.standardizeOperatingHours(data as string);\r\n    }\r\n    case 'sentiment': {\r\n      return await gemini.analyzeSentiment(data as string);\r\n    }\r\n    case 'enhance': {\r\n      return await gemini.enhanceFoodTruckData(data);\r\n    }\r\n    default: {\r\n      throw new Error(`Unknown Gemini operation type: ${String(type)}`);\r\n    }\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\monitoring\\apiMonitor.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Static method 'generateAlerts' has too many lines (93). Maximum allowed is 50.",
        "line": 191,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 283,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * SOTA API Usage Monitoring and Alerting System\r\n * Implements proactive monitoring, alerting, and throttling for all external APIs\r\n */\r\n\r\nimport { APIUsageService } from '@/lib/supabase';\r\n\r\n// API Rate Limits Configuration\r\nexport const API_LIMITS = {\r\n  gemini: {\r\n    requests: { daily: 1500, hourly: 100 },\r\n    tokens: { daily: 32_000, hourly: 2000 },\r\n    alertThresholds: { warning: 0.8, critical: 0.95 }\r\n  },\r\n  firecrawl: {\r\n    requests: { daily: 500, hourly: 50 },\r\n    tokens: { daily: 0, hourly: 0 },\r\n    alertThresholds: { warning: 0.8, critical: 0.95 }\r\n  },\r\n  tavily: {\r\n    requests: { daily: 1000, hourly: 100 },\r\n    tokens: { daily: 0, hourly: 0 },\r\n    alertThresholds: { warning: 0.8, critical: 0.95 }\r\n  },\r\n  supabase: {\r\n    requests: { daily: 50_000, hourly: 5000 },\r\n    tokens: { daily: 0, hourly: 0 },\r\n    alertThresholds: { warning: 0.9, critical: 0.98 }\r\n  }\r\n} as const;\r\n\r\nexport type APIService = keyof typeof API_LIMITS;\r\nexport type AlertLevel = 'info' | 'warning' | 'critical';\r\n\r\nexport interface APIUsageAlert {\r\n  service: APIService;\r\n  level: AlertLevel;\r\n  message: string;\r\n  usage: {\r\n    current: number;\r\n    limit: number;\r\n    percentage: number;\r\n  };\r\n  timestamp: string;\r\n  recommendations: string[];\r\n}\r\n\r\nexport interface APIUsageData {\r\n  requests: { used: number; limit: number; percentage: number };\r\n  tokens?: { used: number; limit: number; percentage: number };\r\n}\r\n\r\nexport interface APIMonitoringResult {\r\n  canMakeRequest: boolean;\r\n  alerts: APIUsageAlert[];\r\n  usage: Record<APIService, APIUsageData>;\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Comprehensive API Monitoring Service\r\n */\r\nexport class APIMonitor {\r\n  private static alertHistory: APIUsageAlert[] = [];\r\n\r\n  /**\r\n   * Check if API request can be made safely\r\n   */\r\n  static async canMakeRequest(\r\n    service: APIService, \r\n    requestCount: number = 1, \r\n    tokenCount: number = 0\r\n  ): Promise<{ allowed: boolean; reason?: string; waitTime?: number }> {\r\n    try {\r\n      const usage = await this.getCurrentUsage(service);\r\n      const limits = API_LIMITS[service];\r\n\r\n      // Check daily limits\r\n      const newRequestCount = usage.requests.used + requestCount;\r\n      const newTokenCount = (usage.tokens?.used ?? 0) + tokenCount;\r\n\r\n      if (newRequestCount > limits.requests.daily) {\r\n        return {\r\n          allowed: false,\r\n          reason: `Daily request limit exceeded (${newRequestCount}/${limits.requests.daily})`,\r\n          waitTime: this.getTimeUntilReset('daily')\r\n        };\r\n      }\r\n\r\n      if (limits.tokens != undefined && newTokenCount > limits.tokens.daily) {\r\n        return {\r\n          allowed: false,\r\n          reason: `Daily token limit exceeded (${newTokenCount}/${limits.tokens.daily})`,\r\n          waitTime: this.getTimeUntilReset('daily')\r\n        };\r\n      }\r\n\r\n      // Check if approaching critical threshold\r\n      const requestPercentage = newRequestCount / limits.requests.daily;\r\n      if (requestPercentage > limits.alertThresholds.critical) {\r\n        return {\r\n          allowed: false,\r\n          reason: `Approaching critical usage threshold (${(requestPercentage * 100).toFixed(1)}%)`,\r\n          waitTime: this.getTimeUntilReset('daily')\r\n        };\r\n      }\r\n\r\n      return { allowed: true };\r\n    } catch (error) {\r\n      console.error(`Error checking API limits for ${service}:`, error);\r\n      // Fail safe - allow request but log error\r\n      return { allowed: true };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current usage for a service\r\n   */\r\n  static async getCurrentUsage(service: APIService): Promise<APIUsageData> {\r\n    const todayUsage = await APIUsageService.getTodayUsage(service);\r\n    const limits = API_LIMITS[service];\r\n\r\n    const usage: APIUsageData = {\r\n      requests: {\r\n        used: todayUsage?.requests_count ?? 0,\r\n        limit: limits.requests.daily,\r\n        percentage: ((todayUsage?.requests_count ?? 0) / limits.requests.daily) * 100\r\n      }\r\n    };\r\n\r\n    if (limits.tokens.daily > 0) {\r\n      usage.tokens = {\r\n        used: todayUsage?.tokens_used ?? 0,\r\n        limit: limits.tokens.daily,\r\n        percentage: ((todayUsage?.tokens_used ?? 0) / limits.tokens.daily) * 100\r\n      };\r\n    }\r\n\r\n    return usage;\r\n  }\r\n\r\n  /**\r\n   * Comprehensive monitoring check for all APIs\r\n   */\r\n  static async checkAllAPIs(): Promise<APIMonitoringResult> {\r\n    const alerts: APIUsageAlert[] = [];\r\n    const usage: Record<APIService, APIUsageData> = {} as Record<APIService, APIUsageData>;\r\n    const recommendations: string[] = [];\r\n    let canMakeRequest = true;\r\n\r\n    for (const service of Object.keys(API_LIMITS) as APIService[]) {\r\n      try {\r\n        const serviceUsage = await this.getCurrentUsage(service);\r\n        usage[service] = serviceUsage;\r\n\r\n        // Check for alerts\r\n        const serviceAlerts = this.generateAlerts(service, serviceUsage);\r\n        alerts.push(...serviceAlerts);\r\n\r\n        // Check if any service is at critical level\r\n        if (serviceUsage.requests.percentage > API_LIMITS[service].alertThresholds.critical * 100) {\r\n          canMakeRequest = false;\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error monitoring ${service}:`, error);\r\n        alerts.push({\r\n          service,\r\n          level: 'warning',\r\n          message: `Failed to check usage for ${service}`,\r\n          usage: { current: 0, limit: 0, percentage: 0 },\r\n          timestamp: new Date().toISOString(),\r\n          recommendations: ['Check API connectivity', 'Verify credentials']\r\n        });\r\n      }\r\n    }\r\n\r\n    // Generate global recommendations\r\n    recommendations.push(...this.generateRecommendations(usage, alerts));\r\n\r\n    return {\r\n      canMakeRequest,\r\n      alerts,\r\n      usage,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate alerts for a specific service\r\n   */\r\n  private static generateAlerts(service: APIService, usage: APIUsageData): APIUsageAlert[] {\r\n    const alerts: APIUsageAlert[] = [];\r\n    const limits = API_LIMITS[service];\r\n    const timestamp = new Date().toISOString();\r\n\r\n    // Check request usage\r\n    const requestPercentage = usage.requests.percentage;\r\n    if (requestPercentage > limits.alertThresholds.critical * 100) {\r\n      alerts.push({\r\n        service,\r\n        level: 'critical',\r\n        message: `Critical: ${service} request usage at ${requestPercentage.toFixed(1)}%`,\r\n        usage: {\r\n          current: usage.requests.used,\r\n          limit: usage.requests.limit,\r\n          percentage: requestPercentage\r\n        },\r\n        timestamp,\r\n        recommendations: [\r\n          'Immediately reduce API calls',\r\n          'Implement request queuing',\r\n          'Consider upgrading API plan'\r\n        ]\r\n      });\r\n    } else if (requestPercentage > limits.alertThresholds.warning * 100) {\r\n      alerts.push({\r\n        service,\r\n        level: 'warning',\r\n        message: `Warning: ${service} request usage at ${requestPercentage.toFixed(1)}%`,\r\n        usage: {\r\n          current: usage.requests.used,\r\n          limit: usage.requests.limit,\r\n          percentage: requestPercentage\r\n        },\r\n        timestamp,\r\n        recommendations: [\r\n          'Monitor usage closely',\r\n          'Optimize request patterns',\r\n          'Enable request caching'\r\n        ]\r\n      });\r\n    }\r\n\r\n    // Check token usage if applicable\r\n    if (usage.tokens && limits.tokens.daily > 0) {\r\n      const tokenPercentage = usage.tokens.percentage;\r\n      if (tokenPercentage > limits.alertThresholds.critical * 100) {\r\n        alerts.push({\r\n          service,\r\n          level: 'critical',\r\n          message: `Critical: ${service} token usage at ${tokenPercentage.toFixed(1)}%`,\r\n          usage: {\r\n            current: usage.tokens.used,\r\n            limit: usage.tokens.limit,\r\n            percentage: tokenPercentage\r\n          },\r\n          timestamp,\r\n          recommendations: [\r\n            'Reduce prompt complexity',\r\n            'Implement response caching',\r\n            'Optimize token usage patterns'\r\n          ]\r\n        });\r\n      } else if (tokenPercentage > limits.alertThresholds.warning * 100) {\r\n        alerts.push({\r\n          service,\r\n          level: 'warning',\r\n          message: `Warning: ${service} token usage at ${tokenPercentage.toFixed(1)}%`,\r\n          usage: {\r\n            current: usage.tokens.used,\r\n            limit: usage.tokens.limit,\r\n            percentage: tokenPercentage\r\n          },\r\n          timestamp,\r\n          recommendations: [\r\n            'Monitor token consumption',\r\n            'Optimize prompt efficiency',\r\n            'Consider response caching'\r\n          ]\r\n        });\r\n      }\r\n    }\r\n\r\n    // Store alerts in history\r\n    this.alertHistory.push(...alerts);\r\n    \r\n    // Keep only last 100 alerts\r\n    if (this.alertHistory.length > 100) {\r\n      this.alertHistory = this.alertHistory.slice(-100);\r\n    }\r\n\r\n    return alerts;\r\n  }\r\n\r\n  /**\r\n   * Generate optimization recommendations\r\n   */\r\n  private static generateRecommendations(usage: Record<APIService, APIUsageData>, alerts: APIUsageAlert[]): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // High-level optimization recommendations\r\n    const criticalAlerts = alerts.filter(a => a.level === 'critical');\r\n    const warningAlerts = alerts.filter(a => a.level === 'warning');\r\n\r\n    if (criticalAlerts.length > 0) {\r\n      recommendations.push('URGENT: Implement immediate API throttling', 'Enable aggressive caching for all API responses', 'Consider upgrading API plans for critical services');\r\n    }\r\n\r\n    if (warningAlerts.length > 0) {\r\n      recommendations.push('Implement request queuing and batching', 'Optimize API call patterns and frequency', 'Enable response caching where possible');\r\n    }\r\n\r\n    // Service-specific recommendations\r\n    if (usage.gemini?.requests?.percentage > 70) {\r\n      recommendations.push('Gemini: Optimize prompt length and complexity', 'Gemini: Implement response caching for similar queries');\r\n    }\r\n\r\n    if (usage.firecrawl?.requests?.percentage > 70) {\r\n      recommendations.push('Firecrawl: Implement URL deduplication', 'Firecrawl: Cache crawl results for repeated URLs');\r\n    }\r\n\r\n    return [...new Set(recommendations)]; // Remove duplicates\r\n  }\r\n\r\n  /**\r\n   * Get time until rate limit reset\r\n   */\r\n  private static getTimeUntilReset(period: 'hourly' | 'daily'): number {\r\n    const now = new Date();\r\n    \r\n    if (period === 'hourly') {\r\n      const nextHour = new Date(now);\r\n      nextHour.setHours(now.getHours() + 1, 0, 0, 0);\r\n      return nextHour.getTime() - now.getTime();\r\n    } else {\r\n      const nextDay = new Date(now);\r\n      nextDay.setDate(now.getDate() + 1);\r\n      nextDay.setHours(0, 0, 0, 0);\r\n      return nextDay.getTime() - now.getTime();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get alert history\r\n   */\r\n  static getAlertHistory(): APIUsageAlert[] {\r\n    return [...this.alertHistory];\r\n  }\r\n\r\n  /**\r\n   * Clear alert history\r\n   */\r\n  static clearAlertHistory(): void {\r\n    this.alertHistory = [];\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\performance\\bundleAnalyzer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\performance\\databaseCache.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async arrow function has too many lines (66). Maximum allowed is 50.",
        "line": 78,
        "column": 5,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "exceed",
        "endLine": 143,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 142,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 142,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * SOTA Database Query Optimization and Caching\r\n * Implements Next.js unstable_cache for optimal performance\r\n */\r\n\r\nimport { unstable_cache } from 'next/cache';\r\nimport { supabaseAdmin, FoodTruckService } from '@/lib/supabase';\r\nimport type { FoodTruck } from '@/lib/types';\r\n\r\n// Cache configuration\r\nconst CACHE_CONFIG = {\r\n  // Short-term cache for frequently changing data\r\n  SHORT_TTL: 60 * 5, // 5 minutes\r\n  // Medium-term cache for semi-static data\r\n  MEDIUM_TTL: 60 * 30, // 30 minutes\r\n  // Long-term cache for static data\r\n  LONG_TTL: 60 * 60 * 24, // 24 hours\r\n} as const;\r\n\r\n/**\r\n * Cached food truck queries with optimized database access\r\n */\r\nexport const CachedFoodTruckService = {\r\n  /**\r\n   * Get all food trucks with caching\r\n   * Cache for 30 minutes since truck data changes moderately\r\n   */\r\n  getAllTrucksCached : unstable_cache(\r\n    async (): Promise<{ trucks: FoodTruck[]; count: number }> => {\r\n      console.info('CachedFoodTruckService: Cache miss - fetching all trucks from database');\r\n      const result = await FoodTruckService.getAllTrucks();\r\n      return { trucks: result.trucks, count: result.total };\r\n    },\r\n    ['all-trucks'],\r\n    {\r\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\r\n      tags: ['food-trucks', 'all-trucks']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get trucks by location with caching\r\n   * Cache for 5 minutes since location-based queries are time-sensitive\r\n   */\r\n  getTrucksByLocationCached : unstable_cache(\r\n    async (lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> => {\r\n      console.info(`CachedFoodTruckService: Cache miss - fetching trucks near ${lat},${lng} (${radiusKm}km)`);\r\n      return await FoodTruckService.getTrucksByLocation(lat, lng, radiusKm);\r\n    },\r\n    ['trucks-by-location'],\r\n    {\r\n      revalidate: CACHE_CONFIG.SHORT_TTL,\r\n      tags: ['food-trucks', 'location-search']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get truck by ID with caching\r\n   * Cache for 30 minutes since individual truck data is relatively stable\r\n   */\r\n  getTruckByIdCached : unstable_cache(\r\n    async (id: string): Promise<FoodTruck | null> => {\r\n      console.info(`CachedFoodTruckService: Cache miss - fetching truck ${id} from database`);\r\n      return await FoodTruckService.getTruckById(id);\r\n    },\r\n    ['truck-by-id'],\r\n    {\r\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\r\n      tags: ['food-trucks', 'truck-details']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Search trucks with caching\r\n   * Cache for 5 minutes since search results should be relatively fresh\r\n   */\r\n  searchTrucksCached : unstable_cache(\r\n    async (query: string, filters?: {\r\n      cuisine?: string;\r\n      openNow?: boolean;\r\n      lat?: number;\r\n      lng?: number;\r\n      radius?: number;\r\n    }): Promise<FoodTruck[]> => {\r\n      console.info(`CachedFoodTruckService: Cache miss - searching trucks for \"${query}\"`);\r\n      \r\n      if (supabaseAdmin == undefined) {\r\n        throw new Error('Supabase admin client not available');\r\n      }\r\n\r\n      let dbQuery = supabaseAdmin\r\n        .from('food_trucks')\r\n        .select('*')\r\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%,cuisine_type.cs.{${query}}`);\r\n\r\n      // Apply filters\r\n      if (filters?.cuisine != undefined && filters.cuisine !== '') {\r\n        dbQuery = dbQuery.contains('cuisine_type', [filters.cuisine]);\r\n      }\r\n\r\n      const { data: trucks, error } = await dbQuery.limit(50);\r\n\r\n      if (error != undefined) {\r\n        throw new Error(`Search query failed: ${error.message}`);\r\n      }\r\n\r\n      let results = trucks ?? [];\r\n\r\n      // Apply location filter if provided\r\n      if (filters?.lat != undefined && filters?.lng != undefined && filters?.radius != undefined) {\r\n        results = results.filter((truck: FoodTruck) => {\r\n          if (truck.current_location?.lat == undefined || truck.current_location?.lng == undefined) {\r\n            return false;\r\n          }\r\n          const distance = calculateDistance(\r\n            filters.lat,\r\n            filters.lng,\r\n            truck.current_location.lat,\r\n            truck.current_location.lng\r\n          );\r\n          return distance <= (filters.radius ?? 10);\r\n        });\r\n      }\r\n\r\n      // Apply openNow filter if provided\r\n      if (filters?.openNow === true) {\r\n        const now = new Date();\r\n        const currentDay = now.toLocaleDateString('en-US', { weekday: 'short' }).toLowerCase(); // 'mon', 'tue', etc.\r\n        const currentTime = now.getHours() * 100 + now.getMinutes(); // HHMM format\r\n\r\n        results = results.filter((truck: FoodTruck) => {\r\n          const hours = truck.operating_hours?.[currentDay as keyof typeof truck.operating_hours] as { closed?: boolean; open?: string; close?: string } | undefined;\r\n          if (hours == undefined || hours.closed === true) return false;\r\n\r\n          const openTime = parseTimeString(hours.open ?? '');\r\n          const closeTime = parseTimeString(hours.close ?? '');\r\n\r\n          return currentTime >= openTime && currentTime <= closeTime;\r\n        });\r\n      }\r\n\r\n      return results;\r\n    },\r\n    ['search-trucks'],\r\n    {\r\n      revalidate: CACHE_CONFIG.SHORT_TTL,\r\n      tags: ['food-trucks', 'search']\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get data quality statistics with caching\r\n   * Cache for 24 hours since quality stats change slowly\r\n   */\r\n  getDataQualityStatsCached : unstable_cache(\r\n    async (): Promise<{\r\n      averageScore: number;\r\n      distribution: Record<string, number>;\r\n      totalTrucks: number;\r\n    }> => {\r\n      console.info('CachedFoodTruckService: Cache miss - calculating data quality stats');\r\n      \r\n      if (supabaseAdmin == undefined) {\r\n        throw new Error('Supabase admin client not available');\r\n      }\r\n\r\n      const { data: trucks, error } = await supabaseAdmin\r\n        .from('food_trucks')\r\n        .select('data_quality_score');\r\n\r\n      if (error) {\r\n        throw new Error(`Quality stats query failed: ${error.message}`);\r\n      }\r\n\r\n      const scores = trucks == undefined ? [] : trucks.map((t: { data_quality_score?: number }) => t.data_quality_score ?? 0);\r\n      const averageScore = scores.length > 0\r\n        ? scores.reduce((sum: number, score: number) => sum + score, 0) / scores.length\r\n        : 0;\r\n\r\n      const distribution = {\r\n        high: scores.filter((s: number) => s >= 0.8).length,\r\n        medium: scores.filter((s: number) => s >= 0.6 && s < 0.8).length,\r\n        low: scores.filter((s: number) => s < 0.6).length\r\n      };\r\n\r\n      return {\r\n        averageScore: Math.round(averageScore * 100) / 100,\r\n        distribution,\r\n        totalTrucks: scores.length\r\n      };\r\n    },\r\n    ['data-quality-stats'],\r\n    {\r\n      revalidate: CACHE_CONFIG.LONG_TTL,\r\n      tags: ['food-trucks', 'data-quality']\r\n    }\r\n  ),\r\n};\r\n\r\n/**\r\n * Cache invalidation utilities\r\n */\r\nexport const CacheManager = {\r\n  /**\r\n   * Invalidate all food truck related caches\r\n   */\r\n  async invalidateAllFoodTruckCaches(): Promise<void> {\r\n    try {\r\n      const { revalidateTag } = await import('next/cache');\r\n      revalidateTag('food-trucks');\r\n      console.info('CacheManager: Invalidated all food truck caches');\r\n    } catch (error) {\r\n      console.warn('CacheManager: Failed to invalidate caches:', error);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Invalidate specific truck cache\r\n   */\r\n  async invalidateTruckCache(truckId: string): Promise<void> {\r\n    try {\r\n      const { revalidateTag } = await import('next/cache');\r\n      revalidateTag(`truck-${truckId}`);\r\n      revalidateTag('food-trucks'); // Also invalidate general caches\r\n      console.info(`CacheManager: Invalidated cache for truck ${truckId}`);\r\n    } catch (error) {\r\n      console.warn('CacheManager: Failed to invalidate truck cache:', error);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Invalidate search and location caches\r\n   */\r\n  async invalidateSearchCaches(): Promise<void> {\r\n    try {\r\n      const { revalidateTag } = await import('next/cache');\r\n      revalidateTag('search');\r\n      revalidateTag('location-search');\r\n      console.info('CacheManager: Invalidated search caches');\r\n    } catch (error) {\r\n      console.warn('CacheManager: Failed to invalidate search caches:', error);\r\n    }\r\n  },\r\n};\r\n\r\n/**\r\n * Utility functions\r\n */\r\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\r\n  const R = 6371; // Earth's radius in kilometers\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLng = (lng2 - lng1) * Math.PI / 180;\r\n  const a = \r\n    Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n    Math.sin(dLng/2) * Math.sin(dLng/2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n  return R * c;\r\n}\r\n\r\nfunction parseTimeString(timeStr: string): number {\r\n  if (timeStr == undefined || timeStr === '') return 0;\r\n  const [hours, minutes] = timeStr.split(':').map(Number);\r\n  return hours * 100 + (minutes ?? 0);\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\performance\\webVitals.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'getPerformanceOptimizationSuggestions' has too many lines (102). Maximum allowed is 50.",
        "line": 221,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 322,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 105,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 105,
        "endColumn": 11,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 107,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 107,
        "endColumn": 11,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 109,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 109,
        "endColumn": 11,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 111,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 111,
        "endColumn": 11,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 113,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 113,
        "endColumn": 12,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * SOTA Core Web Vitals Monitoring Implementation\r\n * Tracks LCP, FID, CLS, FCP, and TTFB metrics for performance optimization\r\n */\r\n\r\n// @ts-expect-error TS(2792): Cannot find module 'web-vitals'. Did you mean to s... Remove this comment to see the full error message\r\nimport { getCLS, getFCP, getFID, getLCP, getTTFB, Metric } from 'web-vitals';\r\n\r\n// Performance thresholds based on Google's Core Web Vitals standards\r\nexport const PERFORMANCE_THRESHOLDS = {\r\n  LCP: { good: 2500, needsImprovement: 4000 }, // Largest Contentful Paint\r\n  FID: { good: 100, needsImprovement: 300 },   // First Input Delay\r\n  CLS: { good: 0.1, needsImprovement: 0.25 },  // Cumulative Layout Shift\r\n  FCP: { good: 1800, needsImprovement: 3000 }, // First Contentful Paint\r\n  TTFB: { good: 800, needsImprovement: 1800 }  // Time to First Byte\r\n} as const;\r\n\r\nexport type MetricName = keyof typeof PERFORMANCE_THRESHOLDS;\r\n\r\nexport interface PerformanceMetric {\r\n  name: MetricName;\r\n  value: number;\r\n  rating: 'good' | 'needs-improvement' | 'poor';\r\n  timestamp: number;\r\n  url: string;\r\n  userAgent: string;\r\n}\r\n\r\n// In-memory storage for metrics (in production, send to analytics service)\r\nconst metricsStore: PerformanceMetric[] = [];\r\n\r\n/**\r\n * Categorizes metric value based on thresholds\r\n */\r\nfunction getRating(name: MetricName, value: number): 'good' | 'needs-improvement' | 'poor' {\r\n  const thresholds = PERFORMANCE_THRESHOLDS[name];\r\n  if (value <= thresholds.good) return 'good';\r\n  if (value <= thresholds.needsImprovement) return 'needs-improvement';\r\n  return 'poor';\r\n}\r\n\r\n/**\r\n * Processes and stores a web vital metric\r\n */\r\nfunction handleMetric(metric: Metric) {\r\n  // Type-safe casting with validation\r\n  const metricName = String((metric as { name: string }).name) as MetricName;\r\n  const metricValue = Number((metric as { value: number }).value);\r\n\r\n  const performanceMetric: PerformanceMetric = {\r\n    name: metricName,\r\n    value: metricValue,\r\n    rating: getRating(metricName, metricValue),\r\n    timestamp: Date.now(),\r\n    url: globalThis.location.href,\r\n    userAgent: navigator.userAgent\r\n  };\r\n\r\n  // Store metric locally\r\n  metricsStore.push(performanceMetric);\r\n\r\n  // Send to analytics endpoint (non-blocking)\r\n  sendMetricToAnalytics(performanceMetric).catch(error => {\r\n    console.warn('Failed to send metric to analytics:', error);\r\n  });\r\n\r\n  // Log performance issues\r\n  if (performanceMetric.rating === 'poor') {\r\n    console.warn(`Poor ${metricName} performance:`, {\r\n      value: metricValue,\r\n      threshold: PERFORMANCE_THRESHOLDS[metricName],\r\n      url: performanceMetric.url\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Sends metric data to analytics endpoint\r\n */\r\nasync function sendMetricToAnalytics(metric: PerformanceMetric): Promise<void> {\r\n  try {\r\n    await fetch('/api/analytics/web-vitals', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(metric),\r\n    });\r\n  } catch (error) {\r\n    // Silently fail - don't impact user experience\r\n    console.info('Analytics endpoint unavailable:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes Core Web Vitals monitoring\r\n * Call this in your app's root component or _app.tsx\r\n */\r\nexport function initWebVitalsMonitoring(): void {\r\n  try {\r\n    // Type-safe metric handlers with explicit casting\r\n    const safeHandleMetric = (metric: Metric) => handleMetric(metric);\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getCLS(safeHandleMetric);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getFCP(safeHandleMetric);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getFID(safeHandleMetric);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getLCP(safeHandleMetric);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    getTTFB(safeHandleMetric);\r\n  } catch (error) {\r\n    console.warn('Failed to initialize web vitals monitoring:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets current performance metrics summary\r\n */\r\nexport function getPerformanceMetrics(): {\r\n  metrics: PerformanceMetric[];\r\n  summary: Record<MetricName, {\r\n    latest: number | null;\r\n    average: number;\r\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\r\n    count: number;\r\n  }>;\r\n} {\r\n  const summary = {} as Record<MetricName, {\r\n    latest: number | null;\r\n    average: number;\r\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\r\n    count: number;\r\n  }>;\r\n\r\n  // Initialize summary for all metrics\r\n  for (const metricName of Object.keys(PERFORMANCE_THRESHOLDS)) {\r\n    const name = metricName as MetricName;\r\n    const metricData = metricsStore.filter(m => m.name === name);\r\n    \r\n    if (metricData.length === 0) {\r\n      summary[name] = {\r\n        latest: undefined,\r\n        average: 0,\r\n        rating: 'no-data',\r\n        count: 0\r\n      };\r\n    } else {\r\n      const latest = metricData.at(-1);\r\n      const average = metricData.reduce((sum, m) => sum + m.value, 0) / metricData.length;\r\n      \r\n      summary[name] = {\r\n        latest: latest?.value ?? undefined,\r\n        average: Math.round(average),\r\n        rating: getRating(name, average),\r\n        count: metricData.length\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    metrics: [...metricsStore],\r\n    summary\r\n  };\r\n}\r\n\r\n/**\r\n * Performance budget checker\r\n */\r\nexport function checkPerformanceBudget(): {\r\n  passed: boolean;\r\n  violations: Array<{\r\n    metric: MetricName;\r\n    value: number;\r\n    threshold: number;\r\n    severity: 'warning' | 'critical';\r\n  }>;\r\n} {\r\n  const { summary } = getPerformanceMetrics();\r\n  const violations: Array<{\r\n    metric: MetricName;\r\n    value: number;\r\n    threshold: number;\r\n    severity: 'warning' | 'critical';\r\n  }> = [];\r\n\r\n  for (const [metricName, data] of Object.entries(summary)) {\r\n    const name = metricName as MetricName;\r\n    if (data.latest == undefined) continue;\r\n\r\n    const thresholds = PERFORMANCE_THRESHOLDS[name];\r\n    \r\n    if (data.latest > thresholds.needsImprovement) {\r\n      violations.push({\r\n        metric: name,\r\n        value: data.latest,\r\n        threshold: thresholds.needsImprovement,\r\n        severity: 'critical'\r\n      });\r\n    } else if (data.latest > thresholds.good) {\r\n      violations.push({\r\n        metric: name,\r\n        value: data.latest,\r\n        threshold: thresholds.good,\r\n        severity: 'warning'\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    passed: violations.length === 0,\r\n    violations\r\n  };\r\n}\r\n\r\n/**\r\n * Performance optimization suggestions based on metrics\r\n */\r\nexport function getPerformanceOptimizationSuggestions(): Array<{\r\n  metric: MetricName;\r\n  issue: string;\r\n  suggestions: string[];\r\n  priority: 'high' | 'medium' | 'low';\r\n}> {\r\n  const { summary } = getPerformanceMetrics();\r\n  const suggestions: Array<{\r\n    metric: MetricName;\r\n    issue: string;\r\n    suggestions: string[];\r\n    priority: 'high' | 'medium' | 'low';\r\n  }> = [];\r\n\r\n  for (const [metricName, data] of Object.entries(summary)) {\r\n    const name = metricName as MetricName;\r\n    if (data.rating === 'poor' || data.rating === 'needs-improvement') {\r\n      switch (name) {\r\n        case 'LCP': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `Largest Contentful Paint is ${data.latest}ms (target: <2500ms)`,\r\n            suggestions: [\r\n              'Optimize images with Next.js Image component',\r\n              'Implement lazy loading for non-critical content',\r\n              'Use CDN for static assets',\r\n              'Optimize server response times',\r\n              'Preload critical resources'\r\n            ],\r\n            priority: 'high'\r\n          });\r\n          break;\r\n        }\r\n        case 'FID': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `First Input Delay is ${data.latest}ms (target: <100ms)`,\r\n            suggestions: [\r\n              'Reduce JavaScript bundle size',\r\n              'Implement code splitting',\r\n              'Use web workers for heavy computations',\r\n              'Optimize third-party scripts',\r\n              'Defer non-critical JavaScript'\r\n            ],\r\n            priority: 'high'\r\n          });\r\n          break;\r\n        }\r\n        case 'CLS': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `Cumulative Layout Shift is ${data.latest} (target: <0.1)`,\r\n            suggestions: [\r\n              'Set explicit dimensions for images and videos',\r\n              'Reserve space for dynamic content',\r\n              'Use CSS aspect-ratio for responsive images',\r\n              'Avoid inserting content above existing content',\r\n              'Use transform animations instead of layout changes'\r\n            ],\r\n            priority: 'medium'\r\n          });\r\n          break;\r\n        }\r\n        case 'FCP': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `First Contentful Paint is ${data.latest}ms (target: <1800ms)`,\r\n            suggestions: [\r\n              'Optimize critical rendering path',\r\n              'Inline critical CSS',\r\n              'Minimize render-blocking resources',\r\n              'Use resource hints (preload, prefetch)',\r\n              'Optimize web fonts loading'\r\n            ],\r\n            priority: 'medium'\r\n          });\r\n          break;\r\n        }\r\n        case 'TTFB': {\r\n          suggestions.push({\r\n            metric: name,\r\n            issue: `Time to First Byte is ${data.latest}ms (target: <800ms)`,\r\n            suggestions: [\r\n              'Optimize server response times',\r\n              'Use CDN for global distribution',\r\n              'Implement server-side caching',\r\n              'Optimize database queries',\r\n              'Use edge computing for dynamic content'\r\n            ],\r\n            priority: 'high'\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return suggestions.sort((a, b) => {\r\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\r\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\r\n  });\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\pipelineManager.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'runPipeline' has too many lines (76). Maximum allowed is 50.",
        "line": 91,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 166,
        "endColumn": 4
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async method 'processJobs' has too many lines (80). Maximum allowed is 50.",
        "line": 208,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 287,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/pipelineManager.ts\r\n// Unified Pipeline Manager - Consolidates all pipeline operations\r\n\r\nimport { ScrapingJobService } from './supabase';\r\nimport { discoveryEngine } from './discoveryEngine';\r\nimport { processScrapingJob } from './pipelineProcessor';\r\nimport { ensureDefaultTrucksAreScraped } from './autoScraper';\r\n\r\n// Configuration interfaces\r\nexport interface PipelineConfig {\r\n  type: 'discovery' | 'processing' | 'full' | 'maintenance';\r\n  params: {\r\n    maxUrls?: number;\r\n    maxUrlsToProcess?: number;\r\n    targetCities?: string[];\r\n    priority?: number;\r\n    skipDiscovery?: boolean;\r\n    retryFailedJobs?: boolean;\r\n  };\r\n}\r\n\r\nexport interface DiscoveryParams {\r\n  cities: string[];\r\n  maxUrls: number;\r\n  searchTerms?: string[];\r\n}\r\n\r\nexport interface ProcessingOptions {\r\n  maxJobs: number;\r\n  priority: number;\r\n  retryFailedJobs: boolean;\r\n}\r\n\r\n// Result interfaces\r\nexport interface PipelineResult {\r\n  success: boolean;\r\n  type: string;\r\n  phase: string;\r\n  summary: {\r\n    urlsDiscovered?: number;\r\n    urlsProcessed?: number;\r\n    jobsCreated?: number;\r\n    trucksCreated?: number;\r\n    errors?: number;\r\n    duration: number;\r\n  };\r\n  details: unknown;\r\n  timestamp: string;\r\n}\r\n\r\nexport interface DiscoveryResult {\r\n  success: boolean;\r\n  urlsDiscovered: number;\r\n  urlsStored: number;\r\n  urlsDuplicate: number;\r\n  errors: string[];\r\n  duration: number;\r\n}\r\n\r\nexport interface ProcessingResult {\r\n  success: boolean;\r\n  jobsProcessed: number;\r\n  jobsSuccessful: number;\r\n  jobsFailed: number;\r\n  trucksCreated: number;\r\n  errors: string[];\r\n  duration: number;\r\n}\r\n\r\nexport interface MaintenanceResult {\r\n  success: boolean;\r\n  trucksProcessed: number;\r\n  newTrucksFound: number;\r\n  errors: string[];\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * Unified Pipeline Manager\r\n *\r\n * Consolidates all pipeline operations into a single, modular system:\r\n * - Discovery: Find new food truck URLs using Tavily\r\n * - Processing: Process URLs through Firecrawl + Gemini pipeline\r\n * - Full: Combined discovery + processing\r\n * - Maintenance: Check existing trucks for stale data\r\n */\r\nexport class PipelineManager {\r\n  /**\r\n   * Run the complete pipeline based on configuration\r\n   */\r\n  async runPipeline(config: PipelineConfig): Promise<PipelineResult> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      console.info(`≡ƒÜÇ PipelineManager: Starting ${config.type} pipeline...`);\r\n\r\n      let result: unknown;\r\n\r\n      switch (config.type) {\r\n        case 'discovery': {\r\n          result = await this.runDiscovery({\r\n            cities: config.params.targetCities ?? [],\r\n            maxUrls: config.params.maxUrls ?? 50,\r\n            searchTerms: ['food truck', 'food cart', 'mobile food'],\r\n          });\r\n          break;\r\n        }\r\n\r\n        case 'processing': {\r\n          result = await this.processJobs({\r\n            maxJobs: config.params.maxUrlsToProcess ?? 20,\r\n            priority: config.params.priority ?? 5,\r\n            retryFailedJobs: config.params.retryFailedJobs ?? false,\r\n          });\r\n          break;\r\n        }\r\n\r\n        case 'full': {\r\n          result = await this.runFullPipeline(config);\r\n          break;\r\n        }\r\n\r\n        case 'maintenance': {\r\n          result = await this.runMaintenance();\r\n          break;\r\n        }\r\n\r\n        default: {\r\n          throw new Error(`Unknown pipeline type: ${String(config.type)}`);\r\n        }\r\n      }\r\n\r\n      const duration = Date.now() - startTime;\r\n\r\n      return {\r\n        success: true,\r\n        type: config.type,\r\n        phase: 'completed',\r\n        summary: {\r\n          ...(typeof result === 'object' && result !== null\r\n            ? (result as Record<string, unknown>)\r\n            : {}),\r\n          duration,\r\n        },\r\n        details: result,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    } catch (error) {\r\n      const duration = Date.now() - startTime;\r\n      console.error(`Γ¥î PipelineManager: ${config.type} pipeline failed:`, error);\r\n\r\n      return {\r\n        success: false,\r\n        type: config.type,\r\n        phase: 'failed',\r\n        summary: {\r\n          errors: 1,\r\n          duration,\r\n        },\r\n        details: {\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n        },\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  }\r\n  /**\r\n   * Run URL discovery using Tavily search\r\n   */\r\n  async runDiscovery(_params: DiscoveryParams): Promise<DiscoveryResult> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      console.info(`≡ƒöì PipelineManager: Starting discovery process...`);\r\n\r\n      // Use the existing discovery engine's method\r\n      const discoveryResult = await discoveryEngine.discoverNewFoodTrucks();\r\n\r\n      const duration = Date.now() - startTime;\r\n\r\n      return {\r\n        success: discoveryResult.errors.length === 0,\r\n        urlsDiscovered: discoveryResult.urls_discovered,\r\n        urlsStored: discoveryResult.urls_stored,\r\n        urlsDuplicate: discoveryResult.urls_duplicates,\r\n        errors: discoveryResult.errors,\r\n        duration,\r\n      };\r\n    } catch (error) {\r\n      const duration = Date.now() - startTime;\r\n      const errorMsg = error instanceof Error ? error.message : 'Unknown discovery error';\r\n      console.error('Γ¥î PipelineManager: Discovery failed:', error);\r\n\r\n      return {\r\n        success: false,\r\n        urlsDiscovered: 0,\r\n        urlsStored: 0,\r\n        urlsDuplicate: 0,\r\n        errors: [errorMsg],\r\n        duration,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process existing scraping jobs\r\n   */\r\n  async processJobs(options: ProcessingOptions): Promise<ProcessingResult> {\r\n    const startTime = Date.now();\r\n    const errors: string[] = [];\r\n\r\n    try {\r\n      console.info(`ΓÜÖ∩╕Å PipelineManager: Processing up to ${options.maxJobs} jobs...`);\r\n\r\n      // Get pending jobs\r\n      const pendingJobs = await ScrapingJobService.getJobsByStatus('pending');\r\n      if (pendingJobs == undefined || pendingJobs.length === 0) {\r\n        console.info('No pending jobs to process');\r\n        return {\r\n          success: true,\r\n          jobsProcessed: 0,\r\n          jobsSuccessful: 0,\r\n          jobsFailed: 0,\r\n          trucksCreated: 0,\r\n          errors: [],\r\n          duration: Date.now() - startTime,\r\n        };\r\n      }\r\n\r\n      // Process jobs up to maxJobs limit\r\n      const jobsToProcess = pendingJobs.slice(0, options.maxJobs);\r\n      let jobsSuccessful = 0;\r\n      let jobsFailed = 0;\r\n      let trucksCreated = 0;\r\n\r\n      for (const job of jobsToProcess) {\r\n        try {\r\n          console.info(`Processing job ${job.id} for URL: ${job.target_url}`);\r\n\r\n          // Process the job\r\n          await processScrapingJob(job.id);\r\n\r\n          // Check if job resulted in truck creation\r\n          const updatedJob = await ScrapingJobService.getJobsByStatus('completed').then((jobs) =>\r\n            jobs?.find((j) => j.id === job.id),\r\n          );\r\n\r\n          if (updatedJob?.data_collected?.truck_id != undefined) {\r\n            trucksCreated++;\r\n          }\r\n\r\n          jobsSuccessful++;\r\n        } catch (jobError) {\r\n          const errorMsg = `Job ${job.id} failed: ${jobError instanceof Error ? jobError.message : 'Unknown error'}`;\r\n          console.warn(errorMsg);\r\n          errors.push(errorMsg);\r\n          jobsFailed++;\r\n        }\r\n      }\r\n\r\n      const duration = Date.now() - startTime;\r\n\r\n      return {\r\n        success: jobsFailed === 0,\r\n        jobsProcessed: jobsToProcess.length,\r\n        jobsSuccessful,\r\n        jobsFailed,\r\n        trucksCreated,\r\n        errors,\r\n        duration,\r\n      };\r\n    } catch (error) {\r\n      const duration = Date.now() - startTime;\r\n      const errorMsg = error instanceof Error ? error.message : 'Unknown processing error';\r\n      console.error('Γ¥î PipelineManager: Job processing failed:', error);\r\n\r\n      return {\r\n        success: false,\r\n        jobsProcessed: 0,\r\n        jobsSuccessful: 0,\r\n        jobsFailed: 0,\r\n        trucksCreated: 0,\r\n        errors: [errorMsg],\r\n        duration,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run full pipeline: discovery + processing\r\n   */\r\n  private async runFullPipeline(config: PipelineConfig): Promise<Record<string, unknown>> {\r\n    const results: {\r\n      discovery: DiscoveryResult | undefined;\r\n      processing: ProcessingResult | undefined;\r\n    } = {\r\n      discovery: undefined,\r\n      processing: undefined,\r\n    };\r\n\r\n    // Step 1: Discovery (unless skipped)\r\n    if (config.params.skipDiscovery !== true) {\r\n      results.discovery = await this.runDiscovery({\r\n        cities: config.params.targetCities ?? ['Charleston', 'Columbia', 'Greenville'],\r\n        maxUrls: config.params.maxUrls ?? 50,\r\n        searchTerms: ['food truck', 'food cart', 'mobile food'],\r\n      });\r\n    }\r\n\r\n    // Step 2: Processing\r\n    results.processing = await this.processJobs({\r\n      maxJobs: config.params.maxUrlsToProcess ?? 20,\r\n      priority: config.params.priority ?? 5,\r\n      retryFailedJobs: config.params.retryFailedJobs ?? false,\r\n    });\r\n\r\n    // Combine results\r\n    return {\r\n      urlsDiscovered: results.discovery?.urlsDiscovered ?? 0,\r\n      urlsStored: results.discovery?.urlsStored ?? 0,\r\n      urlsDuplicate: results.discovery?.urlsDuplicate ?? 0,\r\n      jobsProcessed: results.processing?.jobsProcessed ?? 0,\r\n      trucksCreated: results.processing?.trucksCreated ?? 0,\r\n      errors: [...(results.discovery?.errors ?? []), ...(results.processing?.errors ?? [])],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Run maintenance checks on existing trucks\r\n   */\r\n  async runMaintenance(): Promise<MaintenanceResult> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      console.info('≡ƒöº PipelineManager: Running maintenance checks...');\r\n\r\n      // Use the existing autoScraper functionality\r\n      const result = await ensureDefaultTrucksAreScraped();\r\n\r\n      const duration = Date.now() - startTime;\r\n\r\n      return {\r\n        success: result.errors.length === 0,\r\n        trucksProcessed: result.trucksProcessed,\r\n        newTrucksFound: result.newTrucksFound,\r\n        errors: result.errors.map((e) => e.url + ': ' + (e.details ?? 'Unknown error')),\r\n        duration,\r\n      };\r\n    } catch (error) {\r\n      const duration = Date.now() - startTime;\r\n      const errorMsg = error instanceof Error ? error.message : 'Unknown maintenance error';\r\n      console.error('Γ¥î PipelineManager: Maintenance failed:', error);\r\n\r\n      return {\r\n        success: false,\r\n        trucksProcessed: 0,\r\n        newTrucksFound: 0,\r\n        errors: [errorMsg],\r\n        duration,\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const pipelineManager = new PipelineManager();\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'processScrapingJob' has too many lines (106). Maximum allowed is 50.",
        "line": 9,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 114,
        "endColumn": 2
      },
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Async function 'createOrUpdateFoodTruck' has too many lines (140). Maximum allowed is 50.",
        "line": 185,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 324,
        "endColumn": 2
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 21 to the 15 allowed.",
        "line": 185,
        "column": 23,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 185,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 22 to the 15 allowed.",
        "line": 9,
        "column": 23,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 9,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { ScrapingJobService, FoodTruckService } from '@/lib/supabase';\r\nimport { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from './types';\r\nimport { DuplicatePreventionService } from './data-quality/duplicatePrevention';\r\n\r\n// Background job processing function\r\n// eslint-disable-next-line sonarjs/cognitive-complexity\r\nexport async function processScrapingJob(jobId: string) {\r\n  try {\r\n    // Update job status to running\r\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\r\n\r\n    if (job.target_url == undefined) {\r\n      throw new Error('No target URL specified');\r\n    }\r\n\r\n    // Scrape the website using Firecrawl\r\n    console.info(`Starting scrape for ${job.target_url}`);\r\n    const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(job.target_url); // Simplified call\r\n\r\n    if (scrapeResult.success !== true || scrapeResult.data?.markdown == undefined) {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n        errors: [scrapeResult.error ?? 'Scraping failed or markdown content not found'],\r\n      });\r\n      throw new Error(scrapeResult.error ?? 'Scraping failed or markdown content not found');\r\n    }\r\n\r\n    console.info(`Scraping successful for ${job.target_url}, proceeding to Gemini extraction.`);\r\n\r\n    // Call Gemini to extract structured data\r\n    const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(\r\n      scrapeResult.data.markdown,\r\n      scrapeResult.data.source_url ?? job.target_url,\r\n    );\r\n\r\n    if (geminiResult.success !== true || geminiResult.data == undefined) {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n        errors: [geminiResult.error ?? 'Gemini data extraction failed'],\r\n      });\r\n      throw new Error(geminiResult.error ?? 'Gemini data extraction failed');\r\n    }\r\n\r\n    console.info(`Gemini extraction successful for ${job.target_url}.`);\r\n\r\n    // Update job with structured data from Gemini\r\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\r\n      data_collected: geminiResult.data as unknown as Record<string, unknown>, // Cast to unknown first, then to Record<string, unknown>\r\n      completed_at: new Date().toISOString(),\r\n    });\r\n\r\n    // Create or update FoodTruck entry\r\n    await createOrUpdateFoodTruck(\r\n      jobId,\r\n      geminiResult.data,\r\n      scrapeResult.data.source_url ?? job.target_url,\r\n    );\r\n\r\n    // The call to processScrapedData is removed as Gemini now handles full extraction.\r\n    // The old processScrapedData and processDataQueue can remain for other potential uses or reprocessing.\r\n\r\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\r\n  } catch (error: unknown) {\r\n    // Explicitly type error as unknown\r\n    console.error(`Scraping job ${jobId} failed:`, error);\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n\r\n    // Attempt to update job status to failed\r\n    try {\r\n      // Check current status to avoid overwriting if already failed in a specific step\r\n      const currentJobData = await ScrapingJobService.getJobsByStatus('all').then((jobs) =>\r\n        jobs.find((j) => j.id === jobId),\r\n      );\r\n      if (currentJobData && currentJobData.status !== 'failed') {\r\n        await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n          errors: [errorMessage],\r\n        });\r\n      } else if (!currentJobData) {\r\n        // If job couldn't be fetched, log but proceed to retry logic if appropriate\r\n        console.error(`Could not fetch job ${jobId} to update status to failed.`);\r\n      }\r\n    } catch (statusUpdateError) {\r\n      console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\r\n    }\r\n\r\n    // Increment retry count and potentially retry\r\n    try {\r\n      const jobAfterRetryIncrement = await ScrapingJobService.incrementRetryCount(jobId);\r\n      // Ensure jobAfterRetryIncrement and its properties are valid before using them\r\n      if (\r\n        jobAfterRetryIncrement != undefined &&\r\n        typeof jobAfterRetryIncrement.retry_count === 'number' &&\r\n        typeof jobAfterRetryIncrement.max_retries === 'number'\r\n      ) {\r\n        if (jobAfterRetryIncrement.retry_count < jobAfterRetryIncrement.max_retries) {\r\n          console.info(\r\n            `Retrying job ${jobId} (attempt ${jobAfterRetryIncrement.retry_count}/${jobAfterRetryIncrement.max_retries})`,\r\n          );\r\n          setTimeout(() => {\r\n            void processScrapingJob(jobId);\r\n          }, 5000); // Retry after 5 seconds\r\n        } else {\r\n          console.warn(`Job ${jobId} reached max retries (${jobAfterRetryIncrement.max_retries}).`);\r\n        }\r\n      } else {\r\n        console.error(\r\n          `Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`,\r\n        );\r\n      }\r\n    } catch (retryIncrementError) {\r\n      console.error(`Error during retry increment logic for job ${jobId}:`, retryIncrementError);\r\n    }\r\n  }\r\n}\r\n\r\n// Helper function to validate input data\r\nfunction validateTruckData(jobId: string, extractedTruckData: ExtractedFoodTruckDetails): boolean {\r\n  if (extractedTruckData == undefined || typeof extractedTruckData !== 'object') {\r\n    console.error(`Job ${jobId}: Invalid extractedTruckData, cannot create/update food truck.`);\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n// Helper function to build location data\r\nfunction buildLocationData(extractedTruckData: ExtractedFoodTruckDetails) {\r\n  const locationData = extractedTruckData.current_location ?? {};\r\n  const fullAddress = [\r\n    locationData.address,\r\n    locationData.city,\r\n    locationData.state,\r\n    locationData.zip_code,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(', ');\r\n\r\n  return {\r\n    lat: typeof locationData.lat === 'number' ? locationData.lat : 0,\r\n    lng: typeof locationData.lng === 'number' ? locationData.lng : 0,\r\n    address: fullAddress || (locationData.raw_text ?? undefined),\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n}\r\n\r\n// Helper function to process menu data\r\nfunction processMenuData(extractedTruckData: ExtractedFoodTruckDetails): MenuCategory[] {\r\n  if (!Array.isArray(extractedTruckData.menu)) {\r\n    return [];\r\n  }\r\n\r\n  return extractedTruckData.menu.map((category: unknown): MenuCategory => {\r\n    const categoryData = category as { items?: unknown[]; category?: string; name?: string };\r\n    const items = (Array.isArray(categoryData.items) ? categoryData.items : []).map(\r\n      (item: unknown): MenuItem => {\r\n        const itemData = item as {\r\n          name?: string;\r\n          description?: string;\r\n          price?: string | number;\r\n          dietary_tags?: string[];\r\n        };\r\n        let price: number | undefined = undefined;\r\n        if (typeof itemData.price === 'number') {\r\n          price = itemData.price;\r\n        } else if (typeof itemData.price === 'string') {\r\n          const parsedPrice = Number.parseFloat(itemData.price.replaceAll(/[^\\d.-]/g, ''));\r\n          if (!Number.isNaN(parsedPrice)) {\r\n            price = parsedPrice;\r\n          }\r\n        }\r\n        return {\r\n          name: itemData.name ?? 'Unknown Item',\r\n          description: itemData.description ?? undefined,\r\n          price: price,\r\n          dietary_tags: Array.isArray(itemData.dietary_tags) ? itemData.dietary_tags : [],\r\n        };\r\n      },\r\n    );\r\n    return {\r\n      name: categoryData.category ?? categoryData.name ?? 'Uncategorized',\r\n      items: items,\r\n    };\r\n  });\r\n}\r\n\r\nexport async function createOrUpdateFoodTruck(\r\n  jobId: string,\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n) {\r\n  try {\r\n    // Basic input validation\r\n    if (!validateTruckData(jobId, extractedTruckData)) {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n        errors: ['Invalid extracted data received from AI processing step.'],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!sourceUrl) {\r\n      // Log a warning but proceed if sourceUrl is missing, as it might not be critical for all data.\r\n      console.warn(`Job ${jobId}: Missing sourceUrl for food truck data, proceeding without it.`);\r\n    }\r\n\r\n    const name = extractedTruckData.name ?? 'Unknown Food Truck'; // Ensure name has a fallback\r\n    console.info(\r\n      `Job ${jobId}: Preparing to create/update food truck: ${name} from ${sourceUrl ?? 'Unknown Source'}`,\r\n    );\r\n\r\n    // Map Gemini output to FoodTruck schema with stricter type checking and defaults\r\n    const currentLocation = buildLocationData(extractedTruckData);\r\n\r\n    const truckData: FoodTruckSchema = {\r\n      name: name,\r\n      description: extractedTruckData.description ?? undefined, // Keep as undefined if null/missing\r\n      current_location: currentLocation,\r\n      scheduled_locations: Array.isArray(extractedTruckData.scheduled_locations)\r\n        ? extractedTruckData.scheduled_locations.map((loc) => ({\r\n            lat: typeof loc.lat === 'number' ? loc.lat : 0,\r\n            lng: typeof loc.lng === 'number' ? loc.lng : 0,\r\n            address: loc.address ?? undefined,\r\n            start_time: loc.start_time ?? undefined,\r\n            end_time: loc.end_time ?? undefined,\r\n            timestamp: new Date().toISOString(),\r\n          }))\r\n        : undefined,\r\n      operating_hours: extractedTruckData.operating_hours == undefined\r\n        ? {\r\n            monday: { closed: true },\r\n            tuesday: { closed: true },\r\n            wednesday: { closed: true },\r\n            thursday: { closed: true },\r\n            friday: { closed: true },\r\n            saturday: { closed: true },\r\n            sunday: { closed: true },\r\n          }\r\n        : {\r\n            monday: extractedTruckData.operating_hours.monday ?? { closed: true },\r\n            tuesday: extractedTruckData.operating_hours.tuesday ?? { closed: true },\r\n            wednesday: extractedTruckData.operating_hours.wednesday ?? { closed: true },\r\n            thursday: extractedTruckData.operating_hours.thursday ?? { closed: true },\r\n            friday: extractedTruckData.operating_hours.friday ?? { closed: true },\r\n            saturday: extractedTruckData.operating_hours.saturday ?? { closed: true },\r\n            sunday: extractedTruckData.operating_hours.sunday ?? { closed: true },\r\n          },\r\n      menu: processMenuData(extractedTruckData),\r\n      contact_info: {\r\n        phone: extractedTruckData.contact_info?.phone ?? undefined,\r\n        email: extractedTruckData.contact_info?.email ?? undefined,\r\n        website: extractedTruckData.contact_info?.website ?? undefined,\r\n      },\r\n      social_media: {\r\n        instagram: extractedTruckData.social_media?.instagram ?? undefined,\r\n        facebook: extractedTruckData.social_media?.facebook ?? undefined,\r\n        twitter: extractedTruckData.social_media?.twitter ?? undefined,\r\n        tiktok: extractedTruckData.social_media?.tiktok ?? undefined,\r\n        yelp: extractedTruckData.social_media?.yelp ?? undefined,\r\n      },\r\n      cuisine_type: Array.isArray(extractedTruckData.cuisine_type)\r\n        ? extractedTruckData.cuisine_type\r\n        : [],\r\n      price_range: extractedTruckData.price_range ?? undefined, // Ensure it's one of the allowed enum values or undefined\r\n      specialties: Array.isArray(extractedTruckData.specialties)\r\n        ? extractedTruckData.specialties\r\n        : [],\r\n      data_quality_score: 0.5, // Default score - confidence_score not available in type\r\n      verification_status: 'pending',\r\n      source_urls: sourceUrl != undefined && sourceUrl !== '' ? [sourceUrl] : [], // Ensure source_urls is always an array\r\n      last_scraped_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Check for duplicates before creating\r\n    console.info(`Job ${jobId}: Checking for duplicates before creating truck: ${name}`);\r\n    const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\r\n\r\n    let truck;\r\n    if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\r\n      const { bestMatch } = duplicateCheck;\r\n      console.info(`Job ${jobId}: Found potential duplicate (${Math.round(bestMatch.similarity * 100)}% similarity) with truck: ${bestMatch.existingTruck.name}`);\r\n\r\n      if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\r\n        // Merge with existing truck\r\n        truck = await DuplicatePreventionService.mergeDuplicates(bestMatch.existingTruck.id, bestMatch.existingTruck.id);\r\n        console.info(`Job ${jobId}: Merged data with existing truck: ${truck.name} (ID: ${truck.id})`);\r\n      } else if (bestMatch.recommendation === 'update') {\r\n        // Update existing truck with new data\r\n        truck = await FoodTruckService.updateTruck(bestMatch.existingTruck.id, truckData);\r\n        console.info(`Job ${jobId}: Updated existing truck: ${truck.name} (ID: ${truck.id})`);\r\n      } else {\r\n        // Create new truck but log the potential duplicate\r\n        truck = await FoodTruckService.createTruck(truckData);\r\n        console.warn(`Job ${jobId}: Created new truck despite potential duplicate (${duplicateCheck.reason})`);\r\n      }\r\n    } else {\r\n      // No duplicates found, create new truck\r\n      truck = await FoodTruckService.createTruck(truckData);\r\n    }\r\n    console.info(\r\n      `Job ${jobId}: Successfully created food truck: ${truck.name} (ID: ${truck.id}) from ${sourceUrl ?? 'Unknown Source'}`,\r\n    );\r\n\r\n    // Link truck_id back to the scraping job\r\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\r\n      completed_at: new Date().toISOString(),\r\n    });\r\n  } catch (error: unknown) {\r\n    console.error(\r\n      `Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`,\r\n      error,\r\n    );\r\n    // Update the scraping job with this error information\r\n    try {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\r\n        errors: [\r\n          `Food truck data processing/saving failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        ],\r\n      });\r\n    } catch (jobUpdateError) {\r\n      console.error(\r\n        `Job ${jobId}: Critical error - failed to update job status after data processing failure:`,\r\n        jobUpdateError,\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// Fix type assignment and compatibility errors, replace any with unknown or specific types, and remove unused variables/imports.\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\scheduler.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Function 'createDefaultTasks' has too many lines (177). Maximum allowed is 50.",
        "line": 291,
        "column": 8,
        "nodeType": "FunctionDeclaration",
        "messageId": "exceed",
        "endLine": 467,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Task scheduling and automation system\r\nexport class TaskScheduler {\r\n  private tasks: Map<string, ScheduledTask>;\r\n  private intervals: Map<string, NodeJS.Timeout>;\r\n  private isRunning: boolean;\r\n\r\n  constructor() {\r\n    this.tasks = new Map();\r\n    this.intervals = new Map();\r\n    this.isRunning = false;\r\n  }\r\n\r\n  start(): void {\r\n    if (this.isRunning === true) {\r\n      console.info('Scheduler is already running');\r\n      return;\r\n    }\r\n\r\n    this.isRunning = true;\r\n    console.info('Task scheduler started');\r\n\r\n    // Start all scheduled tasks\r\n    for (const [taskId, task] of this.tasks.entries()) {\r\n      if (task.enabled === true) {\r\n        this.scheduleTask(taskId, task);\r\n      }\r\n    }\r\n  }\r\n\r\n  stop(): void {\r\n    if (this.isRunning !== true) {\r\n      console.info('Scheduler is not running');\r\n      return;\r\n    }\r\n\r\n    this.isRunning = false;\r\n\r\n    // Clear all intervals\r\n    for (const [taskId, interval] of this.intervals.entries()) {\r\n      clearInterval(interval);\r\n      console.info(`Stopped task: ${taskId}`);\r\n    }\r\n\r\n    this.intervals.clear();\r\n    console.info('Task scheduler stopped');\r\n  }\r\n\r\n  addTask(task: ScheduledTask): void {\r\n    this.tasks.set(task.id, task);\r\n\r\n    if (this.isRunning === true && task.enabled === true) {\r\n      this.scheduleTask(task.id, task);\r\n    }\r\n\r\n    console.info(`Added task: ${task.id}`);\r\n  }\r\n\r\n  removeTask(taskId: string): void {\r\n    const interval = this.intervals.get(taskId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.intervals.delete(taskId);\r\n    }\r\n\r\n    this.tasks.delete(taskId);\r\n    console.info(`Removed task: ${taskId}`);\r\n  }\r\n\r\n  enableTask(taskId: string): void {\r\n    const task = this.tasks.get(taskId);\r\n    if (!task) {\r\n      throw new Error(`Task not found: ${taskId}`);\r\n    }\r\n\r\n    task.enabled = true;\r\n\r\n    if (this.isRunning) {\r\n      this.scheduleTask(taskId, task);\r\n    }\r\n\r\n    console.info(`Enabled task: ${taskId}`);\r\n  }\r\n\r\n  disableTask(taskId: string): void {\r\n    const task = this.tasks.get(taskId);\r\n    if (!task) {\r\n      throw new Error(`Task not found: ${taskId}`);\r\n    }\r\n\r\n    task.enabled = false;\r\n\r\n    const interval = this.intervals.get(taskId);\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      this.intervals.delete(taskId);\r\n    }\r\n\r\n    console.info(`Disabled task: ${taskId}`);\r\n  }\r\n\r\n  private scheduleTask(taskId: string, task: ScheduledTask): void {\r\n    // Clear existing interval if any\r\n    const existingInterval = this.intervals.get(taskId);\r\n    if (existingInterval) {\r\n      clearInterval(existingInterval);\r\n    }\r\n\r\n    // Calculate interval in milliseconds\r\n    const intervalMs = task.intervalMinutes * 60 * 1000; // Schedule the task\r\n    const interval = setInterval(() => {\r\n      void (() => {\r\n        try {\r\n          console.info(`Executing task: ${taskId}`);\r\n          task.lastRun = new Date().toISOString();\r\n\r\n          await task.execute();\r\n\r\n          task.successCount++;\r\n          task.lastSuccess = new Date().toISOString();\r\n\r\n          console.info(`Task completed successfully: ${taskId}`);\r\n        } catch (error: unknown) {\r\n          task.errorCount++;\r\n          task.lastError = error instanceof Error ? error.message : 'Unknown error';\r\n\r\n          console.warn(`Task failed: ${taskId}`, error);\r\n\r\n          // Disable task if too many consecutive failures\r\n          if (task.errorCount - task.successCount > 5) {\r\n            console.warn(`Disabling task due to repeated failures: ${taskId}`);\r\n            this.disableTask(taskId);\r\n          }\r\n        }\r\n      })();\r\n    }, intervalMs);\r\n\r\n    this.intervals.set(taskId, interval);\r\n    console.info(`Scheduled task: ${taskId} (every ${task.intervalMinutes} minutes)`);\r\n  }\r\n\r\n  getTaskStatus(): TaskStatus[] {\r\n    return [...this.tasks.values()].map((task) => ({\r\n      id: task.id,\r\n      name: task.name,\r\n      enabled: task.enabled,\r\n      intervalMinutes: task.intervalMinutes,\r\n      lastRun: task.lastRun,\r\n      lastSuccess: task.lastSuccess,\r\n      successCount: task.successCount,\r\n      errorCount: task.errorCount,\r\n      lastError: task.lastError,\r\n      nextRun: this.calculateNextRun(task),\r\n    }));\r\n  }\r\n\r\n  private calculateNextRun(task: ScheduledTask): string | undefined {\r\n    if (task.enabled !== true || task.lastRun == undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const lastRun = new Date(task.lastRun);\r\n    const nextRun = new Date(lastRun.getTime() + task.intervalMinutes * 60 * 1000);\r\n\r\n    return nextRun.toISOString();\r\n  }\r\n\r\n  public scheduleFollowUpTasks(result: unknown): void {\r\n    // Implementation for scheduling follow-up tasks based on scraping results\r\n    console.info('Scheduling follow-up tasks based on scraping results:', result);\r\n\r\n    // This could include:\r\n    // - Scheduling quality checks for newly scraped data\r\n    // - Setting up monitoring for high-priority trucks\r\n    // - Triggering additional scraping for related sources\r\n  }\r\n}\r\n\r\ninterface ScheduledTask {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  intervalMinutes: number;\r\n  enabled: boolean;\r\n  execute: () => Promise<void>;\r\n  lastRun?: string;\r\n  lastSuccess?: string;\r\n  successCount: number;\r\n  errorCount: number;\r\n  lastError?: string;\r\n}\r\n\r\ninterface TaskStatus {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  intervalMinutes: number;\r\n  lastRun?: string;\r\n  lastSuccess?: string;\r\n  successCount: number;\r\n  errorCount: number;\r\n  lastError?: string;\r\n  nextRun?: string;\r\n}\r\n\r\ninterface ScraperEngine {\r\n  scrapeSocialMedia: (\r\n    platform: string,\r\n    handle: string,\r\n  ) => Promise<{ success: boolean; error?: string; data?: unknown }>;\r\n  scrapeWebsite: (\r\n    url: string,\r\n    selectors: Record<string, string>,\r\n  ) => Promise<{ success: boolean; error?: string; data?: unknown }>;\r\n}\r\n\r\ninterface GeminiProcessor {\r\n  getUsageStats: () => { requests: { remaining: number } };\r\n  processMenuData: (content: string) => Promise<unknown>;\r\n  extractLocationFromText: (content: string) => Promise<unknown>;\r\n  standardizeOperatingHours: (content: string) => Promise<unknown>;\r\n  analyzeSentiment: (content: string) => Promise<unknown>;\r\n  enhanceFoodTruckData: (data: unknown) => Promise<unknown>;\r\n}\r\n\r\ninterface DataQualityAssessor {\r\n  assessTruckData: (truck: FoodTruck) => { score: number; issues: string[] };\r\n}\r\n\r\ninterface FoodTruck {\r\n  id: string;\r\n  name: string;\r\n  contact_info: {\r\n    phone?: string;\r\n    email?: string;\r\n    website?: string;\r\n  };\r\n  social_media: {\r\n    instagram_handle?: string;\r\n    facebook_handle?: string;\r\n    twitter_handle?: string;\r\n  };\r\n  cuisine_type: string;\r\n  price_range?: string;\r\n  specialties: string[];\r\n  menu: unknown; // This should be more specific, but for now, keeping it broad\r\n  current_location: {\r\n    lat?: number;\r\n    lng?: number;\r\n    address?: string;\r\n  };\r\n}\r\n\r\ninterface PendingDataItem {\r\n  type: 'menu' | 'location' | 'hours' | 'sentiment' | 'enhance';\r\n  content: unknown;\r\n}\r\n\r\ninterface SocialMediaPost {\r\n  location?: string;\r\n  // Add other properties of a social media post if needed\r\n}\r\n\r\n// Helper function to update truck location from social media\r\nasync function updateTruckLocationFromSocial(\r\n  truck: FoodTruck,\r\n  scraperEngine: ScraperEngine,\r\n): Promise<void> {\r\n  if (truck.social_media.instagram_handle == undefined || truck.social_media.instagram_handle === '') {\r\n    return;\r\n  }\r\n\r\n  const socialResult = await scraperEngine.scrapeSocialMedia(\r\n    'instagram',\r\n    truck.social_media.instagram_handle,\r\n  );\r\n\r\n  if (socialResult.success === true && socialResult.data != undefined) {\r\n    const socialData = socialResult.data as { posts: SocialMediaPost[] };\r\n    const recentPosts = socialData.posts.slice(0, 3);\r\n\r\n    for (const post of recentPosts) {\r\n      if (post.location != undefined && post.location !== '') {\r\n        console.info(`Updated location for ${truck.name}: ${post.location}`);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Pre-configured tasks for food truck data pipeline\r\nexport function createDefaultTasks(\r\n  scraperEngine: ScraperEngine,\r\n  geminiProcessor: GeminiProcessor,\r\n  dataQualityAssessor: DataQualityAssessor,\r\n): ScheduledTask[] {\r\n  return [\r\n    {\r\n      id: 'instagram_scrape',\r\n      name: 'Instagram Data Scraping',\r\n      description: 'Scrape Instagram posts and profiles for food truck data',\r\n      intervalMinutes: 120, // Every 2 hours\r\n      enabled: true,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      execute: async () => {\r\n        const handles = ['@gourmetstreeteats', '@tacoparadisesf', '@burgermobile'];\r\n\r\n        for (const handle of handles) {\r\n          const result = await scraperEngine.scrapeSocialMedia('instagram', handle);\r\n          if (result.success) {\r\n            // Process with Gemini if needed\r\n            console.info(`Successfully scraped ${handle}`);\r\n          } else {\r\n            throw new Error(`Failed to scrape ${handle}: ${result.error}`);\r\n          }\r\n        }\r\n      },\r\n    },\r\n    {\r\n      id: 'website_crawl',\r\n      name: 'Website Crawling',\r\n      description: 'Crawl food truck websites for menu and location updates',\r\n      intervalMinutes: 360, // Every 6 hours\r\n      enabled: true,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      execute: () => {\r\n        const websites = [\r\n          'https://gourmetstreeteats.com',\r\n          'https://tacoparadise.com',\r\n          'https://burgermobile.net',\r\n        ];\r\n\r\n        const selectors = {\r\n          name: '.truck-name',\r\n          location: '.current-location',\r\n          hours: '.operating-hours',\r\n          menu: '.menu-items',\r\n        };\r\n\r\n        for (const url of websites) {\r\n          const result = await scraperEngine.scrapeWebsite(url, selectors);\r\n          if (result.success) {\r\n            console.info(`Successfully crawled ${url}`);\r\n          } else {\r\n            throw new Error(`Failed to crawl ${url}: ${result.error}`);\r\n          }\r\n        }\r\n      },\r\n    },\r\n    {\r\n      id: 'data_quality_check',\r\n      name: 'Data Quality Assessment',\r\n      description: 'Assess and validate data quality for all food trucks',\r\n      intervalMinutes: 720, // Every 12 hours\r\n      enabled: true,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      execute: () => {\r\n        // Database connection to fetch trucks should be implemented here\r\n        const trucks: FoodTruck[] = []; // Placeholder: fetch trucks from database\r\n\r\n        let totalScore = 0;\r\n        let processedCount = 0;\r\n\r\n        if (trucks.length === 0) {\r\n          console.info('No trucks available for quality assessment');\r\n          return;\r\n        }\r\n\r\n        for (const truck of trucks) {\r\n          const assessment = dataQualityAssessor.assessTruckData(truck);\r\n          totalScore += assessment.score;\r\n          processedCount++;\r\n\r\n          if (assessment.score < 0.7) {\r\n            console.warn(`Low quality data for truck ${truck.id}: ${assessment.issues.join(', ')}`);\r\n          }\r\n        }\r\n\r\n        const averageQuality = processedCount > 0 ? totalScore / processedCount : 0;\r\n        console.info(\r\n          `Data quality assessment completed. Average score: ${averageQuality.toFixed(2)}`,\r\n        );\r\n        await Promise.resolve();\r\n      },\r\n    },\r\n    {\r\n      id: 'gemini_processing',\r\n      name: 'AI Data Processing',\r\n      description: 'Process raw data using Gemini AI for standardization',\r\n      intervalMinutes: 480, // Every 8 hours\r\n      enabled: true,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      execute: () => {\r\n        // Check Gemini usage limits\r\n        const usage = geminiProcessor.getUsageStats();\r\n\r\n        if (usage.requests.remaining < 100) {\r\n          console.warn('Skipping Gemini processing due to rate limits');\r\n          return;\r\n        } // Process pending data\r\n        const pendingData: PendingDataItem[] = []; // Placeholder: fetch pending data from queue system\r\n\r\n        if (pendingData.length === 0) {\r\n          console.info('No pending data to process');\r\n          return;\r\n        }\r\n\r\n        for (const data of pendingData) {\r\n          switch (data.type) {\r\n            case 'menu': {\r\n              await geminiProcessor.processMenuData(data.content as string);\r\n              break;\r\n            }\r\n            case 'location': {\r\n              await geminiProcessor.extractLocationFromText(data.content as string);\r\n              break;\r\n            }\r\n            case 'hours': {\r\n              await geminiProcessor.standardizeOperatingHours(data.content as string);\r\n              break;\r\n            }\r\n            case 'sentiment': {\r\n              await geminiProcessor.analyzeSentiment(data.content as string);\r\n              break;\r\n            }\r\n            case 'enhance': {\r\n              await geminiProcessor.enhanceFoodTruckData(data.content);\r\n              break;\r\n            }\r\n            default: {\r\n              // No default\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        console.info(`Processed ${pendingData.length} items with Gemini AI`);\r\n        await Promise.resolve();\r\n      },\r\n    },\r\n    {\r\n      id: 'location_update',\r\n      name: 'Real-time Location Updates',\r\n      description: 'Update current locations for active food trucks',\r\n      intervalMinutes: 30, // Every 30 minutes\r\n      enabled: true,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      execute: () => {\r\n        // Get active trucks (those currently operating)\r\n        const activeTrucks: FoodTruck[] = []; // Placeholder: fetch active trucks from database\r\n\r\n        if (activeTrucks.length === 0) {\r\n          console.info('No active trucks to update locations for');\r\n          return;\r\n        }\r\n\r\n        for (const truck of activeTrucks) {\r\n          await updateTruckLocationFromSocial(truck, scraperEngine);\r\n        }\r\n      },\r\n    },\r\n  ];\r\n}\r\n\r\n// Export scheduler instance for use in cron jobs\r\nexport const scheduler = new TaskScheduler();\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\security\\auditLogger.ts",
    "messages": [
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Static async method 'logAdminAction' has too many parameters (7). Maximum allowed is 4.",
        "line": 42,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "exceed",
        "endLine": 42,
        "endColumn": 30
      },
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Static async method 'logAuthEvent' has too many parameters (5). Maximum allowed is 4.",
        "line": 117,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "exceed",
        "endLine": 117,
        "endColumn": 28
      },
      {
        "ruleId": "max-params",
        "severity": 2,
        "message": "Static async method 'logDataAccess' has too many parameters (6). Maximum allowed is 4.",
        "line": 143,
        "column": 3,
        "nodeType": "FunctionExpression",
        "messageId": "exceed",
        "endLine": 143,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 234,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 234,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any[]`.",
        "line": 274,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 274,
        "endColumn": 25,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * SOTA Security Audit Logging System\r\n * Implements comprehensive audit logging for admin actions and security events\r\n */\r\n\r\nimport { supabaseAdmin } from '@/lib/supabase';\r\n\r\n// Type alias for severity levels to comply with sonarjs/use-type-alias\r\ntype SeverityLevel = 'info' | 'warning' | 'error' | 'critical';\r\n\r\nexport interface AuditLogEntry {\r\n  user_id: string;\r\n  user_email: string;\r\n  action: string;\r\n  resource_type: string;\r\n  resource_id?: string;\r\n  details?: Record<string, unknown>;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  session_id?: string;\r\n  timestamp: string;\r\n  severity: SeverityLevel;\r\n}\r\n\r\nexport interface SecurityEvent {\r\n  event_type: 'login_attempt' | 'login_success' | 'login_failure' | 'logout' | 'permission_denied' | 'data_access' | 'data_modification' | 'admin_action';\r\n  user_id?: string;\r\n  user_email?: string;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  details?: Record<string, unknown>;\r\n  severity: SeverityLevel;\r\n}\r\n\r\n/**\r\n * Audit Logger Service\r\n */\r\nexport class AuditLogger {\r\n  /**\r\n   * Log admin action with full audit trail\r\n   */\r\n  static async logAdminAction(\r\n    userId: string,\r\n    userEmail: string,\r\n    action: string,\r\n    resourceType: string,\r\n    resourceId?: string,\r\n    details?: Record<string, unknown>,\r\n    request?: {\r\n      ip?: string;\r\n      userAgent?: string;\r\n      sessionId?: string;\r\n    }\r\n  ): Promise<void> {\r\n    const auditEntry: AuditLogEntry = {\r\n      user_id: userId,\r\n      user_email: userEmail,\r\n      action,\r\n      resource_type: resourceType,\r\n      resource_id: resourceId,\r\n      details,\r\n      ip_address: request?.ip,\r\n      user_agent: request?.userAgent,\r\n      session_id: request?.sessionId,\r\n      timestamp: new Date().toISOString(),\r\n      severity: this.determineSeverity(action, resourceType)\r\n    };\r\n\r\n    await this.writeAuditLog(auditEntry);\r\n    \r\n    // Log to console for immediate monitoring\r\n    console.info('Admin Action Audit:', {\r\n      user: userEmail,\r\n      action,\r\n      resource: (resourceId === undefined) ? resourceType : `${resourceType}:${resourceId}`,\r\n      timestamp: auditEntry.timestamp\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log security event\r\n   */\r\n  static async logSecurityEvent(event: SecurityEvent): Promise<void> {\r\n    const logEntry = {\r\n      event_type: event.event_type,\r\n      user_id: event.user_id,\r\n      user_email: event.user_email,\r\n      ip_address: event.ip_address,\r\n      user_agent: event.user_agent,\r\n      details: event.details,\r\n      severity: event.severity,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    try {\r\n      if (supabaseAdmin) {\r\n        await supabaseAdmin\r\n          .from('security_events')\r\n          .insert(logEntry);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to log security event:', error);\r\n    }\r\n\r\n    // Always log security events to console\r\n    console.info('Security Event:', logEntry);\r\n\r\n    // Alert on critical security events\r\n    if (event.severity === 'critical' || event.severity === 'error') {\r\n      console.warn('SECURITY ALERT:', logEntry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log authentication events\r\n   */\r\n  static async logAuthEvent(\r\n    eventType: 'login_attempt' | 'login_success' | 'login_failure' | 'logout',\r\n    userEmail?: string,\r\n    userId?: string,\r\n    request?: {\r\n      ip?: string;\r\n      userAgent?: string;\r\n    },\r\n    details?: Record<string, unknown>\r\n  ): Promise<void> {\r\n    const severity = eventType === 'login_failure' ? 'warning' : 'info';\r\n    \r\n    await this.logSecurityEvent({\r\n      event_type: eventType,\r\n      user_id: userId,\r\n      user_email: userEmail,\r\n      ip_address: request?.ip,\r\n      user_agent: request?.userAgent,\r\n      details,\r\n      severity\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log data access events\r\n   */\r\n  static async logDataAccess(\r\n    userId: string,\r\n    userEmail: string,\r\n    resourceType: string,\r\n    resourceId?: string,\r\n    action: 'read' | 'search' | 'export' = 'read',\r\n    request?: {\r\n      ip?: string;\r\n      userAgent?: string;\r\n    }\r\n  ): Promise<void> {\r\n    await this.logSecurityEvent({\r\n      event_type: 'data_access',\r\n      user_id: userId,\r\n      user_email: userEmail,\r\n      ip_address: request?.ip,\r\n      user_agent: request?.userAgent,\r\n      details: {\r\n        resource_type: resourceType,\r\n        resource_id: resourceId,\r\n        action\r\n      },\r\n      severity: 'info'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Write audit log to database\r\n   */\r\n  private static async writeAuditLog(entry: AuditLogEntry): Promise<void> {\r\n    try {\r\n      if (supabaseAdmin) {\r\n        await supabaseAdmin\r\n          .from('audit_logs')\r\n          .insert(entry);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to write audit log:', error);\r\n      // Don't throw - audit logging should not break application flow\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine severity based on action and resource type\r\n   */\r\n  private static determineSeverity(action: string, resourceType: string): SeverityLevel {\r\n    // Critical actions\r\n    if (action.includes('delete') || action.includes('remove')) {\r\n      return 'critical';\r\n    }\r\n    \r\n    // Warning actions\r\n    if (action.includes('update') || action.includes('modify') || action.includes('change')) {\r\n      return 'warning';\r\n    }\r\n    \r\n    // Admin-specific actions\r\n    if (resourceType === 'user' || resourceType === 'admin' || resourceType === 'system') {\r\n      return 'warning';\r\n    }\r\n    \r\n    // Default to info\r\n    return 'info';\r\n  }\r\n\r\n  /**\r\n   * Get audit logs for a specific user\r\n   */\r\n  static async getUserAuditLogs(\r\n    userId: string,\r\n    limit: number = 100,\r\n    offset: number = 0\r\n  ): Promise<AuditLogEntry[]> {\r\n    try {\r\n      if (!supabaseAdmin) {\r\n        return [];\r\n      }\r\n\r\n      const { data, error } = await supabaseAdmin\r\n        .from('audit_logs')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .order('timestamp', { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      if (error) {\r\n        console.error('Failed to fetch user audit logs:', error);\r\n        return [];\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n      return data ?? [];\r\n    } catch (error) {\r\n      console.error('Error fetching user audit logs:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get recent security events\r\n   */\r\n  static async getRecentSecurityEvents(\r\n    hours: number = 24,\r\n    severity?: SeverityLevel\r\n  ): Promise<Record<string, unknown>[]> {\r\n    try {\r\n      if (!supabaseAdmin) {\r\n        return [];\r\n      }\r\n\r\n      const startTime = new Date();\r\n      startTime.setHours(startTime.getHours() - hours);\r\n\r\n      let query = supabaseAdmin\r\n        .from('security_events')\r\n        .select('*')\r\n        .gte('timestamp', startTime.toISOString())\r\n        .order('timestamp', { ascending: false });\r\n\r\n      if (severity) {\r\n        query = query.eq('severity', severity);\r\n      }\r\n\r\n      const { data, error } = await query.limit(500);\r\n\r\n      if (error) {\r\n        console.error('Failed to fetch security events:', error);\r\n        return [];\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n      return data ?? [];\r\n    } catch (error) {\r\n      console.error('Error fetching security events:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Security monitoring utilities\r\n */\r\nexport const SecurityMonitor = {\r\n  /**\r\n   * Check for suspicious activity patterns\r\n   */\r\n  async checkSuspiciousActivity(userId: string): Promise<{\r\n    suspicious: boolean;\r\n    reasons: string[];\r\n    riskLevel: 'low' | 'medium' | 'high';\r\n  }> {\r\n    const reasons: string[] = [];\r\n    let riskLevel: 'low' | 'medium' | 'high' = 'low';\r\n\r\n    try {\r\n      // Check recent failed login attempts\r\n      const recentEvents = await AuditLogger.getRecentSecurityEvents(1, 'warning');\r\n      const failedLogins = recentEvents.filter(\r\n         \r\n        event => event.event_type === 'login_failure' && event.user_id === userId\r\n      );\r\n\r\n      if (failedLogins.length > 5) {\r\n        reasons.push('Multiple failed login attempts');\r\n        riskLevel = 'high';\r\n      } else if (failedLogins.length > 2) {\r\n        reasons.push('Recent failed login attempts');\r\n        riskLevel = 'medium';\r\n      }\r\n\r\n      // Check for unusual access patterns\r\n      const auditLogs = await AuditLogger.getUserAuditLogs(userId, 50);\r\n      const recentActions = auditLogs.filter(\r\n        log => new Date(log.timestamp) > new Date(Date.now() - 60 * 60 * 1000) // Last hour\r\n      );\r\n\r\n      if (recentActions.length > 20) {\r\n        reasons.push('High activity volume');\r\n        riskLevel = riskLevel === 'high' ? 'high' : 'medium';\r\n      }\r\n\r\n      return {\r\n        suspicious: reasons.length > 0,\r\n        reasons,\r\n        riskLevel\r\n      };\r\n    } catch (error) {\r\n      console.error('Error checking suspicious activity:', error);\r\n      return {\r\n        suspicious: false,\r\n        reasons: [],\r\n        riskLevel: 'low'\r\n      };\r\n    }\r\n  },\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\security\\rateLimiter.ts",
    "messages": [
      {
        "ruleId": "max-lines-per-function",
        "severity": 2,
        "message": "Static method 'checkRateLimit' has too many lines (69). Maximum allowed is 50.",
        "line": 51,
        "column": 3,
        "nodeType": "MethodDefinition",
        "messageId": "exceed",
        "endLine": 119,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * SOTA Rate Limiting Implementation\r\n * Prevents brute force attacks and API abuse with intelligent rate limiting\r\n */\r\n\r\ninterface RateLimitEntry {\r\n  count: number;\r\n  resetTime: number;\r\n  blocked: boolean;\r\n  blockUntil?: number;\r\n}\r\n\r\n\r\n// In-memory rate limit store (in production, use Redis)\r\nconst rateLimitStore = new Map<string, RateLimitEntry>();\r\n\r\n// Rate limit configurations for different endpoints\r\nexport const RATE_LIMIT_CONFIGS = {\r\n  // Authentication endpoints - strict limits\r\n  auth: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    maxRequests: 5, // 5 attempts per 15 minutes\r\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\r\n    skipSuccessfulRequests: true\r\n  },\r\n  // API endpoints - moderate limits\r\n  api: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 60, // 60 requests per minute\r\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\r\n    skipSuccessfulRequests: false\r\n  },\r\n  // Admin endpoints - very strict limits\r\n  admin: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 20, // 20 requests per minute\r\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\r\n    skipSuccessfulRequests: false\r\n  }\r\n} as const;\r\n\r\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\r\n\r\n/**\r\n * Rate Limiter Service\r\n */\r\nexport class RateLimiter {\r\n  /**\r\n   * Check if request should be rate limited\r\n   */\r\n  static checkRateLimit(\r\n    identifier: string,\r\n    type: RateLimitType = 'api'\r\n  ): {\r\n    allowed: boolean;\r\n    remaining: number;\r\n    resetTime: number;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    \r\n    // Clean up expired entries\r\n    this.cleanupExpiredEntries();\r\n    \r\n    let entry = rateLimitStore.get(key);\r\n    \r\n    // Initialize entry if it doesn't exist\r\n    if (!entry) {\r\n      entry = {\r\n        count: 0,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false\r\n      };\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n    \r\n    // Check if currently blocked\r\n    if (entry.blocked && (entry.blockUntil != undefined) && now < entry.blockUntil) {\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000)\r\n      };\r\n    }\r\n    \r\n    // Reset window if expired\r\n    if (now >= entry.resetTime) {\r\n      entry.count = 0;\r\n      entry.resetTime = now + config.windowMs;\r\n      entry.blocked = false;\r\n      entry.blockUntil = undefined;\r\n    }\r\n    \r\n    // Check if limit exceeded\r\n    if (entry.count >= config.maxRequests) {\r\n      entry.blocked = true;\r\n      entry.blockUntil = now + config.blockDurationMs;\r\n      \r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil(config.blockDurationMs / 1000)\r\n      };\r\n    }\r\n    \r\n    // Increment counter\r\n    entry.count++;\r\n    rateLimitStore.set(key, entry);\r\n    \r\n    return {\r\n      allowed: true,\r\n      remaining: config.maxRequests - entry.count,\r\n      resetTime: entry.resetTime\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Record successful request (for auth endpoints)\r\n   */\r\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    if (!config.skipSuccessfulRequests) return;\r\n    \r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n    \r\n    if (entry) {\r\n      // Reset counter on successful auth\r\n      entry.count = 0;\r\n      entry.blocked = false;\r\n      entry.blockUntil = undefined;\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get rate limit status without incrementing\r\n   */\r\n  static getStatus(\r\n    identifier: string,\r\n    type: RateLimitType = 'api'\r\n  ): {\r\n    remaining: number;\r\n    resetTime: number;\r\n    blocked: boolean;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n    \r\n    if (!entry) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false\r\n      };\r\n    }\r\n    \r\n    // Check if blocked\r\n    if (entry.blocked && (entry.blockUntil != undefined) && now < entry.blockUntil) {\r\n      return {\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        blocked: true,\r\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000)\r\n      };\r\n    }\r\n    \r\n    // Check if window expired\r\n    if (now >= entry.resetTime) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false\r\n      };\r\n    }\r\n    \r\n    return {\r\n      remaining: Math.max(0, config.maxRequests - entry.count),\r\n      resetTime: entry.resetTime,\r\n      blocked: false\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Clean up expired entries to prevent memory leaks\r\n   */\r\n  private static cleanupExpiredEntries(): void {\r\n    const now = Date.now();\r\n    \r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      // Remove entries that are expired and not blocked\r\n      if (now >= entry.resetTime && (!entry.blocked || (entry.blockUntil == undefined) || now >= entry.blockUntil)) {\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Clear all rate limit data for an identifier\r\n   */\r\n  static clearLimits(identifier: string, type?: RateLimitType): void {\r\n    if (type) {\r\n      const key = `${type}:${identifier}`;\r\n      rateLimitStore.delete(key);\r\n    } else {\r\n      // Clear all types for this identifier\r\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS)) {\r\n        const key = `${limitType}:${identifier}`;\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get rate limit statistics\r\n   */\r\n  static getStats(): {\r\n    totalEntries: number;\r\n    blockedEntries: number;\r\n    entriesByType: Record<string, number>;\r\n  } {\r\n    const stats = {\r\n      totalEntries: rateLimitStore.size,\r\n      blockedEntries: 0,\r\n      entriesByType: {} as Record<string, number>\r\n    };\r\n    \r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      const type = key.split(':')[0];\r\n      stats.entriesByType[type] = (stats.entriesByType[type] ?? 0) + 1;\r\n      \r\n      if (entry.blocked) {\r\n        stats.blockedEntries++;\r\n      }\r\n    }\r\n    \r\n    return stats;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility function to get client identifier from request\r\n */\r\nexport function getClientIdentifier(request: Request): string {\r\n  // Try to get IP address from various headers\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIp = request.headers.get('x-real-ip');\r\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\r\n  \r\n  // Use the first available IP\r\n  const ip = (forwarded?.split(',')[0]?.trim() ?? realIp ?? cfConnectingIp) ?? 'unknown';\r\n  \r\n  // Include user agent for more specific identification\r\n  const userAgent = request.headers.get('user-agent') ?? 'unknown';\r\n  \r\n  // Create a hash of IP + User Agent for better identification\r\n  return `${ip}:${userAgent.slice(0, 50)}`;\r\n}\r\n\r\n/**\r\n * Rate limiting middleware for API routes\r\n */\r\nexport function withRateLimit(\r\n  handler: (request: Request) => Promise<Response>,\r\n  type: RateLimitType = 'api'\r\n) {\r\n  return async (request: Request): Promise<Response> => {\r\n    const identifier = getClientIdentifier(request);\r\n    const result = RateLimiter.checkRateLimit(identifier, type);\r\n    \r\n    if (result.allowed === false) {\r\n      const headers = new Headers({\r\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\r\n        'X-RateLimit-Remaining': '0',\r\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\r\n      });\r\n      \r\n      if (result.retryAfter != undefined) {\r\n        headers.set('Retry-After', result.retryAfter.toString());\r\n      }\r\n      \r\n      return new Response(\r\n        JSON.stringify({\r\n          error: 'Rate limit exceeded',\r\n          message: (result.retryAfter == undefined) ? 'Too many requests. Try again later.' : `Too many requests. Try again in ${result.retryAfter} seconds.`,\r\n          retryAfter: result.retryAfter\r\n        }),\r\n        {\r\n          status: 429,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...Object.fromEntries(headers.entries())\r\n          }\r\n        }\r\n      );\r\n    }\r\n    \r\n    // Add rate limit headers to successful responses\r\n    const response = await handler(request);\r\n    \r\n    response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\r\n    response.headers.set('X-RateLimit-Remaining', result.remaining.toString());\r\n    response.headers.set('X-RateLimit-Reset', new Date(result.resetTime).toISOString());\r\n    \r\n    return response;\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\supabase.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\supabaseMiddleware.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\utils\\dataQualityFormatters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\utils\\qualityScorer.ts",
    "messages": [
      {
        "ruleId": "sonarjs/slow-regex",
        "severity": 2,
        "message": "Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.",
        "line": 114,
        "column": 9,
        "nodeType": "Literal",
        "endLine": 114,
        "endColumn": 37
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * SOTA Quality Scoring Utilities\r\n * Centralized quality scoring functions to eliminate duplication\r\n * and provide consistent quality metrics across the application\r\n */\r\n\r\nimport { isNonEmptyString, isValidNumber, safeNumber, safeString } from './typeGuards';\r\n\r\n// Quality score weights (must sum to 1.0)\r\nexport const QUALITY_WEIGHTS = {\r\n  CORE_DATA: 0.35,      // 35% - name, description, location\r\n  LOCATION_DATA: 0.25,  // 25% - coordinates, address\r\n  CONTACT_DATA: 0.2,    // 20% - phone, email, website\r\n  MENU_DATA: 0.1,       // 10% - menu items, pricing\r\n  OPERATIONAL_DATA: 0.05, // 5% - hours, social media\r\n  VERIFICATION: 0.05    // 5% - verification status\r\n} as const;\r\n\r\n// Quality thresholds\r\nexport const QUALITY_THRESHOLDS = {\r\n  HIGH: 0.8,    // 80%+\r\n  MEDIUM: 0.6,  // 60-79%\r\n  LOW: 0       // <60%\r\n} as const;\r\n\r\n// Core data quality scoring\r\nexport function scoreCoreData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Name (required - 40% of core score)\r\n  maxScore += 0.4;\r\n  if (isNonEmptyString(truck.name)) {\r\n    score += 0.4;\r\n  }\r\n\r\n  // Description (30% of core score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.description)) {\r\n    const desc = safeString(truck.description);\r\n    if (desc.length > 50) {\r\n      score += 0.3;\r\n    } else if (desc.length > 20) {\r\n      score += 0.15;\r\n    }\r\n  }\r\n\r\n  // Cuisine type (20% of core score)\r\n  maxScore += 0.2;\r\n  if (isNonEmptyString(truck.cuisine_type)) {\r\n    score += 0.2;\r\n  }\r\n\r\n  // Image URL (10% of core score)\r\n  maxScore += 0.1;\r\n  if (isNonEmptyString(truck.image_url)) {\r\n    score += 0.1;\r\n  }\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Location data quality scoring\r\nexport function scoreLocationData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Coordinates (50% of location score)\r\n  maxScore += 0.5;\r\n  const latitude = safeNumber(truck.latitude);\r\n  const longitude = safeNumber(truck.longitude);\r\n  if (isValidNumber(latitude) && isValidNumber(longitude) && \r\n      latitude !== 0 && longitude !== 0) {\r\n    score += 0.5;\r\n  }\r\n\r\n  // Address (30% of location score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.address)) {\r\n    score += 0.3;\r\n  }\r\n\r\n  // City/State (20% of location score)\r\n  maxScore += 0.2;\r\n  if (isNonEmptyString(truck.city) || isNonEmptyString(truck.state)) {\r\n    score += 0.2;\r\n  }\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Contact data quality scoring\r\nexport function scoreContactData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Phone (40% of contact score)\r\n  maxScore += 0.4;\r\n  if (isNonEmptyString(truck.phone)) {\r\n    const phone = safeString(truck.phone);\r\n    // Basic phone validation - simplified to avoid backtracking\r\n    if (/^\\+?[\\d\\s\\-()]{10,}$/.test(phone)) {\r\n      score += 0.4;\r\n    } else if (phone.length > 5) {\r\n      score += 0.2;\r\n    }\r\n  }\r\n\r\n  // Email (30% of contact score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.email)) {\r\n    const email = safeString(truck.email);\r\n    // Basic email validation\r\n    if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n      score += 0.3;\r\n    }\r\n  }\r\n\r\n  // Website (30% of contact score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.website)) {\r\n    const website = safeString(truck.website);\r\n    // Basic URL validation\r\n    if (/^https?:\\/\\/.+\\..+/.test(website)) {\r\n      score += 0.3;\r\n    }\r\n  }\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Menu data quality scoring\r\nexport function scoreMenuData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Menu items (70% of menu score)\r\n  maxScore += 0.7;\r\n  if (isNonEmptyString(truck.menu_items)) {\r\n    const menuItems = safeString(truck.menu_items);\r\n    if (menuItems.length > 100) {\r\n      score += 0.7;\r\n    } else if (menuItems.length > 20) {\r\n      score += 0.35;\r\n    }\r\n  }\r\n\r\n  // Price range (30% of menu score)\r\n  maxScore += 0.3;\r\n  if (isNonEmptyString(truck.price_range)) {\r\n    score += 0.3;\r\n  }\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Operational data quality scoring\r\nexport function scoreOperationalData(truck: Record<string, unknown>): number {\r\n  let score = 0;\r\n  let maxScore = 0;\r\n\r\n  // Operating hours (60% of operational score)\r\n  maxScore += 0.6;\r\n  if (isNonEmptyString(truck.operating_hours)) {\r\n    score += 0.6;\r\n  }\r\n\r\n  // Social media (40% of operational score)\r\n  maxScore += 0.4;\r\n  const socialFields = ['facebook_url', 'twitter_url', 'instagram_url'];\r\n  const socialCount = socialFields.filter(field => isNonEmptyString(truck[field])).length;\r\n  score += (socialCount / socialFields.length) * 0.4;\r\n\r\n  return maxScore > 0 ? score / maxScore : 0;\r\n}\r\n\r\n// Verification status scoring\r\nexport function scoreVerificationStatus(truck: Record<string, unknown>): number {\r\n  const status = safeString(truck.verification_status);\r\n  switch (status) {\r\n    case 'verified': {\r\n      return 1;\r\n    }\r\n    case 'pending': {\r\n      return 0.5;\r\n    }\r\n    default: {\r\n      return 0;\r\n    }\r\n  }\r\n}\r\n\r\n// Calculate overall quality score\r\nexport function calculateOverallQualityScore(truck: Record<string, unknown>): number {\r\n  const coreScore = scoreCoreData(truck);\r\n  const locationScore = scoreLocationData(truck);\r\n  const contactScore = scoreContactData(truck);\r\n  const menuScore = scoreMenuData(truck);\r\n  const operationalScore = scoreOperationalData(truck);\r\n  const verificationScore = scoreVerificationStatus(truck);\r\n\r\n  return (\r\n    coreScore * QUALITY_WEIGHTS.CORE_DATA +\r\n    locationScore * QUALITY_WEIGHTS.LOCATION_DATA +\r\n    contactScore * QUALITY_WEIGHTS.CONTACT_DATA +\r\n    menuScore * QUALITY_WEIGHTS.MENU_DATA +\r\n    operationalScore * QUALITY_WEIGHTS.OPERATIONAL_DATA +\r\n    verificationScore * QUALITY_WEIGHTS.VERIFICATION\r\n  );\r\n}\r\n\r\n// Get quality category\r\nexport function getQualityCategory(score: number): 'high' | 'medium' | 'low' {\r\n  if (score >= QUALITY_THRESHOLDS.HIGH) return 'high';\r\n  if (score >= QUALITY_THRESHOLDS.MEDIUM) return 'medium';\r\n  return 'low';\r\n}\r\n\r\n// Get quality label\r\nexport function getQualityLabel(score: number): string {\r\n  const category = getQualityCategory(score);\r\n  switch (category) {\r\n    case 'high': {\r\n      return 'Excellent';\r\n    }\r\n    case 'medium': {\r\n      return 'Good';\r\n    }\r\n    case 'low': {\r\n      return 'Needs Work';\r\n    }\r\n  }\r\n}\r\n\r\n// Get quality color\r\nexport function getQualityColor(score: number): string {\r\n  const category = getQualityCategory(score);\r\n  switch (category) {\r\n    case 'high': {\r\n      return '#22c55e';\r\n    }\r\n    case 'medium': {\r\n      return '#f59e0b';\r\n    }\r\n    case 'low': {\r\n      return '#ef4444';\r\n    }\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\utils\\typeGuards.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\next-env.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
