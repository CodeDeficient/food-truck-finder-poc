[{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\access-denied\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\analytics\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\auto-scraping\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-cleanup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-quality\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\events\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\monitoring\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx","messages":[{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":41,"column":76,"nodeType":"Literal","messageId":"error","endLine":41,"endColumn":80,"suggestions":[{"messageId":"replace","fix":{"range":[1569,1573],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3347,3347],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3347,3347],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n'use client';\r\n\r\nimport { useFoodTrucks, DataStatusIndicator } from '@/lib/fallback/supabaseFallback';\r\nimport {\r\n  ScrapingJobService,\r\n  DataProcessingService,\r\n  supabase,\r\n} from '@/lib/supabase';\r\nimport { TotalFoodTrucksCard } from '@/components/admin/dashboard/TotalFoodTrucksCard';\r\nimport { PipelineStatusCard } from '@/components/admin/dashboard/PipelineStatusCard';\r\nimport { DataQualityScoreCard } from '@/components/admin/dashboard/DataQualityScoreCard';\r\nimport { QualityDistributionCard } from '@/components/admin/dashboard/QualityDistributionCard';\r\nimport { RecentErrorsCard } from '@/components/admin/dashboard/RecentErrorsCard';\r\nimport { useEffect, useState } from 'react';\r\n\r\n// Define the data quality stats type based on the database function\r\ninterface DataQualityStats {\r\n  readonly total_trucks: number;\r\n  readonly avg_quality_score: number;\r\n  readonly high_quality_count: number;\r\n  readonly medium_quality_count: number;\r\n  readonly low_quality_count: number;\r\n  readonly verified_count: number;\r\n  readonly pending_count: number;\r\n  readonly flagged_count: number;\r\n}\r\n\r\ninterface DashboardData {\r\n  totalFoodTrucks: number;\r\n  pendingVerifications: number;\r\n  pendingScrapingJobsCount: number;\r\n  runningScrapingJobsCount: number;\r\n  failedScrapingJobsCount: number;\r\n  failedProcessingQueueItemsCount: number;\r\n  dataQualityStats: DataQualityStats;\r\n}\r\n\r\nexport default function AdminDashboard() {\r\n  const { trucks, loading, dataStatus } = useFoodTrucks();\r\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\r\n\r\n  useEffect(() => {\r\n    async function getDashboardData() {\r\n      const pendingVerifications = trucks.filter((t) => t.verification_status === 'pending').length;\r\n\r\n      // Fetch pipeline status (e.g., pending scraping jobs)\r\n      const pendingScrapingJobs = await ScrapingJobService.getJobsByStatus('pending');\r\n      const runningScrapingJobs = await ScrapingJobService.getJobsByStatus('running');\r\n      const failedScrapingJobs = await ScrapingJobService.getJobsByStatus('failed');\r\n\r\n      // Fetch recent errors from data processing queue\r\n      const failedProcessingQueueItems = await DataProcessingService.getQueueByStatus('failed');\r\n      // Fetch data quality stats using the Supabase function\r\n      const { data: qualityStatsResult, error: qualityError } = await supabase\r\n        .rpc('get_data_quality_stats')\r\n        .single();\r\n\r\n      if (qualityError != undefined) {\r\n        console.error('Error fetching data quality stats:', qualityError);\r\n      }\r\n\r\n      const dataQualityStats: DataQualityStats = (qualityStatsResult as DataQualityStats) ?? {\r\n        total_trucks: 0,\r\n        avg_quality_score: 0,\r\n        high_quality_count: 0,\r\n        medium_quality_count: 0,\r\n        low_quality_count: 0,\r\n        verified_count: 0,\r\n        pending_count: 0,\r\n        flagged_count: 0,\r\n      };\r\n\r\n      setDashboardData({\r\n        totalFoodTrucks: trucks.length,\r\n        pendingVerifications,\r\n        pendingScrapingJobsCount: pendingScrapingJobs.length,\r\n        runningScrapingJobsCount: runningScrapingJobs.length,\r\n        failedScrapingJobsCount: failedScrapingJobs.length,\r\n        failedProcessingQueueItemsCount: failedProcessingQueueItems.length,\r\n        dataQualityStats,\r\n      });\r\n    }\r\n\r\n    if (trucks.length > 0) {\r\n      getDashboardData();\r\n    }\r\n  }, [trucks]);\r\n\r\n  if (loading || !dashboardData) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (dataStatus.status === 'unavailable') {\r\n    return (\r\n      <div className=\"flex flex-col gap-4\">\r\n        <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\r\n        <DataStatusIndicator status={dataStatus} />\r\n        <div className=\"text-center py-10\">\r\n          <p className=\"text-lg text-gray-500\">Food truck data is currently unavailable. Please try again later.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\r\n      <DataStatusIndicator status={dataStatus} />\r\n\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <TotalFoodTrucksCard\r\n          totalFoodTrucks={dashboardData.totalFoodTrucks}\r\n          pendingVerifications={dashboardData.pendingVerifications}\r\n        />\r\n        <PipelineStatusCard\r\n          pendingScrapingJobsCount={dashboardData.pendingScrapingJobsCount}\r\n          runningScrapingJobsCount={dashboardData.runningScrapingJobsCount}\r\n          failedScrapingJobsCount={dashboardData.failedScrapingJobsCount}\r\n        />\r\n        <DataQualityScoreCard dataQualityStats={dashboardData.dataQualityStats} />\r\n        <QualityDistributionCard dataQualityStats={dashboardData.dataQualityStats} />\r\n        <RecentErrorsCard failedProcessingQueueItemsCount={dashboardData.failedProcessingQueueItemsCount} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\test-pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\users\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\automated-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\cron-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-quality\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\oauth-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\realtime-events\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\scraping-metrics\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\analytics\\web-vitals\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\auto-scrape-initiate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\autonomous-discovery\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\auto-scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\quality-check\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\dashboard\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\enhanced-pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\firecrawl\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\gemini\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\monitoring\\api-usage\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scheduler\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\search\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\tavily\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-integration\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-pipeline-run\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\callback\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { RateLimiter, getClientIdentifier } from '@/lib/security/rateLimiter';\r\nimport { AuditLogger } from '@/lib/security/auditLogger';\r\nimport { User } from '@supabase/supabase-js';\r\n\r\ninterface RequestMetadata {\r\n  ip: string;\r\n  userAgent: string;\r\n}\r\n\r\nasync function handleSuccessfulAuth({\r\n  user,\r\n  redirectTo,\r\n  origin,\r\n  identifier,\r\n  requestMetadata,\r\n}: {\r\n  user: User;\r\n  redirectTo: string;\r\n  origin: string;\r\n  identifier: string;\r\n  requestMetadata: RequestMetadata;\r\n}) {\r\n  const { data: profile } = await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', user.id)\r\n    .single();\r\n\r\n  await AuditLogger.logAuthEvent(\r\n    'login_success',\r\n    user.email,\r\n    user.id,\r\n    requestMetadata,\r\n    { provider: 'google', role: profile?.role },\r\n  );\r\n\r\n  RateLimiter.recordSuccess(identifier, 'auth');\r\n\r\n  if (profile?.role === 'admin') {\r\n    return NextResponse.redirect(`${origin}${redirectTo}`);\r\n  } else {\r\n    await AuditLogger.logSecurityEvent({\r\n      event_type: 'permission_denied',\r\n      user_id: user.id,\r\n      user_email: user.email,\r\n      ip_address: requestMetadata.ip,\r\n      user_agent: requestMetadata.userAgent,\r\n      details: {\r\n        reason: 'insufficient_role',\r\n        user_role: profile?.role ?? 'none',\r\n      },\r\n      severity: 'warning',\r\n    });\r\n    return NextResponse.redirect(`${origin}/access-denied`);\r\n  }\r\n}\r\n\r\nasync function handleAuthFailure(\r\n  error: Error,\r\n  identifier: string,\r\n  requestMetadata: RequestMetadata,\r\n) {\r\n  await AuditLogger.logAuthEvent(\r\n    'login_failure',\r\n    undefined,\r\n    undefined,\r\n    requestMetadata,\r\n    { provider: 'google', error: error.message },\r\n  );\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const identifier = getClientIdentifier(request);\r\n  const rateLimitResult = RateLimiter.checkRateLimit(identifier, 'auth');\r\n\r\n  if (!rateLimitResult.allowed) {\r\n    await AuditLogger.logSecurityEvent({\r\n      event_type: 'login_failure',\r\n      ip_address: identifier.split(':')[0],\r\n      user_agent: request.headers.get('user-agent') ?? 'unknown',\r\n      details: {\r\n        reason: 'rate_limit_exceeded',\r\n        retryAfter: rateLimitResult.retryAfter,\r\n      },\r\n      severity: 'warning',\r\n    });\r\n    return NextResponse.redirect(`${new URL(request.url).origin}/login?error=rate_limit`);\r\n  }\r\n\r\n  const { searchParams, origin } = new URL(request.url);\r\n  const code = searchParams.get('code');\r\n  const redirectTo = searchParams.get('redirectTo') ?? '/admin';\r\n\r\n  const requestMetadata = {\r\n    ip: identifier.split(':')[0],\r\n    userAgent: request.headers.get('user-agent') ?? 'unknown',\r\n  };\r\n\r\n  if (code !== null && code.length > 0) {\r\n    const { error } = await supabase.auth.exchangeCodeForSession(code);\r\n\r\n    if (error) {\r\n      await handleAuthFailure(error, identifier, requestMetadata);\r\n    } else {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n      if (user) {\r\n        return await handleSuccessfulAuth({\r\n          user,\r\n          redirectTo,\r\n          origin,\r\n          identifier,\r\n          requestMetadata,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return NextResponse.redirect(`${origin}/login`);\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\SearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":42,"column":15,"nodeType":null,"endLine":42,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[1583,1586],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\WebVitalsReporter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\AdminNavLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\DataCleanupDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\RealtimeStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\UserMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupOperationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupSummaryCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\OperationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\DataQualityScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\PipelineStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\QualityDistributionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\RecentErrorsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\TotalFoodTrucksCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\TrucksPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":45,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":31,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":31,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":62,"nodeType":"Identifier","messageId":"anyAssignment","endLine":31,"endColumn":67}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport TruckCard from '@/components/ui/TruckCard';\r\nimport { Truck } from '@/lib/types'; // Import from actual types file\r\n\r\n/**\r\n* Loads and displays a list of trucks on the dashboard.\r\n* @example\r\n* TrucksPage()\r\n* Returns a container with truck cards or a loading message.\r\n* @returns {JSX.Element} A container with truck cards or a loading message.\r\n* @description\r\n*   - Uses temporary truck data, which should be replaced with real truck loading logic.\r\n*   - Employs useState to manage the array of trucks.\r\n*   - Displays 'Loading trucks...' message when truck data is unavailable.\r\n*/\r\nconst TrucksPage = () => {\r\n  const [trucks, setTrucks] = useState<Truck[]>([]);\r\n\r\n  useEffect(() => {\r\n    // Placeholder: Integrate actual truck loading logic here\r\n    setTrucks([\r\n      // Temporary data - replace with real query\r\n      { id: \"1\", name: \"Temp Truck 1\", cuisine_type: [\"American\"], price_range: \"$\", data_quality_score: 0, verification_status: \"pending\", source_urls: [], last_scraped_at: \"\", current_location: { lat: 0, lng: 0, address: \"\", timestamp: \"\" }, operating_hours: { monday: { closed: true }, tuesday: { closed: true }, wednesday: { closed: true }, thursday: { closed: true }, friday: { closed: true }, saturday: { closed: true }, sunday: { closed: true } }, menu: [], contact_info: {}, social_media: {}, created_at: \"\", updated_at: \"\", description: \"\", specialties: [], scheduled_locations: [] },\r\n      { id: \"2\", name: \"Temp Truck 2\", cuisine_type: [\"Mexican\"], price_range: \"$\", data_quality_score: 0, verification_status: \"pending\", source_urls: [], last_scraped_at: \"\", current_location: { lat: 0, lng: 0, address: \"\", timestamp: \"\" }, operating_hours: { monday: { closed: true }, tuesday: { closed: true }, wednesday: { closed: true }, thursday: { closed: true }, friday: { closed: true }, saturday: { closed: true }, sunday: { closed: true } }, menu: [], contact_info: {}, social_media: {}, created_at: \"\", updated_at: \"\", description: \"\", specialties: [], scheduled_locations: [] }\r\n    ]);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"trucks-container\">\r\n      {trucks.length > 0 ? (\r\n        trucks.map(truck => <TruckCard key={truck.id} truck={truck} />)\r\n      ) : (\r\n        <p>Loading trucks...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrucksPage;\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\BasicInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\DataQualityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\LocationInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\OperatingHoursCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityScoreMetric.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\RatingsReviewsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\FailedProcessingQueueTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\PipelineStatisticsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\RecentScrapingJobsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobsTableContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertListDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ConnectionStatusHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\EventControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\EventSubscriptionManager.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":23,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":23,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":55,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":22,"suggestions":[{"fix":{"range":[2064,2123],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\r\n\r\nimport { supabase } from '@/lib/supabase'; \r\nimport { PipelineEvent } from '@/lib/types';\r\n\r\n/**\r\n * Manages event subscriptions for pipeline events using Supabase.\r\n * @example\r\n * EventSubscriptionManager()\r\n * @returns {void} This component serves purely for side-effects of subscription management.\r\n * @description\r\n *   - Utilizes the Supabase Realtime Client to subscribe and process \"pipeline-events\".\r\n *   - Includes an effect cleanup to unsubscribe from events when the component unmounts.\r\n *   - Current implementation logs events to the console as placeholders.\r\n */\r\ntype RealtimeChannelStatus = 'SUBSCRIBED' | 'CLOSED' | 'CHANNEL_ERROR' | 'TIMED_OUT';\r\n\r\nfunction EventSubscriptionManager() {\r\n  useEffect(() => {\r\n    const handleEvent = (payload: { new: PipelineEvent }) => {\r\n      try {\r\n        const event = payload.new;\r\n        if (event && typeof event === 'object' && 'type' in event) {\r\n          // Process the event based on its type\r\n          switch (event.type) {\r\n            case 'job_started': {\r\n              console.info('Job started:', event.payload);\r\n              break;\r\n            }\r\n            case 'job_completed': {\r\n              console.info('Job completed:', event.payload);\r\n              break;\r\n            }\r\n            case 'data_updated': {\r\n              console.info('Data updated:', event.payload);\r\n              break;\r\n            }\r\n            default: {\r\n              console.warn('Received unknown event type:', event.type);\r\n            }\r\n          }\r\n        } else {\r\n          console.warn('Received malformed event:', payload);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing pipeline event:', error);\r\n      }\r\n    };\r\n\r\n    const subscription = supabase\r\n      .channel('pipeline-events')\r\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'pipeline_events' }, handleEvent)\r\n      .subscribe((status: RealtimeChannelStatus, error?: Error) => {\r\n        if (status === 'SUBSCRIBED') {\r\n          console.log('Successfully subscribed to pipeline events.');\r\n        }\r\n        if (status === 'CHANNEL_ERROR' && error) {\r\n          console.error('Pipeline event subscription error:', error);\r\n        }\r\n      });\r\n\r\n    return () => {\r\n      void supabase.realtime.removeChannel(subscription);\r\n    };\r\n  }, []);\r\n}\r\n\r\nexport default EventSubscriptionManager;\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\RealtimeStatusDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ScrapingJobsStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\StatusHelpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlertItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemMetricsGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trend' is defined but never used.","line":8,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { StatusMetric } from './useSystemMetrics.tsx'; // Import StatusMetric type\nimport { getStatusColor, getStatusIcon, getTrendIcon } from './StatusHelpers'; // Import helper functions\n\ntype Status = 'healthy' | 'warning' | 'error' | 'unknown';\ntype Trend = 'up' | 'down' | 'stable' | undefined;\n\ninterface SystemMetricsGridProps {\n  readonly metrics: StatusMetric[];\n}\n\n/**\n* Displays a grid of system metrics using provided data.\n* @example\n* SystemMetricsGrid({ metrics: sampleMetricsArray })\n* <div className=\"grid\">...</div>\n* @param {SystemMetricsGridProps} {metrics} - An array of metric objects to be displayed in the grid.\n* @returns {JSX.Element} A JSX element representing a styled grid displaying system metrics.\n* @description\n*   - Each metric is rendered with icons representing its status and trend.\n*   - Metrics are styled based on their status, indicating their current state.\n*   - Responsive grid layout adapts based on screen size.\n*/\nexport function SystemMetricsGrid({ metrics }: SystemMetricsGridProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {metrics.map((metric, index) => (\n        <div\n          key={index}\n          className={`p-3 rounded-lg border ${getStatusColor(metric.status as Status)}`}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center gap-2\">\n              {metric.icon}\n              <span className=\"text-sm font-medium\">{metric.label}</span>\n            </div>\n            {getStatusIcon(metric.status as Status)}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-lg font-bold\">\n              {metric.value}\n              {metric.unit}\n            </span>\n            {getTrendIcon(metric.trend)}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemStatusIndicators.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemAlertsLogic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\users\\UserTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\AppHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\LoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MainContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MapSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\login\\EmailFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\DynamicMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapLoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapViewUpdater.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\TruckMarkers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\UserLocationMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\mapHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\ApiMonitoringDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\TechnicalDetailsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\AdvancedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\CuisineTypesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\DistanceSliderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\FilterToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\MainSearchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\QuickFiltersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchFilterContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchInputWithIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineSubmitHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestResultsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\OperatingHoursSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckAccordionItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckBasicInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckContactInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckLocationInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckOperatingHours.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckRatingsReviews.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ContactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\NavigationMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\SimpleQualityPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\SocialMediaSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ToggleGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\TruckCardContent.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":55,"column":41,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":55,"endColumn":58,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2192,2209],"text":"(todayHours.closed ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[2191,2209],"text":"(todayHours.closed === false)"},"desc":"Change condition to check if false (`value === false`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport TruckCard from './TruckCard';\r\nimport { formatPrice } from '@/lib/utils/foodTruckHelpers';\r\nimport { MenuSection, SocialMediaSection, ContactSection } from '.';\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  price_cents?: number; // Make price_cents optional\r\n}\r\n\r\n/**\r\n* Renders the card content for a food truck including its name, operating hours, popular menu items, and contact details.\r\n* @example\r\n* TruckCardContent({\r\n*   truck: { name: 'Tasty Truck', address: '123 Street', phone_number: '123-456-7890' },\r\n*   todayHours: { open: '8:00 AM', close: '5:00 PM', closed: false },\r\n*   popularItems: [{ name: 'Burger', price_cents: 500 }],\r\n* })\r\n* // returns JSX containing truck's card\r\n* @param {object} truck - The truck object containing name, address, and phone number.\r\n* @param {object} todayHours - An optional object specifying today's opening and closing times and whether it is closed.\r\n* @param {MenuItem[]} popularItems - List of popular menu items to display.\r\n* @returns {JSX.Element} The JSX content for rendering the truck's card.\r\n* @description\r\n*   - Uses default values for missing truck properties to ensure components render safely.\r\n*   - Calculates the average price of popular items and formats it to two decimal places.\r\n*   - Validates the existence of social media and contact information before rendering related sections.\r\n*/\r\nexport function TruckCardContent({\r\n  truck,\r\n  todayHours,\r\n  popularItems = [],\r\n}: {\r\n  readonly truck: { name: string; address?: string; phone_number?: string; social_media?: Record<string, string> };\r\n  readonly todayHours?: { open?: string; close?: string; closed?: boolean };\r\n  readonly popularItems: MenuItem[];\r\n}) {\r\n  const {\r\n    name = 'Unnamed Truck',\r\n    social_media = {},\r\n    address = '', // Provide safe defaults\r\n    phone_number = '',\r\n  } = truck;\r\n\r\n  const avgDailyPrice = (\r\n    popularItems.reduce((acc, item) => acc + (item.price_cents ?? 0), 0) /\r\n    popularItems.length ?? 0\r\n  ).toFixed(2);\r\n\r\n  return (\r\n    <main className=\"ui-truck-container\">\r\n      {name && (\r\n        <>\r\n          <TruckCard title={name} avgCost={`$${avgDailyPrice}`} />\r\n          {todayHours !== undefined && !todayHours.closed && (\r\n            <div className=\"hours-display\">\r\n              <strong>Today:</strong> {todayHours.open} - {todayHours.close}\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {popularItems.length > 0 && (\r\n        <MenuSection\r\n          items={popularItems.map(item => ({\r\n            name: item.name,\r\n            price: formatPrice(item.price_cents),\r\n          }))}\r\n        />\r\n      )}\r\n\r\n      {/* SocialMediaSection and ContactSection require validation */}\r\n      {Object.keys(social_media).length > 0 && (typeof social_media === 'object')&& (\r\n        <SocialMediaSection social_media={social_media} />\r\n      )}\r\n\r\n      {/* Refactored ContactSection - handle undefined values explicitly*/}\r\n      {(address || phone_number) && (\r\n        <ContactSection address={address} phone_number={phone_number} />\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":13,"column":9,"nodeType":null,"messageId":"deprecation","endLine":13,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":120,"column":25,"nodeType":"TSFunctionType","messageId":"exceed","endLine":120,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\QualityPieChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipItemContent.tsx","messages":[],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":6,"column":24,"nodeType":"TSFunctionType","messageId":"exceed","endLine":6,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\getPayloadConfigFromPayload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\useTooltipLabel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dataQualityCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":20,"column":9,"nodeType":null,"messageId":"deprecation","endLine":20,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":59,"column":9,"nodeType":null,"messageId":"deprecation","endLine":59,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\filter-eslint-errors.cjs","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): filter-eslint-errors.cjs"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fs = require('fs');\nconst results = JSON.parse(fs.readFileSync('lint-results.json', 'utf8'));\nconst strictBooleanErrors = results.flatMap(file => file.messages).filter(msg => msg.ruleId === '@typescript-eslint/strict-boolean-expressions');\nconsole.log(JSON.stringify(strictBooleanErrors, null, 2));","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\connectionManagementHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\createEventSourceConnection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\setupEventSourceListeners.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useAutoConnect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useEventHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAdminAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAuthHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useDataCleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckFinder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":75,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":82,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":82,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef } from 'react';\r\nimport { RealtimeEvent } from './useRealtimeAdminEvents.types';\r\nimport { RealtimeMetrics } from '@/lib/types';\r\nimport { useConnectionState } from './realtime/useConnectionState';\r\nimport { useConnectionManagement } from './realtime/useConnectionManagement';\r\nimport { useEventHandlers } from './realtime/useEventHandlers';\r\n\r\n/**\r\n * SOTA Real-time Admin Dashboard Hook\r\n *\r\n * Provides real-time updates for admin dashboard using Server-Sent Events (SSE)\r\n * Implements automatic reconnection, error handling, and event filtering\r\n */\r\n\r\ninterface UseRealtimeAdminEventsOptions {\r\n  autoConnect?: boolean;\r\n  reconnectInterval?: number;\r\n  maxReconnectAttempts?: number;\r\n  eventFilter?: (event: RealtimeEvent) => boolean;\r\n}\r\n\r\ninterface UseRealtimeAdminEventsReturn {\r\n  // Connection state\r\n  isConnected: boolean;\r\n  isConnecting: boolean;\r\n  connectionError: string | undefined;\r\n\r\n  // Data\r\n  latestMetrics: RealtimeMetrics | undefined;\r\n  recentEvents: RealtimeEvent[];\r\n\r\n  // Controls\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n  clearEvents: () => void;\r\n\r\n  // Statistics\r\n  connectionAttempts: number;\r\n  lastEventTime: Date | undefined;\r\n}\r\n\r\nexport function useRealtimeAdminEvents(\r\n  options: UseRealtimeAdminEventsOptions = {},\r\n): UseRealtimeAdminEventsReturn {\r\n  const { autoConnect = true, reconnectInterval = 5000, maxReconnectAttempts = 10, eventFilter } = options;\r\n\r\n  const eventSourceRef = useRef<EventSource>();\r\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\r\n  const isManuallyDisconnectedRef = useRef(false);\r\n\r\n  const {\r\n    isConnected,\r\n    isConnecting,\r\n    connectionError,\r\n    latestMetrics,\r\n    recentEvents,\r\n    connectionAttempts,\r\n    lastEventTime,\r\n    setLastEventTime,\r\n    setLatestMetrics,\r\n    setRecentEvents,\r\n  } = useConnectionState();\r\n\r\n  const handleEvent = useEventHandlers(\r\n    eventFilter,\r\n    setLastEventTime,\r\n    setLatestMetrics,\r\n    setRecentEvents,\r\n  );\r\n\r\n  const { connect, disconnect, clearEvents } = useConnectionManagement({\r\n    eventSourceRef,\r\n    reconnectTimeoutRef,\r\n    isManuallyDisconnectedRef,\r\n    connectionState,\r\n    handleEvent,\r\n    maxReconnectAttempts,\r\n    reconnectInterval,\r\n  });\r\n\r\n  // Auto-connect effect\r\n  useEffect(() => {\r\n    if (autoConnect) {\r\n      connect();\r\n    }\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [autoConnect, connect, disconnect]);\r\n\r\n  return {\r\n    isConnected,\r\n    isConnecting,\r\n    connectionError,\r\n    latestMetrics,\r\n    recentEvents,\r\n    connect,\r\n    disconnect,\r\n    clearEvents,\r\n    connectionAttempts,\r\n    lastEventTime,\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEventsHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSearchFiltersLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSidebarKeyboardShortcut.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlerts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useTruckCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\jest.setup.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): jest.setup.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Ensure environment variables are loaded\r\nrequire('dotenv').config({ path: '.env.local' });\r\n\r\n// Original Jest setup imports\r\nimport '@testing-library/jest-dom';\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\ScraperEngine.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":155,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":155,"endColumn":31}],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":326,"column":24,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":326,"endColumn":37,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical user agent selection."}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":342,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":342,"endColumn":42,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical random delays."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from './firecrawl'; // Import the firecrawl singleton\r\nimport * as crypto from 'node:crypto'; // Node.js crypto for secure randomness\r\n\r\ninterface InstagramPost {\r\n  id: string;\r\n  caption: string;\r\n  timestamp: string;\r\n  location: string;\r\n  hashtags: string[];\r\n  engagement: { likes: number; comments: number };\r\n}\r\n\r\ninterface InstagramProfile {\r\n  followers: number;\r\n  following: number;\r\n  posts_count: number;\r\n  bio: string;\r\n  contact_info: { email: string; phone: string };\r\n}\r\n\r\ninterface FacebookPost {\r\n  id: string;\r\n  content: string;\r\n  timestamp: string;\r\n  reactions: { likes: number; loves: number; shares: number };\r\n  comments: number;\r\n}\r\n\r\ninterface FacebookPageInfo {\r\n  likes: number;\r\n  followers: number;\r\n  check_ins: number;\r\n  about: string;\r\n  hours: Record<string, string>;\r\n}\r\n\r\ninterface TwitterTweet {\r\n  id: string;\r\n  text: string;\r\n  timestamp: string;\r\n  retweets: number;\r\n  likes: number;\r\n  replies: number;\r\n  location: string;\r\n}\r\n\r\ninterface TwitterProfile {\r\n  followers: number;\r\n  following: number;\r\n  tweets_count: number;\r\n  bio: string;\r\n  location: string;\r\n  website: string;\r\n}\r\n\r\ninterface InstagramData {\r\n  posts: InstagramPost[];\r\n  profile: InstagramProfile;\r\n}\r\n\r\ninterface FacebookData {\r\n  posts: FacebookPost[];\r\n  page_info: FacebookPageInfo;\r\n}\r\n\r\ninterface TwitterData {\r\n  tweets: TwitterTweet[];\r\n  profile: TwitterProfile;\r\n}\r\n\r\nexport interface WebsiteScrapeData {\r\n  markdown?: string;\r\n  html?: string;\r\n  metadata?: Record<string, unknown>;\r\n  is_fallback?: boolean;\r\n}\r\n\r\nexport interface ExtractedHTMLData {\r\n  name?: string;\r\n  location?: string;\r\n  phone?: string;\r\n  hours?: string;\r\n  menu?: { item: string; price: string }[];\r\n}\r\n\r\ninterface ScrapeResult {\r\n  success: boolean;\r\n  error?: string;\r\n  data?: InstagramData | FacebookData | TwitterData | WebsiteScrapeData | ExtractedHTMLData;\r\n  timestamp: string;\r\n  source: string;\r\n  note?: string;\r\n}\r\n\r\n// Core scraping engine with anti-detection measures\r\nexport class ScraperEngine {\r\n  private userAgents: string[];\r\n  private requestDelay: number;\r\n  private maxRetries: number;\r\n\r\n  constructor() {\r\n    this.userAgents = [\r\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n    ];\r\n    this.requestDelay = 2000;\r\n    this.maxRetries = 3;\r\n  }\r\n\r\n  private async performFallbackScrape(url: string): Promise<ScrapeResult> {\r\n    try {\r\n      const response = await fetch(url, { headers: { 'User-Agent': this.getRandomUserAgent() } });\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `HTTP error ${response.status}: ${response.statusText} during fallback fetch.`,\r\n        );\r\n      }\r\n      const htmlContent = await response.text();\r\n      return {\r\n        success: true,\r\n        data: {\r\n          html: htmlContent,\r\n          is_fallback: true,\r\n        },\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n        note: 'Fetched using basic fetch as Firecrawl failed.',\r\n      };\r\n    } catch (fallbackError) {\r\n      const errMsg =\r\n        fallbackError instanceof Error ? fallbackError.message : 'Unknown fallback fetch error';\r\n      console.warn(`Fallback fetch error for ${url}:`, errMsg);\r\n      return {\r\n        success: false,\r\n        error: \"That didn't work, please try again later.\",\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n      };\r\n    }\r\n  }\r\n\r\n  async scrapeWebsite(url: string, _selectors?: Record<string, string>): Promise<ScrapeResult> {\r\n    try {\r\n      const firecrawlResult = await firecrawl.scrapeUrl(url, {\r\n        formats: ['markdown', 'html'],\r\n        onlyMainContent: true,\r\n      });\r\n\r\n      if (firecrawlResult.success !== true || firecrawlResult.data == undefined) {\r\n        throw new Error(firecrawlResult.error ?? 'Firecrawl scraping failed to return data.');\r\n      }\r\n\r\n      const returnedData: WebsiteScrapeData = {};\r\n      if (firecrawlResult.data && typeof firecrawlResult.data === 'object') {\r\n        const firecrawlData = firecrawlResult.data as Record<string, unknown>;\r\n\r\n        if (typeof firecrawlData.markdown === 'string' && firecrawlData.markdown !== '') {\r\n          returnedData.markdown = firecrawlData.markdown;\r\n        }\r\n        if (typeof firecrawlData.html === 'string' && firecrawlData.html !== '') {\r\n          returnedData.html = firecrawlData.html;\r\n        }\r\n        if (firecrawlData.metadata != undefined && typeof firecrawlData.metadata === 'object') {\r\n          returnedData.metadata = firecrawlData.metadata as Record<string, unknown>;\r\n        }\r\n      }\r\n\r\n      if (\r\n        (returnedData.markdown == undefined || returnedData.markdown === '') &&\r\n        (returnedData.html == undefined || returnedData.html === '')\r\n      ) {\r\n        throw new Error('Firecrawl returned no markdown or HTML content.');\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: returnedData,\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn(`Scraping error for ${url} using Firecrawl:`, error);\r\n      console.info(`Falling back to basic fetch for ${url}`);\r\n      return await this.performFallbackScrape(url);\r\n    }\r\n  }\r\n\r\n  async scrapeSocialMedia(platform: string, handle: string): Promise<ScrapeResult> {\r\n    try {\r\n      await this.randomDelay();\r\n\r\n      switch (platform) {\r\n        case 'instagram': {\r\n          return await this.scrapeInstagram(handle);\r\n        }\r\n        case 'facebook': {\r\n          return await this.scrapeFacebook(handle);\r\n        }\r\n        case 'twitter': {\r\n          return await this.scrapeTwitter(handle);\r\n        }\r\n        default: {\r\n          throw new Error(`Unsupported platform: ${platform}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Social media scraping error for ${platform}/${handle}:`, error);\r\n      return {\r\n        success: false,\r\n        error: \"That didn't work, please try again later.\",\r\n        timestamp: new Date().toISOString(),\r\n        source: `social_media:${platform}:${handle}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async scrapeInstagram(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    const posts: InstagramPost[] = [\r\n      {\r\n        id: 'post_001',\r\n        caption: 'Fresh tacos available now at Mission St! 🌮 #foodtruck #tacos',\r\n        timestamp: new Date(Date.now() - 3_600_000).toISOString(),\r\n        location: 'Mission St, San Francisco',\r\n        hashtags: ['foodtruck', 'tacos', 'fresh'],\r\n        engagement: { likes: 45, comments: 8 },\r\n      },\r\n    ];\r\n    const profile: InstagramProfile = {\r\n      followers: 1250,\r\n      following: 340,\r\n      posts_count: 156,\r\n      bio: 'Best tacos in SF 🌮 Follow for daily locations!',\r\n      contact_info: {\r\n        email: 'contact@tacoparadise.com',\r\n        phone: '+1-555-0456',\r\n      },\r\n    };\r\n    const data: InstagramData = { posts, profile };\r\n    return {\r\n      success: true,\r\n      data,\r\n      timestamp: new Date().toISOString(),\r\n      source: `instagram:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeFacebook(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    const posts: FacebookPost[] = [\r\n      {\r\n        id: 'fb_post_001',\r\n        content: \"Today we'll be at Union Square from 11 AM to 3 PM! Come try our new BBQ burger!\",\r\n        timestamp: new Date(Date.now() - 7_200_000).toISOString(),\r\n        reactions: { likes: 23, loves: 5, shares: 3 },\r\n        comments: 12,\r\n      },\r\n    ];\r\n    const page_info: FacebookPageInfo = {\r\n      likes: 890,\r\n      followers: 1100,\r\n      check_ins: 450,\r\n      about: 'Gourmet food truck serving the Bay Area',\r\n      hours: {\r\n        monday: '11:00-15:00',\r\n        tuesday: '11:00-15:00',\r\n        wednesday: '11:00-15:00',\r\n        thursday: '11:00-15:00',\r\n        friday: '11:00-20:00',\r\n        saturday: '12:00-20:00',\r\n        sunday: '12:00-16:00',\r\n      },\r\n    };\r\n    const data: FacebookData = { posts, page_info };\r\n    return {\r\n      success: true,\r\n      data,\r\n      timestamp: new Date().toISOString(),\r\n      source: `facebook:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeTwitter(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    const tweets: TwitterTweet[] = [\r\n      {\r\n        id: 'tweet_001',\r\n        text: 'LIVE at Dolores Park! Fresh burritos and quesadillas available now 🌯',\r\n        timestamp: new Date(Date.now() - 1_800_000).toISOString(),\r\n        retweets: 8,\r\n        likes: 34,\r\n        replies: 5,\r\n        location: 'Dolores Park, San Francisco',\r\n      },\r\n    ];\r\n    const profile: TwitterProfile = {\r\n      followers: 2340,\r\n      following: 567,\r\n      tweets_count: 1890,\r\n      bio: '🚚 SF Food Truck | Fresh Mexican Food | Follow for locations',\r\n      location: 'San Francisco, CA',\r\n      website: 'https://tacoparadise.com',\r\n    };\r\n    const data: TwitterData = { tweets, profile };\r\n    return {\r\n      success: true,\r\n      data,\r\n      timestamp: new Date().toISOString(),\r\n      source: `twitter:${handle}`,\r\n    };\r\n  }\r\n\r\n  private getRandomUserAgent(): string {\r\n    // Use Node.js crypto for stronger randomness if available, fallback to Math.random otherwise.\r\n    let idx: number;\r\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\r\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\r\n      idx = array[0] % this.userAgents.length;\r\n    } else if (typeof crypto.randomInt === 'function') {\r\n      idx = crypto.randomInt(0, this.userAgents.length);\r\n    } else {\r\n      // Fallback to Math.random for environments where crypto is not available.\r\n      // This is acceptable for non-security-critical random number generation like user agent selection.\r\n      // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for non-security-critical user agent selection.\r\n      idx = Math.floor(Math.random() * this.userAgents.length);\r\n    }\r\n    return this.userAgents[idx];\r\n  }\r\n\r\n  private randomDelay(): Promise<void> {\r\n    let randomMs: number;\r\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\r\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\r\n      randomMs = array[0] % 1000;\r\n    } else if (typeof crypto.randomInt === 'function') {\r\n      randomMs = crypto.randomInt(0, 1000);\r\n    } else {\r\n      // Fallback to Math.random for environments where crypto is not available.\r\n      // This is acceptable for non-security-critical random delays.\r\n      // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for non-security-critical random delays.\r\n      randomMs = Math.floor(Math.random() * 1000);\r\n    }\r\n    const delay = this.requestDelay + randomMs;\r\n    return new Promise((resolve) => setTimeout(resolve, delay));\r\n  }\r\n\r\n  handleRateLimit(retryAfter: number): Promise<void> {\r\n    console.info(`Rate limited. Waiting ${retryAfter} seconds before retry...`);\r\n    return new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));\r\n  }\r\n\r\n  async retryWithBackoff<T>(\r\n    operation: () => Promise<T>,\r\n    maxRetries: number = this.maxRetries,\r\n  ): Promise<T> {\r\n    let lastError: unknown;\r\n\r\n    for (let attempt = 1; attempt <= maxRetries; attempt += 1) {\r\n      try {\r\n        return await operation();\r\n      } catch (error: unknown) {\r\n        lastError = error;\r\n        if (attempt === maxRetries) {\r\n          throw lastError instanceof Error ? lastError : new Error(String(lastError));\r\n        }\r\n\r\n        const backoffDelay = Math.pow(2, attempt) * 1000;\r\n        console.info(`Attempt ${attempt} failed. Retrying in ${backoffDelay}ms...`);\r\n        await new Promise((resolve) => setTimeout(resolve, backoffDelay));\r\n      }\r\n    }\r\n\r\n    throw lastError instanceof Error ? lastError : new Error('Request failed after all retries');\r\n  }\r\n}\r\n\r\ninterface LocationData {\r\n  current?: {\r\n    lat?: number;\r\n    lng?: number;\r\n    address?: string;\r\n  };\r\n}\r\n\r\ninterface ContactInfo {\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\ninterface OperatingHours {\r\n  [key: string]: {\r\n    open: string;\r\n    close: string;\r\n    closed: boolean;\r\n  };\r\n}\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  description?: string;\r\n  price: number;\r\n  dietary_tags?: string[];\r\n}\r\n\r\ninterface MenuCategory {\r\n  category: string;\r\n  items: MenuItem[];\r\n}\r\n\r\ninterface TruckData {\r\n  name: string;\r\n  location: LocationData;\r\n  contact?: ContactInfo;\r\n  operating_hours?: OperatingHours;\r\n  menu?: MenuCategory[];\r\n  last_updated?: string;\r\n}\r\n\r\nexport class DataQualityAssessor {\r\n  private assessBasicInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.name == undefined || truckData.name.trim().length === 0) {\r\n      issues.push('Missing or empty truck name');\r\n      score -= 20;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessLocationInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.location?.current == undefined) {\r\n      issues.push('Missing current location data');\r\n      score -= 25;\r\n    } else {\r\n      if (\r\n        truckData.location.current.lat == undefined ||\r\n        truckData.location.current.lng == undefined\r\n      ) {\r\n        issues.push('Missing GPS coordinates');\r\n        score -= 15;\r\n      }\r\n      if (\r\n        truckData.location.current.address == undefined ||\r\n        truckData.location.current.address === ''\r\n      ) {\r\n        issues.push('Missing address information');\r\n        score -= 10;\r\n      }\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessContactInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.contact) {\r\n      const hasPhone =\r\n        typeof truckData.contact.phone === 'string' && truckData.contact.phone.trim() !== '';\r\n      const hasEmail =\r\n        typeof truckData.contact.email === 'string' && truckData.contact.email.trim() !== '';\r\n\r\n      if (!hasPhone && !hasEmail) {\r\n        issues.push('No phone or email contact available');\r\n        score -= 15;\r\n      }\r\n      if (hasPhone && !this.isValidPhone(truckData.contact.phone as string)) {\r\n        issues.push('Invalid phone number format');\r\n        score -= 5;\r\n      }\r\n      if (hasEmail && !this.isValidEmail(truckData.contact.email as string)) {\r\n        issues.push('Invalid email format');\r\n        score -= 5;\r\n      }\r\n    } else {\r\n      issues.push('Missing contact information');\r\n      score -= 20;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessOperatingHours(truckData: TruckData, issues: string[], score: number): number {\r\n    if (\r\n      truckData.operating_hours == undefined ||\r\n      Object.keys(truckData.operating_hours).length === 0\r\n    ) {\r\n      issues.push('Missing operating hours');\r\n      score -= 15;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessMenuInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.menu == undefined || truckData.menu.length === 0) {\r\n      issues.push('Missing menu information');\r\n      score -= 10;\r\n    } else {\r\n      const menuIssues = this.validateMenuData(truckData.menu);\r\n      issues.push(...menuIssues);\r\n      score -= menuIssues.length * 2;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessLastUpdated(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.last_updated != undefined && truckData.last_updated !== '') {\r\n      const lastUpdate = new Date(truckData.last_updated);\r\n      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);\r\n\r\n      if (daysSinceUpdate > 7) {\r\n        issues.push('Data is more than 7 days old');\r\n        score -= 10;\r\n      } else if (daysSinceUpdate > 3) {\r\n        issues.push('Data is more than 3 days old');\r\n        score -= 5;\r\n      }\r\n    }\r\n    return score;\r\n  }\r\n\r\n  assessTruckData(truckData: TruckData): { score: number; issues: string[] } {\r\n    const issues: string[] = [];\r\n    let score = 100;\r\n\r\n    score = this.assessBasicInfo(truckData, issues, score);\r\n    score = this.assessLocationInfo(truckData, issues, score);\r\n    score = this.assessContactInfo(truckData, issues, score);\r\n    score = this.assessOperatingHours(truckData, issues, score);\r\n    score = this.assessMenuInfo(truckData, issues, score);\r\n    score = this.assessLastUpdated(truckData, issues, score);\r\n\r\n    return {\r\n      score: Math.max(0, score) / 100,\r\n      issues,\r\n    };\r\n  }\r\n\r\n  private validateMenuCategory(\r\n    category: MenuCategory,\r\n    categoryIndex: number,\r\n    issues: string[],\r\n  ): void {\r\n    if (category.category == undefined || category.category.trim().length === 0) {\r\n      issues.push(`Menu category ${categoryIndex + 1} missing name`);\r\n    }\r\n  }\r\n\r\n  private validateMenuItems(category: MenuCategory, issues: string[]): void {\r\n    if (category.items == undefined || category.items.length === 0) {\r\n      issues.push(`Menu category \"${category.category ?? 'Unknown'}\" has no items`);\r\n    } else {\r\n      for (const [itemIndex, item] of category.items.entries()) {\r\n        if (item.name == undefined || item.name.trim().length === 0) {\r\n          issues.push(\r\n            `Menu item ${itemIndex + 1} in \"${category.category ?? 'Unknown'}\" missing name`,\r\n          );\r\n        }\r\n        if (typeof item.price !== 'number' || item.price <= 0) {\r\n          issues.push(`Menu item \"${item.name ?? 'Unknown'}\" has invalid price`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateMenuData(menu: MenuCategory[]): string[] {\r\n    const issues: string[] = [];\r\n\r\n    for (const [categoryIndex, category] of menu.entries()) {\r\n      this.validateMenuCategory(category, categoryIndex, issues);\r\n      this.validateMenuItems(category, issues);\r\n    }\r\n\r\n    return issues;\r\n  }\r\n  private isValidPhone(phone: string): boolean {\r\n    // Regex for phone number validation. Not vulnerable to super-linear runtime due to backtracking.\r\n    // Accepts +, digits, spaces, dashes, and parentheses. At least 10 digits.\r\n    const phoneRegex = /^\\+?[\\d\\s\\-()]{10,}$/;\r\n    return phoneRegex.test(phone);\r\n  }\r\n  private isValidEmail(email: string): boolean {\r\n    // Regex for email validation optimized to avoid backtracking\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]{2,}$/;\r\n    return emailRegex.test(email);\r\n  }\r\n}\r\n\r\ninterface GeminiLocationData {\r\n  address: string;\r\n  city: string;\r\n  state: string;\r\n  coordinates: {\r\n    lat?: number;\r\n    lng?: number;\r\n  };\r\n  confidence: number;\r\n}\r\n\r\ninterface GeminiOperatingHours {\r\n  monday: { open: string; close: string; closed: boolean };\r\n  tuesday: { open: string; close: string; closed: boolean };\r\n  wednesday: { open: string; close: string; closed: boolean };\r\n  thursday: { open: string; close: string; closed: boolean };\r\n  friday: { open: string; close: string; closed: boolean };\r\n  saturday: { open: string; close: string; closed: boolean };\r\n  sunday: { open: string; close: string; closed: boolean };\r\n}\r\n\r\ninterface GeminiSentimentAnalysis {\r\n  sentiment: 'positive' | 'negative' | 'neutral';\r\n  score: number;\r\n  key_topics: string[];\r\n  summary: string;\r\n}\r\n\r\nexport class GeminiDataProcessor {\r\n  private _apiKey: string;\r\n  private _baseUrl: string;\r\n  private requestCount: number;\r\n  private tokenCount: number;\r\n  private dailyLimit: { requests: number; tokens: number };\r\n\r\n  constructor(apiKey: string) {\r\n    this._apiKey = apiKey;\r\n    this._baseUrl = 'https://generativelanguage.googleapis.com/v1beta';\r\n    this.requestCount = 0;\r\n    this.tokenCount = 0;\r\n    this.dailyLimit = { requests: 1500, tokens: 32_000 };\r\n  }\r\n  async processMenuData(rawMenuText: string): Promise<{ categories: MenuCategory[] }> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following food truck menu text and return a structured JSON format:\r\n        \r\n        ${rawMenuText}\r\n        \r\n        Return format:\r\n        {\r\n          \"categories\": [\r\n            {\r\n              \"name\": \"category_name\",\r\n              \"items\": [\r\n                {\r\n                  \"name\": \"item_name\",\r\n                  \"description\": \"item_description\",\r\n                  \"price\": 0.00,\r\n                  \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", etc.]\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n        \r\n        Only return valid JSON, no additional text.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      // Ensure type safety for parsed response\r\n      const parsed: unknown = JSON.parse(response);\r\n      if (\r\n        typeof parsed !== 'object' ||\r\n        parsed == undefined ||\r\n        !('categories' in parsed) ||\r\n        !Array.isArray((parsed as { categories: unknown[] }).categories)\r\n      ) {\r\n        throw new Error('Invalid Gemini menu response: missing or malformed categories array');\r\n      }\r\n      return parsed as { categories: MenuCategory[] };\r\n    } catch (error) {\r\n      console.error('Error processing menu data with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async extractLocationFromText(text: string): Promise<GeminiLocationData> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Extract location information from the following text and return structured data:\r\n        \r\n        \"${text}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"address\": \"full_address\",\r\n          \"city\": \"city_name\",\r\n          \"state\": \"state\",\r\n          \"coordinates\": {\r\n            \"lat\": 0.0,\r\n            \"lng\": 0.0\r\n          },\r\n          \"confidence\": 0.95\r\n        }\r\n        \r\n        If coordinates cannot be determined, set them to undefined. Only return valid JSON.\r\n      `;\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsedResponse: unknown = JSON.parse(response);\r\n      const validatedResponse = this.validateGeminiLocationResponse(parsedResponse);\r\n      return validatedResponse;\r\n    } catch (error) {\r\n      console.error('Error extracting location with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private validateGeminiLocationResponse(parsedResponse: unknown): GeminiLocationData {\r\n    if (\r\n      parsedResponse == undefined ||\r\n      typeof parsedResponse !== 'object' ||\r\n      !('coordinates' in parsedResponse) ||\r\n      typeof (parsedResponse as Record<string, unknown>).coordinates !== 'object'\r\n    ) {\r\n      throw new Error('Invalid Gemini location response');\r\n    }\r\n    const coordinates = (parsedResponse as { coordinates?: { lat?: unknown; lng?: unknown } })\r\n      .coordinates;\r\n    if (coordinates && typeof coordinates === 'object') {\r\n      if (typeof coordinates.lat !== 'number') {\r\n        (coordinates as { lat?: number }).lat = undefined;\r\n      }\r\n      if (typeof coordinates.lng !== 'number') {\r\n        (coordinates as { lng?: number }).lng = undefined;\r\n      }\r\n    }\r\n    return parsedResponse as GeminiLocationData;\r\n  }\r\n\r\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiOperatingHours> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following operating hours text and return standardized format:\r\n        \r\n        \"${hoursText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n        }\r\n          Use 24-hour format. If closed on a day, set \"closed\": true and omit open/close times.\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsed: unknown = JSON.parse(response);\r\n      if (parsed == undefined || typeof parsed !== 'object') {\r\n        throw new Error('Invalid Gemini hours response');\r\n      }\r\n      return parsed as GeminiOperatingHours;\r\n    } catch (error) {\r\n      console.error('Error standardizing hours with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async analyzeSentiment(reviewText: string): Promise<GeminiSentimentAnalysis> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Analyze the sentiment of this food truck review and extract key insights:\r\n        \r\n        \"${reviewText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"sentiment\": \"positive|negative|neutral\",\r\n          \"score\": 0.85,\r\n          \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\"],\r\n          \"summary\": \"brief_summary_of_review\"\r\n        }\r\n          Score should be between 0 (very negative) and 1 (very positive).\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsed: unknown = JSON.parse(response);\r\n      if (parsed == undefined || typeof parsed !== 'object') {\r\n        throw new Error('Invalid Gemini sentiment response');\r\n      }\r\n      return parsed as GeminiSentimentAnalysis;\r\n    } catch (error) {\r\n      console.error('Error analyzing sentiment with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async makeGeminiRequest(prompt: string): Promise<string> {\r\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay\r\n    return this.getMockGeminiResponse(prompt);\r\n  }\r\n\r\n  private getMockGeminiResponse(prompt: string): string {\r\n    if (prompt.includes('menu text')) {\r\n      return JSON.stringify({\r\n        categories: [\r\n          {\r\n            name: 'Burgers',\r\n            items: [\r\n              {\r\n                name: 'Classic Cheeseburger',\r\n                description: 'Beef patty with cheese, lettuce, tomato',\r\n                price: 12.99,\r\n                dietary_tags: [],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      });\r\n    } else if (prompt.includes('location information')) {\r\n      return JSON.stringify({\r\n        address: '123 Market St, San Francisco, CA 94105',\r\n        city: 'San Francisco',\r\n        state: 'CA',\r\n        coordinates: {\r\n          lat: 37.7749,\r\n          lng: -122.4194,\r\n        },\r\n        confidence: 0.95,\r\n      });\r\n    } else if (prompt.includes('operating hours')) {\r\n      return JSON.stringify({\r\n        monday: { open: '11:00', close: '15:00', closed: false },\r\n        tuesday: { open: '11:00', close: '15:00', closed: false },\r\n        wednesday: { open: '11:00', close: '15:00', closed: false },\r\n        thursday: { open: '11:00', close: '15:00', closed: false },\r\n        friday: { open: '11:00', close: '20:00', closed: false },\r\n        saturday: { open: '12:00', close: '20:00', closed: false },\r\n        sunday: { open: '12:00', close: '16:00', closed: false },\r\n      });\r\n    } else if (prompt.includes('sentiment')) {\r\n      return JSON.stringify({\r\n        sentiment: 'positive',\r\n        score: 0.85,\r\n        key_topics: ['food_quality', 'service'],\r\n        summary: 'Customer enjoyed the food and service',\r\n      });\r\n    }\r\n    return '{\"processed\": true}';\r\n  }\r\n\r\n  private canMakeRequest(): boolean {\r\n    return this.requestCount < this.dailyLimit.requests && this.tokenCount < this.dailyLimit.tokens;\r\n  }\r\n\r\n  private updateUsageCounters(requests: number, tokens: number): void {\r\n    this.requestCount += requests;\r\n    this.tokenCount += tokens;\r\n  }\r\n\r\n  getUsageStats(): {\r\n    requests: { used: number; limit: number; remaining: number };\r\n    tokens: { used: number; limit: number; remaining: number };\r\n  } {\r\n    return {\r\n      requests: {\r\n        used: this.requestCount,\r\n        limit: this.dailyLimit.requests,\r\n        remaining: this.dailyLimit.requests - this.requestCount,\r\n      },\r\n      tokens: {\r\n        used: this.tokenCount,\r\n        limit: this.dailyLimit.tokens,\r\n        remaining: this.dailyLimit.tokens - this.tokenCount,\r\n      },\r\n    };\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":58,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":58,"endColumn":23,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical logging IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-quality\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\helpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":334,"column":7,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":334,"endColumn":50,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[13701,13744],"text":"((status.supabase.authSettings?.googleEnabled) ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[13701,13744],"text":"((status.supabase.authSettings?.googleEnabled) === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":325,"column":59,"nodeType":null,"endLine":325,"endColumn":62,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[13503,13506],"text":"!="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { OAuthStatus } from './types';\r\nimport type { SupabaseClient } from '@supabase/supabase-js';\r\n\r\n/**\r\n * Handles a GET request to retrieve OAuth configuration status.\r\n * @example\r\n * handleGetRequest(request)\r\n * Returns a JSON response with OAuth status details and legacy format.\r\n * @param {NextRequest} _request - The incoming request object.\r\n * @returns {NextResponse} JSON response indicating the current OAuth status.\r\n * @description\r\n *   - Retrieves the current OAuth configuration status from the server.\r\n *   - Adapts the response to include both modern and legacy format details.\r\n *   - Provides a step-by-step legacy configuration guide if OAuth is not ready.\r\n */\r\nexport async function handleGetRequest(_request: NextRequest) {\r\n  const status = await getOAuthStatus();\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    ...status,\r\n    legacy_format: {\r\n      oauth_status: status.overall_status,\r\n      message: getStatusMessage(status.overall_status),\r\n      configuration_steps:\r\n        status.overall_status === 'ready'\r\n          ? undefined\r\n          : [\r\n              '1. Go to Supabase Dashboard > Authentication > Providers',\r\n              '2. Enable Google provider',\r\n              '3. Add Google OAuth Client ID and Secret',\r\n              '4. Configure redirect URLs',\r\n              '5. Test OAuth flow',\r\n            ],\r\n    },\r\n  });\r\n}\r\n\r\n// 1. Refactor nested template literals in generateOAuthTestUrl\r\nfunction generateOAuthTestUrl(baseUrl: string): string {\r\n  const redirectPath = `${baseUrl}/auth/callback`;\r\n  const encodedRedirect = encodeURIComponent(redirectPath);\r\n  return (\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL +\r\n    '/auth/v1/authorize?provider=google&redirect_to=' +\r\n    encodedRedirect\r\n  );\r\n}\r\n\r\n/**\r\n * Handles a post request to generate an OAuth test URL based on the environment.\r\n * @example\r\n * handlePostRequest()\r\n * {\r\n *   success: true,\r\n *   message: 'OAuth test URL generated',\r\n *   test_url: 'http://localhost:3000/...',\r\n *   environment: 'development',\r\n *   instructions: [ ... ],\r\n *   manual_test_steps: [ ... ],\r\n *   automation_commands: [ ... ]\r\n * }\r\n * @returns {object} An object containing success status, message, the test URL, the environment, instructions, manual test steps, and automation commands.\r\n * @description\r\n *   - Determines the base URL depending on whether the environment is production or development.\r\n *   - Utilizes `generateOAuthTestUrl` to construct the OAuth test URL.\r\n *   - Responds with JSON containing test instructions and automation commands for verifying OAuth functionality.\r\n */\r\nexport function handlePostRequest() {\r\n  // Removed _request parameter\r\n  const baseUrl =\r\n    process.env.NODE_ENV === 'production'\r\n      ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\r\n      : 'http://localhost:3000';\r\n\r\n  const testUrl = generateOAuthTestUrl(baseUrl);\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'OAuth test URL generated',\r\n    test_url: testUrl,\r\n    environment: process.env.NODE_ENV ?? 'development',\r\n    instructions: [\r\n      '1. Open the test_url in a new browser tab',\r\n      '2. Complete Google OAuth flow',\r\n      '3. Verify redirect to admin dashboard',\r\n      '4. Check for proper role assignment',\r\n    ],\r\n    manual_test_steps: [\r\n      'Navigate to /login page',\r\n      'Click Google login button',\r\n      'Complete OAuth flow',\r\n      'Verify admin access',\r\n    ],\r\n    automation_commands: [\r\n      'npm run oauth:verify - Check configuration',\r\n      'npm run oauth:test:dev - Test development flow',\r\n      'npm run oauth:test:prod - Test production flow',\r\n    ],\r\n  });\r\n}\r\n\r\n/**\r\n * Retrieves the current OAuth status including configuration and connectivity information.\r\n * @example\r\n * getOAuthStatus().then(status => {\r\n *   console.log(status);\r\n * });\r\n * // Output: OAuthStatus object with current configuration and connection status details\r\n * @returns {Promise<OAuthStatus>} An object representing the current status of OAuth configuration and connectivity.\r\n * @description\r\n *   - The function assesses the connectivity and configuration of Supabase and its authentication settings.\r\n *   - It checks if the necessary environment variables are set.\r\n *   - Executes a series of asynchronous checks to determine if the OAuth provider is properly configured.\r\n *   - Recommendations for improving the OAuth setup are generated based on the current status.\r\n */\r\nasync function getOAuthStatus(): Promise<OAuthStatus> {\r\n  const status: OAuthStatus = {\r\n    timestamp: new Date().toISOString(),\r\n    environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\r\n    supabase: {\r\n      connected: false,\r\n      projectId: 'zkwliyjjkdnigizidlln' as string,\r\n    },\r\n    environment_variables: {\r\n      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL !== undefined,\r\n      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY !== undefined,\r\n      supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY !== undefined,\r\n    },\r\n    oauth_flow: {\r\n      loginPageExists: true,\r\n      callbackRouteExists: true,\r\n      authProviderConfigured: false,\r\n    },\r\n    recommendations: [],\r\n    overall_status: 'not_configured',\r\n  };\r\n\r\n  await checkSupabaseConnection(status, supabase);\r\n  await checkSupabaseAuthSettings(status);\r\n  await testOAuthProvider(status, supabase);\r\n\r\n  status.recommendations = generateRecommendations(status);\r\n  status.overall_status = determineOverallStatus(status);\r\n\r\n  return status;\r\n}\r\n\r\n/**\r\n * Checks the connection status with Supabase and updates the `OAuthStatus`.\r\n * @example\r\n * checkSupabaseConnection(status, supabase)\r\n * // Updates the `status.supabase.connected` property based on connection success\r\n * @param {OAuthStatus} status - The current OAuthStatus object that tracks connection state and errors.\r\n * @param {SupabaseClient} supabase - The Supabase client instance used to interact with the database.\r\n * @returns {void} No explicit return value, operates directly on the `status` object.\r\n * @description\r\n *   - Attempts a query to the 'profiles' table to ensure Supabase connection.\r\n *   - Updates `status.supabase.connected` based on query success.\r\n *   - Captures and records detailed error messages in case of connection failure.\r\n */\r\nasync function checkSupabaseConnection(status: OAuthStatus, supabase: SupabaseClient) {\r\n  try {\r\n    const { error } = await supabase.from('profiles').select('count').limit(1);\r\n    if (error === null) {\r\n      status.supabase.connected = true;\r\n    } else {\r\n      status.supabase.error = error.message;\r\n    }\r\n  } catch (error: unknown) {\r\n    status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\r\n  }\r\n}\r\n\r\n/**\r\n * Checks and processes Supabase authentication settings.\r\n * @example\r\n * checkSupabaseAuthSettings(oAuthStatusInstance)\r\n * { supabase: { authSettings: { googleEnabled: true, signupEnabled: false, autoconfirm: true } } }\r\n * @param {OAuthStatus} status - An object that holds OAuth configuration status.\r\n * @returns {void} Modifies the passed status object with fetched authentication settings.\r\n * @description\r\n *   - The function fetches authentication settings from the Supabase URL defined in environment variables.\r\n *   - If Supabase settings are fetched successfully, it updates the OAuth status with authentication settings like Google integration, signup availability, and autoconfirm feature.\r\n *   - Provides a fallback log for cases where fetching settings require authentication.\r\n */\r\nasync function checkSupabaseAuthSettings(status: OAuthStatus) {\r\n  try {\r\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n    if (typeof supabaseUrl === 'string' && supabaseUrl.length > 0) {\r\n      // Explicit check for undefined and empty string\r\n      const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\r\n      if (settingsResponse.ok === true) {\r\n        const settings: {\r\n          external?: { google?: boolean };\r\n          disable_signup?: boolean;\r\n          autoconfirm?: boolean;\r\n        } = (await settingsResponse.json()) as {\r\n          external?: { google?: boolean };\r\n          disable_signup?: boolean;\r\n          autoconfirm?: boolean;\r\n        };\r\n        status.supabase.authSettings = {\r\n          googleEnabled: settings.external?.google ?? false,\r\n          signupEnabled: settings.disable_signup === false,\r\n          autoconfirm: settings.autoconfirm ?? false,\r\n        };\r\n        if (settings.external?.google !== undefined) {\r\n          // Explicit check for undefined\r\n          status.oauth_flow.authProviderConfigured = true;\r\n        }\r\n      }\r\n    }\r\n  } catch {\r\n    console.info('Auth settings endpoint requires authentication (normal)');\r\n  }\r\n}\r\n\r\n/**\r\n * Tests the configuration of an OAuth provider and updates the status based on the result.\r\n * @example\r\n * testOAuthProvider(status, supabase)\r\n * undefined\r\n * @param {OAuthStatus} status - An object representing the current OAuth status and configuration.\r\n * @param {SupabaseClient} supabase - The Supabase client instance used to interact with the authentication system.\r\n * @returns {void} Does not return any value.\r\n * @description\r\n *   - Utilizes Google as the OAuth provider for the sign-in attempt.\r\n *   - Redirects to a localhost callback URL to simulate the OAuth process.\r\n *   - Direct usage of the Supabase auth method to initiate OAuth process.\r\n *   - Handles exceptions without altering the control flow and logs them for informational purposes.\r\n */\r\nasync function testOAuthProvider(status: OAuthStatus, supabase: SupabaseClient) {\r\n  try {\r\n    const { error: oauthError } = await supabase.auth.signInWithOAuth({\r\n      provider: 'google',\r\n      options: {\r\n        redirectTo: 'http://localhost:3000/auth/callback',\r\n        skipBrowserRedirect: true,\r\n      },\r\n    });\r\n    if (oauthError !== null && oauthError.message !== 'Provider not found') {\r\n      // Explicitly check for oauthError existence\r\n      status.oauth_flow.authProviderConfigured = true;\r\n    }\r\n  } catch (error: unknown) {\r\n    console.info('OAuth provider test failed (may be normal):', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Generates a list of recommendations for OAuth configuration based on the current status.\r\n * @example\r\n * generateRecommendations(status)\r\n * ['❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable', ...]\r\n * @param {OAuthStatus} status - The current status of OAuth configuration and environment variables.\r\n * @returns {string[]} Array of recommendation messages to guide configuration setup.\r\n * @description\r\n *   - Checks for necessary environment variables and Supabase connectivity.\r\n *   - Provides guidance on enabling Google OAuth.\r\n *   - Suggests consulting documentation for further setup instructions.\r\n */\r\nfunction generateRecommendations(status: OAuthStatus): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  if (!status.environment_variables.supabaseUrl) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseAnonKey) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseServiceKey) {\r\n    recommendations.push('❌ Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\r\n  }\r\n\r\n  if (!status.supabase.connected) {\r\n    recommendations.push('❌ Fix Supabase connection issue');\r\n    if (typeof status.supabase.error === 'string' && status.supabase.error.length > 0) {\r\n      recommendations.push(`   Error: ${status.supabase.error}`);\r\n    }\r\n  }\r\n\r\n  if (status.supabase.authSettings?.googleEnabled === true) {\r\n    recommendations.push('✅ Google OAuth provider is enabled');\r\n  } else {\r\n    recommendations.push(\r\n      '🔧 Enable Google OAuth provider in Supabase Dashboard',\r\n      '   Go to: Authentication > Providers > Google',\r\n    );\r\n  }\r\n\r\n  if (status.overall_status === 'ready') {\r\n    recommendations.push('🎉 OAuth configuration is complete!', '✅ Test the login flow at /login');\r\n  }\r\n\r\n  if (recommendations.length > 1) {\r\n    recommendations.push(\r\n      '📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions',\r\n      '🔧 Run: npm run oauth:verify for automated checks',\r\n    );\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\n/**\r\n * Determines the overall OAuth status based on provided conditions.\r\n * @example\r\n * determineOverallStatus(status)\r\n * 'ready'\r\n * @param {OAuthStatus} status - The status object containing configuration details.\r\n * @returns {'ready' | 'partial' | 'not_configured' | 'error'} Overall status derived from the evaluations.\r\n * @description\r\n *   - Evaluates connectivity and configuration status from various parameters within the status object.\r\n *   - Prioritizes returning 'error' if Supabase connection fails or if an error is detected.\r\n *   - Checks completeness of environment variables before proceeding to other status evaluations.\r\n *   - Distinguishes between 'ready' and 'partial' based on specific OAuth settings.\r\n */\r\nfunction determineOverallStatus(\r\n  status: OAuthStatus,\r\n): 'ready' | 'partial' | 'not_configured' | 'error' {\r\n  // eslint-disable-next-line sonarjs/different-types-comparison\r\n  if (!status.supabase.connected || status.supabase.error !== null) {\r\n    return 'error';\r\n  }\r\n\r\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\r\n  if (!envVarsComplete) {\r\n    return 'not_configured';\r\n  }\r\n\r\n  if (status.supabase.authSettings?.googleEnabled && status.oauth_flow.authProviderConfigured) {\r\n    return 'ready';\r\n  }\r\n\r\n  if (status.supabase.connected && envVarsComplete) {\r\n    return 'partial';\r\n  }\r\n\r\n  return 'not_configured';\r\n}\r\n\r\n/**\r\n * Retrieves a human-readable message based on the OAuth configuration status.\r\n * @example\r\n * getStatusMessage('ready')\r\n * 'Google OAuth is fully configured and ready to use'\r\n * @param {string} status - The current status of the OAuth configuration.\r\n * @returns {string} A message explaining the OAuth configuration status.\r\n * @description\r\n *   - Handles several predefined status cases.\r\n *   - Provides feedback for both success and error states.\r\n *   - Returns a default message for unrecognized statuses.\r\n */\r\nfunction getStatusMessage(status: string): string {\r\n  switch (status) {\r\n    case 'ready': {\r\n      return 'Google OAuth is fully configured and ready to use';\r\n    }\r\n    case 'partial': {\r\n      return 'Basic configuration complete, OAuth provider needs setup';\r\n    }\r\n    case 'not_configured': {\r\n      return 'Google OAuth is not configured';\r\n    }\r\n    case 'error': {\r\n      return 'Configuration error detected';\r\n    }\r\n    default: {\r\n      return 'Unknown configuration status';\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":61,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":63,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":148,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":154,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":414,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":414,"endColumn":40,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for generating non-security-sensitive event IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FoodTruck' is defined but never used.","line":3,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":49},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":37,"column":24,"nodeType":null,"endLine":37,"endColumn":27,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[1654,1657],"text":"!="}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { ScrapingJobService, FoodTruckService } from '@/lib/supabase';\r\nimport { RealtimeMetrics, ScrapingJob, FoodTruck } from '@/lib/types';\r\n\r\nexport async function handleGetRequest(): Promise<NextResponse> {\r\n  const metrics = await getScrapingMetrics();\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: metrics,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n}\r\n\r\n/**\r\n * Retrieves real-time scraping metrics from the database.\r\n * @example\r\n * getScrapingMetrics().then(metrics => console.log(metrics))\r\n * // { scrapingJobs: {...}, dataQuality: {...}, systemHealth: {...} }\r\n * @returns {Promise<RealtimeMetrics>} A promise that resolves to an object containing scraping job metrics, data quality information, and system health stats.\r\n * @description\r\n *   - Fetches data from ScrapingJobService and FoodTruckService to compute metrics.\r\n *   - Placeholder values are used for averageScore and recentChanges in dataQuality.\r\n *   - Computes the number of jobs by their status: running, completed, failed, and pending.\r\n */\r\nasync function getScrapingMetrics(): Promise<RealtimeMetrics> {\r\n  // Fetch real scraping metrics from database\r\n  const [allJobsResult, recentTrucksResult] = await Promise.all([\r\n    ScrapingJobService.getAllJobs(100, 0), // Get last 100 jobs for metrics\r\n    FoodTruckService.getAllTrucks(1000, 0), // Get trucks for processing count\r\n  ]);\r\n\r\n  // Type guard for allJobsResult\r\n  const allJobs: ScrapingJob[] = Array.isArray(allJobsResult) ? allJobsResult : [];\r\n\r\n  const recentTrucks =\r\n    typeof recentTrucksResult === 'object' &&\r\n    recentTrucksResult !== null &&\r\n    'trucks' in recentTrucksResult &&\r\n    Array.isArray(recentTrucksResult.trucks)\r\n      ? recentTrucksResult\r\n      : { trucks: [], total: 0 };\r\n\r\n  const typedJobs = allJobs as Array<{\r\n    status?: string;\r\n    started_at?: string;\r\n    completed_at?: string;\r\n  }>;\r\n  const successfulRuns = typedJobs.filter((job) => job.status === 'completed').length;\r\n  const failedRuns = typedJobs.filter((job) => job.status === 'failed').length;\r\n\r\n  return {\r\n    scrapingJobs: {\r\n      active: typedJobs.filter((job) => job.status === 'running').length,\r\n      completed: successfulRuns,\r\n      failed: failedRuns,\r\n      pending: typedJobs.filter((job) => job.status === 'pending').length,\r\n    },\r\n    dataQuality: {\r\n      averageScore: 0, // Placeholder, actual calculation might be complex\r\n      totalTrucks: recentTrucks.total,\r\n      recentChanges: 0, // Placeholder\r\n    },\r\n    systemHealth: {\r\n      status: 'healthy',\r\n      uptime: process.uptime(),\r\n      lastUpdate: new Date().toISOString(),\r\n    },\r\n  };\r\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":110,"column":53,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":110,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4529,4538],"text":"(e.details != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4529,4538],"text":"(e.details ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4529,4538],"text":"(Boolean(e.details))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { autoScraper } from '@/lib/autoScraper';\r\nimport { scheduler } from '@/lib/scheduler';\r\nimport { logActivity } from '@/lib/activityLogger';\r\nimport { AutoScrapeResult } from './types';\r\n\r\n/**\r\n* Verifies the cron secret authorization header against a stored environment variable.\r\n* @example\r\n* verifyCronSecret(request)\r\n* NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\r\n* @param {NextRequest} request - The incoming request object containing headers.\r\n* @returns {NextResponse | null} Returns an error response if authorization fails or if the secret is not set.\r\n* @description\r\n*   - Logs an error message if the CRON_SECRET environment variable is not configured or is empty.\r\n*   - Logs unauthorized attempts, including the provided authorization header value.\r\n*   - Relies on the Bearer token scheme for authorization.\r\n*/\r\nfunction verifyCronSecret(request: NextRequest): NextResponse | null {\r\n  const authHeader = request.headers.get('authorization');\r\n  const cronSecret = process.env.CRON_SECRET;\r\n\r\n  if (cronSecret === undefined || cronSecret === '') {\r\n    console.error('CRON_SECRET not configured');\r\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\r\n  }\r\n\r\n  if (authHeader !== `Bearer ${cronSecret}`) {\r\n    console.error('Unauthorized cron attempt:', authHeader);\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction logAutoScrapeStart() {\r\n  console.info('Starting automated scraping job...');\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_started',\r\n    details: { timestamp: new Date().toISOString() },\r\n  });\r\n}\r\n\r\n/**\r\n * Logs the completion of an automated scraping job with pertinent details.\r\n * @example\r\n * logAutoScrapeCompletion(autoScrapeResult)\r\n * Automated scraping job completed successfully\r\n * @param {AutoScrapeResult} result - The result object containing details of the scraping job.\r\n * @returns {void} Does not return a value.\r\n * @description\r\n *   - Logs activity including the number of trucks processed and found, as well as any errors encountered.\r\n *   - Utilizes a standardized logActivity function to record job completion.\r\n *   - Converts the current timestamp to an ISO string format.\r\n *   - Provides a console message indicating successful job completion.\r\n */\r\nfunction logAutoScrapeCompletion(result: AutoScrapeResult) {\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_completed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      trucksProcessed: result.trucksProcessed,\r\n      newTrucksFound: result.newTrucksFound,\r\n      errorsCount: result.errors?.length ?? 0,\r\n    },\r\n  });\r\n  console.info('Automated scraping job completed successfully');\r\n}\r\n\r\nfunction logAutoScrapeFailure(error: unknown) {\r\n  console.error('Auto-scraping cron job failed:', error);\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_failed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Handles a POST request to initiate an auto-scraping process and returns the result.\r\n * @example\r\n * handlePostRequest(request)\r\n * { success: true, message: 'Auto-scraping completed successfully', data: { trucksProcessed: 10, newTrucksFound: 2, timestamp: '2023-08-23T18:25:43.511Z' } }\r\n * @param {NextRequest} request - The request object containing necessary parameters and headers for processing.\r\n * @returns {NextResponse} JSON response with either the success data or an error message.\r\n * @description\r\n *   - Validates request with a secret key before processing.\r\n *   - Logs scraping start and completion along with processed results.\r\n *   - Schedules follow-up tasks after successful scraping.\r\n *   - Catches and logs errors with a failure response in case of any exceptions during the process.\r\n */\r\nexport async function handlePostRequest(request: NextRequest) {\r\n  try {\r\n    const authResponse = verifyCronSecret(request);\r\n    if (authResponse) {\r\n      return authResponse;\r\n    }\r\n\r\n    logAutoScrapeStart();\r\n\r\n    const rawResult = await autoScraper.runAutoScraping();\r\n    // Map errors to string[] for compatibility\r\n    const result: AutoScrapeResult = {\r\n      trucksProcessed: rawResult.trucksProcessed,\r\n      newTrucksFound: rawResult.newTrucksFound,\r\n      errors: rawResult.errors?.map((e) => e.url + (e.details ? `: ${e.details}` : '')),\r\n    };\r\n    scheduler.scheduleFollowUpTasks(result);\r\n    logAutoScrapeCompletion(result);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Auto-scraping completed successfully',\r\n      data: {\r\n        trucksProcessed: result.trucksProcessed,\r\n        newTrucksFound: result.newTrucksFound,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    logAutoScrapeFailure(error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Auto-scraping failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport function handleGetRequest() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed. Use POST for cron jobs.' },\r\n    { status: 405 },\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\monitoring\\api-usage\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":172,"column":7,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":172,"endColumn":20,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for simulating task execution."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunnerHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\schemaMapper.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":8,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":8,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from '@/lib/types';\r\n\r\nexport function mapExtractedDataToTruckSchema(\r\n  extractedData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n  isDryRun: boolean,\r\n): FoodTruckSchema {\r\n  if (!extractedData || typeof extractedData !== 'object') {\r\n    throw new Error('Invalid extractedData for mapping.');\r\n  }\r\n\r\n  const name = extractedData.name ?? 'Unknown Test Truck';\r\n  const locationData = extractedData.current_location ?? {};\r\n  const fullAddress = [\r\n    locationData.address,\r\n    locationData.city,\r\n    locationData.state,\r\n    locationData.zip_code,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(', ');\r\n\r\n  return {\r\n    name: name,\r\n    description: extractedData.description ?? undefined,\r\n    current_location: {\r\n      lat: locationData.lat ?? 0,\r\n      lng: locationData.lng ?? 0,\r\n      address: fullAddress ?? locationData.raw_text ?? undefined,\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n    scheduled_locations: extractedData.scheduled_locations ?? undefined,\r\n    operating_hours: extractedData.operating_hours ?? undefined,\r\n    menu: (extractedData.menu ?? []).map((category: MenuCategory) => ({\r\n      name: category.name ?? 'Uncategorized',\r\n      items: (category.items ?? []).map((item: MenuItem) => ({\r\n        name: item.name ?? 'Unknown Item',\r\n        description: item.description ?? undefined,\r\n        price:\r\n          typeof item.price === 'number' || typeof item.price === 'string' ? item.price : undefined,\r\n        dietary_tags: item.dietary_tags ?? [],\r\n      })),\r\n    })),\r\n    contact_info: extractedData.contact_info ?? undefined,\r\n    social_media: extractedData.social_media ?? undefined,\r\n    cuisine_type: extractedData.cuisine_type ?? [],\r\n    price_range: extractedData.price_range ?? undefined,\r\n    specialties: extractedData.specialties ?? [],\r\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\r\n    verification_status: 'pending',\r\n    source_urls: [sourceUrl].filter(Boolean),\r\n    last_scraped_at: new Date().toISOString(),\r\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\stageHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\trucks\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\auth\\authHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":6,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":6,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[204,215],"text":"authHeader == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[205,215],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[204,215],"text":"!Boolean(authHeader)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/supabase';\r\n\r\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (!authHeader) return false;\r\n\r\n    const token = authHeader.replace('Bearer ', '');\r\n    const { data, error } = await supabase.auth.getUser(token);\r\n    const user = data?.user;\r\n\r\n    if (error || !user) return false;\r\n\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\batchCleanup.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":192,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":192,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":269,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":269,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":433,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":433,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":519,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":519,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Batch Data Cleanup System\r\n * Implements automated data quality improvements and cleanup operations\r\n */\r\n\r\nimport { FoodTruckService, type FoodTruck, DataQualityService } from '@/lib/supabase';\r\nimport { DuplicatePreventionService } from './duplicatePrevention';\r\nimport { getPlaceholderPatterns, processTruckForPlaceholders } from './placeholderUtils';\r\n\r\nexport interface CleanupOperation {\r\n  type:\r\n    | 'normalize_phone'\r\n    | 'fix_coordinates'\r\n    | 'remove_placeholders'\r\n    | 'update_quality_scores'\r\n    | 'merge_duplicates';\r\n  description: string;\r\n  affectedCount: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\nexport interface BatchCleanupResult {\r\n  totalProcessed: number;\r\n  operations: CleanupOperation[];\r\n  summary: {\r\n    trucksImproved: number;\r\n    duplicatesRemoved: number;\r\n    qualityScoreImprovement: number;\r\n    placeholdersRemoved: number;\r\n  };\r\n  duration: number;\r\n}\r\n\r\ninterface MergeOperationContext {\r\n  operation: CleanupOperation;\r\n  processedIds: Set<string>;\r\n}\r\n\r\ninterface CoordinateProcessContext {\r\n  defaultLat: number;\r\n  defaultLng: number;\r\n  dryRun: boolean;\r\n  operation: CleanupOperation;\r\n}\r\n\r\n/**\r\n * Automated Data Quality Cleanup Service\r\n */\r\nexport class BatchCleanupService {\r\n  /**\r\n   * Run comprehensive data cleanup operations\r\n   */\r\n  static async runFullCleanup(\r\n    options: {\r\n      batchSize?: number;\r\n      dryRun?: boolean;\r\n      operations?: CleanupOperation['type'][];\r\n    } = {},\r\n  ): Promise<BatchCleanupResult> {\r\n    const startTime = Date.now();\r\n    const {\r\n      batchSize = 50,\r\n      dryRun = false,\r\n      operations = [\r\n        'remove_placeholders',\r\n        'normalize_phone',\r\n        'fix_coordinates',\r\n        'update_quality_scores',\r\n        'merge_duplicates',\r\n      ],\r\n    } = options;\r\n\r\n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\r\n    const result = this.initializeCleanupResult();\r\n    try {\r\n      const allTrucks = await FoodTruckService.getAllTrucks();\r\n      result.totalProcessed = allTrucks.total;\r\n      await this.processTrucksInBatches(allTrucks.trucks, {\r\n        batchSize,\r\n        operations,\r\n        dryRun,\r\n        result,\r\n      });\r\n      return this.finalizeCleanupResult(result, startTime);\r\n    } catch (error) {\r\n      console.error('Batch cleanup failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Initializes and returns a new BatchCleanupResult object with default values.\r\n  * @example\r\n  * initializeCleanupResult()\r\n  * { totalProcessed: 0, operations: [], summary: { trucksImproved: 0, duplicatesRemoved: 0, qualityScoreImprovement: 0, placeholdersRemoved: 0 }, duration: 0 }\r\n  * @returns {BatchCleanupResult} A new BatchCleanupResult object with all properties set to initial default values.\r\n  */\r\n  private static initializeCleanupResult(): BatchCleanupResult {\r\n    return {\r\n      totalProcessed: 0,\r\n      operations: [],\r\n      summary: {\r\n        trucksImproved: 0,\r\n        duplicatesRemoved: 0,\r\n        qualityScoreImprovement: 0,\r\n        placeholdersRemoved: 0,\r\n      },\r\n      duration: 0,\r\n    };\r\n  }\r\n\r\n  private static finalizeCleanupResult(\r\n    result: BatchCleanupResult,\r\n    startTime: number,\r\n  ): BatchCleanupResult {\r\n    result.summary = this.calculateSummary(result.operations);\r\n    result.duration = Date.now() - startTime;\r\n\r\n    console.info(`Batch cleanup completed in ${result.duration}ms`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Processes food trucks in batches, executing specified operations on each batch.\r\n   * @example\r\n   * processTrucksInBatches(truckList, { batchSize: 10, operations: ['clean'], dryRun: true, result: batchResult })\r\n   * // It executes 'clean' operation on batches of 10 trucks without making permanent changes.\r\n   * @param {FoodTruck[]} trucks - Array of food trucks to be processed in batches.\r\n   * @param {object} options - Options object containing batchSize, operations, dryRun, and result.\r\n   * @param {number} options.batchSize - Number of trucks in each batch.\r\n   * @param {CleanupOperation['type'][]} options.operations - Array of operation types to be executed on each batch.\r\n   * @param {boolean} options.dryRun - If true, operations are executed in simulation mode without permanent changes.\r\n   * @param {BatchCleanupResult} options.result - Stores the results of operations performed on batches.\r\n   * @returns {Promise<void>} Completes processing batches without a return value.\r\n   * @description\r\n   *   - Uses async function to allow non-blocking execution of operations.\r\n   *   - Collects and stores results of batch operations separately, keeping track of each operation's outcome.\r\n   *   - Iterates over arrays using slicing to dynamically create batches for processing.\r\n   */\r\n  private static async processTrucksInBatches(\r\n    trucks: FoodTruck[],\r\n    {\r\n      batchSize,\r\n      operations,\r\n      dryRun,\r\n      result,\r\n    }: {\r\n      batchSize: number;\r\n      operations: CleanupOperation['type'][];\r\n      dryRun: boolean;\r\n      result: BatchCleanupResult;\r\n    },\r\n  ): Promise<void> {\r\n    for (let i = 0; i < trucks.length; i += batchSize) {\r\n      const batch = trucks.slice(i, i + batchSize);\r\n      for (const op of operations) {\r\n        const opResult = await this.runOperation(op, batch, dryRun);\r\n        result.operations.push(opResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run a specific cleanup operation\r\n   */\r\n  private static async runOperation(\r\n    type: CleanupOperation['type'],\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n  ): Promise<CleanupOperation> {\r\n    const operation: CleanupOperation = {\r\n      type,\r\n      description: this.getOperationDescription(type),\r\n      affectedCount: 0,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      errors: [],\r\n    };\r\n\r\n    const operationRunners = {\r\n      remove_placeholders: this.runRemovePlaceholders,\r\n      normalize_phone: this.runNormalizePhoneNumbers,\r\n      fix_coordinates: this.runFixCoordinates,\r\n      update_quality_scores: this.runUpdateQualityScores,\r\n      merge_duplicates: this.runMergeDuplicates,\r\n    };\r\n\r\n    try {\r\n      const runner = operationRunners[type];\r\n      if (runner) {\r\n        return await runner.call(this, trucks, dryRun, operation);\r\n      } \r\n        operation.errors.push(`Unknown operation type: ${String(type)}`);\r\n        return operation;\r\n      \r\n    } catch (error) {\r\n      operation.errors.push(\r\n        `Operation failed: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n      return operation;\r\n    }\r\n  }\r\n\r\n  private static runRemovePlaceholders = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.removePlaceholders(trucks, dryRun, operation);\r\n  };\r\n\r\n  private static runNormalizePhoneNumbers = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.normalizePhoneNumbers(trucks, dryRun, operation);\r\n  };\r\n\r\n  private static runFixCoordinates = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.fixCoordinates(trucks, dryRun, operation);\r\n  };\r\n\r\n  private static runUpdateQualityScores = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.updateQualityScores(trucks, dryRun, operation);\r\n  };\r\n\r\n  private static runMergeDuplicates = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.mergeDuplicates(trucks, dryRun, operation);\r\n  };\r\n\r\n  /**\r\n   * Remove placeholder and mock data\r\n   */\r\n  private static async removePlaceholders(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const placeholderPatterns = getPlaceholderPatterns();\r\n    const promises = trucks.map((truck) =>\r\n      this.processSingleTruckForPlaceholders(truck, placeholderPatterns, dryRun, operation),\r\n    );\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  private static async processSingleTruckForPlaceholders(\r\n    truck: FoodTruck,\r\n    patterns: RegExp[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    const updates = processTruckForPlaceholders(truck, patterns);\r\n    if (updates && Object.keys(updates).length > 0) {\r\n      await this.performUpdateOperation(truck.id, updates, dryRun, operation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform an update operation on a specified food truck.\r\n   * @example\r\n   * performUpdateOperation('truck123', { name: 'New Name' }, true, cleanupOperation)\r\n   * // No direct return value; operation may log errors.\r\n   * @param {string} truckId - The unique identifier of the food truck to be updated.\r\n   * @param {Partial<FoodTruck>} updates - An object containing the fields to be updated.\r\n   * @param {boolean} dryRun - Flag indicating whether the operation should be a simulation without actual changes.\r\n   * @param {CleanupOperation} operation - An operation object that logs errors encountered during update.\r\n   * @returns {Promise<void>} A promise that resolves when the update operation is complete.\r\n   * @description\r\n   *   - If 'dryRun' is true, no updates are applied but actions are logged.\r\n   *   - Errors during update are caught and logged in the 'operation.errors' array.\r\n   */\r\n  private static async performUpdateOperation(\r\n    truckId: string,\r\n    updates: Partial<FoodTruck>,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        await FoodTruckService.updateTruck(truckId, updates);\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to update truck ${truckId}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalize phone numbers to consistent format\r\n   */\r\n  private static async normalizePhoneNumbers(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const promises = trucks.map((truck) => {\r\n      if (truck.contact_info?.phone !== undefined) {\r\n        const originalPhone = truck.contact_info.phone;\r\n        const normalizedPhone = this.normalizePhone(originalPhone);\r\n\r\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\r\n          return this.applyPhoneNormalizationUpdate(truck, normalizedPhone, dryRun, operation);\r\n        }\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  /**\r\n   * Apply phone normalization update to a food truck's contact information.\r\n   * @example\r\n   * applyPhoneNormalizationUpdate(truckInstance, '+1234567890', false, operationInstance)\r\n   * // Normalizes and updates phone number of given truckInstance.\r\n   * @param {FoodTruck} truck - The food truck object whose phone number needs normalization.\r\n   * @param {string} normalizedPhone - The normalized phone number to update to the food truck's contact information.\r\n   * @param {boolean} dryRun - Flag indicating whether the operation is a dry run; updates are skipped if true.\r\n   * @param {CleanupOperation} operation - Object containing cleanup operation context including a record of errors.\r\n   * @returns {Promise<void>} Does not return a value, but potentially modifies the truck and operation objects.\r\n   * @description\r\n   *   - Executes the update operation only if `dryRun` is false.\r\n   *   - Pushes error messages to `operation.errors` on failure during the update process.\r\n   *   - Uses `FoodTruckService.updateTruck` for updating the contact information.\r\n   */\r\n  private static async applyPhoneNormalizationUpdate(\r\n    truck: FoodTruck,\r\n    normalizedPhone: string,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        await FoodTruckService.updateTruck(truck.id, {\r\n          contact_info: {\r\n            ...truck.contact_info,\r\n            phone: normalizedPhone,\r\n          },\r\n        });\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper to determine if coordinates need fixing and provide updates\r\n   */\r\n  private static getFixedCoordinates(\r\n    lat: number | undefined,\r\n    lng: number | undefined,\r\n    defaultLat: number,\r\n    defaultLng: number,\r\n  ): Partial<FoodTruck['current_location']> | undefined {\r\n    // Fix invalid coordinates (0,0 or undefined)\r\n    if (lat === undefined || lng === undefined || lat === 0 || lng === 0) {\r\n      return { lat: defaultLat, lng: defaultLng };\r\n    }\r\n    // Fix coordinates outside reasonable bounds for Charleston area\r\n    if (lat < 32 || lat > 34 || lng > -79 || lng < -81) {\r\n      return { lat: defaultLat, lng: defaultLng };\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Fix invalid GPS coordinates\r\n   */\r\n  private static async fixCoordinates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const context: Omit<CoordinateProcessContext, 'operation'> = {\r\n      defaultLat: 32.7767,\r\n      defaultLng: -79.9311,\r\n      dryRun,\r\n    };\r\n\r\n    const promises = trucks.map((truck) =>\r\n      this.processSingleTruckCoordinates(truck, { ...context, operation }),\r\n    );\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  /**\r\n   * Processes coordinates for a single food truck, applying any necessary fixes.\r\n   * @example\r\n   * processSingleTruckCoordinates(truck, context)\r\n   * // No return value, function completes silently\r\n   * @param {FoodTruck} truck - The food truck whose coordinates are to be processed.\r\n   * @param {CoordinateProcessContext} context - Contains configuration and operation context for processing coordinates.\r\n   * @returns {Promise<void>} Returns a promise that resolves when the processing and possible updates are complete.\r\n   * @description\r\n   *   - Skips processing if the truck's current location is not available.\r\n   *   - Retrieves updates for fixed coordinates based on truck's current and default locations.\r\n   *   - Applies updates conditionally based on context settings such as `dryRun` and `operation`.\r\n   */\r\n  private static async processSingleTruckCoordinates(\r\n    truck: FoodTruck,\r\n    context: CoordinateProcessContext,\r\n  ): Promise<void> {\r\n    if (!truck.current_location) return;\r\n    const { defaultLat, defaultLng, dryRun, operation } = context;\r\n    const { lat, lng } = truck.current_location;\r\n    const updates = this.getFixedCoordinates(lat, lng, defaultLat, defaultLng);\r\n    if (updates) {\r\n      await this.applyCoordinateFixUpdate(truck, updates, dryRun, operation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies coordinate updates for a food truck's current location.\r\n   * @example\r\n   * applyCoordinateFixUpdate(truck, { lat: 34.05, lng: -118.25 }, false, operation)\r\n   * // Updates the coordinates of the truck's location asynchronously.\r\n   * @param {FoodTruck} truck - The food truck object whose coordinates need correction.\r\n   * @param {Partial<FoodTruck['current_location']>} updates - The latitude and longitude updates to be applied.\r\n   * @param {boolean} dryRun - Flag to simulate the update without altering data.\r\n   * @param {CleanupOperation} operation - The cleanup operation instance used for error tracking.\r\n   * @returns {Promise<void>} Resolves when the coordinate update process is complete.\r\n   * @description\r\n   *   - Executes the update operation only if the dryRun flag is false.\r\n   *   - If the update fails, logs the error details into the operation's error array.\r\n   */\r\n  private static async applyCoordinateFixUpdate(\r\n    truck: FoodTruck,\r\n    updates: Partial<FoodTruck['current_location']>,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        await FoodTruckService.updateTruck(truck.id, {\r\n          current_location: {\r\n            ...truck.current_location,\r\n            ...updates,\r\n          },\r\n        });\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update quality scores for all trucks\r\n   */\r\n  private static async updateQualityScores(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const promises = trucks.map((truck) =>\r\n      this.processSingleTruckForQualityScore(truck, dryRun, operation),\r\n    );\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  /**\r\n  * Processes a single food truck for an updated quality score assessment.\r\n  * @example\r\n  * processSingleTruckForQualityScore(truckInstance, false, cleanupOperationInstance)\r\n  * // No return value\r\n  * @param {FoodTruck} truck - The food truck instance to assess and potentially update.\r\n  * @param {boolean} dryRun - Specifies whether this is a dry run (no actual data updates).\r\n  * @param {CleanupOperation} operation - The cleanup operation context for processing.\r\n  * @returns {Promise<void>} No return value; operation is performed asynchronously.\r\n  * @description\r\n  *   - Computes the quality score using data from DataQualityService.\r\n  *   - Updates the quality score only if the score changes significantly (>5% difference).\r\n  *   - Assumes `truck.data_quality_score` might be undefined, defaulting to 0.\r\n  *   - Handles asynchronous processing of the update application if conditions are met.\r\n  */\r\n  private static async processSingleTruckForQualityScore(\r\n    truck: FoodTruck,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    const qualityAssessment = DataQualityService.calculateQualityScore(truck);\r\n    if (qualityAssessment) {\r\n      const newScore = qualityAssessment.score;\r\n      const currentScore = truck.data_quality_score ?? 0;\r\n      // Only update if score changed significantly (>5% difference)\r\n      if (typeof newScore === 'number' && Math.abs(newScore - currentScore) > 0.05) {\r\n        await this.applyQualityScoreUpdate(truck, dryRun, operation);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the quality score of a specified food truck and handles errors during the update process.\r\n   * @example\r\n   * applyQualityScoreUpdate(foodTruckInstance, false, cleanupOperationInstance)\r\n   * void\r\n   * @param {FoodTruck} truck - The food truck for which the quality score will be updated.\r\n   * @param {boolean} dryRun - Flag indicating whether the function should perform the update or just simulate it.\r\n   * @param {CleanupOperation} operation - The cleanup operation containing possible error records.\r\n   * @returns {Promise<void>} Resolves with no value when the update completes. Errors are recorded in the `operation` if thrown.\r\n   * @description\r\n   *   - Throws an error if the quality score update fails.\r\n   *   - If `dryRun` is true, the function simulates the update without changing any data.\r\n   *   - Errors occurring during the update are appended to the `operation.errors` array.\r\n   */\r\n  private static async applyQualityScoreUpdate(\r\n    truck: FoodTruck,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        const updateResult = await DataQualityService.updateTruckQualityScore(truck.id);\r\n        if ('error' in updateResult) {\r\n          throw new Error(updateResult.error);\r\n        }\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Identify and merge duplicate trucks\r\n   */\r\n  private static async mergeDuplicates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const processedIds = new Set<string>();\r\n    for (const truck of trucks) {\r\n      await this.processSingleTruckForDuplicates(truck, dryRun, { operation, processedIds });\r\n    }\r\n    return operation;\r\n  }\r\n\r\n  /**\r\n   * Processes a single food truck to detect and handle duplicates in the dataset.\r\n   * @example\r\n   * processSingleTruckForDuplicates(foodTruck, true, mergeContext)\r\n   * // No return value. Performs operations as a side effect.\r\n   * @param {FoodTruck} truck - An instance of FoodTruck to process for duplicates.\r\n   * @param {boolean} dryRun - Flag indicating if the operation should be executed in dry run mode.\r\n   * @param {MergeOperationContext} context - Operational context that carries state and configurations for the merge operation.\r\n   * @returns {Promise<void>} Executes a set of operations for handling duplicate records, does not return any value.\r\n   * @description\r\n   *   - Ensures a food truck is only processed once by maintaining a set of processed IDs.\r\n   *   - Uses DuplicatePreventionService to assess whether the given truck is a duplicate.\r\n   *   - Applies a merge operation if a duplicate truck is confidently identified.\r\n   */\r\n  private static async processSingleTruckForDuplicates(\r\n    truck: FoodTruck,\r\n    dryRun: boolean,\r\n    context: MergeOperationContext,\r\n  ): Promise<void> {\r\n    const { processedIds } = context;\r\n    if (processedIds.has(truck.id)) return;\r\n\r\n    const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\r\n    if (\r\n      duplicateCheck.isDuplicate &&\r\n      duplicateCheck.bestMatch?.confidence === 'high' &&\r\n      duplicateCheck.bestMatch.recommendation === 'merge'\r\n    ) {\r\n      await this.applyMergeOperation(\r\n        truck,\r\n        duplicateCheck.bestMatch.existingTruck,\r\n        dryRun,\r\n        context,\r\n      );\r\n    }\r\n    processedIds.add(truck.id);\r\n  }\r\n\r\n  /**\r\n   * Applies a merge operation between two food trucks and updates the context.\r\n   * @example\r\n   * applyMergeOperation(truck, existingTruck, true, context)\r\n   * // Executes a dry run of the merge operation without affecting data\r\n   * @param {FoodTruck} truck - The food truck that is being merged.\r\n   * @param {FoodTruck} existingTruck - The existing food truck to merge with.\r\n   * @param {boolean} dryRun - Indicates if the merge operation should be simulated.\r\n   * @param {MergeOperationContext} context - Context containing details and state of the merge operation.\r\n   * @returns {Promise<void>} Promise representing the completion of the merge operation.\r\n   * @description\r\n   *   - Updates the list of processed IDs in the context upon successful merge.\r\n   *   - Throws and records an error if the merge operation fails.\r\n   *   - Utilizes the DuplicatePreventionService for performing the merge.\r\n   */\r\n  private static async applyMergeOperation(\r\n    truck: FoodTruck,\r\n    existingTruck: FoodTruck,\r\n    dryRun: boolean,\r\n    context: MergeOperationContext,\r\n  ): Promise<void> {\r\n    const { operation, processedIds } = context;\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        const mergeResult = await DuplicatePreventionService.mergeDuplicates(\r\n          truck.id,\r\n          existingTruck.id,\r\n        );\r\n        if ('error' in mergeResult) {\r\n          throw new Error(mergeResult.error);\r\n        }\r\n        processedIds.add(existingTruck.id);\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to merge duplicates ${truck.id} and ${existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalize phone number format\r\n   */\r\n  private static normalizePhone(phone: string): string | undefined {\r\n    if (!phone) return undefined;\r\n\r\n    // Remove all non-digit characters\r\n    const digits = phone.replaceAll(/\\D/g, '');\r\n\r\n    // Handle US phone numbers\r\n    if (digits.length === 10) {\r\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\r\n    }\r\n    if (digits.length === 11 && digits.startsWith('1')) {\r\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\r\n    }\r\n\r\n    // Return original if can't normalize\r\n    return phone;\r\n  }\r\n\r\n  /**\r\n   * Get operation description\r\n   */\r\n  private static getOperationDescription(type: CleanupOperation['type']): string {\r\n    const descriptions = {\r\n      remove_placeholders: 'Remove placeholder and mock data values',\r\n      normalize_phone: 'Normalize phone numbers to consistent format',\r\n      fix_coordinates: 'Fix invalid GPS coordinates',\r\n      update_quality_scores: 'Recalculate data quality scores',\r\n      merge_duplicates: 'Identify and merge duplicate truck entries',\r\n    };\r\n\r\n    return descriptions[type] ?? 'Unknown operation';\r\n  }\r\n\r\n  /**\r\n   * Calculate cleanup summary\r\n   */\r\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\r\n    return {\r\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\r\n      duplicatesRemoved: operations.find((op) => op.type === 'merge_duplicates')?.successCount ?? 0,\r\n      qualityScoreImprovement:\r\n        operations.find((op) => op.type === 'update_quality_scores')?.successCount ?? 0,\r\n      placeholdersRemoved:\r\n        operations.find((op) => op.type === 'remove_placeholders')?.successCount ?? 0,\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\duplicatePrevention.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":233,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":233,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7380,7392],"text":"(loc1.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7380,7392],"text":"(loc1.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7380,7392],"text":"(Boolean(loc1.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":233,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":233,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7396,7408],"text":"(loc2.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7396,7408],"text":"(loc2.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7396,7408],"text":"(Boolean(loc2.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/no-redundant-assignments","severity":2,"message":"Review this redundant assignment: \"j\" already holds the assigned value along all execution paths.","line":204,"column":20,"nodeType":"Literal","messageId":"reviewAssignment","endLine":204,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Duplicate Prevention System\r\n * Implements intelligent duplicate detection and prevention for food truck data\r\n */\r\n\r\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\r\n\r\n// Duplicate detection configuration\r\nexport const DUPLICATE_DETECTION_CONFIG = {\r\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\r\n  thresholds: {\r\n    name: 0.85, // High threshold for name matching\r\n    location: 0.9, // Very high threshold for location matching\r\n    phone: 1, // Exact match for phone numbers\r\n    website: 1, // Exact match for websites\r\n    overall: 0.8, // Overall similarity threshold\r\n  },\r\n\r\n  // Weight factors for different fields\r\n  weights: {\r\n    name: 0.4, // 40% weight for name similarity\r\n    location: 0.3, // 30% weight for location similarity\r\n    contact: 0.2, // 20% weight for contact info similarity\r\n    menu: 0.1, // 10% weight for menu similarity\r\n  },\r\n} as const;\r\n\r\nexport interface DuplicateMatch {\r\n  existingTruck: FoodTruck;\r\n  similarity: number;\r\n  matchedFields: string[];\r\n  confidence: 'high' | 'medium' | 'low';\r\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\r\n}\r\n\r\nexport interface DuplicateDetectionResult {\r\n  isDuplicate: boolean;\r\n  matches: DuplicateMatch[];\r\n  bestMatch?: DuplicateMatch;\r\n  action: 'create' | 'update' | 'merge' | 'manual_review';\r\n  reason: string;\r\n}\r\n\r\n/**\r\n * Advanced Duplicate Prevention Service\r\n */\r\nexport class DuplicatePreventionService {\r\n  /**\r\n   * Check if a food truck is a duplicate of existing trucks\r\n   */\r\n  static async checkForDuplicates(\r\n    candidateTruck: Partial<FoodTruck>,\r\n  ): Promise<DuplicateDetectionResult> {\r\n    try {\r\n      // Get all existing trucks for comparison\r\n      const existingTrucksResult = await FoodTruckService.getAllTrucks();\r\n\r\n      if ('error' in existingTrucksResult) {\r\n        console.error('Error fetching existing trucks:', existingTrucksResult.error);\r\n        return {\r\n          isDuplicate: false,\r\n          matches: [],\r\n          action: 'create',\r\n          reason: `Error fetching existing trucks: ${existingTrucksResult.error}`,\r\n        };\r\n      }\r\n\r\n      const existingTrucks = existingTrucksResult.trucks;\r\n      const matches: DuplicateMatch[] = [];\r\n\r\n      for (const existingTruck of existingTrucks) {\r\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\r\n\r\n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\r\n          matches.push({\r\n            existingTruck,\r\n            similarity: similarity.overall,\r\n            matchedFields: similarity.matchedFields,\r\n            confidence: this.getConfidenceLevel(similarity.overall),\r\n            recommendation: this.getRecommendation(similarity),\r\n          });\r\n        }\r\n      }\r\n\r\n      return this.processDuplicateMatches(matches, candidateTruck);\r\n    } catch (error) {\r\n      console.error('Error checking for duplicates:', error);\r\n      return {\r\n        isDuplicate: false,\r\n        matches: [],\r\n        action: 'create',\r\n        reason:\r\n          'An unexpected error occurred during duplicate detection - proceeding with creation',\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processes the matches found during duplicate detection and returns the result.\r\n   */\r\n  private static processDuplicateMatches(\r\n    matches: DuplicateMatch[],\r\n    candidateTruck: Partial<FoodTruck>,\r\n  ): DuplicateDetectionResult {\r\n    // Sort matches by similarity (highest first)\r\n    matches.sort((a, b) => b.similarity - a.similarity);\r\n\r\n    const bestMatch = matches.length > 0 ? matches[0] : undefined;\r\n    const isDuplicate = matches.length > 0;\r\n\r\n    return {\r\n      isDuplicate,\r\n      matches,\r\n      bestMatch,\r\n      action: this.determineAction(matches, candidateTruck),\r\n      reason: this.generateReason(matches, candidateTruck),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate similarity between two food trucks\r\n   */\r\n  private static calculateSimilarity(\r\n    candidate: Partial<FoodTruck>,\r\n    existing: FoodTruck,\r\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\r\n    const breakdown: Record<string, number> = {};\r\n    const matchedFields: string[] = [];\r\n\r\n    // Name similarity\r\n    const nameSimilarity = this.calculateStringSimilarity(\r\n      candidate.name ?? '',\r\n      existing.name ?? '',\r\n    );\r\n    breakdown.name = nameSimilarity;\r\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\r\n      matchedFields.push('name');\r\n    }\r\n\r\n    // Location similarity\r\n    const locationSimilarity = this.calculateLocationSimilarity(\r\n      candidate.current_location,\r\n      existing.current_location,\r\n    );\r\n    breakdown.location = locationSimilarity;\r\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\r\n      matchedFields.push('location');\r\n    }\r\n\r\n    // Contact similarity\r\n    const contactSimilarity = this.calculateContactSimilarity(\r\n      candidate.contact_info,\r\n      existing.contact_info,\r\n    );\r\n    breakdown.contact = contactSimilarity;\r\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\r\n      matchedFields.push('contact');\r\n    }\r\n\r\n    // Menu similarity (basic)\r\n    const menuSimilarity = this.calculateMenuSimilarity(candidate.menu, existing.menu);\r\n    breakdown.menu = menuSimilarity;\r\n    if (menuSimilarity > 0.7) {\r\n      matchedFields.push('menu');\r\n    }\r\n\r\n    // Calculate weighted overall similarity\r\n    const overall =\r\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\r\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\r\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\r\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu;\r\n\r\n    return { overall, matchedFields, breakdown };\r\n  }\r\n\r\n  /**\r\n   * Calculate string similarity using Levenshtein distance\r\n   */\r\n  private static calculateStringSimilarity(str1: string, str2: string): number {\r\n    if (!str1 || !str2) return 0;\r\n\r\n    // Normalize strings\r\n    const s1 = str1.toLowerCase().trim();\r\n    const s2 = str2.toLowerCase().trim();\r\n\r\n    if (s1 === s2) return 1;\r\n\r\n    // Calculate Levenshtein distance\r\n    const matrix: number[][] = [];\r\n    const len1 = s1.length;\r\n    const len2 = s2.length;\r\n\r\n    for (let i = 0; i <= len1; i+=1) {\r\n      matrix[i] = [i];\r\n    }\r\n\r\n    for (let j = 0; j <= len2; j+=1) {\r\n      matrix[0][j] = j;\r\n    }\r\n\r\n    for (let i = 1; i <= len1; i+=1) {\r\n      // eslint-disable-next-line sonarjs/no-redundant-assignments\r\n      for (let j = 1; j <= len2; j+=1) {\r\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j] + 1, // deletion\r\n          matrix[i][j - 1] + 1, // insertion\r\n          matrix[i - 1][j - 1] + cost, // substitution\r\n        );\r\n      }\r\n    }\r\n\r\n    const distance = matrix[len1][len2];\r\n    const maxLength = Math.max(len1, len2);\r\n\r\n    return maxLength === 0 ? 1 : 1 - distance / maxLength;\r\n  }\r\n\r\n  /**\r\n   * Calculate location similarity\r\n   */\r\n  private static calculateLocationSimilarity(\r\n    loc1: FoodTruck['current_location'] | undefined | null,\r\n    loc2: FoodTruck['current_location'] | undefined | null,\r\n  ): number {\r\n    if (!loc1 || !loc2) return 0;\r\n\r\n    let similarity = 0;\r\n    let factors = 0;\r\n\r\n    // Address similarity\r\n    if (loc1.address && loc2.address) {\r\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\r\n      factors+=1;\r\n    }\r\n\r\n    // GPS coordinate similarity (within 100 meters = high similarity)\r\n    if (loc1.lat && loc1.lng && loc2.lat && loc2.lng) {\r\n      const distance = this.calculateGPSDistance(loc1.lat, loc1.lng, loc2.lat, loc2.lng);\r\n\r\n      // Distance similarity (closer = higher similarity)\r\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - distance / 1); // 1km max\r\n      similarity += distanceSimilarity;\r\n      factors+=1;\r\n    }\r\n\r\n    return factors > 0 ? similarity / factors : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate GPS distance in kilometers\r\n   */\r\n  private static calculateGPSDistance(\r\n    lat1: number,\r\n    lng1: number,\r\n    lat2: number,\r\n    lng2: number,\r\n  ): number {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n    const dLng = ((lng2 - lng1) * Math.PI) / 180;\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos((lat1 * Math.PI) / 180) *\r\n        Math.cos((lat2 * Math.PI) / 180) *\r\n        Math.sin(dLng / 2) *\r\n        Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  }\r\n\r\n  /**\r\n   * Calculate contact similarity\r\n   */\r\n  private static calculateContactSimilarity(\r\n    contact1: FoodTruck['contact_info'] | undefined | null,\r\n    contact2: FoodTruck['contact_info'] | undefined | null,\r\n  ): number {\r\n    if (!contact1 || !contact2) return 0;\r\n\r\n    let matches = 0;\r\n    let total = 0;\r\n\r\n    // Phone number exact match\r\n    if (contact1.phone != undefined && contact2.phone != undefined) {\r\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\r\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\r\n      if (phone1 === phone2) matches+=1;\r\n      total+=1;\r\n    }\r\n\r\n    // Website exact match\r\n    if (contact1.website != undefined && contact2.website != undefined) {\r\n      const url1 = contact1.website\r\n        .toLowerCase()\r\n        .replace(/^https?:\\/\\//, '')\r\n        .replace(/\\/$/, '');\r\n      const url2 = contact2.website\r\n        .toLowerCase()\r\n        .replace(/^https?:\\/\\//, '')\r\n        .replace(/\\/$/, '');\r\n      if (url1 === url2) matches+=1;\r\n      total+=1;\r\n    }\r\n\r\n    // Email similarity\r\n    if (contact1.email != undefined && contact2.email != undefined) {\r\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches+=1;\r\n      total+=1;\r\n    }\r\n\r\n    return total > 0 ? matches / total : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate menu similarity (basic implementation)\r\n   */\r\n  private static calculateMenuSimilarity(\r\n    menu1: FoodTruck['menu'] | undefined | null,\r\n    menu2: FoodTruck['menu'] | undefined | null,\r\n  ): number {\r\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\r\n\r\n    // Simple category name matching\r\n    const categories1 = menu1\r\n      .map((cat) => (cat as { category?: string }).category?.toLowerCase() ?? '')\r\n      .filter(Boolean);\r\n    const categories2 = menu2\r\n      .map((cat) => (cat as { category?: string }).category?.toLowerCase() ?? '')\r\n      .filter(Boolean);\r\n\r\n    const commonCategories = categories1.filter((cat) => categories2.includes(cat));\r\n    const totalCategories = new Set([...categories1, ...categories2]).size;\r\n\r\n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\r\n  }\r\n\r\n  /**\r\n   * Get confidence level based on similarity score\r\n   */\r\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\r\n    if (similarity >= 0.95) return 'high';\r\n    if (similarity >= 0.85) return 'medium';\r\n    return 'low';\r\n  }\r\n\r\n  /**\r\n   * Get recommendation based on similarity analysis\r\n   */\r\n  private static getRecommendation(similarity: {\r\n    overall: number;\r\n    matchedFields: string[];\r\n  }): 'merge' | 'update' | 'skip' | 'manual_review' {\r\n    if (similarity.overall >= 0.95) return 'merge';\r\n    if (similarity.overall >= 0.9) return 'update';\r\n    if (similarity.overall >= 0.8) return 'manual_review';\r\n    return 'skip';\r\n  }\r\n\r\n  /**\r\n   * Determine action based on matches\r\n   */\r\n  private static determineAction(\r\n    matches: DuplicateMatch[],\r\n    _candidate: Partial<FoodTruck>,\r\n  ): 'create' | 'update' | 'merge' | 'manual_review' {\r\n    if (matches.length === 0) return 'create';\r\n\r\n    const bestMatch = matches[0];\r\n\r\n    if (bestMatch.confidence === 'high') {\r\n      const {recommendation} = bestMatch;\r\n      if (recommendation === 'merge' || recommendation === 'update') {\r\n        return recommendation;\r\n      }\r\n      return 'manual_review';\r\n    }\r\n\r\n    return 'manual_review';\r\n  }\r\n\r\n  /**\r\n   * Generate human-readable reason\r\n   */\r\n  private static generateReason(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): string {\r\n    if (matches.length === 0) {\r\n      return 'No duplicates found - safe to create new truck entry';\r\n    }\r\n\r\n    const bestMatch = matches[0];\r\n    const similarity = Math.round(bestMatch.similarity * 100);\r\n\r\n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\r\n  }\r\n\r\n  /**\r\n   * Merge duplicate truck data intelligently\r\n   */\r\n  static async mergeDuplicates(\r\n    targetId: string,\r\n    sourceId: string,\r\n  ): Promise<FoodTruck | { error: string }> {\r\n    const targetResult = await FoodTruckService.getTruckById(targetId);\r\n    const sourceResult = await FoodTruckService.getTruckById(sourceId);\r\n\r\n    if ('error' in targetResult) {\r\n      return {\r\n        error: `Failed to retrieve target truck with ID ${targetId}: ${targetResult.error}`,\r\n      };\r\n    }\r\n    if ('error' in sourceResult) {\r\n      return {\r\n        error: `Failed to retrieve source truck with ID ${sourceId}: ${sourceResult.error}`,\r\n      };\r\n    }\r\n\r\n    const target = targetResult;\r\n    const source = sourceResult;\r\n\r\n    // Merge logic: prefer non-null, more complete data\r\n    const mergedData: Partial<FoodTruck> = {\r\n      name: target.name ?? source.name,\r\n      description: target.description ?? source.description,\r\n      cuisine_type:\r\n        (target.cuisine_type?.length ?? 0) > 0 ? target.cuisine_type : source.cuisine_type,\r\n      price_range: target.price_range ?? source.price_range,\r\n      current_location: target.current_location ?? source.current_location,\r\n      contact_info: {\r\n        ...source.contact_info,\r\n        ...target.contact_info, // Target takes precedence\r\n      },\r\n      operating_hours: target.operating_hours ?? source.operating_hours,\r\n      menu: (target.menu?.length ?? 0) > 0 ? target.menu : source.menu,\r\n      social_media: {\r\n        ...source.social_media,\r\n        ...target.social_media,\r\n      },\r\n      source_urls: [...new Set([...(target.source_urls ?? []), ...(source.source_urls ?? [])])],\r\n      last_scraped_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Update target with merged data\r\n    const updatedTruckResult = await FoodTruckService.updateTruck(targetId, mergedData);\r\n\r\n    if ('error' in updatedTruckResult) {\r\n      return {\r\n        error: `Failed to update target truck with merged data: ${updatedTruckResult.error}`,\r\n      };\r\n    }\r\n\r\n    console.info(`Merged truck ${sourceId} into ${targetId}`);\r\n\r\n    return updatedTruckResult;\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\placeholderUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\discoveryEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\fallback\\supabaseFallback.tsx","messages":[{"ruleId":"sonarjs/use-type-alias","severity":2,"message":"Replace this union type with a type alias.","line":63,"column":22,"nodeType":null,"endLine":63,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":99,"column":15,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":99,"endColumn":19},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":109,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":109,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3352,3356],"text":"(Boolean(data))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":189,"column":29,"nodeType":null,"endLine":189,"endColumn":32,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[5716,5719],"text":"!="}}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":204,"column":29,"nodeType":null,"endLine":204,"endColumn":32,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[6313,6316],"text":"!="}}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":215,"column":29,"nodeType":null,"endLine":215,"endColumn":32,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[6706,6709],"text":"!="}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":219,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":219,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":241,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":241,"endColumn":44},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":314,"column":12,"nodeType":"Literal","messageId":"error","endLine":314,"endColumn":16,"suggestions":[{"messageId":"remove","fix":{"range":[9648,9652],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[9648,9652],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":341,"column":10,"nodeType":"Literal","messageId":"error","endLine":341,"endColumn":14,"suggestions":[{"messageId":"remove","fix":{"range":[10498,10502],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[10498,10502],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/fallback/supabaseFallback.new.tsx\r\n// This creates a resilient data layer that gracefully handles Supabase outages\r\n\r\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\r\nimport { Database } from '@/lib/database.types'; // Assuming this is your Supabase database types\r\n\r\n\r\n\r\nimport { FoodTruck } from '@/lib/types';\r\n\r\nfunction isFoodTruckData(obj: unknown): obj is FoodTruck {\r\n  return (\r\n    typeof obj === 'object' &&\r\n    obj !== null &&\r\n    'id' in obj &&\r\n    'name' in obj &&\r\n    'cuisine_type' in obj &&\r\n    'price_range' in obj\r\n  );\r\n}\r\n\r\ninterface CachedData {\r\n  readonly trucks: FoodTruck[];\r\n  readonly timestamp: number;\r\n  readonly lastSuccessfulUpdate: string;\r\n}\r\n\r\nfunction isCachedData(obj: unknown): obj is CachedData {\r\n  return (\r\n    typeof obj === 'object' &&\r\n    obj !== null &&\r\n    'trucks' in obj &&\r\n    Array.isArray((obj as CachedData).trucks) &&\r\n    'timestamp' in obj &&\r\n    'lastSuccessfulUpdate' in obj\r\n  );\r\n}\r\n\r\nclass SupabaseFallbackManager {\r\n  private readonly CACHE_KEY = 'food-trucks-cache';\r\n  private readonly TRUCK_CACHE_KEY_PREFIX = 'food-truck-';\r\n  private readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\r\n  private readonly supabase: SupabaseClient<Database>;\r\n\r\n  constructor() {\r\n    if (process.env.NEXT_PUBLIC_SUPABASE_URL === undefined || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY === undefined) {\r\n      throw new Error('Supabase URL and Anon Key are required!');\r\n    }\r\n    this.supabase = createClient<Database>(\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL,\r\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This is your main data fetching function that handles all the fallback logic\r\n   * Think of it as your \"smart\" data fetcher that adapts to different situations\r\n   */\r\n  public async getFoodTrucks(): Promise<{\r\n    readonly trucks: FoodTruck[];\r\n    readonly isFromCache: boolean;\r\n    readonly lastUpdate: string;\r\n    readonly status: 'fresh' | 'cached' | 'stale' | 'unavailable';\r\n  }> {\r\n    try {\r\n      // First, try to get fresh data from Supabase\r\n      const freshData = await this.fetchFromSupabase();\r\n\r\n      if (freshData.length > 0) {\r\n        // Success! Cache this data for future fallback use\r\n        this.cacheData(freshData);\r\n\r\n        return {\r\n          trucks: freshData,\r\n          isFromCache: false,\r\n          lastUpdate: 'Just now',\r\n          status: 'fresh'\r\n        };\r\n      }\r\n\r\n      // If we reach here, Supabase returned empty results\r\n      // This might mean no trucks are available, or there's a data issue\r\n      return await this.handleFallbackScenario();\r\n\r\n    } catch (error: unknown) {\r\n      // Supabase is definitely having issues - engage fallback mode\r\n      console.warn('Supabase unavailable, using fallback strategy:', error);\r\n      return await this.handleFallbackScenario();\r\n    }\r\n  }\r\n\r\n  public async getFoodTruckById(id: string): Promise<FoodTruck | undefined> {\r\n    const cachedTruck = this.getCachedTruck(id);\r\n    if (cachedTruck) {\r\n      return cachedTruck;\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await this.supabase\r\n        .from('food_trucks')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single();\r\n\r\n      if (error) {\r\n        throw new Error(`Supabase error: ${error.message}`);\r\n      }\r\n\r\n      if (data && isFoodTruckData(data)) {\r\n        this.cacheTruck(data);\r\n        return data;\r\n      }\r\n\r\n      return undefined;\r\n    } catch (error) {\r\n      console.warn(`Failed to fetch truck with id ${id} from Supabase, returning undefined.`, error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This handles the actual Supabase communication\r\n   * Separated so you can easily modify your existing query logic\r\n   */\r\n  private async fetchFromSupabase(): Promise<FoodTruck[]> {\r\n    // The key is to set a reasonable timeout so we don't wait forever\r\n    const { data, error } = await this.supabase\r\n      .from('food_trucks')\r\n      .select('*')\r\n      .abortSignal(AbortSignal.timeout(5000)); // 5 second timeout\r\n\r\n    if (error) {\r\n      throw new Error(`Supabase error: ${error.message}`);\r\n    }\r\n\r\n    // Ensure data is an array and cast it to FoodTruck[]\r\n    if (Array.isArray(data)) {\r\n      return data.filter((d): d is FoodTruck => isFoodTruckData(d));\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * This is where the magic happens - graceful degradation\r\n   * When Supabase fails, we still provide value to users\r\n   */\r\n  private handleFallbackScenario(): Promise<{\r\n    readonly trucks: FoodTruck[];\r\n    readonly isFromCache: boolean;\r\n    readonly lastUpdate: string;\r\n    readonly status: 'cached' | 'stale' | 'unavailable';\r\n  }> {\r\n    const cachedData = this.getCachedData();\r\n\r\n    if (cachedData !== undefined) {\r\n      const age = Date.now() - cachedData.timestamp;\r\n      const isStale = age > this.CACHE_DURATION;\r\n\r\n      return {\r\n        trucks: cachedData.trucks,\r\n        isFromCache: true,\r\n        lastUpdate: cachedData.lastSuccessfulUpdate,\r\n        status: isStale ? 'stale' : 'cached'\r\n      };\r\n    }\r\n\r\n    // No cached data available - this is the worst case scenario\r\n    return {\r\n      trucks: [],\r\n      isFromCache: false,\r\n      lastUpdate: 'Never',\r\n      status: 'unavailable'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Stores successful data fetches for later use\r\n   * This runs every time we successfully get data from Supabase\r\n   */\r\n  private cacheData(trucks: FoodTruck[]): void {\r\n    const cacheData: CachedData = {\r\n      trucks,\r\n      timestamp: Date.now(),\r\n      lastSuccessfulUpdate: new Date().toLocaleString()\r\n    };\r\n\r\n    try {\r\n      // In a browser environment, use localStorage\r\n      if (globalThis.window !== undefined) {\r\n        globalThis.window.localStorage.setItem(this.CACHE_KEY, JSON.stringify(cacheData));\r\n      }\r\n\r\n      // In a server environment, you might use a file or Redis\r\n      // For now, we'll just log that we would cache this data\r\n      console.info(`Cached ${trucks.length} trucks at ${cacheData.lastSuccessfulUpdate}`);\r\n    } catch (error: unknown) {\r\n      // Caching failed, but that's not critical - log and continue\r\n      console.warn('Failed to cache data:', error);\r\n    }\r\n  }\r\n\r\n  private cacheTruck(truck: FoodTruck): void {\r\n    try {\r\n      if (globalThis.window !== undefined) {\r\n        const cacheKey = `${this.TRUCK_CACHE_KEY_PREFIX}${truck.id}`;\r\n        globalThis.window.localStorage.setItem(cacheKey, JSON.stringify(truck));\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Failed to cache truck with id ${truck.id}:`, error);\r\n    }\r\n  }\r\n\r\n  private getCachedTruck(id: string): FoodTruck | undefined {\r\n    try {\r\n      if (globalThis.window !== undefined) {\r\n        const cacheKey = `${this.TRUCK_CACHE_KEY_PREFIX}${id}`;\r\n        const cached = globalThis.window.localStorage.getItem(cacheKey);\r\n        if (cached !== null) {\r\n          const parsed = JSON.parse(cached);\r\n          if (isFoodTruckData(parsed)) {\r\n            return parsed;\r\n          }\r\n        }\r\n      }\r\n      return undefined;\r\n    } catch (error) {\r\n      console.warn(`Failed to retrieve cached truck with id ${id}:`, error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves cached data when Supabase is unavailable\r\n   * This is your safety net\r\n   */\r\n  private getCachedData(): CachedData | undefined {\r\n    try {\r\n      if (globalThis.window != undefined) {\r\n        const cached = globalThis.window.localStorage.getItem(this.CACHE_KEY);\r\n        if (cached != undefined) {\r\n          const parsed = JSON.parse(cached);\r\n          if (isCachedData(parsed)) {\r\n            return parsed;\r\n          }\r\n        }\r\n      }\r\n      return undefined;\r\n    } catch (error: unknown) {\r\n      console.warn('Failed to retrieve cached data:', error);\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n\r\n// Usage in your components - this replaces your direct Supabase calls\r\nexport const supabaseFallback = new SupabaseFallbackManager();\r\n\r\n// Example React hook that uses the fallback system\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport function useFoodTrucks() {\r\n  const [trucks, setTrucks] = useState<FoodTruck[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [dataStatus, setDataStatus] = useState<{\r\n    readonly isFromCache: boolean;\r\n    readonly lastUpdate: string;\r\n    readonly status: 'fresh' | 'cached' | 'stale' | 'unavailable';\r\n  }>({\r\n    isFromCache: false,\r\n    lastUpdate: '',\r\n    status: 'fresh'\r\n  });\r\n\r\n  useEffect(() => {\r\n    const loadTrucks = async (): Promise<void> => {\r\n      try {\r\n        const result = await supabaseFallback.getFoodTrucks();\r\n        setTrucks(result.trucks);\r\n        setDataStatus({\r\n          isFromCache: result.isFromCache,\r\n          lastUpdate: result.lastUpdate,\r\n          status: result.status\r\n        });\r\n      } catch (error: unknown) {\r\n        console.error('Failed to load trucks:', error);\r\n        // Even this fails, we still want to show something\r\n        setDataStatus({\r\n          isFromCache: false,\r\n          lastUpdate: 'Error',\r\n          status: 'unavailable'\r\n        });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    void loadTrucks(); // Use void to explicitly ignore the Promise\r\n  }, []);\r\n\r\n  return { trucks, loading, dataStatus };\r\n}\r\n\r\n// Component that displays appropriate messages based on data status\r\nexport function DataStatusIndicator({\r\n  status,\r\n}: {\r\n  readonly status: {\r\n    isFromCache: boolean;\r\n    lastUpdate: string;\r\n    status: 'fresh' | 'cached' | 'stale' | 'unavailable';\r\n  };\r\n}) {\r\n  if (status.status === 'fresh') {\r\n    return null; // No need to show anything for fresh data\r\n  }\r\n\r\n  if (status.status === 'cached') {\r\n    return (\r\n      <div className=\"bg-blue-100 border border-blue-300 text-blue-800 px-4 py-2 rounded\">\r\n        Showing cached data from {status.lastUpdate}. Live data temporarily unavailable.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status.status === 'stale') {\r\n    return (\r\n      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 px-4 py-2 rounded\">\r\n        Showing older data from {status.lastUpdate}. We're working to restore live updates.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status.status === 'unavailable') {\r\n    return (\r\n      <div className=\"bg-red-100 border border-red-300 text-red-800 px-4 py-2 rounded\">\r\n        Service temporarily unavailable. Please check back in a few minutes.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\geminiApiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\promptTemplates.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":223,"column":3,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":223,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7319,7328],"text":"(sourceUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7319,7328],"text":"(sourceUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7319,7328],"text":"(Boolean(sourceUrl))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const PromptTemplates = {\r\n  menuProcessing: (rawMenuText: string) => `\r\nParse the following food truck menu text and return a structured JSON format.\r\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\r\n\r\nMenu text:\r\n${rawMenuText}\r\n\r\nExpected JSON format:\r\n[\r\n  {\r\n    \"category\": \"string\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"string\",\r\n        \"description\": \"string\",\r\n        \"price\": number,\r\n        \"dietary_tags\": [\"string\"]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nRules:\r\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\r\n- Include dietary restrictions and special tags\r\n- Group items into logical categories\r\n- If no clear categories, use \"Main Items\"\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  locationExtraction: (textInput: string) => `\r\nExtract location information from the following text and return structured data.\r\nLook for addresses, cross streets, landmarks, or location descriptions.\r\n\r\nText:\r\n${textInput}\r\n\r\nExpected JSON format:\r\n{\r\n  \"address\": \"string or undefined\",\r\n  \"city\": \"string or undefined\", \r\n  \"state\": \"string or undefined\",\r\n  \"zipCode\": \"string or undefined\",\r\n  \"coordinates\": {\"lat\": number, \"lng\": number} or undefined,\r\n  \"confidence\": number,\r\n  \"landmarks\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Set coordinates to undefined if not explicitly provided\r\n- Confidence should be 0.0 to 1.0 based on clarity\r\n- Include any mentioned landmarks or cross streets\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  operatingHours: (hoursText: string) => `\r\nParse the following operating hours text and return standardized format.\r\nConvert all times to 24-hour format and handle various input formats.\r\n\r\nHours text:\r\n${hoursText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n}\r\n\r\nRules:\r\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\r\n- If closed on a day, set \"closed\": true and omit open/close times\r\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\r\n- Default to reasonable hours if ambiguous\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  sentimentAnalysis: (reviewText: string) => `\r\nAnalyze the sentiment of this food truck review and extract key insights.\r\nFocus on food quality, service, value, and overall experience.\r\n\r\nReview text:\r\n${reviewText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"score\": number,\r\n  \"confidence\": number,\r\n  \"aspects\": {\r\n    \"food_quality\": number,\r\n    \"service\": number,\r\n    \"value\": number,\r\n    \"overall\": number\r\n  },\r\n  \"summary\": \"string\",\r\n  \"keywords\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Score should be 0.0 (very negative) to 1.0 (very positive)\r\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\r\n- Include specific aspects mentioned in the review\r\n- Summary should be 1-2 sentences max\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  dataEnhancement: (rawData: unknown) => `\r\nEnhance and standardize the following food truck data.\r\nFill in missing information where possible and improve data quality.\r\n\r\nRaw data:\r\n${JSON.stringify(rawData, undefined, 2)}\r\n\r\nExpected JSON format:\r\n{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"cuisine_type\": \"string\",\r\n  \"price_range\": \"$ | $$ | $$$ | $$$$\",\r\n  \"contact\": {\r\n    \"phone\": \"string\",\r\n    \"email\": \"string\",\r\n    \"website\": \"string\",\r\n    \"social_media\": {}\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string\",\r\n    \"city\": \"string\",\r\n    \"state\": \"string\",\r\n    \"coordinates\": {\"lat\": number, \"lng\": number}\r\n  },\r\n  \"operating_hours\": {},\r\n  \"menu_categories\": [\"string\"],\r\n  \"specialties\": [\"string\"],\r\n  \"dietary_options\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Preserve all original data while enhancing it\r\n- Standardize naming conventions\r\n- Infer cuisine type from menu items\r\n- Estimate price range from menu prices\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  foodTruckExtraction: (markdownContent: string, sourceUrl?: string) => {\r\n    const schema = `\r\nExpected JSON schema:\r\n{\r\n  \"name\": \"string (food truck name)\",\r\n  \"description\": \"string (brief description of the food truck)\",\r\n  \"cuisine_type\": \"string (type of cuisine served)\",\r\n  \"contact\": {\r\n    \"phone\": \"string (phone number if found)\",\r\n    \"email\": \"string (email if found)\", \r\n    \"website\": \"string (website URL if found)\",\r\n    \"social_media\": {\r\n      \"facebook\": \"string (Facebook URL if found)\",\r\n      \"instagram\": \"string (Instagram URL if found)\",\r\n      \"twitter\": \"string (Twitter URL if found)\"\r\n    }\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string (physical address if found)\",\r\n    \"city\": \"string (city name)\",\r\n    \"state\": \"string (state abbreviation)\",\r\n    \"coordinates\": {\r\n      \"lat\": \"number (latitude if found)\",\r\n      \"lng\": \"number (longitude if found)\"\r\n    }\r\n  },\r\n  \"operating_hours\": {\r\n    \"monday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"tuesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"wednesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"thursday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"friday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"saturday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"sunday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"}\r\n  },\r\n  \"menu\": [\r\n    {\r\n      \"category\": \"string (menu category)\",\r\n      \"items\": [\r\n        {\r\n          \"name\": \"string (item name)\",\r\n          \"description\": \"string (item description)\",\r\n          \"price\": \"number (price as number, not string)\",\r\n          \"dietary_tags\": [\"string (dietary restrictions/tags)\"]\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"specialties\": [\"string (signature dishes or specialties)\"],\r\n  \"dietary_options\": [\"string (dietary accommodations like vegan, gluten-free)\"],\r\n  \"price_range\": \"string ($ for under $10, $$ for $10-20, $$$ for $20-30, $$$$ for over $30)\"\r\n}\r\n`;\r\n\r\n    const instructions = `\r\nInstructions:\r\n- Extract as much information as possible from the provided content\r\n- If information is not available, use null for the field\r\n- For operating hours, use 24-hour format (e.g., \"14:30\" for 2:30 PM)\r\n- If a day is closed, set \"closed\": true and omit open/close times\r\n- For prices, extract numeric values only (e.g., 12.99, not \"$12.99\")\r\n- Be thorough in extracting menu items and their details\r\n- Look for social media links and contact information carefully\r\n- Return only the JSON object, no additional text or formatting\r\n`;\r\n\r\n    return `\r\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\r\n\r\nWebsite content:\r\n${markdownContent}\r\n\r\n${sourceUrl ? `Source URL: ${sourceUrl}` : ''}\r\n\r\n${schema}\r\n\r\n${instructions}\r\n`;\r\n  },\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\responseParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\usageLimits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\middleware\\middlewareHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[760,763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[760,763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":74,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":74,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2564,2580],"text":"redirectFromPath != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2564,2580],"text":"redirectFromPath ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2564,2580],"text":"Boolean(redirectFromPath)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { AuditLogger, SecurityEvent } from '@/lib/security/auditLogger';\r\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\r\n\r\ninterface RequestMetadata {\r\n  ip: string;\r\n  userAgent: string;\r\n  url: string;\r\n  method: string;\r\n}\r\n\r\ninterface SupabaseUser {\r\n  id: string;\r\n  email?: string;\r\n}\r\n\r\ninterface SupabaseProfile {\r\n  role?: string;\r\n}\r\n\r\ninterface LogAndRedirectParams {\r\n  req: NextRequest;\r\n  res: NextResponse;\r\n  requestMetadata: RequestMetadata;\r\n  reason: string;\r\n  userError?: { message?: string };\r\n}\r\n\r\ninterface LogSecurityEventParams {\r\n  event_type: SecurityEvent['event_type'];\r\n  ip_address: string;\r\n  user_agent: string;\r\n  details: Record<string, any>;\r\n  severity: SecurityEvent['severity'];\r\n  user_id?: string;\r\n  user_email?: string;\r\n}\r\n\r\ninterface LogSecurityEventAndRedirectParams {\r\n  req: NextRequest;\r\n  res: NextResponse;\r\n  logParams: LogSecurityEventParams;\r\n  redirectPath: string;\r\n  redirectFromPath?: string;\r\n}\r\n\r\n/**\r\n * Logs a security event and redirects the request to a specified path.\r\n * @example\r\n * logSecurityEventAndRedirect({ req, res, logParams, redirectPath, redirectFromPath })\r\n * NextResponse with redirect to the target path\r\n * @param {Object} params - The parameters for the function.\r\n * @param {Request} params.req - The original request object containing the URL to clone for redirection.\r\n * @param {Response} params._res - The original response object (unused in function, but part of expected parameters).\r\n * @param {Object} params.logParams - Parameters required by the AuditLogger to log the security event.\r\n * @param {string} params.redirectPath - The pathname where the request should be redirected.\r\n * @param {string} [params.redirectFromPath] - Optional pathname indicating where the redirect originated from.\r\n * @returns {NextResponse} A response that performs a redirect to the specified path.\r\n * @description\r\n *   - The function uses AuditLogger to record the security event.\r\n *   - It clones the current URL from the request to ensure original query parameters are preserved.\r\n *   - Redirect path can optionally include info on where the redirect originated via a search parameter.\r\n */\r\nasync function logSecurityEventAndRedirect({\r\n  req,\r\n  res: _res,\r\n  logParams,\r\n  redirectPath,\r\n  redirectFromPath,\r\n}: LogSecurityEventAndRedirectParams) {\r\n  await AuditLogger.logSecurityEvent(logParams);\r\n  const redirectUrl = req.nextUrl.clone();\r\n  redirectUrl.pathname = redirectPath;\r\n  if (redirectFromPath) {\r\n    redirectUrl.searchParams.set(`redirectedFrom`, redirectFromPath);\r\n  }\r\n  return NextResponse.redirect(redirectUrl);\r\n}\r\n\r\n/**\r\n * Logs a security event and redirects the user to the login page.\r\n * @example\r\n * logAndRedirect({\r\n *   req: requestObject, \r\n *   res: responseObject, \r\n *   requestMetadata: { ip: '192.168.1.1', userAgent: 'Mozilla/5.0', url: '/dashboard' }, \r\n *   reason: 'Session Expired', \r\n *   userError: new Error('User authentication failed')\r\n * })\r\n * // Redirects user to login page and logs the event\r\n * @param {Object} req - Express request object containing details of the incoming request.\r\n * @param {Object} res - Express response object used to send a response to the client.\r\n * @param {Object} requestMetadata - Metadata associated with the request, including IP and user agent.\r\n * @param {string} reason - The reason for redirect, generally describing why access was denied.\r\n * @param {Error} userError - Optional error object that provides additional context about the user error.\r\n * @returns {Promise<void>} Returns a promise that resolves once the security event is logged and redirect is completed.\r\n * @description\r\n *   - Utilizes a severity of 'warning' when logging security events.\r\n *   - Redirects users from the attempted URL to the login page.\r\n *   - Captures detailed information about the request including attempted URL and user agent.\r\n */\r\nasync function logAndRedirect({\r\n  req,\r\n  res,\r\n  requestMetadata,\r\n  reason,\r\n  userError,\r\n}: LogAndRedirectParams) {\r\n  return logSecurityEventAndRedirect({\r\n    req,\r\n    res,\r\n    logParams: {\r\n      event_type: 'permission_denied',\r\n      ip_address: requestMetadata.ip,\r\n      user_agent: requestMetadata.userAgent,\r\n      details: {\r\n        attempted_url: requestMetadata.url,\r\n        reason,\r\n        error: userError?.message,\r\n      },\r\n      severity: 'warning',\r\n    },\r\n    redirectPath: '/login',\r\n    redirectFromPath: req.nextUrl.pathname,\r\n  });\r\n}\r\n\r\ninterface LogAndRedirectDeniedParams {\r\n  req: NextRequest;\r\n  res: NextResponse;\r\n  requestMetadata: RequestMetadata;\r\n  user: SupabaseUser;\r\n  profile: SupabaseProfile | null;\r\n  profileQueryError?: { message?: string } | null; // Changed to allow null\r\n}\r\n\r\n/**\r\n * Logs a security event and redirects to an access-denied page.\r\n * @example\r\n * logAndRedirectDenied({\r\n *   req: requestObject,\r\n *   res: responseObject,\r\n *   requestMetadata: metadataObject,\r\n *   user: userObject,\r\n *   profile: profileObject,\r\n *   profileQueryError: errorObject\r\n * })\r\n * // Redirects user and logs the event with relevant details\r\n * @param {Object} params - Contains necessary parameters for the function.\r\n * @param {Object} params.req - The HTTP request object.\r\n * @param {Object} params.res - The HTTP response object.\r\n * @param {Object} params.requestMetadata - Metadata related to the request.\r\n * @param {Object} params.user - User information object.\r\n * @param {Object} params.profile - Profile object related to the user.\r\n * @param {Object} params.profileQueryError - Error object if querying profile fails.\r\n * @returns {Promise<void>} Returns a promise that resolves after logging and redirecting.\r\n * @description\r\n *   - Utilizes `logSecurityEventAndRedirect` to perform logging and redirect operations.\r\n *   - The function assumes a structure for the user object, expecting 'id' and 'email' properties.\r\n *   - Redirects to '/access-denied' path by default.\r\n *   - Sets event severity as 'error' when logging the security event.\r\n */\r\nasync function logAndRedirectDenied({\r\n  req,\r\n  res,\r\n  requestMetadata,\r\n  user,\r\n  profile,\r\n  profileQueryError,\r\n}: LogAndRedirectDeniedParams) {\r\n  return logSecurityEventAndRedirect({\r\n    req,\r\n    res,\r\n    logParams: {\r\n      event_type: 'permission_denied',\r\n      user_id: user.id,\r\n      user_email: user.email ?? undefined,\r\n      ip_address: requestMetadata.ip,\r\n      user_agent: requestMetadata.userAgent,\r\n      details: {\r\n        attempted_url: requestMetadata.url,\r\n        user_role: profile?.role ?? 'none',\r\n        reason: 'insufficient_privileges',\r\n        error: profileQueryError?.message,\r\n      },\r\n      severity: 'error',\r\n    },\r\n    redirectPath: '/access-denied',\r\n  });\r\n}\r\n\r\n/**\r\n * Protects admin routes by verifying user authentication and authorization.\r\n * @example\r\n * protectAdminRoutes(req, res, requestMetadata)\r\n * returns NextResponse or redirects depending on user authentication status.\r\n * @param {NextRequest} req - The incoming request object.\r\n * @param {NextResponse} res - The response object to send back to the client.\r\n * @param {RequestMetadata} requestMetadata - Metadata about the request for logging purposes.\r\n * @returns {NextResponse} Returns the response object or redirects to an error page.\r\n * @description\r\n *   - Fetches and verifies the user's session from Supabase.\r\n *   - Checks if the user is an admin based on the profile 'role' from the database.\r\n *   - Logs access attempts to the admin panel for auditing purposes.\r\n *   - Redirects to an appropriate error handler if the user isn't authenticated or authorized.\r\n */\r\nexport async function protectAdminRoutes(\r\n  req: NextRequest,\r\n  res: NextResponse,\r\n  requestMetadata: RequestMetadata,\r\n) {\r\n  const supabase = createSupabaseMiddlewareClient(req, res);\r\n  const { data, error: userError } = await supabase.auth.getUser();\r\n  const user = data?.user;\r\n\r\n  if (userError || !user) {\r\n    return logAndRedirect({\r\n      req,\r\n      res,\r\n      requestMetadata,\r\n      reason: 'no_session',\r\n      userError: userError ?? undefined,\r\n    });\r\n  }\r\n  // Explicitly type the result of the Supabase query\r\n  const { data: profile, error: profileQueryError } = (await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', user.id)\r\n    .single()) as { data: SupabaseProfile | null; error: { message?: string } | null };\r\n  if (profileQueryError || (profile && profile.role !== 'admin')) {\r\n    return logAndRedirectDenied({\r\n      req,\r\n      res,\r\n      requestMetadata,\r\n      user,\r\n      profile: profile ?? undefined,\r\n      profileQueryError: profileQueryError ?? undefined,\r\n    });\r\n  }\r\n  if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\r\n    await AuditLogger.logDataAccess({\r\n      userId: user.id,\r\n      userEmail: user.email ?? 'unknown',\r\n      resourceType: 'admin_panel',\r\n      resourceId: req.nextUrl.pathname,\r\n      action: req.method === 'GET' ? 'read' : 'admin_access',\r\n      request: {\r\n        ip: requestMetadata.ip,\r\n        userAgent: requestMetadata.userAgent,\r\n      },\r\n    });\r\n  }\r\n  return res;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\monitoring\\apiMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\bundleAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\databaseCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\webVitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\pipelineHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\scrapingProcessor.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":29,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1234,1262],"text":"((scrapeResult.data?.markdown) == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1235,1262],"text":"((scrapeResult.data?.markdown) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1234,1262],"text":"(!Boolean((scrapeResult.data?.markdown)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":110,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":110,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":145,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":145,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6496,6511],"text":"job.target_url == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6497,6511],"text":"(job.target_url ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6496,6511],"text":"!Boolean(job.target_url)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { ScrapingJobService } from '@/lib/supabase';\r\nimport { ExtractedFoodTruckDetails } from '../types';\r\nimport {\r\n  validateInputAndPrepare,\r\n  buildTruckDataSchema,\r\n  handleDuplicateCheck,\r\n  finalizeJobStatus,\r\n} from './pipelineHelpers';\r\n\r\n/**\r\n * Initiates web scraping for a specified food truck website.\r\n * @example\r\n * handleScraping(\"https://foodtruck.com\", \"job123\")\r\n * Returns data object with markdown content\r\n * @param {string} targetUrl - The URL of the food truck website to scrape.\r\n * @param {string} jobId - The unique identifier for the scraping job.\r\n * @returns {Object} An object containing the scraped data, including markdown content.\r\n * @description\r\n *   - Utilizes firecrawl library to perform web scraping.\r\n *   - Calls handleJobFailure if scraping is unsuccessful or markdown content is missing.\r\n *   - Logs the progress and success of the scraping process in the console.\r\n */\r\nasync function handleScraping(targetUrl: string, jobId: string) {\r\n  console.info(`Starting scrape for ${targetUrl}`);\r\n  const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(targetUrl);\r\n\r\n  if (!scrapeResult.success || !scrapeResult.data?.markdown) {\r\n    const error = scrapeResult.error ?? 'Scraping failed or markdown content not found';\r\n    await handleJobFailure(jobId, error);\r\n    throw new Error(error);\r\n  }\r\n\r\n  console.info(`Scraping successful for ${targetUrl}, proceeding to Gemini extraction.`);\r\n  return scrapeResult.data;\r\n}\r\n\r\n/**\r\n * Handles the extraction of food truck details using Gemini and manages job failures.\r\n * @example\r\n * handleGeminiExtraction(\"sample_markdown\", \"http://example.com\", \"12345\")\r\n * { name: \"Sample Food Truck\", location: \"123 Main St.\" }\r\n * @param {string} markdown - The Markdown content containing food truck details.\r\n * @param {string} sourceUrl - The URL of the source from which details are extracted.\r\n * @param {string} jobId - The identifier for the job being processed.\r\n * @returns {Object} The extracted food truck details if successful.\r\n * @description\r\n *   - Utilizes Gemini to extract data from the provided Markdown content.\r\n *   - Handles failure scenarios by logging errors and updating job status.\r\n *   - Throws an error when extraction is unsuccessful.\r\n */\r\nasync function handleGeminiExtraction(markdown: string, sourceUrl: string, jobId: string) {\r\n  const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(markdown, sourceUrl);\r\n\r\n  if (!geminiResult.success || !geminiResult.data) {\r\n    const error = geminiResult.error ?? 'Gemini data extraction failed';\r\n    await handleJobFailure(jobId, error);\r\n    throw new Error(error);\r\n  }\r\n\r\n  console.info(`Gemini extraction successful for ${sourceUrl}.`);\r\n  return geminiResult.data;\r\n}\r\n\r\n/**\r\n* Handles the failure of a job by updating its status.\r\n* @example\r\n* handleJobFailure('job1234', 'Timeout error')\r\n* // Output: Logs an error message and updates the job status.\r\n* @param {string} jobId - The unique identifier of the job that failed.\r\n* @param {string} error - The error message describing the reason for failure.\r\n* @returns {Promise<void>} Resolves successfully once the job status is updated.\r\n* @description\r\n*   - Logs the error to the console for debugging purposes.\r\n*   - Checks if the current job status is not already 'failed' before updating.\r\n*   - Updates the job status to 'failed' if applicable, capturing any errors encountered.\r\n*   - Manages any errors that arise during the status update attempt.\r\n*/\r\nasync function handleJobFailure(jobId: string, error: string) {\r\n  console.error(`Job ${jobId} failed:`, error);\r\n  try {\r\n    const currentJob = await ScrapingJobService.getJobsByStatus('all').then((jobs) =>\r\n      jobs.find((j) => j.id === jobId),\r\n    );\r\n    if (currentJob && currentJob.status !== 'failed') {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', { errors: [error] });\r\n    }\r\n  } catch (statusUpdateError) {\r\n    console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\r\n  }\r\n}\r\n\r\n/**\r\n * Manages retry logic for a scraping job based on its current retry count.\r\n * @example\r\n * handleRetryLogic(\"job123\")\r\n * undefined\r\n * @param {string} jobId - The unique identifier for the scraping job.\r\n * @returns {Promise<void>} Does not return a value but handles retries or logs errors.\r\n * @description\r\n *   - Utilizes ScrapingJobService to increment the retry count for the given job.\r\n *   - Determines whether to retry the job based on retry_count and max_retries properties.\r\n *   - Logs messages to inform about retry attempts or if max retries have been reached.\r\n *   - Catches and logs errors encountered during the retry process.\r\n */\r\nasync function handleRetryLogic(jobId: string) {\r\n  try {\r\n    const job = await ScrapingJobService.incrementRetryCount(jobId);\r\n    if (job && typeof job.retry_count === 'number' && typeof job.max_retries === 'number') {\r\n      if (job.retry_count < job.max_retries) {\r\n        console.info(`Retrying job ${jobId} (attempt ${job.retry_count}/${job.max_retries})`);\r\n        setTimeout(() => {\r\n          void processScrapingJob(jobId);\r\n        }, 5000);\r\n      } else {\r\n        console.warn(`Job ${jobId} reached max retries (${job.max_retries}).`);\r\n      }\r\n    } else {\r\n      console.error(\r\n        `Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`,\r\n      );\r\n    }\r\n  } catch (retryError) {\r\n    console.error(`Error during retry logic for job ${jobId}:`, retryError);\r\n  }\r\n}\r\n\r\n/**\r\n * Processes a scraping job by managing its lifecycle and data extraction.\r\n * @example\r\n * processScrapingJob('12345')\r\n * // Scraping job 12345 completed successfully and data processed.\r\n * @param {string} jobId - The unique identifier for the scraping job.\r\n * @returns {Promise<void>} Resolves when the job is completed or retried.\r\n * @description\r\n *   - Updates the scraping job status to 'running' at the beginning and 'completed' at the end of the process.\r\n *   - Performs data scraping and extraction using job's target URL.\r\n *   - Handles scenarios where a target URL is not specified, resulting in an error.\r\n *   - Implements retry logic in case of failure during the job processing.\r\n */\r\nexport async function processScrapingJob(jobId: string): Promise<void> {\r\n  try {\r\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\r\n    if (!job.target_url) {\r\n      throw new Error('No target URL specified');\r\n    }\r\n\r\n    const scrapeData = await handleScraping(job.target_url, jobId);\r\n    const extractedData = await handleGeminiExtraction(\r\n      scrapeData.markdown,\r\n      scrapeData.source_url ?? job.target_url,\r\n      jobId,\r\n    );\r\n\r\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\r\n      data_collected: extractedData as unknown as Record<string, unknown>,\r\n      completed_at: new Date().toISOString(),\r\n    });\r\n\r\n    await createOrUpdateFoodTruck(jobId, extractedData, scrapeData.source_url ?? job.target_url);\r\n\r\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\r\n  } catch {\r\n    await handleRetryLogic(jobId);\r\n  }\r\n}\r\n\r\n/**\r\n* Creates or updates a food truck entry based on extracted data and handles job processing.\r\n* @example\r\n* createOrUpdateFoodTruck('123abc', extractedTruckData, 'http://example.com')\r\n* undefined\r\n* @param {string} jobId - Unique identifier for the job being processed.\r\n* @param {ExtractedFoodTruckDetails} extractedTruckData - Object containing details about the food truck extracted from a source.\r\n* @param {string} sourceUrl - The URL from which the food truck data was extracted.\r\n* @returns {Promise<void>} Resolves when processing is complete; returns nothing explicitly.\r\n* @description\r\n*   - Validates the input data before proceeding with creation or update.\r\n*   - Applies a duplicate check mechanism to avoid redundant entries.\r\n*   - Finalizes the job status, ensuring proper completion or failure handling.\r\n*   - Logs error details for troubleshooting job processing issues.\r\n*/\r\nexport async function createOrUpdateFoodTruck(\r\n  jobId: string,\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n) {\r\n  try {\r\n    const validation = await validateInputAndPrepare(jobId, extractedTruckData, sourceUrl);\r\n    if (!validation.isValid) {\r\n      return;\r\n    }\r\n\r\n    const truckData = buildTruckDataSchema(extractedTruckData, sourceUrl, validation.name);\r\n    const truck = await handleDuplicateCheck(jobId, truckData, validation.name);\r\n    await finalizeJobStatus(jobId, truck, sourceUrl);\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n    console.error(\r\n      `Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`,\r\n      error,\r\n    );\r\n    await handleJobFailure(jobId, `Food truck data processing/saving failed: ${errorMessage}`);\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\auditLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\rateLimiter.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":288,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":288,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8233,8250],"text":"result.retryAfter != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8233,8250],"text":"result.retryAfter ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8233,8250],"text":"Boolean(result.retryAfter)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Rate Limiting Implementation\r\n * Prevents brute force attacks and API abuse with intelligent rate limiting\r\n */\r\n\r\nimport { NextResponse } from 'next/server'; // Added import for NextResponse\r\n\r\ninterface RateLimitEntry {\r\n  count: number;\r\n  resetTime: number;\r\n  blocked: boolean;\r\n  blockUntil?: number;\r\n}\r\n\r\n// In-memory rate limit store (in production, use Redis)\r\nconst rateLimitStore = new Map<string, RateLimitEntry>();\r\n\r\n// Rate limit configurations for different endpoints\r\nexport const RATE_LIMIT_CONFIGS = {\r\n  // Authentication endpoints - strict limits\r\n  auth: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    maxRequests: 5, // 5 attempts per 15 minutes\r\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\r\n    skipSuccessfulRequests: true,\r\n  },\r\n  // API endpoints - moderate limits\r\n  api: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 60, // 60 requests per minute\r\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\r\n    skipSuccessfulRequests: false,\r\n  },\r\n  // Admin endpoints - very strict limits\r\n  admin: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 20, // 20 requests per minute\r\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\r\n    skipSuccessfulRequests: false,\r\n  },\r\n} as const;\r\n\r\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\r\n\r\n/**\r\n * Rate Limiter Service\r\n */\r\nexport class RateLimiter {\r\n  // Extract logic from checkRateLimit to reduce function size\r\n  private static isBlocked(entry: RateLimitEntry | undefined, now: number): boolean {\r\n    return Boolean(\r\n      entry && entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil,\r\n    );\r\n  }\r\n\r\n  private static resetEntry(\r\n    entry: RateLimitEntry,\r\n    now: number,\r\n    config: (typeof RATE_LIMIT_CONFIGS)[RateLimitType],\r\n  ): void {\r\n    entry.count = 0;\r\n    entry.resetTime = now + config.windowMs;\r\n    entry.blocked = false;\r\n    entry.blockUntil = undefined;\r\n  }\r\n\r\n  /**\r\n   * Check if request should be rate limited\r\n   */\r\n  static checkRateLimit(\r\n    identifier: string,\r\n    type: RateLimitType = 'api',\r\n  ): {\r\n    allowed: boolean;\r\n    remaining: number;\r\n    resetTime: number;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    this.cleanupExpiredEntries();\r\n    let entry = rateLimitStore.get(key);\r\n    if (!entry) {\r\n      entry = { count: 0, resetTime: now + config.windowMs, blocked: false };\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n    if (this.isBlocked(entry, now)) {\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil((entry.blockUntil! - now) / 1000),\r\n      };\r\n    }\r\n    if (now >= entry.resetTime) {\r\n      this.resetEntry(entry, now, config);\r\n    }\r\n    if (entry.count >= config.maxRequests) {\r\n      entry.blocked = true;\r\n      entry.blockUntil = now + config.blockDurationMs;\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil(config.blockDurationMs / 1000),\r\n      };\r\n    }\r\n    entry.count += 1;\r\n    rateLimitStore.set(key, entry);\r\n    return {\r\n      allowed: true,\r\n      remaining: config.maxRequests - entry.count,\r\n      resetTime: entry.resetTime,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Record successful request (for auth endpoints)\r\n   */\r\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    if (!config.skipSuccessfulRequests) return;\r\n\r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n\r\n    if (entry) {\r\n      // Reset counter on successful auth\r\n      entry.count = 0;\r\n      entry.blocked = false;\r\n      entry.blockUntil = undefined;\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get rate limit status without incrementing\r\n   */\r\n  static getStatus(\r\n    identifier: string,\r\n    type: RateLimitType = 'api',\r\n  ): {\r\n    remaining: number;\r\n    resetTime: number;\r\n    blocked: boolean;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n\r\n    if (!entry) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false,\r\n      };\r\n    }\r\n\r\n    // Check if blocked\r\n    if (entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil) {\r\n      // Changed != undefined to != null\r\n      return {\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        blocked: true,\r\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000),\r\n      };\r\n    }\r\n\r\n    // Check if window expired\r\n    if (now >= entry.resetTime) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false,\r\n      };\r\n    }\r\n\r\n    return {\r\n      remaining: Math.max(0, config.maxRequests - entry.count),\r\n      resetTime: entry.resetTime,\r\n      blocked: false,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clean up expired entries to prevent memory leaks\r\n   */\r\n  private static cleanupExpiredEntries(): void {\r\n    const now = Date.now();\r\n\r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      // Remove entries that are expired and not blocked\r\n      if (\r\n        now >= entry.resetTime &&\r\n        (!entry.blocked || entry.blockUntil == undefined || now >= entry.blockUntil)\r\n      ) {\r\n        // Changed == undefined to == null\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all rate limit data for an identifier\r\n   */\r\n  static clearLimits(identifier: string, type?: RateLimitType): void {\r\n    if (type) {\r\n      const key = `${type}:${identifier}`;\r\n      rateLimitStore.delete(key);\r\n    } else {\r\n      // Clear all types for this identifier\r\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS) as RateLimitType[]) {\r\n        // Added type assertion\r\n        const key = `${limitType}:${identifier}`;\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get rate limit statistics\r\n   */\r\n  static getStats(): {\r\n    totalEntries: number;\r\n    blockedEntries: number;\r\n    entriesByType: Record<string, number>;\r\n  } {\r\n    const stats = {\r\n      totalEntries: rateLimitStore.size,\r\n      blockedEntries: 0,\r\n      entriesByType: {} as Record<string, number>,\r\n    };\r\n\r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      const type = key.split(':')[0];\r\n      stats.entriesByType[type] = (stats.entriesByType[type] ?? 0) + 1;\r\n\r\n      if (entry.blocked) {\r\n        stats.blockedEntries += 1;\r\n      }\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility function to get client identifier from request\r\n */\r\nexport function getClientIdentifier(request: Request): string {\r\n  // Try to get IP address from various headers\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIp = request.headers.get('x-real-ip');\r\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\r\n\r\n  // Use the first available IP\r\n  const ip = forwarded?.split(',')[0]?.trim() ?? realIp ?? cfConnectingIp ?? 'unknown';\r\n\r\n  // Include user agent for more specific identification\r\n  const userAgent = request.headers.get('user-agent') ?? 'unknown';\r\n\r\n  // Create a hash of IP + User Agent for better identification\r\n  return `${ip}:${userAgent.slice(0, 50)}`;\r\n}\r\n\r\n/**\r\n * Rate limiting middleware for API routes\r\n */\r\nexport function withRateLimit(\r\n  handler: (request: Request) => Promise<Response>,\r\n  type: RateLimitType = 'api',\r\n) {\r\n  return async (request: Request): Promise<Response> => {\r\n    const identifier = getClientIdentifier(request);\r\n    const result = RateLimiter.checkRateLimit(identifier, type);\r\n\r\n    if (result.allowed === false) {\r\n      const headers = new Headers({\r\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\r\n        'X-RateLimit-Remaining': '0',\r\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\r\n      });\r\n\r\n      if (result.retryAfter) {\r\n        headers.set('Retry-After', result.retryAfter.toString());\r\n      }\r\n\r\n      return new NextResponse('Too Many Requests', { status: 429, headers });\r\n    }\r\n\r\n    const response = await handler(request);\r\n\r\n    // Update headers on successful requests if not skipped\r\n    if (RATE_LIMIT_CONFIGS[type].skipSuccessfulRequests === false) {\r\n      const status = RateLimiter.getStatus(identifier, type);\r\n      response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\r\n      response.headers.set('X-RateLimit-Remaining', status.remaining.toString());\r\n      response.headers.set('X-RateLimit-Reset', new Date(status.resetTime).toISOString());\r\n    }\r\n\r\n    return response;\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":12,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":12,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[346,365],"text":"supabaseServiceKey == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[347,365],"text":"(supabaseServiceKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[346,365],"text":"!Boolean(supabaseServiceKey)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":107,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":107,"endColumn":43},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'(): PostgrestTransformBuilder<any, any, RawMenuItemFromDB[], \"menu_items\", unknown>' is deprecated.","line":143,"column":14,"nodeType":null,"messageId":"deprecation","endLine":143,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":168,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":168,"endColumn":16},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'(): PostgrestTransformBuilder<any, any, RawMenuItemFromDB[], \"menu_items\", unknown>' is deprecated.","line":176,"column":10,"nodeType":null,"messageId":"deprecation","endLine":176,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":773,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":773,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":781,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":781,"endColumn":25},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":807,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":807,"endColumn":15},{"ruleId":"sonarjs/no-unenclosed-multiline-block","severity":2,"message":"This statement will not be executed conditionally; only the first statement will be. The rest will execute unconditionally.","line":949,"column":68,"nodeType":"EmptyStatement","endLine":949,"endColumn":69}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  createClient,\r\n  type PostgrestSingleResponse,\r\n  type PostgrestResponse,\r\n  type PostgrestError,\r\n} from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseServiceKey) {\r\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\r\n}\r\n\r\nif (supabaseAnonKey === undefined || supabaseAnonKey === '') {\r\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Only create admin client on server side where service key is available\r\nexport const supabaseAdmin = supabaseServiceKey\r\n  ? createClient(supabaseUrl, supabaseServiceKey)\r\n  : undefined;\r\n\r\n// Database types\r\nimport { MenuCategory, MenuItem } from './types';\r\n\r\nexport interface FoodTruckLocation {\r\n  lat: number;\r\n  lng: number;\r\n  address?: string;\r\n  timestamp: string;\r\n}\r\n\r\n// Re-exporting from types.ts to ensure consistency\r\n\r\nimport { FoodTruckSchema } from './types';\r\n\r\nexport interface FoodTruck extends FoodTruckSchema {\r\n  id: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  is_active?: boolean; // This property is in lib/types.ts but not in lib/supabase.ts\r\n  // Add any other properties that are in the database but not in FoodTruckSchema\r\n  // For example, if the database has 'exact_location' or 'city_location'\r\n  exact_location?: FoodTruckLocation;\r\n  city_location?: FoodTruckLocation;\r\n}\r\n\r\nexport interface ScrapingJob {\r\n  id: string;\r\n  job_type: string;\r\n  target_url?: string;\r\n  target_handle?: string;\r\n  platform?: string;\r\n  status: 'pending' | 'running' | 'completed' | 'failed';\r\n  priority: number;\r\n  scheduled_at: string;\r\n  started_at?: string;\r\n  completed_at?: string;\r\n  data_collected?: Record<string, unknown>;\r\n  errors?: string[];\r\n  retry_count: number;\r\n  max_retries: number;\r\n  created_at: string;\r\n}\r\n\r\nexport interface DataProcessingQueue {\r\n  id: string;\r\n  truck_id?: string;\r\n  processing_type: string;\r\n  raw_data: Record<string, unknown>;\r\n  processed_data?: Record<string, unknown>;\r\n  gemini_tokens_used: number;\r\n  status: 'pending' | 'processing' | 'completed' | 'failed';\r\n  priority: number;\r\n  created_at: string;\r\n  processed_at?: string;\r\n}\r\n\r\nexport interface ApiUsage {\r\n  id: string;\r\n  service_name: string;\r\n  usage_date: string;\r\n  requests_count: number;\r\n  tokens_used: number;\r\n}\r\n\r\n// Food truck operations\r\n/**\r\n* Groups menu items by their associated food truck ID.\r\n* @example\r\n* buildMenuByTruck([{ food_truck_id: '1', name: 'Burger' }, { food_truck_id: '2', name: 'Pizza' }])\r\n* { '1': [{ food_truck_id: '1', name: 'Burger' }], '2': [{ food_truck_id: '2', name: 'Pizza' }] }\r\n* @param {RawMenuItemFromDB[]} menuItems - Array of menu items where each item must have a food truck ID.\r\n* @returns {Record<string, RawMenuItemFromDB[]>} A record with keys of food truck IDs and values of arrays of menu items.\r\n* @description\r\n*   - Ensures only menu items with valid, non-empty food truck IDs are included.\r\n*   - Initializes an array for each unique food truck ID, grouping corresponding menu items.\r\n*/\r\nfunction buildMenuByTruck(menuItems: RawMenuItemFromDB[]): Record<string, RawMenuItemFromDB[]> {\r\n  const menuByTruck: Record<string, RawMenuItemFromDB[]> = {};\r\n  for (const item of menuItems) {\r\n    if (typeof item.food_truck_id === 'string' && item.food_truck_id.trim() !== '') {\r\n      if (!menuByTruck[item.food_truck_id]) {\r\n        menuByTruck[item.food_truck_id] = [];\r\n      }\r\n      menuByTruck[item.food_truck_id].push(item);\r\n    }\r\n  }\r\n  return menuByTruck;\r\n}\r\n\r\nfunction handleSupabaseError(error: PostgrestError | Error, context: string) {\r\n  // Log technical details for developers\r\n  console.warn(`Error in ${context}:`, error.message);\r\n}\r\n\r\nexport const FoodTruckService = {\r\n  async getAllTrucks(\r\n    limit = 50,\r\n    offset = 0,\r\n  ): Promise<{ trucks: FoodTruck[]; total: number; error?: string }> {\r\n    try {\r\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\r\n        .from('food_trucks')\r\n        .select('*', { count: 'exact' })\r\n        .order('updated_at', { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n      if (error) throw error;\r\n      const trucks: FoodTruck[] = (data ?? []).map((t: FoodTruck) => normalizeTruckLocation(t));\r\n      if (trucks.length === 0) return { trucks: [], total: count ?? 0 };\r\n      const truckIds = trucks.map((t: FoodTruck) => t.id);\r\n      let menuItems: RawMenuItemFromDB[] = [];\r\n      try {\r\n        if (truckIds.length > 0) {\r\n          const { data: items, error: menuError } = await supabase\r\n            .from('menu_items')\r\n            .select('*')\r\n            .in('food_truck_id', truckIds)\r\n            .returns<RawMenuItemFromDB[]>();\r\n          if (menuError) throw new Error(menuError.message);\r\n          menuItems = items ?? [];\r\n        }\r\n      } catch (menuError) {\r\n        handleSupabaseError(menuError, 'getAllTrucks:menu_items');\r\n      }\r\n      const menuByTruck = buildMenuByTruck(menuItems);\r\n      for (const truck of trucks) {\r\n        truck.menu = groupMenuItems(menuByTruck[truck.id] ?? []);\r\n      }\r\n      return { trucks, total: count ?? 0 };\r\n    } catch (error) {\r\n      handleSupabaseError(error, 'getAllTrucks');\r\n      return { trucks: [], total: 0, error: \"That didn't work, please try again later.\" };\r\n    }\r\n  },\r\n  async getTruckById(id: string): Promise<FoodTruck | { error: string }> {\r\n    try {\r\n      const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase\r\n        .from('food_trucks')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single();\r\n      if (error) throw error;\r\n      if (!data) {\r\n        return { error: \"That didn't work, please try again later.\" };\r\n      }\r\n      const truck: FoodTruck = normalizeTruckLocation(data);\r\n      const { data: items, error: menuError } = await supabase\r\n        .from('menu_items')\r\n        .select('*')\r\n        .eq('food_truck_id', id)\r\n        .returns<RawMenuItemFromDB[]>();\r\n      if (menuError) throw menuError;\r\n      truck.menu = groupMenuItems(items ?? []);\r\n      return truck;\r\n    } catch (error) {\r\n      handleSupabaseError(error, 'getTruckById');\r\n      return { error: \"That didn't work, please try again later.\" };\r\n    }\r\n  },\r\n\r\n  async getTrucksByLocation(\r\n    lat: number,\r\n    lng: number,\r\n    radiusKm: number,\r\n  ): Promise<FoodTruck[] | { error: string }> {\r\n    try {\r\n      const { trucks } = await FoodTruckService.getAllTrucks();\r\n      const nearbyTrucks = trucks.filter((truck: FoodTruck) => {\r\n        if (\r\n          truck.current_location == undefined ||\r\n          typeof truck.current_location.lat !== 'number' ||\r\n          typeof truck.current_location.lng !== 'number'\r\n        ) {\r\n          return false;\r\n        }\r\n        const distance = calculateDistance(\r\n          lat,\r\n          lng,\r\n          truck.current_location.lat,\r\n          truck.current_location.lng,\r\n        );\r\n        return distance <= radiusKm;\r\n      });\r\n      return nearbyTrucks;\r\n    } catch (error: unknown) {\r\n      handleSupabaseError(error, 'getTrucksByLocation');\r\n      return { error: \"That didn't work, please try again later.\" };\r\n    }\r\n  },\r\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck | { error: string }> {\r\n    if (!supabaseAdmin) {\r\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\r\n    }\r\n    const menuData = truckData.menu;\r\n    const truckDataWithoutMenu = { ...truckData };\r\n    delete truckDataWithoutMenu.menu;\r\n    const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n      .from('food_trucks')\r\n      .insert([truckDataWithoutMenu])\r\n      .select()\r\n      .single();\r\n    if (error) {\r\n      handleSupabaseError(error, 'createTruck');\r\n      return { error: 'Failed to create truck.' };\r\n    }\r\n    await insertMenuItems(truck.id, menuData);\r\n    return truck;\r\n  },\r\n\r\n  async updateTruck(\r\n    id: string,\r\n    updates: Partial<FoodTruck>,\r\n  ): Promise<FoodTruck | { error: string }> {\r\n    if (!supabaseAdmin) {\r\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\r\n    }\r\n    const menuData = updates.menu;\r\n    const updatesWithoutMenu = { ...updates };\r\n    delete updatesWithoutMenu.menu;\r\n    const truckResult = await updateTruckData(id, updatesWithoutMenu);\r\n    if ('error' in truckResult) {\r\n      return truckResult;\r\n    }\r\n    if (menuData != undefined) {\r\n      await updateTruckMenu(id, menuData);\r\n    }\r\n    return truckResult;\r\n  },\r\n\r\n  async getDataQualityStats(): Promise<{\r\n    total_trucks: number;\r\n    avg_quality_score: number;\r\n    high_quality_count: number;\r\n    medium_quality_count: number;\r\n    low_quality_count: number;\r\n    verified_count: number;\r\n    pending_count: number;\r\n    flagged_count: number;\r\n  }> {\r\n    try {\r\n      const {\r\n        data,\r\n        error,\r\n      }: PostgrestSingleResponse<{\r\n        total_trucks: number;\r\n        avg_quality_score: number;\r\n        high_quality_count: number;\r\n        medium_quality_count: number;\r\n        low_quality_count: number;\r\n        verified_count: number;\r\n        pending_count: number;\r\n        flagged_count: number;\r\n      }> = await supabase.rpc('get_data_quality_stats').single();\r\n      if (error) throw error;\r\n      return data as {\r\n        total_trucks: number;\r\n        avg_quality_score: number;\r\n        high_quality_count: number;\r\n        medium_quality_count: number;\r\n        low_quality_count: number;\r\n        verified_count: number;\r\n        pending_count: number;\r\n        flagged_count: number;\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching data quality stats:', error);\r\n      return {\r\n        total_trucks: 0,\r\n        avg_quality_score: 0,\r\n        high_quality_count: 0,\r\n        medium_quality_count: 0,\r\n        low_quality_count: 0,\r\n        verified_count: 0,\r\n        pending_count: 0,\r\n        flagged_count: 0,\r\n      };\r\n    }\r\n  },\r\n};\r\n\r\n// Helper functions to reduce cognitive complexity\r\nconst isMenuCategory = (obj: unknown): obj is MenuCategory =>\r\n  typeof obj === 'object' &&\r\n  obj != undefined &&\r\n  'name' in obj &&\r\n  'items' in obj &&\r\n  Array.isArray(obj.items);\r\n\r\n/**\r\n * Determines whether the given object is a MenuItem.\r\n * @example\r\n * isMenuItem({ name: \"Pizza\", description: \"Delicious\", price: 9.99, dietary_tags: [\"Vegetarian\"] })\r\n * true\r\n * @param {unknown} obj - The object to be checked.\r\n * @returns {boolean} Returns true if the object has properties consistent with a MenuItem.\r\n * @description\r\n *   - Checks if 'name' is a string.\r\n *   - Checks if 'description' is either undefined or a string.\r\n *   - Checks if 'price' is either undefined or a number.\r\n *   - Ensures 'dietary_tags' is either undefined or an array of strings.\r\n */\r\nconst isMenuItem = (obj: unknown): obj is MenuItem => {\r\n  if (typeof obj !== 'object' || obj == undefined) return false;\r\n  const item = obj as Record<string, unknown>;\r\n  return (\r\n    typeof item.name === 'string' &&\r\n    (item.description === undefined || typeof item.description === 'string') &&\r\n    (item.price === undefined || typeof item.price === 'number') &&\r\n    (item.dietary_tags === undefined ||\r\n      (Array.isArray(item.dietary_tags) &&\r\n        item.dietary_tags.every((tag) => typeof tag === 'string')))\r\n  );\r\n};\r\n\r\n/**\r\n* Updates the food truck data for a given truck ID with provided updates.\r\n* @example\r\n* updateTruckData('truck123', { name: 'New Truck Name', location: 'Downtown' })\r\n* { id: 'truck123', name: 'New Truck Name', location: 'Downtown', ... }\r\n* @param {string} id - The ID of the food truck to be updated.\r\n* @param {Partial<FoodTruck>} updatesWithoutMenu - Partial object containing truck attributes to be updated, excluding menu items.\r\n* @returns {Promise<FoodTruck | { error: string }>} Returns the updated FoodTruck object or an error message upon failure.\r\n* @description\r\n*   - Requires SUPABASE_SERVICE_ROLE_KEY to perform operations.\r\n*   - Updates only non-menu details of the food truck.\r\n*   - Selects and returns the single updated record from the database.\r\n*   - Handles errors by invoking handleSupabaseError and returns an error message if any issues occur during update.\r\n*/\r\nasync function updateTruckData(\r\n  id: string,\r\n  updatesWithoutMenu: Partial<FoodTruck>,\r\n): Promise<FoodTruck | { error: string }> {\r\n  if (!supabaseAdmin) {\r\n    return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\r\n  }\r\n\r\n  const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n    .from('food_trucks')\r\n    .update(updatesWithoutMenu)\r\n    .eq('id', id)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    handleSupabaseError(error, 'updateTruckData');\r\n    return { error: 'Failed to update truck data.' };\r\n  }\r\n  return truck;\r\n}\r\n\r\n/**\r\n * Updates the menu items for a specific food truck in the Supabase database.\r\n * @example\r\n * updateTruckMenu('truck123', menuData)\r\n * Promise<void> // Updates the menu items and resolves a promise.\r\n * @param {string} id - Identifier for the food truck whose menu is being updated.\r\n * @param {MenuCategory[] | unknown[]} menuData - Array containing menu category objects or unknown objects.\r\n * @returns {Promise<void>} Resolves a promise when the operation is complete.\r\n * @description\r\n *   - Requires `SUPABASE_SERVICE_ROLE_KEY` to perform admin operations.\r\n *   - Deletes existing menu items before inserting updated ones.\r\n *   - Handles invalid categories or menu items by skipping them and logs warnings.\r\n */\r\nasync function updateTruckMenu(id: string, menuData: MenuCategory[] | unknown[]): Promise<void> {\r\n  if (!supabaseAdmin) {\r\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n  }\r\n\r\n  // Delete existing menu items\r\n  const { error: deleteError } = await supabaseAdmin\r\n    .from('menu_items')\r\n    .delete()\r\n    .eq('food_truck_id', id);\r\n\r\n  if (deleteError) {\r\n    console.error('Error deleting existing menu items for truck', id, deleteError);\r\n  }\r\n\r\n  // Insert new menu items if they exist\r\n  if (menuData != undefined && menuData.length > 0) {\r\n    const menuItems = menuData.flatMap((category: unknown) => {\r\n      if (!isMenuCategory(category)) {\r\n        console.warn('Skipping invalid category in updateTruckMenu:', category);\r\n        return [];\r\n      }\r\n\r\n      return (category.items ?? []).map((item: unknown) => {\r\n        if (!isMenuItem(item)) {\r\n          console.warn('Skipping invalid menu item in updateTruckMenu:', item);\r\n          // Return a default valid MenuItem or skip based on requirements\r\n          return {\r\n            food_truck_id: id,\r\n            category: category.name ?? 'Uncategorized',\r\n            name: 'Unknown Item',\r\n            description: undefined,\r\n            price: undefined,\r\n            dietary_tags: [],\r\n          };\r\n        }\r\n\r\n        return {\r\n          food_truck_id: id,\r\n          category: category.name ?? 'Uncategorized',\r\n          name: item.name ?? 'Unknown Item',\r\n          description: item.description ?? undefined,\r\n          price: typeof item.price === 'number' ? item.price : undefined,\r\n          dietary_tags: Array.isArray(item.dietary_tags) ? item.dietary_tags : [],\r\n        };\r\n      });\r\n    });\r\n\r\n    if (menuItems.length > 0) {\r\n      const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\r\n\r\n      if (menuError) {\r\n        console.error('Error inserting updated menu items for truck', id, menuError);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n* Computes the distance between two geographical points using the Haversine formula.\r\n* @example\r\n* calculateDistance(51.5074, -0.1278, 40.7128, -74.0060)\r\n* 5585.107071089907\r\n* @param {number} lat1 - Latitude of the first point in decimal degrees.\r\n* @param {number} lon1 - Longitude of the first point in decimal degrees.\r\n* @param {number} lat2 - Latitude of the second point in decimal degrees.\r\n* @param {number} lon2 - Longitude of the second point in decimal degrees.\r\n* @returns {number} The distance between the two points in kilometers.\r\n* @description\r\n*   - Uses Haversine formula to account for Earth's curvature.\r\n*   - Assumes Earth’s radius is 6371 kilometers.\r\n*   - Angles should be provided in decimal degrees, not radians.\r\n*/\r\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\r\n  const R = 6371;\r\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n  const dLon = ((lon2 - lon1) * Math.PI) / 180;\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos((lat1 * Math.PI) / 180) *\r\n      Math.cos((lat2 * Math.PI) / 180) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const distance = R * c;\r\n  return distance;\r\n}\r\n\r\n// Define a helper type for items coming from the DB, which might include a category field\r\ninterface RawMenuItemFromDB {\r\n  name: string;\r\n  description?: string;\r\n  price?: number;\r\n  dietary_tags?: string[];\r\n  category?: string; // This field is expected from the DB query\r\n  // Potentially other fields like id, food_truck_id, etc.\r\n  [key: string]: unknown; // Allow other properties from DB select *\r\n}\r\n\r\n/**\r\n * Groups raw menu items into categories based on their category property.\r\n * @example\r\n * groupMenuItems([{name: 'Salad', category: 'Appetizers'}, {name: 'Burger'}])\r\n * // Returns: [{name: 'Appetizers', items: [{name: 'Salad', description: undefined, price: undefined, dietary_tags: []}]}, \r\n * //           {name: 'Uncategorized', items: [{name: 'Burger', description: undefined, price: undefined, dietary_tags: []}]}]\r\n * @param {RawMenuItemFromDB[]} rawItems - Array of raw menu items from the database.\r\n * @returns {MenuCategory[]} A list of menu categories with categorized menu items.\r\n * @description\r\n *   - Wraps raw menu items into a structured format separating them by categories.\r\n *   - Uses the nullish coalescing operator to handle null and undefined values from the database.\r\n *   - Explicitly casts dietary tags to an array of strings.\r\n */\r\nfunction groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\r\n  const byCategory: Record<string, MenuItem[]> = {}; // Stores processed MenuItems\r\n  for (const rawItem of rawItems) {\r\n    const categoryName: string = rawItem.category ?? 'Uncategorized';\r\n    byCategory[categoryName] ??= [];\r\n    // Construct a MenuItem conforming to the MenuItem interface (no 'category' property)\r\n    const menuItem: MenuItem = {\r\n      name: rawItem.name,\r\n      // Use nullish coalescing to convert null from DB to undefined for the MenuItem type\r\n      description: rawItem.description ?? undefined,\r\n      price: rawItem.price ?? undefined,\r\n      dietary_tags: (rawItem.dietary_tags as string[]) ?? [], // Explicitly cast to string[]\r\n    };\r\n    byCategory[categoryName].push(menuItem);\r\n  }\r\n  // Map to MenuCategory structure { name: string, items: MenuItem[] }\r\n  return Object.entries(byCategory).map(([categoryName, itemsList]: [string, MenuItem[]]) => ({\r\n    name: categoryName,\r\n    items: itemsList,\r\n  }));\r\n}\r\n\r\n// Remove redundant type constituent in normalizeTruckLocation\r\n/**\r\n * Normalizes the location of a food truck by selecting the most accurate available location data.\r\n * @example\r\n * normalizeTruckLocation(truckInstance)\r\n * returns truckInstance with updated current_location property\r\n * @param {FoodTruck} truck - A food truck object whose location needs normalization.\r\n * @returns {FoodTruck} A food truck object with a standardized current location.\r\n * @description\r\n *   - If no valid latitude or longitude is found, it defaults to the fallback location.\r\n *   - The function prioritizes exact_location over current_location and city_location.\r\n *   - Ensures that the address is populated even if only latitude and longitude are available.\r\n *   - Uses the current timestamp when none is provided in the location data.\r\n */\r\nfunction normalizeTruckLocation(truck: FoodTruck): FoodTruck {\r\n  const fallback: FoodTruckLocation = {\r\n    lat: 0,\r\n    lng: 0,\r\n    address: 'Unknown',\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n  const loc = truck.exact_location ?? truck.current_location ?? truck.city_location ?? {};\r\n  const lat = typeof loc.lat === 'number' ? loc.lat : 0;\r\n  const lng = typeof loc.lng === 'number' ? loc.lng : 0;\r\n  const {address} = loc;\r\n  const {timestamp} = loc;\r\n\r\n  truck.current_location =\r\n    lat === 0 || lng === 0\r\n      ? { ...fallback, address: address ?? fallback.address }\r\n      : {\r\n          lat,\r\n          lng,\r\n          address: address ?? fallback.address,\r\n          timestamp: timestamp ?? fallback.timestamp,\r\n        };\r\n  return truck;\r\n}\r\n\r\nexport const ScrapingJobService = {\r\n  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .insert([\r\n        {\r\n          ...jobData,\r\n          status: 'pending',\r\n          retry_count: 0,\r\n          max_retries: 3,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getJobsByStatus(status: string): Promise<ScrapingJob[]> {\r\n    try {\r\n      const query = supabase.from('scraping_jobs').select('*');\r\n\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await (\r\n        status === 'all' ? query : query.eq('status', status)\r\n      )\r\n        .order('priority', { ascending: false })\r\n        .order('scheduled_at', { ascending: true });\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching jobs:', error);\r\n      return [];\r\n    }\r\n  },\r\n  async updateJobStatus(\r\n    id: string,\r\n    status: string,\r\n    updates: Partial<ScrapingJob> = {},\r\n  ): Promise<ScrapingJob> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .update({\r\n        status,\r\n        ...updates,\r\n        ...(status === 'running' && { started_at: new Date().toISOString() }),\r\n        ...(status === 'completed' && { completed_at: new Date().toISOString() }),\r\n      })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  async incrementRetryCount(id: string): Promise<ScrapingJob> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const {\r\n      data: current,\r\n      error: fetchError,\r\n    }: PostgrestSingleResponse<Pick<ScrapingJob, 'retry_count'>> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .select('retry_count')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (fetchError) throw fetchError;\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from('scraping_jobs')\r\n      .update({ retry_count: (current?.retry_count ?? 0) + 1 })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  async getAllJobs(limit = 50, offset = 0): Promise<ScrapingJob[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\r\n        .from('scraping_jobs')\r\n        .select('*')\r\n        .order('priority', { ascending: false })\r\n        .order('scheduled_at', { ascending: true })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching jobs:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async getJobsFromDate(date: Date): Promise<ScrapingJob[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\r\n        .from('scraping_jobs')\r\n        .select('*')\r\n        .gte('created_at', date.toISOString())\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching jobs from date:', error);\r\n      return [];\r\n    }\r\n  },\r\n};\r\n\r\nexport const DataProcessingService = {\r\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from('data_processing_queue')\r\n      .insert([\r\n        {\r\n          ...queueData,\r\n          status: 'pending',\r\n          gemini_tokens_used: 0,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getNextQueueItem(): Promise<DataProcessingQueue | undefined> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from('data_processing_queue')\r\n      .select('*')\r\n      .eq('status', 'pending')\r\n      .order('priority', { ascending: false })\r\n      .order('created_at', { ascending: true })\r\n      .limit(1)\r\n      .single();\r\n\r\n    if (error !== null && String(error.code) != 'PGRST116') throw error;\r\n    return data ?? undefined;\r\n  },\r\n\r\n  async getQueueByStatus(status: string): Promise<DataProcessingQueue[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<DataProcessingQueue> = await supabase\r\n        .from('data_processing_queue')\r\n        .select('*')\r\n        .eq('status', status)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error fetching queue:', error);\r\n      return [];\r\n    }\r\n  },\r\n  async updateQueueItem(\r\n    id: string,\r\n    updates: Partial<DataProcessingQueue>,\r\n  ): Promise<DataProcessingQueue> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from('data_processing_queue')\r\n      .update({\r\n        ...updates,\r\n        ...(updates.status === 'completed' && { processed_at: new Date().toISOString() }),\r\n      })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n};\r\n\r\nexport const DataQualityService = {\r\n  calculateQualityScore: (truck: FoodTruck) => {\r\n    // Placeholder for actual quality score calculation logic\r\n    // This should be implemented based on defined data quality rules\r\n    let score = 0;\r\n    if (typeof truck.name === 'string' && truck.name.trim() !== '') score += 20;\r\n    if (\r\n      truck.current_location &&\r\n      typeof truck.current_location.lat === 'number' &&\r\n      !Number.isNaN(truck.current_location.lat) &&\r\n      typeof truck.current_location.lng === 'number' &&\r\n      !Number.isNaN(truck.current_location.lng)\r\n    )\r\n      score += 30;\r\n    if (\r\n      truck.contact_info &&\r\n      ((typeof truck.contact_info.phone === 'string' && truck.contact_info.phone.trim() !== '') ||\r\n        (typeof truck.contact_info.email === 'string' && truck.contact_info.email.trim() !== '') ||\r\n        (typeof truck.contact_info.website === 'string' &&\r\n          truck.contact_info.website.trim() !== ''))\r\n    )\r\n      score += 25;\r\n    if (Array.isArray(truck.menu) && truck.menu.length > 0) score += 15;\r\n    if (truck.operating_hours != undefined) score += 10;\r\n    return { score: Math.min(100, score) };\r\n  },\r\n\r\n  async updateTruckQualityScore(truckId: string): Promise<FoodTruck | { error: string }> {\r\n    if (!supabaseAdmin) {\r\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\r\n    }\r\n    const { data: truck, error: fetchError }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n      .from('food_trucks')\r\n      .select('*')\r\n      .eq('id', truckId)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      handleSupabaseError(fetchError, 'updateTruckQualityScore:fetch');\r\n      return { error: `Failed to fetch truck with ID ${truckId}.` };\r\n    }\r\n    if (!truck) {\r\n      return { error: `Truck with ID ${truckId} not found.` };\r\n    }\r\n\r\n    const { score } = this.calculateQualityScore(truck);\r\n\r\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n      .from('food_trucks')\r\n      .update({ data_quality_score: score })\r\n      .eq('id', truckId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      handleSupabaseError(error, 'updateTruckQualityScore:update');\r\n      return { error: `Failed to update quality score for truck with ID ${truckId}.` };\r\n    }\r\n    return data;\r\n  },\r\n};\r\n\r\nexport const APIUsageService = {\r\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<ApiUsage> {\r\n    if (!supabaseAdmin) {\r\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\r\n    }\r\n\r\n    try {\r\n      const today = new Date().toISOString().split('T')[0];\r\n\r\n      const {\r\n        data: existing,\r\n        error: existingError,\r\n      }: { data: ApiUsage | undefined; error: PostgrestError | undefined } = await supabaseAdmin\r\n        .from('api_usage')\r\n        .select('*')\r\n        .eq('service_name', serviceName)\r\n        .eq('usage_date', today)\r\n        .single();\r\n\r\n      if (existingError && existingError.code !== 'PGRST116') throw existingError;\r\n\r\n      if (existing) {\r\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n          .from('api_usage')\r\n          .update({\r\n            requests_count: (existing.requests_count ?? 0) + requests,\r\n            tokens_used: (existing.tokens_used ?? 0) + tokens,\r\n          })\r\n          .eq('id', existing.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      } \r\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n          .from('api_usage')\r\n          .insert([\r\n            {\r\n              service_name: serviceName,\r\n              usage_date: today,\r\n              requests_count: requests,\r\n              tokens_used: tokens,\r\n            },\r\n          ])\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      \r\n    } catch (error: unknown) {\r\n      console.warn('Error tracking usage:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getTodayUsage(serviceName: string): Promise<ApiUsage | undefined> {\r\n    try {\r\n      const today = new Date().toISOString().split('T')[0];\r\n\r\n      const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabase\r\n        .from('api_usage')\r\n        .select('*')\r\n        .eq('service_name', serviceName)\r\n        .eq('usage_date', today)\r\n        .single();\r\n\r\n      if (error !== null && String(error.code) != 'PGRST116') throw error;\r\n      return data ?? undefined;\r\n    } catch (error: unknown) {\r\n      console.warn('Error getting today usage:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getAllUsageStats(): Promise<ApiUsage[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ApiUsage> = await supabase\r\n        .from('api_usage')\r\n        .select('*')\r\n        .order('usage_date', { ascending: false })\r\n        .limit(30);\r\n\r\n      if (error) throw error;\r\n      return data ?? [];\r\n    } catch (error: unknown) {\r\n      console.warn('Error getting usage stats:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport { type MenuItem, type MenuCategory, type OperatingHours, type PriceRange } from './types';\r\n\r\n// Helper to prepare menu items for DB insertion\r\n/**\r\n * Prepares a list of menu items for insertion by filtering and transforming the input data.\r\n * @example\r\n * prepareMenuItemsForInsert(\"truck123\", [{ name: \"Beverages\", items: [{name: \"Tea\", price: 3.00}]}])\r\n * [\r\n *   {\r\n *     food_truck_id: \"truck123\",\r\n *     category: \"Beverages\",\r\n *     name: \"Tea\",\r\n *     description: undefined,\r\n *     price: 3.00,\r\n *     dietary_tags: []\r\n *   }\r\n * ]\r\n * @param {string} truckId - Unique identifier of the food truck.\r\n * @param {MenuCategory[] | unknown[] | undefined} menuData - Array of menu categories or unknown data, which may contain items to insert.\r\n * @returns {MenuItem[]} Returns an array of valid menu items formatted for database insertion, excluding invalid entries.\r\n * @description\r\n *   - Filters input data to ensure items are of MenuCategory type.\r\n *   - Logs warnings for invalid menu items and skips them.\r\n *   - Uses default values for missing item properties such as `category`, `name`, or `price`.\r\n */\r\nfunction prepareMenuItemsForInsert(\r\n  truckId: string,\r\n  menuData: MenuCategory[] | unknown[] | undefined,\r\n) {\r\n  if (!Array.isArray(menuData) || menuData.length === 0) return [];;\r\n  // Explicitly filter for MenuCategory to ensure type safety\r\n  const categories = menuData.filter(\r\n    (category): category is MenuCategory =>\r\n      typeof category === 'object' &&\r\n      category != undefined &&\r\n      'name' in category &&\r\n      'items' in category &&\r\n      Array.isArray(category.items),\r\n  ) as MenuCategory[];\r\n\r\n  return categories.flatMap(\r\n    (category) =>\r\n      (Array.isArray(category.items) ? category.items : [])\r\n        .map((item: unknown) => {\r\n          if (!isMenuItem(item)) {\r\n            console.warn('Skipping invalid menu item:', item);\r\n            return; // Return undefined for invalid items to be filtered out later\r\n          }\r\n\r\n          return {\r\n            food_truck_id: truckId,\r\n            category:\r\n              typeof category.name === 'string' && category.name !== ''\r\n                ? category.name\r\n                : 'Uncategorized',\r\n            name: typeof item.name === 'string' && item.name !== '' ? item.name : 'Unknown Item',\r\n            description:\r\n              typeof item.description === 'string' && item.description !== ''\r\n                ? item.description\r\n                : undefined,\r\n            price:\r\n              typeof item.price === 'number' && !Number.isNaN(item.price) ? item.price : undefined,\r\n            dietary_tags: Array.isArray(item.dietary_tags) ? item.dietary_tags : [],\r\n          };\r\n        })\r\n        .filter(Boolean) as MenuItem[], // Filter out nulls and assert type\r\n  );\r\n}\r\n\r\nasync function insertMenuItems(truckId: string, menuData: MenuCategory[] | unknown[] | undefined) {\r\n  const menuItems = prepareMenuItemsForInsert(truckId, menuData);\r\n  if (menuItems.length === 0) return;\r\n  const { error: menuError } = await supabaseAdmin!.from('menu_items').insert(menuItems);\r\n  if (menuError) {\r\n    console.error('Error inserting menu items for truck', truckId, menuError);\r\n  }\r\n}\r\n\r\n// Fix all strict-boolean-expressions and always-true/false comparisons below\r\n// Example: if (someString) => if (typeof someString === 'string' && someString.trim() !== '')\r\n// Example: if (someNumber) => if (typeof someNumber === 'number' && !Number.isNaN(someNumber) && someNumber !== 0)\r\n// Example: if (someObject) => if (someObject != null && someObject != undefined)\r\n\r\n// For all other conditionals, ensure explicit nullish/empty/NaN checks as above\r\n\r\nexport { type PostgrestError, type PostgrestResponse } from '@supabase/supabase-js';","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[311,314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[311,314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Shared types for the Food Truck Finder application\r\n\r\nexport type PriceRange = '$|$$,$$$';\r\n\r\nexport interface MenuCategory {\r\n  name: string;\r\n  items: MenuItem[];\r\n}\r\n\r\nexport interface MenuItem {\r\n  name: string;\r\n  description: string | undefined;\r\n  price: number | string | undefined;\r\n  dietary_tags: any[];\r\n  is_popular?: boolean;\r\n}\r\n\r\nexport interface LocationData {\r\n  address: string | undefined;\r\n  city: string | undefined;\r\n  state: string | undefined;\r\n  landmarks: string[];\r\n  coordinates: {\r\n    lat: number | undefined;\r\n    lng: number | undefined;\r\n  };\r\n  confidence: number;\r\n  raw_location_text: string | undefined;\r\n}\r\n\r\nexport type DailyOperatingHours =\r\n  | { open: string; close: string; closed: boolean }\r\n  | { closed: true }\r\n  | undefined;\r\n\r\nexport interface OperatingHours {\r\n  monday: DailyOperatingHours;\r\n  tuesday: DailyOperatingHours;\r\n  wednesday: DailyOperatingHours;\r\n  thursday: DailyOperatingHours;\r\n  friday: DailyOperatingHours;\r\n  saturday: DailyOperatingHours;\r\n  sunday: DailyOperatingHours;\r\n  [key: string]: DailyOperatingHours; // Add index signature\r\n}\r\n\r\nexport interface SentimentAnalysisResult {\r\n  sentiment: 'positive' | 'negative' | 'neutral';\r\n  score: number;\r\n  confidence: number;\r\n  key_topics: string[];\r\n  positive_aspects: string[];\r\n  negative_aspects: string[];\r\n  summary: string;\r\n  recommended: boolean;\r\n}\r\n\r\nexport interface EnhancedFoodTruckData {\r\n  name: string | undefined;\r\n  description: string | undefined;\r\n  cuisine_type: string[];\r\n  price_range: PriceRange;\r\n  specialties: string[];\r\n  dietary_options: string[];\r\n  enhanced_menu: {\r\n    categories: MenuCategory[];\r\n  };\r\n  standardized_hours: OperatingHours;\r\n  cleaned_contact: {\r\n    phone: string | undefined;\r\n    email: string | undefined;\r\n    website: string | undefined;\r\n  };\r\n  data_quality_improvements: string[];\r\n  confidence_score: number;\r\n}\r\n\r\nexport interface ExtractedFoodTruckDetails {\r\n  name: string | undefined;\r\n  description: string | undefined;\r\n  cuisine_type: string[];\r\n  price_range: PriceRange | undefined;\r\n  specialties: string[];\r\n  current_location: {\r\n    address: string | undefined;\r\n    city: string | undefined;\r\n    state: string | undefined;\r\n    zip_code: string | undefined;\r\n    lat?: number;\r\n    lng?: number;\r\n    raw_text: string | undefined;\r\n  };\r\n  scheduled_locations?: {\r\n    // Added scheduled_locations\r\n    address?: string;\r\n    city?: string;\r\n    state?: string;\r\n    zip_code?: string;\r\n    lat?: number;\r\n    lng?: number;\r\n    timestamp: string;\r\n    start_time: string; // Added start_time\r\n    end_time: string; // Added end_time\r\n  }[];\r\n  operating_hours: OperatingHours;\r\n  menu: MenuCategory[];\r\n  contact_info: {\r\n    phone?: string;\r\n    email?: string;\r\n    website?: string;\r\n  };\r\n  social_media: {\r\n    instagram?: string;\r\n    facebook?: string;\r\n    twitter?: string;\r\n    tiktok?: string;\r\n    yelp?: string;\r\n  };\r\n  source_url: string;\r\n}\r\n\r\nexport interface FirecrawlOutputData {\r\n  markdown: string;\r\n  name?: string;\r\n  source_url?: string;\r\n}\r\n\r\nexport interface FoodTruckSchema {\r\n  name: string;\r\n  description?: string;\r\n  current_location: {\r\n    lat: number;\r\n    lng: number;\r\n    address: string | undefined;\r\n    timestamp: string;\r\n  };\r\n  scheduled_locations: ExtractedFoodTruckDetails['scheduled_locations'];\r\n  operating_hours: OperatingHours;\r\n  menu: MenuCategory[];\r\n  contact_info: ExtractedFoodTruckDetails['contact_info'];\r\n  social_media: ExtractedFoodTruckDetails['social_media'];\r\n  cuisine_type: string[];\r\n  price_range: PriceRange | undefined;\r\n  specialties: string[];\r\n  data_quality_score: number;\r\n  verification_status: 'pending' | 'verified' | 'flagged';\r\n  source_urls: string[];\r\n  last_scraped_at: string;\r\n  test_run_flag?: boolean;\r\n  website?: string;\r\n  phone_number?: string;\r\n  email?: string;\r\n  instagram_handle?: string;\r\n  facebook_handle?: string;\r\n  twitter_handle?: string;\r\n  schedule?: unknown[]; // Assuming schedule is an array, adjust type if known\r\n  average_rating?: number;\r\n  review_count?: number;\r\n}\r\n\r\n// Database record type with additional fields\r\nexport interface FoodTruck extends FoodTruckSchema {\r\n  id: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  is_active?: boolean;\r\n}\r\n\r\nexport interface GeminiResponse<T = unknown> {\r\n  success: boolean;\r\n  data?: T;\r\n  tokensUsed?: number;\r\n  error?: string;\r\n  promptSent?: string;\r\n}\r\n\r\nexport interface StageResult {\r\n  status: string;\r\n  data?: FirecrawlOutputData | ExtractedFoodTruckDetails | FoodTruckSchema;\r\n  error?: string;\r\n  details?: string;\r\n  prompt?: string;\r\n  tokensUsed?: number;\r\n  metadata?: { name?: string; source_url?: string };\r\n  rawContent?: string;\r\n  preparedData?: FoodTruckSchema;\r\n  recordId?: string;\r\n}\r\n\r\nexport interface TestPipelineResults {\r\n  firecrawl?: StageResult;\r\n  gemini?: StageResult;\r\n  supabase?: StageResult;\r\n  overallStatus?: string;\r\n  logs?: string[];\r\n  error?: string;\r\n}\r\n\r\nexport interface PipelineRunResult {\r\n  firecrawl?: StageResult;\r\n  gemini?: StageResult;\r\n  supabase?: StageResult;\r\n  logs: string[];\r\n  overallStatus: 'Success' | 'Error';\r\n}\r\n\r\nexport interface RealtimeMetrics {\r\n  scrapingJobs: {\r\n    active: number;\r\n    completed: number;\r\n    failed: number;\r\n    pending: number;\r\n  };\r\n  dataQuality: {\r\n    averageScore: number;\r\n    totalTrucks: number;\r\n    recentChanges: number;\r\n  };\r\n  systemHealth: {\r\n    status: 'healthy' | 'warning' | 'error';\r\n    uptime: number;\r\n    lastUpdate: string;\r\n  };\r\n}\r\n\r\nexport interface TruckRating {\r\n  id: number;\r\n  title: string;\r\n  score: number;\r\n}\r\n\r\nexport interface PipelineEvent {\r\n  type: string; // e.g., 'job_started', 'job_completed', 'data_updated'\r\n  payload: Record<string, unknown>; // Generic payload for event-specific data\r\n  timestamp: string;\r\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types\\foodTruck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types\\webVitals.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\QualityScorer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\apiHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\dataQualityFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\foodTruckHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":58,"column":51,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":58,"endColumn":55},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":76,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":76,"endColumn":16}],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":115,"column":5,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":115,"endColumn":45,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FoodTruck, DailyOperatingHours, MenuItem } from '@/lib/types'; // Added DailyOperatingHours, PriceRange, MenuItem\r\nimport { supabaseFallback } from '@/lib/fallback/supabaseFallback';\r\n\r\nexport const getCurrentDay = () => {\r\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\r\n  return days[new Date().getDay()];\r\n};\r\n\r\nexport const formatPrice = (price: number | string) => {\r\n  // Updated to accept string\r\n  if (typeof price === 'string') {\r\n    // Handle cases where price might be a string like \"$10-$20\" or \"Varies\"\r\n    return price;\r\n  }\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  }).format(price);\r\n};\r\n\r\n/**\r\n* Converts operational hours to a readable format or returns 'Closed' if applicable.\r\n* @example\r\n* formatOperatingHours({ open: '09:00', close: '17:00', closed: false })\r\n* '9:00 AM - 5:00 PM'\r\n* @param {DailyOperatingHours} hours - Object containing daily opening and closing times, and closed status.\r\n* @returns {string} Formatted operating hours string or 'Closed'.\r\n* @description\r\n*   - Handles conversion of military time to 12-hour format.\r\n*   - Adjusts for typical date parsing without relying on actual date due to fixed date string.\r\n*   - Properly responds to 'closed' status by returning 'Closed'.\r\n*   - Locales can impact formatted output by changing time conventions.\r\n*/\r\nexport const formatHours = (hours: DailyOperatingHours) => {\r\n  // Updated to accept DailyOperatingHours\r\n  if (!hours || hours.closed) {\r\n    return 'Closed';\r\n  }\r\n  const open = new Date(`1970-01-01T${hours.open}Z`).toLocaleTimeString('en-US', {\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    hour12: true,\r\n  });\r\n  const close = new Date(`1970-01-01T${hours.close}Z`).toLocaleTimeString('en-US', {\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    hour12: true,\r\n  });\r\n  return `${open} - ${close}`;\r\n};\r\n\r\nexport const getPopularItems = (truck: FoodTruck): MenuItem[] => {\r\n  // Explicitly define return type\r\n  // Explicitly check for nullish and boolean\r\n  return (\r\n    truck.menu\r\n      ?.flatMap((category) => category.items)\r\n      .filter((item): item is MenuItem => Boolean(item && item.is_popular === true)) ?? []\r\n  );\r\n};\r\n\r\n/**\r\n * Calculates the price range of all items in the food truck's menu.\r\n * @example\r\n * getPriceRange(foodTruck)\r\n * \"5.00 - 12.50\"\r\n * @param {FoodTruck} truck - The food truck object containing menu details.\r\n * @returns {string} Returns a formatted string representing the price range or 'N/A' if no valid prices are found.\r\n * @description\r\n *   - Utilizes the optional chaining operator to safely access nested menu items.\r\n *   - Filters out non-numeric and undefined prices before calculating the range.\r\n *   - Formats the minimum and maximum prices using a helper function.\r\n */\r\nexport const getPriceRange = (truck: FoodTruck) => {\r\n  const allItems = truck.menu?.flatMap((category) => category.items);\r\n  if (!allItems || allItems.length === 0) {\r\n    return 'N/A';\r\n  }\r\n  const numericPrices = allItems\r\n    .map((item) => item.price)\r\n    .filter((price): price is number => typeof price === 'number' && price != undefined); // Filter for numbers\r\n\r\n  if (numericPrices.length === 0) {\r\n    return 'N/A'; // No numeric prices found\r\n  }\r\n\r\n  const minPrice = Math.min(...numericPrices);\r\n  const maxPrice = Math.max(...numericPrices);\r\n  return `${formatPrice(minPrice)} - ${formatPrice(maxPrice)}`;\r\n};\r\n\r\nexport const getTodayHours = (truck: FoodTruck) => {\r\n  const today = getCurrentDay();\r\n  return truck.operating_hours?.[today];\r\n};\r\n\r\n// Get user's current location or default to San Francisco\r\n/**\r\n * Retrieves the user's geolocation and updates the location state.\r\n * @example\r\n * getUserLocationHelper(setUserLocation)\r\n * // Updates user's location or defaults to San Francisco\r\n * @param {function} setUserLocation - Callback function to update user's location state with latitude and longitude.\r\n * @returns {void} Function does not return anything.\r\n * @description\r\n *   - Defaults the location to San Francisco if geolocation access is denied or not supported.\r\n *   - Utilizes browser's geolocation API to fetch current coordinates.\r\n *   - Provides a warning in the console if location access is denied.\r\n */\r\nexport function getUserLocationHelper(\r\n  setUserLocation: (location: { lat: number; lng: number }) => void,\r\n) {\r\n  if (typeof navigator !== 'undefined' && navigator.geolocation != undefined) {\r\n    // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        setUserLocation({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n      },\r\n      (error) => {\r\n        console.warn('Location access denied:', error);\r\n        // Default to San Francisco\r\n        setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n      },\r\n    );\r\n  } else {\r\n    // Default to San Francisco if geolocation is not supported\r\n    setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n  }\r\n}\r\n\r\n// Load all food trucks from API\r\n/**\r\n * Loads food truck data from the server and updates state.\r\n * @example\r\n * loadFoodTrucksHelper(setTrucks, setLoading)\r\n * undefined\r\n * @param {(trucks: FoodTruck[]) => void} setTrucks - Callback to update the state with loaded food trucks.\r\n * @param {(loading: boolean) => void} setLoading - Callback to update the loading state.\r\n * @returns {void} No return value.\r\n * @description\r\n *   - Fetches data from '/api/trucks' endpoint.\r\n *   - Parses the response and expects an object containing a 'trucks' array.\r\n *   - Logs an error message to the console if fetching or parsing fails.\r\n *   - Ensures loading state is updated to false in all cases.\r\n */\r\nexport async function loadFoodTrucksHelper(\r\n  setTrucks: (trucks: FoodTruck[]) => void,\r\n  setLoading: (loading: boolean) => void,\r\n) {\r\n  try {\r\n    const { trucks } = await supabaseFallback.getFoodTrucks();\r\n    setTrucks(trucks);\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load food trucks:', error);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}\r\n\r\n// Load nearby food trucks based on user location\r\n/**\r\n* Loads nearby food trucks based on user's location.\r\n* @example\r\n* loadNearbyTrucksHelper({ lat: 37.7749, lng: -122.4194 }, setTrucksCallback)\r\n* // sets trucks with food truck data or an empty array\r\n* @param {{ lat: number; lng: number } | undefined} userLocation - The location of the user used to find nearby trucks.\r\n* @param {(trucks: FoodTruck[]) => void} setTrucks - Callback function to set the trucks data.\r\n* @returns {void} No return value.\r\n* @description\r\n*   - Fetches nearby trucks from the API using latitude and longitude.\r\n*   - Uses a fixed radius of 10 units for truck search.\r\n*   - Handles errors by logging them to the console.\r\n*/\r\nexport async function loadNearbyTrucksHelper(\r\n  userLocation: { lat: number; lng: number } | undefined,\r\n  setTrucks: (trucks: FoodTruck[]) => void,\r\n) {\r\n  if (!userLocation) return;\r\n\r\n  try {\r\n    const { trucks } = await supabaseFallback.getFoodTrucks();\r\n    setTrucks(trucks);\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load nearby trucks:', error);\r\n  }\r\n}\r\n\r\n// Check if a food truck is currently open\r\n/**\r\n * Determines if the food truck is currently open based on its operating hours.\r\n * @example\r\n * isTruckOpen(myFoodTruck)\r\n * // returns true or false depending on current time and truck's operating hours\r\n * @param {FoodTruck} truck - The food truck object with operating hours.\r\n * @returns {boolean} Indicates whether the food truck is open.\r\n * @description\r\n *   - Utilizes the current day's name to fetch operating hours.\r\n *   - Handles potential errors in parsing operating hours.\r\n *   - Logs errors related to parsing time and truck name.\r\n *   - Uses military time format (HHMM) for comparison.\r\n */\r\nexport function isTruckOpen(truck: FoodTruck): boolean {\r\n  const today = getCurrentDay();\r\n  const hours = truck.operating_hours?.[today];\r\n\r\n  // Ensure hours and its properties are not null/undefined before accessing\r\n  if (\r\n    hours == undefined ||\r\n    hours.closed === true ||\r\n    hours.open == undefined ||\r\n    hours.close == undefined\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const now = new Date();\r\n    const currentTime = now.getHours() * 100 + now.getMinutes();\r\n    const openTime = Number.parseInt(hours.open.replace(':', ''), 10);\r\n    const closeTime = Number.parseInt(hours.close.replace(':', ''), 10);\r\n\r\n    return currentTime >= openTime && currentTime <= closeTime;\r\n  } catch (error: unknown) {\r\n    console.error('Error parsing operating hours for truck', truck.name, error);\r\n    return false;\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]}]