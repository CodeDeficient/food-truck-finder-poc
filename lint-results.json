[{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\access-denied\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\analytics\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\auto-scraping\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-cleanup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-quality\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\events\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\monitoring\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\test-pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\users\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\automated-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\cron-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-quality\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\oauth-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\realtime-events\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\scraping-metrics\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\analytics\\web-vitals\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\auto-scrape-initiate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\autonomous-discovery\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\auto-scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\quality-check\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\dashboard\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\enhanced-pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\firecrawl\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\gemini\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\monitoring\\api-usage\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scheduler\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\search\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\tavily\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-integration\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-pipeline-run\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\callback\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\SearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":42,"column":15,"nodeType":null,"endLine":42,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[1583,1586],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\WebVitalsReporter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\AdminNavLinks.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":35,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":32,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":37,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":36,"nodeType":"Property","messageId":"anyAssignment","endLine":32,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":29,"nodeType":"Property","messageId":"anyAssignment","endLine":33,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":34,"column":30,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":35,"column":33,"nodeType":"Property","messageId":"anyAssignment","endLine":35,"endColumn":48}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport Link from 'next/link';\nimport { Home, Truck, Settings, Activity, Users, CalendarDays, BarChart3 } from 'lucide-react';\n\ninterface AdminNavLinksProps {\n  readonly isMobile?: boolean;\n}\n\n/**\n * Renders a set of navigation links for the admin panel.\n * @example\n * AdminNavLinks({ isMobile: true })\n * <Some JSX structure with customized class names>\n * @param {boolean} isMobile - Determines the styling of the links for mobile or desktop view.\n * @returns {JSX.Element} A group of navigation links with appropriate icons for the admin section.\n * @description\n *   - Utilizes a ternary operation to dynamically assign different class names based on the isMobile flag.\n *   - Each link contains an icon specific to the administration section it represents.\n */\nexport function AdminNavLinks({ isMobile = false }: Readonly<AdminNavLinksProps>) {\n  const linkClassName = isMobile\n    ? 'mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground'\n    : 'flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary';\n\n  const iconClassName = isMobile ? 'h-5 w-5' : 'h-4 w-4';\n\n  const navItems = [\n    { href: '/admin', icon: Home, label: 'Dashboard' },\n    { href: '/admin/food-trucks', icon: Truck, label: 'Food Truck Management' },\n    { href: '/admin/pipeline', icon: Activity, label: 'Pipeline Monitoring' },\n    { href: '/admin/auto-scraping', icon: Settings, label: 'Auto-Scraping' },\n    { href: '/admin/data-quality', icon: Settings, label: 'Data Quality' },\n    { href: '/admin/users', icon: Users, label: 'User Management' },\n    { href: '/admin/events', icon: CalendarDays, label: 'Event Management' },\n    { href: '/admin/analytics', icon: BarChart3, label: 'Analytics' },\n  ];\n\n  return (\n    <>\n      {navItems.map((item) => (\n        <Link href={item.href} className={linkClassName} key={item.href}>\n          <item.icon className={iconClassName} />\n          {item.label}\n        </Link>\n      ))}\n    </>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\DataCleanupDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\RealtimeStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\UserMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupOperationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupSummaryCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\OperationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\DataQualityScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\PipelineStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\QualityDistributionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\RecentErrorsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\TotalFoodTrucksCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\TrucksPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\BasicInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\ContactInfoCard.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":13,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":13,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[272,277],"text":"(phone != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[272,277],"text":"(phone ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[272,277],"text":"(Boolean(phone))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":14,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":14,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[311,316],"text":"(email != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[311,316],"text":"(email ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[311,316],"text":"(Boolean(email))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":15,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":15,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[350,357],"text":"(website != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[350,357],"text":"(website ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[350,357],"text":"(Boolean(website))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface ContactInfoCardProps {\n  phone?: string;\n  email?: string;\n  website?: string;\n}\n\nconst ContactInfoCard: React.FC<ContactInfoCardProps> = ({ phone, email, website }) => {\n  return (\n    <div>\n      <h3>Contact Information</h3>\n      {phone && <p>Phone: {phone}</p>}\n      {email && <p>Email: {email}</p>}\n      {website && <p>Website: {website}</p>}\n    </div>\n  );\n};\n\nexport default ContactInfoCard;\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\DataQualityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\LocationInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\OperatingHoursCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityScoreMetric.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\RatingsReviewsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\FailedProcessingQueueTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\PipelineStatisticsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\RecentScrapingJobsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobsTableContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertListDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ConnectionStatusHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\EventControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\EventSubscriptionManager.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":23,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":23,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\n\nimport { supabase } from '@/lib/supabase'; \nimport { PipelineEvent } from '@/lib/types';\n\n/**\n * Manages event subscriptions for pipeline events using Supabase.\n * @example\n * EventSubscriptionManager()\n * @returns {void} This component serves purely for side-effects of subscription management.\n * @description\n *   - Utilizes the Supabase Realtime Client to subscribe and process \"pipeline-events\".\n *   - Includes an effect cleanup to unsubscribe from events when the component unmounts.\n *   - Current implementation logs events to the console as placeholders.\n */\ntype RealtimeChannelStatus = 'SUBSCRIBED' | 'CLOSED' | 'CHANNEL_ERROR' | 'TIMED_OUT';\n\nfunction EventSubscriptionManager() {\n  useEffect(() => {\n    const handleEvent = (payload: { new: PipelineEvent }) => {\n      try {\n        const event = payload.new;\n        if (event && typeof event === 'object' && 'type' in event) {\n          // Process the event based on its type\n          switch (event.type) {\n            case 'job_started': {\n              console.info('Job started:', event.payload);\n              break;\n            }\n            case 'job_completed': {\n              console.info('Job completed:', event.payload);\n              break;\n            }\n            case 'data_updated': {\n              console.info('Data updated:', event.payload);\n              break;\n            }\n            default: {\n              console.warn('Received unknown event type:', event.type);\n            }\n          }\n        } else {\n          console.warn('Received malformed event:', payload);\n        }\n      } catch (error) {\n        console.error('Error processing pipeline event:', error);\n      }\n    };\n\n    const subscription = supabase\n      .channel('pipeline-events')\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'pipeline_events' }, handleEvent)\n      .subscribe((status: RealtimeChannelStatus, error?: Error) => {\n        if (status === 'SUBSCRIBED') {\n          console.info('Successfully subscribed to pipeline events.');\n        }\n        if (status === 'CHANNEL_ERROR' && error) {\n          console.error('Pipeline event subscription error:', error);\n        }\n      });\n\n    return () => {\n      void supabase.realtime.removeChannel(subscription);\n    };\n  }, []);\n}\n\nexport default EventSubscriptionManager;\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\RealtimeStatusDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ScrapingJobsStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\StatusHelpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlertItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemStatusIndicators.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":31,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":31,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { supabase } from '@/lib/supabase'; \n\ntype RealtimeChannelStatus = 'SUBSCRIBED' | 'CLOSED' | 'CHANNEL_ERROR' | 'TIMED_OUT';\n\ninterface SystemStatusResponse {\n  status: string;\n  data: {\n    status: string;\n  };\n}\n\n/**\n* Represents system status indicators in real-time\n* @example\n* SystemStatusIndicators()\n* <div><h3>Current System Status:</h3><span>ONLINE</span></div>\n* @returns {JSX.Element} A JSX element displaying the current system status.\n* @description\n*   - Utilizes Supabase Realtime Client for subscribing to system status updates.\n*   - Updates the display with the latest system status retrieved from a realtime database.\n*   - Handles subscription clean-up on component unmount to avoid memory leaks.\n*/\nfunction SystemStatusIndicators() {\n  const [systemStatus, setSystemStatus] = useState('UNKNOWN');\n\n  useEffect(() => {\n    const subscription = supabase.realtime.channel('system-status').subscribe((status: RealtimeChannelStatus, payload: unknown) => {\n      if (status === 'SUBSCRIBED') {\n        const response = payload as SystemStatusResponse;\n        if (response && typeof response === 'object' && 'status' in response) {\n          const typedResponse = response;\n          const responseStatus = typedResponse.status; // Extract status to a variable\n\n          if (typeof responseStatus === 'string' && responseStatus === \"success\") {\n            if (typeof typedResponse.data === 'object' && 'status' in typedResponse.data) {\n              setSystemStatus(typedResponse.data.status);\n            } else {\n              console.error(\"Invalid data structure in system status response\");\n            }\n          } else {\n            console.error(\"Failed to retrieve system status or invalid response format\");\n          }\n        } else {\n          console.error(\"Failed to retrieve system status or invalid response format\");\n        }\n      }\n    });\n\n    return () => {\n      void supabase.realtime.removeChannel(subscription);\n    };\n  }, []);\n\n  return (\n    <div>\n      <h3>Current System Status:</h3>\n      <span>{systemStatus}</span>\n    </div>\n  );\n}\n\nexport default SystemStatusIndicators;\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemAlertsLogic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\users\\UserTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\AppHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\LoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MainContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MapSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckAccordionContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\login\\EmailFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapComponent.tsx","messages":[{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":35,"column":10,"nodeType":"Literal","messageId":"error","endLine":35,"endColumn":14,"suggestions":[{"messageId":"remove","fix":{"range":[1305,1309],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[1305,1309],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":60,"column":12,"nodeType":"Literal","messageId":"error","endLine":60,"endColumn":16,"suggestions":[{"messageId":"remove","fix":{"range":[1848,1852],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[1848,1852],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\r\nimport { LatLngExpression } from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport { FoodTruck } from '@/lib/types';\r\n\r\n// Fix for default marker icon issue with Webpack\r\n// @ts-expect-error: Leaflet's default icon handling with Webpack can be problematic.\r\n// This is a common workaround to ensure marker icons load correctly.\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'leaflet/images/marker-icon-2x.png',\r\n  iconUrl: 'leaflet/images/marker-icon.png',\r\n  shadowUrl: 'leaflet/images/marker-shadow.png',\r\n});\r\n\r\ninterface MapComponentProps {\r\n  readonly trucks: FoodTruck[];\r\n  readonly userLocation?: { lat: number; lng: number };\r\n  readonly defaultCenter: LatLngExpression;\r\n  readonly defaultZoom?: number;\r\n  readonly onSelectTruck?: (truckId: string) => void;\r\n  readonly selectedTruckLocation?: LatLngExpression;\r\n}\r\n\r\n// Component to handle map view changes\r\nfunction MapViewHandler({ center, zoom }: { center: LatLngExpression; zoom: number }) {\r\n  const map = useMap();\r\n  useEffect(() => {\r\n    map.setView(center, zoom);\r\n  }, [center, zoom, map]);\r\n  return null;\r\n}\r\n\r\nconst MapComponent: React.FC<MapComponentProps> = ({\r\n  trucks,\r\n  userLocation,\r\n  defaultCenter,\r\n  defaultZoom = 13,\r\n  onSelectTruck,\r\n  selectedTruckLocation,\r\n}) => {\r\n  const [isMounted, setIsMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsMounted(true);\r\n    return () => {\r\n      setIsMounted(false);\r\n    };\r\n  }, []);\r\n\r\n  const center: LatLngExpression = selectedTruckLocation || userLocation\r\n    ? [userLocation?.lat ?? 0, userLocation?.lng ?? 0]\r\n    : defaultCenter;\r\n\r\n  if (!isMounted) {\r\n    return null; // Render nothing until mounted on client\r\n  }\r\n\r\n  return (\r\n    <MapContainer\r\n      center={center}\r\n      zoom={defaultZoom}\r\n      scrollWheelZoom={false}\r\n      style={{ height: '100%', width: '100%' }}\r\n    >\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <MapViewHandler center={center} zoom={defaultZoom} />\r\n\r\n      {userLocation && (\r\n        <Marker position={[userLocation.lat, userLocation.lng]}>\r\n          <Popup>Your Location</Popup>\r\n        </Marker>\r\n      )}\r\n\r\n      {trucks.map((truck) => (\r\n        truck.current_location?.lat && truck.current_location?.lng && (\r\n          <Marker\r\n            key={truck.id}\r\n            position={[truck.current_location.lat, truck.current_location.lng]}\r\n            eventHandlers={{\r\n              click: () => {\r\n                onSelectTruck?.(truck.id);\r\n              },\r\n            }}\r\n          >\r\n            <Popup>{truck.name}</Popup>\r\n          </Marker>\r\n        )\r\n      ))}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapLoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapViewUpdater.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\TruckMarkers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\UserLocationMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\mapHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\ApiMonitoringDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\TechnicalDetailsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\AdvancedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\CuisineTypesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\DistanceSliderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\FilterToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\MainSearchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\QuickFiltersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchFilterContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchInputWithIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineSubmitHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestResultsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\OperatingHoursSection.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":34,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":34,"endColumn":29,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1542,1559],"text":"(todayHours.closed ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1542,1559],"text":"(todayHours.closed === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Clock } from 'lucide-react';\nimport { DailyOperatingHours } from '@/lib/supabase/types'; // Import DailyOperatingHours\n\ninterface OperatingHoursSectionProps {\n  readonly todayHours: DailyOperatingHours | undefined; // Update type\n  readonly formatHours: (hours: DailyOperatingHours) => string; // Update type\n}\n\n/**\n * Renders today's operating hours section.\n * @example\n * OperatingHoursSection({ todayHours: { closed: false, open: '09:00', close: '17:00' }, formatHours: (hours) => `${hours.open} - ${hours.close}` })\n * // Returns a JSX element with formatted operating hours or 'Closed'.\n * @param {Readonly<OperatingHoursSectionProps>} {todayHours, formatHours} - The properties for today's operating hours and the function to format them.\n * @returns {JSX.Element | undefined} A JSX element displaying today's hours, or nothing if hours are undefined.\n * @description\n *   - The component displays 'Closed' if todayHours indicates closure.\n *   - Utilizes a Clock icon for a visual representation of hours.\n *   - Ensures dark mode compatibility through styling classes.\n */\nexport function OperatingHoursSection({\n  todayHours,\n  formatHours,\n}: Readonly<OperatingHoursSectionProps>) {\n  if (todayHours === undefined) return; // Return null if no hours\n\n  return (\n    <div>\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Today's Hours</h4>\n      <div className=\"flex items-center gap-2\">\n        <Clock className=\"size-3 text-gray-500\" />\n        <span className=\"text-sm dark:text-gray-300\">\n          {todayHours.closed ? 'Closed' : formatHours(todayHours)}\n        </span>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckAccordionItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckBasicInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckContactInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":156,"column":17,"nodeType":"Identifier","messageId":"anyAssignment","endLine":156,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":168,"column":17,"nodeType":"Identifier","messageId":"anyAssignment","endLine":168,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":180,"column":17,"nodeType":"Identifier","messageId":"anyAssignment","endLine":180,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Phone, Mail, Globe } from 'lucide-react';\r\nimport type { FoodTruck } from '@/lib/supabase';\r\n\r\ninterface TruckContactInfoProps {\r\n  readonly truck: FoodTruck;\r\n}\r\n\r\ninterface ContactFieldProps {\r\n  readonly icon: React.ComponentType<{ className?: string }>;\r\n  readonly label: string;\r\n  readonly value?: string | null;\r\n  readonly href?: string;\r\n  readonly unavailableText: string;\r\n}\r\n\r\n/**\r\n * Renders a contact field with icon, label, and value, handling both available and unavailable states.\r\n * @example\r\n * ContactField({\r\n *   icon: EmailIcon,\r\n *   label: 'Email',\r\n *   value: 'example@example.com',\r\n *   href: 'mailto:example@example.com',\r\n *   unavailableText: 'Not Available'\r\n * })\r\n * <div>...</div>\r\n * @param {React.ComponentType} icon - The icon component to display in the contact field.\r\n * @param {string} label - The label to display above the contact value.\r\n * @param {string} value - The contact value to display; if undefined or empty, displays unavailableText instead.\r\n * @param {string} [href] - The link associated with the contact value for redirection. Determines link behavior based on URL format.\r\n * @param {string} unavailableText - Text displayed when value is unavailable or empty.\r\n * @returns {JSX.Element} JSX structure for the contact field.\r\n * @description\r\n *   - Opens external links in a new tab with 'noopener noreferrer' for security.\r\n *   - Conditionally renders either a hyperlink or plain text based on value and href.\r\n *   - Applies specific styling based on the availability of the value.\r\n */\r\nfunction ContactField({\r\n  icon: Icon,\r\n  label,\r\n  value,\r\n  href,\r\n  unavailableText,\r\n}: Readonly<ContactFieldProps>) {\r\n  if (value == undefined || value.length === 0) {\r\n    // Handles null, undefined, and empty string\r\n    return (\r\n      <div className=\"flex items-center gap-3 text-gray-400\">\r\n        <Icon className=\"size-4\" />\r\n        <span className=\"text-sm\">{unavailableText}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-3\">\r\n      <Icon className=\"size-4 text-gray-500\" />\r\n      <div>\r\n        <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{label}</label>\r\n        {href !== undefined && href !== '' ? (\r\n          <a\r\n            href={href}\r\n            target={href.startsWith('http') ? '_blank' : undefined}\r\n            rel={href.startsWith('http') ? 'noopener noreferrer' : undefined}\r\n            className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline\"\r\n          >\r\n            {href.startsWith('http') ? 'Visit Website' : value}\r\n          </a>\r\n        ) : (\r\n          <p className=\"text-gray-900 dark:text-gray-200\">{value}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Renders social media links based on provided handles.\r\n * @example\r\n * SocialMediaLinks({ socialMedia: { instagram: 'insta_user', twitter: 'twit_user' } })\r\n * Renders and displays links for Instagram and Twitter.\r\n * @param {Object} {socialMedia} - Contains platform keys mapped to user handles.\r\n * @returns {JSX.Element|undefined} A JSX element displaying social media links or undefined if no valid links exist.\r\n * @description\r\n *   - Checks for undefined or empty socialMedia input to prevent unnecessary rendering.\r\n *   - Supports Instagram, Facebook, and Twitter platforms with specific styles.\r\n *   - Handles links are generated dynamically based on platform keys and user handles.\r\n *   - Applies consistent styling for light and dark themes using color properties.\r\n */\r\nfunction SocialMediaLinks({\r\n  socialMedia,\r\n}: Readonly<{ readonly socialMedia?: Record<string, string> }>) {\r\n  if (socialMedia == undefined || Object.keys(socialMedia).length === 0) {\r\n    return;\r\n  }\r\n\r\n  const socialPlatforms = [\r\n    { key: 'instagram', name: 'Instagram', baseUrl: 'https://instagram.com/', color: 'pink' },\r\n    { key: 'facebook', name: 'Facebook', baseUrl: 'https://facebook.com/', color: 'blue' },\r\n    { key: 'twitter', name: 'Twitter', baseUrl: 'https://twitter.com/', color: 'sky' },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Social Media</label>\r\n      <div className=\"flex flex-wrap gap-2 mt-2\">\r\n        {socialPlatforms.map(({ key, name, baseUrl, color }) => {\r\n          const handle = socialMedia[key];\r\n          if (handle == undefined || handle.length === 0) return; // Handles null, undefined, and empty string\r\n\r\n          return (\r\n            <a\r\n              key={key}\r\n              href={`${baseUrl}${handle}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className={`flex items-center gap-1 px-2 py-1 bg-${color}-100 text-${color}-800 rounded-md text-sm hover:bg-${color}-200 dark:bg-${color}-900 dark:text-${color}-200`}\r\n            >\r\n              <Globe className=\"size-3\" />\r\n              {name}\r\n            </a>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Renders a truck's contact information within a styled card component.\r\n * @example\r\n * TruckContactInfo({ truck: sampleTruckObject })\r\n * <Card>...</Card>\r\n * @param {Readonly<TruckContactInfoProps>} {truck} - Object containing truck's contact information and social media links.\r\n * @returns {JSX.Element} A card component displaying various contact fields and social media links.\r\n * @description\r\n *   - Utilizes conditional rendering to display availability of contact information.\r\n *   - Applies Tailwind CSS classes for dark mode styling.\r\n *   - Integrates icons alongside contact labels for visual aid.\r\n *   - SocialMediaLinks component is used to list the truck's social media presence.\r\n */\r\nexport function TruckContactInfo({ truck }: Readonly<TruckContactInfoProps>) {\r\n  return (\r\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n          <Phone className=\"size-5\" />\r\n          Contact Information\r\n        </CardTitle>\r\n        <CardDescription className=\"dark:text-gray-400\">Get in touch</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <ContactField\r\n          icon={Phone}\r\n          label=\"Phone\"\r\n          value={truck.contact_info?.phone}\r\n          href={\r\n            truck.contact_info?.phone !== undefined && truck.contact_info.phone !== ''\r\n              ? `tel:${truck.contact_info.phone}`\r\n              : undefined\r\n          }\r\n          unavailableText=\"No phone number available\"\r\n        />\r\n\r\n        <ContactField\r\n          icon={Mail}\r\n          label=\"Email\"\r\n          value={truck.contact_info?.email}\r\n          href={\r\n            truck.contact_info?.email !== undefined && truck.contact_info.email !== ''\r\n              ? `mailto:${truck.contact_info.email}`\r\n              : undefined\r\n          }\r\n          unavailableText=\"No email available\"\r\n        />\r\n\r\n        <ContactField\r\n          icon={Globe}\r\n          label=\"Website\"\r\n          value={truck.contact_info?.website}\r\n          href={truck.contact_info?.website}\r\n          unavailableText=\"No website available\"\r\n        />\r\n\r\n        <SocialMediaLinks socialMedia={truck.social_media} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckLocationInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckOperatingHours.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckRatingsReviews.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AlertDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":89,"column":56,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":89,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":89,"column":56,"nodeType":"Identifier","messageId":"unsafeCall","endLine":89,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":99,"column":19,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":99,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":99,"column":19,"nodeType":"Identifier","messageId":"unsafeCall","endLine":99,"endColumn":33}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/components/ui/button';\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\n        className,\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />\n);\nAlertDialogHeader.displayName = 'AlertDialogHeader';\n\nconst AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = 'AlertDialogFooter';\n\nconst AlertDialogTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold', className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ContactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\NavigationMenu.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":37,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":39,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":37,"column":36,"nodeType":"Identifier","messageId":"unsafeCall","endLine":37,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":47,"column":19,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":47,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":47,"column":19,"nodeType":"Identifier","messageId":"unsafeCall","endLine":47,"endColumn":45}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';\r\nimport { cva } from 'class-variance-authority';\r\nimport { ChevronDown } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst NavigationMenu = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Root\r\n    ref={ref}\r\n    className={cn('relative z-10 flex max-w-max flex-1 items-center justify-center', className)}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <NavigationMenuViewport />\r\n  </NavigationMenuPrimitive.Root>\r\n));\r\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\r\n\r\nconst NavigationMenuList = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.List\r\n    ref={ref}\r\n    className={cn('group flex flex-1 list-none items-center justify-center space-x-1', className)}\r\n    {...props}\r\n  />\r\n));\r\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\r\n\r\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\r\n\r\nconst navigationMenuTriggerStyle = cva(\r\n  'group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50',\r\n);\r\n\r\nconst NavigationMenuTrigger = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(navigationMenuTriggerStyle(), 'group', className)}\r\n    {...props}\r\n  >\r\n    {children}{' '}\r\n    <ChevronDown\r\n      className=\"relative top-[1px] ml-1 size-3 transition duration-200 group-data-[state=open]:rotate-180\"\r\n      aria-hidden=\"true\"\r\n    />\r\n  </NavigationMenuPrimitive.Trigger>\r\n));\r\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\r\n\r\nconst NavigationMenuContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\r\n\r\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\r\n\r\nconst NavigationMenuViewport = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\r\n>(({ className, ...props }, ref) => (\r\n  <div className={cn('absolute left-0 top-full flex justify-center')}>\r\n    <NavigationMenuPrimitive.Viewport\r\n      className={cn(\r\n        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',\r\n        className,\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  </div>\r\n));\r\nNavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;\r\n\r\nconst NavigationMenuIndicator = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Indicator\r\n    ref={ref}\r\n    className={cn(\r\n      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    <div className=\"relative top-[60%] size-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\r\n  </NavigationMenuPrimitive.Indicator>\r\n));\r\nNavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;\r\n\r\nexport {\r\n  navigationMenuTriggerStyle,\r\n  NavigationMenu,\r\n  NavigationMenuList,\r\n  NavigationMenuItem,\r\n  NavigationMenuContent,\r\n  NavigationMenuTrigger,\r\n  NavigationMenuLink,\r\n  NavigationMenuIndicator,\r\n  NavigationMenuViewport,\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ScrollArea.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":14,"column":47,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":14,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":24,"column":1,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":24,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Root on an `any` value.","line":24,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":18,"nodeType":"Identifier","messageId":"anyAssignment","endLine":32,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":37,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":37,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":1,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":44,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .ScrollAreaScrollbar on an `any` value.","line":44,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":64}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\n\nimport { cn } from '@/lib/utils';\n\nconst ScrollArea = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn('relative overflow-hidden', className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"size-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = 'vertical', ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      'flex touch-none select-none transition-colors',\n      orientation === 'vertical' && 'h-full w-2.5 border-l border-l-transparent p-[1px]',\n      orientation === 'horizontal' && 'h-2.5 flex-col border-t border-t-transparent p-[1px]',\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\SimpleQualityPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\SocialMediaSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ToggleGroup.tsx","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'VariantProps' is an 'error' type that acts as 'any' and overrides all other types in this intersection type.","line":18,"column":5,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":18,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":21,"column":43,"nodeType":"Property","messageId":"anyAssignment","endLine":21,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":21,"column":52,"nodeType":"Property","messageId":"anyAssignment","endLine":21,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ClassValue`.","line":24,"column":65,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":24,"endColumn":74},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'VariantProps' is an 'error' type that acts as 'any' and overrides all other types in this intersection type.","line":38,"column":5,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":38,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":40,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":40,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":42,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":42,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .size on an `error` typed value.","line":44,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .size on an `error` typed value.","line":44,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .size on an `error` typed value.","line":45,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .size on an `error` typed value.","line":45,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":47,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":47,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .size on an `error` typed value.","line":47,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":54,"column":9,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":57,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":54,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":54,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":55,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":55,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .variant on an `error` typed value.","line":55,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":56,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":56,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ClassValue`.","line":58,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":58,"endColumn":18}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';\nimport { type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\nimport { toggleVariants } from '@/components/ui/toggle';\n\nconst ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({\n  size: 'default',\n  variant: 'default',\n});\n\nconst ToggleGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => {\n  return (\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      <ToggleGroupPrimitive.Root\n        ref={ref}\n        className={cn('flex items-center justify-center gap-1', className)}\n        {...props}\n      >\n        {children}\n      </ToggleGroupPrimitive.Root>\n    </ToggleGroupContext.Provider>\n  );\n});\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;\n\nconst ToggleGroupItem = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext);\n  // Refactor to avoid nested ternary and use explicit length check\n  let computedSize = size;\n  if (\n    (typeof context.size === 'number' && context.size > 0) ||\n    (typeof context.size === 'string' && context.size.length > 0)\n  ) {\n    computedSize = context.size;\n  }\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant ?? variant,\n          size: computedSize,\n        }),\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  );\n});\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;\n\nexport { ToggleGroup, ToggleGroupItem };\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":13,"column":9,"nodeType":null,"messageId":"deprecation","endLine":13,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\alert.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":6,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":20,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":6,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":6,"endColumn":26},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'VariantProps' is an 'error' type that acts as 'any' and overrides all other types in this intersection type.","line":24,"column":42,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":24,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":26,"column":45,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":26,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":26,"column":45,"nodeType":"Identifier","messageId":"unsafeCall","endLine":26,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":26,"column":61,"nodeType":"Property","messageId":"anyAssignment","endLine":26,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ClassValue`.","line":26,"column":73,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":26,"endColumn":82}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst alertVariants = cva(\n  'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-background text-foreground',\n        destructive:\n          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div ref={ref} role=\"alert\" className={cn(alertVariants({ variant }), className)} {...props} />\n));\nAlert.displayName = 'Alert';\n\nconst AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => (\n    <h5\n      ref={ref}\n      className={cn('mb-1 font-medium leading-none tracking-tight', className)}\n      {...props}\n    />\n  ),\n);\nAlertTitle.displayName = 'AlertTitle';\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('text-sm [&_p]:leading-relaxed', className)} {...props} />\n));\nAlertDescription.displayName = 'AlertDescription';\n\nexport { Alert, AlertTitle, AlertDescription };\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\badge.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":6,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":23,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":6,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":6,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":32,"column":30,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":32,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":32,"column":30,"nodeType":"Identifier","messageId":"unsafeCall","endLine":32,"endColumn":43}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: 'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        destructive:\n          'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',\n        outline: 'text-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends Readonly<React.HTMLAttributes<HTMLSpanElement>>,\n    Readonly<VariantProps<typeof badgeVariants>> {\n  readonly variant?: 'default' | 'secondary' | 'destructive' | 'outline';\n}\n\nfunction Badge({ className, variant = 'default', ...props }: BadgeProps) {\n  return <span className={cn(badgeVariants({ variant }), className)} {...props} />;\n}\n\nexport { Badge, badgeVariants };\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\breadcrumb.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":42,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":42,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport { ChevronRight, MoreHorizontal } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst Breadcrumb = React.forwardRef<\r\n  HTMLElement,\r\n  React.ComponentPropsWithoutRef<'nav'> & {\r\n    separator?: React.ReactNode;\r\n  }\r\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />);\r\nBreadcrumb.displayName = 'Breadcrumb';\r\n\r\nconst BreadcrumbList = React.forwardRef<HTMLOListElement, React.ComponentPropsWithoutRef<'ol'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <ol\r\n      ref={ref}\r\n      className={cn(\r\n        'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nBreadcrumbList.displayName = 'BreadcrumbList';\r\n\r\nconst BreadcrumbItem = React.forwardRef<HTMLLIElement, React.ComponentPropsWithoutRef<'li'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <li ref={ref} className={cn('inline-flex items-center gap-1.5', className)} {...props} />\r\n  ),\r\n);\r\nBreadcrumbItem.displayName = 'BreadcrumbItem';\r\n\r\nconst BreadcrumbLink = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentPropsWithoutRef<'a'> & {\r\n    asChild?: boolean;\r\n  }\r\n>(({ asChild, className, ...props }, ref) => {\r\n  const Comp = asChild === true ? Slot : 'a';\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      className={cn('transition-colors hover:text-foreground', className)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nBreadcrumbLink.displayName = 'BreadcrumbLink';\r\n\r\nconst BreadcrumbPage = React.forwardRef<HTMLSpanElement, React.ComponentPropsWithoutRef<'span'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <span\r\n      ref={ref}\r\n      role=\"link\"\r\n      aria-disabled=\"true\"\r\n      aria-current=\"page\"\r\n      className={cn('font-normal text-foreground', className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nBreadcrumbPage.displayName = 'BreadcrumbPage';\r\n\r\nconst BreadcrumbSeparator = ({ children, className, ...props }: React.ComponentProps<'li'>) => (\r\n  <li\r\n    role=\"presentation\"\r\n    aria-hidden=\"true\"\r\n    className={cn('[&>svg]:w-3.5 [&>svg]:h-3.5', className)}\r\n    {...props}\r\n  >\r\n    {children ?? <ChevronRight />}\r\n  </li>\r\n);\r\nBreadcrumbSeparator.displayName = 'BreadcrumbSeparator';\r\n\r\nconst BreadcrumbEllipsis = ({ className, ...props }: React.ComponentProps<'span'>) => (\r\n  <span\r\n    role=\"presentation\"\r\n    aria-hidden=\"true\"\r\n    className={cn('flex h-9 w-9 items-center justify-center', className)}\r\n    {...props}\r\n  >\r\n    <MoreHorizontal className=\"size-4\" />\r\n    <span className=\"sr-only\">More</span>\r\n  </span>\r\n);\r\nBreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';\r\n\r\nexport {\r\n  Breadcrumb,\r\n  BreadcrumbList,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n  BreadcrumbEllipsis,\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\button.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":7,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":7,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":7,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":41,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":41,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":43,"column":27,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":43,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":43,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":43,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":43,"column":44,"nodeType":"Property","messageId":"anyAssignment","endLine":43,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":43,"column":53,"nodeType":"Property","messageId":"anyAssignment","endLine":43,"endColumn":57}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\r\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\r\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n        link: 'text-primary underline-offset-4 hover:underline',\r\n      },\r\n      size: {\r\n        default: 'h-10 px-4 py-2',\r\n        sm: 'h-9 rounded-md px-3',\r\n        lg: 'h-11 rounded-md px-8',\r\n        icon: 'size-10',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  readonly asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    return (\r\n      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />\r\n    );\r\n  },\r\n);\r\nButton.displayName = 'Button';\r\n\r\nexport { Button, buttonVariants };\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":35,"column":11,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":35,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":35,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":35,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":46,"column":11,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":46,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":46,"column":11,"nodeType":"Identifier","messageId":"unsafeCall","endLine":46,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport * as React from 'react';\r\nimport { DayPicker } from 'react-day-picker';\r\nimport { cn } from '@/lib/utils';\r\nimport { buttonVariants } from '@/components/ui/button';\r\n\r\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\r\n\r\n/**\r\n * Renders a calendar component with customizable day styles and navigation.\r\n * @example\r\n * Calendar({ className: 'my-class', classNames: { months: 'my-months' } })\r\n * // Returns a styled DayPicker component\r\n * @param {Object} { className, classNames, showOutsideDays } - Class names and props for customizing the calendar display.\r\n * @returns {JSX.Element} A DayPicker element with applied styles and functionality.\r\n * @description\r\n *   - Utilizes `DayPicker` from a UI library with styling and navigation customization.\r\n *   - Allows distinct styling for outside days, disabled days, and selected days.\r\n *   - Provides responsive flex layout for month display.\r\n *   - Navigation buttons are styled with varying opacity on hover.\r\n */\r\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {\r\n  return (\r\n    <DayPicker\r\n      showOutsideDays={showOutsideDays}\r\n      className={cn('p-3', className)}\r\n      classNames={{\r\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\r\n        month: 'space-y-4',\r\n        caption: 'flex justify-center pt-1 relative items-center',\r\n        caption_label: 'text-sm font-medium',\r\n        nav: 'space-x-1 flex items-center',\r\n        nav_button: cn(\r\n          buttonVariants({ variant: 'outline' }),\r\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100',\r\n        ),\r\n        nav_button_previous: 'absolute left-1',\r\n        nav_button_next: 'absolute right-1',\r\n        table: 'w-full border-collapse space-y-1',\r\n        head_row: 'flex',\r\n        head_cell: 'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\r\n        row: 'flex w-full mt-2',\r\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\r\n        day: cn(\r\n          buttonVariants({ variant: 'ghost' }),\r\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100',\r\n        ),\r\n        day_range_end: 'day-range-end',\r\n        day_selected:\r\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\r\n        day_today: 'bg-accent text-accent-foreground',\r\n        day_outside:\r\n          'day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground',\r\n        day_disabled: 'text-muted-foreground opacity-50',\r\n        day_range_middle: 'aria-selected:bg-accent aria-selected:text-accent-foreground',\r\n        day_hidden: 'invisible',\r\n        ...classNames,\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\nCalendar.displayName = 'Calendar';\r\n\r\nexport { Calendar };\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\carousel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":201,"column":18,"nodeType":"Identifier","messageId":"anyAssignment","endLine":201,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":202,"column":15,"nodeType":"Identifier","messageId":"anyAssignment","endLine":202,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":230,"column":18,"nodeType":"Identifier","messageId":"anyAssignment","endLine":230,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":231,"column":15,"nodeType":"Identifier","messageId":"anyAssignment","endLine":231,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport * as React from 'react';\r\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\r\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { Button } from '@/components/ui/button';\r\n\r\ntype CarouselApi = UseEmblaCarouselType[1];\r\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\r\ntype CarouselOptions = UseCarouselParameters[0];\r\ntype CarouselPlugin = UseCarouselParameters[1];\r\n\r\ntype CarouselProps = {\r\n  opts?: CarouselOptions;\r\n  plugins?: CarouselPlugin;\r\n  orientation?: 'horizontal' | 'vertical';\r\n  setApi?: (api: CarouselApi) => void;\r\n};\r\n\r\ntype CarouselContextProps = {\r\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\r\n  api: ReturnType<typeof useEmblaCarousel>[1];\r\n  scrollPrev: () => void;\r\n  scrollNext: () => void;\r\n  canScrollPrev: boolean;\r\n  canScrollNext: boolean;\r\n} & CarouselProps;\r\n\r\nconst CarouselContext = React.createContext<CarouselContextProps | undefined>(undefined);\r\n\r\nfunction useCarousel() {\r\n  const context = React.useContext(CarouselContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useCarousel must be used within a <Carousel />');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\n/**\r\n * Initializes and manages carousel control state and key events.\r\n * @example\r\n * const carouselControl = createCarouselControl(api, setApi);\r\n * carouselControl.scrollPrev(); // Scrolls to the previous item in the carousel.\r\n * @param {CarouselApi | undefined} api - Carousel API for performing scroll actions.\r\n * @param {((api: CarouselApi) => void) | undefined} setApi - Callback to set the current Carousel API instance.\r\n * @returns {object} Returns an object containing functions to scroll prev/next, check scroll state, and handle key events.\r\n * @description\r\n *   - Utilizes React hooks to manage state and handle side effects associated with the carousel operations.\r\n *   - Ensures the carousel API is bound and initialized properly through useEffect hooks.\r\n *   - Listens and responds to carousel-specific events like 'reInit' and 'select' to update scroll state.\r\n */\r\nconst useCarouselHandlers = (\r\n  api: CarouselApi | undefined,\r\n  setApi: ((api: CarouselApi) => void) | undefined,\r\n) => {\r\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false);\r\n  const [canScrollNext, setCanScrollNext] = React.useState(false);\r\n\r\n  const onSelect = React.useCallback((currentApi: CarouselApi) => {\r\n    if (!currentApi) return;\r\n    setCanScrollPrev(currentApi.canScrollPrev());\r\n    setCanScrollNext(currentApi.canScrollNext());\r\n  }, []);\r\n\r\n  const scrollPrev = React.useCallback(() => {\r\n    api?.scrollPrev();\r\n  }, [api]);\r\n\r\n  const scrollNext = React.useCallback(() => {\r\n    api?.scrollNext();\r\n  }, [api]);\r\n\r\n  const handleKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n      if (event.key === 'ArrowLeft') {\r\n        event.preventDefault();\r\n        scrollPrev();\r\n      } else if (event.key === 'ArrowRight') {\r\n        event.preventDefault();\r\n        scrollNext();\r\n      }\r\n    },\r\n    [scrollPrev, scrollNext],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (!api || !setApi) return;\r\n    setApi(api);\r\n  }, [api, setApi]);\r\n\r\n  React.useEffect(() => {\r\n    if (!api) return;\r\n    onSelect(api);\r\n    api.on('reInit', onSelect);\r\n    api.on('select', onSelect);\r\n    return () => {\r\n      api?.off('select', onSelect);\r\n    };\r\n  }, [api, onSelect]);\r\n\r\n  return { scrollPrev, scrollNext, canScrollPrev, canScrollNext, handleKeyDown };\r\n};\r\n\r\nconst Carousel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\r\n>(({ orientation = 'horizontal', opts, setApi, plugins, className, children, ...props }, ref) => {\r\n  const [carouselRef, api] = useEmblaCarousel(\r\n    {\r\n      ...opts,\r\n      axis: orientation === 'horizontal' ? 'x' : 'y',\r\n    },\r\n    plugins,\r\n  );\r\n\r\n  const { scrollPrev, scrollNext, canScrollPrev, canScrollNext, handleKeyDown } =\r\n    useCarouselHandlers(api, setApi);\r\n\r\n  return (\r\n    <CarouselContext.Provider\r\n      value={{\r\n        carouselRef,\r\n        api: api!, // Asserting as non-null as per original logic, but should be handled carefully\r\n        opts,\r\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\r\n        scrollPrev,\r\n        scrollNext,\r\n        canScrollPrev,\r\n        canScrollNext,\r\n      }}\r\n    >\r\n      <div\r\n        ref={ref}\r\n        onKeyDownCapture={handleKeyDown}\r\n        className={cn('relative', className)}\r\n        role=\"region\"\r\n        aria-roledescription=\"carousel\"\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    </CarouselContext.Provider>\r\n  );\r\n});\r\nCarousel.displayName = 'Carousel';\r\n\r\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\r\n  ({ className, ...props }, ref) => {\r\n    const { carouselRef, orientation } = useCarousel();\r\n\r\n    return (\r\n      <div ref={carouselRef} className=\"overflow-hidden\">\r\n        <div\r\n          ref={ref}\r\n          className={cn(\r\n            'flex',\r\n            orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\r\n            className,\r\n          )}\r\n          {...props}\r\n        />\r\n      </div>\r\n    );\r\n  },\r\n);\r\nCarouselContent.displayName = 'CarouselContent';\r\n\r\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\r\n  ({ className, ...props }, ref) => {\r\n    const { orientation } = useCarousel();\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        role=\"group\"\r\n        aria-roledescription=\"slide\"\r\n        className={cn(\r\n          'min-w-0 shrink-0 grow-0 basis-full',\r\n          orientation === 'horizontal' ? 'pl-4' : 'pt-4',\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nCarouselItem.displayName = 'CarouselItem';\r\n\r\nconst CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\r\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\r\n    // Removed ts-expect-error\r\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        variant={variant} // Removed ts-expect-error\r\n        size={size}\r\n        className={cn(\r\n          'absolute  h-8 w-8 rounded-full',\r\n          orientation === 'horizontal'\r\n            ? '-left-12 top-1/2 -translate-y-1/2'\r\n            : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\r\n          className,\r\n        )}\r\n        disabled={!canScrollPrev}\r\n        onClick={scrollPrev}\r\n        {...props}\r\n      >\r\n        <ArrowLeft className=\"size-4\" />\r\n        <span className=\"sr-only\">Previous slide</span>\r\n      </Button>\r\n    );\r\n  },\r\n);\r\nCarouselPrevious.displayName = 'CarouselPrevious';\r\n\r\nconst CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\r\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\r\n    // Removed ts-expect-error\r\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        variant={variant} // Removed ts-expect-error\r\n        size={size}\r\n        className={cn(\r\n          'absolute h-8 w-8 rounded-full',\r\n          orientation === 'horizontal'\r\n            ? '-right-12 top-1/2 -translate-y-1/2'\r\n            : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\r\n          className,\r\n        )}\r\n        disabled={!canScrollNext}\r\n        onClick={scrollNext}\r\n        {...props}\r\n      >\r\n        <ArrowRight className=\"size-4\" />\r\n        <span className=\"sr-only\">Next slide</span>\r\n      </Button>\r\n    );\r\n  },\r\n);\r\nCarouselNext.displayName = 'CarouselNext';\r\n\r\nexport {\r\n  type CarouselApi,\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselPrevious,\r\n  CarouselNext,\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":120,"column":25,"nodeType":"TSFunctionType","messageId":"exceed","endLine":120,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\QualityPieChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipItemContent.tsx","messages":[],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":6,"column":24,"nodeType":"TSFunctionType","messageId":"exceed","endLine":6,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\getPayloadConfigFromPayload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\useTooltipLabel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dataQualityCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\label.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":9,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":11,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":9,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":9,"endColumn":26},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'VariantProps' is an 'error' type that acts as 'any' and overrides all other types in this intersection type.","line":15,"column":64,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":15,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":17,"column":48,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":17,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":17,"column":48,"nodeType":"Identifier","messageId":"unsafeCall","endLine":17,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ClassValue`.","line":17,"column":65,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":17,"endColumn":74}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst labelVariants = cva(\n  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n);\n\nconst Label = React.forwardRef<\n  HTMLLabelElement,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\pagination.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":50,"column":7,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":53,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":50,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":50,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\r\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { ButtonProps, buttonVariants } from '@/components/ui/button';\r\n\r\nconst Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (\r\n  <nav\r\n    role=\"navigation\"\r\n    aria-label=\"pagination\"\r\n    className={cn('mx-auto flex w-full justify-center', className)}\r\n    {...props}\r\n  />\r\n);\r\nPagination.displayName = 'Pagination';\r\n\r\nconst PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\r\n  ({ className, ...props }, ref) => (\r\n    <ul ref={ref} className={cn('flex flex-row items-center gap-1', className)} {...props} />\r\n  ),\r\n);\r\nPaginationContent.displayName = 'PaginationContent';\r\n\r\nconst PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\r\n  ({ className, ...props }, ref) => <li ref={ref} className={cn('', className)} {...props} />,\r\n);\r\nPaginationItem.displayName = 'PaginationItem';\r\n\r\ntype PaginationLinkProps = {\r\n  isActive?: boolean;\r\n} & Pick<ButtonProps, 'size'> &\r\n  React.ComponentProps<'a'>;\r\n\r\n/**\r\n * Renders a pagination link with dynamic attributes.\r\n * @example\r\n * PaginationLink({ className: 'custom-class', isActive: true })\r\n * <a aria-current=\"page\" class=\"button-class custom-class\" ...props></a>\r\n * @param {Object} PaginationLinkProps - Props containing className, isActive, size, and additional attributes.\r\n * @returns {JSX.Element} An anchor element with pagination related attributes and styles.\r\n * @description\r\n *   - Applies different styles based on whether the link is active or not.\r\n *   - Uses the `buttonVariants` function to determine the button style variant.\r\n *   - Further props can extend or override default attributes.\r\n */\r\nconst PaginationLink = ({ className, isActive, size = 'icon', ...props }: PaginationLinkProps) => (\r\n  <a\r\n    aria-current={isActive === true ? 'page' : undefined}\r\n    className={cn(\r\n      buttonVariants({\r\n        variant: isActive === true ? 'outline' : 'ghost',\r\n        size,\r\n      }),\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n);\r\nPaginationLink.displayName = 'PaginationLink';\r\n\r\n/**\r\n * Renders a customizable pagination link to navigate to the previous page.\r\n * @example\r\n * renderPreviousPageLink('custom-class', additionalProps)\r\n * // Renders a PaginationLink with a chevron and 'Previous' label.\r\n * @param {string} className - Additional CSS class names to style the PaginationLink.\r\n * @param {React.ComponentProps<typeof PaginationLink>} props - Additional properties passed to PaginationLink.\r\n * @returns {JSX.Element} A JSX Element rendering a PaginationLink.\r\n * @description\r\n *   - Uses default size and pre-defined optional class names for styling.\r\n *   - Automatically spreads additional props to the PaginationLink component.\r\n *   - Ensures navigation to the previous page with an accessible aria-label.\r\n */\r\nconst PaginationPrevious = ({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof PaginationLink>) => (\r\n  <PaginationLink\r\n    aria-label=\"Go to previous page\"\r\n    size=\"default\" // Removed ts-expect-error\r\n    className={cn('gap-1 pl-2.5', className)}\r\n    {...props}\r\n  >\r\n    <ChevronLeft className=\"size-4\" />\r\n    <span>Previous</span>\r\n  </PaginationLink>\r\n);\r\nPaginationPrevious.displayName = 'PaginationPrevious';\r\n\r\nconst PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (\r\n  <PaginationLink\r\n    aria-label=\"Go to next page\"\r\n    size=\"default\" // Removed ts-expect-error\r\n    className={cn('gap-1 pr-2.5', className)}\r\n    {...props}\r\n  >\r\n    <span>Next</span>\r\n    <ChevronRight className=\"size-4\" />\r\n  </PaginationLink>\r\n);\r\nPaginationNext.displayName = 'PaginationNext';\r\n\r\nconst PaginationEllipsis = ({ className, ...props }: React.ComponentProps<'span'>) => (\r\n  <span\r\n    aria-hidden\r\n    className={cn('flex h-9 w-9 items-center justify-center', className)}\r\n    {...props}\r\n  >\r\n    <MoreHorizontal className=\"size-4\" />\r\n    <span className=\"sr-only\">More pages</span>\r\n  </span>\r\n);\r\nPaginationEllipsis.displayName = 'PaginationEllipsis';\r\n\r\nexport {\r\n  Pagination,\r\n  PaginationContent,\r\n  PaginationEllipsis,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  PaginationNext,\r\n  PaginationPrevious,\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\separator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":14,"column":17,"nodeType":"Identifier","messageId":"anyAssignment","endLine":14,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":15,"column":18,"nodeType":"Identifier","messageId":"anyAssignment","endLine":15,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":19,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":19,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":24,"column":1,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":24,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Root on an `any` value.","line":24,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":48}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport * as SeparatorPrimitive from '@radix-ui/react-separator';\n\nimport { cn } from '@/lib/utils';\n\nconst Separator = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(({ className, orientation = 'horizontal', decorative = true, ...props }, ref) => (\n  <SeparatorPrimitive.Root\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}\n    className={cn(\n      'shrink-0 bg-border',\n      orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',\n      className,\n    )}\n    {...props}\n  />\n));\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\n\nexport { Separator };\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sheet.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":34,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":51,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":34,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":34,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":64,"column":53,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":64,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":64,"column":53,"nodeType":"Identifier","messageId":"unsafeCall","endLine":64,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":64,"column":69,"nodeType":"Property","messageId":"anyAssignment","endLine":64,"endColumn":73}],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":20,"column":9,"nodeType":null,"messageId":"deprecation","endLine":20,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":59,"column":9,"nodeType":null,"messageId":"deprecation","endLine":59,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]}],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as SheetPrimitive from '@radix-ui/react-dialog';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport { X } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst Sheet = SheetPrimitive.Root;\r\n\r\nconst SheetTrigger = SheetPrimitive.Trigger;\r\n\r\nconst SheetClose = SheetPrimitive.Close;\r\n\r\nconst SheetPortal = SheetPrimitive.Portal;\r\n\r\nconst SheetOverlay = React.forwardRef<\r\n  // eslint-disable-next-line sonarjs/deprecation -- False positive, ElementRef is not deprecated.\r\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <SheetPrimitive.Overlay\r\n    className={cn(\r\n      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\r\n      className,\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  />\r\n));\r\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\r\n\r\nconst sheetVariants = cva(\r\n  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\r\n  {\r\n    variants: {\r\n      side: {\r\n        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',\r\n        bottom:\r\n          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',\r\n        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',\r\n        right:\r\n          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      side: 'right',\r\n    },\r\n  },\r\n);\r\n\r\ninterface SheetContentProps\r\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\r\n    VariantProps<typeof sheetVariants> {}\r\n\r\nconst SheetContent = React.forwardRef<\r\n  // eslint-disable-next-line sonarjs/deprecation -- False positive, ElementRef is not deprecated.\r\n  React.ElementRef<typeof SheetPrimitive.Content>,\r\n  SheetContentProps\r\n>(({ side = 'right', className, children, ...props }, ref) => (\r\n  <SheetPortal>\r\n    <SheetOverlay />\r\n    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>\r\n      {children}\r\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\r\n        <X className=\"size-4\" />\r\n        <span className=\"sr-only\">Close</span>\r\n      </SheetPrimitive.Close>\r\n    </SheetPrimitive.Content>\r\n  </SheetPortal>\r\n));\r\nSheetContent.displayName = SheetPrimitive.Content.displayName;\r\n\r\nconst SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />\r\n);\r\nSheetHeader.displayName = 'SheetHeader';\r\n\r\nconst SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\r\n    {...props}\r\n  />\r\n);\r\nSheetFooter.displayName = 'SheetFooter';\r\n\r\nconst SheetTitle = React.forwardRef<\r\n  HTMLHeadingElement,\r\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <SheetPrimitive.Title\r\n    ref={ref}\r\n    className={cn('text-lg font-semibold text-foreground', className)}\r\n    {...props}\r\n  />\r\n));\r\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\r\n\r\nconst SheetDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <SheetPrimitive.Description\r\n    ref={ref}\r\n    className={cn('text-sm text-muted-foreground', className)}\r\n    {...props}\r\n  />\r\n));\r\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\r\n\r\nexport {\r\n  Sheet,\r\n  SheetPortal,\r\n  SheetOverlay,\r\n  SheetTrigger,\r\n  SheetClose,\r\n  SheetContent,\r\n  SheetHeader,\r\n  SheetFooter,\r\n  SheetTitle,\r\n  SheetDescription,\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":83,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":83,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":376,"column":54,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":376,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":418,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":418,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":439,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":439,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":494,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":514,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":494,"column":35,"nodeType":"Identifier","messageId":"unsafeCall","endLine":494,"endColumn":38},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'VariantProps' is an 'error' type that acts as 'any' and overrides all other types in this intersection type.","line":522,"column":7,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":522,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":536,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":536,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":536,"column":18,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":536,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[17489,17496],"text":"(Boolean(asChild))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":543,"column":20,"nodeType":"Identifier","messageId":"anyAssignment","endLine":543,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":544,"column":22,"nodeType":"Identifier","messageId":"anyAssignment","endLine":544,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":545,"column":23,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":545,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":545,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":545,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":545,"column":51,"nodeType":"Property","messageId":"anyAssignment","endLine":545,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":545,"column":60,"nodeType":"Property","messageId":"anyAssignment","endLine":545,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ClassValue`.","line":545,"column":69,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":545,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":582,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":582,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":692,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":692,"endColumn":36}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { VariantProps, cva } from 'class-variance-authority';\nimport { PanelLeft } from 'lucide-react';\n\nimport { useIsMobile } from '@/hooks/UseMobile';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\nimport { Sheet, SheetContent } from '@/components/ui/sheet';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport * as Cookies from 'js-cookie';\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar:state';\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = '16rem';\nconst SIDEBAR_WIDTH_MOBILE = '18rem';\nconst SIDEBAR_WIDTH_ICON = '3rem';\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b';\n\ntype SidebarContext = {\n  state: 'expanded' | 'collapsed';\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | undefined>(undefined);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error('useSidebar must be used within a SidebarProvider.');\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === 'function' ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        Cookies.set(SIDEBAR_COOKIE_NAME, String(openState), {\n          path: '/',\n          expires: SIDEBAR_COOKIE_MAX_AGE / (60 * 60 * 24), // Convert seconds to days\n        });\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      globalThis.addEventListener('keydown', handleKeyDown);\n      return () => globalThis.removeEventListener('keydown', handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? 'expanded' : 'collapsed';\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                '--sidebar-width': SIDEBAR_WIDTH,\n                '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              'group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar',\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = 'SidebarProvider';\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    side?: 'left' | 'right';\n    variant?: 'sidebar' | 'floating' | 'inset';\n    collapsible?: 'offcanvas' | 'icon' | 'none';\n  }\n>(\n  (\n    {\n      side = 'left',\n      variant = 'sidebar',\n      collapsible = 'offcanvas',\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === 'none') {\n      return (\n        <div\n          className={cn(\n            'flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground',\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex size-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === 'collapsed' ? collapsible : ''}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            'duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear',\n            'group-data-[collapsible=offcanvas]:w-0',\n            'group-data-[side=right]:rotate-180',\n            variant === 'floating' || variant === 'inset'\n              ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]'\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon]',\n          )}\n        />\n        <div\n          className={cn(\n            'duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex',\n            side === 'left'\n              ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\n              : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\n            // Adjust the padding for floating and inset variants.\n            variant === 'floating' || variant === 'inset'\n              ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex size-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = 'Sidebar';\n\nconst SidebarTrigger = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, onClick, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <Button\n        ref={ref}\n        data-sidebar=\"trigger\"\n                variant=\"ghost\"\n        size=\"icon\"\n        className={cn('h-7 w-7', className)}\n        onClick={(event) => {\n          onClick?.(event);\n          toggleSidebar();\n        }}\n        {...props}\n      >\n        <PanelLeft />\n        <span className=\"sr-only\">Toggle Sidebar</span>\n      </Button>\n    );\n  },\n);\nSidebarTrigger.displayName = 'SidebarTrigger';\n\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<'button'>>(\n  ({ className, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <button\n        ref={ref}\n        data-sidebar=\"rail\"\n        aria-label=\"Toggle Sidebar\"\n        tabIndex={-1}\n        onClick={toggleSidebar}\n        title=\"Toggle Sidebar\"\n        className={cn(\n          'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',\n          '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',\n          '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\n          'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar',\n          '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\n          '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarRail.displayName = 'SidebarRail';\n\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<'main'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <main\n        ref={ref}\n        className={cn(\n          'relative flex min-h-svh flex-1 flex-col bg-background',\n          'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInset.displayName = 'SidebarInset';\n\nconst SidebarInput = React.forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Input\n        ref={ref}\n        data-sidebar=\"input\"\n        className={cn(\n          'h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInput.displayName = 'SidebarInput';\n\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"header\"\n        className={cn('flex flex-col gap-2 p-2', className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarHeader.displayName = 'SidebarHeader';\n\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"footer\"\n        className={cn('flex flex-col gap-2 p-2', className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarFooter.displayName = 'SidebarFooter';\n\nconst SidebarSeparator = React.forwardRef<HTMLDivElement, React.ComponentProps<typeof Separator>>(\n  ({ className, ...props }, ref) => (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn('mx-2 w-auto bg-sidebar-border', className)}\n      {...props}\n    />\n  ),\n);\nSidebarSeparator.displayName = 'SidebarSeparator';\n\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"content\"\n        className={cn(\n          'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarContent.displayName = 'SidebarContent';\n\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"group\"\n        className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroup.displayName = 'SidebarGroup';\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        'duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = 'SidebarGroupLabel';\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        'absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 after:md:hidden',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = 'SidebarGroupAction';\n\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"group-content\"\n      className={cn('w-full text-sm', className)}\n      {...props}\n    />\n  ),\n);\nSidebarGroupContent.displayName = 'SidebarGroupContent';\n\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu\"\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\n      {...props}\n    />\n  ),\n);\nSidebarMenu.displayName = 'SidebarMenu';\n\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\n  ({ className, ...props }, ref) => (\n    <li\n      ref={ref}\n      data-sidebar=\"menu-item\"\n      className={cn('group/menu-item relative', className)}\n      {...props}\n    />\n  ),\n);\nSidebarMenuItem.displayName = 'SidebarMenuItem';\n\nconst sidebarMenuButtonVariants = cva(\n  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\n        outline:\n          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\n      },\n      size: {\n        default: 'h-8 text-sm',\n        sm: 'h-7 text-xs',\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = 'default',\n      size = 'default',\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : 'button';\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (tooltip == undefined) {\n      return button;\n    }\n\n    if (typeof tooltip === 'string') {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== 'collapsed' || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = 'SidebarMenuButton';\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        'absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 after:md:hidden',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        showOnHover &&\n          'group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = 'SidebarMenuAction';\n\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        'absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none',\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuBadge.displayName = 'SidebarMenuBadge';\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Predictable width between 50 to 90%.\n\n  const width = React.useMemo(() => {\n    // Use a more predictable approach for skeleton width to avoid pseudorandom warning\n    const widths = ['50%', '60%', '70%', '80%', '90%'];\n    const index = Math.floor(Date.now() / 1000) % widths.length;\n    return widths[index];\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn('rounded-md h-8 flex gap-2 px-2 items-center', className)}\n      {...props}\n    >\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            '--skeleton-width': width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = 'SidebarMenuSkeleton';\n\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        'mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuSub.displayName = 'SidebarMenuSub';\n\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\n  ({ ...props }, ref) => <li ref={ref} {...props} />,\n);\nSidebarMenuSubItem.displayName = 'SidebarMenuSubItem';\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<'a'> & {\n    asChild?: boolean;\n    size?: 'sm' | 'md';\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = 'md', isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'a';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        'flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground',\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\n        size === 'sm' && 'text-xs',\n        size === 'md' && 'text-sm',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = 'SidebarMenuSubButton';\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sonner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":5,"column":1,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":5,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { Toaster as SonnerToaster } from 'sonner';\nimport { useTheme } from 'next-themes';\n\n'use client';\n\ntype ToasterProps = React.ComponentProps<typeof SonnerToaster>;\n\n/**\n * Renders a Sonner toast notification with a customizable theme and style.\n * @example\n * renderToaster({ theme: 'light', position: 'top-right' })\n * Creates a toaster with a light theme positioned at the top-right of the screen.\n * @param {ToasterProps} props - Props for customizing the toaster appearance and behavior.\n * @returns {JSX.Element} A JSX element rendering the custom-styled toaster notification.\n * @description\n *   - Applies default theme as 'system' if no theme is specified.\n *   - Utilizes class groups for styling elements based on the parent toaster class.\n *   - Binds toast option classes to style various components like toast and buttons.\n *   - Requires React JSX environment to render properly.\n */\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme();\n\n  return (\n    <SonnerToaster\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',\n          description: 'group-[.toast]:text-muted-foreground',\n          actionButton: 'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',\n          cancelButton: 'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',\n        },\n      }}\n      {...props}\n    />\n  );\n};\n\nexport { Toaster };\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toast.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":30,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":30,"endColumn":26},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'VariantProps' is an 'error' type that acts as 'any' and overrides all other types in this intersection type.","line":48,"column":65,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":48,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":53,"column":21,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":53,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":53,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":53,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":37,"nodeType":"Property","messageId":"anyAssignment","endLine":53,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ClassValue`.","line":53,"column":49,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":53,"endColumn":58}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport * as React from 'react';\r\n// @ts-expect-error TS(2792): Cannot find module '@radix-ui/react-toast'. Did yo... Remove this comment to see the full error message\r\nimport * as ToastPrimitives from '@radix-ui/react-toast';\r\n// @ts-expect-error TS(2792): Cannot find module 'class-variance-authority'. Did... Remove this comment to see the full error message\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\r\nimport { X } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst ToastProvider = ToastPrimitives.Provider;\r\n\r\nconst ToastViewport = React.forwardRef<\r\n  HTMLOListElement,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Viewport\r\n    ref={ref}\r\n    className={cn(\r\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\r\n\r\nconst toastVariants = cva(\r\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'border bg-background text-foreground',\r\n        destructive:\r\n          'destructive group border-destructive bg-destructive text-destructive-foreground',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n    },\r\n  },\r\n);\r\n\r\nconst Toast = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>\r\n>(({ className, variant, ...props }, ref) => {\r\n  return (\r\n    <ToastPrimitives.Root\r\n      ref={ref}\r\n      className={cn(toastVariants({ variant }), className)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nToast.displayName = ToastPrimitives.Root.displayName;\r\n\r\nconst ToastAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Action\r\n    ref={ref}\r\n    className={cn(\r\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nToastAction.displayName = ToastPrimitives.Action.displayName;\r\n\r\nconst ToastClose = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Close\r\n    ref={ref}\r\n    className={cn(\r\n      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\r\n      className,\r\n    )}\r\n    toast-close=\"\"\r\n    {...props}\r\n  >\r\n    <X className=\"size-4\" />\r\n  </ToastPrimitives.Close>\r\n));\r\nToastClose.displayName = ToastPrimitives.Close.displayName;\r\n\r\nconst ToastTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Title ref={ref} className={cn('text-sm font-semibold', className)} {...props} />\r\n));\r\nToastTitle.displayName = ToastPrimitives.Title.displayName;\r\n\r\nconst ToastDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <ToastPrimitives.Description\r\n    ref={ref}\r\n    className={cn('text-sm opacity-90', className)}\r\n    {...props}\r\n  />\r\n));\r\nToastDescription.displayName = ToastPrimitives.Description.displayName;\r\n\r\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\r\n\r\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\r\n\r\nexport {\r\n  type ToastProps,\r\n  type ToastActionElement,\r\n  ToastProvider,\r\n  ToastViewport,\r\n  Toast,\r\n  ToastTitle,\r\n  ToastDescription,\r\n  ToastClose,\r\n  ToastAction,\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toaster.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":33,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `ArrayLike<unknown> | { [s: string]: unknown; }`.","line":36,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":36,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":48,"column":23,"nodeType":"Identifier","messageId":"anyAssignment","endLine":48,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useToast } from '@/hooks/UseToast';\r\nimport {\r\n  Toast,\r\n  ToastClose,\r\n  ToastDescription,\r\n  ToastProvider,\r\n  ToastTitle,\r\n  ToastViewport,\r\n} from '@/components/ui/toast';\r\nimport type { ToasterToast } from '@/hooks/UseToast';\r\n\r\n/**\r\n * Renders a Toast notification component with safe props.\r\n * @example\r\n * Toaster()\r\n * Displays a series of Toast notifications based on the state of useToast.\r\n * @param {Object} toasts - Array of toast objects containing necessary information to render each toast.\r\n * @returns {JSX.Element} A ToastProvider containing mapped Toast components.\r\n * @description\r\n *   - Filters toast props to ensure only predefined safe keys are spread into the Toast component.\r\n *   - Uses a grid layout to organize toast title and description.\r\n *   - Includes a ToastClose component for dismissing the toast.\r\n *   - Provides a ToastViewport for displaying the toast notifications on-screen.\r\n */\r\nexport function Toaster() {\r\n  const { toasts }: { toasts: ToasterToast[] } = useToast();\r\n\r\n  return (\r\n    <ToastProvider>\r\n      {toasts.map((toast: ToasterToast) => {\r\n        const { id, title, description, action, ...props } = toast;\r\n        // Only spread props that are safe and expected by <Toast>\r\n        const safeProps = Object.fromEntries(\r\n          Object.entries(props).filter(([key]) =>\r\n            [\r\n              'type',\r\n              'duration',\r\n              'onOpenChange',\r\n              'open',\r\n              'variant',\r\n              // add other allowed keys as needed\r\n            ].includes(key),\r\n          ),\r\n        );\r\n        return (\r\n          <Toast key={id} {...safeProps}>\r\n            <div className=\"grid gap-1\">\r\n              {title != undefined && title !== '' && <ToastTitle>{title}</ToastTitle>}\r\n              {description != undefined && description !== '' && (\r\n                <ToastDescription>{description}</ToastDescription>\r\n              )}\r\n            </div>\r\n            {action}\r\n            <ToastClose />\r\n          </Toast>\r\n        );\r\n      })}\r\n      <ToastViewport />\r\n    </ToastProvider>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toggle.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":9,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":9,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":9,"endColumn":27},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'VariantProps' is an 'error' type that acts as 'any' and overrides all other types in this intersection type.","line":32,"column":65,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":32,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ClassValue`.","line":36,"column":19,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":36,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":36,"column":19,"nodeType":"Identifier","messageId":"unsafeCall","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":36,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":45,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":36,"column":51,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":60}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport * as TogglePrimitive from '@radix-ui/react-toggle';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst toggleVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline: 'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-10 px-3 min-w-10',\n        sm: 'h-9 px-2.5 min-w-9',\n        lg: 'h-11 px-5 min-w-11',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseToast.ts","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this intersection type.","line":11,"column":28,"nodeType":"TSTypeReference","messageId":"overrides","endLine":11,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":79,"column":19,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":79,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":84,"column":36,"nodeType":"ConditionalExpression","messageId":"unsafeReturn","endLine":84,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":84,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":84,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":106,"column":24,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":106,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":106,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":113,"column":8,"nodeType":"ConditionalExpression","messageId":"unsafeReturn","endLine":118,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":113,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":144,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string | undefined`.","line":169,"column":40,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":169,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string | undefined`.","line":172,"column":39,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":172,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":212,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":212,"endColumn":30}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from 'react';\r\n\r\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\r\n\r\nconst TOAST_LIMIT = 1;\r\nconst TOAST_REMOVE_DELAY = 1_000_000;\r\n\r\nexport type ToasterToast = ToastProps & {\r\n  id: string;\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  action?: ToastActionElement;\r\n};\r\n\r\nlet count = 0;\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\r\n  return count.toString();\r\n}\r\n\r\ntype Action =\r\n  | {\r\n      type: 'ADD_TOAST';\r\n      toast: ToasterToast;\r\n    }\r\n  | {\r\n      type: 'UPDATE_TOAST';\r\n      toast: Partial<ToasterToast>;\r\n    }\r\n  | {\r\n      type: 'DISMISS_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    }\r\n  | {\r\n      type: 'REMOVE_TOAST';\r\n      toastId?: ToasterToast['id'];\r\n    };\r\n\r\ninterface State {\r\n  toasts: ToasterToast[];\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\r\n\r\n/**\r\n* Checks if a toast notification is active by its ID, sets a removal timeout if not.\r\n* @example\r\n* toastId('notification1')\r\n* undefined\r\n* @param {string} toastId - Unique identifier for the toast notification.\r\n* @returns {void} Does not return a value, performs side effects.\r\n* @description\r\n*   - Utilizes a timeout to automatically remove a toast notification after a predefined delay.\r\n*   - Ensures that a toast notification is only removed if it exists, preventing redundant operations.\r\n*   - Utilizes a map called `toastTimeouts` to track active toast notifications and their removal timeouts.\r\n*/\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return;\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId);\r\n    dispatch({\r\n      type: 'REMOVE_TOAST',\r\n      toastId: toastId,\r\n    });\r\n  }, TOAST_REMOVE_DELAY);\r\n\r\n  toastTimeouts.set(toastId, timeout);\r\n};\r\n\r\nconst handleAddToast = (state: State, toast: ToasterToast): State => ({\r\n  ...state,\r\n  toasts: [toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n});\r\n\r\nconst handleUpdateToast = (state: State, toast: Partial<ToasterToast>): State => ({\r\n  ...state,\r\n  toasts: state.toasts.map((t) => (t.id === toast.id ? { ...t, ...toast } : t)),\r\n});\r\n\r\n/**\r\n* Updates the state by removing a toast with a specific id or all open toasts if the id is unspecified.\r\n* @example\r\n* updateToastState(currentState, \"toast123\")\r\n* { ...updatedState }\r\n* @param {State} state - The current state object containing toast information.\r\n* @param {string} [toastId] - Optional ID of the toast to be removed.\r\n* @returns {State} Updated state with specified toast closed or all toasts closed if no id is provided.\r\n* @description\r\n*   - `addToRemoveQueue(toastId)` is invoked with the given `toastId` or each toast's id if `toastId` is not defined.\r\n*   - If `toastId` is not provided, all toasts are set to open: false in the returned state.\r\n*   - Ensure that toast ID is not empty when provided.\r\n*   - The function handles updates immutably by returning a new state object.\r\n*/\r\nconst handleDismissToast = (state: State, toastId?: string): State => {\r\n  if (toastId != undefined && toastId !== '') {\r\n    addToRemoveQueue(toastId);\r\n  } else {\r\n    for (const toast of state.toasts) {\r\n      addToRemoveQueue(toast.id);\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    toasts: state.toasts.map((t) =>\r\n      (t.id === toastId || toastId === undefined\r\n        ? {\r\n            ...t,\r\n            open: false,\r\n          }\r\n        : t),\r\n    ),\r\n  };\r\n};\r\n\r\n/**\r\n* Removes toasts based on optional toastId or clears all if toastId not provided.\r\n* @example\r\n* updateToasts(state, '1234')\r\n* Returns state with toast having id '1234' removed.\r\n* @param {State} state - The current state containing toasts.\r\n* @param {string} [toastId] - Optional ID of the toast to be removed.\r\n* @returns {State} Updated state with specified toast removed or all toasts cleared.\r\n* @description\r\n*   - If toastId is not provided, all toasts will be removed from the state.\r\n*   - Ensures immutability by creating a new state object.\r\n*/\r\nconst handleRemoveToast = (state: State, toastId?: string): State => {\r\n  if (toastId === undefined) {\r\n    return {\r\n      ...state,\r\n      toasts: [],\r\n    };\r\n  }\r\n  return {\r\n    ...state,\r\n    toasts: state.toasts.filter((t) => t.id !== toastId),\r\n  };\r\n};\r\n\r\n/**\r\n* Manages toast notifications state transitions based on the action type.\r\n* @example\r\n* reducer(currentState, { type: 'ADD_TOAST', toast: newToast })\r\n* // returns new state with added toast\r\n* @param {State} state - Current state of the toast notifications.\r\n* @param {Action} action - Action describing the type of state transition and payload.\r\n* @returns {State} The new state of the toast notifications after applying the action.\r\n* @description\r\n*   - This function supports actions for adding, updating, dismissing, and removing toasts.\r\n*   - If the action type does not match any case, it returns the current state without modification.\r\n*/\r\nexport function reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n    case 'ADD_TOAST': {\r\n      return handleAddToast(state, action.toast);\r\n    }\r\n    case 'UPDATE_TOAST': {\r\n      return handleUpdateToast(state, action.toast);\r\n    }\r\n    case 'DISMISS_TOAST': {\r\n      return handleDismissToast(state, action.toastId);\r\n    }\r\n    case 'REMOVE_TOAST': {\r\n      return handleRemoveToast(state, action.toastId);\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\nconst listeners: Array<(state: State) => void> = [];\r\n\r\nlet memoryState: State = { toasts: [] };\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action);\r\n  for (const listener of listeners) {\r\n    listener(memoryState);\r\n  }\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, 'id'>;\r\n\r\n/**\r\n * Creates and manages a toast notification by dispatching actions.\r\n * @example\r\n * toast({ message: 'Hello, World!', duration: 3000 })\r\n * // Returns: { id: 'generated_id', dismiss: [Function], update: [Function] }\r\n * @param {Toast} props - The properties for the toast notification.\r\n * @returns {Object} - The id of the toast and functions to dismiss or update the toast.\r\n * @description\r\n *   - Generates a unique id for each toast.\r\n *   - Automatically opens the toast on creation and provides a mechanism to change its open state.\r\n *   - The `dismiss` function closes the toast notification.\r\n *   - The `update` function allows modification of toast properties after creation.\r\n */\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId();\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: 'UPDATE_TOAST',\r\n      toast: { ...props, id },\r\n    });\r\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\r\n\r\n  dispatch({\r\n    type: 'ADD_TOAST',\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open: boolean) => {\r\n        if (!open) dismiss();\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook to manage toast notifications in a React component\r\n * @example\r\n * const { toast, dismiss } = useToast();\r\n * toast({ title: \"Notification\", message: \"This is a toast message\" });\r\n * dismiss(toastId);\r\n * @returns {Object} Returns an object containing the current toast state, a toast function, and a dismiss function.\r\n * @description\r\n *   - The hook maintains a local state that is synchronized with a global listener list.\r\n *   - Automatically removes the state listener when the component unmounts.\r\n *   - The `dismiss` function optionally accepts a `toastId` to dismiss specific toast notifications.\r\n *   - Utilizes a global dispatch to manipulate toast notifications state.\r\n */\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState);\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState);\r\n    return () => {\r\n      const index = listeners.indexOf(setState);\r\n      if (index !== -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\r\n  };\r\n}\r\n\r\nexport { useToast, toast };\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\connectionManagementHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\createEventSourceConnection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\setupEventSourceListeners.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useAutoConnect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useEventHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAdminAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAuthHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useDataCleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckFinder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEventsHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSearchFiltersLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSidebarKeyboardShortcut.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlerts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useTruckCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\ScraperEngine.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":155,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":155,"endColumn":31}],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":326,"column":24,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":326,"endColumn":37,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical user agent selection."}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":342,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":342,"endColumn":42,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical random delays."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from './firecrawl'; // Import the firecrawl singleton\r\nimport * as crypto from 'node:crypto'; // Node.js crypto for secure randomness\r\n\r\ninterface InstagramPost {\r\n  id: string;\r\n  caption: string;\r\n  timestamp: string;\r\n  location: string;\r\n  hashtags: string[];\r\n  engagement: { likes: number; comments: number };\r\n}\r\n\r\ninterface InstagramProfile {\r\n  followers: number;\r\n  following: number;\r\n  posts_count: number;\r\n  bio: string;\r\n  contact_info: { email: string; phone: string };\r\n}\r\n\r\ninterface FacebookPost {\r\n  id: string;\r\n  content: string;\r\n  timestamp: string;\r\n  reactions: { likes: number; loves: number; shares: number };\r\n  comments: number;\r\n}\r\n\r\ninterface FacebookPageInfo {\r\n  likes: number;\r\n  followers: number;\r\n  check_ins: number;\r\n  about: string;\r\n  hours: Record<string, string>;\r\n}\r\n\r\ninterface TwitterTweet {\r\n  id: string;\r\n  text: string;\r\n  timestamp: string;\r\n  retweets: number;\r\n  likes: number;\r\n  replies: number;\r\n  location: string;\r\n}\r\n\r\ninterface TwitterProfile {\r\n  followers: number;\r\n  following: number;\r\n  tweets_count: number;\r\n  bio: string;\r\n  location: string;\r\n  website: string;\r\n}\r\n\r\ninterface InstagramData {\r\n  posts: InstagramPost[];\r\n  profile: InstagramProfile;\r\n}\r\n\r\ninterface FacebookData {\r\n  posts: FacebookPost[];\r\n  page_info: FacebookPageInfo;\r\n}\r\n\r\ninterface TwitterData {\r\n  tweets: TwitterTweet[];\r\n  profile: TwitterProfile;\r\n}\r\n\r\nexport interface WebsiteScrapeData {\r\n  markdown?: string;\r\n  html?: string;\r\n  metadata?: Record<string, unknown>;\r\n  is_fallback?: boolean;\r\n}\r\n\r\nexport interface ExtractedHTMLData {\r\n  name?: string;\r\n  location?: string;\r\n  phone?: string;\r\n  hours?: string;\r\n  menu?: { item: string; price: string }[];\r\n}\r\n\r\ninterface ScrapeResult {\r\n  success: boolean;\r\n  error?: string;\r\n  data?: InstagramData | FacebookData | TwitterData | WebsiteScrapeData | ExtractedHTMLData;\r\n  timestamp: string;\r\n  source: string;\r\n  note?: string;\r\n}\r\n\r\n// Core scraping engine with anti-detection measures\r\nexport class ScraperEngine {\r\n  private userAgents: string[];\r\n  private requestDelay: number;\r\n  private maxRetries: number;\r\n\r\n  constructor() {\r\n    this.userAgents = [\r\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n    ];\r\n    this.requestDelay = 2000;\r\n    this.maxRetries = 3;\r\n  }\r\n\r\n  private async performFallbackScrape(url: string): Promise<ScrapeResult> {\r\n    try {\r\n      const response = await fetch(url, { headers: { 'User-Agent': this.getRandomUserAgent() } });\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `HTTP error ${response.status}: ${response.statusText} during fallback fetch.`,\r\n        );\r\n      }\r\n      const htmlContent = await response.text();\r\n      return {\r\n        success: true,\r\n        data: {\r\n          html: htmlContent,\r\n          is_fallback: true,\r\n        },\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n        note: 'Fetched using basic fetch as Firecrawl failed.',\r\n      };\r\n    } catch (fallbackError) {\r\n      const errMsg =\r\n        fallbackError instanceof Error ? fallbackError.message : 'Unknown fallback fetch error';\r\n      console.warn(`Fallback fetch error for ${url}:`, errMsg);\r\n      return {\r\n        success: false,\r\n        error: \"That didn't work, please try again later.\",\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n      };\r\n    }\r\n  }\r\n\r\n  async scrapeWebsite(url: string, _selectors?: Record<string, string>): Promise<ScrapeResult> {\r\n    try {\r\n      const firecrawlResult = await firecrawl.scrapeUrl(url, {\r\n        formats: ['markdown', 'html'],\r\n        onlyMainContent: true,\r\n      });\r\n\r\n      if (firecrawlResult.success !== true || firecrawlResult.data == undefined) {\r\n        throw new Error(firecrawlResult.error ?? 'Firecrawl scraping failed to return data.');\r\n      }\r\n\r\n      const returnedData: WebsiteScrapeData = {};\r\n      if (firecrawlResult.data && typeof firecrawlResult.data === 'object') {\r\n        const firecrawlData = firecrawlResult.data as Record<string, unknown>;\r\n\r\n        if (typeof firecrawlData.markdown === 'string' && firecrawlData.markdown !== '') {\r\n          returnedData.markdown = firecrawlData.markdown;\r\n        }\r\n        if (typeof firecrawlData.html === 'string' && firecrawlData.html !== '') {\r\n          returnedData.html = firecrawlData.html;\r\n        }\r\n        if (firecrawlData.metadata != undefined && typeof firecrawlData.metadata === 'object') {\r\n          returnedData.metadata = firecrawlData.metadata as Record<string, unknown>;\r\n        }\r\n      }\r\n\r\n      if (\r\n        (returnedData.markdown == undefined || returnedData.markdown === '') &&\r\n        (returnedData.html == undefined || returnedData.html === '')\r\n      ) {\r\n        throw new Error('Firecrawl returned no markdown or HTML content.');\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: returnedData,\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn(`Scraping error for ${url} using Firecrawl:`, error);\r\n      console.info(`Falling back to basic fetch for ${url}`);\r\n      return await this.performFallbackScrape(url);\r\n    }\r\n  }\r\n\r\n  async scrapeSocialMedia(platform: string, handle: string): Promise<ScrapeResult> {\r\n    try {\r\n      await this.randomDelay();\r\n\r\n      switch (platform) {\r\n        case 'instagram': {\r\n          return await this.scrapeInstagram(handle);\r\n        }\r\n        case 'facebook': {\r\n          return await this.scrapeFacebook(handle);\r\n        }\r\n        case 'twitter': {\r\n          return await this.scrapeTwitter(handle);\r\n        }\r\n        default: {\r\n          throw new Error(`Unsupported platform: ${platform}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Social media scraping error for ${platform}/${handle}:`, error);\r\n      return {\r\n        success: false,\r\n        error: \"That didn't work, please try again later.\",\r\n        timestamp: new Date().toISOString(),\r\n        source: `social_media:${platform}:${handle}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async scrapeInstagram(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    const posts: InstagramPost[] = [\r\n      {\r\n        id: 'post_001',\r\n        caption: 'Fresh tacos available now at Mission St! 🌮 #foodtruck #tacos',\r\n        timestamp: new Date(Date.now() - 3_600_000).toISOString(),\r\n        location: 'Mission St, San Francisco',\r\n        hashtags: ['foodtruck', 'tacos', 'fresh'],\r\n        engagement: { likes: 45, comments: 8 },\r\n      },\r\n    ];\r\n    const profile: InstagramProfile = {\r\n      followers: 1250,\r\n      following: 340,\r\n      posts_count: 156,\r\n      bio: 'Best tacos in SF 🌮 Follow for daily locations!',\r\n      contact_info: {\r\n        email: 'contact@tacoparadise.com',\r\n        phone: '+1-555-0456',\r\n      },\r\n    };\r\n    const data: InstagramData = { posts, profile };\r\n    return {\r\n      success: true,\r\n      data,\r\n      timestamp: new Date().toISOString(),\r\n      source: `instagram:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeFacebook(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    const posts: FacebookPost[] = [\r\n      {\r\n        id: 'fb_post_001',\r\n        content: \"Today we'll be at Union Square from 11 AM to 3 PM! Come try our new BBQ burger!\",\r\n        timestamp: new Date(Date.now() - 7_200_000).toISOString(),\r\n        reactions: { likes: 23, loves: 5, shares: 3 },\r\n        comments: 12,\r\n      },\r\n    ];\r\n    const page_info: FacebookPageInfo = {\r\n      likes: 890,\r\n      followers: 1100,\r\n      check_ins: 450,\r\n      about: 'Gourmet food truck serving the Bay Area',\r\n      hours: {\r\n        monday: '11:00-15:00',\r\n        tuesday: '11:00-15:00',\r\n        wednesday: '11:00-15:00',\r\n        thursday: '11:00-15:00',\r\n        friday: '11:00-20:00',\r\n        saturday: '12:00-20:00',\r\n        sunday: '12:00-16:00',\r\n      },\r\n    };\r\n    const data: FacebookData = { posts, page_info };\r\n    return {\r\n      success: true,\r\n      data,\r\n      timestamp: new Date().toISOString(),\r\n      source: `facebook:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeTwitter(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay();\r\n    const tweets: TwitterTweet[] = [\r\n      {\r\n        id: 'tweet_001',\r\n        text: 'LIVE at Dolores Park! Fresh burritos and quesadillas available now 🌯',\r\n        timestamp: new Date(Date.now() - 1_800_000).toISOString(),\r\n        retweets: 8,\r\n        likes: 34,\r\n        replies: 5,\r\n        location: 'Dolores Park, San Francisco',\r\n      },\r\n    ];\r\n    const profile: TwitterProfile = {\r\n      followers: 2340,\r\n      following: 567,\r\n      tweets_count: 1890,\r\n      bio: '🚚 SF Food Truck | Fresh Mexican Food | Follow for locations',\r\n      location: 'San Francisco, CA',\r\n      website: 'https://tacoparadise.com',\r\n    };\r\n    const data: TwitterData = { tweets, profile };\r\n    return {\r\n      success: true,\r\n      data,\r\n      timestamp: new Date().toISOString(),\r\n      source: `twitter:${handle}`,\r\n    };\r\n  }\r\n\r\n  private getRandomUserAgent(): string {\r\n    // Use Node.js crypto for stronger randomness if available, fallback to Math.random otherwise.\r\n    let idx: number;\r\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\r\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\r\n      idx = array[0] % this.userAgents.length;\r\n    } else if (typeof crypto.randomInt === 'function') {\r\n      idx = crypto.randomInt(0, this.userAgents.length);\r\n    } else {\r\n      // Fallback to Math.random for environments where crypto is not available.\r\n      // This is acceptable for non-security-critical random number generation like user agent selection.\r\n      // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for non-security-critical user agent selection.\r\n      idx = Math.floor(Math.random() * this.userAgents.length);\r\n    }\r\n    return this.userAgents[idx];\r\n  }\r\n\r\n  private randomDelay(): Promise<void> {\r\n    let randomMs: number;\r\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\r\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\r\n      randomMs = array[0] % 1000;\r\n    } else if (typeof crypto.randomInt === 'function') {\r\n      randomMs = crypto.randomInt(0, 1000);\r\n    } else {\r\n      // Fallback to Math.random for environments where crypto is not available.\r\n      // This is acceptable for non-security-critical random delays.\r\n      // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for non-security-critical random delays.\r\n      randomMs = Math.floor(Math.random() * 1000);\r\n    }\r\n    const delay = this.requestDelay + randomMs;\r\n    return new Promise((resolve) => setTimeout(resolve, delay));\r\n  }\r\n\r\n  handleRateLimit(retryAfter: number): Promise<void> {\r\n    console.info(`Rate limited. Waiting ${retryAfter} seconds before retry...`);\r\n    return new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));\r\n  }\r\n\r\n  async retryWithBackoff<T>(\r\n    operation: () => Promise<T>,\r\n    maxRetries: number = this.maxRetries,\r\n  ): Promise<T> {\r\n    let lastError: unknown;\r\n\r\n    for (let attempt = 1; attempt <= maxRetries; attempt += 1) {\r\n      try {\r\n        return await operation();\r\n      } catch (error: unknown) {\r\n        lastError = error;\r\n        if (attempt === maxRetries) {\r\n          throw lastError instanceof Error ? lastError : new Error(String(lastError));\r\n        }\r\n\r\n        const backoffDelay = Math.pow(2, attempt) * 1000;\r\n        console.info(`Attempt ${attempt} failed. Retrying in ${backoffDelay}ms...`);\r\n        await new Promise((resolve) => setTimeout(resolve, backoffDelay));\r\n      }\r\n    }\r\n\r\n    throw lastError instanceof Error ? lastError : new Error('Request failed after all retries');\r\n  }\r\n}\r\n\r\ninterface LocationData {\r\n  current?: {\r\n    lat?: number;\r\n    lng?: number;\r\n    address?: string;\r\n  };\r\n}\r\n\r\ninterface ContactInfo {\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\ninterface OperatingHours {\r\n  [key: string]: {\r\n    open: string;\r\n    close: string;\r\n    closed: boolean;\r\n  };\r\n}\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  description?: string;\r\n  price: number;\r\n  dietary_tags?: string[];\r\n}\r\n\r\ninterface MenuCategory {\r\n  category: string;\r\n  items: MenuItem[];\r\n}\r\n\r\ninterface TruckData {\r\n  name: string;\r\n  location: LocationData;\r\n  contact?: ContactInfo;\r\n  operating_hours?: OperatingHours;\r\n  menu?: MenuCategory[];\r\n  last_updated?: string;\r\n}\r\n\r\nexport class DataQualityAssessor {\r\n  private assessBasicInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.name == undefined || truckData.name.trim().length === 0) {\r\n      issues.push('Missing or empty truck name');\r\n      score -= 20;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessLocationInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.location?.current == undefined) {\r\n      issues.push('Missing current location data');\r\n      score -= 25;\r\n    } else {\r\n      if (\r\n        truckData.location.current.lat == undefined ||\r\n        truckData.location.current.lng == undefined\r\n      ) {\r\n        issues.push('Missing GPS coordinates');\r\n        score -= 15;\r\n      }\r\n      if (\r\n        truckData.location.current.address == undefined ||\r\n        truckData.location.current.address === ''\r\n      ) {\r\n        issues.push('Missing address information');\r\n        score -= 10;\r\n      }\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessContactInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.contact) {\r\n      const hasPhone =\r\n        typeof truckData.contact.phone === 'string' && truckData.contact.phone.trim() !== '';\r\n      const hasEmail =\r\n        typeof truckData.contact.email === 'string' && truckData.contact.email.trim() !== '';\r\n\r\n      if (!hasPhone && !hasEmail) {\r\n        issues.push('No phone or email contact available');\r\n        score -= 15;\r\n      }\r\n      if (hasPhone && !this.isValidPhone(truckData.contact.phone as string)) {\r\n        issues.push('Invalid phone number format');\r\n        score -= 5;\r\n      }\r\n      if (hasEmail && !this.isValidEmail(truckData.contact.email as string)) {\r\n        issues.push('Invalid email format');\r\n        score -= 5;\r\n      }\r\n    } else {\r\n      issues.push('Missing contact information');\r\n      score -= 20;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessOperatingHours(truckData: TruckData, issues: string[], score: number): number {\r\n    if (\r\n      truckData.operating_hours == undefined ||\r\n      Object.keys(truckData.operating_hours).length === 0\r\n    ) {\r\n      issues.push('Missing operating hours');\r\n      score -= 15;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessMenuInfo(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.menu == undefined || truckData.menu.length === 0) {\r\n      issues.push('Missing menu information');\r\n      score -= 10;\r\n    } else {\r\n      const menuIssues = this.validateMenuData(truckData.menu);\r\n      issues.push(...menuIssues);\r\n      score -= menuIssues.length * 2;\r\n    }\r\n    return score;\r\n  }\r\n\r\n  private assessLastUpdated(truckData: TruckData, issues: string[], score: number): number {\r\n    if (truckData.last_updated != undefined && truckData.last_updated !== '') {\r\n      const lastUpdate = new Date(truckData.last_updated);\r\n      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);\r\n\r\n      if (daysSinceUpdate > 7) {\r\n        issues.push('Data is more than 7 days old');\r\n        score -= 10;\r\n      } else if (daysSinceUpdate > 3) {\r\n        issues.push('Data is more than 3 days old');\r\n        score -= 5;\r\n      }\r\n    }\r\n    return score;\r\n  }\r\n\r\n  assessTruckData(truckData: TruckData): { score: number; issues: string[] } {\r\n    const issues: string[] = [];\r\n    let score = 100;\r\n\r\n    score = this.assessBasicInfo(truckData, issues, score);\r\n    score = this.assessLocationInfo(truckData, issues, score);\r\n    score = this.assessContactInfo(truckData, issues, score);\r\n    score = this.assessOperatingHours(truckData, issues, score);\r\n    score = this.assessMenuInfo(truckData, issues, score);\r\n    score = this.assessLastUpdated(truckData, issues, score);\r\n\r\n    return {\r\n      score: Math.max(0, score) / 100,\r\n      issues,\r\n    };\r\n  }\r\n\r\n  private validateMenuCategory(\r\n    category: MenuCategory,\r\n    categoryIndex: number,\r\n    issues: string[],\r\n  ): void {\r\n    if (category.category == undefined || category.category.trim().length === 0) {\r\n      issues.push(`Menu category ${categoryIndex + 1} missing name`);\r\n    }\r\n  }\r\n\r\n  private validateMenuItems(category: MenuCategory, issues: string[]): void {\r\n    if (category.items == undefined || category.items.length === 0) {\r\n      issues.push(`Menu category \"${category.category ?? 'Unknown'}\" has no items`);\r\n    } else {\r\n      for (const [itemIndex, item] of category.items.entries()) {\r\n        if (item.name == undefined || item.name.trim().length === 0) {\r\n          issues.push(\r\n            `Menu item ${itemIndex + 1} in \"${category.category ?? 'Unknown'}\" missing name`,\r\n          );\r\n        }\r\n        if (typeof item.price !== 'number' || item.price <= 0) {\r\n          issues.push(`Menu item \"${item.name ?? 'Unknown'}\" has invalid price`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateMenuData(menu: MenuCategory[]): string[] {\r\n    const issues: string[] = [];\r\n\r\n    for (const [categoryIndex, category] of menu.entries()) {\r\n      this.validateMenuCategory(category, categoryIndex, issues);\r\n      this.validateMenuItems(category, issues);\r\n    }\r\n\r\n    return issues;\r\n  }\r\n  private isValidPhone(phone: string): boolean {\r\n    // Regex for phone number validation. Not vulnerable to super-linear runtime due to backtracking.\r\n    // Accepts +, digits, spaces, dashes, and parentheses. At least 10 digits.\r\n    const phoneRegex = /^\\+?[\\d\\s\\-()]{10,}$/;\r\n    return phoneRegex.test(phone);\r\n  }\r\n  private isValidEmail(email: string): boolean {\r\n    // Regex for email validation optimized to avoid backtracking\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]{2,}$/;\r\n    return emailRegex.test(email);\r\n  }\r\n}\r\n\r\ninterface GeminiLocationData {\r\n  address: string;\r\n  city: string;\r\n  state: string;\r\n  coordinates: {\r\n    lat?: number;\r\n    lng?: number;\r\n  };\r\n  confidence: number;\r\n}\r\n\r\ninterface GeminiOperatingHours {\r\n  monday: { open: string; close: string; closed: boolean };\r\n  tuesday: { open: string; close: string; closed: boolean };\r\n  wednesday: { open: string; close: string; closed: boolean };\r\n  thursday: { open: string; close: string; closed: boolean };\r\n  friday: { open: string; close: string; closed: boolean };\r\n  saturday: { open: string; close: string; closed: boolean };\r\n  sunday: { open: string; close: string; closed: boolean };\r\n}\r\n\r\ninterface GeminiSentimentAnalysis {\r\n  sentiment: 'positive' | 'negative' | 'neutral';\r\n  score: number;\r\n  key_topics: string[];\r\n  summary: string;\r\n}\r\n\r\nexport class GeminiDataProcessor {\r\n  private _apiKey: string;\r\n  private _baseUrl: string;\r\n  private requestCount: number;\r\n  private tokenCount: number;\r\n  private dailyLimit: { requests: number; tokens: number };\r\n\r\n  constructor(apiKey: string) {\r\n    this._apiKey = apiKey;\r\n    this._baseUrl = 'https://generativelanguage.googleapis.com/v1beta';\r\n    this.requestCount = 0;\r\n    this.tokenCount = 0;\r\n    this.dailyLimit = { requests: 1500, tokens: 32_000 };\r\n  }\r\n  async processMenuData(rawMenuText: string): Promise<{ categories: MenuCategory[] }> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following food truck menu text and return a structured JSON format:\r\n        \r\n        ${rawMenuText}\r\n        \r\n        Return format:\r\n        {\r\n          \"categories\": [\r\n            {\r\n              \"name\": \"category_name\",\r\n              \"items\": [\r\n                {\r\n                  \"name\": \"item_name\",\r\n                  \"description\": \"item_description\",\r\n                  \"price\": 0.00,\r\n                  \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", etc.]\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n        \r\n        Only return valid JSON, no additional text.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      // Ensure type safety for parsed response\r\n      const parsed: unknown = JSON.parse(response);\r\n      if (\r\n        typeof parsed !== 'object' ||\r\n        parsed == undefined ||\r\n        !('categories' in parsed) ||\r\n        !Array.isArray((parsed as { categories: unknown[] }).categories)\r\n      ) {\r\n        throw new Error('Invalid Gemini menu response: missing or malformed categories array');\r\n      }\r\n      return parsed as { categories: MenuCategory[] };\r\n    } catch (error) {\r\n      console.error('Error processing menu data with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async extractLocationFromText(text: string): Promise<GeminiLocationData> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Extract location information from the following text and return structured data:\r\n        \r\n        \"${text}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"address\": \"full_address\",\r\n          \"city\": \"city_name\",\r\n          \"state\": \"state\",\r\n          \"coordinates\": {\r\n            \"lat\": 0.0,\r\n            \"lng\": 0.0\r\n          },\r\n          \"confidence\": 0.95\r\n        }\r\n        \r\n        If coordinates cannot be determined, set them to undefined. Only return valid JSON.\r\n      `;\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsedResponse: unknown = JSON.parse(response);\r\n      const validatedResponse = this.validateGeminiLocationResponse(parsedResponse);\r\n      return validatedResponse;\r\n    } catch (error) {\r\n      console.error('Error extracting location with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private validateGeminiLocationResponse(parsedResponse: unknown): GeminiLocationData {\r\n    if (\r\n      parsedResponse == undefined ||\r\n      typeof parsedResponse !== 'object' ||\r\n      !('coordinates' in parsedResponse) ||\r\n      typeof (parsedResponse as Record<string, unknown>).coordinates !== 'object'\r\n    ) {\r\n      throw new Error('Invalid Gemini location response');\r\n    }\r\n    const coordinates = (parsedResponse as { coordinates?: { lat?: unknown; lng?: unknown } })\r\n      .coordinates;\r\n    if (coordinates && typeof coordinates === 'object') {\r\n      if (typeof coordinates.lat !== 'number') {\r\n        (coordinates as { lat?: number }).lat = undefined;\r\n      }\r\n      if (typeof coordinates.lng !== 'number') {\r\n        (coordinates as { lng?: number }).lng = undefined;\r\n      }\r\n    }\r\n    return parsedResponse as GeminiLocationData;\r\n  }\r\n\r\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiOperatingHours> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following operating hours text and return standardized format:\r\n        \r\n        \"${hoursText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n        }\r\n          Use 24-hour format. If closed on a day, set \"closed\": true and omit open/close times.\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsed: unknown = JSON.parse(response);\r\n      if (parsed == undefined || typeof parsed !== 'object') {\r\n        throw new Error('Invalid Gemini hours response');\r\n      }\r\n      return parsed as GeminiOperatingHours;\r\n    } catch (error) {\r\n      console.error('Error standardizing hours with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async analyzeSentiment(reviewText: string): Promise<GeminiSentimentAnalysis> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error('Gemini API rate limit exceeded');\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Analyze the sentiment of this food truck review and extract key insights:\r\n        \r\n        \"${reviewText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"sentiment\": \"positive|negative|neutral\",\r\n          \"score\": 0.85,\r\n          \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\"],\r\n          \"summary\": \"brief_summary_of_review\"\r\n        }\r\n          Score should be between 0 (very negative) and 1 (very positive).\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n      const parsed: unknown = JSON.parse(response);\r\n      if (parsed == undefined || typeof parsed !== 'object') {\r\n        throw new Error('Invalid Gemini sentiment response');\r\n      }\r\n      return parsed as GeminiSentimentAnalysis;\r\n    } catch (error) {\r\n      console.error('Error analyzing sentiment with Gemini:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async makeGeminiRequest(prompt: string): Promise<string> {\r\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay\r\n    return this.getMockGeminiResponse(prompt);\r\n  }\r\n\r\n  private getMockGeminiResponse(prompt: string): string {\r\n    if (prompt.includes('menu text')) {\r\n      return JSON.stringify({\r\n        categories: [\r\n          {\r\n            name: 'Burgers',\r\n            items: [\r\n              {\r\n                name: 'Classic Cheeseburger',\r\n                description: 'Beef patty with cheese, lettuce, tomato',\r\n                price: 12.99,\r\n                dietary_tags: [],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      });\r\n    } else if (prompt.includes('location information')) {\r\n      return JSON.stringify({\r\n        address: '123 Market St, San Francisco, CA 94105',\r\n        city: 'San Francisco',\r\n        state: 'CA',\r\n        coordinates: {\r\n          lat: 37.7749,\r\n          lng: -122.4194,\r\n        },\r\n        confidence: 0.95,\r\n      });\r\n    } else if (prompt.includes('operating hours')) {\r\n      return JSON.stringify({\r\n        monday: { open: '11:00', close: '15:00', closed: false },\r\n        tuesday: { open: '11:00', close: '15:00', closed: false },\r\n        wednesday: { open: '11:00', close: '15:00', closed: false },\r\n        thursday: { open: '11:00', close: '15:00', closed: false },\r\n        friday: { open: '11:00', close: '20:00', closed: false },\r\n        saturday: { open: '12:00', close: '20:00', closed: false },\r\n        sunday: { open: '12:00', close: '16:00', closed: false },\r\n      });\r\n    } else if (prompt.includes('sentiment')) {\r\n      return JSON.stringify({\r\n        sentiment: 'positive',\r\n        score: 0.85,\r\n        key_topics: ['food_quality', 'service'],\r\n        summary: 'Customer enjoyed the food and service',\r\n      });\r\n    }\r\n    return '{\"processed\": true}';\r\n  }\r\n\r\n  private canMakeRequest(): boolean {\r\n    return this.requestCount < this.dailyLimit.requests && this.tokenCount < this.dailyLimit.tokens;\r\n  }\r\n\r\n  private updateUsageCounters(requests: number, tokens: number): void {\r\n    this.requestCount += requests;\r\n    this.tokenCount += tokens;\r\n  }\r\n\r\n  getUsageStats(): {\r\n    requests: { used: number; limit: number; remaining: number };\r\n    tokens: { used: number; limit: number; remaining: number };\r\n  } {\r\n    return {\r\n      requests: {\r\n        used: this.requestCount,\r\n        limit: this.dailyLimit.requests,\r\n        remaining: this.dailyLimit.requests - this.requestCount,\r\n      },\r\n      tokens: {\r\n        used: this.tokenCount,\r\n        limit: this.dailyLimit.tokens,\r\n        remaining: this.dailyLimit.tokens - this.tokenCount,\r\n      },\r\n    };\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":58,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":58,"endColumn":23,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical logging IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-quality\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\helpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":334,"column":7,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":334,"endColumn":50,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[13701,13744],"text":"((status.supabase.authSettings?.googleEnabled) ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[13701,13744],"text":"((status.supabase.authSettings?.googleEnabled) === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":325,"column":59,"nodeType":null,"endLine":325,"endColumn":62,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[13503,13506],"text":"!="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { OAuthStatus } from './types';\r\nimport type { SupabaseClient } from '@supabase/supabase-js';\r\n\r\n/**\r\n * Handles a GET request to retrieve OAuth configuration status.\r\n * @example\r\n * handleGetRequest(request)\r\n * Returns a JSON response with OAuth status details and legacy format.\r\n * @param {NextRequest} _request - The incoming request object.\r\n * @returns {NextResponse} JSON response indicating the current OAuth status.\r\n * @description\r\n *   - Retrieves the current OAuth configuration status from the server.\r\n *   - Adapts the response to include both modern and legacy format details.\r\n *   - Provides a step-by-step legacy configuration guide if OAuth is not ready.\r\n */\r\nexport async function handleGetRequest(_request: NextRequest) {\r\n  const status = await getOAuthStatus();\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    ...status,\r\n    legacy_format: {\r\n      oauth_status: status.overall_status,\r\n      message: getStatusMessage(status.overall_status),\r\n      configuration_steps:\r\n        status.overall_status === 'ready'\r\n          ? undefined\r\n          : [\r\n              '1. Go to Supabase Dashboard > Authentication > Providers',\r\n              '2. Enable Google provider',\r\n              '3. Add Google OAuth Client ID and Secret',\r\n              '4. Configure redirect URLs',\r\n              '5. Test OAuth flow',\r\n            ],\r\n    },\r\n  });\r\n}\r\n\r\n// 1. Refactor nested template literals in generateOAuthTestUrl\r\nfunction generateOAuthTestUrl(baseUrl: string): string {\r\n  const redirectPath = `${baseUrl}/auth/callback`;\r\n  const encodedRedirect = encodeURIComponent(redirectPath);\r\n  return (\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL +\r\n    '/auth/v1/authorize?provider=google&redirect_to=' +\r\n    encodedRedirect\r\n  );\r\n}\r\n\r\n/**\r\n * Handles a post request to generate an OAuth test URL based on the environment.\r\n * @example\r\n * handlePostRequest()\r\n * {\r\n *   success: true,\r\n *   message: 'OAuth test URL generated',\r\n *   test_url: 'http://localhost:3000/...',\r\n *   environment: 'development',\r\n *   instructions: [ ... ],\r\n *   manual_test_steps: [ ... ],\r\n *   automation_commands: [ ... ]\r\n * }\r\n * @returns {object} An object containing success status, message, the test URL, the environment, instructions, manual test steps, and automation commands.\r\n * @description\r\n *   - Determines the base URL depending on whether the environment is production or development.\r\n *   - Utilizes `generateOAuthTestUrl` to construct the OAuth test URL.\r\n *   - Responds with JSON containing test instructions and automation commands for verifying OAuth functionality.\r\n */\r\nexport function handlePostRequest() {\r\n  // Removed _request parameter\r\n  const baseUrl =\r\n    process.env.NODE_ENV === 'production'\r\n      ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\r\n      : 'http://localhost:3000';\r\n\r\n  const testUrl = generateOAuthTestUrl(baseUrl);\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'OAuth test URL generated',\r\n    test_url: testUrl,\r\n    environment: process.env.NODE_ENV ?? 'development',\r\n    instructions: [\r\n      '1. Open the test_url in a new browser tab',\r\n      '2. Complete Google OAuth flow',\r\n      '3. Verify redirect to admin dashboard',\r\n      '4. Check for proper role assignment',\r\n    ],\r\n    manual_test_steps: [\r\n      'Navigate to /login page',\r\n      'Click Google login button',\r\n      'Complete OAuth flow',\r\n      'Verify admin access',\r\n    ],\r\n    automation_commands: [\r\n      'npm run oauth:verify - Check configuration',\r\n      'npm run oauth:test:dev - Test development flow',\r\n      'npm run oauth:test:prod - Test production flow',\r\n    ],\r\n  });\r\n}\r\n\r\n/**\r\n * Retrieves the current OAuth status including configuration and connectivity information.\r\n * @example\r\n * getOAuthStatus().then(status => {\r\n *   console.log(status);\r\n * });\r\n * // Output: OAuthStatus object with current configuration and connection status details\r\n * @returns {Promise<OAuthStatus>} An object representing the current status of OAuth configuration and connectivity.\r\n * @description\r\n *   - The function assesses the connectivity and configuration of Supabase and its authentication settings.\r\n *   - It checks if the necessary environment variables are set.\r\n *   - Executes a series of asynchronous checks to determine if the OAuth provider is properly configured.\r\n *   - Recommendations for improving the OAuth setup are generated based on the current status.\r\n */\r\nasync function getOAuthStatus(): Promise<OAuthStatus> {\r\n  const status: OAuthStatus = {\r\n    timestamp: new Date().toISOString(),\r\n    environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\r\n    supabase: {\r\n      connected: false,\r\n      projectId: 'zkwliyjjkdnigizidlln' as string,\r\n    },\r\n    environment_variables: {\r\n      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL !== undefined,\r\n      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY !== undefined,\r\n      supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY !== undefined,\r\n    },\r\n    oauth_flow: {\r\n      loginPageExists: true,\r\n      callbackRouteExists: true,\r\n      authProviderConfigured: false,\r\n    },\r\n    recommendations: [],\r\n    overall_status: 'not_configured',\r\n  };\r\n\r\n  await checkSupabaseConnection(status, supabase);\r\n  await checkSupabaseAuthSettings(status);\r\n  await testOAuthProvider(status, supabase);\r\n\r\n  status.recommendations = generateRecommendations(status);\r\n  status.overall_status = determineOverallStatus(status);\r\n\r\n  return status;\r\n}\r\n\r\n/**\r\n * Checks the connection status with Supabase and updates the `OAuthStatus`.\r\n * @example\r\n * checkSupabaseConnection(status, supabase)\r\n * // Updates the `status.supabase.connected` property based on connection success\r\n * @param {OAuthStatus} status - The current OAuthStatus object that tracks connection state and errors.\r\n * @param {SupabaseClient} supabase - The Supabase client instance used to interact with the database.\r\n * @returns {void} No explicit return value, operates directly on the `status` object.\r\n * @description\r\n *   - Attempts a query to the 'profiles' table to ensure Supabase connection.\r\n *   - Updates `status.supabase.connected` based on query success.\r\n *   - Captures and records detailed error messages in case of connection failure.\r\n */\r\nasync function checkSupabaseConnection(status: OAuthStatus, supabase: SupabaseClient) {\r\n  try {\r\n    const { error } = await supabase.from('profiles').select('count').limit(1);\r\n    if (error === null) {\r\n      status.supabase.connected = true;\r\n    } else {\r\n      status.supabase.error = error.message;\r\n    }\r\n  } catch (error: unknown) {\r\n    status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\r\n  }\r\n}\r\n\r\n/**\r\n * Checks and processes Supabase authentication settings.\r\n * @example\r\n * checkSupabaseAuthSettings(oAuthStatusInstance)\r\n * { supabase: { authSettings: { googleEnabled: true, signupEnabled: false, autoconfirm: true } } }\r\n * @param {OAuthStatus} status - An object that holds OAuth configuration status.\r\n * @returns {void} Modifies the passed status object with fetched authentication settings.\r\n * @description\r\n *   - The function fetches authentication settings from the Supabase URL defined in environment variables.\r\n *   - If Supabase settings are fetched successfully, it updates the OAuth status with authentication settings like Google integration, signup availability, and autoconfirm feature.\r\n *   - Provides a fallback log for cases where fetching settings require authentication.\r\n */\r\nasync function checkSupabaseAuthSettings(status: OAuthStatus) {\r\n  try {\r\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n    if (typeof supabaseUrl === 'string' && supabaseUrl.length > 0) {\r\n      // Explicit check for undefined and empty string\r\n      const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\r\n      if (settingsResponse.ok === true) {\r\n        const settings: {\r\n          external?: { google?: boolean };\r\n          disable_signup?: boolean;\r\n          autoconfirm?: boolean;\r\n        } = (await settingsResponse.json()) as {\r\n          external?: { google?: boolean };\r\n          disable_signup?: boolean;\r\n          autoconfirm?: boolean;\r\n        };\r\n        status.supabase.authSettings = {\r\n          googleEnabled: settings.external?.google ?? false,\r\n          signupEnabled: settings.disable_signup === false,\r\n          autoconfirm: settings.autoconfirm ?? false,\r\n        };\r\n        if (settings.external?.google !== undefined) {\r\n          // Explicit check for undefined\r\n          status.oauth_flow.authProviderConfigured = true;\r\n        }\r\n      }\r\n    }\r\n  } catch {\r\n    console.info('Auth settings endpoint requires authentication (normal)');\r\n  }\r\n}\r\n\r\n/**\r\n * Tests the configuration of an OAuth provider and updates the status based on the result.\r\n * @example\r\n * testOAuthProvider(status, supabase)\r\n * undefined\r\n * @param {OAuthStatus} status - An object representing the current OAuth status and configuration.\r\n * @param {SupabaseClient} supabase - The Supabase client instance used to interact with the authentication system.\r\n * @returns {void} Does not return any value.\r\n * @description\r\n *   - Utilizes Google as the OAuth provider for the sign-in attempt.\r\n *   - Redirects to a localhost callback URL to simulate the OAuth process.\r\n *   - Direct usage of the Supabase auth method to initiate OAuth process.\r\n *   - Handles exceptions without altering the control flow and logs them for informational purposes.\r\n */\r\nasync function testOAuthProvider(status: OAuthStatus, supabase: SupabaseClient) {\r\n  try {\r\n    const { error: oauthError } = await supabase.auth.signInWithOAuth({\r\n      provider: 'google',\r\n      options: {\r\n        redirectTo: 'http://localhost:3000/auth/callback',\r\n        skipBrowserRedirect: true,\r\n      },\r\n    });\r\n    if (oauthError !== null && oauthError.message !== 'Provider not found') {\r\n      // Explicitly check for oauthError existence\r\n      status.oauth_flow.authProviderConfigured = true;\r\n    }\r\n  } catch (error: unknown) {\r\n    console.info('OAuth provider test failed (may be normal):', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Generates a list of recommendations for OAuth configuration based on the current status.\r\n * @example\r\n * generateRecommendations(status)\r\n * ['❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable', ...]\r\n * @param {OAuthStatus} status - The current status of OAuth configuration and environment variables.\r\n * @returns {string[]} Array of recommendation messages to guide configuration setup.\r\n * @description\r\n *   - Checks for necessary environment variables and Supabase connectivity.\r\n *   - Provides guidance on enabling Google OAuth.\r\n *   - Suggests consulting documentation for further setup instructions.\r\n */\r\nfunction generateRecommendations(status: OAuthStatus): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  if (!status.environment_variables.supabaseUrl) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseAnonKey) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseServiceKey) {\r\n    recommendations.push('❌ Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\r\n  }\r\n\r\n  if (!status.supabase.connected) {\r\n    recommendations.push('❌ Fix Supabase connection issue');\r\n    if (typeof status.supabase.error === 'string' && status.supabase.error.length > 0) {\r\n      recommendations.push(`   Error: ${status.supabase.error}`);\r\n    }\r\n  }\r\n\r\n  if (status.supabase.authSettings?.googleEnabled === true) {\r\n    recommendations.push('✅ Google OAuth provider is enabled');\r\n  } else {\r\n    recommendations.push(\r\n      '🔧 Enable Google OAuth provider in Supabase Dashboard',\r\n      '   Go to: Authentication > Providers > Google',\r\n    );\r\n  }\r\n\r\n  if (status.overall_status === 'ready') {\r\n    recommendations.push('🎉 OAuth configuration is complete!', '✅ Test the login flow at /login');\r\n  }\r\n\r\n  if (recommendations.length > 1) {\r\n    recommendations.push(\r\n      '📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions',\r\n      '🔧 Run: npm run oauth:verify for automated checks',\r\n    );\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\n/**\r\n * Determines the overall OAuth status based on provided conditions.\r\n * @example\r\n * determineOverallStatus(status)\r\n * 'ready'\r\n * @param {OAuthStatus} status - The status object containing configuration details.\r\n * @returns {'ready' | 'partial' | 'not_configured' | 'error'} Overall status derived from the evaluations.\r\n * @description\r\n *   - Evaluates connectivity and configuration status from various parameters within the status object.\r\n *   - Prioritizes returning 'error' if Supabase connection fails or if an error is detected.\r\n *   - Checks completeness of environment variables before proceeding to other status evaluations.\r\n *   - Distinguishes between 'ready' and 'partial' based on specific OAuth settings.\r\n */\r\nfunction determineOverallStatus(\r\n  status: OAuthStatus,\r\n): 'ready' | 'partial' | 'not_configured' | 'error' {\r\n  // eslint-disable-next-line sonarjs/different-types-comparison\r\n  if (!status.supabase.connected || status.supabase.error !== null) {\r\n    return 'error';\r\n  }\r\n\r\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\r\n  if (!envVarsComplete) {\r\n    return 'not_configured';\r\n  }\r\n\r\n  if (status.supabase.authSettings?.googleEnabled && status.oauth_flow.authProviderConfigured) {\r\n    return 'ready';\r\n  }\r\n\r\n  if (status.supabase.connected && envVarsComplete) {\r\n    return 'partial';\r\n  }\r\n\r\n  return 'not_configured';\r\n}\r\n\r\n/**\r\n * Retrieves a human-readable message based on the OAuth configuration status.\r\n * @example\r\n * getStatusMessage('ready')\r\n * 'Google OAuth is fully configured and ready to use'\r\n * @param {string} status - The current status of the OAuth configuration.\r\n * @returns {string} A message explaining the OAuth configuration status.\r\n * @description\r\n *   - Handles several predefined status cases.\r\n *   - Provides feedback for both success and error states.\r\n *   - Returns a default message for unrecognized statuses.\r\n */\r\nfunction getStatusMessage(status: string): string {\r\n  switch (status) {\r\n    case 'ready': {\r\n      return 'Google OAuth is fully configured and ready to use';\r\n    }\r\n    case 'partial': {\r\n      return 'Basic configuration complete, OAuth provider needs setup';\r\n    }\r\n    case 'not_configured': {\r\n      return 'Google OAuth is not configured';\r\n    }\r\n    case 'error': {\r\n      return 'Configuration error detected';\r\n    }\r\n    default: {\r\n      return 'Unknown configuration status';\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":61,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":63,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":148,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":154,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":414,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":414,"endColumn":40,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for generating non-security-sensitive event IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":110,"column":53,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":110,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4529,4538],"text":"(e.details != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4529,4538],"text":"(e.details ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4529,4538],"text":"(Boolean(e.details))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { autoScraper } from '@/lib/autoScraper';\r\nimport { scheduler } from '@/lib/scheduler';\r\nimport { logActivity } from '@/lib/activityLogger';\r\nimport { AutoScrapeResult } from './types';\r\n\r\n/**\r\n* Verifies the cron secret authorization header against a stored environment variable.\r\n* @example\r\n* verifyCronSecret(request)\r\n* NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\r\n* @param {NextRequest} request - The incoming request object containing headers.\r\n* @returns {NextResponse | null} Returns an error response if authorization fails or if the secret is not set.\r\n* @description\r\n*   - Logs an error message if the CRON_SECRET environment variable is not configured or is empty.\r\n*   - Logs unauthorized attempts, including the provided authorization header value.\r\n*   - Relies on the Bearer token scheme for authorization.\r\n*/\r\nfunction verifyCronSecret(request: NextRequest): NextResponse | null {\r\n  const authHeader = request.headers.get('authorization');\r\n  const cronSecret = process.env.CRON_SECRET;\r\n\r\n  if (cronSecret === undefined || cronSecret === '') {\r\n    console.error('CRON_SECRET not configured');\r\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\r\n  }\r\n\r\n  if (authHeader !== `Bearer ${cronSecret}`) {\r\n    console.error('Unauthorized cron attempt:', authHeader);\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction logAutoScrapeStart() {\r\n  console.info('Starting automated scraping job...');\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_started',\r\n    details: { timestamp: new Date().toISOString() },\r\n  });\r\n}\r\n\r\n/**\r\n * Logs the completion of an automated scraping job with pertinent details.\r\n * @example\r\n * logAutoScrapeCompletion(autoScrapeResult)\r\n * Automated scraping job completed successfully\r\n * @param {AutoScrapeResult} result - The result object containing details of the scraping job.\r\n * @returns {void} Does not return a value.\r\n * @description\r\n *   - Logs activity including the number of trucks processed and found, as well as any errors encountered.\r\n *   - Utilizes a standardized logActivity function to record job completion.\r\n *   - Converts the current timestamp to an ISO string format.\r\n *   - Provides a console message indicating successful job completion.\r\n */\r\nfunction logAutoScrapeCompletion(result: AutoScrapeResult) {\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_completed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      trucksProcessed: result.trucksProcessed,\r\n      newTrucksFound: result.newTrucksFound,\r\n      errorsCount: result.errors?.length ?? 0,\r\n    },\r\n  });\r\n  console.info('Automated scraping job completed successfully');\r\n}\r\n\r\nfunction logAutoScrapeFailure(error: unknown) {\r\n  console.error('Auto-scraping cron job failed:', error);\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_failed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Handles a POST request to initiate an auto-scraping process and returns the result.\r\n * @example\r\n * handlePostRequest(request)\r\n * { success: true, message: 'Auto-scraping completed successfully', data: { trucksProcessed: 10, newTrucksFound: 2, timestamp: '2023-08-23T18:25:43.511Z' } }\r\n * @param {NextRequest} request - The request object containing necessary parameters and headers for processing.\r\n * @returns {NextResponse} JSON response with either the success data or an error message.\r\n * @description\r\n *   - Validates request with a secret key before processing.\r\n *   - Logs scraping start and completion along with processed results.\r\n *   - Schedules follow-up tasks after successful scraping.\r\n *   - Catches and logs errors with a failure response in case of any exceptions during the process.\r\n */\r\nexport async function handlePostRequest(request: NextRequest) {\r\n  try {\r\n    const authResponse = verifyCronSecret(request);\r\n    if (authResponse) {\r\n      return authResponse;\r\n    }\r\n\r\n    logAutoScrapeStart();\r\n\r\n    const rawResult = await autoScraper.runAutoScraping();\r\n    // Map errors to string[] for compatibility\r\n    const result: AutoScrapeResult = {\r\n      trucksProcessed: rawResult.trucksProcessed,\r\n      newTrucksFound: rawResult.newTrucksFound,\r\n      errors: rawResult.errors?.map((e) => e.url + (e.details ? `: ${e.details}` : '')),\r\n    };\r\n    scheduler.scheduleFollowUpTasks(result);\r\n    logAutoScrapeCompletion(result);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Auto-scraping completed successfully',\r\n      data: {\r\n        trucksProcessed: result.trucksProcessed,\r\n        newTrucksFound: result.newTrucksFound,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    logAutoScrapeFailure(error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Auto-scraping failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport function handleGetRequest() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed. Use POST for cron jobs.' },\r\n    { status: 405 },\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\monitoring\\api-usage\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":172,"column":7,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":172,"endColumn":20,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for simulating task execution."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\filters.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":76,"column":21,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":76,"endColumn":33,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[3218,3230],"text":"(hours.closed ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[3218,3230],"text":"(hours.closed === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MenuCategory, MenuItem, OperatingHours, type FoodTruck } from '@/lib/types';\r\n\r\n/**\r\n* Filters an array of FoodTruck objects based on a given search query.\r\n* @example\r\n* applyTextSearchFilter(foodTrucksArray, 'taco')\r\n* // Returns an array of FoodTruck objects where the truck name, description, or menu contains 'taco'\r\n* @param {FoodTruck[]} trucks - An array of FoodTruck objects to be filtered.\r\n* @param {string | null} query - Search query to filter the food trucks by.\r\n* @returns {FoodTruck[]} An array of FoodTruck objects that match the search query.\r\n* @description\r\n*   - If the query is null or an empty string, the original array is returned unfiltered.\r\n*   - The search is case-insensitive.\r\n*   - Searches through truck names, descriptions, and menu item names and descriptions.\r\n*   - Utilizes optional chaining to handle undefined or null values in truck descriptions and menus.\r\n*/\r\nexport function applyTextSearchFilter(trucks: FoodTruck[], query: string | null): FoodTruck[] {\r\n  if (query != undefined && query !== '') {\r\n    return trucks.filter(\r\n      (truck: FoodTruck) =>\r\n        truck.name.toLowerCase().includes(query.toLowerCase()) ||\r\n        (truck.description?.toLowerCase().includes(query.toLowerCase()) ?? false) ||\r\n        (truck.menu?.some((category: MenuCategory) =>\r\n          category.items?.some(\r\n            (item: MenuItem) =>\r\n              item.name.toLowerCase().includes(query.toLowerCase()) ||\r\n              (item.description?.toLowerCase().includes(query.toLowerCase()) ?? false),\r\n          ),\r\n        ) ??\r\n          false),\r\n    );\r\n  }\r\n  return trucks;\r\n}\r\n\r\nexport function applyCuisineFilter(trucks: FoodTruck[], cuisine: string | null): FoodTruck[] {\r\n  if (cuisine != undefined && cuisine !== '') {\r\n    return trucks.filter((truck: FoodTruck) =>\r\n      truck.menu?.some((category: MenuCategory) =>\r\n        category.name.toLowerCase().includes(cuisine.toLowerCase()),\r\n      ),\r\n    );\r\n  }\r\n  return trucks;\r\n}\r\n\r\n/**\r\n * Filters a list of food trucks to only include those that are currently open.\r\n * @example\r\n * applyOpenNowFilter(trucks, true)\r\n * // returns list of trucks open at the current date and time\r\n * @param {FoodTruck[]} trucks - Array of food truck objects to be filtered.\r\n * @param {boolean} openNow - Flag to filter trucks that are open at the current time.\r\n * @returns {FoodTruck[]} Array of food trucks that are open now, or the unfiltered array if openNow is false.\r\n * @description\r\n *   - Uses the system's current date and time to determine if trucks are open.\r\n *   - Filters based on the truck's operating hours for the current day.\r\n */\r\nexport function applyOpenNowFilter(trucks: FoodTruck[], openNow: boolean): FoodTruck[] {\r\n  if (openNow) {\r\n    const now = new Date();\r\n    const daysOfWeek: Array<keyof OperatingHours> = [\r\n      'sunday',\r\n      'monday',\r\n      'tuesday',\r\n      'wednesday',\r\n      'thursday',\r\n      'friday',\r\n      'saturday',\r\n    ];\r\n    const currentDay = daysOfWeek[now.getDay()];\r\n    const currentTime = now.getHours() * 100 + now.getMinutes();\r\n\r\n    return trucks.filter((truck: FoodTruck) => {\r\n      const hours = truck.operating_hours?.[currentDay];\r\n      if (!hours || hours.closed) return false;\r\n\r\n      const openTime = Number.parseInt(hours.open.replace(':', ''), 10);\r\n      const closeTime = Number.parseInt(hours.close.replace(':', ''), 10);\r\n      return currentTime >= openTime && currentTime <= closeTime;\r\n    });\r\n  }\r\n  return trucks;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunnerHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\schemaMapper.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":8,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":8,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from '@/lib/types';\r\n\r\nexport function mapExtractedDataToTruckSchema(\r\n  extractedData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n  isDryRun: boolean,\r\n): FoodTruckSchema {\r\n  if (!extractedData || typeof extractedData !== 'object') {\r\n    throw new Error('Invalid extractedData for mapping.');\r\n  }\r\n\r\n  const name = extractedData.name ?? 'Unknown Test Truck';\r\n  const locationData = extractedData.current_location ?? {};\r\n  const fullAddress = [\r\n    locationData.address,\r\n    locationData.city,\r\n    locationData.state,\r\n    locationData.zip_code,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(', ');\r\n\r\n  return {\r\n    name: name,\r\n    description: extractedData.description ?? undefined,\r\n    current_location: {\r\n      lat: locationData.lat ?? 0,\r\n      lng: locationData.lng ?? 0,\r\n      address: fullAddress ?? locationData.raw_text ?? undefined,\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n    scheduled_locations: extractedData.scheduled_locations ?? undefined,\r\n    operating_hours: extractedData.operating_hours ?? undefined,\r\n    menu: (extractedData.menu ?? []).map((category: MenuCategory) => ({\r\n      name: category.name ?? 'Uncategorized',\r\n      items: (category.items ?? []).map((item: MenuItem) => ({\r\n        name: item.name ?? 'Unknown Item',\r\n        description: item.description ?? undefined,\r\n        price:\r\n          typeof item.price === 'number' || typeof item.price === 'string' ? item.price : undefined,\r\n        dietary_tags: item.dietary_tags ?? [],\r\n      })),\r\n    })),\r\n    contact_info: extractedData.contact_info ?? undefined,\r\n    social_media: extractedData.social_media ?? undefined,\r\n    cuisine_type: extractedData.cuisine_type ?? [],\r\n    price_range: extractedData.price_range ?? undefined,\r\n    specialties: extractedData.specialties ?? [],\r\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\r\n    verification_status: 'pending',\r\n    source_urls: [sourceUrl].filter(Boolean),\r\n    last_scraped_at: new Date().toISOString(),\r\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\stageHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\trucks\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\auth\\authHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":6,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":6,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[204,215],"text":"authHeader == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[205,215],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[204,215],"text":"!Boolean(authHeader)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/supabase';\r\n\r\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\r\n  try {\r\n    const authHeader = request.headers.get('authorization');\r\n    if (!authHeader) return false;\r\n\r\n    const token = authHeader.replace('Bearer ', '');\r\n    const { data, error } = await supabase.auth.getUser(token);\r\n    const user = data?.user;\r\n\r\n    if (error || !user) return false;\r\n\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    return profile?.role === 'admin';\r\n  } catch {\r\n    return false;\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\batchCleanup.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":192,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":192,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":269,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":269,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":433,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":433,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":519,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":519,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Batch Data Cleanup System\r\n * Implements automated data quality improvements and cleanup operations\r\n */\r\n\r\nimport { FoodTruckService, type FoodTruck, DataQualityService } from '@/lib/supabase';\r\nimport { DuplicatePreventionService } from './duplicatePrevention';\r\nimport { getPlaceholderPatterns, processTruckForPlaceholders } from './placeholderUtils';\r\n\r\nexport interface CleanupOperation {\r\n  type:\r\n    | 'normalize_phone'\r\n    | 'fix_coordinates'\r\n    | 'remove_placeholders'\r\n    | 'update_quality_scores'\r\n    | 'merge_duplicates';\r\n  description: string;\r\n  affectedCount: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\nexport interface BatchCleanupResult {\r\n  totalProcessed: number;\r\n  operations: CleanupOperation[];\r\n  summary: {\r\n    trucksImproved: number;\r\n    duplicatesRemoved: number;\r\n    qualityScoreImprovement: number;\r\n    placeholdersRemoved: number;\r\n  };\r\n  duration: number;\r\n}\r\n\r\ninterface MergeOperationContext {\r\n  operation: CleanupOperation;\r\n  processedIds: Set<string>;\r\n}\r\n\r\ninterface CoordinateProcessContext {\r\n  defaultLat: number;\r\n  defaultLng: number;\r\n  dryRun: boolean;\r\n  operation: CleanupOperation;\r\n}\r\n\r\n/**\r\n * Automated Data Quality Cleanup Service\r\n */\r\nexport class BatchCleanupService {\r\n  /**\r\n   * Run comprehensive data cleanup operations\r\n   */\r\n  static async runFullCleanup(\r\n    options: {\r\n      batchSize?: number;\r\n      dryRun?: boolean;\r\n      operations?: CleanupOperation['type'][];\r\n    } = {},\r\n  ): Promise<BatchCleanupResult> {\r\n    const startTime = Date.now();\r\n    const {\r\n      batchSize = 50,\r\n      dryRun = false,\r\n      operations = [\r\n        'remove_placeholders',\r\n        'normalize_phone',\r\n        'fix_coordinates',\r\n        'update_quality_scores',\r\n        'merge_duplicates',\r\n      ],\r\n    } = options;\r\n\r\n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\r\n    const result = this.initializeCleanupResult();\r\n    try {\r\n      const allTrucks = await FoodTruckService.getAllTrucks();\r\n      result.totalProcessed = allTrucks.total;\r\n      await this.processTrucksInBatches(allTrucks.trucks, {\r\n        batchSize,\r\n        operations,\r\n        dryRun,\r\n        result,\r\n      });\r\n      return this.finalizeCleanupResult(result, startTime);\r\n    } catch (error) {\r\n      console.error('Batch cleanup failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Initializes and returns a new BatchCleanupResult object with default values.\r\n  * @example\r\n  * initializeCleanupResult()\r\n  * { totalProcessed: 0, operations: [], summary: { trucksImproved: 0, duplicatesRemoved: 0, qualityScoreImprovement: 0, placeholdersRemoved: 0 }, duration: 0 }\r\n  * @returns {BatchCleanupResult} A new BatchCleanupResult object with all properties set to initial default values.\r\n  */\r\n  private static initializeCleanupResult(): BatchCleanupResult {\r\n    return {\r\n      totalProcessed: 0,\r\n      operations: [],\r\n      summary: {\r\n        trucksImproved: 0,\r\n        duplicatesRemoved: 0,\r\n        qualityScoreImprovement: 0,\r\n        placeholdersRemoved: 0,\r\n      },\r\n      duration: 0,\r\n    };\r\n  }\r\n\r\n  private static finalizeCleanupResult(\r\n    result: BatchCleanupResult,\r\n    startTime: number,\r\n  ): BatchCleanupResult {\r\n    result.summary = this.calculateSummary(result.operations);\r\n    result.duration = Date.now() - startTime;\r\n\r\n    console.info(`Batch cleanup completed in ${result.duration}ms`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Processes food trucks in batches, executing specified operations on each batch.\r\n   * @example\r\n   * processTrucksInBatches(truckList, { batchSize: 10, operations: ['clean'], dryRun: true, result: batchResult })\r\n   * // It executes 'clean' operation on batches of 10 trucks without making permanent changes.\r\n   * @param {FoodTruck[]} trucks - Array of food trucks to be processed in batches.\r\n   * @param {object} options - Options object containing batchSize, operations, dryRun, and result.\r\n   * @param {number} options.batchSize - Number of trucks in each batch.\r\n   * @param {CleanupOperation['type'][]} options.operations - Array of operation types to be executed on each batch.\r\n   * @param {boolean} options.dryRun - If true, operations are executed in simulation mode without permanent changes.\r\n   * @param {BatchCleanupResult} options.result - Stores the results of operations performed on batches.\r\n   * @returns {Promise<void>} Completes processing batches without a return value.\r\n   * @description\r\n   *   - Uses async function to allow non-blocking execution of operations.\r\n   *   - Collects and stores results of batch operations separately, keeping track of each operation's outcome.\r\n   *   - Iterates over arrays using slicing to dynamically create batches for processing.\r\n   */\r\n  private static async processTrucksInBatches(\r\n    trucks: FoodTruck[],\r\n    {\r\n      batchSize,\r\n      operations,\r\n      dryRun,\r\n      result,\r\n    }: {\r\n      batchSize: number;\r\n      operations: CleanupOperation['type'][];\r\n      dryRun: boolean;\r\n      result: BatchCleanupResult;\r\n    },\r\n  ): Promise<void> {\r\n    for (let i = 0; i < trucks.length; i += batchSize) {\r\n      const batch = trucks.slice(i, i + batchSize);\r\n      for (const op of operations) {\r\n        const opResult = await this.runOperation(op, batch, dryRun);\r\n        result.operations.push(opResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run a specific cleanup operation\r\n   */\r\n  private static async runOperation(\r\n    type: CleanupOperation['type'],\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n  ): Promise<CleanupOperation> {\r\n    const operation: CleanupOperation = {\r\n      type,\r\n      description: this.getOperationDescription(type),\r\n      affectedCount: 0,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      errors: [],\r\n    };\r\n\r\n    const operationRunners = {\r\n      remove_placeholders: this.runRemovePlaceholders,\r\n      normalize_phone: this.runNormalizePhoneNumbers,\r\n      fix_coordinates: this.runFixCoordinates,\r\n      update_quality_scores: this.runUpdateQualityScores,\r\n      merge_duplicates: this.runMergeDuplicates,\r\n    };\r\n\r\n    try {\r\n      const runner = operationRunners[type];\r\n      if (runner) {\r\n        return await runner.call(this, trucks, dryRun, operation);\r\n      } \r\n        operation.errors.push(`Unknown operation type: ${String(type)}`);\r\n        return operation;\r\n      \r\n    } catch (error) {\r\n      operation.errors.push(\r\n        `Operation failed: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n      return operation;\r\n    }\r\n  }\r\n\r\n  private static runRemovePlaceholders = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.removePlaceholders(trucks, dryRun, operation);\r\n  };\r\n\r\n  private static runNormalizePhoneNumbers = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.normalizePhoneNumbers(trucks, dryRun, operation);\r\n  };\r\n\r\n  private static runFixCoordinates = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.fixCoordinates(trucks, dryRun, operation);\r\n  };\r\n\r\n  private static runUpdateQualityScores = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.updateQualityScores(trucks, dryRun, operation);\r\n  };\r\n\r\n  private static runMergeDuplicates = async (\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> => {\r\n    return await this.mergeDuplicates(trucks, dryRun, operation);\r\n  };\r\n\r\n  /**\r\n   * Remove placeholder and mock data\r\n   */\r\n  private static async removePlaceholders(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const placeholderPatterns = getPlaceholderPatterns();\r\n    const promises = trucks.map((truck) =>\r\n      this.processSingleTruckForPlaceholders(truck, placeholderPatterns, dryRun, operation),\r\n    );\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  private static async processSingleTruckForPlaceholders(\r\n    truck: FoodTruck,\r\n    patterns: RegExp[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    const updates = processTruckForPlaceholders(truck, patterns);\r\n    if (updates && Object.keys(updates).length > 0) {\r\n      await this.performUpdateOperation(truck.id, updates, dryRun, operation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform an update operation on a specified food truck.\r\n   * @example\r\n   * performUpdateOperation('truck123', { name: 'New Name' }, true, cleanupOperation)\r\n   * // No direct return value; operation may log errors.\r\n   * @param {string} truckId - The unique identifier of the food truck to be updated.\r\n   * @param {Partial<FoodTruck>} updates - An object containing the fields to be updated.\r\n   * @param {boolean} dryRun - Flag indicating whether the operation should be a simulation without actual changes.\r\n   * @param {CleanupOperation} operation - An operation object that logs errors encountered during update.\r\n   * @returns {Promise<void>} A promise that resolves when the update operation is complete.\r\n   * @description\r\n   *   - If 'dryRun' is true, no updates are applied but actions are logged.\r\n   *   - Errors during update are caught and logged in the 'operation.errors' array.\r\n   */\r\n  private static async performUpdateOperation(\r\n    truckId: string,\r\n    updates: Partial<FoodTruck>,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        await FoodTruckService.updateTruck(truckId, updates);\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to update truck ${truckId}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalize phone numbers to consistent format\r\n   */\r\n  private static async normalizePhoneNumbers(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const promises = trucks.map((truck) => {\r\n      if (truck.contact_info?.phone !== undefined) {\r\n        const originalPhone = truck.contact_info.phone;\r\n        const normalizedPhone = this.normalizePhone(originalPhone);\r\n\r\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\r\n          return this.applyPhoneNormalizationUpdate(truck, normalizedPhone, dryRun, operation);\r\n        }\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  /**\r\n   * Apply phone normalization update to a food truck's contact information.\r\n   * @example\r\n   * applyPhoneNormalizationUpdate(truckInstance, '+1234567890', false, operationInstance)\r\n   * // Normalizes and updates phone number of given truckInstance.\r\n   * @param {FoodTruck} truck - The food truck object whose phone number needs normalization.\r\n   * @param {string} normalizedPhone - The normalized phone number to update to the food truck's contact information.\r\n   * @param {boolean} dryRun - Flag indicating whether the operation is a dry run; updates are skipped if true.\r\n   * @param {CleanupOperation} operation - Object containing cleanup operation context including a record of errors.\r\n   * @returns {Promise<void>} Does not return a value, but potentially modifies the truck and operation objects.\r\n   * @description\r\n   *   - Executes the update operation only if `dryRun` is false.\r\n   *   - Pushes error messages to `operation.errors` on failure during the update process.\r\n   *   - Uses `FoodTruckService.updateTruck` for updating the contact information.\r\n   */\r\n  private static async applyPhoneNormalizationUpdate(\r\n    truck: FoodTruck,\r\n    normalizedPhone: string,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        await FoodTruckService.updateTruck(truck.id, {\r\n          contact_info: {\r\n            ...truck.contact_info,\r\n            phone: normalizedPhone,\r\n          },\r\n        });\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper to determine if coordinates need fixing and provide updates\r\n   */\r\n  private static getFixedCoordinates(\r\n    lat: number | undefined,\r\n    lng: number | undefined,\r\n    defaultLat: number,\r\n    defaultLng: number,\r\n  ): Partial<FoodTruck['current_location']> | undefined {\r\n    // Fix invalid coordinates (0,0 or undefined)\r\n    if (lat === undefined || lng === undefined || lat === 0 || lng === 0) {\r\n      return { lat: defaultLat, lng: defaultLng };\r\n    }\r\n    // Fix coordinates outside reasonable bounds for Charleston area\r\n    if (lat < 32 || lat > 34 || lng > -79 || lng < -81) {\r\n      return { lat: defaultLat, lng: defaultLng };\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Fix invalid GPS coordinates\r\n   */\r\n  private static async fixCoordinates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const context: Omit<CoordinateProcessContext, 'operation'> = {\r\n      defaultLat: 32.7767,\r\n      defaultLng: -79.9311,\r\n      dryRun,\r\n    };\r\n\r\n    const promises = trucks.map((truck) =>\r\n      this.processSingleTruckCoordinates(truck, { ...context, operation }),\r\n    );\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  /**\r\n   * Processes coordinates for a single food truck, applying any necessary fixes.\r\n   * @example\r\n   * processSingleTruckCoordinates(truck, context)\r\n   * // No return value, function completes silently\r\n   * @param {FoodTruck} truck - The food truck whose coordinates are to be processed.\r\n   * @param {CoordinateProcessContext} context - Contains configuration and operation context for processing coordinates.\r\n   * @returns {Promise<void>} Returns a promise that resolves when the processing and possible updates are complete.\r\n   * @description\r\n   *   - Skips processing if the truck's current location is not available.\r\n   *   - Retrieves updates for fixed coordinates based on truck's current and default locations.\r\n   *   - Applies updates conditionally based on context settings such as `dryRun` and `operation`.\r\n   */\r\n  private static async processSingleTruckCoordinates(\r\n    truck: FoodTruck,\r\n    context: CoordinateProcessContext,\r\n  ): Promise<void> {\r\n    if (!truck.current_location) return;\r\n    const { defaultLat, defaultLng, dryRun, operation } = context;\r\n    const { lat, lng } = truck.current_location;\r\n    const updates = this.getFixedCoordinates(lat, lng, defaultLat, defaultLng);\r\n    if (updates) {\r\n      await this.applyCoordinateFixUpdate(truck, updates, dryRun, operation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies coordinate updates for a food truck's current location.\r\n   * @example\r\n   * applyCoordinateFixUpdate(truck, { lat: 34.05, lng: -118.25 }, false, operation)\r\n   * // Updates the coordinates of the truck's location asynchronously.\r\n   * @param {FoodTruck} truck - The food truck object whose coordinates need correction.\r\n   * @param {Partial<FoodTruck['current_location']>} updates - The latitude and longitude updates to be applied.\r\n   * @param {boolean} dryRun - Flag to simulate the update without altering data.\r\n   * @param {CleanupOperation} operation - The cleanup operation instance used for error tracking.\r\n   * @returns {Promise<void>} Resolves when the coordinate update process is complete.\r\n   * @description\r\n   *   - Executes the update operation only if the dryRun flag is false.\r\n   *   - If the update fails, logs the error details into the operation's error array.\r\n   */\r\n  private static async applyCoordinateFixUpdate(\r\n    truck: FoodTruck,\r\n    updates: Partial<FoodTruck['current_location']>,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        await FoodTruckService.updateTruck(truck.id, {\r\n          current_location: {\r\n            ...truck.current_location,\r\n            ...updates,\r\n          },\r\n        });\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update quality scores for all trucks\r\n   */\r\n  private static async updateQualityScores(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const promises = trucks.map((truck) =>\r\n      this.processSingleTruckForQualityScore(truck, dryRun, operation),\r\n    );\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  /**\r\n  * Processes a single food truck for an updated quality score assessment.\r\n  * @example\r\n  * processSingleTruckForQualityScore(truckInstance, false, cleanupOperationInstance)\r\n  * // No return value\r\n  * @param {FoodTruck} truck - The food truck instance to assess and potentially update.\r\n  * @param {boolean} dryRun - Specifies whether this is a dry run (no actual data updates).\r\n  * @param {CleanupOperation} operation - The cleanup operation context for processing.\r\n  * @returns {Promise<void>} No return value; operation is performed asynchronously.\r\n  * @description\r\n  *   - Computes the quality score using data from DataQualityService.\r\n  *   - Updates the quality score only if the score changes significantly (>5% difference).\r\n  *   - Assumes `truck.data_quality_score` might be undefined, defaulting to 0.\r\n  *   - Handles asynchronous processing of the update application if conditions are met.\r\n  */\r\n  private static async processSingleTruckForQualityScore(\r\n    truck: FoodTruck,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    const qualityAssessment = DataQualityService.calculateQualityScore(truck);\r\n    if (qualityAssessment) {\r\n      const newScore = qualityAssessment.score;\r\n      const currentScore = truck.data_quality_score ?? 0;\r\n      // Only update if score changed significantly (>5% difference)\r\n      if (typeof newScore === 'number' && Math.abs(newScore - currentScore) > 0.05) {\r\n        await this.applyQualityScoreUpdate(truck, dryRun, operation);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the quality score of a specified food truck and handles errors during the update process.\r\n   * @example\r\n   * applyQualityScoreUpdate(foodTruckInstance, false, cleanupOperationInstance)\r\n   * void\r\n   * @param {FoodTruck} truck - The food truck for which the quality score will be updated.\r\n   * @param {boolean} dryRun - Flag indicating whether the function should perform the update or just simulate it.\r\n   * @param {CleanupOperation} operation - The cleanup operation containing possible error records.\r\n   * @returns {Promise<void>} Resolves with no value when the update completes. Errors are recorded in the `operation` if thrown.\r\n   * @description\r\n   *   - Throws an error if the quality score update fails.\r\n   *   - If `dryRun` is true, the function simulates the update without changing any data.\r\n   *   - Errors occurring during the update are appended to the `operation.errors` array.\r\n   */\r\n  private static async applyQualityScoreUpdate(\r\n    truck: FoodTruck,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<void> {\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        const updateResult = await DataQualityService.updateTruckQualityScore(truck.id);\r\n        if ('error' in updateResult) {\r\n          throw new Error(updateResult.error);\r\n        }\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Identify and merge duplicate trucks\r\n   */\r\n  private static async mergeDuplicates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation,\r\n  ): Promise<CleanupOperation> {\r\n    const processedIds = new Set<string>();\r\n    for (const truck of trucks) {\r\n      await this.processSingleTruckForDuplicates(truck, dryRun, { operation, processedIds });\r\n    }\r\n    return operation;\r\n  }\r\n\r\n  /**\r\n   * Processes a single food truck to detect and handle duplicates in the dataset.\r\n   * @example\r\n   * processSingleTruckForDuplicates(foodTruck, true, mergeContext)\r\n   * // No return value. Performs operations as a side effect.\r\n   * @param {FoodTruck} truck - An instance of FoodTruck to process for duplicates.\r\n   * @param {boolean} dryRun - Flag indicating if the operation should be executed in dry run mode.\r\n   * @param {MergeOperationContext} context - Operational context that carries state and configurations for the merge operation.\r\n   * @returns {Promise<void>} Executes a set of operations for handling duplicate records, does not return any value.\r\n   * @description\r\n   *   - Ensures a food truck is only processed once by maintaining a set of processed IDs.\r\n   *   - Uses DuplicatePreventionService to assess whether the given truck is a duplicate.\r\n   *   - Applies a merge operation if a duplicate truck is confidently identified.\r\n   */\r\n  private static async processSingleTruckForDuplicates(\r\n    truck: FoodTruck,\r\n    dryRun: boolean,\r\n    context: MergeOperationContext,\r\n  ): Promise<void> {\r\n    const { processedIds } = context;\r\n    if (processedIds.has(truck.id)) return;\r\n\r\n    const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\r\n    if (\r\n      duplicateCheck.isDuplicate &&\r\n      duplicateCheck.bestMatch?.confidence === 'high' &&\r\n      duplicateCheck.bestMatch.recommendation === 'merge'\r\n    ) {\r\n      await this.applyMergeOperation(\r\n        truck,\r\n        duplicateCheck.bestMatch.existingTruck,\r\n        dryRun,\r\n        context,\r\n      );\r\n    }\r\n    processedIds.add(truck.id);\r\n  }\r\n\r\n  /**\r\n   * Applies a merge operation between two food trucks and updates the context.\r\n   * @example\r\n   * applyMergeOperation(truck, existingTruck, true, context)\r\n   * // Executes a dry run of the merge operation without affecting data\r\n   * @param {FoodTruck} truck - The food truck that is being merged.\r\n   * @param {FoodTruck} existingTruck - The existing food truck to merge with.\r\n   * @param {boolean} dryRun - Indicates if the merge operation should be simulated.\r\n   * @param {MergeOperationContext} context - Context containing details and state of the merge operation.\r\n   * @returns {Promise<void>} Promise representing the completion of the merge operation.\r\n   * @description\r\n   *   - Updates the list of processed IDs in the context upon successful merge.\r\n   *   - Throws and records an error if the merge operation fails.\r\n   *   - Utilizes the DuplicatePreventionService for performing the merge.\r\n   */\r\n  private static async applyMergeOperation(\r\n    truck: FoodTruck,\r\n    existingTruck: FoodTruck,\r\n    dryRun: boolean,\r\n    context: MergeOperationContext,\r\n  ): Promise<void> {\r\n    const { operation, processedIds } = context;\r\n    operation.affectedCount += 1;\r\n    if (dryRun) {\r\n      operation.successCount += 1;\r\n    } else {\r\n      try {\r\n        const mergeResult = await DuplicatePreventionService.mergeDuplicates(\r\n          truck.id,\r\n          existingTruck.id,\r\n        );\r\n        if ('error' in mergeResult) {\r\n          throw new Error(mergeResult.error);\r\n        }\r\n        processedIds.add(existingTruck.id);\r\n        operation.successCount += 1;\r\n      } catch (error) {\r\n        operation.errorCount += 1;\r\n        operation.errors.push(\r\n          `Failed to merge duplicates ${truck.id} and ${existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalize phone number format\r\n   */\r\n  private static normalizePhone(phone: string): string | undefined {\r\n    if (!phone) return undefined;\r\n\r\n    // Remove all non-digit characters\r\n    const digits = phone.replaceAll(/\\D/g, '');\r\n\r\n    // Handle US phone numbers\r\n    if (digits.length === 10) {\r\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\r\n    }\r\n    if (digits.length === 11 && digits.startsWith('1')) {\r\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\r\n    }\r\n\r\n    // Return original if can't normalize\r\n    return phone;\r\n  }\r\n\r\n  /**\r\n   * Get operation description\r\n   */\r\n  private static getOperationDescription(type: CleanupOperation['type']): string {\r\n    const descriptions = {\r\n      remove_placeholders: 'Remove placeholder and mock data values',\r\n      normalize_phone: 'Normalize phone numbers to consistent format',\r\n      fix_coordinates: 'Fix invalid GPS coordinates',\r\n      update_quality_scores: 'Recalculate data quality scores',\r\n      merge_duplicates: 'Identify and merge duplicate truck entries',\r\n    };\r\n\r\n    return descriptions[type] ?? 'Unknown operation';\r\n  }\r\n\r\n  /**\r\n   * Calculate cleanup summary\r\n   */\r\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\r\n    return {\r\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\r\n      duplicatesRemoved: operations.find((op) => op.type === 'merge_duplicates')?.successCount ?? 0,\r\n      qualityScoreImprovement:\r\n        operations.find((op) => op.type === 'update_quality_scores')?.successCount ?? 0,\r\n      placeholdersRemoved:\r\n        operations.find((op) => op.type === 'remove_placeholders')?.successCount ?? 0,\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\duplicatePrevention.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":233,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":233,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7380,7392],"text":"(loc1.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7380,7392],"text":"(loc1.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7380,7392],"text":"(Boolean(loc1.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":233,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":233,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7396,7408],"text":"(loc2.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7396,7408],"text":"(loc2.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7396,7408],"text":"(Boolean(loc2.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/no-redundant-assignments","severity":2,"message":"Review this redundant assignment: \"j\" already holds the assigned value along all execution paths.","line":204,"column":20,"nodeType":"Literal","messageId":"reviewAssignment","endLine":204,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Duplicate Prevention System\r\n * Implements intelligent duplicate detection and prevention for food truck data\r\n */\r\n\r\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\r\n\r\n// Duplicate detection configuration\r\nexport const DUPLICATE_DETECTION_CONFIG = {\r\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\r\n  thresholds: {\r\n    name: 0.85, // High threshold for name matching\r\n    location: 0.9, // Very high threshold for location matching\r\n    phone: 1, // Exact match for phone numbers\r\n    website: 1, // Exact match for websites\r\n    overall: 0.8, // Overall similarity threshold\r\n  },\r\n\r\n  // Weight factors for different fields\r\n  weights: {\r\n    name: 0.4, // 40% weight for name similarity\r\n    location: 0.3, // 30% weight for location similarity\r\n    contact: 0.2, // 20% weight for contact info similarity\r\n    menu: 0.1, // 10% weight for menu similarity\r\n  },\r\n} as const;\r\n\r\nexport interface DuplicateMatch {\r\n  existingTruck: FoodTruck;\r\n  similarity: number;\r\n  matchedFields: string[];\r\n  confidence: 'high' | 'medium' | 'low';\r\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\r\n}\r\n\r\nexport interface DuplicateDetectionResult {\r\n  isDuplicate: boolean;\r\n  matches: DuplicateMatch[];\r\n  bestMatch?: DuplicateMatch;\r\n  action: 'create' | 'update' | 'merge' | 'manual_review';\r\n  reason: string;\r\n}\r\n\r\n/**\r\n * Advanced Duplicate Prevention Service\r\n */\r\nexport class DuplicatePreventionService {\r\n  /**\r\n   * Check if a food truck is a duplicate of existing trucks\r\n   */\r\n  static async checkForDuplicates(\r\n    candidateTruck: Partial<FoodTruck>,\r\n  ): Promise<DuplicateDetectionResult> {\r\n    try {\r\n      // Get all existing trucks for comparison\r\n      const existingTrucksResult = await FoodTruckService.getAllTrucks();\r\n\r\n      if ('error' in existingTrucksResult) {\r\n        console.error('Error fetching existing trucks:', existingTrucksResult.error);\r\n        return {\r\n          isDuplicate: false,\r\n          matches: [],\r\n          action: 'create',\r\n          reason: `Error fetching existing trucks: ${existingTrucksResult.error}`,\r\n        };\r\n      }\r\n\r\n      const existingTrucks = existingTrucksResult.trucks;\r\n      const matches: DuplicateMatch[] = [];\r\n\r\n      for (const existingTruck of existingTrucks) {\r\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\r\n\r\n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\r\n          matches.push({\r\n            existingTruck,\r\n            similarity: similarity.overall,\r\n            matchedFields: similarity.matchedFields,\r\n            confidence: this.getConfidenceLevel(similarity.overall),\r\n            recommendation: this.getRecommendation(similarity),\r\n          });\r\n        }\r\n      }\r\n\r\n      return this.processDuplicateMatches(matches, candidateTruck);\r\n    } catch (error) {\r\n      console.error('Error checking for duplicates:', error);\r\n      return {\r\n        isDuplicate: false,\r\n        matches: [],\r\n        action: 'create',\r\n        reason:\r\n          'An unexpected error occurred during duplicate detection - proceeding with creation',\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processes the matches found during duplicate detection and returns the result.\r\n   */\r\n  private static processDuplicateMatches(\r\n    matches: DuplicateMatch[],\r\n    candidateTruck: Partial<FoodTruck>,\r\n  ): DuplicateDetectionResult {\r\n    // Sort matches by similarity (highest first)\r\n    matches.sort((a, b) => b.similarity - a.similarity);\r\n\r\n    const bestMatch = matches.length > 0 ? matches[0] : undefined;\r\n    const isDuplicate = matches.length > 0;\r\n\r\n    return {\r\n      isDuplicate,\r\n      matches,\r\n      bestMatch,\r\n      action: this.determineAction(matches, candidateTruck),\r\n      reason: this.generateReason(matches, candidateTruck),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate similarity between two food trucks\r\n   */\r\n  private static calculateSimilarity(\r\n    candidate: Partial<FoodTruck>,\r\n    existing: FoodTruck,\r\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\r\n    const breakdown: Record<string, number> = {};\r\n    const matchedFields: string[] = [];\r\n\r\n    // Name similarity\r\n    const nameSimilarity = this.calculateStringSimilarity(\r\n      candidate.name ?? '',\r\n      existing.name ?? '',\r\n    );\r\n    breakdown.name = nameSimilarity;\r\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\r\n      matchedFields.push('name');\r\n    }\r\n\r\n    // Location similarity\r\n    const locationSimilarity = this.calculateLocationSimilarity(\r\n      candidate.current_location,\r\n      existing.current_location,\r\n    );\r\n    breakdown.location = locationSimilarity;\r\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\r\n      matchedFields.push('location');\r\n    }\r\n\r\n    // Contact similarity\r\n    const contactSimilarity = this.calculateContactSimilarity(\r\n      candidate.contact_info,\r\n      existing.contact_info,\r\n    );\r\n    breakdown.contact = contactSimilarity;\r\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\r\n      matchedFields.push('contact');\r\n    }\r\n\r\n    // Menu similarity (basic)\r\n    const menuSimilarity = this.calculateMenuSimilarity(candidate.menu, existing.menu);\r\n    breakdown.menu = menuSimilarity;\r\n    if (menuSimilarity > 0.7) {\r\n      matchedFields.push('menu');\r\n    }\r\n\r\n    // Calculate weighted overall similarity\r\n    const overall =\r\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\r\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\r\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\r\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu;\r\n\r\n    return { overall, matchedFields, breakdown };\r\n  }\r\n\r\n  /**\r\n   * Calculate string similarity using Levenshtein distance\r\n   */\r\n  private static calculateStringSimilarity(str1: string, str2: string): number {\r\n    if (!str1 || !str2) return 0;\r\n\r\n    // Normalize strings\r\n    const s1 = str1.toLowerCase().trim();\r\n    const s2 = str2.toLowerCase().trim();\r\n\r\n    if (s1 === s2) return 1;\r\n\r\n    // Calculate Levenshtein distance\r\n    const matrix: number[][] = [];\r\n    const len1 = s1.length;\r\n    const len2 = s2.length;\r\n\r\n    for (let i = 0; i <= len1; i+=1) {\r\n      matrix[i] = [i];\r\n    }\r\n\r\n    for (let j = 0; j <= len2; j+=1) {\r\n      matrix[0][j] = j;\r\n    }\r\n\r\n    for (let i = 1; i <= len1; i+=1) {\r\n      // eslint-disable-next-line sonarjs/no-redundant-assignments\r\n      for (let j = 1; j <= len2; j+=1) {\r\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j] + 1, // deletion\r\n          matrix[i][j - 1] + 1, // insertion\r\n          matrix[i - 1][j - 1] + cost, // substitution\r\n        );\r\n      }\r\n    }\r\n\r\n    const distance = matrix[len1][len2];\r\n    const maxLength = Math.max(len1, len2);\r\n\r\n    return maxLength === 0 ? 1 : 1 - distance / maxLength;\r\n  }\r\n\r\n  /**\r\n   * Calculate location similarity\r\n   */\r\n  private static calculateLocationSimilarity(\r\n    loc1: FoodTruck['current_location'] | undefined | null,\r\n    loc2: FoodTruck['current_location'] | undefined | null,\r\n  ): number {\r\n    if (!loc1 || !loc2) return 0;\r\n\r\n    let similarity = 0;\r\n    let factors = 0;\r\n\r\n    // Address similarity\r\n    if (loc1.address && loc2.address) {\r\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\r\n      factors+=1;\r\n    }\r\n\r\n    // GPS coordinate similarity (within 100 meters = high similarity)\r\n    if (loc1.lat && loc1.lng && loc2.lat && loc2.lng) {\r\n      const distance = this.calculateGPSDistance(loc1.lat, loc1.lng, loc2.lat, loc2.lng);\r\n\r\n      // Distance similarity (closer = higher similarity)\r\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - distance / 1); // 1km max\r\n      similarity += distanceSimilarity;\r\n      factors+=1;\r\n    }\r\n\r\n    return factors > 0 ? similarity / factors : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate GPS distance in kilometers\r\n   */\r\n  private static calculateGPSDistance(\r\n    lat1: number,\r\n    lng1: number,\r\n    lat2: number,\r\n    lng2: number,\r\n  ): number {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = ((lat2 - lat1) * Math.PI) / 180;\r\n    const dLng = ((lng2 - lng1) * Math.PI) / 180;\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos((lat1 * Math.PI) / 180) *\r\n        Math.cos((lat2 * Math.PI) / 180) *\r\n        Math.sin(dLng / 2) *\r\n        Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  }\r\n\r\n  /**\r\n   * Calculate contact similarity\r\n   */\r\n  private static calculateContactSimilarity(\r\n    contact1: FoodTruck['contact_info'] | undefined | null,\r\n    contact2: FoodTruck['contact_info'] | undefined | null,\r\n  ): number {\r\n    if (!contact1 || !contact2) return 0;\r\n\r\n    let matches = 0;\r\n    let total = 0;\r\n\r\n    // Phone number exact match\r\n    if (contact1.phone != undefined && contact2.phone != undefined) {\r\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\r\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\r\n      if (phone1 === phone2) matches+=1;\r\n      total+=1;\r\n    }\r\n\r\n    // Website exact match\r\n    if (contact1.website != undefined && contact2.website != undefined) {\r\n      const url1 = contact1.website\r\n        .toLowerCase()\r\n        .replace(/^https?:\\/\\//, '')\r\n        .replace(/\\/$/, '');\r\n      const url2 = contact2.website\r\n        .toLowerCase()\r\n        .replace(/^https?:\\/\\//, '')\r\n        .replace(/\\/$/, '');\r\n      if (url1 === url2) matches+=1;\r\n      total+=1;\r\n    }\r\n\r\n    // Email similarity\r\n    if (contact1.email != undefined && contact2.email != undefined) {\r\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches+=1;\r\n      total+=1;\r\n    }\r\n\r\n    return total > 0 ? matches / total : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate menu similarity (basic implementation)\r\n   */\r\n  private static calculateMenuSimilarity(\r\n    menu1: FoodTruck['menu'] | undefined | null,\r\n    menu2: FoodTruck['menu'] | undefined | null,\r\n  ): number {\r\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\r\n\r\n    // Simple category name matching\r\n    const categories1 = menu1\r\n      .map((cat) => (cat as { category?: string }).category?.toLowerCase() ?? '')\r\n      .filter(Boolean);\r\n    const categories2 = menu2\r\n      .map((cat) => (cat as { category?: string }).category?.toLowerCase() ?? '')\r\n      .filter(Boolean);\r\n\r\n    const commonCategories = categories1.filter((cat) => categories2.includes(cat));\r\n    const totalCategories = new Set([...categories1, ...categories2]).size;\r\n\r\n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\r\n  }\r\n\r\n  /**\r\n   * Get confidence level based on similarity score\r\n   */\r\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\r\n    if (similarity >= 0.95) return 'high';\r\n    if (similarity >= 0.85) return 'medium';\r\n    return 'low';\r\n  }\r\n\r\n  /**\r\n   * Get recommendation based on similarity analysis\r\n   */\r\n  private static getRecommendation(similarity: {\r\n    overall: number;\r\n    matchedFields: string[];\r\n  }): 'merge' | 'update' | 'skip' | 'manual_review' {\r\n    if (similarity.overall >= 0.95) return 'merge';\r\n    if (similarity.overall >= 0.9) return 'update';\r\n    if (similarity.overall >= 0.8) return 'manual_review';\r\n    return 'skip';\r\n  }\r\n\r\n  /**\r\n   * Determine action based on matches\r\n   */\r\n  private static determineAction(\r\n    matches: DuplicateMatch[],\r\n    _candidate: Partial<FoodTruck>,\r\n  ): 'create' | 'update' | 'merge' | 'manual_review' {\r\n    if (matches.length === 0) return 'create';\r\n\r\n    const bestMatch = matches[0];\r\n\r\n    if (bestMatch.confidence === 'high') {\r\n      const {recommendation} = bestMatch;\r\n      if (recommendation === 'merge' || recommendation === 'update') {\r\n        return recommendation;\r\n      }\r\n      return 'manual_review';\r\n    }\r\n\r\n    return 'manual_review';\r\n  }\r\n\r\n  /**\r\n   * Generate human-readable reason\r\n   */\r\n  private static generateReason(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): string {\r\n    if (matches.length === 0) {\r\n      return 'No duplicates found - safe to create new truck entry';\r\n    }\r\n\r\n    const bestMatch = matches[0];\r\n    const similarity = Math.round(bestMatch.similarity * 100);\r\n\r\n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\r\n  }\r\n\r\n  /**\r\n   * Merge duplicate truck data intelligently\r\n   */\r\n  static async mergeDuplicates(\r\n    targetId: string,\r\n    sourceId: string,\r\n  ): Promise<FoodTruck | { error: string }> {\r\n    const targetResult = await FoodTruckService.getTruckById(targetId);\r\n    const sourceResult = await FoodTruckService.getTruckById(sourceId);\r\n\r\n    if ('error' in targetResult) {\r\n      return {\r\n        error: `Failed to retrieve target truck with ID ${targetId}: ${targetResult.error}`,\r\n      };\r\n    }\r\n    if ('error' in sourceResult) {\r\n      return {\r\n        error: `Failed to retrieve source truck with ID ${sourceId}: ${sourceResult.error}`,\r\n      };\r\n    }\r\n\r\n    const target = targetResult;\r\n    const source = sourceResult;\r\n\r\n    // Merge logic: prefer non-null, more complete data\r\n    const mergedData: Partial<FoodTruck> = {\r\n      name: target.name ?? source.name,\r\n      description: target.description ?? source.description,\r\n      cuisine_type:\r\n        (target.cuisine_type?.length ?? 0) > 0 ? target.cuisine_type : source.cuisine_type,\r\n      price_range: target.price_range ?? source.price_range,\r\n      current_location: target.current_location ?? source.current_location,\r\n      contact_info: {\r\n        ...source.contact_info,\r\n        ...target.contact_info, // Target takes precedence\r\n      },\r\n      operating_hours: target.operating_hours ?? source.operating_hours,\r\n      menu: (target.menu?.length ?? 0) > 0 ? target.menu : source.menu,\r\n      social_media: {\r\n        ...source.social_media,\r\n        ...target.social_media,\r\n      },\r\n      source_urls: [...new Set([...(target.source_urls ?? []), ...(source.source_urls ?? [])])],\r\n      last_scraped_at: new Date().toISOString(),\r\n    };\r\n\r\n    // Update target with merged data\r\n    const updatedTruckResult = await FoodTruckService.updateTruck(targetId, mergedData);\r\n\r\n    if ('error' in updatedTruckResult) {\r\n      return {\r\n        error: `Failed to update target truck with merged data: ${updatedTruckResult.error}`,\r\n      };\r\n    }\r\n\r\n    console.info(`Merged truck ${sourceId} into ${targetId}`);\r\n\r\n    return updatedTruckResult;\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\placeholderUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data\\placeholderTrucks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\discoveryEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\fallback\\supabaseFallback.tsx","messages":[{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":136,"column":14,"nodeType":"Literal","messageId":"error","endLine":136,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[4208,4212],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[4208,4212],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":139,"column":14,"nodeType":"Literal","messageId":"error","endLine":139,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[4346,4350],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[4346,4350],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":237,"column":60,"nodeType":"Literal","messageId":"error","endLine":237,"endColumn":64,"suggestions":[{"messageId":"replace","fix":{"range":[7542,7546],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":240,"column":14,"nodeType":"Literal","messageId":"error","endLine":240,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[7579,7583],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[7579,7583],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":243,"column":14,"nodeType":"Literal","messageId":"error","endLine":243,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[7697,7701],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[7697,7701],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":257,"column":57,"nodeType":"Literal","messageId":"error","endLine":257,"endColumn":61,"suggestions":[{"messageId":"replace","fix":{"range":[8144,8148],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":260,"column":14,"nodeType":"Literal","messageId":"error","endLine":260,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[8181,8185],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[8181,8185],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":263,"column":14,"nodeType":"Literal","messageId":"error","endLine":263,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[8293,8297],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[8293,8297],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/fallback/supabaseFallback.tsx\n// This creates a resilient data layer that gracefully handles Supabase outages\n\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { Database } from '@/lib/database.types'; // Assuming this is your Supabase database types\nimport { FoodTruck } from '@/lib/types';\n\n// Create a type alias for the complex union type to improve readability\ntype FallbackResult = {\n  readonly trucks: FoodTruck[];\n  readonly isFromCache: boolean;\n  readonly lastUpdate: string;\n  readonly status: 'fresh' | 'cached' | 'stale' | 'unavailable';\n};\n\nfunction isFoodTruckData(obj: unknown): obj is FoodTruck {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    'id' in obj &&\n    'name' in obj &&\n    'cuisine_type' in obj &&\n    'price_range' in obj\n  );\n}\n\ninterface CachedData {\n  readonly trucks: FoodTruck[];\n  readonly timestamp: number;\n  readonly lastSuccessfulUpdate: string;\n}\n\nfunction isCachedData(obj: unknown): obj is CachedData {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    'trucks' in obj &&\n    Array.isArray((obj as CachedData).trucks) &&\n    'timestamp' in obj &&\n    'lastSuccessfulUpdate' in obj\n  );\n}\n\n// Helper function to safely parse JSON with type validation\nfunction safeJsonParse<T>(\n  jsonString: string,\n  typeGuard: (obj: unknown) => obj is T\n): T | undefined {\n  try {\n    const parsed: unknown = JSON.parse(jsonString);\n    return typeGuard(parsed) ? parsed : undefined;\n  } catch {\n    return undefined;\n  }\n}\n\n// Helper function to check if we're in a browser environment\nfunction isBrowserEnvironment(): boolean {\n  // Fixed: Use direct comparison with undefined instead of typeof\n  return typeof globalThis !== 'undefined' && \n         globalThis.window != undefined && \n         globalThis.window === globalThis;\n}\n\nclass SupabaseFallbackManager {\n  private readonly CACHE_KEY = 'food-trucks-cache';\n  private readonly TRUCK_CACHE_KEY_PREFIX = 'food-truck-';\n  private readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n  private readonly supabase: SupabaseClient<Database>;\n\n  constructor() {\n    if (process.env.NEXT_PUBLIC_SUPABASE_URL === undefined || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY === undefined) {\n      throw new Error('Supabase URL and Anon Key are required!');\n    }\n    this.supabase = createClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n    );\n  }\n\n  /**\n   * This is your main data fetching function that handles all the fallback logic\n   * Think of it as your \"smart\" data fetcher that adapts to different situations\n   */\n  public async getFoodTrucks(): Promise<FallbackResult> {\n    try {\n      // First, try to get fresh data from Supabase\n      const freshData = await this.fetchFromSupabase();\n\n      if (freshData.length > 0) {\n        // Success! Cache this data for future fallback use\n        this.cacheData(freshData);\n\n        return {\n          trucks: freshData,\n          isFromCache: false,\n          lastUpdate: 'Just now',\n          status: 'fresh'\n        };\n      }\n\n      // If we reach here, Supabase returned empty results\n      // This might mean no trucks are available, or there's a data issue\n      return this.handleFallbackScenario();\n\n    } catch (error: unknown) {\n      // Supabase is definitely having issues - engage fallback mode\n      console.warn('Supabase unavailable, using fallback strategy:', error);\n      return this.handleFallbackScenario();\n    }\n  }\n\n  public async getFoodTruckById(id: string): Promise<FoodTruck | null> {\n    const cachedTruck = this.getCachedTruck(id);\n    if (cachedTruck !== null) {\n      return cachedTruck;\n    }\n\n    try {\n      const { data, error }: { data: FoodTruck[] | null; error: Error | null } = await this.supabase\n        .from('food_trucks')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error !== null) {\n        throw new Error(`Supabase error: ${error.message}`);\n      }\n\n      // Fixed: Properly handle the data assignment with type checking\n      if (data !== null && isFoodTruckData(data)) {\n        this.cacheTruck(data);\n        return data;\n      }\n\n      return null;\n    } catch (error) {\n      console.warn(`Failed to fetch truck with id ${id} from Supabase, returning null.`, error);\n      return null;\n    }\n  }\n\n  /**\n   * This handles the actual Supabase communication\n   * Separated so you can easily modify your existing query logic\n   */\n  private async fetchFromSupabase(): Promise<FoodTruck[]> {\n    // The key is to set a reasonable timeout so we don't wait forever\n    const response = await this.supabase\n      .from('food_trucks')\n      .select('*')\n      .abortSignal(AbortSignal.timeout(5000)); // 5 second timeout\n\n    if (response.error !== null) {\n      throw new Error(`Supabase error: ${response.error.message}`);\n    }\n\n    // Fixed: Properly handle the data with explicit null checking\n    if (response.data != undefined && Array.isArray(response.data)) {\n      return response.data.filter((item): item is FoodTruck => isFoodTruckData(item));\n    }\n    return [];\n  }\n\n  /**\n   * This is where the magic happens - graceful degradation\n   * When Supabase fails, we still provide value to users\n   */\n  private handleFallbackScenario(): FallbackResult {\n    const cachedData = this.getCachedData();\n\n    if (cachedData !== null) {\n      const age = Date.now() - cachedData.timestamp;\n      const isStale = age > this.CACHE_DURATION;\n\n      return {\n        trucks: cachedData.trucks,\n        isFromCache: true,\n        lastUpdate: cachedData.lastSuccessfulUpdate,\n        status: isStale ? 'stale' : 'cached'\n      };\n    }\n\n    // No cached data available - this is the worst case scenario\n    return {\n      trucks: [],\n      isFromCache: false,\n      lastUpdate: 'Never',\n      status: 'unavailable'\n    };\n  }\n\n  /**\n   * Stores successful data fetches for later use\n   * This runs every time we successfully get data from Supabase\n   */\n  private cacheData(trucks: FoodTruck[]): void {\n    const cacheData: CachedData = {\n      trucks,\n      timestamp: Date.now(),\n      lastSuccessfulUpdate: new Date().toLocaleString()\n    };\n\n    try {\n      // In a browser environment, use localStorage\n      if (isBrowserEnvironment()) {\n        globalThis.window.localStorage.setItem(this.CACHE_KEY, JSON.stringify(cacheData));\n      }\n\n      // In a server environment, you might use a file or Redis\n      // For now, we'll just log that we would cache this data\n      console.info(`Cached ${trucks.length} trucks at ${cacheData.lastSuccessfulUpdate}`);\n    } catch (error: unknown) {\n      // Caching failed, but that's not critical - log and continue\n      console.warn('Failed to cache data:', error);\n    }\n  }\n\n  private cacheTruck(truck: FoodTruck): void {\n    try {\n      if (isBrowserEnvironment()) {\n        const cacheKey = `${this.TRUCK_CACHE_KEY_PREFIX}${truck.id}`;\n        globalThis.window.localStorage.setItem(cacheKey, JSON.stringify(truck));\n      }\n    } catch (error) {\n      console.warn(`Failed to cache truck with id ${truck.id}:`, error);\n    }\n  }\n\n  private getCachedTruck(id: string): FoodTruck | null {\n    try {\n      if (isBrowserEnvironment()) {\n        const cacheKey = `${this.TRUCK_CACHE_KEY_PREFIX}${id}`;\n        const cached = globalThis.window.localStorage.getItem(cacheKey);\n        if (cached !== null) {\n          // Fixed: Return the parsed result or null instead of undefined\n          return safeJsonParse(cached, isFoodTruckData) ?? null;\n        }\n      }\n      return null;\n    } catch (error) {\n      console.warn(`Failed to retrieve cached truck with id ${id}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Retrieves cached data when Supabase is unavailable\n   * This is your safety net\n   */\n  private getCachedData(): CachedData | null {\n    try {\n      if (isBrowserEnvironment()) {\n        const cached = globalThis.window.localStorage.getItem(this.CACHE_KEY);\n        if (cached !== null) {\n          // Fixed: Return the parsed result or null instead of undefined\n          return safeJsonParse(cached, isCachedData) ?? null;\n        }\n      }\n      return null;\n    } catch (error: unknown) {\n      console.warn('Failed to retrieve cached data:', error);\n      return null;\n    }\n  }\n}\n\n// Usage in your components - this replaces your direct Supabase calls\nexport const supabaseFallback = new SupabaseFallbackManager();\n\n// Example React hook that uses the fallback system\nimport { useState, useEffect } from 'react';\n\nexport function useFoodTrucks() {\n  const [trucks, setTrucks] = useState<FoodTruck[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [dataStatus, setDataStatus] = useState<{\n    readonly isFromCache: boolean;\n    readonly lastUpdate: string;\n    readonly status: 'fresh' | 'cached' | 'stale' | 'unavailable';\n  }>({\n    isFromCache: false,\n    lastUpdate: '',\n    status: 'fresh'\n  });\n\n  useEffect(() => {\n    const loadTrucks = async (): Promise<void> => {\n      try {\n        const result = await supabaseFallback.getFoodTrucks();\n        setTrucks(result.trucks);\n        setDataStatus({\n          isFromCache: result.isFromCache,\n          lastUpdate: result.lastUpdate,\n          status: result.status\n        });\n      } catch (error: unknown) {\n        console.error('Failed to load trucks:', error);\n        // Even this fails, we still want to show something\n        setDataStatus({\n          isFromCache: false,\n          lastUpdate: 'Error',\n          status: 'unavailable'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    void loadTrucks(); // Use void to explicitly ignore the Promise\n  }, []);\n\n  return { trucks, loading, dataStatus };\n}\n\n// Component that displays appropriate messages based on data status\nexport function DataStatusIndicator({\n  status,\n}: {\n  readonly status: {\n    isFromCache: boolean;\n    lastUpdate: string;\n    status: 'fresh' | 'cached' | 'stale' | 'unavailable';\n  };\n}) {\n  if (status.status === 'fresh') {\n    // Fixed: Return null instead of undefined when no component should render\n    return;\n  }\n\n  if (status.status === 'cached') {\n    return (\n      <div className=\"bg-blue-100 border border-blue-300 text-blue-800 px-4 py-2 rounded\">\n        Showing cached data from {status.lastUpdate}. Live data temporarily unavailable.\n      </div>\n    );\n  }\n\n  if (status.status === 'stale') {\n    return (\n      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 px-4 py-2 rounded\">\n        Showing older data from {status.lastUpdate}. We're working to restore live updates.\n      </div>\n    );\n  }\n\n  if (status.status === 'unavailable') {\n    return (\n      <div className=\"bg-red-100 border border-red-300 text-red-800 px-4 py-2 rounded\">\n        Service temporarily unavailable. Please check back in a few minutes.\n      </div>\n    );\n  }\n\n  // Fixed: Return null instead of undefined for the fallback case\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\geminiApiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\promptTemplates.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":223,"column":3,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":223,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7319,7328],"text":"(sourceUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7319,7328],"text":"(sourceUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7319,7328],"text":"(Boolean(sourceUrl))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const PromptTemplates = {\r\n  menuProcessing: (rawMenuText: string) => `\r\nParse the following food truck menu text and return a structured JSON format.\r\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\r\n\r\nMenu text:\r\n${rawMenuText}\r\n\r\nExpected JSON format:\r\n[\r\n  {\r\n    \"category\": \"string\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"string\",\r\n        \"description\": \"string\",\r\n        \"price\": number,\r\n        \"dietary_tags\": [\"string\"]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nRules:\r\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\r\n- Include dietary restrictions and special tags\r\n- Group items into logical categories\r\n- If no clear categories, use \"Main Items\"\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  locationExtraction: (textInput: string) => `\r\nExtract location information from the following text and return structured data.\r\nLook for addresses, cross streets, landmarks, or location descriptions.\r\n\r\nText:\r\n${textInput}\r\n\r\nExpected JSON format:\r\n{\r\n  \"address\": \"string or undefined\",\r\n  \"city\": \"string or undefined\", \r\n  \"state\": \"string or undefined\",\r\n  \"zipCode\": \"string or undefined\",\r\n  \"coordinates\": {\"lat\": number, \"lng\": number} or undefined,\r\n  \"confidence\": number,\r\n  \"landmarks\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Set coordinates to undefined if not explicitly provided\r\n- Confidence should be 0.0 to 1.0 based on clarity\r\n- Include any mentioned landmarks or cross streets\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  operatingHours: (hoursText: string) => `\r\nParse the following operating hours text and return standardized format.\r\nConvert all times to 24-hour format and handle various input formats.\r\n\r\nHours text:\r\n${hoursText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n}\r\n\r\nRules:\r\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\r\n- If closed on a day, set \"closed\": true and omit open/close times\r\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\r\n- Default to reasonable hours if ambiguous\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  sentimentAnalysis: (reviewText: string) => `\r\nAnalyze the sentiment of this food truck review and extract key insights.\r\nFocus on food quality, service, value, and overall experience.\r\n\r\nReview text:\r\n${reviewText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"score\": number,\r\n  \"confidence\": number,\r\n  \"aspects\": {\r\n    \"food_quality\": number,\r\n    \"service\": number,\r\n    \"value\": number,\r\n    \"overall\": number\r\n  },\r\n  \"summary\": \"string\",\r\n  \"keywords\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Score should be 0.0 (very negative) to 1.0 (very positive)\r\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\r\n- Include specific aspects mentioned in the review\r\n- Summary should be 1-2 sentences max\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  dataEnhancement: (rawData: unknown) => `\r\nEnhance and standardize the following food truck data.\r\nFill in missing information where possible and improve data quality.\r\n\r\nRaw data:\r\n${JSON.stringify(rawData, undefined, 2)}\r\n\r\nExpected JSON format:\r\n{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"cuisine_type\": \"string\",\r\n  \"price_range\": \"$ | $$ | $$$ | $$$$\",\r\n  \"contact\": {\r\n    \"phone\": \"string\",\r\n    \"email\": \"string\",\r\n    \"website\": \"string\",\r\n    \"social_media\": {}\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string\",\r\n    \"city\": \"string\",\r\n    \"state\": \"string\",\r\n    \"coordinates\": {\"lat\": number, \"lng\": number}\r\n  },\r\n  \"operating_hours\": {},\r\n  \"menu_categories\": [\"string\"],\r\n  \"specialties\": [\"string\"],\r\n  \"dietary_options\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Preserve all original data while enhancing it\r\n- Standardize naming conventions\r\n- Infer cuisine type from menu items\r\n- Estimate price range from menu prices\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  foodTruckExtraction: (markdownContent: string, sourceUrl?: string) => {\r\n    const schema = `\r\nExpected JSON schema:\r\n{\r\n  \"name\": \"string (food truck name)\",\r\n  \"description\": \"string (brief description of the food truck)\",\r\n  \"cuisine_type\": \"string (type of cuisine served)\",\r\n  \"contact\": {\r\n    \"phone\": \"string (phone number if found)\",\r\n    \"email\": \"string (email if found)\", \r\n    \"website\": \"string (website URL if found)\",\r\n    \"social_media\": {\r\n      \"facebook\": \"string (Facebook URL if found)\",\r\n      \"instagram\": \"string (Instagram URL if found)\",\r\n      \"twitter\": \"string (Twitter URL if found)\"\r\n    }\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string (physical address if found)\",\r\n    \"city\": \"string (city name)\",\r\n    \"state\": \"string (state abbreviation)\",\r\n    \"coordinates\": {\r\n      \"lat\": \"number (latitude if found)\",\r\n      \"lng\": \"number (longitude if found)\"\r\n    }\r\n  },\r\n  \"operating_hours\": {\r\n    \"monday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"tuesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"wednesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"thursday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"friday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"saturday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"sunday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"}\r\n  },\r\n  \"menu\": [\r\n    {\r\n      \"category\": \"string (menu category)\",\r\n      \"items\": [\r\n        {\r\n          \"name\": \"string (item name)\",\r\n          \"description\": \"string (item description)\",\r\n          \"price\": \"number (price as number, not string)\",\r\n          \"dietary_tags\": [\"string (dietary restrictions/tags)\"]\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"specialties\": [\"string (signature dishes or specialties)\"],\r\n  \"dietary_options\": [\"string (dietary accommodations like vegan, gluten-free)\"],\r\n  \"price_range\": \"string ($ for under $10, $$ for $10-20, $$$ for $20-30, $$$$ for over $30)\"\r\n}\r\n`;\r\n\r\n    const instructions = `\r\nInstructions:\r\n- Extract as much information as possible from the provided content\r\n- If information is not available, use null for the field\r\n- For operating hours, use 24-hour format (e.g., \"14:30\" for 2:30 PM)\r\n- If a day is closed, set \"closed\": true and omit open/close times\r\n- For prices, extract numeric values only (e.g., 12.99, not \"$12.99\")\r\n- Be thorough in extracting menu items and their details\r\n- Look for social media links and contact information carefully\r\n- Return only the JSON object, no additional text or formatting\r\n`;\r\n\r\n    return `\r\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\r\n\r\nWebsite content:\r\n${markdownContent}\r\n\r\n${sourceUrl ? `Source URL: ${sourceUrl}` : ''}\r\n\r\n${schema}\r\n\r\n${instructions}\r\n`;\r\n  },\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\responseParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\usageLimits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\middleware\\middlewareHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[760,763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[760,763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":74,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":74,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2564,2580],"text":"redirectFromPath != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2564,2580],"text":"redirectFromPath ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2564,2580],"text":"Boolean(redirectFromPath)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { AuditLogger, SecurityEvent } from '@/lib/security/auditLogger';\r\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\r\n\r\ninterface RequestMetadata {\r\n  ip: string;\r\n  userAgent: string;\r\n  url: string;\r\n  method: string;\r\n}\r\n\r\ninterface SupabaseUser {\r\n  id: string;\r\n  email?: string;\r\n}\r\n\r\ninterface SupabaseProfile {\r\n  role?: string;\r\n}\r\n\r\ninterface LogAndRedirectParams {\r\n  req: NextRequest;\r\n  res: NextResponse;\r\n  requestMetadata: RequestMetadata;\r\n  reason: string;\r\n  userError?: { message?: string };\r\n}\r\n\r\ninterface LogSecurityEventParams {\r\n  event_type: SecurityEvent['event_type'];\r\n  ip_address: string;\r\n  user_agent: string;\r\n  details: Record<string, any>;\r\n  severity: SecurityEvent['severity'];\r\n  user_id?: string;\r\n  user_email?: string;\r\n}\r\n\r\ninterface LogSecurityEventAndRedirectParams {\r\n  req: NextRequest;\r\n  res: NextResponse;\r\n  logParams: LogSecurityEventParams;\r\n  redirectPath: string;\r\n  redirectFromPath?: string;\r\n}\r\n\r\n/**\r\n * Logs a security event and redirects the request to a specified path.\r\n * @example\r\n * logSecurityEventAndRedirect({ req, res, logParams, redirectPath, redirectFromPath })\r\n * NextResponse with redirect to the target path\r\n * @param {Object} params - The parameters for the function.\r\n * @param {Request} params.req - The original request object containing the URL to clone for redirection.\r\n * @param {Response} params._res - The original response object (unused in function, but part of expected parameters).\r\n * @param {Object} params.logParams - Parameters required by the AuditLogger to log the security event.\r\n * @param {string} params.redirectPath - The pathname where the request should be redirected.\r\n * @param {string} [params.redirectFromPath] - Optional pathname indicating where the redirect originated from.\r\n * @returns {NextResponse} A response that performs a redirect to the specified path.\r\n * @description\r\n *   - The function uses AuditLogger to record the security event.\r\n *   - It clones the current URL from the request to ensure original query parameters are preserved.\r\n *   - Redirect path can optionally include info on where the redirect originated via a search parameter.\r\n */\r\nasync function logSecurityEventAndRedirect({\r\n  req,\r\n  res: _res,\r\n  logParams,\r\n  redirectPath,\r\n  redirectFromPath,\r\n}: LogSecurityEventAndRedirectParams) {\r\n  await AuditLogger.logSecurityEvent(logParams);\r\n  const redirectUrl = req.nextUrl.clone();\r\n  redirectUrl.pathname = redirectPath;\r\n  if (redirectFromPath) {\r\n    redirectUrl.searchParams.set(`redirectedFrom`, redirectFromPath);\r\n  }\r\n  return NextResponse.redirect(redirectUrl);\r\n}\r\n\r\n/**\r\n * Logs a security event and redirects the user to the login page.\r\n * @example\r\n * logAndRedirect({\r\n *   req: requestObject, \r\n *   res: responseObject, \r\n *   requestMetadata: { ip: '192.168.1.1', userAgent: 'Mozilla/5.0', url: '/dashboard' }, \r\n *   reason: 'Session Expired', \r\n *   userError: new Error('User authentication failed')\r\n * })\r\n * // Redirects user to login page and logs the event\r\n * @param {Object} req - Express request object containing details of the incoming request.\r\n * @param {Object} res - Express response object used to send a response to the client.\r\n * @param {Object} requestMetadata - Metadata associated with the request, including IP and user agent.\r\n * @param {string} reason - The reason for redirect, generally describing why access was denied.\r\n * @param {Error} userError - Optional error object that provides additional context about the user error.\r\n * @returns {Promise<void>} Returns a promise that resolves once the security event is logged and redirect is completed.\r\n * @description\r\n *   - Utilizes a severity of 'warning' when logging security events.\r\n *   - Redirects users from the attempted URL to the login page.\r\n *   - Captures detailed information about the request including attempted URL and user agent.\r\n */\r\nasync function logAndRedirect({\r\n  req,\r\n  res,\r\n  requestMetadata,\r\n  reason,\r\n  userError,\r\n}: LogAndRedirectParams) {\r\n  return logSecurityEventAndRedirect({\r\n    req,\r\n    res,\r\n    logParams: {\r\n      event_type: 'permission_denied',\r\n      ip_address: requestMetadata.ip,\r\n      user_agent: requestMetadata.userAgent,\r\n      details: {\r\n        attempted_url: requestMetadata.url,\r\n        reason,\r\n        error: userError?.message,\r\n      },\r\n      severity: 'warning',\r\n    },\r\n    redirectPath: '/login',\r\n    redirectFromPath: req.nextUrl.pathname,\r\n  });\r\n}\r\n\r\ninterface LogAndRedirectDeniedParams {\r\n  req: NextRequest;\r\n  res: NextResponse;\r\n  requestMetadata: RequestMetadata;\r\n  user: SupabaseUser;\r\n  profile: SupabaseProfile | null;\r\n  profileQueryError?: { message?: string } | null; // Changed to allow null\r\n}\r\n\r\n/**\r\n * Logs a security event and redirects to an access-denied page.\r\n * @example\r\n * logAndRedirectDenied({\r\n *   req: requestObject,\r\n *   res: responseObject,\r\n *   requestMetadata: metadataObject,\r\n *   user: userObject,\r\n *   profile: profileObject,\r\n *   profileQueryError: errorObject\r\n * })\r\n * // Redirects user and logs the event with relevant details\r\n * @param {Object} params - Contains necessary parameters for the function.\r\n * @param {Object} params.req - The HTTP request object.\r\n * @param {Object} params.res - The HTTP response object.\r\n * @param {Object} params.requestMetadata - Metadata related to the request.\r\n * @param {Object} params.user - User information object.\r\n * @param {Object} params.profile - Profile object related to the user.\r\n * @param {Object} params.profileQueryError - Error object if querying profile fails.\r\n * @returns {Promise<void>} Returns a promise that resolves after logging and redirecting.\r\n * @description\r\n *   - Utilizes `logSecurityEventAndRedirect` to perform logging and redirect operations.\r\n *   - The function assumes a structure for the user object, expecting 'id' and 'email' properties.\r\n *   - Redirects to '/access-denied' path by default.\r\n *   - Sets event severity as 'error' when logging the security event.\r\n */\r\nasync function logAndRedirectDenied({\r\n  req,\r\n  res,\r\n  requestMetadata,\r\n  user,\r\n  profile,\r\n  profileQueryError,\r\n}: LogAndRedirectDeniedParams) {\r\n  return logSecurityEventAndRedirect({\r\n    req,\r\n    res,\r\n    logParams: {\r\n      event_type: 'permission_denied',\r\n      user_id: user.id,\r\n      user_email: user.email ?? undefined,\r\n      ip_address: requestMetadata.ip,\r\n      user_agent: requestMetadata.userAgent,\r\n      details: {\r\n        attempted_url: requestMetadata.url,\r\n        user_role: profile?.role ?? 'none',\r\n        reason: 'insufficient_privileges',\r\n        error: profileQueryError?.message,\r\n      },\r\n      severity: 'error',\r\n    },\r\n    redirectPath: '/access-denied',\r\n  });\r\n}\r\n\r\n/**\r\n * Protects admin routes by verifying user authentication and authorization.\r\n * @example\r\n * protectAdminRoutes(req, res, requestMetadata)\r\n * returns NextResponse or redirects depending on user authentication status.\r\n * @param {NextRequest} req - The incoming request object.\r\n * @param {NextResponse} res - The response object to send back to the client.\r\n * @param {RequestMetadata} requestMetadata - Metadata about the request for logging purposes.\r\n * @returns {NextResponse} Returns the response object or redirects to an error page.\r\n * @description\r\n *   - Fetches and verifies the user's session from Supabase.\r\n *   - Checks if the user is an admin based on the profile 'role' from the database.\r\n *   - Logs access attempts to the admin panel for auditing purposes.\r\n *   - Redirects to an appropriate error handler if the user isn't authenticated or authorized.\r\n */\r\nexport async function protectAdminRoutes(\r\n  req: NextRequest,\r\n  res: NextResponse,\r\n  requestMetadata: RequestMetadata,\r\n) {\r\n  const supabase = createSupabaseMiddlewareClient(req, res);\r\n  const { data, error: userError } = await supabase.auth.getUser();\r\n  const user = data?.user;\r\n\r\n  if (userError || !user) {\r\n    return logAndRedirect({\r\n      req,\r\n      res,\r\n      requestMetadata,\r\n      reason: 'no_session',\r\n      userError: userError ?? undefined,\r\n    });\r\n  }\r\n  // Explicitly type the result of the Supabase query\r\n  const { data: profile, error: profileQueryError } = (await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', user.id)\r\n    .single()) as { data: SupabaseProfile | null; error: { message?: string } | null };\r\n  if (profileQueryError || (profile && profile.role !== 'admin')) {\r\n    return logAndRedirectDenied({\r\n      req,\r\n      res,\r\n      requestMetadata,\r\n      user,\r\n      profile: profile ?? undefined,\r\n      profileQueryError: profileQueryError ?? undefined,\r\n    });\r\n  }\r\n  if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\r\n    await AuditLogger.logDataAccess({\r\n      userId: user.id,\r\n      userEmail: user.email ?? 'unknown',\r\n      resourceType: 'admin_panel',\r\n      resourceId: req.nextUrl.pathname,\r\n      action: req.method === 'GET' ? 'read' : 'admin_access',\r\n      request: {\r\n        ip: requestMetadata.ip,\r\n        userAgent: requestMetadata.userAgent,\r\n      },\r\n    });\r\n  }\r\n  return res;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\monitoring\\apiMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\bundleAnalyzer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":148,"column":57,"nodeType":"Property","messageId":"anyAssignment","endLine":148,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Menu on an `any` value.","line":148,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":149,"column":59,"nodeType":"Property","messageId":"anyAssignment","endLine":149,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Search on an `any` value.","line":149,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":150,"column":57,"nodeType":"Property","messageId":"anyAssignment","endLine":150,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .User on an `any` value.","line":150,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":151,"column":62,"nodeType":"Property","messageId":"anyAssignment","endLine":151,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .BarChart3 on an `any` value.","line":151,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":152,"column":61,"nodeType":"Property","messageId":"anyAssignment","endLine":152,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Settings on an `any` value.","line":152,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":152,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":153,"column":61,"nodeType":"Property","messageId":"anyAssignment","endLine":153,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Database on an `any` value.","line":153,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":158,"column":67,"nodeType":"Property","messageId":"anyAssignment","endLine":158,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .Slot on an `any` value.","line":158,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":81},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6277,6280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6277,6280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7601,7604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7601,7604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Bundle Size Analysis and Optimization Utilities\r\n * Provides insights and recommendations for bundle optimization\r\n */\r\n\r\nimport React from 'react';\r\n\r\nexport interface BundleAnalysis {\r\n  totalSize: number;\r\n  gzippedSize: number;\r\n  chunks: Array<{\r\n    name: string;\r\n    size: number;\r\n    modules: string[];\r\n  }>;\r\n  recommendations: string[];\r\n}\r\n\r\n/**\r\n * Bundle optimization recommendations based on analysis\r\n */\r\nexport function getBundleOptimizationRecommendations(): string[] {\r\n  const recommendations = [\r\n    // Code splitting recommendations\r\n    'Implement dynamic imports for admin dashboard components',\r\n    'Split authentication components into separate chunks',\r\n    'Lazy load chart components (Recharts) only when needed',\r\n\r\n    // Tree shaking recommendations\r\n    'Use named imports instead of default imports for UI libraries',\r\n    'Remove unused Lucide React icons',\r\n    'Optimize Radix UI imports to only include used components',\r\n\r\n    // External dependencies optimization\r\n    'Consider replacing Recharts with a lighter charting library for simple charts',\r\n    'Use Next.js Image component instead of external image libraries',\r\n    'Minimize Supabase client bundle size by importing only needed functions',\r\n\r\n    // Performance optimizations\r\n    'Enable gzip compression in production',\r\n    'Use Next.js bundle analyzer to identify large dependencies',\r\n    'Implement service worker for caching static assets',\r\n\r\n    // Modern JavaScript features\r\n    'Use ES2020+ features for smaller bundle sizes',\r\n    'Enable Next.js experimental optimizePackageImports',\r\n    'Consider using SWC minification for better performance',\r\n  ];\r\n\r\n  return recommendations;\r\n}\r\n\r\n/**\r\n * Critical performance metrics for bundle optimization\r\n */\r\nexport interface PerformanceBudget {\r\n  maxBundleSize: number; // in KB\r\n  maxChunkSize: number; // in KB\r\n  maxInitialLoad: number; // in KB\r\n  maxAssetSize: number; // in KB\r\n}\r\n\r\nexport const PERFORMANCE_BUDGETS: PerformanceBudget = {\r\n  maxBundleSize: 500, // 500KB total bundle\r\n  maxChunkSize: 200, // 200KB per chunk\r\n  maxInitialLoad: 300, // 300KB initial load\r\n  maxAssetSize: 100, // 100KB per asset\r\n};\r\n\r\n/**\r\n * Check if bundle meets performance budgets\r\n */\r\nexport function checkPerformanceBudget(analysis: Partial<BundleAnalysis>): {\r\n  passed: boolean;\r\n  violations: Array<{\r\n    metric: string;\r\n    actual: number;\r\n    budget: number;\r\n    severity: 'warning' | 'error';\r\n  }>;\r\n} {\r\n  const violations: Array<{\r\n    metric: string;\r\n    actual: number;\r\n    budget: number;\r\n    severity: 'warning' | 'error';\r\n  }> = [];\r\n\r\n  // Check total bundle size\r\n  if (\r\n    analysis.totalSize != undefined &&\r\n    analysis.totalSize > PERFORMANCE_BUDGETS.maxBundleSize * 1024\r\n  ) {\r\n    violations.push({\r\n      metric: 'Total Bundle Size',\r\n      actual: Math.round(analysis.totalSize / 1024),\r\n      budget: PERFORMANCE_BUDGETS.maxBundleSize,\r\n      severity: 'error',\r\n    });\r\n  }\r\n\r\n  // Check individual chunk sizes\r\n  if (analysis.chunks) {\r\n    for (const chunk of analysis.chunks) {\r\n      if (chunk.size > PERFORMANCE_BUDGETS.maxChunkSize * 1024) {\r\n        violations.push({\r\n          metric: `Chunk Size (${chunk.name})`,\r\n          actual: Math.round(chunk.size / 1024),\r\n          budget: PERFORMANCE_BUDGETS.maxChunkSize,\r\n          severity: 'warning',\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    passed: violations.length === 0,\r\n    violations,\r\n  };\r\n}\r\n\r\n/**\r\n * Dynamic import utilities for code splitting\r\n */\r\nexport const DynamicImports = {\r\n  // Admin dashboard components\r\n  AdminDashboard: () => import('@/app/admin/page'),\r\n  FoodTruckManagement: () => import('@/app/admin/food-trucks/page'),\r\n  Analytics: () => import('@/app/admin/analytics/page'),\r\n\r\n  // Chart components (heavy dependencies)\r\n  Charts: () => import('recharts'),\r\n\r\n  // Authentication components\r\n  LoginPage: () => import('@/app/login/page'),\r\n\r\n  // Map components - commented out until component exists\r\n  // MapDisplay: () => import('@/components/MapDisplay'),\r\n};\r\n\r\n/**\r\n * Optimized imports for common libraries\r\n */\r\nexport const OptimizedImports = {\r\n  // Lucide React - use standard imports (tree-shaking handled by bundler)\r\n  icons: {\r\n    // Use regular lucide-react imports - modern bundlers handle tree-shaking\r\n    Menu: () => import('lucide-react').then((mod) => ({ Menu: mod.Menu })),\r\n    Search: () => import('lucide-react').then((mod) => ({ Search: mod.Search })),\r\n    User: () => import('lucide-react').then((mod) => ({ User: mod.User })),\r\n    BarChart3: () => import('lucide-react').then((mod) => ({ BarChart3: mod.BarChart3 })),\r\n    Settings: () => import('lucide-react').then((mod) => ({ Settings: mod.Settings })),\r\n    Database: () => import('lucide-react').then((mod) => ({ Database: mod.Database })),\r\n  },\r\n\r\n  // Radix UI - optimized imports\r\n  ui: {\r\n    Button: () => import('@radix-ui/react-slot').then((mod) => ({ Slot: mod.Slot })),\r\n    Dialog: () => import('@radix-ui/react-dialog'),\r\n    DropdownMenu: () => import('@radix-ui/react-dropdown-menu'),\r\n  },\r\n};\r\n\r\n/**\r\n * Performance monitoring for bundle loading\r\n */\r\nexport class BundlePerformanceMonitor {\r\n  private static loadTimes = new Map<string, number>();\r\n\r\n  /**\r\n   * Track chunk load time\r\n   */\r\n  static trackChunkLoad(chunkName: string, startTime: number): void {\r\n    const loadTime = performance.now() - startTime;\r\n    this.loadTimes.set(chunkName, loadTime);\r\n\r\n    // Log slow loading chunks\r\n    if (loadTime > 1000) {\r\n      // More than 1 second\r\n      console.warn(`Slow chunk load detected: ${chunkName} took ${loadTime.toFixed(2)}ms`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get chunk load statistics\r\n   */\r\n  static getLoadStats(): Array<{ chunk: string; loadTime: number }> {\r\n    return [...this.loadTimes.entries()].map(([chunk, loadTime]) => ({\r\n      chunk,\r\n      loadTime,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get average load time\r\n   */\r\n  static getAverageLoadTime(): number {\r\n    const times = [...this.loadTimes.values()];\r\n    return times.length > 0 ? times.reduce((sum, time) => sum + time, 0) / times.length : 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Code splitting helper for React components\r\n */\r\nexport function createLazyComponent<T extends React.ComponentType<any>>(\r\n  importFn: () => Promise<{ default: T }>,\r\n  fallback?: React.ComponentType,\r\n) {\r\n  const LazyComponent = React.lazy(importFn);\r\n\r\n  /**\r\n   * Wraps a lazy loaded component with performance monitoring.\r\n   * @example\r\n   * WrappedComponent(props);\r\n   * Returns a React component wrapped with a Suspense fallback and performance tracking.\r\n   * @param {React.ComponentProps<T>} props - The props for the wrapped lazy component.\r\n   * @returns {React.ReactElement} A React element that wraps the lazy component within a Suspense fallback.\r\n   * @description\r\n   *   - Utilizes React's Suspense to handle lazy loading of components with a fallback UI.\r\n   *   - Tracks the performance of the component chunk loading using BundlePerformanceMonitor.\r\n   *   - Analyzes the load-time performance by capturing the start time at component mount.\r\n   */\r\n  return function WrappedComponent(props: React.ComponentProps<T>) {\r\n    const startTime = performance.now();\r\n\r\n    React.useEffect(() => {\r\n      BundlePerformanceMonitor.trackChunkLoad(\r\n        importFn.toString().slice(0, 50), // Use function string as identifier\r\n        startTime,\r\n      );\r\n    }, []);\r\n\r\n    return (\r\n      <React.Suspense fallback={fallback ? React.createElement(fallback) : <div>Loading...</div>}>\r\n        <LazyComponent {...(props as any)} />\r\n      </React.Suspense>\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n * Bundle size recommendations based on current setup\r\n */\r\nexport function getProjectSpecificRecommendations(): Array<{\r\n  category: string;\r\n  recommendations: string[];\r\n  priority: 'high' | 'medium' | 'low';\r\n}> {\r\n  return [\r\n    {\r\n      category: 'Code Splitting',\r\n      priority: 'high',\r\n      recommendations: [\r\n        'Split admin dashboard into separate route chunks',\r\n        'Lazy load Recharts components only when analytics page is accessed',\r\n        'Dynamic import authentication components',\r\n        'Separate map components into their own chunk',\r\n      ],\r\n    },\r\n    {\r\n      category: 'Dependency Optimization',\r\n      priority: 'medium',\r\n      recommendations: [\r\n        'Use tree-shaking for Lucide React icons',\r\n        'Optimize Radix UI imports to only include used components',\r\n        'Consider lighter alternatives to heavy dependencies',\r\n        'Use Next.js optimizePackageImports for @radix-ui',\r\n      ],\r\n    },\r\n    {\r\n      category: 'Asset Optimization',\r\n      priority: 'medium',\r\n      recommendations: [\r\n        'Optimize images with Next.js Image component',\r\n        'Use WebP/AVIF formats for better compression',\r\n        'Implement proper caching headers for static assets',\r\n        'Minimize CSS bundle size with unused CSS removal',\r\n      ],\r\n    },\r\n    {\r\n      category: 'Runtime Optimization',\r\n      priority: 'low',\r\n      recommendations: [\r\n        'Implement service worker for caching',\r\n        'Use compression middleware in production',\r\n        'Enable HTTP/2 server push for critical resources',\r\n        'Implement resource hints (preload, prefetch)',\r\n      ],\r\n    },\r\n  ];\r\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\databaseCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\webVitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\pipelineHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\scrapingProcessor.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":29,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1234,1262],"text":"((scrapeResult.data?.markdown) == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1235,1262],"text":"((scrapeResult.data?.markdown) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1234,1262],"text":"(!Boolean((scrapeResult.data?.markdown)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":110,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":110,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":145,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":145,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6496,6511],"text":"job.target_url == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6497,6511],"text":"(job.target_url ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6496,6511],"text":"!Boolean(job.target_url)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { ScrapingJobService } from '@/lib/supabase';\r\nimport { ExtractedFoodTruckDetails } from '../types';\r\nimport {\r\n  validateInputAndPrepare,\r\n  buildTruckDataSchema,\r\n  handleDuplicateCheck,\r\n  finalizeJobStatus,\r\n} from './pipelineHelpers';\r\n\r\n/**\r\n * Initiates web scraping for a specified food truck website.\r\n * @example\r\n * handleScraping(\"https://foodtruck.com\", \"job123\")\r\n * Returns data object with markdown content\r\n * @param {string} targetUrl - The URL of the food truck website to scrape.\r\n * @param {string} jobId - The unique identifier for the scraping job.\r\n * @returns {Object} An object containing the scraped data, including markdown content.\r\n * @description\r\n *   - Utilizes firecrawl library to perform web scraping.\r\n *   - Calls handleJobFailure if scraping is unsuccessful or markdown content is missing.\r\n *   - Logs the progress and success of the scraping process in the console.\r\n */\r\nasync function handleScraping(targetUrl: string, jobId: string) {\r\n  console.info(`Starting scrape for ${targetUrl}`);\r\n  const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(targetUrl);\r\n\r\n  if (!scrapeResult.success || !scrapeResult.data?.markdown) {\r\n    const error = scrapeResult.error ?? 'Scraping failed or markdown content not found';\r\n    await handleJobFailure(jobId, error);\r\n    throw new Error(error);\r\n  }\r\n\r\n  console.info(`Scraping successful for ${targetUrl}, proceeding to Gemini extraction.`);\r\n  return scrapeResult.data;\r\n}\r\n\r\n/**\r\n * Handles the extraction of food truck details using Gemini and manages job failures.\r\n * @example\r\n * handleGeminiExtraction(\"sample_markdown\", \"http://example.com\", \"12345\")\r\n * { name: \"Sample Food Truck\", location: \"123 Main St.\" }\r\n * @param {string} markdown - The Markdown content containing food truck details.\r\n * @param {string} sourceUrl - The URL of the source from which details are extracted.\r\n * @param {string} jobId - The identifier for the job being processed.\r\n * @returns {Object} The extracted food truck details if successful.\r\n * @description\r\n *   - Utilizes Gemini to extract data from the provided Markdown content.\r\n *   - Handles failure scenarios by logging errors and updating job status.\r\n *   - Throws an error when extraction is unsuccessful.\r\n */\r\nasync function handleGeminiExtraction(markdown: string, sourceUrl: string, jobId: string) {\r\n  const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(markdown, sourceUrl);\r\n\r\n  if (!geminiResult.success || !geminiResult.data) {\r\n    const error = geminiResult.error ?? 'Gemini data extraction failed';\r\n    await handleJobFailure(jobId, error);\r\n    throw new Error(error);\r\n  }\r\n\r\n  console.info(`Gemini extraction successful for ${sourceUrl}.`);\r\n  return geminiResult.data;\r\n}\r\n\r\n/**\r\n* Handles the failure of a job by updating its status.\r\n* @example\r\n* handleJobFailure('job1234', 'Timeout error')\r\n* // Output: Logs an error message and updates the job status.\r\n* @param {string} jobId - The unique identifier of the job that failed.\r\n* @param {string} error - The error message describing the reason for failure.\r\n* @returns {Promise<void>} Resolves successfully once the job status is updated.\r\n* @description\r\n*   - Logs the error to the console for debugging purposes.\r\n*   - Checks if the current job status is not already 'failed' before updating.\r\n*   - Updates the job status to 'failed' if applicable, capturing any errors encountered.\r\n*   - Manages any errors that arise during the status update attempt.\r\n*/\r\nasync function handleJobFailure(jobId: string, error: string) {\r\n  console.error(`Job ${jobId} failed:`, error);\r\n  try {\r\n    const currentJob = await ScrapingJobService.getJobsByStatus('all').then((jobs) =>\r\n      jobs.find((j) => j.id === jobId),\r\n    );\r\n    if (currentJob && currentJob.status !== 'failed') {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', { errors: [error] });\r\n    }\r\n  } catch (statusUpdateError) {\r\n    console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\r\n  }\r\n}\r\n\r\n/**\r\n * Manages retry logic for a scraping job based on its current retry count.\r\n * @example\r\n * handleRetryLogic(\"job123\")\r\n * undefined\r\n * @param {string} jobId - The unique identifier for the scraping job.\r\n * @returns {Promise<void>} Does not return a value but handles retries or logs errors.\r\n * @description\r\n *   - Utilizes ScrapingJobService to increment the retry count for the given job.\r\n *   - Determines whether to retry the job based on retry_count and max_retries properties.\r\n *   - Logs messages to inform about retry attempts or if max retries have been reached.\r\n *   - Catches and logs errors encountered during the retry process.\r\n */\r\nasync function handleRetryLogic(jobId: string) {\r\n  try {\r\n    const job = await ScrapingJobService.incrementRetryCount(jobId);\r\n    if (job && typeof job.retry_count === 'number' && typeof job.max_retries === 'number') {\r\n      if (job.retry_count < job.max_retries) {\r\n        console.info(`Retrying job ${jobId} (attempt ${job.retry_count}/${job.max_retries})`);\r\n        setTimeout(() => {\r\n          void processScrapingJob(jobId);\r\n        }, 5000);\r\n      } else {\r\n        console.warn(`Job ${jobId} reached max retries (${job.max_retries}).`);\r\n      }\r\n    } else {\r\n      console.error(\r\n        `Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`,\r\n      );\r\n    }\r\n  } catch (retryError) {\r\n    console.error(`Error during retry logic for job ${jobId}:`, retryError);\r\n  }\r\n}\r\n\r\n/**\r\n * Processes a scraping job by managing its lifecycle and data extraction.\r\n * @example\r\n * processScrapingJob('12345')\r\n * // Scraping job 12345 completed successfully and data processed.\r\n * @param {string} jobId - The unique identifier for the scraping job.\r\n * @returns {Promise<void>} Resolves when the job is completed or retried.\r\n * @description\r\n *   - Updates the scraping job status to 'running' at the beginning and 'completed' at the end of the process.\r\n *   - Performs data scraping and extraction using job's target URL.\r\n *   - Handles scenarios where a target URL is not specified, resulting in an error.\r\n *   - Implements retry logic in case of failure during the job processing.\r\n */\r\nexport async function processScrapingJob(jobId: string): Promise<void> {\r\n  try {\r\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\r\n    if (!job.target_url) {\r\n      throw new Error('No target URL specified');\r\n    }\r\n\r\n    const scrapeData = await handleScraping(job.target_url, jobId);\r\n    const extractedData = await handleGeminiExtraction(\r\n      scrapeData.markdown,\r\n      scrapeData.source_url ?? job.target_url,\r\n      jobId,\r\n    );\r\n\r\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\r\n      data_collected: extractedData as unknown as Record<string, unknown>,\r\n      completed_at: new Date().toISOString(),\r\n    });\r\n\r\n    await createOrUpdateFoodTruck(jobId, extractedData, scrapeData.source_url ?? job.target_url);\r\n\r\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\r\n  } catch {\r\n    await handleRetryLogic(jobId);\r\n  }\r\n}\r\n\r\n/**\r\n* Creates or updates a food truck entry based on extracted data and handles job processing.\r\n* @example\r\n* createOrUpdateFoodTruck('123abc', extractedTruckData, 'http://example.com')\r\n* undefined\r\n* @param {string} jobId - Unique identifier for the job being processed.\r\n* @param {ExtractedFoodTruckDetails} extractedTruckData - Object containing details about the food truck extracted from a source.\r\n* @param {string} sourceUrl - The URL from which the food truck data was extracted.\r\n* @returns {Promise<void>} Resolves when processing is complete; returns nothing explicitly.\r\n* @description\r\n*   - Validates the input data before proceeding with creation or update.\r\n*   - Applies a duplicate check mechanism to avoid redundant entries.\r\n*   - Finalizes the job status, ensuring proper completion or failure handling.\r\n*   - Logs error details for troubleshooting job processing issues.\r\n*/\r\nexport async function createOrUpdateFoodTruck(\r\n  jobId: string,\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n) {\r\n  try {\r\n    const validation = await validateInputAndPrepare(jobId, extractedTruckData, sourceUrl);\r\n    if (!validation.isValid) {\r\n      return;\r\n    }\r\n\r\n    const truckData = buildTruckDataSchema(extractedTruckData, sourceUrl, validation.name);\r\n    const truck = await handleDuplicateCheck(jobId, truckData, validation.name);\r\n    await finalizeJobStatus(jobId, truck, sourceUrl);\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n    console.error(\r\n      `Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`,\r\n      error,\r\n    );\r\n    await handleJobFailure(jobId, `Food truck data processing/saving failed: ${errorMessage}`);\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\schemas\\truck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\auditLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\rateLimiter.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":288,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":288,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8233,8250],"text":"result.retryAfter != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8233,8250],"text":"result.retryAfter ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8233,8250],"text":"Boolean(result.retryAfter)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Rate Limiting Implementation\r\n * Prevents brute force attacks and API abuse with intelligent rate limiting\r\n */\r\n\r\nimport { NextResponse } from 'next/server'; // Added import for NextResponse\r\n\r\ninterface RateLimitEntry {\r\n  count: number;\r\n  resetTime: number;\r\n  blocked: boolean;\r\n  blockUntil?: number;\r\n}\r\n\r\n// In-memory rate limit store (in production, use Redis)\r\nconst rateLimitStore = new Map<string, RateLimitEntry>();\r\n\r\n// Rate limit configurations for different endpoints\r\nexport const RATE_LIMIT_CONFIGS = {\r\n  // Authentication endpoints - strict limits\r\n  auth: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    maxRequests: 5, // 5 attempts per 15 minutes\r\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\r\n    skipSuccessfulRequests: true,\r\n  },\r\n  // API endpoints - moderate limits\r\n  api: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 60, // 60 requests per minute\r\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\r\n    skipSuccessfulRequests: false,\r\n  },\r\n  // Admin endpoints - very strict limits\r\n  admin: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 20, // 20 requests per minute\r\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\r\n    skipSuccessfulRequests: false,\r\n  },\r\n} as const;\r\n\r\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\r\n\r\n/**\r\n * Rate Limiter Service\r\n */\r\nexport class RateLimiter {\r\n  // Extract logic from checkRateLimit to reduce function size\r\n  private static isBlocked(entry: RateLimitEntry | undefined, now: number): boolean {\r\n    return Boolean(\r\n      entry && entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil,\r\n    );\r\n  }\r\n\r\n  private static resetEntry(\r\n    entry: RateLimitEntry,\r\n    now: number,\r\n    config: (typeof RATE_LIMIT_CONFIGS)[RateLimitType],\r\n  ): void {\r\n    entry.count = 0;\r\n    entry.resetTime = now + config.windowMs;\r\n    entry.blocked = false;\r\n    entry.blockUntil = undefined;\r\n  }\r\n\r\n  /**\r\n   * Check if request should be rate limited\r\n   */\r\n  static checkRateLimit(\r\n    identifier: string,\r\n    type: RateLimitType = 'api',\r\n  ): {\r\n    allowed: boolean;\r\n    remaining: number;\r\n    resetTime: number;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    this.cleanupExpiredEntries();\r\n    let entry = rateLimitStore.get(key);\r\n    if (!entry) {\r\n      entry = { count: 0, resetTime: now + config.windowMs, blocked: false };\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n    if (this.isBlocked(entry, now)) {\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil((entry.blockUntil! - now) / 1000),\r\n      };\r\n    }\r\n    if (now >= entry.resetTime) {\r\n      this.resetEntry(entry, now, config);\r\n    }\r\n    if (entry.count >= config.maxRequests) {\r\n      entry.blocked = true;\r\n      entry.blockUntil = now + config.blockDurationMs;\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil(config.blockDurationMs / 1000),\r\n      };\r\n    }\r\n    entry.count += 1;\r\n    rateLimitStore.set(key, entry);\r\n    return {\r\n      allowed: true,\r\n      remaining: config.maxRequests - entry.count,\r\n      resetTime: entry.resetTime,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Record successful request (for auth endpoints)\r\n   */\r\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    if (!config.skipSuccessfulRequests) return;\r\n\r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n\r\n    if (entry) {\r\n      // Reset counter on successful auth\r\n      entry.count = 0;\r\n      entry.blocked = false;\r\n      entry.blockUntil = undefined;\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get rate limit status without incrementing\r\n   */\r\n  static getStatus(\r\n    identifier: string,\r\n    type: RateLimitType = 'api',\r\n  ): {\r\n    remaining: number;\r\n    resetTime: number;\r\n    blocked: boolean;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n\r\n    if (!entry) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false,\r\n      };\r\n    }\r\n\r\n    // Check if blocked\r\n    if (entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil) {\r\n      // Changed != undefined to != null\r\n      return {\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        blocked: true,\r\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000),\r\n      };\r\n    }\r\n\r\n    // Check if window expired\r\n    if (now >= entry.resetTime) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false,\r\n      };\r\n    }\r\n\r\n    return {\r\n      remaining: Math.max(0, config.maxRequests - entry.count),\r\n      resetTime: entry.resetTime,\r\n      blocked: false,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clean up expired entries to prevent memory leaks\r\n   */\r\n  private static cleanupExpiredEntries(): void {\r\n    const now = Date.now();\r\n\r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      // Remove entries that are expired and not blocked\r\n      if (\r\n        now >= entry.resetTime &&\r\n        (!entry.blocked || entry.blockUntil == undefined || now >= entry.blockUntil)\r\n      ) {\r\n        // Changed == undefined to == null\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all rate limit data for an identifier\r\n   */\r\n  static clearLimits(identifier: string, type?: RateLimitType): void {\r\n    if (type) {\r\n      const key = `${type}:${identifier}`;\r\n      rateLimitStore.delete(key);\r\n    } else {\r\n      // Clear all types for this identifier\r\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS) as RateLimitType[]) {\r\n        // Added type assertion\r\n        const key = `${limitType}:${identifier}`;\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get rate limit statistics\r\n   */\r\n  static getStats(): {\r\n    totalEntries: number;\r\n    blockedEntries: number;\r\n    entriesByType: Record<string, number>;\r\n  } {\r\n    const stats = {\r\n      totalEntries: rateLimitStore.size,\r\n      blockedEntries: 0,\r\n      entriesByType: {} as Record<string, number>,\r\n    };\r\n\r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      const type = key.split(':')[0];\r\n      stats.entriesByType[type] = (stats.entriesByType[type] ?? 0) + 1;\r\n\r\n      if (entry.blocked) {\r\n        stats.blockedEntries += 1;\r\n      }\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility function to get client identifier from request\r\n */\r\nexport function getClientIdentifier(request: Request): string {\r\n  // Try to get IP address from various headers\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIp = request.headers.get('x-real-ip');\r\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\r\n\r\n  // Use the first available IP\r\n  const ip = forwarded?.split(',')[0]?.trim() ?? realIp ?? cfConnectingIp ?? 'unknown';\r\n\r\n  // Include user agent for more specific identification\r\n  const userAgent = request.headers.get('user-agent') ?? 'unknown';\r\n\r\n  // Create a hash of IP + User Agent for better identification\r\n  return `${ip}:${userAgent.slice(0, 50)}`;\r\n}\r\n\r\n/**\r\n * Rate limiting middleware for API routes\r\n */\r\nexport function withRateLimit(\r\n  handler: (request: Request) => Promise<Response>,\r\n  type: RateLimitType = 'api',\r\n) {\r\n  return async (request: Request): Promise<Response> => {\r\n    const identifier = getClientIdentifier(request);\r\n    const result = RateLimiter.checkRateLimit(identifier, type);\r\n\r\n    if (result.allowed === false) {\r\n      const headers = new Headers({\r\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\r\n        'X-RateLimit-Remaining': '0',\r\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\r\n      });\r\n\r\n      if (result.retryAfter) {\r\n        headers.set('Retry-After', result.retryAfter.toString());\r\n      }\r\n\r\n      return new NextResponse('Too Many Requests', { status: 429, headers });\r\n    }\r\n\r\n    const response = await handler(request);\r\n\r\n    // Update headers on successful requests if not skipped\r\n    if (RATE_LIMIT_CONFIGS[type].skipSuccessfulRequests === false) {\r\n      const status = RateLimiter.getStatus(identifier, type);\r\n      response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\r\n      response.headers.set('X-RateLimit-Remaining', status.remaining.toString());\r\n      response.headers.set('X-RateLimit-Reset', new Date(status.resetTime).toISOString());\r\n    }\r\n\r\n    return response;\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\client.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":7,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":7,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[251,263],"text":"supabaseUrl == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[252,263],"text":"(supabaseUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[251,263],"text":"!Boolean(supabaseUrl)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":11,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":11,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[350,366],"text":"supabaseAnonKey == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[351,366],"text":"(supabaseAnonKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[350,366],"text":"!Boolean(supabaseAnonKey)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":30,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":17,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[552,570],"text":"(supabaseServiceKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[552,570],"text":"(supabaseServiceKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[552,570],"text":"(Boolean(supabaseServiceKey))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\n}\n\nif (!supabaseAnonKey) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport const supabaseAdmin = supabaseServiceKey\n  ? createClient(supabaseUrl, supabaseServiceKey)\n  : undefined;\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\services\\apiUsageService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\services\\dataProcessingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\services\\dataQualityService.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":13,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":13,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":21,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":21,"endColumn":25},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":47,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":47,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabaseAdmin } from '../client';\nimport { FoodTruck } from '../types';\nimport { handleSupabaseError } from '../utils';\nimport { type PostgrestSingleResponse } from '@supabase/supabase-js';\n\nexport const DataQualityService = {\n  calculateQualityScore: (truck: FoodTruck) => {\n    // Placeholder for actual quality score calculation logic\n    // This should be implemented based on defined data quality rules\n    let score = 0;\n    if (typeof truck.name === 'string' && truck.name.trim() !== '') score += 20;\n    if (\n      truck.current_location &&\n      typeof truck.current_location.lat === 'number' &&\n      !Number.isNaN(truck.current_location.lat) &&\n      typeof truck.current_location.lng === 'number' &&\n      !Number.isNaN(truck.current_location.lng)\n    )\n      score += 30;\n    if (\n      truck.contact_info &&\n      ((typeof truck.contact_info.phone === 'string' && truck.contact_info.phone.trim() !== '') ||\n        (typeof truck.contact_info.email === 'string' && truck.contact_info.email.trim() !== '') ||\n        (typeof truck.contact_info.website === 'string' &&\n          truck.contact_info.website.trim() !== ''))\n    )\n      score += 25;\n    if (Array.isArray(truck.menu) && truck.menu.length > 0) score += 15;\n    if (truck.operating_hours != undefined) score += 10;\n    return { score: Math.min(100, score) };\n  },\n\n  async updateTruckQualityScore(truckId: string): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const { data: truck, error: fetchError }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .select('*')\n      .eq('id', truckId)\n      .single();\n\n    if (fetchError) {\n      handleSupabaseError(fetchError, 'updateTruckQualityScore:fetch');\n      return { error: `Failed to fetch truck with ID ${truckId}.` };\n    }\n    if (!truck) {\n      return { error: `Truck with ID ${truckId} not found.` };\n    }\n\n    const { score } = this.calculateQualityScore(truck);\n\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .update({ data_quality_score: score })\n      .eq('id', truckId)\n      .select()\n      .single();\n\n    if (error) {\n      handleSupabaseError(error, 'updateTruckQualityScore:update');\n      return { error: `Failed to update quality score for truck with ID ${truckId}.` };\n    }\n    return data;\n  },\n};\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\services\\foodTruckService.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":53,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":53,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase, supabaseAdmin } from '../client';\nimport { FoodTruck, RawMenuItemFromDB } from '../types';\nimport { handleSupabaseError, normalizeTruckLocation, calculateDistance, insertMenuItems } from '../utils';\nimport { buildMenuByTruck, groupMenuItems, updateTruckData, updateTruckMenu } from '../utils/menuUtils';\nimport { type PostgrestResponse, type PostgrestSingleResponse } from '@supabase/supabase-js';\n\nexport const FoodTruckService = {\n  async getAllTrucks(\n    limit = 50,\n    offset = 0,\n  ): Promise<{ trucks: FoodTruck[]; total: number; error?: string }> {\n    try {\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*', { count: 'exact' })\n        .order('updated_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n      if (error) throw error;\n      const trucks: FoodTruck[] = (data ?? []).map((t: FoodTruck) => normalizeTruckLocation(t));\n      if (trucks.length === 0) return { trucks: [], total: count ?? 0 };\n      const truckIds = trucks.map((t: FoodTruck) => t.id);\n      let menuItems: RawMenuItemFromDB[] = [];\n      try {\n        if (truckIds.length > 0) {\n          const { data: items, error: menuError } = await supabase\n            .from('menu_items')\n            .select('*')\n            .in('food_truck_id', truckIds) as { data: RawMenuItemFromDB[] | null; error: Error | null };\n          if (menuError) throw new Error(menuError.message);\n          menuItems = items ?? [];\n        }\n      } catch (menuError) {\n        handleSupabaseError(menuError as Error, 'getAllTrucks:menu_items');\n      }\n      const menuByTruck = buildMenuByTruck(menuItems);\n      for (const truck of trucks) {\n        truck.menu = groupMenuItems(menuByTruck[truck.id] ?? []);\n      }\n      return { trucks, total: count ?? 0 };\n    } catch (error) {\n      handleSupabaseError(error as Error, 'getAllTrucks');\n      return { trucks: [], total: 0, error: \"That didn't work, please try again later.\" };\n    }\n  },\n  async getTruckById(id: string): Promise<FoodTruck | { error: string }> {\n    try {\n      const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*')\n        .eq('id', id)\n        .single();\n      if (error) throw error;\n      if (!data) {\n        return { error: \"That didn't work, please try again later.\" };\n      }\n      const truck: FoodTruck = normalizeTruckLocation(data);\n      const { data: items, error: menuError } = await supabase\n        .from('menu_items')\n        .select('*')\n        .eq('food_truck_id', id) as { data: RawMenuItemFromDB[] | null; error: Error | null };\n      if (menuError) throw menuError;\n      truck.menu = groupMenuItems(items ?? []);\n      return truck;\n    } catch (error) {\n      handleSupabaseError(error as Error, 'getTruckById');\n      return { error: \"That didn't work, please try again later.\" };\n    }\n  },\n\n  async getTrucksByLocation(\n    lat: number,\n    lng: number,\n    radiusKm: number,\n  ): Promise<FoodTruck[] | { error: string }> {\n    try {\n      const { trucks } = await FoodTruckService.getAllTrucks();\n      const nearbyTrucks = trucks.filter((truck: FoodTruck) => {\n        if (\n          truck.current_location == undefined ||\n          typeof truck.current_location.lat !== 'number' ||\n          typeof truck.current_location.lng !== 'number'\n        ) {\n          return false;\n        }\n        const distance = calculateDistance(\n          lat,\n          lng,\n          truck.current_location.lat,\n          truck.current_location.lng,\n        );\n        return distance <= radiusKm;\n      });\n      return nearbyTrucks;\n    } catch (error: unknown) {\n      handleSupabaseError(error as Error, 'getTrucksByLocation');\n      return { error: \"That didn't work, please try again later.\" };\n    }\n  },\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const menuData = truckData.menu;\n    const truckDataWithoutMenu = { ...truckData };\n    delete truckDataWithoutMenu.menu;\n    const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .insert([truckDataWithoutMenu])\n      .select()\n      .single();\n    if (error) {\n      handleSupabaseError(error, 'createTruck');\n      return { error: 'Failed to create truck.' };\n    }\n    await insertMenuItems(truck.id, menuData);\n    return truck;\n  },\n\n  async updateTruck(\n    id: string,\n    updates: Partial<FoodTruck>,\n  ): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const menuData = updates.menu;\n    const updatesWithoutMenu = { ...updates };\n    delete updatesWithoutMenu.menu;\n    const truckResult = await updateTruckData(id, updatesWithoutMenu);\n    if ('error' in truckResult) {\n      return truckResult;\n    }\n    if (menuData != undefined) {\n      await updateTruckMenu(id, menuData);\n    }\n    return truckResult;\n  },\n\n  async getDataQualityStats(): Promise<{\n    total_trucks: number;\n    avg_quality_score: number;\n    high_quality_count: number;\n    medium_quality_count: number;\n    low_quality_count: number;\n    verified_count: number;\n    pending_count: number;\n    flagged_count: number;\n  }> {\n    try {\n      const {\n        data,\n        error,\n      }: PostgrestSingleResponse<{\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      }> = await supabase.rpc('get_data_quality_stats').single();\n      if (error) throw error;\n      return data as {\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      };\n    } catch (error: unknown) {\n      console.warn('Error fetching data quality stats:', error);\n      return {\n        total_trucks: 0,\n        avg_quality_score: 0,\n        high_quality_count: 0,\n        medium_quality_count: 0,\n        low_quality_count: 0,\n        verified_count: 0,\n        pending_count: 0,\n        flagged_count: 0,\n      };\n    }\n  },\n};\n\n\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\services\\scrapingJobService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\types\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2167,2170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2167,2170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FoodTruckSchema } from '../../types';\n\nexport interface FoodTruckLocation {\n  lat: number;\n  lng: number;\n  address?: string;\n  timestamp: string;\n}\n\nexport interface FoodTruck extends FoodTruckSchema {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  is_active?: boolean;\n  exact_location?: FoodTruckLocation;\n  city_location?: FoodTruckLocation;\n}\n\nexport interface ScrapingJob {\n  id: string;\n  job_type: string;\n  target_url?: string;\n  target_handle?: string;\n  platform?: string;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  priority: number;\n  scheduled_at: string;\n  started_at?: string;\n  completed_at?: string;\n  data_collected?: Record<string, unknown>;\n  errors?: string[];\n  retry_count: number;\n  max_retries: number;\n  created_at: string;\n}\n\nexport interface DataProcessingQueue {\n  id: string;\n  truck_id?: string;\n  processing_type: string;\n  raw_data: Record<string, unknown>;\n  processed_data?: Record<string, unknown>;\n  gemini_tokens_used: number;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  priority: number;\n  created_at: string;\n  processed_at?: string;\n}\n\nexport interface ApiUsage {\n  id: string;\n  service_name: string;\n  usage_date: string;\n  requests_count: number;\n  tokens_used: number;\n}\n\nexport interface RawMenuItemFromDB {\n  name: string;\n  description?: string;\n  price?: number;\n  dietary_tags?: string[];\n  category?: string;\n  [key: string]: unknown;\n}\n\nexport type DailyOperatingHours =\n  | { open: string; close: string; closed?: boolean }\n  | { closed: true }\n  | undefined;\n\nexport interface OperatingHours {\n  monday: DailyOperatingHours;\n  tuesday: DailyOperatingHours;\n  wednesday: DailyOperatingHours;\n  thursday: DailyOperatingHours;\n  friday: DailyOperatingHours;\n  saturday: DailyOperatingHours;\n  sunday: DailyOperatingHours;\n  [key: string]: DailyOperatingHours; // Add index signature\n}\n\nexport type PriceRange = '$' | '$$' | '$$$' | '$$$$' | undefined;\n\nexport interface MenuCategory {\n  name: string;\n  items: MenuItem[];\n}\n\nexport interface MenuItem {\n  name: string;\n  description: string | undefined;\n  price: number | string | undefined;\n  dietary_tags: any[];\n  is_popular?: boolean;\n}\n\n\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\utils\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\utils\\menuUtils.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":11,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":11,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MenuItem, MenuCategory, RawMenuItemFromDB, FoodTruck } from '../types';\nimport { isMenuCategory, isMenuItem } from './typeGuards';\nimport { supabaseAdmin } from '../client';\nimport { handleSupabaseError } from './index';\nimport { type PostgrestSingleResponse } from '@supabase/supabase-js';\n\nexport function buildMenuByTruck(menuItems: RawMenuItemFromDB[]): Record<string, RawMenuItemFromDB[]> {\n    const menuByTruck: Record<string, RawMenuItemFromDB[]> = {};\n    for (const item of menuItems) {\n        if (typeof item.food_truck_id === 'string' && item.food_truck_id.trim() !== '') {\n            if (!menuByTruck[item.food_truck_id]) {\n                menuByTruck[item.food_truck_id] = [];\n            }\n            menuByTruck[item.food_truck_id].push(item);\n        }\n    }\n    return menuByTruck;\n}\n\nexport function groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\n    const byCategory: Record<string, MenuItem[]> = {};\n    for (const rawItem of rawItems) {\n        const categoryName: string = rawItem.category ?? 'Uncategorized';\n        byCategory[categoryName] ??= [];\n        const menuItem: MenuItem = {\n            name: rawItem.name,\n            description: rawItem.description ?? undefined,\n            price: rawItem.price ?? undefined,\n            dietary_tags: (rawItem.dietary_tags as string[]) ?? [],\n        };\n        byCategory[categoryName].push(menuItem);\n    }\n    return Object.entries(byCategory).map(([categoryName, itemsList]: [string, MenuItem[]]) => ({\n        name: categoryName,\n        items: itemsList,\n    }));\n}\n\nexport async function updateTruckData(\n  id: string,\n  updatesWithoutMenu: Partial<FoodTruck>,\n): Promise<FoodTruck | { error: string }> {\n  if (!supabaseAdmin) {\n    return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n  }\n\n  const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n    .from('food_trucks')\n    .update(updatesWithoutMenu)\n    .eq('id', id)\n    .select()\n    .single();\n\n  if (error) {\n    handleSupabaseError(error, 'updateTruckData');\n    return { error: 'Failed to update truck data.' };\n  }\n  return truck;\n}\n\nexport async function updateTruckMenu(id: string, menuData: MenuCategory[] | unknown[]): Promise<void> {\n  if (!supabaseAdmin) {\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n  }\n\n  const { error: deleteError } = await supabaseAdmin\n    .from('menu_items')\n    .delete()\n    .eq('food_truck_id', id);\n\n  if (deleteError) {\n    console.error('Error deleting existing menu items for truck', id, deleteError);\n  }\n\n  if (menuData != undefined && menuData.length > 0) {\n    const menuItems = menuData.flatMap((category: unknown) => {\n      if (!isMenuCategory(category)) {\n        console.warn('Skipping invalid category in updateTruckMenu:', category);\n        return [];\n      }\n\n      return (category.items ?? []).map((item: unknown) => {\n        if (!isMenuItem(item)) {\n          console.warn('Skipping invalid menu item in updateTruckMenu:', item);\n          return {\n            food_truck_id: id,\n            category: category.name ?? 'Uncategorized',\n            name: 'Unknown Item',\n            description: undefined,\n            price: undefined,\n            dietary_tags: [],\n          };\n        }\n\n        return {\n          food_truck_id: id,\n          category: category.name ?? 'Uncategorized',\n          name: item.name ?? 'Unknown Item',\n          description: item.description ?? undefined,\n          price: typeof item.price === 'number' ? item.price : undefined,\n          dietary_tags: Array.isArray(item.dietary_tags) ? item.dietary_tags : [],\n        };\n      });\n    });\n\n    if (menuItems.length > 0) {\n      const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\n\n      if (menuError) {\n        console.error('Error inserting updated menu items for truck', id, menuError);\n      }\n    }\n  }\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase\\utils\\typeGuards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types\\webVitals.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\QualityScorer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\apiHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\dataQualityFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\foodTruckHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":36,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":36,"endColumn":29,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1533,1545],"text":"(hours.closed ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1533,1545],"text":"(hours.closed === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":58,"column":51,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":58,"endColumn":55},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":76,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":76,"endColumn":16}],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":115,"column":5,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":115,"endColumn":45,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FoodTruck, DailyOperatingHours, MenuItem } from '@/lib/types'; // Added DailyOperatingHours, PriceRange, MenuItem\r\nimport { supabaseFallback } from '@/lib/fallback/supabaseFallback';\r\n\r\nexport const getCurrentDay = () => {\r\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\r\n  return days[new Date().getDay()];\r\n};\r\n\r\nexport const formatPrice = (price: number | string) => {\r\n  // Updated to accept string\r\n  if (typeof price === 'string') {\r\n    // Handle cases where price might be a string like \"$10-$20\" or \"Varies\"\r\n    return price;\r\n  }\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  }).format(price);\r\n};\r\n\r\n/**\r\n* Converts operational hours to a readable format or returns 'Closed' if applicable.\r\n* @example\r\n* formatOperatingHours({ open: '09:00', close: '17:00', closed: false })\r\n* '9:00 AM - 5:00 PM'\r\n* @param {DailyOperatingHours} hours - Object containing daily opening and closing times, and closed status.\r\n* @returns {string} Formatted operating hours string or 'Closed'.\r\n* @description\r\n*   - Handles conversion of military time to 12-hour format.\r\n*   - Adjusts for typical date parsing without relying on actual date due to fixed date string.\r\n*   - Properly responds to 'closed' status by returning 'Closed'.\r\n*   - Locales can impact formatted output by changing time conventions.\r\n*/\r\nexport const formatHours = (hours: DailyOperatingHours) => {\r\n  // Updated to accept DailyOperatingHours\r\n  if (!hours || hours.closed) {\r\n    return 'Closed';\r\n  }\r\n  const open = new Date(`1970-01-01T${hours.open}Z`).toLocaleTimeString('en-US', {\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    hour12: true,\r\n  });\r\n  const close = new Date(`1970-01-01T${hours.close}Z`).toLocaleTimeString('en-US', {\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    hour12: true,\r\n  });\r\n  return `${open} - ${close}`;\r\n};\r\n\r\nexport const getPopularItems = (truck: FoodTruck): MenuItem[] => {\r\n  // Explicitly define return type\r\n  // Explicitly check for nullish and boolean\r\n  return (\r\n    truck.menu\r\n      ?.flatMap((category) => category.items)\r\n      .filter((item): item is MenuItem => Boolean(item && item.is_popular === true)) ?? []\r\n  );\r\n};\r\n\r\n/**\r\n * Calculates the price range of all items in the food truck's menu.\r\n * @example\r\n * getPriceRange(foodTruck)\r\n * \"5.00 - 12.50\"\r\n * @param {FoodTruck} truck - The food truck object containing menu details.\r\n * @returns {string} Returns a formatted string representing the price range or 'N/A' if no valid prices are found.\r\n * @description\r\n *   - Utilizes the optional chaining operator to safely access nested menu items.\r\n *   - Filters out non-numeric and undefined prices before calculating the range.\r\n *   - Formats the minimum and maximum prices using a helper function.\r\n */\r\nexport const getPriceRange = (truck: FoodTruck) => {\r\n  const allItems = truck.menu?.flatMap((category) => category.items);\r\n  if (!allItems || allItems.length === 0) {\r\n    return 'N/A';\r\n  }\r\n  const numericPrices = allItems\r\n    .map((item) => item.price)\r\n    .filter((price): price is number => typeof price === 'number' && price != undefined); // Filter for numbers\r\n\r\n  if (numericPrices.length === 0) {\r\n    return 'N/A'; // No numeric prices found\r\n  }\r\n\r\n  const minPrice = Math.min(...numericPrices);\r\n  const maxPrice = Math.max(...numericPrices);\r\n  return `${formatPrice(minPrice)} - ${formatPrice(maxPrice)}`;\r\n};\r\n\r\nexport const getTodayHours = (truck: FoodTruck) => {\r\n  const today = getCurrentDay();\r\n  return truck.operating_hours?.[today];\r\n};\r\n\r\n// Get user's current location or default to San Francisco\r\n/**\r\n * Retrieves the user's geolocation and updates the location state.\r\n * @example\r\n * getUserLocationHelper(setUserLocation)\r\n * // Updates user's location or defaults to San Francisco\r\n * @param {function} setUserLocation - Callback function to update user's location state with latitude and longitude.\r\n * @returns {void} Function does not return anything.\r\n * @description\r\n *   - Defaults the location to San Francisco if geolocation access is denied or not supported.\r\n *   - Utilizes browser's geolocation API to fetch current coordinates.\r\n *   - Provides a warning in the console if location access is denied.\r\n */\r\nexport function getUserLocationHelper(\r\n  setUserLocation: (location: { lat: number; lng: number }) => void,\r\n) {\r\n  if (typeof navigator !== 'undefined' && navigator.geolocation != undefined) {\r\n    // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        setUserLocation({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n      },\r\n      (error) => {\r\n        console.warn('Location access denied:', error);\r\n        // Default to San Francisco\r\n        setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n      },\r\n    );\r\n  } else {\r\n    // Default to San Francisco if geolocation is not supported\r\n    setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n  }\r\n}\r\n\r\n// Load all food trucks from API\r\n/**\r\n * Loads food truck data from the server and updates state.\r\n * @example\r\n * loadFoodTrucksHelper(setTrucks, setLoading)\r\n * undefined\r\n * @param {(trucks: FoodTruck[]) => void} setTrucks - Callback to update the state with loaded food trucks.\r\n * @param {(loading: boolean) => void} setLoading - Callback to update the loading state.\r\n * @returns {void} No return value.\r\n * @description\r\n *   - Fetches data from '/api/trucks' endpoint.\r\n *   - Parses the response and expects an object containing a 'trucks' array.\r\n *   - Logs an error message to the console if fetching or parsing fails.\r\n *   - Ensures loading state is updated to false in all cases.\r\n */\r\nexport async function loadFoodTrucksHelper(\r\n  setTrucks: (trucks: FoodTruck[]) => void,\r\n  setLoading: (loading: boolean) => void,\r\n) {\r\n  try {\r\n    const { trucks } = await supabaseFallback.getFoodTrucks();\r\n    setTrucks(trucks);\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load food trucks:', error);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}\r\n\r\n// Load nearby food trucks based on user location\r\n/**\r\n* Loads nearby food trucks based on user's location.\r\n* @example\r\n* loadNearbyTrucksHelper({ lat: 37.7749, lng: -122.4194 }, setTrucksCallback)\r\n* // sets trucks with food truck data or an empty array\r\n* @param {{ lat: number; lng: number } | undefined} userLocation - The location of the user used to find nearby trucks.\r\n* @param {(trucks: FoodTruck[]) => void} setTrucks - Callback function to set the trucks data.\r\n* @returns {void} No return value.\r\n* @description\r\n*   - Fetches nearby trucks from the API using latitude and longitude.\r\n*   - Uses a fixed radius of 10 units for truck search.\r\n*   - Handles errors by logging them to the console.\r\n*/\r\nexport async function loadNearbyTrucksHelper(\r\n  userLocation: { lat: number; lng: number } | undefined,\r\n  setTrucks: (trucks: FoodTruck[]) => void,\r\n) {\r\n  if (!userLocation) return;\r\n\r\n  try {\r\n    const { trucks } = await supabaseFallback.getFoodTrucks();\r\n    setTrucks(trucks);\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load nearby trucks:', error);\r\n  }\r\n}\r\n\r\n// Check if a food truck is currently open\r\n/**\r\n * Determines if the food truck is currently open based on its operating hours.\r\n * @example\r\n * isTruckOpen(myFoodTruck)\r\n * // returns true or false depending on current time and truck's operating hours\r\n * @param {FoodTruck} truck - The food truck object with operating hours.\r\n * @returns {boolean} Indicates whether the food truck is open.\r\n * @description\r\n *   - Utilizes the current day's name to fetch operating hours.\r\n *   - Handles potential errors in parsing operating hours.\r\n *   - Logs errors related to parsing time and truck name.\r\n *   - Uses military time format (HHMM) for comparison.\r\n */\r\nexport function isTruckOpen(truck: FoodTruck): boolean {\r\n  const today = getCurrentDay();\r\n  const hours = truck.operating_hours?.[today];\r\n\r\n  // Ensure hours and its properties are not null/undefined before accessing\r\n  if (\r\n    hours == undefined ||\r\n    hours.closed === true ||\r\n    hours.open == undefined ||\r\n    hours.close == undefined\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const now = new Date();\r\n    const currentTime = now.getHours() * 100 + now.getMinutes();\r\n    const openTime = Number.parseInt(hours.open.replace(':', ''), 10);\r\n    const closeTime = Number.parseInt(hours.close.replace(':', ''), 10);\r\n\r\n    return currentTime >= openTime && currentTime <= closeTime;\r\n  } catch (error: unknown) {\r\n    console.error('Error parsing operating hours for truck', truck.name, error);\r\n    return false;\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\typeGuards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\paths.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\types\\class-variance-authority.d.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `classVarianceAuthority.d.ts` or `ClassVarianceAuthority.d.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare module 'class-variance-authority';","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\types\\lucide-react.d.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `lucideReact.d.ts` or `LucideReact.d.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare module 'lucide-react';","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\types\\radix-ui-separator.d.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `radixUiSeparator.d.ts` or `RadixUiSeparator.d.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare module '@radix-ui/react-separator';","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\types\\radix-ui-slot.d.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `radixUiSlot.d.ts` or `RadixUiSlot.d.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare module '@radix-ui/react-slot';","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"C:\\AI\\food-truck-finder-poc\\types\\radix-ui.d.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `radixUi.d.ts` or `RadixUi.d.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare module '@radix-ui/react-scroll-area';","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]}]