[{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\access-denied\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\analytics\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\auto-scraping\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-cleanup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-quality\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\events\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\monitoring\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\test-pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\users\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\automated-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\cron-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-cleanup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-quality\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\oauth-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\realtime-events\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\scraping-metrics\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\analytics\\web-vitals\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\auto-scrape-initiate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\autonomous-discovery\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\auto-scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\quality-check\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\dashboard\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\enhanced-pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\firecrawl\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\gemini\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\monitoring\\api-usage\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scheduler\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\search\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\tavily\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-integration\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-pipeline-run\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\callback\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\trucks\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\MapDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\SearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":30,"column":15,"nodeType":null,"endLine":30,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[860,863],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\WebVitalsReporter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\AdminNavLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\DataCleanupDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\RealtimeStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\UserMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupOperationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\CleanupSummaryCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\cleanup\\OperationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\DataQualityScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\PipelineStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\QualityDistributionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\RecentErrorsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\dashboard\\TotalFoodTrucksCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\BasicInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\ContactField.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":33,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":33,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[916,920],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[916,920],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[916,920],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\n// Removed Mail, Phone, Globe imports as they are not directly used here\r\n\r\ninterface ContactFieldProps {\r\n  readonly icon: React.ComponentType<{ className?: string }>;\r\n  readonly label: string;\r\n  readonly value?: string;\r\n  readonly href?: string;\r\n  readonly unavailableText: string;\r\n}\r\n\r\nexport function ContactField({\r\n  icon: Icon,\r\n  label,\r\n  value,\r\n  href,\r\n  unavailableText\r\n}: Readonly<ContactFieldProps>) {\r\n  if (value == undefined || value.length === 0) {\r\n    return (\r\n      <div className=\"flex items-center gap-3 text-gray-400\">\r\n        <Icon className=\"h-4 w-4\" />\r\n        <span className=\"text-sm\">{unavailableText}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-3\">\r\n      <Icon className=\"h-4 w-4 text-gray-500\" />\r\n      <div>\r\n        <label className=\"text-sm font-medium text-gray-500\">{label}</label>\r\n        {href ? (\r\n          <a\r\n            href={href}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"text-blue-600 hover:text-blue-800 underline\"\r\n          >\r\n            {value}\r\n          </a>\r\n        ) : (\r\n          <p className=\"text-gray-900\">{value}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\ContactInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\DataQualityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\LocationInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\OperatingHoursCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\QualityScoreMetric.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\RatingsReviewsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\SocialMediaLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\food-trucks\\detail\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\FailedProcessingQueueTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\PipelineStatisticsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\RecentScrapingJobsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\pipeline\\ScrapingJobsTableContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertListDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\AlertToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ConnectionStatusHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\EventControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\RealtimeStatusDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\ScrapingJobsStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\StatusHelpers.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/function-return-type","severity":2,"message":"Refactor this function to always return the same type.","line":24,"column":64,"nodeType":null,"endLine":24,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/function-return-type","severity":2,"message":"Refactor this function to always return the same type.","line":42,"column":63,"nodeType":null,"endLine":42,"endColumn":65,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlertItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\SystemMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemAlertsLogic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\realtime\\useSystemMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\users\\UserTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\AppHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\LoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MainContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\MapSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckAccordionContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\home\\TruckListSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\login\\EmailFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapLoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\MapViewUpdater.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\TruckMarkers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\UserLocationMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\map\\mapHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\ApiMonitoringDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\FeatureOverviewContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringFeaturesContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\MonitoringPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\TechnicalDetailsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\AdvancedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\CuisineTypesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\DistanceSliderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\FilterToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\MainSearchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\QuickFiltersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchFilterContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\search\\SearchInputWithIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\StageResultDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestPipelineSubmitHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\test-pipeline\\TestResultsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\ContactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\OperatingHoursSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\SocialMediaSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckAccordionItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedTruckId' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from '@/components/ui/accordion';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { TruckCard } from '@/components/TruckCard';\r\nimport { FoodTruck } from '@/lib/types/foodTruck';\r\n\r\ninterface TruckAccordionItemProps {\r\n  readonly truck: FoodTruck;\r\n  readonly selectedTruckId: string | undefined;\r\n  readonly setSelectedTruckId: (id: string | undefined) => void;\r\n  readonly isOpen: (truck: FoodTruck) => boolean;\r\n  readonly userLocation: { lat: number; lng: number } | undefined;\r\n}\r\n\r\nexport function TruckAccordionItem({\r\n  truck,\r\n  selectedTruckId,\r\n  setSelectedTruckId,\r\n  isOpen,\r\n  userLocation,\r\n}: TruckAccordionItemProps) {\r\n  return (\r\n    <AccordionItem value={truck.id} key={truck.id}>\r\n      <AccordionTrigger className=\"flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-slate-700 rounded-md\">\r\n        <div className=\"flex-1 text-left\">\r\n          <h4 className=\"font-medium dark:text-gray-100\">{truck.name}</h4>\r\n          {truck.current_location?.address && (\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-1\">\r\n              {truck.current_location.address}\r\n            </p>\r\n          )}\r\n        </div>\r\n        <Badge variant={isOpen(truck) ? 'default' : 'secondary'}>\r\n          {isOpen(truck) ? 'Open' : 'Closed'}\r\n        </Badge>\r\n      </AccordionTrigger>\r\n      <AccordionContent>\r\n        <TruckCard\r\n          truck={truck}\r\n          isOpen={isOpen(truck)}\r\n          onSelectTruck={() => setSelectedTruckId(truck.id)}\r\n          userLocation={userLocation}\r\n          hideHeader={true}\r\n        />\r\n      </AccordionContent>\r\n    </AccordionItem>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckBasicInfo.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":30,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":30,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport type { FoodTruck } from '@/lib/supabase';\r\n\r\ninterface TruckBasicInfoProps {\r\n  readonly truck: FoodTruck;\r\n}\r\n\r\nexport function TruckBasicInfo({ truck }: Readonly<TruckBasicInfoProps>) {\r\n  return (\r\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n      <CardHeader>\r\n        <CardTitle className=\"dark:text-gray-100\">About</CardTitle>\r\n        <CardDescription className=\"dark:text-gray-400\">Food truck information</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div>\r\n          <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Name</label>\r\n          <p className=\"text-lg font-semibold dark:text-gray-100\">{truck.name}</p>\r\n        </div>\r\n        \r\n        {truck.description != undefined && (\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Description</label>\r\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.description}</p>\r\n          </div>\r\n        )}\r\n\r\n        {truck.cuisine_type && (\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Cuisine Type</label>\r\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.cuisine_type}</p>\r\n          </div>\r\n        )}\r\n\r\n        {truck.price_range && (\r\n          <div>\r\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Price Range</label>\r\n            <Badge variant=\"outline\" className=\"ml-2\">\r\n              {truck.price_range}\r\n            </Badge>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardContent.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":8,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":24,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[804,821],"text":"(truck.description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[804,821],"text":"(truck.description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[804,821],"text":"(Boolean(truck.description))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { FoodTruck, DailyOperatingHours, MenuItem } from '@/lib/types';\r\nimport { RatingSection } from './RatingSection';\r\nimport { MenuSection } from './MenuSection';\r\nimport { ContactSection } from './ContactSection';\r\nimport { SocialMediaSection } from './SocialMediaSection';\r\nimport { OperatingHoursSection } from './OperatingHoursSection';\r\nimport { formatHours } from '@/lib/utils/foodTruckHelpers';\r\n\r\ninterface TruckCardContentProps {\r\n  readonly truck: FoodTruck;\r\n  readonly todayHours?: DailyOperatingHours;\r\n  readonly popularItems: MenuItem[]; // Use the full MenuItem type\r\n}\r\n\r\nexport function TruckCardContent({\r\n  truck,\r\n  todayHours,\r\n  popularItems,\r\n}: TruckCardContentProps) {\r\n  return (\r\n    <>\r\n      {truck.description && (\r\n        <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">{truck.description}</p>\r\n      )}\r\n      <div className=\"space-y-4\">\r\n        {/* Ratings & Hours Row */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <RatingSection averageRating={truck.average_rating} reviewCount={truck.review_count} />\r\n          <OperatingHoursSection todayHours={todayHours} formatHours={formatHours} />\r\n        </div>\r\n\r\n        {/* Menu & Contact Row */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <MenuSection popularItems={popularItems} />\r\n          <ContactSection contactInfo={truck.contact_info} verificationStatus={truck.verification_status} />\r\n        </div>\r\n\r\n        <SocialMediaSection socialMedia={truck.social_media} />\r\n      </div>\r\n      {truck.verification_status && (\r\n        <div className=\"mt-2\">\r\n          <Badge variant={truck.verification_status === 'verified' ? 'default' : 'secondary'}>\r\n            <span className=\"capitalize\">{truck.verification_status}</span>\r\n          </Badge>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckCardHeader.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected value in conditional. A boolean expression is required.","line":35,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":35,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":35,"column":57,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":35,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1384,1394],"text":"(priceRange != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1384,1394],"text":"(priceRange ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1384,1394],"text":"(Boolean(priceRange))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { MapPin } from 'lucide-react';\r\nimport { FoodTruck } from '@/lib/types';\r\n\r\ninterface TruckCardHeaderProps {\r\n  readonly truck: FoodTruck;\r\n  readonly isOpen: boolean;\r\n  readonly popularItems: Array<{ name: string; price: number | string | undefined }>;\r\n  readonly priceRange: string | undefined;\r\n}\r\n\r\nexport function TruckCardHeader({\r\n  truck,\r\n  isOpen,\r\n  popularItems,\r\n  priceRange\r\n}: TruckCardHeaderProps) {\r\n  return (\r\n    <CardHeader>\r\n      <div className=\"flex justify-between items-start\">\r\n        <div className=\"flex-1\">\r\n          <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\r\n          {(truck.current_location?.address != undefined) && (\r\n            <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\r\n              <MapPin className=\"h-4 w-4 mr-1\" />\r\n              {truck.current_location.address}\r\n            </CardDescription>\r\n          )}\r\n        </div>\r\n        <div className=\"flex flex-col items-end space-y-1\">\r\n          <Badge variant={isOpen ? 'default' : 'secondary'}>{isOpen ? 'Open' : 'Closed'}</Badge>\r\n          {/* Show price range fallback if no explicit prices */}\r\n          {popularItems.every((item) => !item.price) && priceRange && (\r\n            <Badge variant=\"outline\" className=\"mt-1\">\r\n              {priceRange}\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </CardHeader>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckContactInfo.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":39,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":39,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1183,1187],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1183,1187],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1183,1187],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":108,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":108,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3800,3825],"text":"((truck.contact_info?.phone) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3800,3825],"text":"((truck.contact_info?.phone) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3800,3825],"text":"(Boolean((truck.contact_info?.phone)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":116,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":116,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4077,4102],"text":"((truck.contact_info?.email) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4077,4102],"text":"((truck.contact_info?.email) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4077,4102],"text":"(Boolean((truck.contact_info?.email)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Phone, Mail, Globe } from 'lucide-react';\r\nimport type { FoodTruck } from '@/lib/supabase';\r\n\r\ninterface TruckContactInfoProps {\r\n  readonly truck: FoodTruck;\r\n}\r\n\r\ninterface ContactFieldProps {\r\n  readonly icon: React.ComponentType<{ className?: string }>;\r\n  readonly label: string;\r\n  readonly value?: string | null;\r\n  readonly href?: string;\r\n  readonly unavailableText: string;\r\n}\r\n\r\nfunction ContactField({ \r\n  icon: Icon, \r\n  label, \r\n  value, \r\n  href, \r\n  unavailableText \r\n}: Readonly<ContactFieldProps>) {\r\n  if (value == undefined || value.length === 0) { // Handles null, undefined, and empty string\r\n    return (\r\n      <div className=\"flex items-center gap-3 text-gray-400\">\r\n        <Icon className=\"h-4 w-4\" />\r\n        <span className=\"text-sm\">{unavailableText}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-3\">\r\n      <Icon className=\"h-4 w-4 text-gray-500\" />\r\n      <div>\r\n        <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{label}</label>\r\n        {href ? (\r\n          <a \r\n            href={href}\r\n            target={href.startsWith('http') ? '_blank' : undefined}\r\n            rel={href.startsWith('http') ? 'noopener noreferrer' : undefined}\r\n            className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline\"\r\n          >\r\n            {href.startsWith('http') ? 'Visit Website' : value}\r\n          </a>\r\n        ) : (\r\n          <p className=\"text-gray-900 dark:text-gray-200\">{value}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SocialMediaLinks({ socialMedia }: Readonly<{ readonly socialMedia?: Record<string, string> }>) {\r\n  if (socialMedia == undefined || Object.keys(socialMedia).length === 0) {\r\n    return;\r\n  }\r\n\r\n  const socialPlatforms = [\r\n    { key: 'instagram', name: 'Instagram', baseUrl: 'https://instagram.com/', color: 'pink' },\r\n    { key: 'facebook', name: 'Facebook', baseUrl: 'https://facebook.com/', color: 'blue' },\r\n    { key: 'twitter', name: 'Twitter', baseUrl: 'https://twitter.com/', color: 'sky' },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Social Media</label>\r\n      <div className=\"flex flex-wrap gap-2 mt-2\">\r\n        {socialPlatforms.map(({ key, name, baseUrl, color }) => {\r\n          const handle = socialMedia[key];\r\n          if (handle == undefined || handle.length === 0) return; // Handles null, undefined, and empty string\r\n\r\n          return (\r\n            <a\r\n              key={key}\r\n              href={`${baseUrl}${handle}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className={`flex items-center gap-1 px-2 py-1 bg-${color}-100 text-${color}-800 rounded-md text-sm hover:bg-${color}-200 dark:bg-${color}-900 dark:text-${color}-200`}\r\n            >\r\n              <Globe className=\"h-3 w-3\" />\r\n              {name}\r\n            </a>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TruckContactInfo({ truck }: Readonly<TruckContactInfoProps>) {\r\n  return (\r\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n          <Phone className=\"h-5 w-5\" />\r\n          Contact Information\r\n        </CardTitle>\r\n        <CardDescription className=\"dark:text-gray-400\">Get in touch</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <ContactField\r\n          icon={Phone}\r\n          label=\"Phone\"\r\n          value={truck.contact_info?.phone}\r\n          href={truck.contact_info?.phone ? `tel:${truck.contact_info.phone}` : undefined}\r\n          unavailableText=\"No phone number available\"\r\n        />\r\n\r\n        <ContactField\r\n          icon={Mail}\r\n          label=\"Email\"\r\n          value={truck.contact_info?.email}\r\n          href={truck.contact_info?.email ? `mailto:${truck.contact_info.email}` : undefined}\r\n          unavailableText=\"No email available\"\r\n        />\r\n\r\n        <ContactField\r\n          icon={Globe}\r\n          label=\"Website\"\r\n          value={truck.contact_info?.website}\r\n          href={truck.contact_info?.website}\r\n          unavailableText=\"No website available\"\r\n        />\r\n\r\n        <SocialMediaLinks socialMedia={truck.social_media} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckLocationInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckOperatingHours.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":31,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":31,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Clock } from 'lucide-react';\r\nimport type { FoodTruck } from '@/lib/supabase';\r\n\r\ninterface TruckOperatingHoursProps {\r\n  readonly truck: FoodTruck;\r\n}\r\n\r\ninterface DayData {\r\n  closed?: boolean;\r\n  open?: string;\r\n  close?: string;\r\n}\r\n\r\nfunction DaySchedule({ day, dayData }: Readonly<{ day: string; dayData?: DayData }>) {\r\n  const dayName = day.charAt(0).toUpperCase() + day.slice(1);\r\n  \r\n  return (\r\n    <div className=\"flex justify-between items-center\">\r\n      <span className=\"text-sm font-medium dark:text-gray-200\">{dayName}</span>\r\n      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n        {dayData?.closed === true ? 'Closed' : `${dayData?.open ?? 'N/A'} - ${dayData?.close ?? 'N/A'}`}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TruckOperatingHours({ truck }: TruckOperatingHoursProps) {\r\n  const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\r\n  const hasOperatingHours = truck.operating_hours && Object.keys(truck.operating_hours).length > 0;\r\n\r\n  return (\r\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\r\n          <Clock className=\"h-5 w-5\" />\r\n          Operating Hours\r\n        </CardTitle>\r\n        <CardDescription className=\"dark:text-gray-400\">Daily schedule</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {hasOperatingHours ? (\r\n          <div className=\"space-y-2\">\r\n            {daysOfWeek.map((day) => {\r\n              const dayData = truck.operating_hours?.[day as keyof typeof truck.operating_hours] as DayData | undefined;\r\n              return (\r\n                <DaySchedule key={day} day={day} dayData={dayData} />\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-gray-400 text-sm\">Operating hours not available</p>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\trucks\\TruckRatingsReviews.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\NavigationMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\SimpleQualityPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ToggleGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":13,"column":9,"nodeType":null,"messageId":"deprecation","endLine":13,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":182,"column":50,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":182,"endColumn":62,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[5832,5844],"text":"(Boolean(item.payload))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":108,"column":25,"nodeType":"TSFunctionType","messageId":"exceed","endLine":108,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable max-params */\n'use client';\n\nimport * as React from 'react';\nimport * as RechartsPrimitive from 'recharts';\nimport {\n  NameType,\n  Payload,\n  ValueType,\n} from 'recharts/types/component/DefaultTooltipContent';\n\nimport { cn } from '@/lib/utils';\nimport { useTooltipLabel } from './chart/useTooltipLabel';\nimport { TooltipIndicator } from './chart/TooltipIndicator';\nimport { TooltipItemContent } from './chart/TooltipItemContent';\nimport { getPayloadConfigFromPayload } from './chart/getPayloadConfigFromPayload';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | undefined>(undefined);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n  if (context === undefined) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    readonly config: ChartConfig;\n    readonly children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id ?? uniqueId.replaceAll(':', '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = 'Chart';\n\nconst ChartStyle = ({ id, config }: { readonly id: string; readonly config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([_, itemConfig]) => (itemConfig.theme ?? itemConfig.color) !== undefined);\n  if (colorConfig.length === 0) {\n    return;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ?? itemConfig.color;\n    return color !== undefined && color !== '' ? `  --color-${key}: ${color};` : undefined;\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nfunction isNonEmptyArray<T>(arr: T[] | undefined): arr is T[] {\n  return Array.isArray(arr) && arr.length > 0;\n}\n\ntype TooltipFormatter = (value: number, name: string, item: unknown, index: number, payload: Record<string, unknown>[]) => React.ReactNode;\ntype TooltipItemData = { name?: string; dataKey?: string; payload?: Record<string, unknown>; color?: string; value?: number };\n\n\ntype ChartTooltipIndicatorAndContentProps = {\n  indicator: 'line' | 'dot' | 'dashed';\n  hideIndicator: boolean;\n  indicatorColor?: string;\n  nestLabel: boolean;\n  itemConfig: Record<string, unknown>;\n  formatter: TooltipFormatter | undefined;\n  itemData: TooltipItemData;\n  item: Payload<ValueType, NameType>;\n  index: number;\n  tooltipLabel: React.ReactNode;\n};\n\nfunction ChartTooltipIndicatorAndContent(props: Readonly<ChartTooltipIndicatorAndContentProps>) {\n  const {\n    indicator,\n    hideIndicator,\n    indicatorColor,\n    nestLabel,\n    itemConfig,\n    formatter,\n    itemData,\n    item,\n    index,\n    tooltipLabel,\n  } = props;\n  return (\n    <>\n      <TooltipIndicator\n        indicator={indicator}\n        hideIndicator={hideIndicator}\n        indicatorColor={indicatorColor}\n        nestLabel={nestLabel}\n        itemConfig={itemConfig}\n      />\n      <TooltipItemContent\n        formatter={formatter}\n        itemData={itemData}\n        item={item}\n        index={index}\n        itemConfig={itemConfig}\n        nestLabel={nestLabel}\n        tooltipLabel={tooltipLabel}\n      />\n    </>\n  );\n}\n\ntype ChartTooltipItemProps = {\n  item: Payload<ValueType, NameType>;\n  index: number;\n  indicatorProps: {\n    indicator: 'line' | 'dot' | 'dashed';\n    hideIndicator: boolean;\n    color?: string;\n    nestLabel: boolean;\n    config: ChartConfig;\n    nameKey?: string;\n    tooltipLabel: React.ReactNode;\n    formatter: TooltipFormatter | undefined;\n  };\n};\n\nfunction ChartTooltipItem({ item, index, indicatorProps }: Readonly<ChartTooltipItemProps>) {\n  const { indicator, hideIndicator, color, nestLabel, config, nameKey, tooltipLabel, formatter } = indicatorProps;\n  const dataKey = typeof item.dataKey === 'string' ? item.dataKey : undefined;\n\n  const itemData: TooltipItemData = {\n    name: item.name === undefined ? undefined : String(item.name),\n    dataKey,\n    payload: typeof item.payload === 'object' && item.payload ? (item.payload as Record<string, unknown>) : undefined,\n    color: typeof item.color === 'string' ? item.color : undefined,\n    value: typeof item.value === 'number' ? item.value : undefined,\n  };\n  const key = nameKey ?? itemData.name ?? itemData.dataKey ?? 'value';\n  const itemConfig = getPayloadConfigFromPayload(config, item, key) as Record<string, unknown>;\n  const indicatorColor =\n    color ??\n    (itemData.payload !== undefined && typeof itemData.payload === 'object' && 'fill' in itemData.payload\n      ? String(itemData.payload.fill)\n      : undefined) ??\n    itemData.color;\n  return (\n    <div\n      key={itemData.dataKey ?? index}\n      className={cn(\n        'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\n        indicator === 'dot' && 'items-center',\n      )}\n    >\n      <ChartTooltipIndicatorAndContent\n        indicator={indicator}\n        hideIndicator={hideIndicator}\n        indicatorColor={indicatorColor}\n        nestLabel={nestLabel}\n        itemConfig={itemConfig}\n        formatter={formatter}\n        itemData={itemData}\n        item={item}\n        index={index}\n        tooltipLabel={tooltipLabel}\n      />\n    </div>\n  );\n}\n\ntype ChartTooltipItemsProps = {\n  safePayload: Payload<ValueType, NameType>[];\n  indicatorProps: {\n    indicator: 'line' | 'dot' | 'dashed';\n    hideIndicator: boolean;\n    formatter: TooltipFormatter | undefined;\n    nameKey?: string;\n    color?: string;\n    tooltipLabel: React.ReactNode;\n    config: ChartConfig;\n    nestLabel: boolean;\n  };\n};\n\nfunction ChartTooltipItems(props: Readonly<ChartTooltipItemsProps>) {\n  const { safePayload, indicatorProps } = props;\n  return (\n    <div className=\"grid gap-1.5\">\n      {safePayload.map((item, index) => (\n        <ChartTooltipItem\n          key={item.dataKey ?? index}\n          item={item}\n          index={index}\n          indicatorProps={indicatorProps}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<'div'> & {\n      readonly hideLabel?: boolean;\n      readonly hideIndicator?: boolean;\n      readonly indicator?: 'line' | 'dot' | 'dashed';\n      readonly nameKey?: string;\n      readonly labelKey?: string;\n    }\n>(({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}, ref) => {\n    const { config } = useChart();\n    const safePayload: Payload<ValueType, NameType>[] = isNonEmptyArray(payload) ? payload : [];\n    const tooltipLabel = useTooltipLabel({\n      hideLabel,\n      payload: safePayload,\n      label,\n      labelFormatter,\n      labelClassName,\n      config,\n      labelKey\n    });\n\n    if (active === false || !isNonEmptyArray(safePayload)) {\n      return;\n    }\n\n    const nestLabel = safePayload.length === 1 && indicator !== 'dot';\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\n          className,\n        )}\n      >\n        {!nestLabel && tooltipLabel}\n        <ChartTooltipItems\n          safePayload={safePayload}\n          indicatorProps={{\n            indicator,\n            hideIndicator,\n            formatter: formatter as TooltipFormatter | undefined,\n            nameKey,\n            color,\n            tooltipLabel,\n            config,\n            nestLabel,\n          }}\n        />\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = 'ChartTooltip';\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\ninterface ChartLegendItemProps {\n  item: Payload<ValueType, NameType>;\n  idx: number;\n  hideIcon: boolean;\n  nameKey?: string;\n  config: ChartConfig;\n}\n\nfunction ChartLegendItem({ item, idx, hideIcon, nameKey, config }: Readonly<ChartLegendItemProps>) {\n  const dataKey = item.dataKey?.toString();\n  const itemData = {\n    dataKey,\n    value: item.value?.toString(),\n    color: item.color?.toString(),\n  };\n  const key = nameKey ?? dataKey ?? 'value';\n  const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n  return (\n    <div\n      key={itemData.value ?? idx}\n      className={cn(\n        'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground',\n      )}\n    >\n      {itemConfig?.icon && !hideIcon ? (\n        <itemConfig.icon />\n      ) : (\n        <div\n          className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n          style={{\n            backgroundColor: itemData.color,\n          }}\n        />\n      )}\n      {itemConfig?.label}\n    </div>\n  );\n}\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Legend> &\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\n  const { config } = useChart();\n  const safePayload: Payload<ValueType, NameType>[] = isNonEmptyArray(payload) ? payload as Payload<ValueType, NameType>[] : [];\n  if (!isNonEmptyArray(safePayload)) {\n    return;\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className,\n      )}\n    >\n      {safePayload.map((item, idx) => (\n        <ChartLegendItem\n          key={item.dataKey ?? idx}\n          item={item}\n          idx={idx}\n          hideIcon={hideIcon}\n          nameKey={nameKey}\n          config={config}\n        />\n      ))}\n    </div>\n  );\n});\nChartLegendContent.displayName = 'ChartLegend';\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\QualityPieChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\TooltipItemContent.tsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'max-params').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,31],"text":" "}}],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":7,"column":24,"nodeType":"TSFunctionType","messageId":"exceed","endLine":7,"endColumn":24,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable max-params */\n/* eslint-disable max-params */\nimport React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface TooltipItemContentProps {\n  readonly formatter?: (value: number, name: string, item: unknown, index: number, payload: Record<string, unknown>[]) => React.ReactNode;\n  readonly itemData: { name?: string; dataKey?: string; payload?: unknown; color?: string; value?: number };\n  readonly item: unknown;\n  readonly index: number;\n  readonly itemConfig?: { label?: React.ReactNode };\n  readonly nestLabel: boolean;\n  readonly tooltipLabel: React.ReactNode;\n}\n\nexport function TooltipItemContent(props: TooltipItemContentProps) {\n  const { formatter, itemData, item, index, itemConfig, nestLabel, tooltipLabel } = props;\n  if (formatter !== undefined && itemData?.value !== undefined && itemData.name !== undefined && itemData.name !== '') {\n    const payloadArray = Array.isArray(itemData.payload)\n      ? (itemData.payload as Record<string, unknown>[])\n      : [];\n    return <>{formatter(itemData.value, itemData.name, item, index, payloadArray)}</>;\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex flex-1 justify-between leading-none',\n        nestLabel ? 'items-end' : 'items-center',\n      )}\n    >\n      <div className=\"grid gap-1.5\">\n        {nestLabel ? tooltipLabel : undefined}\n        <span className=\"text-muted-foreground\">\n          {itemConfig?.label ?? itemData.name}\n        </span>\n      </div>\n      {itemData.value !== undefined && itemData.value !== 0 && (\n        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n          {itemData.value.toLocaleString()}\n        </span>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\getPayloadConfigFromPayload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart\\useTooltipLabel.tsx","messages":[{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":29,"column":14,"nodeType":"Literal","messageId":"error","endLine":29,"endColumn":18,"suggestions":[{"messageId":"remove","fix":{"range":[917,921],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[917,921],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { cn } from '@/lib/utils';\r\nimport { ChartConfig } from '../chart';\r\nimport { Payload, ValueType, NameType } from 'recharts/types/component/DefaultTooltipContent';\r\n\r\nimport { getPayloadConfigFromPayload } from './getPayloadConfigFromPayload';\r\n\r\ninterface UseTooltipLabelProps {\r\n  readonly hideLabel: boolean;\r\n  readonly payload: Payload<ValueType, NameType>[] | undefined;\r\n  readonly label: unknown;\r\n  readonly labelFormatter?: (value: unknown, payload: Payload<ValueType, NameType>[]) => React.ReactNode;\r\n  readonly labelClassName?: string;\r\n  readonly config: ChartConfig;\r\n  readonly labelKey?: string;\r\n}\r\n\r\nexport function useTooltipLabel({\r\n  hideLabel,\r\n  payload,\r\n  label,\r\n  labelFormatter,\r\n  labelClassName,\r\n  config,\r\n  labelKey\r\n}: UseTooltipLabelProps) {\r\n  return React.useMemo(() => {\r\n    if (hideLabel || !payload || payload.length === 0) {\r\n      return null; // Return null or an empty div if no label or payload\r\n    }\r\n\r\n    const [item] = payload;\r\n\r\n    const key = `${labelKey ?? (item as { dataKey?: string; name?: string }).dataKey ?? (item as { dataKey?: string; name?: string }).name ?? 'value'}`;\r\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n    const value =\r\n      (labelKey === undefined && typeof label === 'string') ? config[label]?.label ?? label : itemConfig?.label;\r\n\r\n    if (labelFormatter) {\r\n      return (\r\n        <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>\r\n      );\r\n    }\r\n\r\n    if (value === undefined || value === null || value === '') {\r\n      \r\n    }\r\n\r\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>;\r\n  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dataQualityCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":20,"column":9,"nodeType":null,"messageId":"deprecation","endLine":20,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":59,"column":9,"nodeType":null,"messageId":"deprecation","endLine":59,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\connectionManagementHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\createEventSourceConnection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\setupEventSourceListeners.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useAutoConnect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useConnectionState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useEventHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\realtime\\useRealtimeAdminEventsLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAdminAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useAuthHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useDataCleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useFoodTruckFinder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEventsHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSearchFiltersLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSidebarKeyboardShortcut.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlerts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useSystemAlertsLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useTruckCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\ScraperEngine.ts","messages":[{"ruleId":"sonarjs/no-redundant-optional","severity":2,"message":"Consider removing 'undefined' type or '?' specifier, one of them is redundant.","line":699,"column":30,"nodeType":null,"endLine":699,"endColumn":31,"suggestions":[{"desc":"Remove \"?\" operator","fix":{"range":[22244,22245],"text":""}},{"desc":"Remove \"undefined\" type annotation","fix":{"range":[22247,22265],"text":"number"}}]},{"ruleId":"sonarjs/no-redundant-optional","severity":2,"message":"Consider removing 'undefined' type or '?' specifier, one of them is redundant.","line":702,"column":30,"nodeType":null,"endLine":702,"endColumn":31,"suggestions":[{"desc":"Remove \"?\" operator","fix":{"range":[22372,22373],"text":""}},{"desc":"Remove \"undefined\" type annotation","fix":{"range":[22375,22393],"text":"number"}}]}],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":319,"column":24,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":319,"endColumn":37,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical user agent selection."}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":335,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":335,"endColumn":42,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical random delays."}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from './firecrawl'; // Import the firecrawl singleton\nimport * as crypto from 'node:crypto'; // Node.js crypto for secure randomness\n\ninterface InstagramPost {\n  id: string;\n  caption: string;\n  timestamp: string;\n  location: string;\n  hashtags: string[];\n  engagement: { likes: number; comments: number };\n}\n\ninterface InstagramProfile {\n  followers: number;\n  following: number;\n  posts_count: number;\n  bio: string;\n  contact_info: { email: string; phone: string };\n}\n\ninterface FacebookPost {\n  id: string;\n  content: string;\n  timestamp: string;\n  reactions: { likes: number; loves: number; shares: number };\n  comments: number;\n}\n\ninterface FacebookPageInfo {\n  likes: number;\n  followers: number;\n  check_ins: number;\n  about: string;\n  hours: Record<string, string>;\n}\n\ninterface TwitterTweet {\n  id: string;\n  text: string;\n  timestamp: string;\n  retweets: number;\n  likes: number;\n  replies: number;\n  location: string;\n}\n\ninterface TwitterProfile {\n  followers: number;\n  following: number;\n  tweets_count: number;\n  bio: string;\n  location: string;\n  website: string;\n}\n\ninterface InstagramData {\n  posts: InstagramPost[];\n  profile: InstagramProfile;\n}\n\ninterface FacebookData {\n  posts: FacebookPost[];\n  page_info: FacebookPageInfo;\n}\n\ninterface TwitterData {\n  tweets: TwitterTweet[];\n  profile: TwitterProfile;\n}\n\nexport interface WebsiteScrapeData {\n  markdown?: string;\n  html?: string;\n  metadata?: Record<string, unknown>;\n  is_fallback?: boolean;\n}\n\nexport interface ExtractedHTMLData {\n  name?: string;\n  location?: string;\n  phone?: string;\n  hours?: string;\n  menu?: { item: string; price: string }[];\n}\n\ninterface ScrapeResult {\n  success: boolean;\n  error?: string;\n  data?: InstagramData | FacebookData | TwitterData | WebsiteScrapeData | ExtractedHTMLData;\n  timestamp: string;\n  source: string;\n  note?: string;\n}\n\n// Core scraping engine with anti-detection measures\nexport class ScraperEngine {\n  private userAgents: string[];\n  private requestDelay: number;\n  private maxRetries: number;\n\n  constructor() {\n    this.userAgents = [\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    ];\n    this.requestDelay = 2000;\n    this.maxRetries = 3;\n  }\n\n  private async performFallbackScrape(url: string): Promise<ScrapeResult> {\n    try {\n      const response = await fetch(url, { headers: { 'User-Agent': this.getRandomUserAgent() } });\n      if (!response.ok) {\n        throw new Error(\n          `HTTP error ${response.status}: ${response.statusText} during fallback fetch.`,\n        );\n      }\n      const htmlContent = await response.text();\n      return {\n        success: true,\n        data: {\n          html: htmlContent,\n          is_fallback: true,\n        },\n        timestamp: new Date().toISOString(),\n        source: url,\n        note: 'Fetched using basic fetch as Firecrawl failed.',\n      };\n    } catch (fallbackError) {\n      const errMsg = fallbackError instanceof Error ? fallbackError.message : 'Unknown fallback fetch error';\n      console.warn(`Fallback fetch error for ${url}:`, errMsg);\n      return {\n        success: false,\n        error: \"That didn't work, please try again later.\",\n        timestamp: new Date().toISOString(),\n        source: url,\n      };\n    }\n  }\n\n  async scrapeWebsite(url: string, _selectors?: Record<string, string>): Promise<ScrapeResult> {\n    try {\n      const firecrawlResult = await firecrawl.scrapeUrl(url, {\n        formats: ['markdown', 'html'],\n        onlyMainContent: true,\n      });\n\n      if (firecrawlResult.success !== true || firecrawlResult.data == undefined) {\n        throw new Error(firecrawlResult.error ?? 'Firecrawl scraping failed to return data.');\n      }\n\n      const returnedData: WebsiteScrapeData = {};\n      if (typeof firecrawlResult.data.markdown === 'string' && firecrawlResult.data.markdown !== '') {\n        returnedData.markdown = firecrawlResult.data.markdown;\n      }\n      if (typeof firecrawlResult.data.html === 'string' && firecrawlResult.data.html !== '') {\n        returnedData.html = firecrawlResult.data.html;\n      }\n      if (firecrawlResult.data.metadata != undefined && typeof firecrawlResult.data.metadata === 'object') {\n        returnedData.metadata = firecrawlResult.data.metadata as Record<string, unknown>;\n      }\n\n      if (\n        (returnedData.markdown == undefined || returnedData.markdown === '') &&\n        (returnedData.html == undefined || returnedData.html === '')\n      ) {\n        throw new Error('Firecrawl returned no markdown or HTML content.');\n      }\n\n      return {\n        success: true,\n        data: returnedData,\n        timestamp: new Date().toISOString(),\n        source: url,\n      };\n    } catch (error: unknown) {\n      console.warn(`Scraping error for ${url} using Firecrawl:`, error);\n      console.info(`Falling back to basic fetch for ${url}`);\n      return await this.performFallbackScrape(url);\n    }\n  }\n\n  async scrapeSocialMedia(platform: string, handle: string): Promise<ScrapeResult> {\n    try {\n      await this.randomDelay();\n\n      switch (platform) {\n        case 'instagram': {\n          return await this.scrapeInstagram(handle);\n        }\n        case 'facebook': {\n          return await this.scrapeFacebook(handle);\n        }\n        case 'twitter': {\n          return await this.scrapeTwitter(handle);\n        }\n        default: {\n          throw new Error(`Unsupported platform: ${platform}`);\n        }\n      }\n    } catch (error) {\n      console.warn(`Social media scraping error for ${platform}/${handle}:`, error);\n      return {\n        success: false,\n        error: \"That didn't work, please try again later.\",\n        timestamp: new Date().toISOString(),\n        source: `social_media:${platform}:${handle}`,\n      };\n    }\n  }\n\n  private async scrapeInstagram(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    const posts: InstagramPost[] = [\n      {\n        id: 'post_001',\n        caption: 'Fresh tacos available now at Mission St! 🌮 #foodtruck #tacos',\n        timestamp: new Date(Date.now() - 3_600_000).toISOString(),\n        location: 'Mission St, San Francisco',\n        hashtags: ['foodtruck', 'tacos', 'fresh'],\n        engagement: { likes: 45, comments: 8 },\n      },\n    ];\n    const profile: InstagramProfile = {\n      followers: 1250,\n      following: 340,\n      posts_count: 156,\n      bio: 'Best tacos in SF 🌮 Follow for daily locations!',\n      contact_info: {\n        email: 'contact@tacoparadise.com',\n        phone: '+1-555-0456',\n      },\n    };\n    return {\n      success: true,\n      data: { posts, profile },\n      timestamp: new Date().toISOString(),\n      source: `instagram:${handle}`,\n    };\n  }\n\n  private async scrapeFacebook(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    const posts: FacebookPost[] = [\n      {\n        id: 'fb_post_001',\n        content:\n          \"Today we'll be at Union Square from 11 AM to 3 PM! Come try our new BBQ burger!\",\n        timestamp: new Date(Date.now() - 7_200_000).toISOString(),\n        reactions: { likes: 23, loves: 5, shares: 3 },\n        comments: 12,\n      },\n    ];\n    const page_info: FacebookPageInfo = {\n      likes: 890,\n      followers: 1100,\n      check_ins: 450,\n      about: 'Gourmet food truck serving the Bay Area',\n      hours: {\n        monday: '11:00-15:00',\n        tuesday: '11:00-15:00',\n        wednesday: '11:00-15:00',\n        thursday: '11:00-15:00',\n        friday: '11:00-20:00',\n        saturday: '12:00-20:00',\n        sunday: '12:00-16:00',\n      },\n    };\n    return {\n      success: true,\n      data: { posts, page_info },\n      timestamp: new Date().toISOString(),\n      source: `facebook:${handle}`,\n    };\n  }\n\n  private async scrapeTwitter(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    const tweets: TwitterTweet[] = [\n      {\n        id: 'tweet_001',\n        text: 'LIVE at Dolores Park! Fresh burritos and quesadillas available now 🌯',\n        timestamp: new Date(Date.now() - 1_800_000).toISOString(),\n        retweets: 8,\n        likes: 34,\n        replies: 5,\n        location: 'Dolores Park, San Francisco',\n      },\n    ];\n    const profile: TwitterProfile = {\n      followers: 2340,\n      following: 567,\n      tweets_count: 1890,\n      bio: '🚚 SF Food Truck | Fresh Mexican Food | Follow for locations',\n      location: 'San Francisco, CA',\n      website: 'https://tacoparadise.com',\n    };\n    return {\n      success: true,\n      data: { tweets, profile },\n      timestamp: new Date().toISOString(),\n      source: `twitter:${handle}`,\n    };\n  }\n\n  private getRandomUserAgent(): string {\n    // Use Node.js crypto for stronger randomness if available, fallback to Math.random otherwise.\n    let idx: number;\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\n      idx = array[0] % this.userAgents.length;\n    } else if (typeof crypto.randomInt === 'function') {\n      idx = crypto.randomInt(0, this.userAgents.length);\n    } else {\n      // Fallback to Math.random for environments where crypto is not available.\n      // This is acceptable for non-security-critical random number generation like user agent selection.\n      // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for non-security-critical user agent selection.\n      idx = Math.floor(Math.random() * this.userAgents.length);\n    }\n    return this.userAgents[idx];\n  }\n\n  private randomDelay(): Promise<void> {\n    let randomMs: number;\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\n      randomMs = array[0] % 1000;\n    } else if (typeof crypto.randomInt === 'function') {\n      randomMs = crypto.randomInt(0, 1000);\n    } else {\n      // Fallback to Math.random for environments where crypto is not available.\n      // This is acceptable for non-security-critical random delays.\n      // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for non-security-critical random delays.\n      randomMs = Math.floor(Math.random() * 1000);\n    }\n    const delay = this.requestDelay + randomMs;\n    return new Promise((resolve) => setTimeout(resolve, delay));\n  }\n\n   handleRateLimit(retryAfter: number): Promise<void> {\n    console.info(`Rate limited. Waiting ${retryAfter} seconds before retry...`);\n    return new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));\n  }\n\n  async retryWithBackoff<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = this.maxRetries,\n  ): Promise<T> {\n    let lastError: unknown;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error: unknown) {\n        lastError = error;\n        if (attempt === maxRetries) {\n          throw lastError instanceof Error ? lastError : new Error(String(lastError));\n        }\n\n        const backoffDelay = Math.pow(2, attempt) * 1000;\n        console.info(`Attempt ${attempt} failed. Retrying in ${backoffDelay}ms...`);\n        await new Promise((resolve) => setTimeout(resolve, backoffDelay));\n      }\n    }\n\n    throw lastError instanceof Error ? lastError : new Error('Request failed after all retries');\n  }\n}\n\ninterface LocationData {\n  current?: {\n    lat?: number;\r\n    lng?: number;\n    address?: string;\n  };\n}\n\ninterface ContactInfo {\n  phone?: string;\n  email?: string;\n}\n\ninterface OperatingHours {\n  [key: string]: {\n    open: string;\n    close: string;\n    closed: boolean;\n  };\n}\n\ninterface MenuItem {\n  name: string;\n  description?: string;\n  price: number;\n  dietary_tags?: string[];\n}\n\ninterface MenuCategory {\n  category: string;\n  items: MenuItem[];\n}\n\ninterface TruckData {\n  name: string;\n  location: LocationData;\n  contact?: ContactInfo;\n  operating_hours?: OperatingHours;\n  menu?: MenuCategory[];\n  last_updated?: string;\n}\n\nexport class DataQualityAssessor {\n  private assessBasicInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.name == undefined || truckData.name.trim().length === 0) {\n      issues.push('Missing or empty truck name');\n      score -= 20;\n    }\n    return score;\n  }\n\n  private assessLocationInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.location?.current == undefined) {\n      issues.push('Missing current location data');\n      score -= 25;\n    } else {\n      if (\n        truckData.location.current.lat == undefined || \n        truckData.location.current.lng == undefined\n      ) {\n        issues.push('Missing GPS coordinates');\n        score -= 15;\n      }\n      if (truckData.location.current.address == undefined || truckData.location.current.address === '') {\n        issues.push('Missing address information');\n        score -= 10;\n      }\n    }\n    return score;\n  }\n\n  private assessContactInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.contact) {\n      const hasPhone = typeof truckData.contact.phone === 'string' && truckData.contact.phone.trim() !== '';\n      const hasEmail = typeof truckData.contact.email === 'string' && truckData.contact.email.trim() !== '';\n\n      if (!hasPhone && !hasEmail) {\n        issues.push('No phone or email contact available');\n        score -= 15;\n      }\n      if (hasPhone && !this.isValidPhone(truckData.contact.phone as string)) {\n        issues.push('Invalid phone number format');\n        score -= 5;\n      }\n      if (hasEmail && !this.isValidEmail(truckData.contact.email as string)) {\n        issues.push('Invalid email format');\n        score -= 5;\n      }\n    } else {\n      issues.push('Missing contact information');\n      score -= 20;\n    }\n    return score;\n  }\n\n  private assessOperatingHours(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.operating_hours == undefined || Object.keys(truckData.operating_hours).length === 0) {\n      issues.push('Missing operating hours');\n      score -= 15;\n    }\n    return score;\n  }\n\n  private assessMenuInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.menu == undefined || truckData.menu.length === 0) {\n      issues.push('Missing menu information');\n      score -= 10;\n    } else {\n      const menuIssues = this.validateMenuData(truckData.menu);\n      issues.push(...menuIssues);\n      score -= menuIssues.length * 2;\n    }\n    return score;\n  }\n\n  private assessLastUpdated(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.last_updated != undefined && truckData.last_updated !== '') {\n      const lastUpdate = new Date(truckData.last_updated);\n      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);\n\n      if (daysSinceUpdate > 7) {\n        issues.push('Data is more than 7 days old');\n        score -= 10;\n      } else if (daysSinceUpdate > 3) {\n        issues.push('Data is more than 3 days old');\n        score -= 5;\n      }\n    }\n    return score;\n  }\n\n  assessTruckData(truckData: TruckData): { score: number; issues: string[] } {\n    const issues: string[] = [];\n    let score = 100;\n\n    score = this.assessBasicInfo(truckData, issues, score);\n    score = this.assessLocationInfo(truckData, issues, score);\n    score = this.assessContactInfo(truckData, issues, score);\n    score = this.assessOperatingHours(truckData, issues, score);\n    score = this.assessMenuInfo(truckData, issues, score);\n    score = this.assessLastUpdated(truckData, issues, score);\n\n    return {\n      score: Math.max(0, score) / 100,\n      issues,\n    };\n  }\n\n  private validateMenuCategory(category: MenuCategory, categoryIndex: number, issues: string[]): void {\n    if (category.category == undefined || category.category.trim().length === 0) {\n      issues.push(`Menu category ${categoryIndex + 1} missing name`);\n    }\n  }\n\n  private validateMenuItems(category: MenuCategory, issues: string[]): void {\n    if (category.items == undefined || category.items.length === 0) {\n      issues.push(`Menu category \"${category.category ?? 'Unknown'}\" has no items`);\n    } else {\n      for (const [itemIndex, item] of category.items.entries()) {\n        if (item.name == undefined || item.name.trim().length === 0) {\n          issues.push(`Menu item ${itemIndex + 1} in \"${category.category ?? 'Unknown'}\" missing name`);\n        }\n        if (typeof item.price !== 'number' || item.price <= 0) {\n          issues.push(`Menu item \"${item.name ?? 'Unknown'}\" has invalid price`);\n        }\n      }\n    }\n  }\n\n  private validateMenuData(menu: MenuCategory[]): string[] {\n    const issues: string[] = [];\n\n    for (const [categoryIndex, category] of menu.entries()) {\n      this.validateMenuCategory(category, categoryIndex, issues);\n      this.validateMenuItems(category, issues);\n    }\n\n    return issues;\n  }\n  private isValidPhone(phone: string): boolean {\n    // Regex for phone number validation. Not vulnerable to super-linear runtime due to backtracking.\n    // Accepts +, digits, spaces, dashes, and parentheses. At least 10 digits.\n    const phoneRegex = /^\\+?[\\d\\s\\-()]{10,}$/;\n    return phoneRegex.test(phone);\n  }\n  private isValidEmail(email: string): boolean {\n    // Regex for email validation optimized to avoid backtracking\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);\n  }\n}\n\ninterface GeminiLocationData {\n  address: string;\n  city: string;\n  state: string;\n  coordinates: {\n    lat?: number;\n    lng?: number;\n  };\n  confidence: number;\n}\n\ninterface GeminiOperatingHours {\n  monday: { open: string; close: string; closed: boolean };\n  tuesday: { open: string; close: string; closed: boolean };\n  wednesday: { open: string; close: string; closed: boolean };\n  thursday: { open: string; close: string; closed: boolean };\n  friday: { open: string; close: string; closed: boolean };\n  saturday: { open: string; close: string; closed: boolean };\n  sunday: { open: string; close: string; closed: boolean };\n}\n\ninterface GeminiSentimentAnalysis {\n  sentiment: 'positive' | 'negative' | 'neutral';\n  score: number;\n  key_topics: string[];\n  summary: string;\n}\n\nexport class GeminiDataProcessor {\n  private _apiKey: string;\n  private _baseUrl: string;\n  private requestCount: number;\n  private tokenCount: number;\n  private dailyLimit: { requests: number; tokens: number };\n\n  constructor(apiKey: string) {\n    this._apiKey = apiKey;\n    this._baseUrl = 'https://generativelanguage.googleapis.com/v1beta';\n    this.requestCount = 0;\n    this.tokenCount = 0;\n    this.dailyLimit = { requests: 1500, tokens: 32_000 };\n  }\n  async processMenuData(rawMenuText: string): Promise<{ categories: MenuCategory[] }> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Parse the following food truck menu text and return a structured JSON format:\n        \n        ${rawMenuText}\n        \n        Return format:\n        {\n          \"categories\": [\n            {\n              \"name\": \"category_name\",\n              \"items\": [\n                {\n                  \"name\": \"item_name\",\n                  \"description\": \"item_description\",\n                  \"price\": 0.00,\n                  \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", etc.]\n                }\n              ]\n            }\n          ]\n        }\n        \n        Only return valid JSON, no additional text.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n\n      // Ensure type safety for parsed response\n      const parsed: unknown = JSON.parse(response);\n      if (typeof parsed !== 'object' || parsed == undefined || !('categories' in parsed) || !Array.isArray((parsed as { categories: unknown[] }).categories)) {\n        throw new Error('Invalid Gemini menu response: missing or malformed categories array');\n      }\n      return parsed as { categories: MenuCategory[] };\n    } catch (error) {\n      console.error('Error processing menu data with Gemini:', error);\n      throw error;\n    }\n  }\n\n  async extractLocationFromText(text: string): Promise<GeminiLocationData> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Extract location information from the following text and return structured data:\n        \n        \"${text}\"\n        \n        Return format:\n        {\n          \"address\": \"full_address\",\n          \"city\": \"city_name\",\n          \"state\": \"state\",\n          \"coordinates\": {\n            \"lat\": 0.0,\n            \"lng\": 0.0\n          },\n          \"confidence\": 0.95\n        }\n        \n        If coordinates cannot be determined, set them to undefined. Only return valid JSON.\n      `;\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsedResponse: unknown = JSON.parse(response);\n      const validatedResponse = this.validateGeminiLocationResponse(parsedResponse);\n      return validatedResponse;\n    } catch (error) {\n      console.error('Error extracting location with Gemini:', error);\n      throw error;\n    }\n  }\n\n  private validateGeminiLocationResponse(parsedResponse: unknown): GeminiLocationData {\n    if (\n      parsedResponse == undefined ||\n      typeof parsedResponse !== 'object' ||\n      !('coordinates' in parsedResponse) ||\n      typeof (parsedResponse as Record<string, unknown>).coordinates !== 'object'\n    ) {\n      throw new Error('Invalid Gemini location response');\n    }\n    const coordinates = (parsedResponse as { coordinates?: { lat?: unknown; lng?: unknown } }).coordinates;\n    if (coordinates && typeof coordinates === 'object') {\n      if (typeof coordinates.lat !== 'number') {\n        (coordinates as { lat?: number | undefined }).lat = undefined;\n      }\n      if (typeof coordinates.lng !== 'number') {\n        (coordinates as { lng?: number | undefined }).lng = undefined;\n      }\n    }\n    return parsedResponse as GeminiLocationData;\n  }\n\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiOperatingHours> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Parse the following operating hours text and return standardized format:\n        \n        \"${hoursText}\"\n        \n        Return format:\n        {\n          \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\n        }\n          Use 24-hour format. If closed on a day, set \"closed\": true and omit open/close times.\n        Only return valid JSON.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsed: unknown = JSON.parse(response);\n      if (parsed == undefined || typeof parsed !== 'object') {\n        throw new Error('Invalid Gemini hours response');\n      }\n      return parsed as GeminiOperatingHours;\n    } catch (error) {\n      console.error('Error standardizing hours with Gemini:', error);\n      throw error;\n    }\n  }\n\n  async analyzeSentiment(reviewText: string): Promise<GeminiSentimentAnalysis> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Analyze the sentiment of this food truck review and extract key insights:\n        \n        \"${reviewText}\"\n        \n        Return format:\n        {\n          \"sentiment\": \"positive|negative|neutral\",\n          \"score\": 0.85,\n          \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\"],\n          \"summary\": \"brief_summary_of_review\"\n        }\n          Score should be between 0 (very negative) and 1 (very positive).\n        Only return valid JSON.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsed: unknown = JSON.parse(response);\n      if (parsed == undefined || typeof parsed !== 'object') {\n        throw new Error('Invalid Gemini sentiment response');\n      }\n      return parsed as GeminiSentimentAnalysis;\n    } catch (error) {\n      console.error('Error analyzing sentiment with Gemini:', error);\n      throw error;\n    }\n  }\n\n  private async makeGeminiRequest(prompt: string): Promise<string> {\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay\n    return this.getMockGeminiResponse(prompt);\n  }\n\n  private getMockGeminiResponse(prompt: string): string {\n    if (prompt.includes('menu text')) {\n      return JSON.stringify({\n        categories: [\n          {\n            name: 'Burgers',\n            items: [\n              {\n                name: 'Classic Cheeseburger',\n                description: 'Beef patty with cheese, lettuce, tomato',\n                price: 12.99,\n                dietary_tags: [],\n              },\n            ],\n          },\n        ],\n      });\n    } else if (prompt.includes('location information')) {\n      return JSON.stringify({\n        address: '123 Market St, San Francisco, CA 94105',\n        city: 'San Francisco',\n        state: 'CA',\n        coordinates: {\n          lat: 37.7749,\n          lng: -122.4194,\n        },\n        confidence: 0.95,\n      });\n    } else if (prompt.includes('operating hours')) {\n      return JSON.stringify({\n        monday: { open: '11:00', close: '15:00', closed: false },\n        tuesday: { open: '11:00', close: '15:00', closed: false },\n        wednesday: { open: '11:00', close: '15:00', closed: false },\n        thursday: { open: '11:00', close: '15:00', closed: false },\n        friday: { open: '11:00', close: '20:00', closed: false },\n        saturday: { open: '12:00', close: '20:00', closed: false },\n        sunday: { open: '12:00', close: '16:00', closed: false },\n      });\n    } else if (prompt.includes('sentiment')) {\n      return JSON.stringify({\n        sentiment: 'positive',\n        score: 0.85,\n        key_topics: ['food_quality', 'service'],\n        summary: 'Customer enjoyed the food and service',\n      });\n    }\n    return '{\"processed\": true}';\n  }\n\n  private canMakeRequest(): boolean {\n    return this.requestCount < this.dailyLimit.requests && this.tokenCount < this.dailyLimit.tokens;\n  }\n\n  private updateUsageCounters(requests: number, tokens: number): void {\n    this.requestCount += requests;\n    this.tokenCount += tokens;\n  }\n\n  getUsageStats(): {\n    requests: { used: number; limit: number; remaining: number };\n    tokens: { used: number; limit: number; remaining: number };\n  } {\n    return {\n      requests: {\n        used: this.requestCount,\n        limit: this.dailyLimit.requests,\n        remaining: this.dailyLimit.requests - this.requestCount,\n      },\n      tokens: {\n        used: this.tokenCount,\n        limit: this.dailyLimit.tokens,\n        remaining: this.dailyLimit.tokens - this.tokenCount,\n      },\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":45,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":45,"endColumn":23,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical logging IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\automated-cleanup\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-cleanup\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\data-quality\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":14,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":14,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[475,483],"text":"truckId == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[476,483],"text":"(truckId ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[475,483],"text":"!Boolean(truckId)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":47,"column":14,"nodeType":"AwaitExpression","messageId":"await","endLine":47,"endColumn":39,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1475,1480],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"sonarjs/no-invalid-await","severity":2,"message":"Refactor this redundant 'await' on a non-promise.","line":47,"column":14,"nodeType":"AwaitExpression","messageId":"refactorAwait","endLine":47,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":175,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":175,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4886,4897],"text":"authHeader == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4887,4897],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4886,4897],"text":"!Boolean(authHeader)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { FoodTruckService, supabase, FoodTruck } from '@/lib/supabase';\n\nexport async function handleGetRequest(request: NextRequest): Promise<NextResponse> {\n  const { searchParams } = new URL(request.url);\n  const action = searchParams.get('action');\n  const truckId = searchParams.get('truckId');\n\n  switch (action) {\n    case 'stats': {\n      return await handleStatsAction();\n    }\n    case 'assess': {\n      if (!truckId) {\n        return NextResponse.json({ success: false, error: 'Missing truckId for assess action' }, { status: 400 });\n      }\n      return await handleAssessAction(truckId);\n    }\n    default: {\n      return await handleDefaultGetAction();\n    }\n  }\n}\n\ninterface PostRequestBody {\n  action: string;\n  truckId?: string;\n}\n\nexport async function handlePostRequest(request: NextRequest): Promise<NextResponse> {\n  const body: unknown = await request.json();\n\n  if (typeof body !== 'object' || body === null) {\n    return NextResponse.json({ success: false, error: 'Invalid request body' }, { status: 400 });\n  }\n\n  const { action, truckId } = body as PostRequestBody;\n\n  switch (action) {\n    case 'update-single': {\n      if (truckId === undefined || truckId === '') {\n        return NextResponse.json({ success: false, error: 'Missing truckId for update-single action' }, { status: 400 });\n      }\n      return await handleUpdateSingle(truckId);\n    }\n    case 'batch-update': {\n      return await handleBatchUpdate();\n    }\n    case 'recalculate-all': {\n      return await handleRecalculateAll();\n    }\n    default: {\n      return NextResponse.json({ success: false, error: `Unknown action: ${action}` }, { status: 400 });\n    }\n  }\n}\n\nasync function handleStatsAction() {\n  const qualityStats = await FoodTruckService.getDataQualityStats();\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      ...qualityStats,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nasync function handleAssessAction(truckId: string) {\n  const truckResult = await FoodTruckService.getTruckById(truckId);\n\n  if ('error' in truckResult) {\n    return NextResponse.json({ success: false, error: truckResult.error }, { status: 404 });\n  }\n\n  const truck: FoodTruck = truckResult; // Explicitly cast to FoodTruck\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      truckId,\n      truckName: truck.name,\n      currentScore: truck.data_quality_score,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nasync function handleDefaultGetAction() {\n  const qualityStats = await FoodTruckService.getDataQualityStats();\n  return NextResponse.json({\n    success: true,\n    data: qualityStats\n  });\n}\n\nasync function handleUpdateSingle(truckId: string) {\n  const updatedTruckResult = await FoodTruckService.getTruckById(truckId);\n  \n  if ('error' in updatedTruckResult) {\n    return NextResponse.json({ success: false, error: updatedTruckResult.error }, { status: 404 });\n  }\n\n  const updatedTruck = updatedTruckResult;\n\n  return NextResponse.json({\n    success: true,\n    message: 'Quality score updated successfully',\n    data: {\n      truckId: updatedTruck.id,\n      truckName: updatedTruck.name,\n      newScore: updatedTruck.data_quality_score,\n      verificationStatus: updatedTruck.verification_status,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nfunction handleBatchUpdate() {\n  return NextResponse.json({\n    success: true,\n    message: 'Batch quality score update completed',\n    data: {\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nfunction updateSingleTruckQualityScore(truck: { id: string }): boolean {\n  try {\n    // Placeholder for actual update logic if needed\n    // DataQualityService.updateTruckQualityScore(truck.id);\n    return true;\n  } catch (error: unknown) {\n    console.error(`Failed to update truck ${truck.id}:`, error);\n    return false;\n  }\n}\n\nasync function handleRecalculateAll() {\n  const allTrucksResult = await FoodTruckService.getAllTrucks(1000, 0);\n  if (allTrucksResult.error !== undefined) {\n    console.error('Error fetching all trucks for recalculation:', allTrucksResult.error);\n    return NextResponse.json({ success: false, error: 'Failed to fetch trucks for recalculation' }, { status: 500 });\n  }\n  const { trucks } = allTrucksResult;\n  let updated = 0;\n  let errors = 0;\n\n  for (const truck of trucks) {\n    const success = updateSingleTruckQualityScore(truck);\n    if (success) {\n      updated++;\n    } else {\n      errors++;\n    }\n  }\n\n  return NextResponse.json({\n    success: true,\n    message: 'Quality score recalculation completed',\n    data: {\n      totalTrucks: trucks.length,\n      updated,\n      errors,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader) return false;\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data, error } = await supabase.auth.getUser(token);\n    const user = data?.user;\n    \n    if (error || !user) return false;\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\helpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":206,"column":7,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":206,"endColumn":50,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[7545,7588],"text":"((status.supabase.authSettings?.googleEnabled) ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[7545,7588],"text":"((status.supabase.authSettings?.googleEnabled) === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":197,"column":59,"nodeType":null,"endLine":197,"endColumn":62,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[7347,7350],"text":"!="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { OAuthStatus } from './types';\r\nimport type { SupabaseClient } from '@supabase/supabase-js';\r\n\r\nexport async function handleGetRequest(_request: NextRequest) {\r\n  const status = await getOAuthStatus();\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    ...status,\r\n    legacy_format: {\r\n      oauth_status: status.overall_status,\r\n      message: getStatusMessage(status.overall_status),\r\n      configuration_steps: status.overall_status === 'ready' ? undefined : [\r\n        '1. Go to Supabase Dashboard > Authentication > Providers',\r\n        '2. Enable Google provider',\r\n        '3. Add Google OAuth Client ID and Secret',\r\n        '4. Configure redirect URLs',\r\n        '5. Test OAuth flow'\r\n      ]\r\n    }\r\n  });\r\n}\r\n\r\n// 1. Refactor nested template literals in generateOAuthTestUrl\r\nfunction generateOAuthTestUrl(baseUrl: string): string {\r\n  const redirectPath = `${baseUrl}/auth/callback`;\r\n  const encodedRedirect = encodeURIComponent(redirectPath);\r\n  return process.env.NEXT_PUBLIC_SUPABASE_URL + '/auth/v1/authorize?provider=google&redirect_to=' + encodedRedirect;\r\n}\r\n\r\nexport function handlePostRequest() { // Removed _request parameter\r\n  const baseUrl = process.env.NODE_ENV === 'production'\r\n    ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\r\n    : 'http://localhost:3000';\r\n\r\n  const testUrl = generateOAuthTestUrl(baseUrl);\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    message: 'OAuth test URL generated',\r\n    test_url: testUrl,\r\n    environment: process.env.NODE_ENV ?? 'development',\r\n    instructions: [\r\n      '1. Open the test_url in a new browser tab',\r\n      '2. Complete Google OAuth flow',\r\n      '3. Verify redirect to admin dashboard',\r\n      '4. Check for proper role assignment'\r\n    ],\r\n    manual_test_steps: [\r\n      'Navigate to /login page',\r\n      'Click Google login button',\r\n      'Complete OAuth flow',\r\n      'Verify admin access'\r\n    ],\r\n    automation_commands: [\r\n      'npm run oauth:verify - Check configuration',\r\n      'npm run oauth:test:dev - Test development flow',\r\n      'npm run oauth:test:prod - Test production flow'\r\n    ]\r\n  });\r\n}\r\n\r\nasync function getOAuthStatus(): Promise<OAuthStatus> {\r\n  const status: OAuthStatus = {\r\n    timestamp: new Date().toISOString(),\r\n    environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\r\n    supabase: {\r\n      connected: false,\r\n      projectId: 'zkwliyjjkdnigizidlln' as string\r\n    },\r\n    environment_variables: {\r\n      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL !== undefined,\r\n      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY !== undefined,\r\n      supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY !== undefined\r\n    },\r\n    oauth_flow: {\r\n      loginPageExists: true,\r\n      callbackRouteExists: true,\r\n      authProviderConfigured: false\r\n    },\r\n    recommendations: [],\r\n    overall_status: 'not_configured'\r\n  };\r\n\r\n  await checkSupabaseConnection(status, supabase);\r\n  await checkSupabaseAuthSettings(status);\r\n  await testOAuthProvider(status, supabase);\r\n\r\n  status.recommendations = generateRecommendations(status);\r\n  status.overall_status = determineOverallStatus(status);\r\n\r\n  return status;\r\n}\r\n\r\nasync function checkSupabaseConnection(status: OAuthStatus, supabase: SupabaseClient) {\r\n  try {\r\n    const { error } = await supabase.from('profiles').select('count').limit(1);\r\n    if (error === null) {\r\n      status.supabase.connected = true;\r\n    } else {\r\n      status.supabase.error = error.message;\r\n    }\r\n  } catch (error: unknown) {\r\n    status.supabase.error =\r\n      error instanceof Error ? error.message : 'Unknown connection error';\r\n  }\r\n}\r\n\r\nasync function checkSupabaseAuthSettings(status: OAuthStatus) {\r\n  try {\r\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n    if (typeof supabaseUrl === 'string' && supabaseUrl.length > 0) { // Explicit check for undefined and empty string\r\n      const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\r\n      if (settingsResponse.ok === true) {\r\n        const settings: {\r\n          external?: { google?: boolean };\r\n          disable_signup?: boolean;\r\n          autoconfirm?: boolean;\r\n        } = (await settingsResponse.json()) as {\r\n          external?: { google?: boolean };\r\n          disable_signup?: boolean;\r\n          autoconfirm?: boolean;\r\n        };\r\n        status.supabase.authSettings = {\r\n          googleEnabled: settings.external?.google ?? false,\r\n          signupEnabled: settings.disable_signup === false,\r\n          autoconfirm: settings.autoconfirm ?? false\r\n        };\r\n        if (settings.external?.google !== undefined) { // Explicit check for undefined\r\n          status.oauth_flow.authProviderConfigured = true;\r\n        }\r\n      }\r\n    }\r\n  } catch {\r\n    console.info('Auth settings endpoint requires authentication (normal)');\r\n  }\r\n}\r\n\r\nasync function testOAuthProvider(status: OAuthStatus, supabase: SupabaseClient) {\r\n  try {\r\n    const { error: oauthError } = await supabase.auth.signInWithOAuth({\r\n      provider: 'google',\r\n      options: {\r\n        redirectTo: 'http://localhost:3000/auth/callback',\r\n        skipBrowserRedirect: true\r\n      }\r\n    });\r\n    if (oauthError !== null && oauthError.message !== 'Provider not found') { // Explicitly check for oauthError existence\r\n      status.oauth_flow.authProviderConfigured = true;\r\n    }\r\n  } catch (error: unknown) {\r\n    console.info('OAuth provider test failed (may be normal):', error);\r\n  }\r\n}\r\n\r\nfunction generateRecommendations(status: OAuthStatus): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  if (!status.environment_variables.supabaseUrl) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseAnonKey) {\r\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\r\n  }\r\n  if (!status.environment_variables.supabaseServiceKey) {\r\n    recommendations.push('❌ Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\r\n  }\r\n\r\n  if (!status.supabase.connected) {\r\n    recommendations.push('❌ Fix Supabase connection issue');\r\n  if (typeof status.supabase.error === 'string' && status.supabase.error.length > 0) {\r\n    recommendations.push(`   Error: ${status.supabase.error}`);\r\n  }\r\n  }\r\n\r\n  if (status.supabase.authSettings?.googleEnabled === true) {\r\n    recommendations.push('✅ Google OAuth provider is enabled');\r\n  } else {\r\n    recommendations.push('🔧 Enable Google OAuth provider in Supabase Dashboard', '   Go to: Authentication > Providers > Google');\r\n  }\r\n\r\n  if (status.overall_status === 'ready') {\r\n    recommendations.push('🎉 OAuth configuration is complete!', '✅ Test the login flow at /login');\r\n  }\r\n\r\n  if (recommendations.length > 1) {\r\n    recommendations.push('📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions', '🔧 Run: npm run oauth:verify for automated checks');\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\nfunction determineOverallStatus(status: OAuthStatus): 'ready' | 'partial' | 'not_configured' | 'error' {\r\n  // eslint-disable-next-line sonarjs/different-types-comparison\r\n  if (!status.supabase.connected || status.supabase.error !== null) {\r\n    return 'error';\r\n  }\r\n\r\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\r\n  if (!envVarsComplete) {\r\n    return 'not_configured';\r\n  }\r\n\r\n  if (status.supabase.authSettings?.googleEnabled && status.oauth_flow.authProviderConfigured) {\r\n    return 'ready';\r\n  }\r\n\r\n  if (status.supabase.connected && envVarsComplete) {\r\n    return 'partial';\r\n  }\r\n\r\n  return 'not_configured';\r\n}\r\n\r\nfunction getStatusMessage(status: string): string {\r\n  switch (status) {\r\n    case 'ready': {\r\n      return 'Google OAuth is fully configured and ready to use';\r\n    }\r\n    case 'partial': {\r\n      return 'Basic configuration complete, OAuth provider needs setup';\r\n    }\r\n    case 'not_configured': {\r\n      return 'Google OAuth is not configured';\r\n    }\r\n    case 'error': {\r\n      return 'Configuration error detected';\r\n    }\r\n    default: {\r\n      return 'Unknown configuration status';\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\oauth-status\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":28,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":28,"endColumn":43,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[782,815],"text":"((authHeader?.startsWith('Bearer ')) ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[781,815],"text":"(authHeader?.startsWith('Bearer ')) === false"},"desc":"Change condition to check if false (`value === false`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":36,"column":28,"nodeType":null,"endLine":36,"endColumn":31,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[1044,1047],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":74,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":76,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":135,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":141,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":322,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":322,"endColumn":40,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for generating non-security-sensitive event IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-misused-promises */\nimport { NextRequest } from 'next/server';\nimport { supabase, supabaseAdmin, ScrapingJobService, FoodTruckService, type ScrapingJob, type FoodTruck } from '@/lib/supabase';\nimport { AdminEvent } from './types';\n\ninterface RealtimeMetrics {\n  scrapingJobs: {\n    active: number;\n    completed: number;\n    failed: number;\n    pending: number;\n  };\n  dataQuality: {\n    averageScore: number;\n    totalTrucks: number;\n    recentChanges: number;\n  };\n  systemHealth: {\n    status: 'healthy' | 'warning' | 'error';\n    uptime: number;\n    lastUpdate: string;\n  };\n}\n\nexport async function verifyAdminAccess(request: NextRequest): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader?.startsWith('Bearer ')) {\n      return false;\n    }\n\n    const token = authHeader.slice(7);\n    const { data, error } = await supabase.auth.getUser(token);\n\n    // eslint-disable-next-line sonarjs/different-types-comparison\n    if (error || data.user === null) {\n      return false;\n    }\n    const user = data.user;\n\n    if (!supabaseAdmin) {\n      return false;\n    }\n\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nexport function handleGetRequest(request: NextRequest): Response {\n  const stream = new ReadableStream({\n    start(controller: ReadableStreamDefaultController<Uint8Array>) {\n      const encoder = new TextEncoder();\n\n      const connectionEvent: AdminEvent = {\n        id: generateEventId(),\n        type: 'heartbeat',\n        timestamp: new Date().toISOString(),\n        data: {\n          message: 'Real-time admin dashboard connected',\n          connectionId: generateEventId()\n        }\n      };\n      \n      controller.enqueue(encoder.encode(formatSSEMessage(connectionEvent)));\n\n      const intervalId = setInterval(async () => {\n        await sendHeartbeatEvent(controller, encoder);\n      }, 5000);\n\n      const changeMonitorId = setupDataChangeMonitor(controller, encoder);\n\n      request.signal.addEventListener('abort', () => {\n        clearInterval(intervalId);\n        clearInterval(changeMonitorId);\n        controller.close();\n      });\n    }\n  });\n\n  return new Response(stream, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control'\n    }\n  });\n}\n\nasync function sendHeartbeatEvent(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): Promise<void> {\n  try {\n    const metrics = await fetchRealtimeMetrics();\n    const event: AdminEvent = {\n      id: generateEventId(),\n      type: 'heartbeat',\n      timestamp: new Date().toISOString(),\n      data: { ...metrics }\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\n  } catch (error) {\n    console.error('Error fetching realtime metrics:', error);\n\n    const errorEvent: AdminEvent = {\n      id: generateEventId(),\n      type: 'system_alert',\n      timestamp: new Date().toISOString(),\n      data: {\n        error: 'Failed to fetch metrics',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      severity: 'error'\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(errorEvent)));\n  }\n}\n\nfunction setupDataChangeMonitor(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): NodeJS.Timeout {\n  return setInterval(async () => {\n    try {\n      await monitorDataChanges(controller, encoder);\n    } catch (error) {\n      console.error('Error monitoring data changes:', error);\n    }\n  }, 10_000);\n}\n\nexport async function handlePostRequest(request: NextRequest): Promise<Response> {\n  try {\n    const body: unknown = await request.json(); // Explicitly type body as unknown\n    let action: string;\n\n    // Type guard to ensure 'body' has 'action' property and is a string\n    if (typeof body === 'object' && body !== null && 'action' in body && typeof (body as { action: string }).action === 'string') {\n      action = (body as { action: string }).action;\n    } else {\n      return new Response(JSON.stringify({\n        success: false,\n        error: \"Invalid request body: 'action' property is missing or not a string.\"\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    switch (action) {\n      case 'health_check': {\n        return await handleHealthCheck();\n      }\n\n      case 'trigger_test_event': {\n        return handleTriggerTestEvent();\n      }\n\n      default: {\n        return new Response(JSON.stringify({\n          success: false,\n          error: \"That didn't work, please try again later.\"\n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Realtime events POST error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: \"That didn't work, please try again later.\"\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\nasync function fetchRealtimeMetrics(): Promise<RealtimeMetrics> {\n  try {\n    const recentJobs = await ScrapingJobService.getJobsByStatus('all');\n    const scrapingMetrics = {\n      active: recentJobs.filter((job: ScrapingJob) => job.status === 'running').length,\n      completed: recentJobs.filter((job: ScrapingJob) => job.status === 'completed').length,\n      failed: recentJobs.filter((job: ScrapingJob) => job.status === 'failed').length,\n      pending: recentJobs.filter((job: ScrapingJob) => job.status === 'pending').length\n    };\n\n    const qualityStats = await FoodTruckService.getDataQualityStats();\n    const dataQualityMetrics = {\n      averageScore: qualityStats.avg_quality_score ?? 0,\n      totalTrucks: qualityStats.total_trucks ?? 0,\n      recentChanges: 0\n    };\n\n    const systemHealth = {\n      status: 'healthy' as const,\n      uptime: process.uptime(),\n      lastUpdate: new Date().toISOString()\n    };\n\n    return {\n      scrapingJobs: scrapingMetrics,\n      dataQuality: dataQualityMetrics,\n      systemHealth\n    };\n  } catch (error) {\n    console.error('Error fetching realtime metrics:', error);\n    return {\n      scrapingJobs: { active: 0, completed: 0, failed: 0, pending: 0 },\n      dataQuality: { averageScore: 0, totalTrucks: 0, recentChanges: 0 },\n      systemHealth: {\n        status: 'error',\n        uptime: 0,\n        lastUpdate: new Date().toISOString()\n      }\n    };\n  }\n}\n\nfunction isScrapingJob(obj: unknown): obj is ScrapingJob {\n  return typeof obj === 'object' && obj !== null && 'id' in obj && 'status' in obj;\n}\n\n// Removed isFoodTruck function as it is unused.\n// function isFoodTruck(obj: unknown): obj is FoodTruck {\n//   return typeof obj === 'object' && obj !== null && 'id' in obj && 'name' in obj;\n// }\n\nasync function sendScrapingUpdateEvent(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): Promise<void> {\n  const recentJobs = await ScrapingJobService.getJobsByStatus('all');\n\n  if (Array.isArray(recentJobs) && recentJobs.length > 0) {\n    const event: AdminEvent = {\n      id: generateEventId(),\n      type: 'scraping_update',\n      timestamp: new Date().toISOString(),\n      data: {\n        recentJobs: recentJobs.filter((job) => isScrapingJob(job)).map((job) => ({ // Fixed unicorn/no-array-callback-reference\n          id: job.id,\n          status: job.status,\n          started_at: job.started_at,\n          completed_at: job.completed_at\n        })),\n        count: recentJobs.length\n      },\n      severity: 'info'\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\n  }\n}\n\nasync function sendDataQualityChangeEvent(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): Promise<void> {\n  const recentTrucksResult = await FoodTruckService.getAllTrucks(10, 0);\n  const recentlyUpdated = recentTrucksResult.trucks.filter((truck: FoodTruck) => {\n    if (!truck.updated_at) return false;\n    const updatedAt = new Date(truck.updated_at);\n    const oneMinuteAgo = new Date(Date.now() - 60_000);\n    return updatedAt > oneMinuteAgo;\n  });\n\n  if (recentlyUpdated.length > 0) {\n    const event: AdminEvent = {\n      id: generateEventId(),\n      type: 'data_quality_change',\n      timestamp: new Date().toISOString(),\n      data: {\n        updatedTrucks: recentlyUpdated.map(truck => ({\n          id: truck.id,\n          name: truck.name,\n          data_quality_score: truck.data_quality_score,\n          updated_at: truck.updated_at\n        })),\n        count: recentlyUpdated.length\n      },\n      severity: 'info'\n    };\n\n    controller.enqueue(encoder.encode(formatSSEMessage(event)));\n  }\n}\n\nasync function monitorDataChanges(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): Promise<void> {\n  try {\n    await sendScrapingUpdateEvent(controller, encoder);\n    await sendDataQualityChangeEvent(controller, encoder);\n  } catch (error) {\n    console.error('Error monitoring data changes:', error);\n  }\n}\n\nfunction formatSSEMessage(event: AdminEvent): string {\n  return `id: ${event.id}\\nevent: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`;\n}\n\nfunction generateEventId(): string {\n  // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for generating non-security-sensitive event IDs.\n  return `${Date.now()}-${Math.random().toString(36).slice(2, 11)}`;\n}\n\nasync function handleHealthCheck(): Promise<Response> {\n  const metrics = await fetchRealtimeMetrics();\n  return new Response(JSON.stringify({\n    success: true,\n    status: 'healthy',\n    metrics,\n    timestamp: new Date().toISOString()\n  }), {\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n\nfunction handleTriggerTestEvent(): Response {\n  return new Response(JSON.stringify({\n    success: true,\n    message: 'Test event triggered',\n    timestamp: new Date().toISOString()\n  }), {\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\realtime-events\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\admin\\scraping-metrics\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\analytics\\web-vitals\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\handlers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":72,"column":51,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":72,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2364,2373],"text":"(e.details != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2364,2373],"text":"(e.details ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2364,2373],"text":"(Boolean(e.details))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { autoScraper } from '@/lib/autoScraper';\r\nimport { scheduler } from '@/lib/scheduler';\r\nimport { logActivity } from '@/lib/activityLogger';\r\nimport { AutoScrapeResult } from './types';\r\n\r\nfunction verifyCronSecret(request: NextRequest): NextResponse | null {\r\n  const authHeader = request.headers.get('authorization');\r\n  const cronSecret = process.env.CRON_SECRET;\r\n\r\n  if (cronSecret === undefined || cronSecret === '') {\r\n    console.error('CRON_SECRET not configured');\r\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\r\n  }\r\n\r\n  if (authHeader !== `Bearer ${cronSecret}`) {\r\n    console.error('Unauthorized cron attempt:', authHeader);\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction logAutoScrapeStart() {\r\n  console.info('Starting automated scraping job...');\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_started',\r\n    details: { timestamp: new Date().toISOString() },\r\n  });\r\n}\r\n\r\nfunction logAutoScrapeCompletion(result: AutoScrapeResult) {\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_completed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      trucksProcessed: result.trucksProcessed,\r\n      newTrucksFound: result.newTrucksFound,\r\n      errorsCount: result.errors?.length ?? 0,\r\n    },\r\n  });\r\n  console.info('Automated scraping job completed successfully');\r\n}\r\n\r\nfunction logAutoScrapeFailure(error: unknown) {\r\n  console.error('Auto-scraping cron job failed:', error);\r\n  logActivity({\r\n    type: 'cron_job',\r\n    action: 'auto_scrape_failed',\r\n    details: {\r\n      timestamp: new Date().toISOString(),\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n    },\r\n  });\r\n}\r\n\r\nexport async function handlePostRequest(request: NextRequest) {\r\n  try {\r\n    const authResponse = verifyCronSecret(request);\r\n    if (authResponse) {\r\n      return authResponse;\r\n    }\r\n\r\n    logAutoScrapeStart();\r\n\r\n    const rawResult = await autoScraper.runAutoScraping();\r\n    // Map errors to string[] for compatibility\r\n    const result: AutoScrapeResult = {\r\n      trucksProcessed: rawResult.trucksProcessed,\r\n      newTrucksFound: rawResult.newTrucksFound,\r\n      errors: rawResult.errors?.map(e => e.url + (e.details ? `: ${e.details}` : '')),\r\n    };\r\n    scheduler.scheduleFollowUpTasks(result);\r\n    logAutoScrapeCompletion(result);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Auto-scraping completed successfully',\r\n      data: {\r\n        trucksProcessed: result.trucksProcessed,\r\n        newTrucksFound: result.newTrucksFound,\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    logAutoScrapeFailure(error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: 'Auto-scraping failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\nexport function handleGetRequest() {\r\n  return NextResponse.json(\r\n    { error: 'Method not allowed. Use POST for cron jobs.' },\r\n    { status: 405 },\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\cron\\auto-scrape\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\firecrawl\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\monitoring\\api-usage\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\pipeline\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":103,"column":7,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":103,"endColumn":20,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for simulating task execution."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\scheduler\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\search\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\tavily\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\pipelineRunnerHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\schemaMapper.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":13,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":13,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  ExtractedFoodTruckDetails,\r\n  FoodTruckSchema,\r\n  MenuCategory,\r\n  MenuItem,\r\n} from '@/lib/types';\r\n\r\nexport function mapExtractedDataToTruckSchema(\r\n  extractedData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n  isDryRun: boolean,\r\n): FoodTruckSchema {\r\n  if (!extractedData || typeof extractedData !== 'object') {\r\n    throw new Error('Invalid extractedData for mapping.');\r\n  }\r\n\r\n  const name = extractedData.name ?? 'Unknown Test Truck';\r\n  const locationData = extractedData.current_location ?? {};\r\n  const fullAddress = [\r\n    locationData.address,\r\n    locationData.city,\r\n    locationData.state,\r\n    locationData.zip_code,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(', ');\r\n\r\n  return {\r\n    name: name,\r\n    description: extractedData.description ?? undefined,\r\n    current_location: {\r\n      lat: locationData.lat ?? 0,\r\n      lng: locationData.lng ?? 0,\r\n      address: fullAddress ?? (locationData.raw_text ?? undefined),\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n    scheduled_locations: extractedData.scheduled_locations ?? undefined,\r\n    operating_hours: extractedData.operating_hours ?? undefined,\r\n    menu: (extractedData.menu ?? []).map((category: MenuCategory) => ({\r\n      name: category.name ?? 'Uncategorized',\r\n      items: (category.items ?? []).map((item: MenuItem) => ({\r\n        name: item.name ?? 'Unknown Item',\r\n        description: item.description ?? undefined,\r\n        price:\r\n          typeof item.price === 'number' || typeof item.price === 'string'\r\n            ? item.price\r\n            : undefined,\r\n        dietary_tags: item.dietary_tags ?? [],\r\n      })),\r\n    })),\r\n    contact_info: extractedData.contact_info ?? undefined,\r\n    social_media: extractedData.social_media ?? undefined,\r\n    cuisine_type: extractedData.cuisine_type ?? [],\r\n    price_range: extractedData.price_range ?? undefined,\r\n    specialties: extractedData.specialties ?? [],\r\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\r\n    verification_status: 'pending',\r\n    source_urls: [sourceUrl].filter(Boolean),\r\n    last_scraped_at: new Date().toISOString(),\r\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\test-integration\\stageHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\api\\trucks\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\auth\\authHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\batchCleanup.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":151,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":151,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":207,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":207,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":325,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":325,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":380,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":380,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Batch Data Cleanup System\r\n * Implements automated data quality improvements and cleanup operations\r\n */\r\n\r\nimport { FoodTruckService, type FoodTruck, DataQualityService } from '@/lib/supabase';\r\nimport { DuplicatePreventionService } from './duplicatePrevention';\r\nimport { getPlaceholderPatterns, processTruckForPlaceholders } from './placeholderUtils';\r\n\r\nexport interface CleanupOperation {\r\n  type: 'normalize_phone' | 'fix_coordinates' | 'remove_placeholders' | 'update_quality_scores' | 'merge_duplicates';\r\n  description: string;\r\n  affectedCount: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  errors: string[];\r\n}\r\n\r\nexport interface BatchCleanupResult {\r\n  totalProcessed: number;\r\n  operations: CleanupOperation[];\r\n  summary: {\r\n    trucksImproved: number;\r\n    duplicatesRemoved: number;\r\n    qualityScoreImprovement: number;\r\n    placeholdersRemoved: number;\r\n  };\r\n  duration: number;\r\n}\r\n\r\ninterface MergeOperationContext {\r\n  operation: CleanupOperation;\r\n  processedIds: Set<string>;\r\n}\r\n\r\ninterface CoordinateProcessContext {\r\n  defaultLat: number;\r\n  defaultLng: number;\r\n  dryRun: boolean;\r\n  operation: CleanupOperation;\r\n}\r\n\r\n/**\r\n * Automated Data Quality Cleanup Service\r\n */\r\nexport class BatchCleanupService {\r\n  \r\n  /**\r\n   * Run comprehensive data cleanup operations\r\n   */\r\n  static async runFullCleanup(options: {\r\n    batchSize?: number;\r\n    dryRun?: boolean;\r\n    operations?: CleanupOperation['type'][];\r\n  } = {}): Promise<BatchCleanupResult> {\r\n    const startTime = Date.now();\r\n    const { batchSize = 50, dryRun = false, operations = [\r\n      'remove_placeholders',\r\n      'normalize_phone',\r\n      'fix_coordinates',\r\n      'update_quality_scores',\r\n      'merge_duplicates'\r\n    ] } = options;\r\n\r\n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\r\n    const result = this.initializeCleanupResult();\r\n    try {\r\n      const allTrucks = await FoodTruckService.getAllTrucks();\r\n      result.totalProcessed = allTrucks.total;\r\n      await this.processTrucksInBatches(allTrucks.trucks, {\r\n        batchSize,\r\n        operations,\r\n        dryRun,\r\n        result\r\n      });\r\n      return this.finalizeCleanupResult(result, startTime);\r\n    } catch (error) {\r\n      console.error('Batch cleanup failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n\r\n  private static initializeCleanupResult(): BatchCleanupResult {\r\n    return {\r\n      totalProcessed: 0,\r\n      operations: [],\r\n      summary: {\r\n        trucksImproved: 0,\r\n        duplicatesRemoved: 0,\r\n        qualityScoreImprovement: 0,\r\n        placeholdersRemoved: 0\r\n      },\r\n      duration: 0\r\n    };\r\n  }\r\n\r\n  private static finalizeCleanupResult(result: BatchCleanupResult, startTime: number): BatchCleanupResult {\r\n    result.summary = this.calculateSummary(result.operations);\r\n    result.duration = Date.now() - startTime;\r\n\r\n    console.info(`Batch cleanup completed in ${result.duration}ms`);\r\n    return result;\r\n  }\r\n\r\n  private static async processTrucksInBatches(\r\n    trucks: FoodTruck[],\r\n    { batchSize, operations, dryRun, result }: {\r\n      batchSize: number;\r\n      operations: CleanupOperation['type'][];\r\n      dryRun: boolean;\r\n      result: BatchCleanupResult;\r\n    }\r\n  ): Promise<void> {\r\n    for (let i = 0; i < trucks.length; i += batchSize) {\r\n      const batch = trucks.slice(i, i + batchSize);\r\n      for (const op of operations) {\r\n        const opResult = await this.runOperation(op, batch, dryRun);\r\n        result.operations.push(opResult);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Run a specific cleanup operation\r\n   */\r\n  private static async runOperation(\r\n    type: CleanupOperation['type'],\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean\r\n  ): Promise<CleanupOperation> {\r\n    const operation: CleanupOperation = {\r\n      type,\r\n      description: this.getOperationDescription(type),\r\n      affectedCount: 0,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      errors: []\r\n    };\r\n    \r\n    const operationRunners = {\r\n      remove_placeholders: this.runRemovePlaceholders,\r\n      normalize_phone: this.runNormalizePhoneNumbers,\r\n      fix_coordinates: this.runFixCoordinates,\r\n      update_quality_scores: this.runUpdateQualityScores,\r\n      merge_duplicates: this.runMergeDuplicates,\r\n    };\r\n\r\n    try {\r\n      const runner = operationRunners[type];\r\n      if (runner) {\r\n        return await runner.call(this, trucks, dryRun, operation);\r\n      } else {\r\n        operation.errors.push(`Unknown operation type: ${String(type)}`);\r\n        return operation;\r\n      }\r\n    } catch (error) {\r\n      operation.errors.push(`Operation failed: ${error instanceof Error ? error.message : String(error)}`);\r\n      return operation;\r\n    }\r\n  }\r\n\r\n  private static runRemovePlaceholders = async (trucks: FoodTruck[], dryRun: boolean, operation: CleanupOperation): Promise<CleanupOperation> => {\r\n    return await this.removePlaceholders(trucks, dryRun, operation);\r\n  }\r\n\r\n  private static runNormalizePhoneNumbers = async (trucks: FoodTruck[], dryRun: boolean, operation: CleanupOperation): Promise<CleanupOperation> => {\r\n    return await this.normalizePhoneNumbers(trucks, dryRun, operation);\r\n  }\r\n\r\n  private static runFixCoordinates = async (trucks: FoodTruck[], dryRun: boolean, operation: CleanupOperation): Promise<CleanupOperation> => {\r\n    return await this.fixCoordinates(trucks, dryRun, operation);\r\n  }\r\n\r\n  private static runUpdateQualityScores = async (trucks: FoodTruck[], dryRun: boolean, operation: CleanupOperation): Promise<CleanupOperation> => {\r\n    return await this.updateQualityScores(trucks, dryRun, operation);\r\n  }\r\n\r\n  private static runMergeDuplicates = async (trucks: FoodTruck[], dryRun: boolean, operation: CleanupOperation): Promise<CleanupOperation> => {\r\n    return await this.mergeDuplicates(trucks, dryRun, operation);\r\n  }\r\n  \r\n\r\n  /**\r\n   * Remove placeholder and mock data\r\n   */\r\n  private static async removePlaceholders(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const placeholderPatterns = getPlaceholderPatterns();\r\n    const promises = trucks.map(truck => \r\n      this.processSingleTruckForPlaceholders(truck, placeholderPatterns, dryRun, operation)\r\n    );\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  private static async processSingleTruckForPlaceholders(\r\n    truck: FoodTruck,\r\n    patterns: RegExp[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<void> {\r\n    const updates = processTruckForPlaceholders(truck, patterns);\r\n    if (updates && Object.keys(updates).length > 0) {\r\n      await this.performUpdateOperation(truck.id, updates, dryRun, operation);\r\n    }\r\n  }\r\n\r\n  private static async performUpdateOperation(\r\n    truckId: string,\r\n    updates: Partial<FoodTruck>,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<void> {\r\n    operation.affectedCount++;\r\n    if (dryRun) {\r\n      operation.successCount++;\r\n    } else {\r\n      try {\r\n        await FoodTruckService.updateTruck(truckId, updates);\r\n        operation.successCount++;\r\n      } catch (error) {\r\n        operation.errorCount++;\r\n        operation.errors.push(`Failed to update truck ${truckId}: ${error instanceof Error ? error.message : String(error)}`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Normalize phone numbers to consistent format\r\n   */\r\n  private static async normalizePhoneNumbers(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const promises = trucks.map(truck => {\r\n      if (truck.contact_info?.phone !== undefined) {\r\n        const originalPhone = truck.contact_info.phone;\r\n        const normalizedPhone = this.normalizePhone(originalPhone);\r\n\r\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\r\n          return this.applyPhoneNormalizationUpdate(truck, normalizedPhone, dryRun, operation);\r\n        }\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  private static async applyPhoneNormalizationUpdate(\r\n    truck: FoodTruck,\r\n    normalizedPhone: string,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<void> {\r\n    operation.affectedCount++;\r\n    if (dryRun) {\r\n      operation.successCount++;\r\n    } else {\r\n      try {\r\n        await FoodTruckService.updateTruck(truck.id, {\r\n          contact_info: {\r\n            ...truck.contact_info,\r\n            phone: normalizedPhone\r\n          }\r\n        });\r\n        operation.successCount++;\r\n      } catch (error) {\r\n        operation.errorCount++;\r\n        operation.errors.push(`Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Helper to determine if coordinates need fixing and provide updates\r\n   */\r\n  private static getFixedCoordinates(\r\n    lat: number | undefined,\r\n    lng: number | undefined,\r\n    defaultLat: number,\r\n    defaultLng: number\r\n  ): Partial<FoodTruck['current_location']> | undefined {\r\n    // Fix invalid coordinates (0,0 or undefined)\r\n    if (lat === undefined || lng === undefined || lat === 0 || lng === 0) {\r\n      return { lat: defaultLat, lng: defaultLng };\r\n    }\r\n    // Fix coordinates outside reasonable bounds for Charleston area\r\n    if (lat < 32 || lat > 34 || lng > -79 || lng < -81) {\r\n      return { lat: defaultLat, lng: defaultLng };\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Fix invalid GPS coordinates\r\n   */\r\n  private static async fixCoordinates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const context: Omit<CoordinateProcessContext, 'operation'> = {\r\n      defaultLat: 32.7767,\r\n      defaultLng: -79.9311,\r\n      dryRun,\r\n    };\r\n\r\n    const promises = trucks.map(truck => \r\n      this.processSingleTruckCoordinates(truck, { ...context, operation })\r\n    );\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  private static async processSingleTruckCoordinates(\r\n    truck: FoodTruck,\r\n    context: CoordinateProcessContext\r\n  ): Promise<void> {\r\n    if (!truck.current_location) return;\r\n    const { defaultLat, defaultLng, dryRun, operation } = context;\r\n    const { lat, lng } = truck.current_location;\r\n    const updates = this.getFixedCoordinates(lat, lng, defaultLat, defaultLng);\r\n    if (updates) {\r\n      await this.applyCoordinateFixUpdate(truck, updates, dryRun, operation);\r\n    }\r\n  }\r\n\r\n  private static async applyCoordinateFixUpdate(\r\n    truck: FoodTruck,\r\n    updates: Partial<FoodTruck['current_location']>,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<void> {\r\n    operation.affectedCount++;\r\n    if (dryRun) {\r\n      operation.successCount++;\r\n    } else {\r\n      try {\r\n        await FoodTruckService.updateTruck(truck.id, {\r\n          current_location: {\r\n            ...truck.current_location,\r\n            ...updates,\r\n          }\r\n        });\r\n        operation.successCount++;\r\n      } catch (error) {\r\n        operation.errorCount++;\r\n        operation.errors.push(`Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update quality scores for all trucks\r\n   */\r\n  private static async updateQualityScores(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const promises = trucks.map(truck => \r\n      this.processSingleTruckForQualityScore(truck, dryRun, operation)\r\n    );\r\n    await Promise.all(promises);\r\n    return operation;\r\n  }\r\n\r\n  private static async processSingleTruckForQualityScore(\r\n    truck: FoodTruck,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<void> {\r\n    const qualityAssessment = DataQualityService.calculateQualityScore(truck);\r\n    if (qualityAssessment) {\r\n      const newScore = qualityAssessment.score;\r\n      const currentScore = truck.data_quality_score ?? 0;\r\n      // Only update if score changed significantly (>5% difference)\r\n      if (typeof newScore === 'number' && Math.abs(newScore - currentScore) > 0.05) {\r\n        await this.applyQualityScoreUpdate(truck, dryRun, operation);\r\n      }\r\n    }\r\n  }\r\n\r\n  private static async applyQualityScoreUpdate(\r\n    truck: FoodTruck,\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<void> {\r\n    operation.affectedCount++;\r\n    if (dryRun) {\r\n      operation.successCount++;\r\n    } else {\r\n      try {\r\n        const updateResult = await DataQualityService.updateTruckQualityScore(truck.id);\r\n        if ('error' in updateResult) {\r\n          throw new Error(updateResult.error);\r\n        }\r\n        operation.successCount++;\r\n      } catch (error) {\r\n        operation.errorCount++;\r\n        operation.errors.push(`Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Identify and merge duplicate trucks\r\n   */\r\n  private static async mergeDuplicates(\r\n    trucks: FoodTruck[],\r\n    dryRun: boolean,\r\n    operation: CleanupOperation\r\n  ): Promise<CleanupOperation> {\r\n    const processedIds = new Set<string>();\r\n    for (const truck of trucks) {\r\n      await this.processSingleTruckForDuplicates(truck, dryRun, { operation, processedIds });\r\n    }\r\n    return operation;\r\n  }\r\n\r\n  private static async processSingleTruckForDuplicates(\r\n    truck: FoodTruck,\r\n    dryRun: boolean,\r\n    context: MergeOperationContext\r\n  ): Promise<void> {\r\n    const { processedIds } = context;\r\n    if (processedIds.has(truck.id)) return;\r\n\r\n    const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\r\n    if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch?.confidence === 'high' && duplicateCheck.bestMatch.recommendation === 'merge') {\r\n      await this.applyMergeOperation(truck, duplicateCheck.bestMatch.existingTruck, dryRun, context);\r\n    }\r\n    processedIds.add(truck.id);\r\n  }\r\n\r\n  private static async applyMergeOperation(\r\n    truck: FoodTruck,\r\n    existingTruck: FoodTruck,\r\n    dryRun: boolean,\r\n    context: MergeOperationContext\r\n  ): Promise<void> {\r\n    const { operation, processedIds } = context;\r\n    operation.affectedCount++;\r\n    if (dryRun) {\r\n      operation.successCount++;\r\n    } else {\r\n      try {\r\n        const mergeResult = await DuplicatePreventionService.mergeDuplicates(truck.id, existingTruck.id);\r\n        if ('error' in mergeResult) {\r\n          throw new Error(mergeResult.error);\r\n        }\r\n        processedIds.add(existingTruck.id);\r\n        operation.successCount++;\r\n      } catch (error) {\r\n        operation.errorCount++;\r\n        operation.errors.push(`Failed to merge duplicates ${truck.id} and ${existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Normalize phone number format\r\n   */\r\n  private static normalizePhone(phone: string): string | undefined {\r\n    if (!phone) return undefined;\r\n    \r\n    // Remove all non-digit characters\r\n    const digits = phone.replaceAll(/\\D/g, '');\r\n    \r\n    // Handle US phone numbers\r\n    if (digits.length === 10) {\r\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\r\n    }\r\n    if (digits.length === 11 && digits.startsWith('1')) {\r\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\r\n    }\r\n    \r\n    // Return original if can't normalize\r\n    return phone;\r\n  }\r\n  \r\n  /**\r\n   * Get operation description\r\n   */\r\n  private static getOperationDescription(type: CleanupOperation['type']): string {\r\n    const descriptions = {\r\n      remove_placeholders: 'Remove placeholder and mock data values',\r\n      normalize_phone: 'Normalize phone numbers to consistent format',\r\n      fix_coordinates: 'Fix invalid GPS coordinates',\r\n      update_quality_scores: 'Recalculate data quality scores',\r\n      merge_duplicates: 'Identify and merge duplicate truck entries'\r\n    };\r\n    \r\n    return descriptions[type] ?? 'Unknown operation';\r\n  }\r\n  \r\n  /**\r\n   * Calculate cleanup summary\r\n   */\r\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\r\n    return {\r\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\r\n      duplicatesRemoved: operations.find(op => op.type === 'merge_duplicates')?.successCount ?? 0,\r\n      qualityScoreImprovement: operations.find(op => op.type === 'update_quality_scores')?.successCount ?? 0,\r\n      placeholdersRemoved: operations.find(op => op.type === 'remove_placeholders')?.successCount ?? 0\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\duplicatePrevention.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":232,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":232,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7434,7446],"text":"(loc1.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7434,7446],"text":"(loc1.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7434,7446],"text":"(Boolean(loc1.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":232,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":232,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7450,7462],"text":"(loc2.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7450,7462],"text":"(loc2.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7450,7462],"text":"(Boolean(loc2.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Duplicate Prevention System\r\n * Implements intelligent duplicate detection and prevention for food truck data\r\n */\r\n\r\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\r\n\r\n// Duplicate detection configuration\r\nexport const DUPLICATE_DETECTION_CONFIG = {\r\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\r\n  thresholds: {\r\n    name: 0.85,        // High threshold for name matching\r\n    location: 0.9,     // Very high threshold for location matching\r\n    phone: 1,        // Exact match for phone numbers\r\n    website: 1,      // Exact match for websites\r\n    overall: 0.8       // Overall similarity threshold\r\n  },\r\n  \r\n  // Weight factors for different fields\r\n  weights: {\r\n    name: 0.4,         // 40% weight for name similarity\r\n    location: 0.3,     // 30% weight for location similarity\r\n    contact: 0.2,      // 20% weight for contact info similarity\r\n    menu: 0.1          // 10% weight for menu similarity\r\n  }\r\n} as const;\r\n\r\nexport interface DuplicateMatch {\r\n  existingTruck: FoodTruck;\r\n  similarity: number;\r\n  matchedFields: string[];\r\n  confidence: 'high' | 'medium' | 'low';\r\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\r\n}\r\n\r\nexport interface DuplicateDetectionResult {\r\n  isDuplicate: boolean;\r\n  matches: DuplicateMatch[];\r\n  bestMatch?: DuplicateMatch;\r\n  action: 'create' | 'update' | 'merge' | 'manual_review';\r\n  reason: string;\r\n}\r\n\r\n/**\r\n * Advanced Duplicate Prevention Service\r\n */\r\nexport class DuplicatePreventionService {\r\n  \r\n  /**\r\n   * Check if a food truck is a duplicate of existing trucks\r\n   */\r\n  static async checkForDuplicates(candidateTruck: Partial<FoodTruck>): Promise<DuplicateDetectionResult> {\r\n    try {\r\n      // Get all existing trucks for comparison\r\n      const existingTrucksResult = await FoodTruckService.getAllTrucks();\r\n\r\n      if ('error' in existingTrucksResult) {\r\n        console.error('Error fetching existing trucks:', existingTrucksResult.error);\r\n        return {\r\n          isDuplicate: false,\r\n          matches: [],\r\n          action: 'create',\r\n          reason: `Error fetching existing trucks: ${existingTrucksResult.error}`\r\n        };\r\n      }\r\n\r\n      const existingTrucks = existingTrucksResult.trucks;\r\n      const matches: DuplicateMatch[] = [];\r\n\r\n      for (const existingTruck of existingTrucks) {\r\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\r\n\r\n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\r\n          matches.push({\r\n            existingTruck,\r\n            similarity: similarity.overall,\r\n            matchedFields: similarity.matchedFields,\r\n            confidence: this.getConfidenceLevel(similarity.overall),\r\n            recommendation: this.getRecommendation(similarity)\r\n          });\r\n        }\r\n      }\r\n\r\n      return this.processDuplicateMatches(matches, candidateTruck);\r\n\r\n    } catch (error) {\r\n      console.error('Error checking for duplicates:', error);\r\n      return {\r\n        isDuplicate: false,\r\n        matches: [],\r\n        action: 'create',\r\n        reason: 'An unexpected error occurred during duplicate detection - proceeding with creation'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processes the matches found during duplicate detection and returns the result.\r\n   */\r\n  private static processDuplicateMatches(matches: DuplicateMatch[], candidateTruck: Partial<FoodTruck>): DuplicateDetectionResult {\r\n    // Sort matches by similarity (highest first)\r\n    matches.sort((a, b) => b.similarity - a.similarity);\r\n\r\n    const bestMatch = matches.length > 0 ? matches[0] : undefined;\r\n    const isDuplicate = matches.length > 0;\r\n\r\n    return {\r\n      isDuplicate,\r\n      matches,\r\n      bestMatch,\r\n      action: this.determineAction(matches, candidateTruck),\r\n      reason: this.generateReason(matches, candidateTruck)\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Calculate similarity between two food trucks\r\n   */\r\n  private static calculateSimilarity(\r\n    candidate: Partial<FoodTruck>, \r\n    existing: FoodTruck\r\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\r\n    const breakdown: Record<string, number> = {};\r\n    const matchedFields: string[] = [];\r\n    \r\n    // Name similarity\r\n    const nameSimilarity = this.calculateStringSimilarity(\r\n      candidate.name ?? '', \r\n      existing.name ?? ''\r\n    );\r\n    breakdown.name = nameSimilarity;\r\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\r\n      matchedFields.push('name');\r\n    }\r\n    \r\n    // Location similarity\r\n    const locationSimilarity = this.calculateLocationSimilarity(\r\n      candidate.current_location,\r\n      existing.current_location\r\n    );\r\n    breakdown.location = locationSimilarity;\r\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\r\n      matchedFields.push('location');\r\n    }\r\n    \r\n    // Contact similarity\r\n    const contactSimilarity = this.calculateContactSimilarity(\r\n      candidate.contact_info,\r\n      existing.contact_info\r\n    );\r\n    breakdown.contact = contactSimilarity;\r\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\r\n      matchedFields.push('contact');\r\n    }\r\n    \r\n    // Menu similarity (basic)\r\n    const menuSimilarity = this.calculateMenuSimilarity(\r\n      candidate.menu,\r\n      existing.menu\r\n    );\r\n    breakdown.menu = menuSimilarity;\r\n    if (menuSimilarity > 0.7) {\r\n      matchedFields.push('menu');\r\n    }\r\n    \r\n    // Calculate weighted overall similarity\r\n    const overall = (\r\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\r\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\r\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\r\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu\r\n    );\r\n    \r\n    return { overall, matchedFields, breakdown };\r\n  }\r\n  \r\n  /**\r\n   * Calculate string similarity using Levenshtein distance\r\n   */\r\n  private static calculateStringSimilarity(str1: string, str2: string): number {\r\n    if (!str1 || !str2) return 0;\r\n    \r\n    // Normalize strings\r\n    const s1 = str1.toLowerCase().trim();\r\n    const s2 = str2.toLowerCase().trim();\r\n    \r\n    if (s1 === s2) return 1;\r\n    \r\n    // Calculate Levenshtein distance\r\n    const matrix: number[][] = [];\r\n    const len1 = s1.length;\r\n    const len2 = s2.length;\r\n    \r\n    for (let i = 0; i <= len1; i++) {\r\n      matrix[i] = [i];\r\n    }\r\n    \r\n    for (let j = 0; j <= len2; j++) {\r\n      matrix[0][j] = j;\r\n    }\r\n    \r\n    for (let i = 1; i <= len1; i++) {\r\n      for (let j = 1; j <= len2; j++) {\r\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j] + 1,      // deletion\r\n          matrix[i][j - 1] + 1,      // insertion\r\n          matrix[i - 1][j - 1] + cost // substitution\r\n        );\r\n      }\r\n    }\r\n    \r\n    const distance = matrix[len1][len2];\r\n    const maxLength = Math.max(len1, len2);\r\n    \r\n    return maxLength === 0 ? 1 : 1 - (distance / maxLength);\r\n  }\r\n  \r\n  /**\r\n   * Calculate location similarity\r\n   */\r\n  private static calculateLocationSimilarity(\r\n    loc1: FoodTruck['current_location'] | undefined | null,\r\n    loc2: FoodTruck['current_location'] | undefined | null\r\n  ): number {\r\n    if (!loc1 || !loc2) return 0;\r\n    \r\n    let similarity = 0;\r\n    let factors = 0;\r\n    \r\n    // Address similarity\r\n    if (loc1.address && loc2.address) {\r\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\r\n      factors++;\r\n    }\r\n    \r\n    // GPS coordinate similarity (within 100 meters = high similarity)\r\n    if (\r\n      loc1.lat &&\r\n      loc1.lng &&\r\n      loc2.lat &&\r\n      loc2.lng\r\n    ) {\r\n      const distance = this.calculateGPSDistance(\r\n        loc1.lat, loc1.lng,\r\n        loc2.lat, loc2.lng\r\n      );\r\n      \r\n      // Distance similarity (closer = higher similarity)\r\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - (distance / 1)); // 1km max\r\n      similarity += distanceSimilarity;\r\n      factors++;\r\n    }\r\n    \r\n    return factors > 0 ? similarity / factors : 0;\r\n  }\r\n  \r\n  /**\r\n   * Calculate GPS distance in kilometers\r\n   */\r\n  private static calculateGPSDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLng = (lng2 - lng1) * Math.PI / 180;\r\n    const a = \r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  }\r\n  \r\n  /**\r\n   * Calculate contact similarity\r\n   */\r\n  private static calculateContactSimilarity(\r\n    contact1: FoodTruck['contact_info'] | undefined | null,\r\n    contact2: FoodTruck['contact_info'] | undefined | null\r\n  ): number {\r\n    if (!contact1 || !contact2) return 0;\r\n    \r\n    let matches = 0;\r\n    let total = 0;\r\n    \r\n    // Phone number exact match\r\n    if (contact1.phone != undefined && contact2.phone != undefined) {\r\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\r\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\r\n      if (phone1 === phone2) matches++;\r\n      total++;\r\n    }\r\n    \r\n    // Website exact match\r\n    if (contact1.website != undefined && contact2.website != undefined) {\r\n      const url1 = contact1.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\r\n      const url2 = contact2.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\r\n      if (url1 === url2) matches++;\r\n      total++;\r\n    }\r\n    \r\n    // Email similarity\r\n    if (contact1.email != undefined && contact2.email != undefined) {\r\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches++;\r\n      total++;\r\n    }\r\n    \r\n    return total > 0 ? matches / total : 0;\r\n  }\r\n  \r\n  /**\r\n   * Calculate menu similarity (basic implementation)\r\n   */\r\n  private static calculateMenuSimilarity(\r\n    menu1: FoodTruck['menu'] | undefined | null,\r\n    menu2: FoodTruck['menu'] | undefined | null\r\n  ): number {\r\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\r\n    \r\n    // Simple category name matching\r\n    const categories1 = menu1.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\r\n    const categories2 = menu2.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\r\n    \r\n    const commonCategories = categories1.filter(cat => categories2.includes(cat));\r\n    const totalCategories = new Set([...categories1, ...categories2]).size;\r\n    \r\n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\r\n  }\r\n  \r\n  /**\r\n   * Get confidence level based on similarity score\r\n   */\r\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\r\n    if (similarity >= 0.95) return 'high';\r\n    if (similarity >= 0.85) return 'medium';\r\n    return 'low';\r\n  }\r\n  \r\n  /**\r\n   * Get recommendation based on similarity analysis\r\n   */\r\n  private static getRecommendation(similarity: { overall: number; matchedFields: string[] }): 'merge' | 'update' | 'skip' | 'manual_review' {\r\n    if (similarity.overall >= 0.95) return 'merge';\r\n    if (similarity.overall >= 0.9) return 'update';\r\n    if (similarity.overall >= 0.8) return 'manual_review';\r\n    return 'skip';\r\n  }\r\n  \r\n  /**\r\n   * Determine action based on matches\r\n   */\r\n  private static determineAction(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): 'create' | 'update' | 'merge' | 'manual_review' {\r\n    if (matches.length === 0) return 'create';\r\n    \r\n    const bestMatch = matches[0];\r\n    \r\n    if (bestMatch.confidence === 'high') {\r\n      const recommendation = bestMatch.recommendation;\r\n      if (recommendation === 'merge' || recommendation === 'update') {\r\n        return recommendation;\r\n      }\r\n      return 'manual_review';\r\n    }\r\n    \r\n    return 'manual_review';\r\n  }\r\n  \r\n  /**\r\n   * Generate human-readable reason\r\n   */\r\n  private static generateReason(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): string {\r\n    if (matches.length === 0) {\r\n      return 'No duplicates found - safe to create new truck entry';\r\n    }\r\n    \r\n    const bestMatch = matches[0];\r\n    const similarity = Math.round(bestMatch.similarity * 100);\r\n    \r\n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\r\n  }\r\n  \r\n  /**\r\n   * Merge duplicate truck data intelligently\r\n   */\r\n  static async mergeDuplicates(targetId: string, sourceId: string): Promise<FoodTruck | { error: string }> {\r\n    const targetResult = await FoodTruckService.getTruckById(targetId);\r\n    const sourceResult = await FoodTruckService.getTruckById(sourceId);\r\n\r\n    if ('error' in targetResult) {\r\n      return { error: `Failed to retrieve target truck with ID ${targetId}: ${targetResult.error}` };\r\n    }\r\n    if ('error' in sourceResult) {\r\n      return { error: `Failed to retrieve source truck with ID ${sourceId}: ${sourceResult.error}` };\r\n    }\r\n\r\n    const target = targetResult;\r\n    const source = sourceResult;\r\n\r\n    // Merge logic: prefer non-null, more complete data\r\n    const mergedData: Partial<FoodTruck> = {\r\n      name: target.name ?? source.name,\r\n      description: target.description ?? source.description,\r\n      cuisine_type: (target.cuisine_type?.length ?? 0) > 0 ? target.cuisine_type : source.cuisine_type,\r\n      price_range: target.price_range ?? source.price_range,\r\n      current_location: target.current_location ?? source.current_location,\r\n      contact_info: {\r\n        ...source.contact_info,\r\n        ...target.contact_info // Target takes precedence\r\n      },\r\n      operating_hours: target.operating_hours ?? source.operating_hours,\r\n      menu: (target.menu?.length ?? 0) > 0 ? target.menu : source.menu,\r\n      social_media: {\r\n        ...source.social_media,\r\n        ...target.social_media\r\n      },\r\n      source_urls: [...new Set([...(target.source_urls ?? []), ...(source.source_urls ?? [])])],\r\n      last_scraped_at: new Date().toISOString()\r\n    };\r\n\r\n    // Update target with merged data\r\n    const updatedTruckResult = await FoodTruckService.updateTruck(targetId, mergedData);\r\n\r\n    if ('error' in updatedTruckResult) {\r\n      return { error: `Failed to update target truck with merged data: ${updatedTruckResult.error}` };\r\n    }\r\n\r\n    console.info(`Merged truck ${sourceId} into ${targetId}`);\r\n\r\n    return updatedTruckResult;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\placeholderUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\discoveryEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\geminiApiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\promptTemplates.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":223,"column":3,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":223,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7319,7328],"text":"(sourceUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7319,7328],"text":"(sourceUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7319,7328],"text":"(Boolean(sourceUrl))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const PromptTemplates = {\r\n  menuProcessing: (rawMenuText: string) => `\r\nParse the following food truck menu text and return a structured JSON format.\r\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\r\n\r\nMenu text:\r\n${rawMenuText}\r\n\r\nExpected JSON format:\r\n[\r\n  {\r\n    \"category\": \"string\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"string\",\r\n        \"description\": \"string\",\r\n        \"price\": number,\r\n        \"dietary_tags\": [\"string\"]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nRules:\r\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\r\n- Include dietary restrictions and special tags\r\n- Group items into logical categories\r\n- If no clear categories, use \"Main Items\"\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  locationExtraction: (textInput: string) => `\r\nExtract location information from the following text and return structured data.\r\nLook for addresses, cross streets, landmarks, or location descriptions.\r\n\r\nText:\r\n${textInput}\r\n\r\nExpected JSON format:\r\n{\r\n  \"address\": \"string or undefined\",\r\n  \"city\": \"string or undefined\", \r\n  \"state\": \"string or undefined\",\r\n  \"zipCode\": \"string or undefined\",\r\n  \"coordinates\": {\"lat\": number, \"lng\": number} or undefined,\r\n  \"confidence\": number,\r\n  \"landmarks\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Set coordinates to undefined if not explicitly provided\r\n- Confidence should be 0.0 to 1.0 based on clarity\r\n- Include any mentioned landmarks or cross streets\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  operatingHours: (hoursText: string) => `\r\nParse the following operating hours text and return standardized format.\r\nConvert all times to 24-hour format and handle various input formats.\r\n\r\nHours text:\r\n${hoursText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n  \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n}\r\n\r\nRules:\r\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\r\n- If closed on a day, set \"closed\": true and omit open/close times\r\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\r\n- Default to reasonable hours if ambiguous\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  sentimentAnalysis: (reviewText: string) => `\r\nAnalyze the sentiment of this food truck review and extract key insights.\r\nFocus on food quality, service, value, and overall experience.\r\n\r\nReview text:\r\n${reviewText}\r\n\r\nExpected JSON format:\r\n{\r\n  \"score\": number,\r\n  \"confidence\": number,\r\n  \"aspects\": {\r\n    \"food_quality\": number,\r\n    \"service\": number,\r\n    \"value\": number,\r\n    \"overall\": number\r\n  },\r\n  \"summary\": \"string\",\r\n  \"keywords\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Score should be 0.0 (very negative) to 1.0 (very positive)\r\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\r\n- Include specific aspects mentioned in the review\r\n- Summary should be 1-2 sentences max\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  dataEnhancement: (rawData: unknown) => `\r\nEnhance and standardize the following food truck data.\r\nFill in missing information where possible and improve data quality.\r\n\r\nRaw data:\r\n${JSON.stringify(rawData, undefined, 2)}\r\n\r\nExpected JSON format:\r\n{\r\n  \"name\": \"string\",\r\n  \"description\": \"string\",\r\n  \"cuisine_type\": \"string\",\r\n  \"price_range\": \"$ | $$ | $$$ | $$$$\",\r\n  \"contact\": {\r\n    \"phone\": \"string\",\r\n    \"email\": \"string\",\r\n    \"website\": \"string\",\r\n    \"social_media\": {}\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string\",\r\n    \"city\": \"string\",\r\n    \"state\": \"string\",\r\n    \"coordinates\": {\"lat\": number, \"lng\": number}\r\n  },\r\n  \"operating_hours\": {},\r\n  \"menu_categories\": [\"string\"],\r\n  \"specialties\": [\"string\"],\r\n  \"dietary_options\": [\"string\"]\r\n}\r\n\r\nRules:\r\n- Preserve all original data while enhancing it\r\n- Standardize naming conventions\r\n- Infer cuisine type from menu items\r\n- Estimate price range from menu prices\r\n- Return only the json, no additional text\r\n  `,\r\n\r\n  foodTruckExtraction: (markdownContent: string, sourceUrl?: string) => {\r\n    const schema = `\r\nExpected JSON schema:\r\n{\r\n  \"name\": \"string (food truck name)\",\r\n  \"description\": \"string (brief description of the food truck)\",\r\n  \"cuisine_type\": \"string (type of cuisine served)\",\r\n  \"contact\": {\r\n    \"phone\": \"string (phone number if found)\",\r\n    \"email\": \"string (email if found)\", \r\n    \"website\": \"string (website URL if found)\",\r\n    \"social_media\": {\r\n      \"facebook\": \"string (Facebook URL if found)\",\r\n      \"instagram\": \"string (Instagram URL if found)\",\r\n      \"twitter\": \"string (Twitter URL if found)\"\r\n    }\r\n  },\r\n  \"location\": {\r\n    \"address\": \"string (physical address if found)\",\r\n    \"city\": \"string (city name)\",\r\n    \"state\": \"string (state abbreviation)\",\r\n    \"coordinates\": {\r\n      \"lat\": \"number (latitude if found)\",\r\n      \"lng\": \"number (longitude if found)\"\r\n    }\r\n  },\r\n  \"operating_hours\": {\r\n    \"monday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"tuesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"wednesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"thursday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"friday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"saturday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\r\n    \"sunday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"}\r\n  },\r\n  \"menu\": [\r\n    {\r\n      \"category\": \"string (menu category)\",\r\n      \"items\": [\r\n        {\r\n          \"name\": \"string (item name)\",\r\n          \"description\": \"string (item description)\",\r\n          \"price\": \"number (price as number, not string)\",\r\n          \"dietary_tags\": [\"string (dietary restrictions/tags)\"]\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"specialties\": [\"string (signature dishes or specialties)\"],\r\n  \"dietary_options\": [\"string (dietary accommodations like vegan, gluten-free)\"],\r\n  \"price_range\": \"string ($ for under $10, $$ for $10-20, $$$ for $20-30, $$$$ for over $30)\"\r\n}\r\n`;\r\n\r\n    const instructions = `\r\nInstructions:\r\n- Extract as much information as possible from the provided content\r\n- If information is not available, use null for the field\r\n- For operating hours, use 24-hour format (e.g., \"14:30\" for 2:30 PM)\r\n- If a day is closed, set \"closed\": true and omit open/close times\r\n- For prices, extract numeric values only (e.g., 12.99, not \"$12.99\")\r\n- Be thorough in extracting menu items and their details\r\n- Look for social media links and contact information carefully\r\n- Return only the JSON object, no additional text or formatting\r\n`;\r\n\r\n    return `\r\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\r\n\r\nWebsite content:\r\n${markdownContent}\r\n\r\n${sourceUrl ? `Source URL: ${sourceUrl}` : ''}\r\n\r\n${schema}\r\n\r\n${instructions}\r\n`;\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\responseParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini\\usageLimits.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limits' is assigned a value but never used. Allowed unused args must match /^_/u.","line":60,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APIUsageService } from '../supabase';\r\nimport { APIMonitor } from '../monitoring/apiMonitor';\r\n\r\nexport interface UsageLimits {\r\n  dailyRequestLimit: number;\r\n  dailyTokenLimit: number;\r\n}\r\n\r\nexport interface UsageCheck {\r\n  canMakeRequest: boolean;\r\n  usage?: {\r\n    requests: { used: number; limit: number; remaining: number };\r\n    tokens: { used: number; limit: number; remaining: number };\r\n  };\r\n}\r\n\r\nexport class GeminiUsageLimits {\r\n  private static readonly DEFAULT_LIMITS: UsageLimits = {\r\n    dailyRequestLimit: 1500,\r\n    dailyTokenLimit: 32_000,\r\n  };\r\n\r\n  static async checkUsageLimits(limits: UsageLimits = this.DEFAULT_LIMITS): Promise<UsageCheck> {\r\n    try {\r\n      const usage = await APIUsageService.getTodayUsage('gemini');\r\n\r\n      if (!usage) {\r\n        return { canMakeRequest: true };\r\n      }\r\n\r\n      const requestsUsed = usage.requests_count ?? 0;\r\n      const tokensUsed = usage.tokens_used ?? 0;\r\n\r\n      const requestsRemaining = limits.dailyRequestLimit - requestsUsed;\r\n      const tokensRemaining = limits.dailyTokenLimit - tokensUsed;\r\n\r\n      return {\r\n        canMakeRequest: requestsRemaining > 0 && tokensRemaining > 100, // Keep 100 token buffer\r\n        usage: {\r\n          requests: {\r\n            used: requestsUsed,\r\n            limit: limits.dailyRequestLimit,\r\n            remaining: requestsRemaining,\r\n          },\r\n          tokens: {\r\n            used: tokensUsed,\r\n            limit: limits.dailyTokenLimit,\r\n            remaining: tokensRemaining,\r\n          },\r\n        },\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn('Error checking Gemini usage limits:', error);\r\n      return { canMakeRequest: false };\r\n    }\r\n  }\r\n\r\n  static async checkWithMonitoring(\r\n    estimatedTokens: number,\r\n    limits: UsageLimits = this.DEFAULT_LIMITS\r\n  ): Promise<{ allowed: boolean; reason?: string; waitTime?: number }> {\r\n    const canMakeRequest = await APIMonitor.canMakeRequest('gemini', 1, estimatedTokens);\r\n\r\n    if (!canMakeRequest.allowed) {\r\n      return {\r\n        allowed: false,\r\n        reason: `API limit reached: ${canMakeRequest.reason}. Wait time: ${Math.ceil((canMakeRequest.waitTime ?? 0) / 1000 / 60)} minutes`,\r\n      };\r\n    }\r\n\r\n    return { allowed: true };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\middleware\\middlewareHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[728,731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[728,731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used. Allowed unused args must match /^_/u.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":6},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":57,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":57,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1284,1300],"text":"redirectFromPath != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1284,1300],"text":"redirectFromPath ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1284,1300],"text":"Boolean(redirectFromPath)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":129,"column":88,"nodeType":"Literal","messageId":"error","endLine":129,"endColumn":92,"suggestions":[{"messageId":"replace","fix":{"range":[3731,3735],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AuditLogger, SecurityEvent } from '@/lib/security/auditLogger';\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\n\ninterface RequestMetadata {\n  ip: string;\n  userAgent: string;\n  url: string;\n  method: string;\n}\n\ninterface SupabaseUser {\n  id: string;\n  email?: string;\n}\n\ninterface SupabaseProfile {\n  role?: string;\n}\n\ninterface LogAndRedirectParams {\n  req: NextRequest;\n  res: NextResponse;\n  requestMetadata: RequestMetadata;\n  reason: string;\n  userError?: { message?: string };\n}\n\ninterface LogSecurityEventParams {\n  event_type: SecurityEvent['event_type'];\n  ip_address: string;\n  user_agent: string;\n  details: Record<string, any>;\n  severity: SecurityEvent['severity'];\n  user_id?: string;\n  user_email?: string;\n}\n\ninterface LogSecurityEventAndRedirectParams {\n  req: NextRequest;\n  res: NextResponse;\n  logParams: LogSecurityEventParams;\n  redirectPath: string;\n  redirectFromPath?: string;\n}\n\nasync function logSecurityEventAndRedirect({\n  req,\n  res,\n  logParams,\n  redirectPath,\n  redirectFromPath,\n}: LogSecurityEventAndRedirectParams) {\n  await AuditLogger.logSecurityEvent(logParams);\n  const redirectUrl = req.nextUrl.clone();\n  redirectUrl.pathname = redirectPath;\n  if (redirectFromPath) {\n    redirectUrl.searchParams.set(`redirectedFrom`, redirectFromPath);\n  }\n  return NextResponse.redirect(redirectUrl);\n}\n\nasync function logAndRedirect({ req, res, requestMetadata, reason, userError }: LogAndRedirectParams) {\n  return logSecurityEventAndRedirect({\n    req,\n    res,\n    logParams: {\n      event_type: 'permission_denied',\n      ip_address: requestMetadata.ip,\n      user_agent: requestMetadata.userAgent,\n      details: {\n        attempted_url: requestMetadata.url,\n        reason,\n        error: userError?.message,\n      },\n      severity: 'warning',\n    },\n    redirectPath: '/login',\n    redirectFromPath: req.nextUrl.pathname\n  });\n}\n\ninterface LogAndRedirectDeniedParams {\n  req: NextRequest;\n  res: NextResponse;\n  requestMetadata: RequestMetadata;\n  user: SupabaseUser;\n  profile: SupabaseProfile | null;\n  profileQueryError?: { message?: string } | null; // Changed to allow null\n}\n\nasync function logAndRedirectDenied({ req, res, requestMetadata, user, profile, profileQueryError }: LogAndRedirectDeniedParams) {\n  return logSecurityEventAndRedirect({\n    req,\n    res,\n    logParams: {\n      event_type: 'permission_denied',\n      user_id: user.id,\n      user_email: user.email ?? undefined,\n      ip_address: requestMetadata.ip,\n      user_agent: requestMetadata.userAgent,\n      details: {\n        attempted_url: requestMetadata.url,\n        user_role: profile?.role ?? 'none',\n        reason: 'insufficient_privileges',\n        error: profileQueryError?.message,\n      },\n      severity: 'error',\n    },\n    redirectPath: '/access-denied'\n  });\n}\n\nexport async function protectAdminRoutes(req: NextRequest, res: NextResponse, requestMetadata: RequestMetadata) {\n  const supabase = createSupabaseMiddlewareClient(req, res);\n  const { data, error: userError } = await supabase.auth.getUser();\n  const user = data?.user;\n\n  if (userError || !user) {\n    return logAndRedirect({ req, res, requestMetadata, reason: 'no_session', userError: userError ?? undefined });\n  }\n  // Explicitly type the result of the Supabase query\n  const { data: profile, error: profileQueryError } = await supabase\n    .from('profiles')\n    .select('role')\n    .eq('id', user.id)\n    .single() as { data: SupabaseProfile | null; error: { message?: string } | null };\n  if (profileQueryError || (profile && profile.role !== 'admin')) {\n    return logAndRedirectDenied({ req, res, requestMetadata, user, profile: profile ?? null, profileQueryError: profileQueryError ?? undefined });\n  }\n  if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\n    await AuditLogger.logDataAccess({\n      userId: user.id,\n      userEmail: user.email ?? 'unknown',\n      resourceType: 'admin_panel',\n      resourceId: req.nextUrl.pathname,\n      action: req.method === 'GET' ? 'read' : 'admin_access',\n      request: {\n        ip: requestMetadata.ip,\n        userAgent: requestMetadata.userAgent,\n      },\n    });\n  }\n  return res;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\monitoring\\apiMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\bundleAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\databaseCache.ts","messages":[{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":73,"column":16,"nodeType":"Literal","messageId":"error","endLine":73,"endColumn":20,"suggestions":[{"messageId":"remove","fix":{"range":[2523,2527],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[2523,2527],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3672,3675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3672,3675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":116,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":116,"endColumn":62}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Database Query Optimization and Caching\n * Implements Next.js unstable_cache for optimal performance\n */\n\nimport { unstable_cache } from 'next/cache';\nimport { supabaseAdmin, FoodTruckService } from '@/lib/supabase';\nimport type { FoodTruck } from '@/lib/types';\n\n// Cache configuration\nconst CACHE_CONFIG = {\n  // Short-term cache for frequently changing data\n  SHORT_TTL: 60 * 5, // 5 minutes\n  // Medium-term cache for semi-static data\n  MEDIUM_TTL: 60 * 30, // 30 minutes\n  // Long-term cache for static data\n  LONG_TTL: 60 * 60 * 24, // 24 hours\n} as const;\n\n/**\n * Cached food truck queries with optimized database access\n */\nexport const CachedFoodTruckService = {\n  /**\n   * Get all food trucks with caching\n   * Cache for 30 minutes since truck data changes moderately\n   */\n  getAllTrucksCached : unstable_cache(\n    async (): Promise<{ trucks: FoodTruck[]; count: number }> => {\n      console.info('CachedFoodTruckService: Cache miss - fetching all trucks from database');\n      const result = await FoodTruckService.getAllTrucks();\n      if ('error' in result) {\n        throw new Error(`Failed to fetch all trucks: ${result.error}`);\n      }\n      return { trucks: result.trucks, count: result.total };\n    },\n    ['all-trucks'],\n    {\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\n      tags: ['food-trucks', 'all-trucks']\n    }\n  ),\n\n  /**\n   * Get trucks by location with caching\n   * Cache for 5 minutes since location-based queries are time-sensitive\n   */\n  getTrucksByLocationCached : unstable_cache(\n    async (lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> => {\n      console.info(`CachedFoodTruckService: Cache miss - fetching trucks near ${lat},${lng} (${radiusKm}km)`);\n      const result = await FoodTruckService.getTrucksByLocation(lat, lng, radiusKm);\n      if ('error' in result) {\n        throw new Error(`Failed to fetch trucks by location: ${result.error}`);\n      }\n      return result as FoodTruck[];\n    },\n    ['trucks-by-location'],\n    {\n      revalidate: CACHE_CONFIG.SHORT_TTL,\n      tags: ['food-trucks', 'location-search']\n    }\n  ),\n\n  /**\n   * Get truck by ID with caching\n   * Cache for 30 minutes since individual truck data is relatively stable\n   */\n  getTruckByIdCached : unstable_cache(\n    async (id: string): Promise<FoodTruck | null> => {\n      console.info(`CachedFoodTruckService: Cache miss - fetching truck ${id} from database`);\n      const result = await FoodTruckService.getTruckById(id);\n      if ('error' in result) {\n        return null;\n      }\n      return result as FoodTruck;\n    },\n    ['truck-by-id'],\n    {\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\n      tags: ['food-trucks', 'truck-details']\n    }\n  ),\n\n  /**\n   * Search trucks with caching\n   * Cache for 5 minutes since search results should be relatively fresh\n   */\n  searchTrucksCached : unstable_cache(\n    async (query: string, filters?: {\n      cuisine?: string;\n      openNow?: boolean;\n      lat?: number;\n      lng?: number;\n      radius?: number;\n    }): Promise<FoodTruck[]> => {\n      console.info(`CachedFoodTruckService: Cache miss - searching trucks for \"${query}\"`);\n      \n      if (supabaseAdmin == undefined) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      let dbQuery = supabaseAdmin\n        .from('food_trucks')\n        .select('*')\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%,cuisine_type.cs.{${query}}`);\n\n      // Apply filters\n      if (filters?.cuisine != undefined && filters.cuisine !== '') {\n        dbQuery = dbQuery.contains('cuisine_type', [filters.cuisine]);\n      }\n\n      const { data, error }: { data: FoodTruck[] | null; error: any } = await dbQuery.limit(50);\r\n      const trucks: FoodTruck[] = data ?? [];\n\n      if (error != undefined) {\n        throw new Error(`Search query failed: ${error.message}`);\n      }\n\n      let results: FoodTruck[] = trucks ?? [];\n\n      // Apply location filter if provided\n      if (filters?.lat != undefined && filters?.lng != undefined && filters?.radius != undefined) {\n        results = results.filter((truck: FoodTruck): truck is FoodTruck => {\n          if (truck.current_location?.lat == undefined || truck.current_location?.lng == undefined) {\n            return false;\n          }\n          const distance = calculateDistance(\n            filters.lat!, // Assert as number, as it's checked by the outer if condition\n            filters.lng!, // Assert as number, as it's checked by the outer if condition\n            truck.current_location.lat,\n            truck.current_location.lng\n          );\n          return distance <= (filters.radius ?? 10);\n        });\n      }\n\n      // Apply openNow filter if provided\n      if (filters?.openNow === true) {\n        const now = new Date();\n        const currentDay = now.toLocaleDateString('en-US', { weekday: 'short' }).toLowerCase(); // 'mon', 'tue', etc.\n        const currentTime = now.getHours() * 100 + now.getMinutes(); // HHMM format\n\n        results = results.filter((truck: FoodTruck): truck is FoodTruck => {\n          const hours = truck.operating_hours?.[currentDay as keyof typeof truck.operating_hours] as { closed?: boolean; open?: string; close?: string } | undefined;\n          if (hours == undefined || hours.closed === true) return false;\n\n          const openTime = parseTimeString(hours.open ?? '');\n          const closeTime = parseTimeString(hours.close ?? '');\n\n          return currentTime >= openTime && currentTime <= closeTime;\n        });\n      }\n\n      return results;\n    },\n    ['search-trucks'],\n    {\n      revalidate: CACHE_CONFIG.SHORT_TTL,\n      tags: ['food-trucks', 'search']\n    }\n  ),\n\n  /**\n   * Get data quality statistics with caching\n   * Cache for 24 hours since quality stats change slowly\n   */\n  getDataQualityStatsCached : unstable_cache(\n    async (): Promise<{\n      averageScore: number;\n      distribution: Record<string, number>;\n      totalTrucks: number;\n    }> => {\n      console.info('CachedFoodTruckService: Cache miss - calculating data quality stats');\n      \n      if (supabaseAdmin == undefined) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      const { data: trucks, error } = await supabaseAdmin\n        .from('food_trucks')\n        .select('data_quality_score');\n\n      if (error) {\n        throw new Error(`Quality stats query failed: ${error.message}`);\n      }\n\n      const scores = trucks == undefined ? [] : trucks.map((t: { data_quality_score?: number }) => t.data_quality_score ?? 0);\n      const averageScore = scores.length > 0\n        ? scores.reduce((sum: number, score: number) => sum + score, 0) / scores.length\n        : 0;\n\n      const distribution = {\n        high: scores.filter((s: number) => s >= 0.8).length,\n        medium: scores.filter((s: number) => s >= 0.6 && s < 0.8).length,\n        low: scores.filter((s: number) => s < 0.6).length\n      };\n\n      return {\n        averageScore: Math.round(averageScore * 100) / 100,\n        distribution,\n        totalTrucks: scores.length\n      };\n    },\n    ['data-quality-stats'],\n    {\n      revalidate: CACHE_CONFIG.LONG_TTL,\n      tags: ['food-trucks', 'data-quality']\n    }\n  ),\n};\n\n/**\n * Cache invalidation utilities\n */\nexport const CacheManager = {\n  /**\n   * Invalidate all food truck related caches\n   */\n  async invalidateAllFoodTruckCaches(): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag('food-trucks');\n      console.info('CacheManager: Invalidated all food truck caches');\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate caches:', error);\n    }\n  },\n\n  /**\n   * Invalidate specific truck cache\n   */\n  async invalidateTruckCache(truckId: string): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag(`truck-${truckId}`);\n      revalidateTag('food-trucks'); // Also invalidate general caches\n      console.info(`CacheManager: Invalidated cache for truck ${truckId}`);\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate truck cache:', error);\n    }\n  },\n\n  /**\n   * Invalidate search and location caches\n   */\n  async invalidateSearchCaches(): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag('search');\n      revalidateTag('location-search');\n      console.info('CacheManager: Invalidated search caches');\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate search caches:', error);\n    }\n  },\n};\n\n/**\n * Utility functions\n */\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nfunction parseTimeString(timeStr: string): number {\n  if (timeStr == undefined || timeStr === '') return 0;\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  return hours * 100 + (minutes ?? 0);\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\webVitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\pipelineHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipeline\\scrapingProcessor.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[564,592],"text":"((scrapeResult.data?.markdown) == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[565,592],"text":"((scrapeResult.data?.markdown) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[564,592],"text":"(!Boolean((scrapeResult.data?.markdown)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":56,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":56,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":76,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":76,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2899,2914],"text":"job.target_url == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2900,2914],"text":"(job.target_url ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2899,2914],"text":"!Boolean(job.target_url)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { ScrapingJobService } from '@/lib/supabase';\r\nimport { ExtractedFoodTruckDetails } from '../types';\r\nimport {\r\n  validateInputAndPrepare,\r\n  buildTruckDataSchema,\r\n  handleDuplicateCheck,\r\n  finalizeJobStatus,\r\n} from './pipelineHelpers';\r\n\r\nasync function handleScraping(targetUrl: string, jobId: string) {\r\n  console.info(`Starting scrape for ${targetUrl}`);\r\n  const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(targetUrl);\r\n\r\n  if (!scrapeResult.success || !scrapeResult.data?.markdown) {\r\n    const error = scrapeResult.error ?? 'Scraping failed or markdown content not found';\r\n    await handleJobFailure(jobId, error);\r\n    throw new Error(error);\r\n  }\r\n\r\n  console.info(`Scraping successful for ${targetUrl}, proceeding to Gemini extraction.`);\r\n  return scrapeResult.data;\r\n}\r\n\r\nasync function handleGeminiExtraction(markdown: string, sourceUrl: string, jobId: string) {\r\n  const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(markdown, sourceUrl);\r\n\r\n  if (!geminiResult.success || !geminiResult.data) {\r\n    const error = geminiResult.error ?? 'Gemini data extraction failed';\r\n    await handleJobFailure(jobId, error);\r\n    throw new Error(error);\r\n  }\r\n\r\n  console.info(`Gemini extraction successful for ${sourceUrl}.`);\r\n  return geminiResult.data;\r\n}\r\n\r\nasync function handleJobFailure(jobId: string, error: string) {\r\n  console.error(`Job ${jobId} failed:`, error);\r\n  try {\r\n    const currentJob = await ScrapingJobService.getJobsByStatus('all').then(jobs =>\r\n      jobs.find(j => j.id === jobId)\r\n    );\r\n    if (currentJob && currentJob.status !== 'failed') {\r\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', { errors: [error] });\r\n    }\r\n  } catch (statusUpdateError) {\r\n    console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\r\n  }\r\n}\r\n\r\nasync function handleRetryLogic(jobId: string) {\r\n  try {\r\n    const job = await ScrapingJobService.incrementRetryCount(jobId);\r\n    if (job && typeof job.retry_count === 'number' && typeof job.max_retries === 'number') {\r\n      if (job.retry_count < job.max_retries) {\r\n        console.info(`Retrying job ${jobId} (attempt ${job.retry_count}/${job.max_retries})`);\r\n        setTimeout(() => {\r\n          void processScrapingJob(jobId);\r\n        }, 5000);\r\n      } else {\r\n        console.warn(`Job ${jobId} reached max retries (${job.max_retries}).`);\r\n      }\r\n    } else {\r\n      console.error(`Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`);\r\n    }\r\n  } catch (retryError) {\r\n    console.error(`Error during retry logic for job ${jobId}:`, retryError);\r\n  }\r\n}\r\n\r\nexport async function processScrapingJob(jobId: string): Promise<void> {\r\n  try {\r\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\r\n    if (!job.target_url) {\r\n      throw new Error('No target URL specified');\r\n    }\r\n\r\n    const scrapeData = await handleScraping(job.target_url, jobId);\r\n    const extractedData = await handleGeminiExtraction(scrapeData.markdown, scrapeData.source_url ?? job.target_url, jobId);\r\n\r\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\r\n      data_collected: extractedData as unknown as Record<string, unknown>,\r\n      completed_at: new Date().toISOString(),\r\n    });\r\n\r\n    await createOrUpdateFoodTruck(jobId, extractedData, scrapeData.source_url ?? job.target_url);\r\n\r\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\r\n  } catch {\r\n    await handleRetryLogic(jobId);\r\n  }\r\n}\r\n\r\nexport async function createOrUpdateFoodTruck(\r\n  jobId: string,\r\n  extractedTruckData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n) {\r\n  try {\r\n    const validation = await validateInputAndPrepare(jobId, extractedTruckData, sourceUrl);\r\n    if (!validation.isValid) {\r\n      return;\r\n    }\r\n\r\n    const truckData = buildTruckDataSchema(extractedTruckData, sourceUrl, validation.name);\r\n    const truck = await handleDuplicateCheck(jobId, truckData, validation.name);\r\n    await finalizeJobStatus(jobId, truck, sourceUrl);\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n    console.error(`Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`, error);\r\n    await handleJobFailure(jobId, `Food truck data processing/saving failed: ${errorMessage}`);\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\auditLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\rateLimiter.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":276,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":276,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8196,8213],"text":"result.retryAfter != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8196,8213],"text":"result.retryAfter ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8196,8213],"text":"Boolean(result.retryAfter)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SOTA Rate Limiting Implementation\r\n * Prevents brute force attacks and API abuse with intelligent rate limiting\r\n */\r\n\r\nimport { NextResponse } from 'next/server'; // Added import for NextResponse\r\n\r\ninterface RateLimitEntry {\r\n  count: number;\r\n  resetTime: number;\r\n  blocked: boolean;\r\n  blockUntil?: number;\r\n}\r\n\r\n// In-memory rate limit store (in production, use Redis)\r\nconst rateLimitStore = new Map<string, RateLimitEntry>();\r\n\r\n// Rate limit configurations for different endpoints\r\nexport const RATE_LIMIT_CONFIGS = {\r\n  // Authentication endpoints - strict limits\r\n  auth: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    maxRequests: 5, // 5 attempts per 15 minutes\r\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\r\n    skipSuccessfulRequests: true\r\n  },\r\n  // API endpoints - moderate limits\r\n  api: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 60, // 60 requests per minute\r\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\r\n    skipSuccessfulRequests: false\r\n  },\r\n  // Admin endpoints - very strict limits\r\n  admin: {\r\n    windowMs: 60 * 1000, // 1 minute\r\n    maxRequests: 20, // 20 requests per minute\r\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\r\n    skipSuccessfulRequests: false\r\n  }\r\n} as const;\r\n\r\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\r\n\r\n/**\r\n * Rate Limiter Service\r\n */\r\nexport class RateLimiter {\r\n  // Extract logic from checkRateLimit to reduce function size\r\n  private static isBlocked(entry: RateLimitEntry | undefined, now: number): boolean {\r\n    return Boolean(entry && entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil);\r\n  }\r\n\r\n  private static resetEntry(entry: RateLimitEntry, now: number, config: typeof RATE_LIMIT_CONFIGS[RateLimitType]): void {\r\n    entry.count = 0;\r\n    entry.resetTime = now + config.windowMs;\r\n    entry.blocked = false;\r\n    entry.blockUntil = undefined;\r\n  }\r\n\r\n  /**\r\n   * Check if request should be rate limited\r\n   */\r\n  static checkRateLimit(\r\n    identifier: string,\r\n    type: RateLimitType = 'api'\r\n  ): {\r\n    allowed: boolean;\r\n    remaining: number;\r\n    resetTime: number;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    this.cleanupExpiredEntries();\r\n    let entry = rateLimitStore.get(key);\r\n    if (!entry) {\r\n      entry = { count: 0, resetTime: now + config.windowMs, blocked: false };\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n    if (this.isBlocked(entry, now)) {\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil((entry.blockUntil! - now) / 1000)\r\n      };\r\n    }\r\n    if (now >= entry.resetTime) {\r\n      this.resetEntry(entry, now, config);\r\n    }\r\n    if (entry.count >= config.maxRequests) {\r\n      entry.blocked = true;\r\n      entry.blockUntil = now + config.blockDurationMs;\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        retryAfter: Math.ceil(config.blockDurationMs / 1000)\r\n      };\r\n    }\r\n    entry.count++;\r\n    rateLimitStore.set(key, entry);\r\n    return {\r\n      allowed: true,\r\n      remaining: config.maxRequests - entry.count,\r\n      resetTime: entry.resetTime\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Record successful request (for auth endpoints)\r\n   */\r\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    if (!config.skipSuccessfulRequests) return;\r\n    \r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n    \r\n    if (entry) {\r\n      // Reset counter on successful auth\r\n      entry.count = 0;\r\n      entry.blocked = false;\r\n      entry.blockUntil = undefined;\r\n      rateLimitStore.set(key, entry);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get rate limit status without incrementing\r\n   */\r\n  static getStatus(\r\n    identifier: string,\r\n    type: RateLimitType = 'api'\r\n  ): {\r\n    remaining: number;\r\n    resetTime: number;\r\n    blocked: boolean;\r\n    retryAfter?: number;\r\n  } {\r\n    const config = RATE_LIMIT_CONFIGS[type];\r\n    const now = Date.now();\r\n    const key = `${type}:${identifier}`;\r\n    const entry = rateLimitStore.get(key);\r\n    \r\n    if (!entry) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false\r\n      };\r\n    }\r\n    \r\n    // Check if blocked\r\n    if (entry.blocked && (entry.blockUntil != undefined) && now < entry.blockUntil) { // Changed != undefined to != null\r\n      return {\r\n        remaining: 0,\r\n        resetTime: entry.resetTime,\r\n        blocked: true,\r\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000)\r\n      };\r\n    }\r\n    \r\n    // Check if window expired\r\n    if (now >= entry.resetTime) {\r\n      return {\r\n        remaining: config.maxRequests,\r\n        resetTime: now + config.windowMs,\r\n        blocked: false\r\n      };\r\n    }\r\n    \r\n    return {\r\n      remaining: Math.max(0, config.maxRequests - entry.count),\r\n      resetTime: entry.resetTime,\r\n      blocked: false\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Clean up expired entries to prevent memory leaks\r\n   */\r\n  private static cleanupExpiredEntries(): void {\r\n    const now = Date.now();\r\n    \r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      // Remove entries that are expired and not blocked\r\n      if (now >= entry.resetTime && (!entry.blocked || (entry.blockUntil == undefined) || now >= entry.blockUntil)) { // Changed == undefined to == null\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Clear all rate limit data for an identifier\r\n   */\r\n  static clearLimits(identifier: string, type?: RateLimitType): void {\r\n    if (type) {\r\n      const key = `${type}:${identifier}`;\r\n      rateLimitStore.delete(key);\r\n    } else {\r\n      // Clear all types for this identifier\r\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS) as RateLimitType[]) { // Added type assertion\r\n        const key = `${limitType}:${identifier}`;\r\n        rateLimitStore.delete(key);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get rate limit statistics\r\n   */\r\n  static getStats(): {\r\n    totalEntries: number;\r\n    blockedEntries: number;\r\n    entriesByType: Record<string, number>;\r\n  } {\r\n    const stats = {\r\n      totalEntries: rateLimitStore.size,\r\n      blockedEntries: 0,\r\n      entriesByType: {} as Record<string, number>\r\n    };\r\n    \r\n    for (const [key, entry] of rateLimitStore.entries()) {\r\n      const type = key.split(':')[0];\r\n      stats.entriesByType[type] = (stats.entriesByType[type] ?? 0) + 1;\r\n      \r\n      if (entry.blocked) {\r\n        stats.blockedEntries++;\r\n      }\r\n    }\r\n    \r\n    return stats;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility function to get client identifier from request\r\n */\r\nexport function getClientIdentifier(request: Request): string {\r\n  // Try to get IP address from various headers\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const realIp = request.headers.get('x-real-ip');\r\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\r\n  \r\n  // Use the first available IP\r\n  const ip = (forwarded?.split(',')[0]?.trim() ?? realIp ?? cfConnectingIp) ?? 'unknown';\r\n  \r\n  // Include user agent for more specific identification\r\n  const userAgent = request.headers.get('user-agent') ?? 'unknown';\r\n  \r\n  // Create a hash of IP + User Agent for better identification\r\n  return `${ip}:${userAgent.slice(0, 50)}`;\r\n}\r\n\r\n/**\r\n * Rate limiting middleware for API routes\r\n */\r\nexport function withRateLimit(\r\n  handler: (request: Request) => Promise<Response>,\r\n  type: RateLimitType = 'api'\r\n) {\r\n  return async (request: Request): Promise<Response> => {\r\n    const identifier = getClientIdentifier(request);\r\n    const result = RateLimiter.checkRateLimit(identifier, type);\r\n    \r\n    if (result.allowed === false) {\r\n      const headers = new Headers({\r\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\r\n        'X-RateLimit-Remaining': '0',\r\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\r\n      });\r\n      \r\n      if (result.retryAfter) {\r\n        headers.set('Retry-After', result.retryAfter.toString());\r\n      }\r\n      \r\n      return new NextResponse('Too Many Requests', { status: 429, headers });\r\n    }\r\n    \r\n    const response = await handler(request);\r\n    \r\n    // Update headers on successful requests if not skipped\r\n    if (RATE_LIMIT_CONFIGS[type].skipSuccessfulRequests === false) {\r\n      const status = RateLimiter.getStatus(identifier, type);\r\n      response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\r\n      response.headers.set('X-RateLimit-Remaining', status.remaining.toString());\r\n      response.headers.set('X-RateLimit-Reset', new Date(status.resetTime).toISOString());\r\n    }\r\n    \r\n    return response;\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":14,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":14,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[337,349],"text":"supabaseUrl == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[338,349],"text":"(supabaseUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[337,349],"text":"!Boolean(supabaseUrl)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":18,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":18,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[436,452],"text":"supabaseAnonKey == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[437,452],"text":"(supabaseAnonKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[436,452],"text":"!Boolean(supabaseAnonKey)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":25,"column":30,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":25,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[712,730],"text":"(supabaseServiceKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[712,730],"text":"(supabaseServiceKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[712,730],"text":"(Boolean(supabaseServiceKey))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":101,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":101,"endColumn":43},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":156,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":156,"endColumn":16},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":288,"column":34,"nodeType":null,"endLine":288,"endColumn":37,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[9266,9269],"text":"!="}}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":291,"column":38,"nodeType":null,"endLine":291,"endColumn":41,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[9438,9441],"text":"=="}}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":665,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":665,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":670,"column":8,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":670,"endColumn":26},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":676,"column":31,"nodeType":null,"endLine":676,"endColumn":34,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[22010,22013],"text":"!="}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":684,"column":19,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":684,"endColumn":24},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":694,"column":10,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":694,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[22623,22628],"text":"(Boolean(truck))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `FoodTruck`.","line":698,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":698,"endColumn":55},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":796,"column":14,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":796,"endColumn":32,"fix":{"range":[25736,25750],"text":""}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  createClient,\n  type PostgrestSingleResponse,\n  type PostgrestResponse,\n  type PostgrestError,\n} from '@supabase/supabase-js';\n\n\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\n}\n\nif (!supabaseAnonKey) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Only create admin client on server side where service key is available\nexport const supabaseAdmin = supabaseServiceKey\n  ? createClient(supabaseUrl, supabaseServiceKey)\n  : undefined;\n\n// Database types\nimport {\n  MenuCategory,\n  MenuItem,\n} from './types';\n\nexport interface FoodTruckLocation {\n  lat: number;\n  lng: number;\n  address?: string;\n  timestamp: string;\n}\n\n// Re-exporting from types.ts to ensure consistency\n\nimport { FoodTruckSchema } from './types';\n\nexport interface FoodTruck extends FoodTruckSchema {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  is_active?: boolean; // This property is in lib/types.ts but not in lib/supabase.ts\n  // Add any other properties that are in the database but not in FoodTruckSchema\n  // For example, if the database has 'exact_location' or 'city_location'\n  exact_location?: FoodTruckLocation;\n  city_location?: FoodTruckLocation;\n}\n\nexport interface ScrapingJob {\n  id: string;\n  job_type: string;\n  target_url?: string;\n  target_handle?: string;\n  platform?: string;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  priority: number;\n  scheduled_at: string;\n  started_at?: string;\n  completed_at?: string;\n  data_collected?: Record<string, unknown>;\n  errors?: string[];\n  retry_count: number;\n  max_retries: number;\n  created_at: string;\n}\n\nexport interface DataProcessingQueue {\n  id: string;\n  truck_id?: string;\n  processing_type: string;\n  raw_data: Record<string, unknown>;\n  processed_data?: Record<string, unknown>;\n  gemini_tokens_used: number;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  priority: number;\n  created_at: string;\n  processed_at?: string;\n}\n\nexport interface ApiUsage {\n  id: string;\n  service_name: string;\n  usage_date: string;\n  requests_count: number;\n  tokens_used: number;\n}\n\n// Food truck operations\nfunction buildMenuByTruck(menuItems: RawMenuItemFromDB[]): Record<string, RawMenuItemFromDB[]> {\n  const menuByTruck: Record<string, RawMenuItemFromDB[]> = {};\n  for (const item of menuItems) {\n    if (typeof item.food_truck_id === 'string' && item.food_truck_id.trim() !== '') {\n      if (!menuByTruck[item.food_truck_id]) {\n        menuByTruck[item.food_truck_id] = [];\n      }\n      menuByTruck[item.food_truck_id].push(item);\n    }\n  }\n  return menuByTruck;\n}\n\nfunction handleSupabaseError(error: unknown, context: string) {\n  // Log technical details for developers\n  console.warn(`Error in ${context}:`, error);\n}\n\nexport const FoodTruckService = {\n  async getAllTrucks(limit = 50, offset = 0): Promise<{ trucks: FoodTruck[]; total: number; error?: string }> {\n    try {\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*', { count: 'exact' })\n        .order('updated_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n      if (error != undefined) throw error;\n      const trucks: FoodTruck[] = (data ?? []).map((t: FoodTruck) => normalizeTruckLocation(t));\n      if (trucks.length === 0) return { trucks: [], total: count ?? 0 };\n      const truckIds = trucks.map((t: FoodTruck) => t.id);\n      let menuItems: RawMenuItemFromDB[] = [];\n      try {\n        if (truckIds.length > 0) {\n          const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> =\n            await supabase.from('menu_items').select('*').in('food_truck_id', truckIds);\n          if (menuError) throw new Error(menuError.message);\n          menuItems = Array.isArray(items) ? items : [];\n        }\n      } catch (menuError) {\n        handleSupabaseError(menuError, 'getAllTrucks:menu_items');\n      }\n      const menuByTruck = buildMenuByTruck(menuItems);\n      for (const truck of trucks) {\n      truck.menu = groupMenuItems(menuByTruck[truck.id] ?? []);\n      }\n      return { trucks, total: count ?? 0 };\n    } catch (error) {\n      handleSupabaseError(error, 'getAllTrucks');\n      return { trucks: [], total: 0, error: \"That didn't work, please try again later.\" };\n    }\n  },\n  async getTruckById(id: string): Promise<FoodTruck | { error: string }> {\n    try {\n      const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*')\n        .eq('id', id)\n        .single();\n      if (error != undefined) throw error;\n      if (!data) {\n        return { error: \"That didn't work, please try again later.\" };\n      }\n      const truck: FoodTruck = normalizeTruckLocation(data);\n      const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> = await supabase\n        .from('menu_items')\n        .select('*')\n        .eq('food_truck_id', id);\n      if (menuError) throw menuError;\n      truck.menu = groupMenuItems(Array.isArray(items) ? items : []);\n      return truck;\n    } catch (error) {\n      handleSupabaseError(error, 'getTruckById');\n      return { error: \"That didn't work, please try again later.\" };\n    }\n  },\n\n  async getTrucksByLocation(lat: number, lng: number, radiusKm: number): Promise<FoodTruck[] | { error: string }> {\n    try {\n      const { trucks } = await FoodTruckService.getAllTrucks();\n      const nearbyTrucks = trucks.filter((truck: FoodTruck) => {\n        if (\n          truck.current_location == undefined ||\n          typeof truck.current_location.lat !== 'number' ||\n          typeof truck.current_location.lng !== 'number'\n        ) {\n          return false;\n        }\n        const distance = calculateDistance(\n          lat,\n          lng,\n          truck.current_location.lat,\n          truck.current_location.lng,\n        );\n        return distance <= radiusKm;\n      });\n      return nearbyTrucks;\n    } catch (error: unknown) {\n      handleSupabaseError(error, 'getTrucksByLocation');\n      return { error: \"That didn't work, please try again later.\" };\n    }\n  },\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const menuData = truckData.menu;\n    const truckDataWithoutMenu = { ...truckData };\n    delete truckDataWithoutMenu.menu;\n    const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .insert([truckDataWithoutMenu])\n      .select()\n      .single();\n    if (error) {\n      handleSupabaseError(error, 'createTruck');\n      return { error: \"Failed to create truck.\" };\n    }\n    await insertMenuItems(truck.id, menuData);\n    return truck;\n  },\n\n  async updateTruck(id: string, updates: Partial<FoodTruck>): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const menuData = updates.menu;\n    const updatesWithoutMenu = { ...updates };\n    delete updatesWithoutMenu.menu;\n    const truckResult = await updateTruckData(id, updatesWithoutMenu);\n    if ('error' in truckResult) {\n      return truckResult;\n    }\n    if (menuData != undefined) {\n      await updateTruckMenu(id, menuData);\n    }\n    return truckResult;\n  },\n\n  async getDataQualityStats(): Promise<{\n    total_trucks: number;\n    avg_quality_score: number;\n    high_quality_count: number;\n    medium_quality_count: number;\n    low_quality_count: number;\n    verified_count: number;\n    pending_count: number;\n    flagged_count: number;\n  }> {\n    try {\n      const {\n        data,\n        error,\n      }: PostgrestSingleResponse<{\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      }> = await supabase.rpc('get_data_quality_stats').single();\n      if (error) throw error;\n      return data as {\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      };\n    } catch (error: unknown) {\n      console.warn('Error fetching data quality stats:', error);\n      return {\n        total_trucks: 0,\n        avg_quality_score: 0,\n        high_quality_count: 0,\n        medium_quality_count: 0,\n        low_quality_count: 0,\n        verified_count: 0,\n        pending_count: 0,\n        flagged_count: 0,\n      };\n    }\n  },\n};\n\n// Helper functions to reduce cognitive complexity\n  const isMenuCategory = (obj: unknown): obj is MenuCategory =>\n  typeof obj === 'object' && obj !== undefined && 'name' in obj && 'items' in obj && Array.isArray(obj.items);\n\nconst isMenuItem = (obj: unknown): obj is MenuItem => {\n  if (typeof obj !== 'object' || obj === undefined) return false;\n  const item = obj as Record<string, unknown>;\n  return (\n    typeof item.name === 'string' &&\n    (item.description === undefined || typeof item.description === 'string') &&\n    (item.price === undefined || typeof item.price === 'number') &&\n    (item.dietary_tags === undefined || (Array.isArray(item.dietary_tags) && item.dietary_tags.every(tag => typeof tag === 'string')))\n  );\n};\n\nasync function updateTruckData(\n  id: string,\n  updatesWithoutMenu: Partial<FoodTruck>,\n): Promise<FoodTruck | { error: string }> {\n  if (!supabaseAdmin) {\n    return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n  }\n\n  const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n    .from('food_trucks')\n    .update(updatesWithoutMenu)\n    .eq('id', id)\n    .select()\n    .single();\n\n  if (error) {\n    handleSupabaseError(error, 'updateTruckData');\n    return { error: \"Failed to update truck data.\" };\n  }\n  return truck;\n}\n\nasync function updateTruckMenu(id: string, menuData: MenuCategory[] | unknown[]): Promise<void> {\n  if (!supabaseAdmin) {\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n  }\n\n  // Delete existing menu items\n  const { error: deleteError } = await supabaseAdmin\n    .from('menu_items')\n    .delete()\n    .eq('food_truck_id', id);\n\n  if (deleteError) {\n    console.error('Error deleting existing menu items for truck', id, deleteError);\n  }\n\n  // Insert new menu items if they exist\n  if (menuData != undefined && menuData.length > 0) {\n    const menuItems = menuData.flatMap((category: unknown) => {\n      if (!isMenuCategory(category)) {\n        console.warn('Skipping invalid category in updateTruckMenu:', category);\n        return [];\n      }\n\n      return (category.items ?? []).map((item: unknown) => {\n        if (!isMenuItem(item)) {\n          console.warn('Skipping invalid menu item in updateTruckMenu:', item);\n          // Return a default valid MenuItem or skip based on requirements\n          return {\n            food_truck_id: id,\n            category: category.name ?? 'Uncategorized',\n            name: 'Unknown Item',\n            description: undefined,\n            price: undefined,\n            dietary_tags: [],\n          };\n        }\n\n        return {\n          food_truck_id: id,\n          category: category.name ?? 'Uncategorized',\n          name: item.name ?? 'Unknown Item',\n          description: item.description ?? undefined,\n          price: typeof item.price === 'number' ? item.price : undefined,\n          dietary_tags: Array.isArray(item.dietary_tags) ? item.dietary_tags : [],\n        };\n      });\n    });\n\n    if (menuItems.length > 0) {\n      const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\n\n      if (menuError) {\n        console.error('Error inserting updated menu items for truck', id, menuError);\n      }\n    }\n  }\n}\n\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6371;\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\n  const dLon = ((lon2 - lon1) * Math.PI) / 180;\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos((lat1 * Math.PI) / 180) *\n      Math.cos((lat2 * Math.PI) / 180) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance;\n}\n\n// Define a helper type for items coming from the DB, which might include a category field\ninterface RawMenuItemFromDB {\n  name: string;\n  description?: string;\n  price?: number;\n  dietary_tags?: string[];\n  category?: string; // This field is expected from the DB query\n  // Potentially other fields like id, food_truck_id, etc.\n  [key: string]: unknown; // Allow other properties from DB select *\n}\n\nfunction groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\n  const byCategory: Record<string, MenuItem[]> = {}; // Stores processed MenuItems\n  for (const rawItem of rawItems) {\n    const categoryName: string = rawItem.category ?? 'Uncategorized';\n    byCategory[categoryName] ??= [];\n    // Construct a MenuItem conforming to the MenuItem interface (no 'category' property)\n    const menuItem: MenuItem = {\n      name: rawItem.name,\n    // Use nullish coalescing to convert null from DB to undefined for the MenuItem type\n      description: rawItem.description ?? undefined,\n      price: rawItem.price ?? undefined,\n      dietary_tags: rawItem.dietary_tags as string[] ?? [], // Explicitly cast to string[]\n    };\n    byCategory[categoryName].push(menuItem);\n  }\n  // Map to MenuCategory structure { name: string, items: MenuItem[] }\nreturn Object.entries(byCategory).map(([categoryName, itemsList]: [string, MenuItem[]]) => ({\n  name: categoryName,\n  items: itemsList,\n}));\n}\n\n// Remove redundant type constituent in normalizeTruckLocation\nfunction normalizeTruckLocation(truck: FoodTruck): FoodTruck {\n  const fallback: FoodTruckLocation = {\n    lat: 0,\n    lng: 0,\n    address: 'Unknown',\n    timestamp: new Date().toISOString(),\n  };\n  const loc = truck.exact_location ?? truck.current_location ?? truck.city_location ?? {};\n  const lat = typeof loc.lat === 'number' ? loc.lat : 0;\n  const lng = typeof loc.lng === 'number' ? loc.lng : 0;\n  const address = loc.address;\n  const timestamp = loc.timestamp;\n\n  truck.current_location =\n    lat === 0 || lng === 0\n      ? { ...fallback, address: address ?? fallback.address }\n      : {\n          lat,\n          lng,\n          address: address ?? fallback.address,\n          timestamp: timestamp ?? fallback.timestamp,\n        };\n  return truck;\n}\n\nexport const ScrapingJobService = {\n  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .insert([\n        {\n          ...jobData,\n          status: 'pending',\n          retry_count: 0,\n          max_retries: 3,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getJobsByStatus(status: string): Promise<ScrapingJob[]> {\n    try {\n      const query = supabase.from('scraping_jobs').select('*');\n\n      const { data, error }: PostgrestResponse<ScrapingJob> = await (status === 'all'\n        ? query\n        : query.eq('status', status))\n        .order('priority', { ascending: false })\n        .order('scheduled_at', { ascending: true });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs:', error);\n      return [];\n    }\n  },\n  async updateJobStatus(\n    id: string,\n    status: string,\n    updates: Partial<ScrapingJob> = {},\n  ): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({\n        status,\n        ...updates,\n        ...(status === 'running' && { started_at: new Date().toISOString() }),\n        ...(status === 'completed' && { completed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    if (error) throw error;\n    return data;\n  },\n  async incrementRetryCount(id: string): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const {\n      data: current,\n      error: fetchError,\n    }: PostgrestSingleResponse<Pick<ScrapingJob, 'retry_count'>> = await supabaseAdmin\n      .from('scraping_jobs')\n      .select('retry_count')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) throw fetchError;\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({ retry_count: (current?.retry_count ?? 0) + 1 })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n  async getAllJobs(limit = 50, offset = 0): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .order('priority', { ascending: false })\n        .order('scheduled_at', { ascending: true })\n        .range(offset, offset + limit - 1);\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs:', error);\n      return [];\n    }\n  },\n\n  async getJobsFromDate(date: Date): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .gte('created_at', date.toISOString())\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs from date:', error);\n      return [];\n    }\n  },\n};\n\nexport const DataProcessingService = {\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .insert([\n        {\n          ...queueData,\n          status: 'pending',\n          gemini_tokens_used: 0,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getNextQueueItem(): Promise<DataProcessingQueue | undefined> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .select('*')\n      .eq('status', 'pending')\n      .order('priority', { ascending: false })\n      .order('created_at', { ascending: true })\n      .limit(1)\n      .single();\n\n    if (error && String(error.code) !== 'PGRST116') throw error;\n    return data ?? undefined;\n  },\n\n  async getQueueByStatus(status: string): Promise<DataProcessingQueue[]> {\n    try {\n      const { data, error }: PostgrestResponse<DataProcessingQueue> = await supabase\n        .from('data_processing_queue')\n        .select('*')\n        .eq('status', status)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching queue:', error);\n      return [];\n    }\n  },\n  async updateQueueItem(\n    id: string,\n    updates: Partial<DataProcessingQueue>,\n  ): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .update({\n        ...updates,\n        ...(updates.status === 'completed' && { processed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n};\n\nexport const DataQualityService = {\n  calculateQualityScore: (truck: FoodTruck) => {\n    // Placeholder for actual quality score calculation logic\n    // This should be implemented based on defined data quality rules\n    let score = 0;\n    if (typeof truck.name === 'string' && truck.name.trim() !== '') score += 20;\n    if (\n      truck.current_location &&\n      typeof truck.current_location.lat === 'number' && !Number.isNaN(truck.current_location.lat) &&\n      typeof truck.current_location.lng === 'number' && !Number.isNaN(truck.current_location.lng)\n    ) score += 30;\n    if (\n      (truck.contact_info &&\n        ((typeof truck.contact_info.phone === 'string' && truck.contact_info.phone.trim() !== '') ||\n         (typeof truck.contact_info.email === 'string' && truck.contact_info.email.trim() !== '') ||\n         (typeof truck.contact_info.website === 'string' && truck.contact_info.website.trim() !== '')))\n    ) score += 25;\n    if (Array.isArray(truck.menu) && truck.menu.length > 0) score += 15;\n    if (truck.operating_hours !== undefined) score += 10;\n    return { score: Math.min(100, score) };\n  },\n\n  async updateTruckQualityScore(truckId: string): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const { data: truck, error: fetchError } = await supabaseAdmin\n      .from('food_trucks')\n      .select('*')\n      .eq('id', truckId)\n      .single();\n\n    if (fetchError) {\n      handleSupabaseError(fetchError, 'updateTruckQualityScore:fetch');\n      return { error: `Failed to fetch truck with ID ${truckId}.` };\n    }\n    if (!truck) {\n      return { error: `Truck with ID ${truckId} not found.` };\n    }\n\n    const { score } = this.calculateQualityScore(truck);\n\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .update({ data_quality_score: score })\n      .eq('id', truckId)\n      .select()\n      .single();\n\n    if (error) {\n      handleSupabaseError(error, 'updateTruckQualityScore:update');\n      return { error: `Failed to update quality score for truck with ID ${truckId}.` };\n    }\n    return data;\n  },\n};\n\nexport const APIUsageService = {\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<ApiUsage> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const { data: existing, error: existingError }: { data: ApiUsage | undefined; error: PostgrestError | undefined } = await supabaseAdmin\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n\n      if (existingError && existingError.code !== 'PGRST116') throw existingError;\n\n      if (existing) {\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .update({\n            requests_count: (existing.requests_count ?? 0) + requests,\n            tokens_used: (existing.tokens_used ?? 0) + tokens,\n          })\n          .eq('id', existing.id)\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      } else {\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .insert([\n            {\n              service_name: serviceName,\n              usage_date: today,\n              requests_count: requests,\n              tokens_used: tokens,\n            },\n          ])\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      }\n    } catch (error: unknown) {\n      console.warn('Error tracking usage:', error);\n      throw error;\n    }\n  },\n  async getTodayUsage(serviceName: string): Promise<ApiUsage | undefined> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n\n      if (error && String(error.code) !== 'PGRST116') throw error;\n      return data ?? undefined;\n    } catch (error: unknown) {\n      console.warn('Error getting today usage:', error);\n      throw error;\n    }\n  },\n\n  async getAllUsageStats(): Promise<ApiUsage[]> {\n    try {\n      const { data, error }: PostgrestResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .order('usage_date', { ascending: false })\n        .limit(30);\n\n      if (error) throw error;\n      return data as ApiUsage[] ?? [];\n    } catch (error: unknown) {\n      console.warn('Error getting usage stats:', error);\n      throw error;\n    }\n  },\n};\n\nexport { type MenuItem, type MenuCategory, type OperatingHours, type PriceRange } from './types';\n\n// Helper to prepare menu items for DB insertion\nfunction prepareMenuItemsForInsert(truckId: string, menuData: MenuCategory[] | unknown[] | undefined) {\n  if (!Array.isArray(menuData) || menuData.length === 0) return [];\n  // Explicitly filter for MenuCategory to ensure type safety\n  const categories = menuData.filter((category): category is MenuCategory =>\n    typeof category === 'object' && category != undefined && 'name' in category && 'items' in category && Array.isArray(category.items)\n  ) as MenuCategory[];\n\n  return categories.flatMap((category) =>\n    (Array.isArray(category.items) ? category.items : []).map((item: unknown) => {\n      if (!isMenuItem(item)) {\n        console.warn('Skipping invalid menu item:', item);\n        return; // Return undefined for invalid items to be filtered out later\n      }\n\n      return {\n        food_truck_id: truckId,\n        category: typeof category.name === 'string' && category.name !== '' ? category.name : 'Uncategorized',\n        name: typeof item.name === 'string' && item.name !== '' ? item.name : 'Unknown Item',\n        description: typeof item.description === 'string' && item.description !== '' ? item.description : undefined,\n        price: typeof item.price === 'number' && !Number.isNaN(item.price) ? item.price : undefined,\n        dietary_tags: Array.isArray(item.dietary_tags) ? item.dietary_tags : [],\n      };\n    }).filter(Boolean) as MenuItem[] // Filter out nulls and assert type\n  );\n}\n\nasync function insertMenuItems(truckId: string, menuData: MenuCategory[] | unknown[] | undefined) {\n  const menuItems = prepareMenuItemsForInsert(truckId, menuData);\n  if (menuItems.length === 0) return;\n  const { error: menuError } = await supabaseAdmin!.from('menu_items').insert(menuItems);\n  if (menuError) {\n    console.error('Error inserting menu items for truck', truckId, menuError);\n  }\n}\n\n// Fix all strict-boolean-expressions and always-true/false comparisons below\n// Example: if (someString) => if (typeof someString === 'string' && someString.trim() !== '')\n// Example: if (someNumber) => if (typeof someNumber === 'number' && !Number.isNaN(someNumber) && someNumber !== 0)\n// Example: if (someObject) => if (someObject != null && someObject != undefined)\n\n// For all other conditionals, ensure explicit nullish/empty/NaN checks as above\n\nexport {type PostgrestError, type PostgrestResponse} from '@supabase/supabase-js';\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[309,312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[309,312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Shared types for the Food Truck Finder application\r\n\r\nexport type PriceRange = '$|$$,$$$';\r\n\r\nexport interface MenuCategory {\r\n  name: string;\r\n  items: MenuItem[];\r\n}\r\n\r\nexport interface MenuItem {\r\n  name: string;\r\n  description: string | undefined;\r\n  price: number | string | undefined;\r\ndietary_tags: any[];\r\n  is_popular?: boolean;\r\n}\r\n\r\nexport interface LocationData {\r\n  address: string | undefined;\r\n  city: string | undefined;\r\n  state: string | undefined;\r\n  landmarks: string[];\r\n  coordinates: {\r\n    lat: number | undefined;\r\n    lng: number | undefined;\r\n  };\r\n  confidence: number;\r\n  raw_location_text: string | undefined;\r\n}\r\n\r\nexport type DailyOperatingHours =\r\n  | { open: string; close: string; closed: boolean }\r\n  | { closed: true }\r\n  | undefined;\r\n\r\nexport interface OperatingHours {\r\n  monday: DailyOperatingHours;\r\n  tuesday: DailyOperatingHours;\r\n  wednesday: DailyOperatingHours;\r\n  thursday: DailyOperatingHours;\r\n  friday: DailyOperatingHours;\r\n  saturday: DailyOperatingHours;\r\n  sunday: DailyOperatingHours;\r\n  [key: string]: DailyOperatingHours; // Add index signature\r\n}\r\n\r\nexport interface SentimentAnalysisResult {\r\n  sentiment: 'positive' | 'negative' | 'neutral';\r\n  score: number;\r\n  confidence: number;\r\n  key_topics: string[];\r\n  positive_aspects: string[];\r\n  negative_aspects: string[];\r\n  summary: string;\r\n  recommended: boolean;\r\n}\r\n\r\nexport interface EnhancedFoodTruckData {\r\n  name: string | undefined;\r\n  description: string | undefined;\r\n  cuisine_type: string[];\r\n  price_range: PriceRange;\r\n  specialties: string[];\r\n  dietary_options: string[];\r\n  enhanced_menu: {\r\n    categories: MenuCategory[];\r\n  };\r\n  standardized_hours: OperatingHours;\r\n  cleaned_contact: {\r\n    phone: string | undefined;\r\n    email: string | undefined;\r\n    website: string | undefined;\r\n  };\r\n  data_quality_improvements: string[];\r\n  confidence_score: number;\r\n}\r\n\r\nexport interface ExtractedFoodTruckDetails {\r\n  name: string | undefined;\r\n  description: string | undefined;\r\n  cuisine_type: string[];\r\n  price_range: PriceRange | undefined;\r\n  specialties: string[];\r\n  current_location: {\r\n    address: string | undefined;\r\n    city: string | undefined;\r\n    state: string | undefined;\r\n    zip_code: string | undefined;\r\n    lat?: number;\r\n    lng?: number;\r\n    raw_text: string | undefined;\r\n  };\r\n  scheduled_locations?: {\r\n    // Added scheduled_locations\r\n    address?: string;\r\n    city?: string;\r\n    state?: string;\r\n    zip_code?: string;\r\n    lat?: number;\r\n    lng?: number;\r\n    timestamp: string;\r\n    start_time: string; // Added start_time\r\n    end_time: string; // Added end_time\r\n  }[];\r\n  operating_hours: OperatingHours;\r\n  menu: MenuCategory[];\r\n  contact_info: {\r\n    phone?: string;\r\n    email?: string;\r\n    website?: string;\r\n  };\r\n  social_media: {\r\n    instagram?: string;\r\n    facebook?: string;\r\n    twitter?: string;\r\n    tiktok?: string;\r\n    yelp?: string;\r\n  };\r\n  source_url: string;\r\n}\r\n\r\nexport interface FirecrawlOutputData {\r\n  markdown: string;\r\n  name?: string;\r\n  source_url?: string;\r\n}\r\n\r\nexport interface FoodTruckSchema {\r\n  name: string;\r\n  description?: string;\r\n  current_location: {\r\n    lat: number;\r\n    lng: number;\r\n    address: string | undefined;\r\n    timestamp: string;\r\n  };\r\n  scheduled_locations: ExtractedFoodTruckDetails['scheduled_locations'];\r\n  operating_hours: OperatingHours;\r\n  menu: MenuCategory[];\r\n  contact_info: ExtractedFoodTruckDetails['contact_info'];\r\n  social_media: ExtractedFoodTruckDetails['social_media'];\r\n  cuisine_type: string[];\r\n  price_range: PriceRange | undefined;\r\n  specialties: string[];\r\n  data_quality_score: number;\r\n  verification_status: 'pending' | 'verified' | 'flagged';\r\n  source_urls: string[];\r\n  last_scraped_at: string;\r\n  test_run_flag?: boolean;\r\n  website?: string;\r\n  phone_number?: string;\r\n  email?: string;\r\n  instagram_handle?: string;\r\n  facebook_handle?: string;\r\n  twitter_handle?: string;\r\n  schedule?: unknown[]; // Assuming schedule is an array, adjust type if known\r\n  average_rating?: number;\r\n  review_count?: number;\r\n}\r\n\r\n// Database record type with additional fields\r\nexport interface FoodTruck extends FoodTruckSchema {\r\n  id: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  is_active?: boolean;\r\n}\r\n\r\nexport interface GeminiResponse<T = unknown> {\r\n  success: boolean;\r\n  data?: T;\r\n  tokensUsed?: number;\r\n  error?: string;\r\n  promptSent?: string;\r\n}\r\n\r\nexport interface StageResult {\r\n  status: string;\r\n  data?: FirecrawlOutputData | ExtractedFoodTruckDetails | FoodTruckSchema;\r\n  error?: string;\r\n  details?: string;\r\n  prompt?: string;\r\n  tokensUsed?: number;\r\n  metadata?: { name?: string; source_url?: string };\r\n  rawContent?: string;\r\n  preparedData?: FoodTruckSchema;\r\n  recordId?: string;\r\n}\r\n\r\nexport interface TestPipelineResults {\r\n  firecrawl?: StageResult;\r\n  gemini?: StageResult;\r\n  supabase?: StageResult;\r\n  overallStatus?: string;\r\n  logs?: string[];\r\n  error?: string;\r\n}\r\n\r\nexport interface PipelineRunResult {\r\n  firecrawl?: StageResult;\r\n  gemini?: StageResult;\r\n  supabase?: StageResult;\r\n  logs: string[];\r\n  overallStatus: 'Success' | 'Error';\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types\\foodTruck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types\\webVitals.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\QualityScorer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\dataQualityFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\foodTruckHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":31,"column":53,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":31,"endColumn":57},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":36,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":36,"endColumn":18}],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":63,"column":5,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":63,"endColumn":45,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FoodTruck, DailyOperatingHours, MenuItem } from '@/lib/types'; // Added DailyOperatingHours, PriceRange, MenuItem\r\n\r\nexport const getCurrentDay = () => {\r\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\r\n  return days[new Date().getDay()];\r\n};\r\n\r\nexport const formatPrice = (price: number | string) => { // Updated to accept string\r\n  if (typeof price === 'string') {\r\n    // Handle cases where price might be a string like \"$10-$20\" or \"Varies\"\r\n    return price;\r\n  }\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  }).format(price);\r\n};\r\n\r\nexport const formatHours = (hours: DailyOperatingHours) => { // Updated to accept DailyOperatingHours\r\n    if (!hours || hours.closed) {\r\n        return 'Closed';\r\n    }\r\n    const open = new Date(`1970-01-01T${hours.open}Z`).toLocaleTimeString('en-US', {hour: 'numeric', minute: 'numeric', hour12: true});\r\n    const close = new Date(`1970-01-01T${hours.close}Z`).toLocaleTimeString('en-US', {hour: 'numeric', minute: 'numeric', hour12: true});\r\n    return `${open} - ${close}`;\r\n}\r\n\r\nexport const getPopularItems = (truck: FoodTruck): MenuItem[] => { // Explicitly define return type\r\n    // Explicitly check for nullish and boolean\r\n    return (truck.menu?.flatMap(category => category.items)\r\n        .filter((item): item is MenuItem => Boolean(item && item.is_popular === true)) ?? []);\r\n}\r\n\r\nexport const getPriceRange = (truck: FoodTruck) => {\r\n    const allItems = truck.menu?.flatMap(category => category.items);\r\n    if (!allItems || allItems.length === 0) {\r\n        return 'N/A';\r\n    }\r\n    const numericPrices = allItems\r\n        .map(item => item.price)\r\n        .filter((price): price is number => typeof price === 'number' && price != undefined); // Filter for numbers\r\n\r\n    if (numericPrices.length === 0) {\r\n        return 'N/A'; // No numeric prices found\r\n    }\r\n\r\n    const minPrice = Math.min(...numericPrices);\r\n    const maxPrice = Math.max(...numericPrices);\r\n    return `${formatPrice(minPrice)} - ${formatPrice(maxPrice)}`;\r\n}\r\n\r\nexport const getTodayHours = (truck: FoodTruck) => {\r\n    const today = getCurrentDay();\r\n    return truck.operating_hours?.[today];\r\n}\r\n\r\n// Get user's current location or default to San Francisco\r\nexport function getUserLocationHelper(\r\n  setUserLocation: (location: { lat: number; lng: number }) => void\r\n) {\r\n  if (typeof navigator !== 'undefined' && navigator.geolocation != undefined) {\r\n    // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        setUserLocation({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n      },\r\n      (error) => {\r\n        console.warn('Location access denied:', error);\r\n        // Default to San Francisco\r\n        setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n      },\r\n    );\r\n  } else {\r\n    // Default to San Francisco if geolocation is not supported\r\n    setUserLocation({ lat: 37.7749, lng: -122.4194 });\r\n  }\r\n}\r\n\r\n// Load all food trucks from API\r\nexport async function loadFoodTrucksHelper(\r\n  setTrucks: (trucks: FoodTruck[]) => void,\r\n  setLoading: (loading: boolean) => void\r\n) {\r\n  try {\r\n    const response = await fetch('/api/trucks');\r\n    const data: unknown = await response.json();\r\n    if (typeof data === 'object' && data != undefined && 'trucks' in data && Array.isArray(data.trucks)) {\r\n      setTrucks(data.trucks as FoodTruck[]);\r\n    } else {\r\n      setTrucks([]);\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load food trucks:', error);\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}\r\n\r\n// Load nearby food trucks based on user location\r\nexport async function loadNearbyTrucksHelper(\r\n  userLocation: { lat: number; lng: number } | undefined,\r\n  setTrucks: (trucks: FoodTruck[]) => void\r\n) {\r\n  if (!userLocation) return;\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `/api/trucks?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10`,\r\n    );\r\n    const data: unknown = await response.json();\r\n    if (typeof data === 'object' && data != undefined && 'trucks' in data && Array.isArray(data.trucks)) {\r\n      setTrucks(data.trucks as FoodTruck[]);\r\n    } else {\r\n      setTrucks([]);\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error('Failed to load nearby trucks:', error);\r\n  }\r\n}\r\n\r\n// Check if a food truck is currently open\r\nexport function isTruckOpen(truck: FoodTruck): boolean {\r\n  const today = getCurrentDay();\r\n  const hours = truck.operating_hours?.[today];\r\n\r\n  // Ensure hours and its properties are not null/undefined before accessing\r\n  if (hours == undefined || hours.closed === true || hours.open == undefined || hours.close == undefined) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const now = new Date();\r\n    const currentTime = now.getHours() * 100 + now.getMinutes();\r\n    const openTime = Number.parseInt(hours.open.replace(':', ''));\r\n    const closeTime = Number.parseInt(hours.close.replace(':', ''));\r\n\r\n    return currentTime >= openTime && currentTime <= closeTime;\r\n  } catch (error: unknown) {\r\n    console.error('Error parsing operating hours for truck', truck.name, error);\r\n    return false;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]