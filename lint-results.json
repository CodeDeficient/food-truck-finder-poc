[{"filePath":"/app/app/access-denied/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/analytics/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/auto-scraping/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/data-cleanup/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/data-quality/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/events/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/food-trucks/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/food-trucks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/monitoring/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/page.tsx","messages":[{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":41,"column":76,"nodeType":"Literal","messageId":"error","endLine":41,"endColumn":80,"suggestions":[{"messageId":"replace","fix":{"range":[1529,1533],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3262,3262],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3262,3262],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n'use client';\n\nimport { useFoodTrucks, DataStatusIndicator } from '@/lib/fallback/supabaseFallback';\nimport {\n  ScrapingJobService,\n  DataProcessingService,\n  supabase,\n} from '@/lib/supabase';\nimport { TotalFoodTrucksCard } from '@/components/admin/dashboard/TotalFoodTrucksCard';\nimport { PipelineStatusCard } from '@/components/admin/dashboard/PipelineStatusCard';\nimport { DataQualityScoreCard } from '@/components/admin/dashboard/DataQualityScoreCard';\nimport { QualityDistributionCard } from '@/components/admin/dashboard/QualityDistributionCard';\nimport { RecentErrorsCard } from '@/components/admin/dashboard/RecentErrorsCard';\nimport { useEffect, useState } from 'react';\n\n// Define the data quality stats type based on the database function\ninterface DataQualityStats {\n  readonly total_trucks: number;\n  readonly avg_quality_score: number;\n  readonly high_quality_count: number;\n  readonly medium_quality_count: number;\n  readonly low_quality_count: number;\n  readonly verified_count: number;\n  readonly pending_count: number;\n  readonly flagged_count: number;\n}\n\ninterface DashboardData {\n  totalFoodTrucks: number;\n  pendingVerifications: number;\n  pendingScrapingJobsCount: number;\n  runningScrapingJobsCount: number;\n  failedScrapingJobsCount: number;\n  failedProcessingQueueItemsCount: number;\n  dataQualityStats: DataQualityStats;\n}\n\nexport default function AdminDashboard() {\n  const { trucks, loading, dataStatus } = useFoodTrucks();\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n\n  useEffect(() => {\n    async function getDashboardData() {\n      const pendingVerifications = trucks.filter((t) => t.verification_status === 'pending').length;\n\n      // Fetch pipeline status (e.g., pending scraping jobs)\n      const pendingScrapingJobs = await ScrapingJobService.getJobsByStatus('pending');\n      const runningScrapingJobs = await ScrapingJobService.getJobsByStatus('running');\n      const failedScrapingJobs = await ScrapingJobService.getJobsByStatus('failed');\n\n      // Fetch recent errors from data processing queue\n      const failedProcessingQueueItems = await DataProcessingService.getQueueByStatus('failed');\n      // Fetch data quality stats using the Supabase function\n      const { data: qualityStatsResult, error: qualityError } = await supabase\n        .rpc('get_data_quality_stats')\n        .single();\n\n      if (qualityError != undefined) {\n        console.error('Error fetching data quality stats:', qualityError);\n      }\n\n      const dataQualityStats: DataQualityStats = (qualityStatsResult as DataQualityStats) ?? {\n        total_trucks: 0,\n        avg_quality_score: 0,\n        high_quality_count: 0,\n        medium_quality_count: 0,\n        low_quality_count: 0,\n        verified_count: 0,\n        pending_count: 0,\n        flagged_count: 0,\n      };\n\n      setDashboardData({\n        totalFoodTrucks: trucks.length,\n        pendingVerifications,\n        pendingScrapingJobsCount: pendingScrapingJobs.length,\n        runningScrapingJobsCount: runningScrapingJobs.length,\n        failedScrapingJobsCount: failedScrapingJobs.length,\n        failedProcessingQueueItemsCount: failedProcessingQueueItems.length,\n        dataQualityStats,\n      });\n    }\n\n    if (trucks.length > 0) {\n      getDashboardData();\n    }\n  }, [trucks]);\n\n  if (loading || !dashboardData) {\n    return <div>Loading...</div>;\n  }\n\n  if (dataStatus.status === 'unavailable') {\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n        <DataStatusIndicator status={dataStatus} />\n        <div className=\"text-center py-10\">\n          <p className=\"text-lg text-gray-500\">Food truck data is currently unavailable. Please try again later.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n      <DataStatusIndicator status={dataStatus} />\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <TotalFoodTrucksCard\n          totalFoodTrucks={dashboardData.totalFoodTrucks}\n          pendingVerifications={dashboardData.pendingVerifications}\n        />\n        <PipelineStatusCard\n          pendingScrapingJobsCount={dashboardData.pendingScrapingJobsCount}\n          runningScrapingJobsCount={dashboardData.runningScrapingJobsCount}\n          failedScrapingJobsCount={dashboardData.failedScrapingJobsCount}\n        />\n        <DataQualityScoreCard dataQualityStats={dashboardData.dataQualityStats} />\n        <QualityDistributionCard dataQualityStats={dashboardData.dataQualityStats} />\n        <RecentErrorsCard failedProcessingQueueItemsCount={dashboardData.failedProcessingQueueItemsCount} />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/pipeline/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/test-pipeline/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/admin/users/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/admin/automated-cleanup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/admin/cron-status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/admin/data-cleanup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/admin/data-quality/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/admin/oauth-status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/admin/realtime-events/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/admin/scraping-metrics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/analytics/web-vitals/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/auto-scrape-initiate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/autonomous-discovery/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/cron/auto-scrape/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/cron/quality-check/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/dashboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/enhanced-pipeline/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/firecrawl/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/gemini/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/monitoring/api-usage/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/pipeline/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/scheduler/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/scrape/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/search/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/tavily/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/test-integration/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/test-pipeline-run/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/trucks/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/api/trucks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/auth/AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/auth/callback/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabase } from '@/lib/supabase';\nimport { RateLimiter, getClientIdentifier } from '@/lib/security/rateLimiter';\nimport { AuditLogger } from '@/lib/security/auditLogger';\nimport { User } from '@supabase/supabase-js';\n\ninterface RequestMetadata {\n  ip: string;\n  userAgent: string;\n}\n\nasync function handleSuccessfulAuth({\n  user,\n  redirectTo,\n  origin,\n  identifier,\n  requestMetadata,\n}: {\n  user: User;\n  redirectTo: string;\n  origin: string;\n  identifier: string;\n  requestMetadata: RequestMetadata;\n}) {\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('role')\n    .eq('id', user.id)\n    .single();\n\n  await AuditLogger.logAuthEvent(\n    'login_success',\n    user.email,\n    user.id,\n    requestMetadata,\n    { provider: 'google', role: profile?.role },\n  );\n\n  RateLimiter.recordSuccess(identifier, 'auth');\n\n  if (profile?.role === 'admin') {\n    return NextResponse.redirect(`${origin}${redirectTo}`);\n  } else {\n    await AuditLogger.logSecurityEvent({\n      event_type: 'permission_denied',\n      user_id: user.id,\n      user_email: user.email,\n      ip_address: requestMetadata.ip,\n      user_agent: requestMetadata.userAgent,\n      details: {\n        reason: 'insufficient_role',\n        user_role: profile?.role ?? 'none',\n      },\n      severity: 'warning',\n    });\n    return NextResponse.redirect(`${origin}/access-denied`);\n  }\n}\n\nasync function handleAuthFailure(\n  error: Error,\n  identifier: string,\n  requestMetadata: RequestMetadata,\n) {\n  await AuditLogger.logAuthEvent(\n    'login_failure',\n    undefined,\n    undefined,\n    requestMetadata,\n    { provider: 'google', error: error.message },\n  );\n}\n\nexport async function GET(request: NextRequest) {\n  const identifier = getClientIdentifier(request);\n  const rateLimitResult = RateLimiter.checkRateLimit(identifier, 'auth');\n\n  if (!rateLimitResult.allowed) {\n    await AuditLogger.logSecurityEvent({\n      event_type: 'login_failure',\n      ip_address: identifier.split(':')[0],\n      user_agent: request.headers.get('user-agent') ?? 'unknown',\n      details: {\n        reason: 'rate_limit_exceeded',\n        retryAfter: rateLimitResult.retryAfter,\n      },\n      severity: 'warning',\n    });\n    return NextResponse.redirect(`${new URL(request.url).origin}/login?error=rate_limit`);\n  }\n\n  const { searchParams, origin } = new URL(request.url);\n  const code = searchParams.get('code');\n  const redirectTo = searchParams.get('redirectTo') ?? '/admin';\n\n  const requestMetadata = {\n    ip: identifier.split(':')[0],\n    userAgent: request.headers.get('user-agent') ?? 'unknown',\n  };\n\n  if (code !== null && code.length > 0) {\n    const { error } = await supabase.auth.exchangeCodeForSession(code);\n\n    if (error) {\n      await handleAuthFailure(error, identifier, requestMetadata);\n    } else {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n      if (user) {\n        return await handleSuccessfulAuth({\n          user,\n          redirectTo,\n          origin,\n          identifier,\n          requestMetadata,\n        });\n      }\n    }\n  }\n\n  return NextResponse.redirect(`${origin}/login`);\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/app/trucks/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/SearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":42,"column":15,"nodeType":null,"endLine":42,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[1542,1545],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/WebVitalsReporter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/AdminNavLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/DataCleanupDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/RealtimeStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/UserMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/cleanup/CleanupGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/cleanup/CleanupHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/cleanup/CleanupOperationDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/cleanup/CleanupPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/cleanup/CleanupResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/cleanup/CleanupSummaryCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/cleanup/OperationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/dashboard/DataQualityScoreCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/dashboard/PipelineStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/dashboard/QualityDistributionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/dashboard/RecentErrorsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/dashboard/TotalFoodTrucksCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/dashboard/TrucksPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":45,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":31,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":31,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":62,"nodeType":"Identifier","messageId":"anyAssignment","endLine":31,"endColumn":67}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport TruckCard from '@/components/ui/TruckCard';\nimport { Truck } from '@/lib/types'; // Import from actual types file\n\n/**\n* Loads and displays a list of trucks on the dashboard.\n* @example\n* TrucksPage()\n* Returns a container with truck cards or a loading message.\n* @returns {JSX.Element} A container with truck cards or a loading message.\n* @description\n*   - Uses temporary truck data, which should be replaced with real truck loading logic.\n*   - Employs useState to manage the array of trucks.\n*   - Displays 'Loading trucks...' message when truck data is unavailable.\n*/\nconst TrucksPage = () => {\n  const [trucks, setTrucks] = useState<Truck[]>([]);\n\n  useEffect(() => {\n    // Placeholder: Integrate actual truck loading logic here\n    setTrucks([\n      // Temporary data - replace with real query\n      { id: \"1\", name: \"Temp Truck 1\", cuisine_type: [\"American\"], price_range: \"$\", data_quality_score: 0, verification_status: \"pending\", source_urls: [], last_scraped_at: \"\", current_location: { lat: 0, lng: 0, address: \"\", timestamp: \"\" }, operating_hours: { monday: { closed: true }, tuesday: { closed: true }, wednesday: { closed: true }, thursday: { closed: true }, friday: { closed: true }, saturday: { closed: true }, sunday: { closed: true } }, menu: [], contact_info: {}, social_media: {}, created_at: \"\", updated_at: \"\", description: \"\", specialties: [], scheduled_locations: [] },\n      { id: \"2\", name: \"Temp Truck 2\", cuisine_type: [\"Mexican\"], price_range: \"$\", data_quality_score: 0, verification_status: \"pending\", source_urls: [], last_scraped_at: \"\", current_location: { lat: 0, lng: 0, address: \"\", timestamp: \"\" }, operating_hours: { monday: { closed: true }, tuesday: { closed: true }, wednesday: { closed: true }, thursday: { closed: true }, friday: { closed: true }, saturday: { closed: true }, sunday: { closed: true } }, menu: [], contact_info: {}, social_media: {}, created_at: \"\", updated_at: \"\", description: \"\", specialties: [], scheduled_locations: [] }\n    ]);\n  }, []);\n\n  return (\n    <div className=\"trucks-container\">\n      {trucks.length > 0 ? (\n        trucks.map(truck => <TruckCard key={truck.id} truck={truck} />)\n      ) : (\n        <p>Loading trucks...</p>\n      )}\n    </div>\n  );\n}\n\nexport default TrucksPage;\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/food-trucks/detail/BasicInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/food-trucks/detail/DataQualityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/food-trucks/detail/LocationInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/food-trucks/detail/OperatingHoursCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/food-trucks/detail/QualityMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/food-trucks/detail/QualityScoreMetric.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/food-trucks/detail/RatingsReviewsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/food-trucks/detail/TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/food-trucks/detail/TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/pipeline/FailedProcessingQueueTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/pipeline/PipelineStatisticsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/pipeline/RecentScrapingJobsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/pipeline/ScrapingJobRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/pipeline/ScrapingJobsTableContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/AlertListDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/AlertToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/ConnectionStatusHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/EventControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/EventSubscriptionManager.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":23,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":23,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":55,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":22,"suggestions":[{"fix":{"range":[2010,2069],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\n\nimport { supabase } from '@/lib/supabase'; \nimport { PipelineEvent } from '@/lib/types';\n\n/**\n * Manages event subscriptions for pipeline events using Supabase.\n * @example\n * EventSubscriptionManager()\n * @returns {void} This component serves purely for side-effects of subscription management.\n * @description\n *   - Utilizes the Supabase Realtime Client to subscribe and process \"pipeline-events\".\n *   - Includes an effect cleanup to unsubscribe from events when the component unmounts.\n *   - Current implementation logs events to the console as placeholders.\n */\ntype RealtimeChannelStatus = 'SUBSCRIBED' | 'CLOSED' | 'CHANNEL_ERROR' | 'TIMED_OUT';\n\nfunction EventSubscriptionManager() {\n  useEffect(() => {\n    const handleEvent = (payload: { new: PipelineEvent }) => {\n      try {\n        const event = payload.new;\n        if (event && typeof event === 'object' && 'type' in event) {\n          // Process the event based on its type\n          switch (event.type) {\n            case 'job_started': {\n              console.info('Job started:', event.payload);\n              break;\n            }\n            case 'job_completed': {\n              console.info('Job completed:', event.payload);\n              break;\n            }\n            case 'data_updated': {\n              console.info('Data updated:', event.payload);\n              break;\n            }\n            default: {\n              console.warn('Received unknown event type:', event.type);\n            }\n          }\n        } else {\n          console.warn('Received malformed event:', payload);\n        }\n      } catch (error) {\n        console.error('Error processing pipeline event:', error);\n      }\n    };\n\n    const subscription = supabase\n      .channel('pipeline-events')\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'pipeline_events' }, handleEvent)\n      .subscribe((status: RealtimeChannelStatus, error?: Error) => {\n        if (status === 'SUBSCRIBED') {\n          console.log('Successfully subscribed to pipeline events.');\n        }\n        if (status === 'CHANNEL_ERROR' && error) {\n          console.error('Pipeline event subscription error:', error);\n        }\n      });\n\n    return () => {\n      void supabase.realtime.removeChannel(subscription);\n    };\n  }, []);\n}\n\nexport default EventSubscriptionManager;\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/RealtimeStatusDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/ScrapingJobsStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/StatusHelpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/SystemAlertItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/SystemAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/SystemMetricsGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trend' is defined but never used.","line":8,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { StatusMetric } from './useSystemMetrics.tsx'; // Import StatusMetric type\nimport { getStatusColor, getStatusIcon, getTrendIcon } from './StatusHelpers'; // Import helper functions\n\ntype Status = 'healthy' | 'warning' | 'error' | 'unknown';\ntype Trend = 'up' | 'down' | 'stable' | undefined;\n\ninterface SystemMetricsGridProps {\n  readonly metrics: StatusMetric[];\n}\n\n/**\n* Displays a grid of system metrics using provided data.\n* @example\n* SystemMetricsGrid({ metrics: sampleMetricsArray })\n* <div className=\"grid\">...</div>\n* @param {SystemMetricsGridProps} {metrics} - An array of metric objects to be displayed in the grid.\n* @returns {JSX.Element} A JSX element representing a styled grid displaying system metrics.\n* @description\n*   - Each metric is rendered with icons representing its status and trend.\n*   - Metrics are styled based on their status, indicating their current state.\n*   - Responsive grid layout adapts based on screen size.\n*/\nexport function SystemMetricsGrid({ metrics }: SystemMetricsGridProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {metrics.map((metric, index) => (\n        <div\n          key={index}\n          className={`p-3 rounded-lg border ${getStatusColor(metric.status as Status)}`}\n        >\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center gap-2\">\n              {metric.icon}\n              <span className=\"text-sm font-medium\">{metric.label}</span>\n            </div>\n            {getStatusIcon(metric.status as Status)}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-lg font-bold\">\n              {metric.value}\n              {metric.unit}\n            </span>\n            {getTrendIcon(metric.trend)}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/SystemStatusIndicators.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/useSystemAlertsLogic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/realtime/useSystemMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/admin/users/UserTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/home/AppHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/home/LoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/home/MainContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/home/MapSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/home/TruckListHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/home/TruckListSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/login/EmailFormFields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/map/DynamicMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/map/MapContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/map/MapLoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/map/MapViewUpdater.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/map/TruckMarkers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/map/UserLocationMarker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/map/mapHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/monitoring/ApiMonitoringDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/monitoring/FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/monitoring/FeatureList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/monitoring/FeatureOverviewCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/monitoring/FeatureOverviewContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/monitoring/MonitoringFeaturesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/monitoring/MonitoringFeaturesContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/monitoring/MonitoringPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/monitoring/TechnicalDetailsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/search/AdvancedFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/search/CuisineTypesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/search/DistanceSliderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/search/FilterToggleButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/search/MainSearchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/search/QuickFiltersSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/search/SearchFilterContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/search/SearchInputWithIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/test-pipeline/ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/test-pipeline/StageResultCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/test-pipeline/StageResultDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/test-pipeline/TestPipelineForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/test-pipeline/TestPipelineSubmitHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/test-pipeline/TestResultsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/OperatingHoursSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckAccordionItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckBasicInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckCardFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckCardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckContactInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckDetailHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckLocationInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckOperatingHours.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/trucks/TruckRatingsReviews.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/ContactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/MenuSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/NavigationMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/RatingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/SimpleQualityPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/SocialMediaSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/ToggleGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/TruckCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/TruckCardContent.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":55,"column":41,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":55,"endColumn":58,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2138,2155],"text":"(todayHours.closed ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareFalse","fix":{"range":[2137,2155],"text":"(todayHours.closed === false)"},"desc":"Change condition to check if false (`value === false`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport TruckCard from './TruckCard';\nimport { formatPrice } from '@/lib/utils/foodTruckHelpers';\nimport { MenuSection, SocialMediaSection, ContactSection } from '.';\n\ninterface MenuItem {\n  name: string;\n  price_cents?: number; // Make price_cents optional\n}\n\n/**\n* Renders the card content for a food truck including its name, operating hours, popular menu items, and contact details.\n* @example\n* TruckCardContent({\n*   truck: { name: 'Tasty Truck', address: '123 Street', phone_number: '123-456-7890' },\n*   todayHours: { open: '8:00 AM', close: '5:00 PM', closed: false },\n*   popularItems: [{ name: 'Burger', price_cents: 500 }],\n* })\n* // returns JSX containing truck's card\n* @param {object} truck - The truck object containing name, address, and phone number.\n* @param {object} todayHours - An optional object specifying today's opening and closing times and whether it is closed.\n* @param {MenuItem[]} popularItems - List of popular menu items to display.\n* @returns {JSX.Element} The JSX content for rendering the truck's card.\n* @description\n*   - Uses default values for missing truck properties to ensure components render safely.\n*   - Calculates the average price of popular items and formats it to two decimal places.\n*   - Validates the existence of social media and contact information before rendering related sections.\n*/\nexport function TruckCardContent({\n  truck,\n  todayHours,\n  popularItems = [],\n}: {\n  readonly truck: { name: string; address?: string; phone_number?: string; social_media?: Record<string, string> };\n  readonly todayHours?: { open?: string; close?: string; closed?: boolean };\n  readonly popularItems: MenuItem[];\n}) {\n  const {\n    name = 'Unnamed Truck',\n    social_media = {},\n    address = '', // Provide safe defaults\n    phone_number = '',\n  } = truck;\n\n  const avgDailyPrice = (\n    popularItems.reduce((acc, item) => acc + (item.price_cents ?? 0), 0) /\n    popularItems.length ?? 0\n  ).toFixed(2);\n\n  return (\n    <main className=\"ui-truck-container\">\n      {name && (\n        <>\n          <TruckCard title={name} avgCost={`$${avgDailyPrice}`} />\n          {todayHours !== undefined && !todayHours.closed && (\n            <div className=\"hours-display\">\n              <strong>Today:</strong> {todayHours.open} - {todayHours.close}\n            </div>\n          )}\n        </>\n      )}\n\n      {popularItems.length > 0 && (\n        <MenuSection\n          items={popularItems.map(item => ({\n            name: item.name,\n            price: formatPrice(item.price_cents),\n          }))}\n        />\n      )}\n\n      {/* SocialMediaSection and ContactSection require validation */}\n      {Object.keys(social_media).length > 0 && (typeof social_media === 'object')&& (\n        <SocialMediaSection social_media={social_media} />\n      )}\n\n      {/* Refactored ContactSection - handle undefined values explicitly*/}\n      {(address || phone_number) && (\n        <ContactSection address={address} phone_number={phone_number} />\n      )}\n    </main>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":13,"column":9,"nodeType":null,"messageId":"deprecation","endLine":13,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/chart.tsx","messages":[],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":120,"column":25,"nodeType":"TSFunctionType","messageId":"exceed","endLine":120,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/chart/QualityPieChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/chart/TooltipIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/chart/TooltipItemContent.tsx","messages":[],"suppressedMessages":[{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":6,"column":24,"nodeType":"TSFunctionType","messageId":"exceed","endLine":6,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/chart/getPayloadConfigFromPayload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/chart/useTooltipLabel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/dataQualityCharts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/sheet.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":20,"column":9,"nodeType":null,"messageId":"deprecation","endLine":20,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":59,"column":9,"nodeType":null,"messageId":"deprecation","endLine":59,"endColumn":19,"suppressions":[{"kind":"directive","justification":"False positive, ElementRef is not deprecated."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/filter-eslint-errors.cjs","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): filter-eslint-errors.cjs"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fs = require('fs');\nconst results = JSON.parse(fs.readFileSync('lint-results.json', 'utf8'));\nconst strictBooleanErrors = results.flatMap(file => file.messages).filter(msg => msg.ruleId === '@typescript-eslint/strict-boolean-expressions');\nconsole.log(JSON.stringify(strictBooleanErrors, null, 2));","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/realtime/connectionManagementHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/realtime/createEventSourceConnection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/realtime/setupEventSourceListeners.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/realtime/useAutoConnect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/realtime/useConnectionManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/realtime/useConnectionState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/realtime/useEventHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useAdminAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useAuthHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useDataCleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useFoodTruckDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useFoodTruckFinder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useRealtimeAdminEvents.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":75,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":82,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":82,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef } from 'react';\nimport { RealtimeEvent } from './useRealtimeAdminEvents.types';\nimport { RealtimeMetrics } from '@/lib/types';\nimport { useConnectionState } from './realtime/useConnectionState';\nimport { useConnectionManagement } from './realtime/useConnectionManagement';\nimport { useEventHandlers } from './realtime/useEventHandlers';\n\n/**\n * SOTA Real-time Admin Dashboard Hook\n *\n * Provides real-time updates for admin dashboard using Server-Sent Events (SSE)\n * Implements automatic reconnection, error handling, and event filtering\n */\n\ninterface UseRealtimeAdminEventsOptions {\n  autoConnect?: boolean;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n  eventFilter?: (event: RealtimeEvent) => boolean;\n}\n\ninterface UseRealtimeAdminEventsReturn {\n  // Connection state\n  isConnected: boolean;\n  isConnecting: boolean;\n  connectionError: string | undefined;\n\n  // Data\n  latestMetrics: RealtimeMetrics | undefined;\n  recentEvents: RealtimeEvent[];\n\n  // Controls\n  connect: () => void;\n  disconnect: () => void;\n  clearEvents: () => void;\n\n  // Statistics\n  connectionAttempts: number;\n  lastEventTime: Date | undefined;\n}\n\nexport function useRealtimeAdminEvents(\n  options: UseRealtimeAdminEventsOptions = {},\n): UseRealtimeAdminEventsReturn {\n  const { autoConnect = true, reconnectInterval = 5000, maxReconnectAttempts = 10, eventFilter } = options;\n\n  const eventSourceRef = useRef<EventSource>();\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n  const isManuallyDisconnectedRef = useRef(false);\n\n  const {\n    isConnected,\n    isConnecting,\n    connectionError,\n    latestMetrics,\n    recentEvents,\n    connectionAttempts,\n    lastEventTime,\n    setLastEventTime,\n    setLatestMetrics,\n    setRecentEvents,\n  } = useConnectionState();\n\n  const handleEvent = useEventHandlers(\n    eventFilter,\n    setLastEventTime,\n    setLatestMetrics,\n    setRecentEvents,\n  );\n\n  const { connect, disconnect, clearEvents } = useConnectionManagement({\n    eventSourceRef,\n    reconnectTimeoutRef,\n    isManuallyDisconnectedRef,\n    connectionState,\n    handleEvent,\n    maxReconnectAttempts,\n    reconnectInterval,\n  });\n\n  // Auto-connect effect\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n    return () => {\n      disconnect();\n    };\n  }, [autoConnect, connect, disconnect]);\n\n  return {\n    isConnected,\n    isConnecting,\n    connectionError,\n    latestMetrics,\n    recentEvents,\n    connect,\n    disconnect,\n    clearEvents,\n    connectionAttempts,\n    lastEventTime,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useRealtimeAdminEvents.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useRealtimeAdminEventsHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useSearchFiltersLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useSidebarKeyboardShortcut.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useSystemAlerts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/hooks/useTruckCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/jest.setup.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): jest.setup.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Ensure environment variables are loaded\nrequire('dotenv').config({ path: '.env.local' });\n\n// Original Jest setup imports\nimport '@testing-library/jest-dom';\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/ScraperEngine.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":155,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":155,"endColumn":31}],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":326,"column":24,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":326,"endColumn":37,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical user agent selection."}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":342,"column":29,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":342,"endColumn":42,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical random delays."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from './firecrawl'; // Import the firecrawl singleton\nimport * as crypto from 'node:crypto'; // Node.js crypto for secure randomness\n\ninterface InstagramPost {\n  id: string;\n  caption: string;\n  timestamp: string;\n  location: string;\n  hashtags: string[];\n  engagement: { likes: number; comments: number };\n}\n\ninterface InstagramProfile {\n  followers: number;\n  following: number;\n  posts_count: number;\n  bio: string;\n  contact_info: { email: string; phone: string };\n}\n\ninterface FacebookPost {\n  id: string;\n  content: string;\n  timestamp: string;\n  reactions: { likes: number; loves: number; shares: number };\n  comments: number;\n}\n\ninterface FacebookPageInfo {\n  likes: number;\n  followers: number;\n  check_ins: number;\n  about: string;\n  hours: Record<string, string>;\n}\n\ninterface TwitterTweet {\n  id: string;\n  text: string;\n  timestamp: string;\n  retweets: number;\n  likes: number;\n  replies: number;\n  location: string;\n}\n\ninterface TwitterProfile {\n  followers: number;\n  following: number;\n  tweets_count: number;\n  bio: string;\n  location: string;\n  website: string;\n}\n\ninterface InstagramData {\n  posts: InstagramPost[];\n  profile: InstagramProfile;\n}\n\ninterface FacebookData {\n  posts: FacebookPost[];\n  page_info: FacebookPageInfo;\n}\n\ninterface TwitterData {\n  tweets: TwitterTweet[];\n  profile: TwitterProfile;\n}\n\nexport interface WebsiteScrapeData {\n  markdown?: string;\n  html?: string;\n  metadata?: Record<string, unknown>;\n  is_fallback?: boolean;\n}\n\nexport interface ExtractedHTMLData {\n  name?: string;\n  location?: string;\n  phone?: string;\n  hours?: string;\n  menu?: { item: string; price: string }[];\n}\n\ninterface ScrapeResult {\n  success: boolean;\n  error?: string;\n  data?: InstagramData | FacebookData | TwitterData | WebsiteScrapeData | ExtractedHTMLData;\n  timestamp: string;\n  source: string;\n  note?: string;\n}\n\n// Core scraping engine with anti-detection measures\nexport class ScraperEngine {\n  private userAgents: string[];\n  private requestDelay: number;\n  private maxRetries: number;\n\n  constructor() {\n    this.userAgents = [\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    ];\n    this.requestDelay = 2000;\n    this.maxRetries = 3;\n  }\n\n  private async performFallbackScrape(url: string): Promise<ScrapeResult> {\n    try {\n      const response = await fetch(url, { headers: { 'User-Agent': this.getRandomUserAgent() } });\n      if (!response.ok) {\n        throw new Error(\n          `HTTP error ${response.status}: ${response.statusText} during fallback fetch.`,\n        );\n      }\n      const htmlContent = await response.text();\n      return {\n        success: true,\n        data: {\n          html: htmlContent,\n          is_fallback: true,\n        },\n        timestamp: new Date().toISOString(),\n        source: url,\n        note: 'Fetched using basic fetch as Firecrawl failed.',\n      };\n    } catch (fallbackError) {\n      const errMsg =\n        fallbackError instanceof Error ? fallbackError.message : 'Unknown fallback fetch error';\n      console.warn(`Fallback fetch error for ${url}:`, errMsg);\n      return {\n        success: false,\n        error: \"That didn't work, please try again later.\",\n        timestamp: new Date().toISOString(),\n        source: url,\n      };\n    }\n  }\n\n  async scrapeWebsite(url: string, _selectors?: Record<string, string>): Promise<ScrapeResult> {\n    try {\n      const firecrawlResult = await firecrawl.scrapeUrl(url, {\n        formats: ['markdown', 'html'],\n        onlyMainContent: true,\n      });\n\n      if (firecrawlResult.success !== true || firecrawlResult.data == undefined) {\n        throw new Error(firecrawlResult.error ?? 'Firecrawl scraping failed to return data.');\n      }\n\n      const returnedData: WebsiteScrapeData = {};\n      if (firecrawlResult.data && typeof firecrawlResult.data === 'object') {\n        const firecrawlData = firecrawlResult.data as Record<string, unknown>;\n\n        if (typeof firecrawlData.markdown === 'string' && firecrawlData.markdown !== '') {\n          returnedData.markdown = firecrawlData.markdown;\n        }\n        if (typeof firecrawlData.html === 'string' && firecrawlData.html !== '') {\n          returnedData.html = firecrawlData.html;\n        }\n        if (firecrawlData.metadata != undefined && typeof firecrawlData.metadata === 'object') {\n          returnedData.metadata = firecrawlData.metadata as Record<string, unknown>;\n        }\n      }\n\n      if (\n        (returnedData.markdown == undefined || returnedData.markdown === '') &&\n        (returnedData.html == undefined || returnedData.html === '')\n      ) {\n        throw new Error('Firecrawl returned no markdown or HTML content.');\n      }\n\n      return {\n        success: true,\n        data: returnedData,\n        timestamp: new Date().toISOString(),\n        source: url,\n      };\n    } catch (error: unknown) {\n      console.warn(`Scraping error for ${url} using Firecrawl:`, error);\n      console.info(`Falling back to basic fetch for ${url}`);\n      return await this.performFallbackScrape(url);\n    }\n  }\n\n  async scrapeSocialMedia(platform: string, handle: string): Promise<ScrapeResult> {\n    try {\n      await this.randomDelay();\n\n      switch (platform) {\n        case 'instagram': {\n          return await this.scrapeInstagram(handle);\n        }\n        case 'facebook': {\n          return await this.scrapeFacebook(handle);\n        }\n        case 'twitter': {\n          return await this.scrapeTwitter(handle);\n        }\n        default: {\n          throw new Error(`Unsupported platform: ${platform}`);\n        }\n      }\n    } catch (error) {\n      console.warn(`Social media scraping error for ${platform}/${handle}:`, error);\n      return {\n        success: false,\n        error: \"That didn't work, please try again later.\",\n        timestamp: new Date().toISOString(),\n        source: `social_media:${platform}:${handle}`,\n      };\n    }\n  }\n\n  private async scrapeInstagram(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    const posts: InstagramPost[] = [\n      {\n        id: 'post_001',\n        caption: 'Fresh tacos available now at Mission St! 🌮 #foodtruck #tacos',\n        timestamp: new Date(Date.now() - 3_600_000).toISOString(),\n        location: 'Mission St, San Francisco',\n        hashtags: ['foodtruck', 'tacos', 'fresh'],\n        engagement: { likes: 45, comments: 8 },\n      },\n    ];\n    const profile: InstagramProfile = {\n      followers: 1250,\n      following: 340,\n      posts_count: 156,\n      bio: 'Best tacos in SF 🌮 Follow for daily locations!',\n      contact_info: {\n        email: 'contact@tacoparadise.com',\n        phone: '+1-555-0456',\n      },\n    };\n    const data: InstagramData = { posts, profile };\n    return {\n      success: true,\n      data,\n      timestamp: new Date().toISOString(),\n      source: `instagram:${handle}`,\n    };\n  }\n\n  private async scrapeFacebook(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    const posts: FacebookPost[] = [\n      {\n        id: 'fb_post_001',\n        content: \"Today we'll be at Union Square from 11 AM to 3 PM! Come try our new BBQ burger!\",\n        timestamp: new Date(Date.now() - 7_200_000).toISOString(),\n        reactions: { likes: 23, loves: 5, shares: 3 },\n        comments: 12,\n      },\n    ];\n    const page_info: FacebookPageInfo = {\n      likes: 890,\n      followers: 1100,\n      check_ins: 450,\n      about: 'Gourmet food truck serving the Bay Area',\n      hours: {\n        monday: '11:00-15:00',\n        tuesday: '11:00-15:00',\n        wednesday: '11:00-15:00',\n        thursday: '11:00-15:00',\n        friday: '11:00-20:00',\n        saturday: '12:00-20:00',\n        sunday: '12:00-16:00',\n      },\n    };\n    const data: FacebookData = { posts, page_info };\n    return {\n      success: true,\n      data,\n      timestamp: new Date().toISOString(),\n      source: `facebook:${handle}`,\n    };\n  }\n\n  private async scrapeTwitter(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    const tweets: TwitterTweet[] = [\n      {\n        id: 'tweet_001',\n        text: 'LIVE at Dolores Park! Fresh burritos and quesadillas available now 🌯',\n        timestamp: new Date(Date.now() - 1_800_000).toISOString(),\n        retweets: 8,\n        likes: 34,\n        replies: 5,\n        location: 'Dolores Park, San Francisco',\n      },\n    ];\n    const profile: TwitterProfile = {\n      followers: 2340,\n      following: 567,\n      tweets_count: 1890,\n      bio: '🚚 SF Food Truck | Fresh Mexican Food | Follow for locations',\n      location: 'San Francisco, CA',\n      website: 'https://tacoparadise.com',\n    };\n    const data: TwitterData = { tweets, profile };\n    return {\n      success: true,\n      data,\n      timestamp: new Date().toISOString(),\n      source: `twitter:${handle}`,\n    };\n  }\n\n  private getRandomUserAgent(): string {\n    // Use Node.js crypto for stronger randomness if available, fallback to Math.random otherwise.\n    let idx: number;\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\n      idx = array[0] % this.userAgents.length;\n    } else if (typeof crypto.randomInt === 'function') {\n      idx = crypto.randomInt(0, this.userAgents.length);\n    } else {\n      // Fallback to Math.random for environments where crypto is not available.\n      // This is acceptable for non-security-critical random number generation like user agent selection.\n      // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for non-security-critical user agent selection.\n      idx = Math.floor(Math.random() * this.userAgents.length);\n    }\n    return this.userAgents[idx];\n  }\n\n  private randomDelay(): Promise<void> {\n    let randomMs: number;\n    if (globalThis.window?.crypto?.getRandomValues != undefined) {\n      const array = globalThis.window.crypto.getRandomValues(new Uint32Array(1));\n      randomMs = array[0] % 1000;\n    } else if (typeof crypto.randomInt === 'function') {\n      randomMs = crypto.randomInt(0, 1000);\n    } else {\n      // Fallback to Math.random for environments where crypto is not available.\n      // This is acceptable for non-security-critical random delays.\n      // eslint-disable-next-line sonarjs/pseudo-random -- Math.random is acceptable for non-security-critical random delays.\n      randomMs = Math.floor(Math.random() * 1000);\n    }\n    const delay = this.requestDelay + randomMs;\n    return new Promise((resolve) => setTimeout(resolve, delay));\n  }\n\n  handleRateLimit(retryAfter: number): Promise<void> {\n    console.info(`Rate limited. Waiting ${retryAfter} seconds before retry...`);\n    return new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));\n  }\n\n  async retryWithBackoff<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = this.maxRetries,\n  ): Promise<T> {\n    let lastError: unknown;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt += 1) {\n      try {\n        return await operation();\n      } catch (error: unknown) {\n        lastError = error;\n        if (attempt === maxRetries) {\n          throw lastError instanceof Error ? lastError : new Error(String(lastError));\n        }\n\n        const backoffDelay = Math.pow(2, attempt) * 1000;\n        console.info(`Attempt ${attempt} failed. Retrying in ${backoffDelay}ms...`);\n        await new Promise((resolve) => setTimeout(resolve, backoffDelay));\n      }\n    }\n\n    throw lastError instanceof Error ? lastError : new Error('Request failed after all retries');\n  }\n}\n\ninterface LocationData {\n  current?: {\n    lat?: number;\n    lng?: number;\n    address?: string;\n  };\n}\n\ninterface ContactInfo {\n  phone?: string;\n  email?: string;\n}\n\ninterface OperatingHours {\n  [key: string]: {\n    open: string;\n    close: string;\n    closed: boolean;\n  };\n}\n\ninterface MenuItem {\n  name: string;\n  description?: string;\n  price: number;\n  dietary_tags?: string[];\n}\n\ninterface MenuCategory {\n  category: string;\n  items: MenuItem[];\n}\n\ninterface TruckData {\n  name: string;\n  location: LocationData;\n  contact?: ContactInfo;\n  operating_hours?: OperatingHours;\n  menu?: MenuCategory[];\n  last_updated?: string;\n}\n\nexport class DataQualityAssessor {\n  private assessBasicInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.name == undefined || truckData.name.trim().length === 0) {\n      issues.push('Missing or empty truck name');\n      score -= 20;\n    }\n    return score;\n  }\n\n  private assessLocationInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.location?.current == undefined) {\n      issues.push('Missing current location data');\n      score -= 25;\n    } else {\n      if (\n        truckData.location.current.lat == undefined ||\n        truckData.location.current.lng == undefined\n      ) {\n        issues.push('Missing GPS coordinates');\n        score -= 15;\n      }\n      if (\n        truckData.location.current.address == undefined ||\n        truckData.location.current.address === ''\n      ) {\n        issues.push('Missing address information');\n        score -= 10;\n      }\n    }\n    return score;\n  }\n\n  private assessContactInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.contact) {\n      const hasPhone =\n        typeof truckData.contact.phone === 'string' && truckData.contact.phone.trim() !== '';\n      const hasEmail =\n        typeof truckData.contact.email === 'string' && truckData.contact.email.trim() !== '';\n\n      if (!hasPhone && !hasEmail) {\n        issues.push('No phone or email contact available');\n        score -= 15;\n      }\n      if (hasPhone && !this.isValidPhone(truckData.contact.phone as string)) {\n        issues.push('Invalid phone number format');\n        score -= 5;\n      }\n      if (hasEmail && !this.isValidEmail(truckData.contact.email as string)) {\n        issues.push('Invalid email format');\n        score -= 5;\n      }\n    } else {\n      issues.push('Missing contact information');\n      score -= 20;\n    }\n    return score;\n  }\n\n  private assessOperatingHours(truckData: TruckData, issues: string[], score: number): number {\n    if (\n      truckData.operating_hours == undefined ||\n      Object.keys(truckData.operating_hours).length === 0\n    ) {\n      issues.push('Missing operating hours');\n      score -= 15;\n    }\n    return score;\n  }\n\n  private assessMenuInfo(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.menu == undefined || truckData.menu.length === 0) {\n      issues.push('Missing menu information');\n      score -= 10;\n    } else {\n      const menuIssues = this.validateMenuData(truckData.menu);\n      issues.push(...menuIssues);\n      score -= menuIssues.length * 2;\n    }\n    return score;\n  }\n\n  private assessLastUpdated(truckData: TruckData, issues: string[], score: number): number {\n    if (truckData.last_updated != undefined && truckData.last_updated !== '') {\n      const lastUpdate = new Date(truckData.last_updated);\n      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);\n\n      if (daysSinceUpdate > 7) {\n        issues.push('Data is more than 7 days old');\n        score -= 10;\n      } else if (daysSinceUpdate > 3) {\n        issues.push('Data is more than 3 days old');\n        score -= 5;\n      }\n    }\n    return score;\n  }\n\n  assessTruckData(truckData: TruckData): { score: number; issues: string[] } {\n    const issues: string[] = [];\n    let score = 100;\n\n    score = this.assessBasicInfo(truckData, issues, score);\n    score = this.assessLocationInfo(truckData, issues, score);\n    score = this.assessContactInfo(truckData, issues, score);\n    score = this.assessOperatingHours(truckData, issues, score);\n    score = this.assessMenuInfo(truckData, issues, score);\n    score = this.assessLastUpdated(truckData, issues, score);\n\n    return {\n      score: Math.max(0, score) / 100,\n      issues,\n    };\n  }\n\n  private validateMenuCategory(\n    category: MenuCategory,\n    categoryIndex: number,\n    issues: string[],\n  ): void {\n    if (category.category == undefined || category.category.trim().length === 0) {\n      issues.push(`Menu category ${categoryIndex + 1} missing name`);\n    }\n  }\n\n  private validateMenuItems(category: MenuCategory, issues: string[]): void {\n    if (category.items == undefined || category.items.length === 0) {\n      issues.push(`Menu category \"${category.category ?? 'Unknown'}\" has no items`);\n    } else {\n      for (const [itemIndex, item] of category.items.entries()) {\n        if (item.name == undefined || item.name.trim().length === 0) {\n          issues.push(\n            `Menu item ${itemIndex + 1} in \"${category.category ?? 'Unknown'}\" missing name`,\n          );\n        }\n        if (typeof item.price !== 'number' || item.price <= 0) {\n          issues.push(`Menu item \"${item.name ?? 'Unknown'}\" has invalid price`);\n        }\n      }\n    }\n  }\n\n  private validateMenuData(menu: MenuCategory[]): string[] {\n    const issues: string[] = [];\n\n    for (const [categoryIndex, category] of menu.entries()) {\n      this.validateMenuCategory(category, categoryIndex, issues);\n      this.validateMenuItems(category, issues);\n    }\n\n    return issues;\n  }\n  private isValidPhone(phone: string): boolean {\n    // Regex for phone number validation. Not vulnerable to super-linear runtime due to backtracking.\n    // Accepts +, digits, spaces, dashes, and parentheses. At least 10 digits.\n    const phoneRegex = /^\\+?[\\d\\s\\-()]{10,}$/;\n    return phoneRegex.test(phone);\n  }\n  private isValidEmail(email: string): boolean {\n    // Regex for email validation optimized to avoid backtracking\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);\n  }\n}\n\ninterface GeminiLocationData {\n  address: string;\n  city: string;\n  state: string;\n  coordinates: {\n    lat?: number;\n    lng?: number;\n  };\n  confidence: number;\n}\n\ninterface GeminiOperatingHours {\n  monday: { open: string; close: string; closed: boolean };\n  tuesday: { open: string; close: string; closed: boolean };\n  wednesday: { open: string; close: string; closed: boolean };\n  thursday: { open: string; close: string; closed: boolean };\n  friday: { open: string; close: string; closed: boolean };\n  saturday: { open: string; close: string; closed: boolean };\n  sunday: { open: string; close: string; closed: boolean };\n}\n\ninterface GeminiSentimentAnalysis {\n  sentiment: 'positive' | 'negative' | 'neutral';\n  score: number;\n  key_topics: string[];\n  summary: string;\n}\n\nexport class GeminiDataProcessor {\n  private _apiKey: string;\n  private _baseUrl: string;\n  private requestCount: number;\n  private tokenCount: number;\n  private dailyLimit: { requests: number; tokens: number };\n\n  constructor(apiKey: string) {\n    this._apiKey = apiKey;\n    this._baseUrl = 'https://generativelanguage.googleapis.com/v1beta';\n    this.requestCount = 0;\n    this.tokenCount = 0;\n    this.dailyLimit = { requests: 1500, tokens: 32_000 };\n  }\n  async processMenuData(rawMenuText: string): Promise<{ categories: MenuCategory[] }> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Parse the following food truck menu text and return a structured JSON format:\n        \n        ${rawMenuText}\n        \n        Return format:\n        {\n          \"categories\": [\n            {\n              \"name\": \"category_name\",\n              \"items\": [\n                {\n                  \"name\": \"item_name\",\n                  \"description\": \"item_description\",\n                  \"price\": 0.00,\n                  \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", etc.]\n                }\n              ]\n            }\n          ]\n        }\n        \n        Only return valid JSON, no additional text.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n\n      // Ensure type safety for parsed response\n      const parsed: unknown = JSON.parse(response);\n      if (\n        typeof parsed !== 'object' ||\n        parsed == undefined ||\n        !('categories' in parsed) ||\n        !Array.isArray((parsed as { categories: unknown[] }).categories)\n      ) {\n        throw new Error('Invalid Gemini menu response: missing or malformed categories array');\n      }\n      return parsed as { categories: MenuCategory[] };\n    } catch (error) {\n      console.error('Error processing menu data with Gemini:', error);\n      throw error;\n    }\n  }\n\n  async extractLocationFromText(text: string): Promise<GeminiLocationData> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Extract location information from the following text and return structured data:\n        \n        \"${text}\"\n        \n        Return format:\n        {\n          \"address\": \"full_address\",\n          \"city\": \"city_name\",\n          \"state\": \"state\",\n          \"coordinates\": {\n            \"lat\": 0.0,\n            \"lng\": 0.0\n          },\n          \"confidence\": 0.95\n        }\n        \n        If coordinates cannot be determined, set them to undefined. Only return valid JSON.\n      `;\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsedResponse: unknown = JSON.parse(response);\n      const validatedResponse = this.validateGeminiLocationResponse(parsedResponse);\n      return validatedResponse;\n    } catch (error) {\n      console.error('Error extracting location with Gemini:', error);\n      throw error;\n    }\n  }\n\n  private validateGeminiLocationResponse(parsedResponse: unknown): GeminiLocationData {\n    if (\n      parsedResponse == undefined ||\n      typeof parsedResponse !== 'object' ||\n      !('coordinates' in parsedResponse) ||\n      typeof (parsedResponse as Record<string, unknown>).coordinates !== 'object'\n    ) {\n      throw new Error('Invalid Gemini location response');\n    }\n    const coordinates = (parsedResponse as { coordinates?: { lat?: unknown; lng?: unknown } })\n      .coordinates;\n    if (coordinates && typeof coordinates === 'object') {\n      if (typeof coordinates.lat !== 'number') {\n        (coordinates as { lat?: number }).lat = undefined;\n      }\n      if (typeof coordinates.lng !== 'number') {\n        (coordinates as { lng?: number }).lng = undefined;\n      }\n    }\n    return parsedResponse as GeminiLocationData;\n  }\n\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiOperatingHours> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Parse the following operating hours text and return standardized format:\n        \n        \"${hoursText}\"\n        \n        Return format:\n        {\n          \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\n        }\n          Use 24-hour format. If closed on a day, set \"closed\": true and omit open/close times.\n        Only return valid JSON.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsed: unknown = JSON.parse(response);\n      if (parsed == undefined || typeof parsed !== 'object') {\n        throw new Error('Invalid Gemini hours response');\n      }\n      return parsed as GeminiOperatingHours;\n    } catch (error) {\n      console.error('Error standardizing hours with Gemini:', error);\n      throw error;\n    }\n  }\n\n  async analyzeSentiment(reviewText: string): Promise<GeminiSentimentAnalysis> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Analyze the sentiment of this food truck review and extract key insights:\n        \n        \"${reviewText}\"\n        \n        Return format:\n        {\n          \"sentiment\": \"positive|negative|neutral\",\n          \"score\": 0.85,\n          \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\"],\n          \"summary\": \"brief_summary_of_review\"\n        }\n          Score should be between 0 (very negative) and 1 (very positive).\n        Only return valid JSON.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsed: unknown = JSON.parse(response);\n      if (parsed == undefined || typeof parsed !== 'object') {\n        throw new Error('Invalid Gemini sentiment response');\n      }\n      return parsed as GeminiSentimentAnalysis;\n    } catch (error) {\n      console.error('Error analyzing sentiment with Gemini:', error);\n      throw error;\n    }\n  }\n\n  private async makeGeminiRequest(prompt: string): Promise<string> {\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay\n    return this.getMockGeminiResponse(prompt);\n  }\n\n  private getMockGeminiResponse(prompt: string): string {\n    if (prompt.includes('menu text')) {\n      return JSON.stringify({\n        categories: [\n          {\n            name: 'Burgers',\n            items: [\n              {\n                name: 'Classic Cheeseburger',\n                description: 'Beef patty with cheese, lettuce, tomato',\n                price: 12.99,\n                dietary_tags: [],\n              },\n            ],\n          },\n        ],\n      });\n    } else if (prompt.includes('location information')) {\n      return JSON.stringify({\n        address: '123 Market St, San Francisco, CA 94105',\n        city: 'San Francisco',\n        state: 'CA',\n        coordinates: {\n          lat: 37.7749,\n          lng: -122.4194,\n        },\n        confidence: 0.95,\n      });\n    } else if (prompt.includes('operating hours')) {\n      return JSON.stringify({\n        monday: { open: '11:00', close: '15:00', closed: false },\n        tuesday: { open: '11:00', close: '15:00', closed: false },\n        wednesday: { open: '11:00', close: '15:00', closed: false },\n        thursday: { open: '11:00', close: '15:00', closed: false },\n        friday: { open: '11:00', close: '20:00', closed: false },\n        saturday: { open: '12:00', close: '20:00', closed: false },\n        sunday: { open: '12:00', close: '16:00', closed: false },\n      });\n    } else if (prompt.includes('sentiment')) {\n      return JSON.stringify({\n        sentiment: 'positive',\n        score: 0.85,\n        key_topics: ['food_quality', 'service'],\n        summary: 'Customer enjoyed the food and service',\n      });\n    }\n    return '{\"processed\": true}';\n  }\n\n  private canMakeRequest(): boolean {\n    return this.requestCount < this.dailyLimit.requests && this.tokenCount < this.dailyLimit.tokens;\n  }\n\n  private updateUsageCounters(requests: number, tokens: number): void {\n    this.requestCount += requests;\n    this.tokenCount += tokens;\n  }\n\n  getUsageStats(): {\n    requests: { used: number; limit: number; remaining: number };\n    tokens: { used: number; limit: number; remaining: number };\n  } {\n    return {\n      requests: {\n        used: this.requestCount,\n        limit: this.dailyLimit.requests,\n        remaining: this.dailyLimit.requests - this.requestCount,\n      },\n      tokens: {\n        used: this.tokenCount,\n        limit: this.dailyLimit.tokens,\n        remaining: this.dailyLimit.tokens - this.tokenCount,\n      },\n    };\n  }\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":58,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":58,"endColumn":23,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for non-security-critical logging IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/admin/automated-cleanup/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/admin/automated-cleanup/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/admin/data-cleanup/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/admin/data-quality/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/admin/oauth-status/helpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":334,"column":7,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":334,"endColumn":50,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[13368,13411],"text":"((status.supabase.authSettings?.googleEnabled) ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[13368,13411],"text":"((status.supabase.authSettings?.googleEnabled) === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":325,"column":59,"nodeType":null,"endLine":325,"endColumn":62,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[13179,13182],"text":"!="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabase } from '@/lib/supabase';\nimport { OAuthStatus } from './types';\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\n/**\n * Handles a GET request to retrieve OAuth configuration status.\n * @example\n * handleGetRequest(request)\n * Returns a JSON response with OAuth status details and legacy format.\n * @param {NextRequest} _request - The incoming request object.\n * @returns {NextResponse} JSON response indicating the current OAuth status.\n * @description\n *   - Retrieves the current OAuth configuration status from the server.\n *   - Adapts the response to include both modern and legacy format details.\n *   - Provides a step-by-step legacy configuration guide if OAuth is not ready.\n */\nexport async function handleGetRequest(_request: NextRequest) {\n  const status = await getOAuthStatus();\n\n  return NextResponse.json({\n    success: true,\n    ...status,\n    legacy_format: {\n      oauth_status: status.overall_status,\n      message: getStatusMessage(status.overall_status),\n      configuration_steps:\n        status.overall_status === 'ready'\n          ? undefined\n          : [\n              '1. Go to Supabase Dashboard > Authentication > Providers',\n              '2. Enable Google provider',\n              '3. Add Google OAuth Client ID and Secret',\n              '4. Configure redirect URLs',\n              '5. Test OAuth flow',\n            ],\n    },\n  });\n}\n\n// 1. Refactor nested template literals in generateOAuthTestUrl\nfunction generateOAuthTestUrl(baseUrl: string): string {\n  const redirectPath = `${baseUrl}/auth/callback`;\n  const encodedRedirect = encodeURIComponent(redirectPath);\n  return (\n    process.env.NEXT_PUBLIC_SUPABASE_URL +\n    '/auth/v1/authorize?provider=google&redirect_to=' +\n    encodedRedirect\n  );\n}\n\n/**\n * Handles a post request to generate an OAuth test URL based on the environment.\n * @example\n * handlePostRequest()\n * {\n *   success: true,\n *   message: 'OAuth test URL generated',\n *   test_url: 'http://localhost:3000/...',\n *   environment: 'development',\n *   instructions: [ ... ],\n *   manual_test_steps: [ ... ],\n *   automation_commands: [ ... ]\n * }\n * @returns {object} An object containing success status, message, the test URL, the environment, instructions, manual test steps, and automation commands.\n * @description\n *   - Determines the base URL depending on whether the environment is production or development.\n *   - Utilizes `generateOAuthTestUrl` to construct the OAuth test URL.\n *   - Responds with JSON containing test instructions and automation commands for verifying OAuth functionality.\n */\nexport function handlePostRequest() {\n  // Removed _request parameter\n  const baseUrl =\n    process.env.NODE_ENV === 'production'\n      ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\n      : 'http://localhost:3000';\n\n  const testUrl = generateOAuthTestUrl(baseUrl);\n\n  return NextResponse.json({\n    success: true,\n    message: 'OAuth test URL generated',\n    test_url: testUrl,\n    environment: process.env.NODE_ENV ?? 'development',\n    instructions: [\n      '1. Open the test_url in a new browser tab',\n      '2. Complete Google OAuth flow',\n      '3. Verify redirect to admin dashboard',\n      '4. Check for proper role assignment',\n    ],\n    manual_test_steps: [\n      'Navigate to /login page',\n      'Click Google login button',\n      'Complete OAuth flow',\n      'Verify admin access',\n    ],\n    automation_commands: [\n      'npm run oauth:verify - Check configuration',\n      'npm run oauth:test:dev - Test development flow',\n      'npm run oauth:test:prod - Test production flow',\n    ],\n  });\n}\n\n/**\n * Retrieves the current OAuth status including configuration and connectivity information.\n * @example\n * getOAuthStatus().then(status => {\n *   console.log(status);\n * });\n * // Output: OAuthStatus object with current configuration and connection status details\n * @returns {Promise<OAuthStatus>} An object representing the current status of OAuth configuration and connectivity.\n * @description\n *   - The function assesses the connectivity and configuration of Supabase and its authentication settings.\n *   - It checks if the necessary environment variables are set.\n *   - Executes a series of asynchronous checks to determine if the OAuth provider is properly configured.\n *   - Recommendations for improving the OAuth setup are generated based on the current status.\n */\nasync function getOAuthStatus(): Promise<OAuthStatus> {\n  const status: OAuthStatus = {\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\n    supabase: {\n      connected: false,\n      projectId: 'zkwliyjjkdnigizidlln' as string,\n    },\n    environment_variables: {\n      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL !== undefined,\n      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY !== undefined,\n      supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY !== undefined,\n    },\n    oauth_flow: {\n      loginPageExists: true,\n      callbackRouteExists: true,\n      authProviderConfigured: false,\n    },\n    recommendations: [],\n    overall_status: 'not_configured',\n  };\n\n  await checkSupabaseConnection(status, supabase);\n  await checkSupabaseAuthSettings(status);\n  await testOAuthProvider(status, supabase);\n\n  status.recommendations = generateRecommendations(status);\n  status.overall_status = determineOverallStatus(status);\n\n  return status;\n}\n\n/**\n * Checks the connection status with Supabase and updates the `OAuthStatus`.\n * @example\n * checkSupabaseConnection(status, supabase)\n * // Updates the `status.supabase.connected` property based on connection success\n * @param {OAuthStatus} status - The current OAuthStatus object that tracks connection state and errors.\n * @param {SupabaseClient} supabase - The Supabase client instance used to interact with the database.\n * @returns {void} No explicit return value, operates directly on the `status` object.\n * @description\n *   - Attempts a query to the 'profiles' table to ensure Supabase connection.\n *   - Updates `status.supabase.connected` based on query success.\n *   - Captures and records detailed error messages in case of connection failure.\n */\nasync function checkSupabaseConnection(status: OAuthStatus, supabase: SupabaseClient) {\n  try {\n    const { error } = await supabase.from('profiles').select('count').limit(1);\n    if (error === null) {\n      status.supabase.connected = true;\n    } else {\n      status.supabase.error = error.message;\n    }\n  } catch (error: unknown) {\n    status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\n  }\n}\n\n/**\n * Checks and processes Supabase authentication settings.\n * @example\n * checkSupabaseAuthSettings(oAuthStatusInstance)\n * { supabase: { authSettings: { googleEnabled: true, signupEnabled: false, autoconfirm: true } } }\n * @param {OAuthStatus} status - An object that holds OAuth configuration status.\n * @returns {void} Modifies the passed status object with fetched authentication settings.\n * @description\n *   - The function fetches authentication settings from the Supabase URL defined in environment variables.\n *   - If Supabase settings are fetched successfully, it updates the OAuth status with authentication settings like Google integration, signup availability, and autoconfirm feature.\n *   - Provides a fallback log for cases where fetching settings require authentication.\n */\nasync function checkSupabaseAuthSettings(status: OAuthStatus) {\n  try {\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    if (typeof supabaseUrl === 'string' && supabaseUrl.length > 0) {\n      // Explicit check for undefined and empty string\n      const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\n      if (settingsResponse.ok === true) {\n        const settings: {\n          external?: { google?: boolean };\n          disable_signup?: boolean;\n          autoconfirm?: boolean;\n        } = (await settingsResponse.json()) as {\n          external?: { google?: boolean };\n          disable_signup?: boolean;\n          autoconfirm?: boolean;\n        };\n        status.supabase.authSettings = {\n          googleEnabled: settings.external?.google ?? false,\n          signupEnabled: settings.disable_signup === false,\n          autoconfirm: settings.autoconfirm ?? false,\n        };\n        if (settings.external?.google !== undefined) {\n          // Explicit check for undefined\n          status.oauth_flow.authProviderConfigured = true;\n        }\n      }\n    }\n  } catch {\n    console.info('Auth settings endpoint requires authentication (normal)');\n  }\n}\n\n/**\n * Tests the configuration of an OAuth provider and updates the status based on the result.\n * @example\n * testOAuthProvider(status, supabase)\n * undefined\n * @param {OAuthStatus} status - An object representing the current OAuth status and configuration.\n * @param {SupabaseClient} supabase - The Supabase client instance used to interact with the authentication system.\n * @returns {void} Does not return any value.\n * @description\n *   - Utilizes Google as the OAuth provider for the sign-in attempt.\n *   - Redirects to a localhost callback URL to simulate the OAuth process.\n *   - Direct usage of the Supabase auth method to initiate OAuth process.\n *   - Handles exceptions without altering the control flow and logs them for informational purposes.\n */\nasync function testOAuthProvider(status: OAuthStatus, supabase: SupabaseClient) {\n  try {\n    const { error: oauthError } = await supabase.auth.signInWithOAuth({\n      provider: 'google',\n      options: {\n        redirectTo: 'http://localhost:3000/auth/callback',\n        skipBrowserRedirect: true,\n      },\n    });\n    if (oauthError !== null && oauthError.message !== 'Provider not found') {\n      // Explicitly check for oauthError existence\n      status.oauth_flow.authProviderConfigured = true;\n    }\n  } catch (error: unknown) {\n    console.info('OAuth provider test failed (may be normal):', error);\n  }\n}\n\n/**\n * Generates a list of recommendations for OAuth configuration based on the current status.\n * @example\n * generateRecommendations(status)\n * ['❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable', ...]\n * @param {OAuthStatus} status - The current status of OAuth configuration and environment variables.\n * @returns {string[]} Array of recommendation messages to guide configuration setup.\n * @description\n *   - Checks for necessary environment variables and Supabase connectivity.\n *   - Provides guidance on enabling Google OAuth.\n *   - Suggests consulting documentation for further setup instructions.\n */\nfunction generateRecommendations(status: OAuthStatus): string[] {\n  const recommendations: string[] = [];\n\n  if (!status.environment_variables.supabaseUrl) {\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\n  }\n  if (!status.environment_variables.supabaseAnonKey) {\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n  }\n  if (!status.environment_variables.supabaseServiceKey) {\n    recommendations.push('❌ Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\n  }\n\n  if (!status.supabase.connected) {\n    recommendations.push('❌ Fix Supabase connection issue');\n    if (typeof status.supabase.error === 'string' && status.supabase.error.length > 0) {\n      recommendations.push(`   Error: ${status.supabase.error}`);\n    }\n  }\n\n  if (status.supabase.authSettings?.googleEnabled === true) {\n    recommendations.push('✅ Google OAuth provider is enabled');\n  } else {\n    recommendations.push(\n      '🔧 Enable Google OAuth provider in Supabase Dashboard',\n      '   Go to: Authentication > Providers > Google',\n    );\n  }\n\n  if (status.overall_status === 'ready') {\n    recommendations.push('🎉 OAuth configuration is complete!', '✅ Test the login flow at /login');\n  }\n\n  if (recommendations.length > 1) {\n    recommendations.push(\n      '📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions',\n      '🔧 Run: npm run oauth:verify for automated checks',\n    );\n  }\n\n  return recommendations;\n}\n\n/**\n * Determines the overall OAuth status based on provided conditions.\n * @example\n * determineOverallStatus(status)\n * 'ready'\n * @param {OAuthStatus} status - The status object containing configuration details.\n * @returns {'ready' | 'partial' | 'not_configured' | 'error'} Overall status derived from the evaluations.\n * @description\n *   - Evaluates connectivity and configuration status from various parameters within the status object.\n *   - Prioritizes returning 'error' if Supabase connection fails or if an error is detected.\n *   - Checks completeness of environment variables before proceeding to other status evaluations.\n *   - Distinguishes between 'ready' and 'partial' based on specific OAuth settings.\n */\nfunction determineOverallStatus(\n  status: OAuthStatus,\n): 'ready' | 'partial' | 'not_configured' | 'error' {\n  // eslint-disable-next-line sonarjs/different-types-comparison\n  if (!status.supabase.connected || status.supabase.error !== null) {\n    return 'error';\n  }\n\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\n  if (!envVarsComplete) {\n    return 'not_configured';\n  }\n\n  if (status.supabase.authSettings?.googleEnabled && status.oauth_flow.authProviderConfigured) {\n    return 'ready';\n  }\n\n  if (status.supabase.connected && envVarsComplete) {\n    return 'partial';\n  }\n\n  return 'not_configured';\n}\n\n/**\n * Retrieves a human-readable message based on the OAuth configuration status.\n * @example\n * getStatusMessage('ready')\n * 'Google OAuth is fully configured and ready to use'\n * @param {string} status - The current status of the OAuth configuration.\n * @returns {string} A message explaining the OAuth configuration status.\n * @description\n *   - Handles several predefined status cases.\n *   - Provides feedback for both success and error states.\n *   - Returns a default message for unrecognized statuses.\n */\nfunction getStatusMessage(status: string): string {\n  switch (status) {\n    case 'ready': {\n      return 'Google OAuth is fully configured and ready to use';\n    }\n    case 'partial': {\n      return 'Basic configuration complete, OAuth provider needs setup';\n    }\n    case 'not_configured': {\n      return 'Google OAuth is not configured';\n    }\n    case 'error': {\n      return 'Configuration error detected';\n    }\n    default: {\n      return 'Unknown configuration status';\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/admin/oauth-status/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/admin/realtime-events/handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":61,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":63,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":148,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":154,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":414,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":414,"endColumn":40,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for generating non-security-sensitive event IDs."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/admin/realtime-events/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/admin/scraping-metrics/handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FoodTruck' is defined but never used.","line":3,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":49},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":37,"column":24,"nodeType":null,"endLine":37,"endColumn":27,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[1618,1621],"text":"!="}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { ScrapingJobService, FoodTruckService } from '@/lib/supabase';\nimport { RealtimeMetrics, ScrapingJob, FoodTruck } from '@/lib/types';\n\nexport async function handleGetRequest(): Promise<NextResponse> {\n  const metrics = await getScrapingMetrics();\n  return NextResponse.json({\n    success: true,\n    data: metrics,\n    timestamp: new Date().toISOString(),\n  });\n}\n\n/**\n * Retrieves real-time scraping metrics from the database.\n * @example\n * getScrapingMetrics().then(metrics => console.log(metrics))\n * // { scrapingJobs: {...}, dataQuality: {...}, systemHealth: {...} }\n * @returns {Promise<RealtimeMetrics>} A promise that resolves to an object containing scraping job metrics, data quality information, and system health stats.\n * @description\n *   - Fetches data from ScrapingJobService and FoodTruckService to compute metrics.\n *   - Placeholder values are used for averageScore and recentChanges in dataQuality.\n *   - Computes the number of jobs by their status: running, completed, failed, and pending.\n */\nasync function getScrapingMetrics(): Promise<RealtimeMetrics> {\n  // Fetch real scraping metrics from database\n  const [allJobsResult, recentTrucksResult] = await Promise.all([\n    ScrapingJobService.getAllJobs(100, 0), // Get last 100 jobs for metrics\n    FoodTruckService.getAllTrucks(1000, 0), // Get trucks for processing count\n  ]);\n\n  // Type guard for allJobsResult\n  const allJobs: ScrapingJob[] = Array.isArray(allJobsResult) ? allJobsResult : [];\n\n  const recentTrucks =\n    typeof recentTrucksResult === 'object' &&\n    recentTrucksResult !== null &&\n    'trucks' in recentTrucksResult &&\n    Array.isArray(recentTrucksResult.trucks)\n      ? recentTrucksResult\n      : { trucks: [], total: 0 };\n\n  const typedJobs = allJobs as Array<{\n    status?: string;\n    started_at?: string;\n    completed_at?: string;\n  }>;\n  const successfulRuns = typedJobs.filter((job) => job.status === 'completed').length;\n  const failedRuns = typedJobs.filter((job) => job.status === 'failed').length;\n\n  return {\n    scrapingJobs: {\n      active: typedJobs.filter((job) => job.status === 'running').length,\n      completed: successfulRuns,\n      failed: failedRuns,\n      pending: typedJobs.filter((job) => job.status === 'pending').length,\n    },\n    dataQuality: {\n      averageScore: 0, // Placeholder, actual calculation might be complex\n      totalTrucks: recentTrucks.total,\n      recentChanges: 0, // Placeholder\n    },\n    systemHealth: {\n      status: 'healthy',\n      uptime: process.uptime(),\n      lastUpdate: new Date().toISOString(),\n    },\n  };\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/analytics/web-vitals/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/analytics/web-vitals/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/cron/auto-scrape/handlers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":110,"column":53,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":110,"endColumn":62,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4420,4429],"text":"(e.details != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4420,4429],"text":"(e.details ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4420,4429],"text":"(Boolean(e.details))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { autoScraper } from '@/lib/autoScraper';\nimport { scheduler } from '@/lib/scheduler';\nimport { logActivity } from '@/lib/activityLogger';\nimport { AutoScrapeResult } from './types';\n\n/**\n* Verifies the cron secret authorization header against a stored environment variable.\n* @example\n* verifyCronSecret(request)\n* NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n* @param {NextRequest} request - The incoming request object containing headers.\n* @returns {NextResponse | null} Returns an error response if authorization fails or if the secret is not set.\n* @description\n*   - Logs an error message if the CRON_SECRET environment variable is not configured or is empty.\n*   - Logs unauthorized attempts, including the provided authorization header value.\n*   - Relies on the Bearer token scheme for authorization.\n*/\nfunction verifyCronSecret(request: NextRequest): NextResponse | null {\n  const authHeader = request.headers.get('authorization');\n  const cronSecret = process.env.CRON_SECRET;\n\n  if (cronSecret === undefined || cronSecret === '') {\n    console.error('CRON_SECRET not configured');\n    return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n  }\n\n  if (authHeader !== `Bearer ${cronSecret}`) {\n    console.error('Unauthorized cron attempt:', authHeader);\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n  return undefined;\n}\n\nfunction logAutoScrapeStart() {\n  console.info('Starting automated scraping job...');\n  logActivity({\n    type: 'cron_job',\n    action: 'auto_scrape_started',\n    details: { timestamp: new Date().toISOString() },\n  });\n}\n\n/**\n * Logs the completion of an automated scraping job with pertinent details.\n * @example\n * logAutoScrapeCompletion(autoScrapeResult)\n * Automated scraping job completed successfully\n * @param {AutoScrapeResult} result - The result object containing details of the scraping job.\n * @returns {void} Does not return a value.\n * @description\n *   - Logs activity including the number of trucks processed and found, as well as any errors encountered.\n *   - Utilizes a standardized logActivity function to record job completion.\n *   - Converts the current timestamp to an ISO string format.\n *   - Provides a console message indicating successful job completion.\n */\nfunction logAutoScrapeCompletion(result: AutoScrapeResult) {\n  logActivity({\n    type: 'cron_job',\n    action: 'auto_scrape_completed',\n    details: {\n      timestamp: new Date().toISOString(),\n      trucksProcessed: result.trucksProcessed,\n      newTrucksFound: result.newTrucksFound,\n      errorsCount: result.errors?.length ?? 0,\n    },\n  });\n  console.info('Automated scraping job completed successfully');\n}\n\nfunction logAutoScrapeFailure(error: unknown) {\n  console.error('Auto-scraping cron job failed:', error);\n  logActivity({\n    type: 'cron_job',\n    action: 'auto_scrape_failed',\n    details: {\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error',\n    },\n  });\n}\n\n/**\n * Handles a POST request to initiate an auto-scraping process and returns the result.\n * @example\n * handlePostRequest(request)\n * { success: true, message: 'Auto-scraping completed successfully', data: { trucksProcessed: 10, newTrucksFound: 2, timestamp: '2023-08-23T18:25:43.511Z' } }\n * @param {NextRequest} request - The request object containing necessary parameters and headers for processing.\n * @returns {NextResponse} JSON response with either the success data or an error message.\n * @description\n *   - Validates request with a secret key before processing.\n *   - Logs scraping start and completion along with processed results.\n *   - Schedules follow-up tasks after successful scraping.\n *   - Catches and logs errors with a failure response in case of any exceptions during the process.\n */\nexport async function handlePostRequest(request: NextRequest) {\n  try {\n    const authResponse = verifyCronSecret(request);\n    if (authResponse) {\n      return authResponse;\n    }\n\n    logAutoScrapeStart();\n\n    const rawResult = await autoScraper.runAutoScraping();\n    // Map errors to string[] for compatibility\n    const result: AutoScrapeResult = {\n      trucksProcessed: rawResult.trucksProcessed,\n      newTrucksFound: rawResult.newTrucksFound,\n      errors: rawResult.errors?.map((e) => e.url + (e.details ? `: ${e.details}` : '')),\n    };\n    scheduler.scheduleFollowUpTasks(result);\n    logAutoScrapeCompletion(result);\n\n    return NextResponse.json({\n      success: true,\n      message: 'Auto-scraping completed successfully',\n      data: {\n        trucksProcessed: result.trucksProcessed,\n        newTrucksFound: result.newTrucksFound,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    logAutoScrapeFailure(error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Auto-scraping failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    );\n  }\n}\n\nexport function handleGetRequest() {\n  return NextResponse.json(\n    { error: 'Method not allowed. Use POST for cron jobs.' },\n    { status: 405 },\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/cron/auto-scrape/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/firecrawl/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/firecrawl/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/monitoring/api-usage/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/pipeline/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/pipeline/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/scheduler/data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/scheduler/handlers.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":172,"column":7,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":172,"endColumn":20,"suppressions":[{"kind":"directive","justification":"Math.random is acceptable for simulating task execution."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/scheduler/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/search/data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/search/filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/search/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/tavily/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/tavily/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/test-integration/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/test-integration/pipelineRunner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/test-integration/pipelineRunnerHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/test-integration/schemaMapper.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":8,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":8,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from '@/lib/types';\n\nexport function mapExtractedDataToTruckSchema(\n  extractedData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n  isDryRun: boolean,\n): FoodTruckSchema {\n  if (!extractedData || typeof extractedData !== 'object') {\n    throw new Error('Invalid extractedData for mapping.');\n  }\n\n  const name = extractedData.name ?? 'Unknown Test Truck';\n  const locationData = extractedData.current_location ?? {};\n  const fullAddress = [\n    locationData.address,\n    locationData.city,\n    locationData.state,\n    locationData.zip_code,\n  ]\n    .filter(Boolean)\n    .join(', ');\n\n  return {\n    name: name,\n    description: extractedData.description ?? undefined,\n    current_location: {\n      lat: locationData.lat ?? 0,\n      lng: locationData.lng ?? 0,\n      address: fullAddress ?? locationData.raw_text ?? undefined,\n      timestamp: new Date().toISOString(),\n    },\n    scheduled_locations: extractedData.scheduled_locations ?? undefined,\n    operating_hours: extractedData.operating_hours ?? undefined,\n    menu: (extractedData.menu ?? []).map((category: MenuCategory) => ({\n      name: category.name ?? 'Uncategorized',\n      items: (category.items ?? []).map((item: MenuItem) => ({\n        name: item.name ?? 'Unknown Item',\n        description: item.description ?? undefined,\n        price:\n          typeof item.price === 'number' || typeof item.price === 'string' ? item.price : undefined,\n        dietary_tags: item.dietary_tags ?? [],\n      })),\n    })),\n    contact_info: extractedData.contact_info ?? undefined,\n    social_media: extractedData.social_media ?? undefined,\n    cuisine_type: extractedData.cuisine_type ?? [],\n    price_range: extractedData.price_range ?? undefined,\n    specialties: extractedData.specialties ?? [],\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\n    verification_status: 'pending',\n    source_urls: [sourceUrl].filter(Boolean),\n    last_scraped_at: new Date().toISOString(),\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/test-integration/stageHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/api/trucks/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/auth/authHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":6,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":6,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[199,210],"text":"authHeader == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[200,210],"text":"(authHeader ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[199,210],"text":"!Boolean(authHeader)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/supabase';\n\nexport async function verifyAdminAccess(request: Request): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader) return false;\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data, error } = await supabase.auth.getUser(token);\n    const user = data?.user;\n\n    if (error || !user) return false;\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/data-quality/batchCleanup.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":192,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":192,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":269,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":269,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":433,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":433,"endColumn":32},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":519,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":519,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Batch Data Cleanup System\n * Implements automated data quality improvements and cleanup operations\n */\n\nimport { FoodTruckService, type FoodTruck, DataQualityService } from '@/lib/supabase';\nimport { DuplicatePreventionService } from './duplicatePrevention';\nimport { getPlaceholderPatterns, processTruckForPlaceholders } from './placeholderUtils';\n\nexport interface CleanupOperation {\n  type:\n    | 'normalize_phone'\n    | 'fix_coordinates'\n    | 'remove_placeholders'\n    | 'update_quality_scores'\n    | 'merge_duplicates';\n  description: string;\n  affectedCount: number;\n  successCount: number;\n  errorCount: number;\n  errors: string[];\n}\n\nexport interface BatchCleanupResult {\n  totalProcessed: number;\n  operations: CleanupOperation[];\n  summary: {\n    trucksImproved: number;\n    duplicatesRemoved: number;\n    qualityScoreImprovement: number;\n    placeholdersRemoved: number;\n  };\n  duration: number;\n}\n\ninterface MergeOperationContext {\n  operation: CleanupOperation;\n  processedIds: Set<string>;\n}\n\ninterface CoordinateProcessContext {\n  defaultLat: number;\n  defaultLng: number;\n  dryRun: boolean;\n  operation: CleanupOperation;\n}\n\n/**\n * Automated Data Quality Cleanup Service\n */\nexport class BatchCleanupService {\n  /**\n   * Run comprehensive data cleanup operations\n   */\n  static async runFullCleanup(\n    options: {\n      batchSize?: number;\n      dryRun?: boolean;\n      operations?: CleanupOperation['type'][];\n    } = {},\n  ): Promise<BatchCleanupResult> {\n    const startTime = Date.now();\n    const {\n      batchSize = 50,\n      dryRun = false,\n      operations = [\n        'remove_placeholders',\n        'normalize_phone',\n        'fix_coordinates',\n        'update_quality_scores',\n        'merge_duplicates',\n      ],\n    } = options;\n\n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\n    const result = this.initializeCleanupResult();\n    try {\n      const allTrucks = await FoodTruckService.getAllTrucks();\n      result.totalProcessed = allTrucks.total;\n      await this.processTrucksInBatches(allTrucks.trucks, {\n        batchSize,\n        operations,\n        dryRun,\n        result,\n      });\n      return this.finalizeCleanupResult(result, startTime);\n    } catch (error) {\n      console.error('Batch cleanup failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n  * Initializes and returns a new BatchCleanupResult object with default values.\n  * @example\n  * initializeCleanupResult()\n  * { totalProcessed: 0, operations: [], summary: { trucksImproved: 0, duplicatesRemoved: 0, qualityScoreImprovement: 0, placeholdersRemoved: 0 }, duration: 0 }\n  * @returns {BatchCleanupResult} A new BatchCleanupResult object with all properties set to initial default values.\n  */\n  private static initializeCleanupResult(): BatchCleanupResult {\n    return {\n      totalProcessed: 0,\n      operations: [],\n      summary: {\n        trucksImproved: 0,\n        duplicatesRemoved: 0,\n        qualityScoreImprovement: 0,\n        placeholdersRemoved: 0,\n      },\n      duration: 0,\n    };\n  }\n\n  private static finalizeCleanupResult(\n    result: BatchCleanupResult,\n    startTime: number,\n  ): BatchCleanupResult {\n    result.summary = this.calculateSummary(result.operations);\n    result.duration = Date.now() - startTime;\n\n    console.info(`Batch cleanup completed in ${result.duration}ms`);\n    return result;\n  }\n\n  /**\n   * Processes food trucks in batches, executing specified operations on each batch.\n   * @example\n   * processTrucksInBatches(truckList, { batchSize: 10, operations: ['clean'], dryRun: true, result: batchResult })\n   * // It executes 'clean' operation on batches of 10 trucks without making permanent changes.\n   * @param {FoodTruck[]} trucks - Array of food trucks to be processed in batches.\n   * @param {object} options - Options object containing batchSize, operations, dryRun, and result.\n   * @param {number} options.batchSize - Number of trucks in each batch.\n   * @param {CleanupOperation['type'][]} options.operations - Array of operation types to be executed on each batch.\n   * @param {boolean} options.dryRun - If true, operations are executed in simulation mode without permanent changes.\n   * @param {BatchCleanupResult} options.result - Stores the results of operations performed on batches.\n   * @returns {Promise<void>} Completes processing batches without a return value.\n   * @description\n   *   - Uses async function to allow non-blocking execution of operations.\n   *   - Collects and stores results of batch operations separately, keeping track of each operation's outcome.\n   *   - Iterates over arrays using slicing to dynamically create batches for processing.\n   */\n  private static async processTrucksInBatches(\n    trucks: FoodTruck[],\n    {\n      batchSize,\n      operations,\n      dryRun,\n      result,\n    }: {\n      batchSize: number;\n      operations: CleanupOperation['type'][];\n      dryRun: boolean;\n      result: BatchCleanupResult;\n    },\n  ): Promise<void> {\n    for (let i = 0; i < trucks.length; i += batchSize) {\n      const batch = trucks.slice(i, i + batchSize);\n      for (const op of operations) {\n        const opResult = await this.runOperation(op, batch, dryRun);\n        result.operations.push(opResult);\n      }\n    }\n  }\n\n  /**\n   * Run a specific cleanup operation\n   */\n  private static async runOperation(\n    type: CleanupOperation['type'],\n    trucks: FoodTruck[],\n    dryRun: boolean,\n  ): Promise<CleanupOperation> {\n    const operation: CleanupOperation = {\n      type,\n      description: this.getOperationDescription(type),\n      affectedCount: 0,\n      successCount: 0,\n      errorCount: 0,\n      errors: [],\n    };\n\n    const operationRunners = {\n      remove_placeholders: this.runRemovePlaceholders,\n      normalize_phone: this.runNormalizePhoneNumbers,\n      fix_coordinates: this.runFixCoordinates,\n      update_quality_scores: this.runUpdateQualityScores,\n      merge_duplicates: this.runMergeDuplicates,\n    };\n\n    try {\n      const runner = operationRunners[type];\n      if (runner) {\n        return await runner.call(this, trucks, dryRun, operation);\n      } \n        operation.errors.push(`Unknown operation type: ${String(type)}`);\n        return operation;\n      \n    } catch (error) {\n      operation.errors.push(\n        `Operation failed: ${error instanceof Error ? error.message : String(error)}`,\n      );\n      return operation;\n    }\n  }\n\n  private static runRemovePlaceholders = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.removePlaceholders(trucks, dryRun, operation);\n  };\n\n  private static runNormalizePhoneNumbers = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.normalizePhoneNumbers(trucks, dryRun, operation);\n  };\n\n  private static runFixCoordinates = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.fixCoordinates(trucks, dryRun, operation);\n  };\n\n  private static runUpdateQualityScores = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.updateQualityScores(trucks, dryRun, operation);\n  };\n\n  private static runMergeDuplicates = async (\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> => {\n    return await this.mergeDuplicates(trucks, dryRun, operation);\n  };\n\n  /**\n   * Remove placeholder and mock data\n   */\n  private static async removePlaceholders(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const placeholderPatterns = getPlaceholderPatterns();\n    const promises = trucks.map((truck) =>\n      this.processSingleTruckForPlaceholders(truck, placeholderPatterns, dryRun, operation),\n    );\n    await Promise.all(promises);\n    return operation;\n  }\n\n  private static async processSingleTruckForPlaceholders(\n    truck: FoodTruck,\n    patterns: RegExp[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    const updates = processTruckForPlaceholders(truck, patterns);\n    if (updates && Object.keys(updates).length > 0) {\n      await this.performUpdateOperation(truck.id, updates, dryRun, operation);\n    }\n  }\n\n  /**\n   * Perform an update operation on a specified food truck.\n   * @example\n   * performUpdateOperation('truck123', { name: 'New Name' }, true, cleanupOperation)\n   * // No direct return value; operation may log errors.\n   * @param {string} truckId - The unique identifier of the food truck to be updated.\n   * @param {Partial<FoodTruck>} updates - An object containing the fields to be updated.\n   * @param {boolean} dryRun - Flag indicating whether the operation should be a simulation without actual changes.\n   * @param {CleanupOperation} operation - An operation object that logs errors encountered during update.\n   * @returns {Promise<void>} A promise that resolves when the update operation is complete.\n   * @description\n   *   - If 'dryRun' is true, no updates are applied but actions are logged.\n   *   - Errors during update are caught and logged in the 'operation.errors' array.\n   */\n  private static async performUpdateOperation(\n    truckId: string,\n    updates: Partial<FoodTruck>,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    operation.affectedCount += 1;\n    if (dryRun) {\n      operation.successCount += 1;\n    } else {\n      try {\n        await FoodTruckService.updateTruck(truckId, updates);\n        operation.successCount += 1;\n      } catch (error) {\n        operation.errorCount += 1;\n        operation.errors.push(\n          `Failed to update truck ${truckId}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Normalize phone numbers to consistent format\n   */\n  private static async normalizePhoneNumbers(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const promises = trucks.map((truck) => {\n      if (truck.contact_info?.phone !== undefined) {\n        const originalPhone = truck.contact_info.phone;\n        const normalizedPhone = this.normalizePhone(originalPhone);\n\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\n          return this.applyPhoneNormalizationUpdate(truck, normalizedPhone, dryRun, operation);\n        }\n      }\n      return Promise.resolve();\n    });\n    await Promise.all(promises);\n    return operation;\n  }\n\n  /**\n   * Apply phone normalization update to a food truck's contact information.\n   * @example\n   * applyPhoneNormalizationUpdate(truckInstance, '+1234567890', false, operationInstance)\n   * // Normalizes and updates phone number of given truckInstance.\n   * @param {FoodTruck} truck - The food truck object whose phone number needs normalization.\n   * @param {string} normalizedPhone - The normalized phone number to update to the food truck's contact information.\n   * @param {boolean} dryRun - Flag indicating whether the operation is a dry run; updates are skipped if true.\n   * @param {CleanupOperation} operation - Object containing cleanup operation context including a record of errors.\n   * @returns {Promise<void>} Does not return a value, but potentially modifies the truck and operation objects.\n   * @description\n   *   - Executes the update operation only if `dryRun` is false.\n   *   - Pushes error messages to `operation.errors` on failure during the update process.\n   *   - Uses `FoodTruckService.updateTruck` for updating the contact information.\n   */\n  private static async applyPhoneNormalizationUpdate(\n    truck: FoodTruck,\n    normalizedPhone: string,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    operation.affectedCount += 1;\n    if (dryRun) {\n      operation.successCount += 1;\n    } else {\n      try {\n        await FoodTruckService.updateTruck(truck.id, {\n          contact_info: {\n            ...truck.contact_info,\n            phone: normalizedPhone,\n          },\n        });\n        operation.successCount += 1;\n      } catch (error) {\n        operation.errorCount += 1;\n        operation.errors.push(\n          `Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Helper to determine if coordinates need fixing and provide updates\n   */\n  private static getFixedCoordinates(\n    lat: number | undefined,\n    lng: number | undefined,\n    defaultLat: number,\n    defaultLng: number,\n  ): Partial<FoodTruck['current_location']> | undefined {\n    // Fix invalid coordinates (0,0 or undefined)\n    if (lat === undefined || lng === undefined || lat === 0 || lng === 0) {\n      return { lat: defaultLat, lng: defaultLng };\n    }\n    // Fix coordinates outside reasonable bounds for Charleston area\n    if (lat < 32 || lat > 34 || lng > -79 || lng < -81) {\n      return { lat: defaultLat, lng: defaultLng };\n    }\n    return undefined;\n  }\n\n  /**\n   * Fix invalid GPS coordinates\n   */\n  private static async fixCoordinates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const context: Omit<CoordinateProcessContext, 'operation'> = {\n      defaultLat: 32.7767,\n      defaultLng: -79.9311,\n      dryRun,\n    };\n\n    const promises = trucks.map((truck) =>\n      this.processSingleTruckCoordinates(truck, { ...context, operation }),\n    );\n    await Promise.all(promises);\n    return operation;\n  }\n\n  /**\n   * Processes coordinates for a single food truck, applying any necessary fixes.\n   * @example\n   * processSingleTruckCoordinates(truck, context)\n   * // No return value, function completes silently\n   * @param {FoodTruck} truck - The food truck whose coordinates are to be processed.\n   * @param {CoordinateProcessContext} context - Contains configuration and operation context for processing coordinates.\n   * @returns {Promise<void>} Returns a promise that resolves when the processing and possible updates are complete.\n   * @description\n   *   - Skips processing if the truck's current location is not available.\n   *   - Retrieves updates for fixed coordinates based on truck's current and default locations.\n   *   - Applies updates conditionally based on context settings such as `dryRun` and `operation`.\n   */\n  private static async processSingleTruckCoordinates(\n    truck: FoodTruck,\n    context: CoordinateProcessContext,\n  ): Promise<void> {\n    if (!truck.current_location) return;\n    const { defaultLat, defaultLng, dryRun, operation } = context;\n    const { lat, lng } = truck.current_location;\n    const updates = this.getFixedCoordinates(lat, lng, defaultLat, defaultLng);\n    if (updates) {\n      await this.applyCoordinateFixUpdate(truck, updates, dryRun, operation);\n    }\n  }\n\n  /**\n   * Applies coordinate updates for a food truck's current location.\n   * @example\n   * applyCoordinateFixUpdate(truck, { lat: 34.05, lng: -118.25 }, false, operation)\n   * // Updates the coordinates of the truck's location asynchronously.\n   * @param {FoodTruck} truck - The food truck object whose coordinates need correction.\n   * @param {Partial<FoodTruck['current_location']>} updates - The latitude and longitude updates to be applied.\n   * @param {boolean} dryRun - Flag to simulate the update without altering data.\n   * @param {CleanupOperation} operation - The cleanup operation instance used for error tracking.\n   * @returns {Promise<void>} Resolves when the coordinate update process is complete.\n   * @description\n   *   - Executes the update operation only if the dryRun flag is false.\n   *   - If the update fails, logs the error details into the operation's error array.\n   */\n  private static async applyCoordinateFixUpdate(\n    truck: FoodTruck,\n    updates: Partial<FoodTruck['current_location']>,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    operation.affectedCount += 1;\n    if (dryRun) {\n      operation.successCount += 1;\n    } else {\n      try {\n        await FoodTruckService.updateTruck(truck.id, {\n          current_location: {\n            ...truck.current_location,\n            ...updates,\n          },\n        });\n        operation.successCount += 1;\n      } catch (error) {\n        operation.errorCount += 1;\n        operation.errors.push(\n          `Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Update quality scores for all trucks\n   */\n  private static async updateQualityScores(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const promises = trucks.map((truck) =>\n      this.processSingleTruckForQualityScore(truck, dryRun, operation),\n    );\n    await Promise.all(promises);\n    return operation;\n  }\n\n  /**\n  * Processes a single food truck for an updated quality score assessment.\n  * @example\n  * processSingleTruckForQualityScore(truckInstance, false, cleanupOperationInstance)\n  * // No return value\n  * @param {FoodTruck} truck - The food truck instance to assess and potentially update.\n  * @param {boolean} dryRun - Specifies whether this is a dry run (no actual data updates).\n  * @param {CleanupOperation} operation - The cleanup operation context for processing.\n  * @returns {Promise<void>} No return value; operation is performed asynchronously.\n  * @description\n  *   - Computes the quality score using data from DataQualityService.\n  *   - Updates the quality score only if the score changes significantly (>5% difference).\n  *   - Assumes `truck.data_quality_score` might be undefined, defaulting to 0.\n  *   - Handles asynchronous processing of the update application if conditions are met.\n  */\n  private static async processSingleTruckForQualityScore(\n    truck: FoodTruck,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    const qualityAssessment = DataQualityService.calculateQualityScore(truck);\n    if (qualityAssessment) {\n      const newScore = qualityAssessment.score;\n      const currentScore = truck.data_quality_score ?? 0;\n      // Only update if score changed significantly (>5% difference)\n      if (typeof newScore === 'number' && Math.abs(newScore - currentScore) > 0.05) {\n        await this.applyQualityScoreUpdate(truck, dryRun, operation);\n      }\n    }\n  }\n\n  /**\n   * Updates the quality score of a specified food truck and handles errors during the update process.\n   * @example\n   * applyQualityScoreUpdate(foodTruckInstance, false, cleanupOperationInstance)\n   * void\n   * @param {FoodTruck} truck - The food truck for which the quality score will be updated.\n   * @param {boolean} dryRun - Flag indicating whether the function should perform the update or just simulate it.\n   * @param {CleanupOperation} operation - The cleanup operation containing possible error records.\n   * @returns {Promise<void>} Resolves with no value when the update completes. Errors are recorded in the `operation` if thrown.\n   * @description\n   *   - Throws an error if the quality score update fails.\n   *   - If `dryRun` is true, the function simulates the update without changing any data.\n   *   - Errors occurring during the update are appended to the `operation.errors` array.\n   */\n  private static async applyQualityScoreUpdate(\n    truck: FoodTruck,\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<void> {\n    operation.affectedCount += 1;\n    if (dryRun) {\n      operation.successCount += 1;\n    } else {\n      try {\n        const updateResult = await DataQualityService.updateTruckQualityScore(truck.id);\n        if ('error' in updateResult) {\n          throw new Error(updateResult.error);\n        }\n        operation.successCount += 1;\n      } catch (error) {\n        operation.errorCount += 1;\n        operation.errors.push(\n          `Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Identify and merge duplicate trucks\n   */\n  private static async mergeDuplicates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation,\n  ): Promise<CleanupOperation> {\n    const processedIds = new Set<string>();\n    for (const truck of trucks) {\n      await this.processSingleTruckForDuplicates(truck, dryRun, { operation, processedIds });\n    }\n    return operation;\n  }\n\n  /**\n   * Processes a single food truck to detect and handle duplicates in the dataset.\n   * @example\n   * processSingleTruckForDuplicates(foodTruck, true, mergeContext)\n   * // No return value. Performs operations as a side effect.\n   * @param {FoodTruck} truck - An instance of FoodTruck to process for duplicates.\n   * @param {boolean} dryRun - Flag indicating if the operation should be executed in dry run mode.\n   * @param {MergeOperationContext} context - Operational context that carries state and configurations for the merge operation.\n   * @returns {Promise<void>} Executes a set of operations for handling duplicate records, does not return any value.\n   * @description\n   *   - Ensures a food truck is only processed once by maintaining a set of processed IDs.\n   *   - Uses DuplicatePreventionService to assess whether the given truck is a duplicate.\n   *   - Applies a merge operation if a duplicate truck is confidently identified.\n   */\n  private static async processSingleTruckForDuplicates(\n    truck: FoodTruck,\n    dryRun: boolean,\n    context: MergeOperationContext,\n  ): Promise<void> {\n    const { processedIds } = context;\n    if (processedIds.has(truck.id)) return;\n\n    const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\n    if (\n      duplicateCheck.isDuplicate &&\n      duplicateCheck.bestMatch?.confidence === 'high' &&\n      duplicateCheck.bestMatch.recommendation === 'merge'\n    ) {\n      await this.applyMergeOperation(\n        truck,\n        duplicateCheck.bestMatch.existingTruck,\n        dryRun,\n        context,\n      );\n    }\n    processedIds.add(truck.id);\n  }\n\n  /**\n   * Applies a merge operation between two food trucks and updates the context.\n   * @example\n   * applyMergeOperation(truck, existingTruck, true, context)\n   * // Executes a dry run of the merge operation without affecting data\n   * @param {FoodTruck} truck - The food truck that is being merged.\n   * @param {FoodTruck} existingTruck - The existing food truck to merge with.\n   * @param {boolean} dryRun - Indicates if the merge operation should be simulated.\n   * @param {MergeOperationContext} context - Context containing details and state of the merge operation.\n   * @returns {Promise<void>} Promise representing the completion of the merge operation.\n   * @description\n   *   - Updates the list of processed IDs in the context upon successful merge.\n   *   - Throws and records an error if the merge operation fails.\n   *   - Utilizes the DuplicatePreventionService for performing the merge.\n   */\n  private static async applyMergeOperation(\n    truck: FoodTruck,\n    existingTruck: FoodTruck,\n    dryRun: boolean,\n    context: MergeOperationContext,\n  ): Promise<void> {\n    const { operation, processedIds } = context;\n    operation.affectedCount += 1;\n    if (dryRun) {\n      operation.successCount += 1;\n    } else {\n      try {\n        const mergeResult = await DuplicatePreventionService.mergeDuplicates(\n          truck.id,\n          existingTruck.id,\n        );\n        if ('error' in mergeResult) {\n          throw new Error(mergeResult.error);\n        }\n        processedIds.add(existingTruck.id);\n        operation.successCount += 1;\n      } catch (error) {\n        operation.errorCount += 1;\n        operation.errors.push(\n          `Failed to merge duplicates ${truck.id} and ${existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Normalize phone number format\n   */\n  private static normalizePhone(phone: string): string | undefined {\n    if (!phone) return undefined;\n\n    // Remove all non-digit characters\n    const digits = phone.replaceAll(/\\D/g, '');\n\n    // Handle US phone numbers\n    if (digits.length === 10) {\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\n    }\n    if (digits.length === 11 && digits.startsWith('1')) {\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\n    }\n\n    // Return original if can't normalize\n    return phone;\n  }\n\n  /**\n   * Get operation description\n   */\n  private static getOperationDescription(type: CleanupOperation['type']): string {\n    const descriptions = {\n      remove_placeholders: 'Remove placeholder and mock data values',\n      normalize_phone: 'Normalize phone numbers to consistent format',\n      fix_coordinates: 'Fix invalid GPS coordinates',\n      update_quality_scores: 'Recalculate data quality scores',\n      merge_duplicates: 'Identify and merge duplicate truck entries',\n    };\n\n    return descriptions[type] ?? 'Unknown operation';\n  }\n\n  /**\n   * Calculate cleanup summary\n   */\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\n    return {\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\n      duplicatesRemoved: operations.find((op) => op.type === 'merge_duplicates')?.successCount ?? 0,\n      qualityScoreImprovement:\n        operations.find((op) => op.type === 'update_quality_scores')?.successCount ?? 0,\n      placeholdersRemoved:\n        operations.find((op) => op.type === 'remove_placeholders')?.successCount ?? 0,\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/data-quality/duplicatePrevention.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":233,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":233,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7148,7160],"text":"(loc1.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7148,7160],"text":"(loc1.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7148,7160],"text":"(Boolean(loc1.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":233,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":233,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7164,7176],"text":"(loc2.address != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7164,7176],"text":"(loc2.address ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7164,7176],"text":"(Boolean(loc2.address))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[{"ruleId":"sonarjs/no-redundant-assignments","severity":2,"message":"Review this redundant assignment: \"j\" already holds the assigned value along all execution paths.","line":204,"column":20,"nodeType":"Literal","messageId":"reviewAssignment","endLine":204,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Duplicate Prevention System\n * Implements intelligent duplicate detection and prevention for food truck data\n */\n\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\n\n// Duplicate detection configuration\nexport const DUPLICATE_DETECTION_CONFIG = {\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\n  thresholds: {\n    name: 0.85, // High threshold for name matching\n    location: 0.9, // Very high threshold for location matching\n    phone: 1, // Exact match for phone numbers\n    website: 1, // Exact match for websites\n    overall: 0.8, // Overall similarity threshold\n  },\n\n  // Weight factors for different fields\n  weights: {\n    name: 0.4, // 40% weight for name similarity\n    location: 0.3, // 30% weight for location similarity\n    contact: 0.2, // 20% weight for contact info similarity\n    menu: 0.1, // 10% weight for menu similarity\n  },\n} as const;\n\nexport interface DuplicateMatch {\n  existingTruck: FoodTruck;\n  similarity: number;\n  matchedFields: string[];\n  confidence: 'high' | 'medium' | 'low';\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\n}\n\nexport interface DuplicateDetectionResult {\n  isDuplicate: boolean;\n  matches: DuplicateMatch[];\n  bestMatch?: DuplicateMatch;\n  action: 'create' | 'update' | 'merge' | 'manual_review';\n  reason: string;\n}\n\n/**\n * Advanced Duplicate Prevention Service\n */\nexport class DuplicatePreventionService {\n  /**\n   * Check if a food truck is a duplicate of existing trucks\n   */\n  static async checkForDuplicates(\n    candidateTruck: Partial<FoodTruck>,\n  ): Promise<DuplicateDetectionResult> {\n    try {\n      // Get all existing trucks for comparison\n      const existingTrucksResult = await FoodTruckService.getAllTrucks();\n\n      if ('error' in existingTrucksResult) {\n        console.error('Error fetching existing trucks:', existingTrucksResult.error);\n        return {\n          isDuplicate: false,\n          matches: [],\n          action: 'create',\n          reason: `Error fetching existing trucks: ${existingTrucksResult.error}`,\n        };\n      }\n\n      const existingTrucks = existingTrucksResult.trucks;\n      const matches: DuplicateMatch[] = [];\n\n      for (const existingTruck of existingTrucks) {\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\n\n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\n          matches.push({\n            existingTruck,\n            similarity: similarity.overall,\n            matchedFields: similarity.matchedFields,\n            confidence: this.getConfidenceLevel(similarity.overall),\n            recommendation: this.getRecommendation(similarity),\n          });\n        }\n      }\n\n      return this.processDuplicateMatches(matches, candidateTruck);\n    } catch (error) {\n      console.error('Error checking for duplicates:', error);\n      return {\n        isDuplicate: false,\n        matches: [],\n        action: 'create',\n        reason:\n          'An unexpected error occurred during duplicate detection - proceeding with creation',\n      };\n    }\n  }\n\n  /**\n   * Processes the matches found during duplicate detection and returns the result.\n   */\n  private static processDuplicateMatches(\n    matches: DuplicateMatch[],\n    candidateTruck: Partial<FoodTruck>,\n  ): DuplicateDetectionResult {\n    // Sort matches by similarity (highest first)\n    matches.sort((a, b) => b.similarity - a.similarity);\n\n    const bestMatch = matches.length > 0 ? matches[0] : undefined;\n    const isDuplicate = matches.length > 0;\n\n    return {\n      isDuplicate,\n      matches,\n      bestMatch,\n      action: this.determineAction(matches, candidateTruck),\n      reason: this.generateReason(matches, candidateTruck),\n    };\n  }\n\n  /**\n   * Calculate similarity between two food trucks\n   */\n  private static calculateSimilarity(\n    candidate: Partial<FoodTruck>,\n    existing: FoodTruck,\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\n    const breakdown: Record<string, number> = {};\n    const matchedFields: string[] = [];\n\n    // Name similarity\n    const nameSimilarity = this.calculateStringSimilarity(\n      candidate.name ?? '',\n      existing.name ?? '',\n    );\n    breakdown.name = nameSimilarity;\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\n      matchedFields.push('name');\n    }\n\n    // Location similarity\n    const locationSimilarity = this.calculateLocationSimilarity(\n      candidate.current_location,\n      existing.current_location,\n    );\n    breakdown.location = locationSimilarity;\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\n      matchedFields.push('location');\n    }\n\n    // Contact similarity\n    const contactSimilarity = this.calculateContactSimilarity(\n      candidate.contact_info,\n      existing.contact_info,\n    );\n    breakdown.contact = contactSimilarity;\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\n      matchedFields.push('contact');\n    }\n\n    // Menu similarity (basic)\n    const menuSimilarity = this.calculateMenuSimilarity(candidate.menu, existing.menu);\n    breakdown.menu = menuSimilarity;\n    if (menuSimilarity > 0.7) {\n      matchedFields.push('menu');\n    }\n\n    // Calculate weighted overall similarity\n    const overall =\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu;\n\n    return { overall, matchedFields, breakdown };\n  }\n\n  /**\n   * Calculate string similarity using Levenshtein distance\n   */\n  private static calculateStringSimilarity(str1: string, str2: string): number {\n    if (!str1 || !str2) return 0;\n\n    // Normalize strings\n    const s1 = str1.toLowerCase().trim();\n    const s2 = str2.toLowerCase().trim();\n\n    if (s1 === s2) return 1;\n\n    // Calculate Levenshtein distance\n    const matrix: number[][] = [];\n    const len1 = s1.length;\n    const len2 = s2.length;\n\n    for (let i = 0; i <= len1; i+=1) {\n      matrix[i] = [i];\n    }\n\n    for (let j = 0; j <= len2; j+=1) {\n      matrix[0][j] = j;\n    }\n\n    for (let i = 1; i <= len1; i+=1) {\n      // eslint-disable-next-line sonarjs/no-redundant-assignments\n      for (let j = 1; j <= len2; j+=1) {\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1, // deletion\n          matrix[i][j - 1] + 1, // insertion\n          matrix[i - 1][j - 1] + cost, // substitution\n        );\n      }\n    }\n\n    const distance = matrix[len1][len2];\n    const maxLength = Math.max(len1, len2);\n\n    return maxLength === 0 ? 1 : 1 - distance / maxLength;\n  }\n\n  /**\n   * Calculate location similarity\n   */\n  private static calculateLocationSimilarity(\n    loc1: FoodTruck['current_location'] | undefined | null,\n    loc2: FoodTruck['current_location'] | undefined | null,\n  ): number {\n    if (!loc1 || !loc2) return 0;\n\n    let similarity = 0;\n    let factors = 0;\n\n    // Address similarity\n    if (loc1.address && loc2.address) {\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\n      factors+=1;\n    }\n\n    // GPS coordinate similarity (within 100 meters = high similarity)\n    if (loc1.lat && loc1.lng && loc2.lat && loc2.lng) {\n      const distance = this.calculateGPSDistance(loc1.lat, loc1.lng, loc2.lat, loc2.lng);\n\n      // Distance similarity (closer = higher similarity)\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - distance / 1); // 1km max\n      similarity += distanceSimilarity;\n      factors+=1;\n    }\n\n    return factors > 0 ? similarity / factors : 0;\n  }\n\n  /**\n   * Calculate GPS distance in kilometers\n   */\n  private static calculateGPSDistance(\n    lat1: number,\n    lng1: number,\n    lat2: number,\n    lng2: number,\n  ): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = ((lat2 - lat1) * Math.PI) / 180;\n    const dLng = ((lng2 - lng1) * Math.PI) / 180;\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos((lat1 * Math.PI) / 180) *\n        Math.cos((lat2 * Math.PI) / 180) *\n        Math.sin(dLng / 2) *\n        Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  /**\n   * Calculate contact similarity\n   */\n  private static calculateContactSimilarity(\n    contact1: FoodTruck['contact_info'] | undefined | null,\n    contact2: FoodTruck['contact_info'] | undefined | null,\n  ): number {\n    if (!contact1 || !contact2) return 0;\n\n    let matches = 0;\n    let total = 0;\n\n    // Phone number exact match\n    if (contact1.phone != undefined && contact2.phone != undefined) {\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\n      if (phone1 === phone2) matches+=1;\n      total+=1;\n    }\n\n    // Website exact match\n    if (contact1.website != undefined && contact2.website != undefined) {\n      const url1 = contact1.website\n        .toLowerCase()\n        .replace(/^https?:\\/\\//, '')\n        .replace(/\\/$/, '');\n      const url2 = contact2.website\n        .toLowerCase()\n        .replace(/^https?:\\/\\//, '')\n        .replace(/\\/$/, '');\n      if (url1 === url2) matches+=1;\n      total+=1;\n    }\n\n    // Email similarity\n    if (contact1.email != undefined && contact2.email != undefined) {\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches+=1;\n      total+=1;\n    }\n\n    return total > 0 ? matches / total : 0;\n  }\n\n  /**\n   * Calculate menu similarity (basic implementation)\n   */\n  private static calculateMenuSimilarity(\n    menu1: FoodTruck['menu'] | undefined | null,\n    menu2: FoodTruck['menu'] | undefined | null,\n  ): number {\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\n\n    // Simple category name matching\n    const categories1 = menu1\n      .map((cat) => (cat as { category?: string }).category?.toLowerCase() ?? '')\n      .filter(Boolean);\n    const categories2 = menu2\n      .map((cat) => (cat as { category?: string }).category?.toLowerCase() ?? '')\n      .filter(Boolean);\n\n    const commonCategories = categories1.filter((cat) => categories2.includes(cat));\n    const totalCategories = new Set([...categories1, ...categories2]).size;\n\n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\n  }\n\n  /**\n   * Get confidence level based on similarity score\n   */\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\n    if (similarity >= 0.95) return 'high';\n    if (similarity >= 0.85) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * Get recommendation based on similarity analysis\n   */\n  private static getRecommendation(similarity: {\n    overall: number;\n    matchedFields: string[];\n  }): 'merge' | 'update' | 'skip' | 'manual_review' {\n    if (similarity.overall >= 0.95) return 'merge';\n    if (similarity.overall >= 0.9) return 'update';\n    if (similarity.overall >= 0.8) return 'manual_review';\n    return 'skip';\n  }\n\n  /**\n   * Determine action based on matches\n   */\n  private static determineAction(\n    matches: DuplicateMatch[],\n    _candidate: Partial<FoodTruck>,\n  ): 'create' | 'update' | 'merge' | 'manual_review' {\n    if (matches.length === 0) return 'create';\n\n    const bestMatch = matches[0];\n\n    if (bestMatch.confidence === 'high') {\n      const {recommendation} = bestMatch;\n      if (recommendation === 'merge' || recommendation === 'update') {\n        return recommendation;\n      }\n      return 'manual_review';\n    }\n\n    return 'manual_review';\n  }\n\n  /**\n   * Generate human-readable reason\n   */\n  private static generateReason(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): string {\n    if (matches.length === 0) {\n      return 'No duplicates found - safe to create new truck entry';\n    }\n\n    const bestMatch = matches[0];\n    const similarity = Math.round(bestMatch.similarity * 100);\n\n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\n  }\n\n  /**\n   * Merge duplicate truck data intelligently\n   */\n  static async mergeDuplicates(\n    targetId: string,\n    sourceId: string,\n  ): Promise<FoodTruck | { error: string }> {\n    const targetResult = await FoodTruckService.getTruckById(targetId);\n    const sourceResult = await FoodTruckService.getTruckById(sourceId);\n\n    if ('error' in targetResult) {\n      return {\n        error: `Failed to retrieve target truck with ID ${targetId}: ${targetResult.error}`,\n      };\n    }\n    if ('error' in sourceResult) {\n      return {\n        error: `Failed to retrieve source truck with ID ${sourceId}: ${sourceResult.error}`,\n      };\n    }\n\n    const target = targetResult;\n    const source = sourceResult;\n\n    // Merge logic: prefer non-null, more complete data\n    const mergedData: Partial<FoodTruck> = {\n      name: target.name ?? source.name,\n      description: target.description ?? source.description,\n      cuisine_type:\n        (target.cuisine_type?.length ?? 0) > 0 ? target.cuisine_type : source.cuisine_type,\n      price_range: target.price_range ?? source.price_range,\n      current_location: target.current_location ?? source.current_location,\n      contact_info: {\n        ...source.contact_info,\n        ...target.contact_info, // Target takes precedence\n      },\n      operating_hours: target.operating_hours ?? source.operating_hours,\n      menu: (target.menu?.length ?? 0) > 0 ? target.menu : source.menu,\n      social_media: {\n        ...source.social_media,\n        ...target.social_media,\n      },\n      source_urls: [...new Set([...(target.source_urls ?? []), ...(source.source_urls ?? [])])],\n      last_scraped_at: new Date().toISOString(),\n    };\n\n    // Update target with merged data\n    const updatedTruckResult = await FoodTruckService.updateTruck(targetId, mergedData);\n\n    if ('error' in updatedTruckResult) {\n      return {\n        error: `Failed to update target truck with merged data: ${updatedTruckResult.error}`,\n      };\n    }\n\n    console.info(`Merged truck ${sourceId} into ${targetId}`);\n\n    return updatedTruckResult;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/data-quality/placeholderUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/discoveryEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/fallback/supabaseFallback.tsx","messages":[{"ruleId":"sonarjs/use-type-alias","severity":2,"message":"Replace this union type with a type alias.","line":63,"column":22,"nodeType":null,"endLine":63,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":99,"column":15,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":99,"endColumn":19},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":109,"column":11,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":109,"endColumn":15,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[3244,3248],"text":"(Boolean(data))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":189,"column":29,"nodeType":null,"endLine":189,"endColumn":32,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[5528,5531],"text":"!="}}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":204,"column":29,"nodeType":null,"endLine":204,"endColumn":32,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[6110,6113],"text":"!="}}]},{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":215,"column":29,"nodeType":null,"endLine":215,"endColumn":32,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[6492,6495],"text":"!="}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":219,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":219,"endColumn":44},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":240,"column":23,"nodeType":"Literal","messageId":"error","endLine":240,"endColumn":27,"fix":{"range":[7282,7286],"text":"undefined"}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":241,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":241,"endColumn":44},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":314,"column":12,"nodeType":"Literal","messageId":"error","endLine":314,"endColumn":16,"suggestions":[{"messageId":"remove","fix":{"range":[9330,9334],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[9330,9334],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":341,"column":10,"nodeType":"Literal","messageId":"error","endLine":341,"endColumn":14,"suggestions":[{"messageId":"remove","fix":{"range":[10153,10157],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[10153,10157],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"// lib/fallback/supabaseFallback.new.tsx\n// This creates a resilient data layer that gracefully handles Supabase outages\n\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { Database } from '@/lib/database.types'; // Assuming this is your Supabase database types\n\n\n\nimport { FoodTruck } from '@/lib/types';\n\nfunction isFoodTruckData(obj: unknown): obj is FoodTruck {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    'id' in obj &&\n    'name' in obj &&\n    'cuisine_type' in obj &&\n    'price_range' in obj\n  );\n}\n\ninterface CachedData {\n  readonly trucks: FoodTruck[];\n  readonly timestamp: number;\n  readonly lastSuccessfulUpdate: string;\n}\n\nfunction isCachedData(obj: unknown): obj is CachedData {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    'trucks' in obj &&\n    Array.isArray((obj as CachedData).trucks) &&\n    'timestamp' in obj &&\n    'lastSuccessfulUpdate' in obj\n  );\n}\n\nclass SupabaseFallbackManager {\n  private readonly CACHE_KEY = 'food-trucks-cache';\n  private readonly TRUCK_CACHE_KEY_PREFIX = 'food-truck-';\n  private readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n  private readonly supabase: SupabaseClient<Database>;\n\n  constructor() {\n    if (process.env.NEXT_PUBLIC_SUPABASE_URL === undefined || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY === undefined) {\n      throw new Error('Supabase URL and Anon Key are required!');\n    }\n    this.supabase = createClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n    );\n  }\n\n  /**\n   * This is your main data fetching function that handles all the fallback logic\n   * Think of it as your \"smart\" data fetcher that adapts to different situations\n   */\n  public async getFoodTrucks(): Promise<{\n    readonly trucks: FoodTruck[];\n    readonly isFromCache: boolean;\n    readonly lastUpdate: string;\n    readonly status: 'fresh' | 'cached' | 'stale' | 'unavailable';\n  }> {\n    try {\n      // First, try to get fresh data from Supabase\n      const freshData = await this.fetchFromSupabase();\n\n      if (freshData.length > 0) {\n        // Success! Cache this data for future fallback use\n        this.cacheData(freshData);\n\n        return {\n          trucks: freshData,\n          isFromCache: false,\n          lastUpdate: 'Just now',\n          status: 'fresh'\n        };\n      }\n\n      // If we reach here, Supabase returned empty results\n      // This might mean no trucks are available, or there's a data issue\n      return await this.handleFallbackScenario();\n\n    } catch (error: unknown) {\n      // Supabase is definitely having issues - engage fallback mode\n      console.warn('Supabase unavailable, using fallback strategy:', error);\n      return await this.handleFallbackScenario();\n    }\n  }\n\n  public async getFoodTruckById(id: string): Promise<FoodTruck | undefined> {\n    const cachedTruck = this.getCachedTruck(id);\n    if (cachedTruck) {\n      return cachedTruck;\n    }\n\n    try {\n      const { data, error } = await this.supabase\n        .from('food_trucks')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) {\n        throw new Error(`Supabase error: ${error.message}`);\n      }\n\n      if (data && isFoodTruckData(data)) {\n        this.cacheTruck(data);\n        return data;\n      }\n\n      return undefined;\n    } catch (error) {\n      console.warn(`Failed to fetch truck with id ${id} from Supabase, returning undefined.`, error);\n      return undefined;\n    }\n  }\n\n  /**\n   * This handles the actual Supabase communication\n   * Separated so you can easily modify your existing query logic\n   */\n  private async fetchFromSupabase(): Promise<FoodTruck[]> {\n    // The key is to set a reasonable timeout so we don't wait forever\n    const { data, error } = await this.supabase\n      .from('food_trucks')\n      .select('*')\n      .abortSignal(AbortSignal.timeout(5000)); // 5 second timeout\n\n    if (error) {\n      throw new Error(`Supabase error: ${error.message}`);\n    }\n\n    // Ensure data is an array and cast it to FoodTruck[]\n    if (Array.isArray(data)) {\n      return data.filter((d): d is FoodTruck => isFoodTruckData(d));\n    }\n    return [];\n  }\n\n  /**\n   * This is where the magic happens - graceful degradation\n   * When Supabase fails, we still provide value to users\n   */\n  private handleFallbackScenario(): Promise<{\n    readonly trucks: FoodTruck[];\n    readonly isFromCache: boolean;\n    readonly lastUpdate: string;\n    readonly status: 'cached' | 'stale' | 'unavailable';\n  }> {\n    const cachedData = this.getCachedData();\n\n    if (cachedData !== undefined) {\n      const age = Date.now() - cachedData.timestamp;\n      const isStale = age > this.CACHE_DURATION;\n\n      return {\n        trucks: cachedData.trucks,\n        isFromCache: true,\n        lastUpdate: cachedData.lastSuccessfulUpdate,\n        status: isStale ? 'stale' : 'cached'\n      };\n    }\n\n    // No cached data available - this is the worst case scenario\n    return {\n      trucks: [],\n      isFromCache: false,\n      lastUpdate: 'Never',\n      status: 'unavailable'\n    };\n  }\n\n  /**\n   * Stores successful data fetches for later use\n   * This runs every time we successfully get data from Supabase\n   */\n  private cacheData(trucks: FoodTruck[]): void {\n    const cacheData: CachedData = {\n      trucks,\n      timestamp: Date.now(),\n      lastSuccessfulUpdate: new Date().toLocaleString()\n    };\n\n    try {\n      // In a browser environment, use localStorage\n      if (globalThis.window !== undefined) {\n        globalThis.window.localStorage.setItem(this.CACHE_KEY, JSON.stringify(cacheData));\n      }\n\n      // In a server environment, you might use a file or Redis\n      // For now, we'll just log that we would cache this data\n      console.info(`Cached ${trucks.length} trucks at ${cacheData.lastSuccessfulUpdate}`);\n    } catch (error: unknown) {\n      // Caching failed, but that's not critical - log and continue\n      console.warn('Failed to cache data:', error);\n    }\n  }\n\n  private cacheTruck(truck: FoodTruck): void {\n    try {\n      if (globalThis.window !== undefined) {\n        const cacheKey = `${this.TRUCK_CACHE_KEY_PREFIX}${truck.id}`;\n        globalThis.window.localStorage.setItem(cacheKey, JSON.stringify(truck));\n      }\n    } catch (error) {\n      console.warn(`Failed to cache truck with id ${truck.id}:`, error);\n    }\n  }\n\n  private getCachedTruck(id: string): FoodTruck | undefined {\n    try {\n      if (globalThis.window !== undefined) {\n        const cacheKey = `${this.TRUCK_CACHE_KEY_PREFIX}${id}`;\n        const cached = globalThis.window.localStorage.getItem(cacheKey);\n        if (cached !== null) {\n          const parsed = JSON.parse(cached);\n          if (isFoodTruckData(parsed)) {\n            return parsed;\n          }\n        }\n      }\n      return undefined;\n    } catch (error) {\n      console.warn(`Failed to retrieve cached truck with id ${id}:`, error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Retrieves cached data when Supabase is unavailable\n   * This is your safety net\n   */\n  private getCachedData(): CachedData | undefined {\n    try {\n      if (globalThis.window != undefined) {\n        const cached = globalThis.window.localStorage.getItem(this.CACHE_KEY);\n        if (cached != null) {\n          const parsed = JSON.parse(cached);\n          if (isCachedData(parsed)) {\n            return parsed;\n          }\n        }\n      }\n      return undefined;\n    } catch (error: unknown) {\n      console.warn('Failed to retrieve cached data:', error);\n      return undefined;\n    }\n  }\n}\n\n// Usage in your components - this replaces your direct Supabase calls\nexport const supabaseFallback = new SupabaseFallbackManager();\n\n// Example React hook that uses the fallback system\nimport { useState, useEffect } from 'react';\n\nexport function useFoodTrucks() {\n  const [trucks, setTrucks] = useState<FoodTruck[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [dataStatus, setDataStatus] = useState<{\n    readonly isFromCache: boolean;\n    readonly lastUpdate: string;\n    readonly status: 'fresh' | 'cached' | 'stale' | 'unavailable';\n  }>({\n    isFromCache: false,\n    lastUpdate: '',\n    status: 'fresh'\n  });\n\n  useEffect(() => {\n    const loadTrucks = async (): Promise<void> => {\n      try {\n        const result = await supabaseFallback.getFoodTrucks();\n        setTrucks(result.trucks);\n        setDataStatus({\n          isFromCache: result.isFromCache,\n          lastUpdate: result.lastUpdate,\n          status: result.status\n        });\n      } catch (error: unknown) {\n        console.error('Failed to load trucks:', error);\n        // Even this fails, we still want to show something\n        setDataStatus({\n          isFromCache: false,\n          lastUpdate: 'Error',\n          status: 'unavailable'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    void loadTrucks(); // Use void to explicitly ignore the Promise\n  }, []);\n\n  return { trucks, loading, dataStatus };\n}\n\n// Component that displays appropriate messages based on data status\nexport function DataStatusIndicator({\n  status,\n}: {\n  readonly status: {\n    isFromCache: boolean;\n    lastUpdate: string;\n    status: 'fresh' | 'cached' | 'stale' | 'unavailable';\n  };\n}) {\n  if (status.status === 'fresh') {\n    return null; // No need to show anything for fresh data\n  }\n\n  if (status.status === 'cached') {\n    return (\n      <div className=\"bg-blue-100 border border-blue-300 text-blue-800 px-4 py-2 rounded\">\n        Showing cached data from {status.lastUpdate}. Live data temporarily unavailable.\n      </div>\n    );\n  }\n\n  if (status.status === 'stale') {\n    return (\n      <div className=\"bg-yellow-100 border border-yellow-300 text-yellow-800 px-4 py-2 rounded\">\n        Showing older data from {status.lastUpdate}. We're working to restore live updates.\n      </div>\n    );\n  }\n\n  if (status.status === 'unavailable') {\n    return (\n      <div className=\"bg-red-100 border border-red-300 text-red-800 px-4 py-2 rounded\">\n        Service temporarily unavailable. Please check back in a few minutes.\n      </div>\n    );\n  }\n\n  return null;\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/firecrawl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/gemini.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/gemini/geminiApiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/gemini/promptTemplates.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":223,"column":3,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":223,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7097,7106],"text":"(sourceUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7097,7106],"text":"(sourceUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7097,7106],"text":"(Boolean(sourceUrl))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const PromptTemplates = {\n  menuProcessing: (rawMenuText: string) => `\nParse the following food truck menu text and return a structured JSON format.\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\n\nMenu text:\n${rawMenuText}\n\nExpected JSON format:\n[\n  {\n    \"category\": \"string\",\n    \"items\": [\n      {\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"price\": number,\n        \"dietary_tags\": [\"string\"]\n      }\n    ]\n  }\n]\n\nRules:\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\n- Include dietary restrictions and special tags\n- Group items into logical categories\n- If no clear categories, use \"Main Items\"\n- Return only the json, no additional text\n  `,\n\n  locationExtraction: (textInput: string) => `\nExtract location information from the following text and return structured data.\nLook for addresses, cross streets, landmarks, or location descriptions.\n\nText:\n${textInput}\n\nExpected JSON format:\n{\n  \"address\": \"string or undefined\",\n  \"city\": \"string or undefined\", \n  \"state\": \"string or undefined\",\n  \"zipCode\": \"string or undefined\",\n  \"coordinates\": {\"lat\": number, \"lng\": number} or undefined,\n  \"confidence\": number,\n  \"landmarks\": [\"string\"]\n}\n\nRules:\n- Set coordinates to undefined if not explicitly provided\n- Confidence should be 0.0 to 1.0 based on clarity\n- Include any mentioned landmarks or cross streets\n- Return only the json, no additional text\n  `,\n\n  operatingHours: (hoursText: string) => `\nParse the following operating hours text and return standardized format.\nConvert all times to 24-hour format and handle various input formats.\n\nHours text:\n${hoursText}\n\nExpected JSON format:\n{\n  \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\n}\n\nRules:\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\n- If closed on a day, set \"closed\": true and omit open/close times\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\n- Default to reasonable hours if ambiguous\n- Return only the json, no additional text\n  `,\n\n  sentimentAnalysis: (reviewText: string) => `\nAnalyze the sentiment of this food truck review and extract key insights.\nFocus on food quality, service, value, and overall experience.\n\nReview text:\n${reviewText}\n\nExpected JSON format:\n{\n  \"score\": number,\n  \"confidence\": number,\n  \"aspects\": {\n    \"food_quality\": number,\n    \"service\": number,\n    \"value\": number,\n    \"overall\": number\n  },\n  \"summary\": \"string\",\n  \"keywords\": [\"string\"]\n}\n\nRules:\n- Score should be 0.0 (very negative) to 1.0 (very positive)\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\n- Include specific aspects mentioned in the review\n- Summary should be 1-2 sentences max\n- Return only the json, no additional text\n  `,\n\n  dataEnhancement: (rawData: unknown) => `\nEnhance and standardize the following food truck data.\nFill in missing information where possible and improve data quality.\n\nRaw data:\n${JSON.stringify(rawData, undefined, 2)}\n\nExpected JSON format:\n{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"cuisine_type\": \"string\",\n  \"price_range\": \"$ | $$ | $$$ | $$$$\",\n  \"contact\": {\n    \"phone\": \"string\",\n    \"email\": \"string\",\n    \"website\": \"string\",\n    \"social_media\": {}\n  },\n  \"location\": {\n    \"address\": \"string\",\n    \"city\": \"string\",\n    \"state\": \"string\",\n    \"coordinates\": {\"lat\": number, \"lng\": number}\n  },\n  \"operating_hours\": {},\n  \"menu_categories\": [\"string\"],\n  \"specialties\": [\"string\"],\n  \"dietary_options\": [\"string\"]\n}\n\nRules:\n- Preserve all original data while enhancing it\n- Standardize naming conventions\n- Infer cuisine type from menu items\n- Estimate price range from menu prices\n- Return only the json, no additional text\n  `,\n\n  foodTruckExtraction: (markdownContent: string, sourceUrl?: string) => {\n    const schema = `\nExpected JSON schema:\n{\n  \"name\": \"string (food truck name)\",\n  \"description\": \"string (brief description of the food truck)\",\n  \"cuisine_type\": \"string (type of cuisine served)\",\n  \"contact\": {\n    \"phone\": \"string (phone number if found)\",\n    \"email\": \"string (email if found)\", \n    \"website\": \"string (website URL if found)\",\n    \"social_media\": {\n      \"facebook\": \"string (Facebook URL if found)\",\n      \"instagram\": \"string (Instagram URL if found)\",\n      \"twitter\": \"string (Twitter URL if found)\"\n    }\n  },\n  \"location\": {\n    \"address\": \"string (physical address if found)\",\n    \"city\": \"string (city name)\",\n    \"state\": \"string (state abbreviation)\",\n    \"coordinates\": {\n      \"lat\": \"number (latitude if found)\",\n      \"lng\": \"number (longitude if found)\"\n    }\n  },\n  \"operating_hours\": {\n    \"monday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"tuesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"wednesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"thursday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"friday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"saturday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"sunday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"}\n  },\n  \"menu\": [\n    {\n      \"category\": \"string (menu category)\",\n      \"items\": [\n        {\n          \"name\": \"string (item name)\",\n          \"description\": \"string (item description)\",\n          \"price\": \"number (price as number, not string)\",\n          \"dietary_tags\": [\"string (dietary restrictions/tags)\"]\n        }\n      ]\n    }\n  ],\n  \"specialties\": [\"string (signature dishes or specialties)\"],\n  \"dietary_options\": [\"string (dietary accommodations like vegan, gluten-free)\"],\n  \"price_range\": \"string ($ for under $10, $$ for $10-20, $$$ for $20-30, $$$$ for over $30)\"\n}\n`;\n\n    const instructions = `\nInstructions:\n- Extract as much information as possible from the provided content\n- If information is not available, use null for the field\n- For operating hours, use 24-hour format (e.g., \"14:30\" for 2:30 PM)\n- If a day is closed, set \"closed\": true and omit open/close times\n- For prices, extract numeric values only (e.g., 12.99, not \"$12.99\")\n- Be thorough in extracting menu items and their details\n- Look for social media links and contact information carefully\n- Return only the JSON object, no additional text or formatting\n`;\n\n    return `\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\n\nWebsite content:\n${markdownContent}\n\n${sourceUrl ? `Source URL: ${sourceUrl}` : ''}\n\n${schema}\n\n${instructions}\n`;\n  },\n};\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/gemini/responseParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/gemini/usageLimits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/middleware/middlewareHelpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[728,731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[728,731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":74,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":74,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2491,2507],"text":"redirectFromPath != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2491,2507],"text":"redirectFromPath ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2491,2507],"text":"Boolean(redirectFromPath)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { AuditLogger, SecurityEvent } from '@/lib/security/auditLogger';\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\n\ninterface RequestMetadata {\n  ip: string;\n  userAgent: string;\n  url: string;\n  method: string;\n}\n\ninterface SupabaseUser {\n  id: string;\n  email?: string;\n}\n\ninterface SupabaseProfile {\n  role?: string;\n}\n\ninterface LogAndRedirectParams {\n  req: NextRequest;\n  res: NextResponse;\n  requestMetadata: RequestMetadata;\n  reason: string;\n  userError?: { message?: string };\n}\n\ninterface LogSecurityEventParams {\n  event_type: SecurityEvent['event_type'];\n  ip_address: string;\n  user_agent: string;\n  details: Record<string, any>;\n  severity: SecurityEvent['severity'];\n  user_id?: string;\n  user_email?: string;\n}\n\ninterface LogSecurityEventAndRedirectParams {\n  req: NextRequest;\n  res: NextResponse;\n  logParams: LogSecurityEventParams;\n  redirectPath: string;\n  redirectFromPath?: string;\n}\n\n/**\n * Logs a security event and redirects the request to a specified path.\n * @example\n * logSecurityEventAndRedirect({ req, res, logParams, redirectPath, redirectFromPath })\n * NextResponse with redirect to the target path\n * @param {Object} params - The parameters for the function.\n * @param {Request} params.req - The original request object containing the URL to clone for redirection.\n * @param {Response} params._res - The original response object (unused in function, but part of expected parameters).\n * @param {Object} params.logParams - Parameters required by the AuditLogger to log the security event.\n * @param {string} params.redirectPath - The pathname where the request should be redirected.\n * @param {string} [params.redirectFromPath] - Optional pathname indicating where the redirect originated from.\n * @returns {NextResponse} A response that performs a redirect to the specified path.\n * @description\n *   - The function uses AuditLogger to record the security event.\n *   - It clones the current URL from the request to ensure original query parameters are preserved.\n *   - Redirect path can optionally include info on where the redirect originated via a search parameter.\n */\nasync function logSecurityEventAndRedirect({\n  req,\n  res: _res,\n  logParams,\n  redirectPath,\n  redirectFromPath,\n}: LogSecurityEventAndRedirectParams) {\n  await AuditLogger.logSecurityEvent(logParams);\n  const redirectUrl = req.nextUrl.clone();\n  redirectUrl.pathname = redirectPath;\n  if (redirectFromPath) {\n    redirectUrl.searchParams.set(`redirectedFrom`, redirectFromPath);\n  }\n  return NextResponse.redirect(redirectUrl);\n}\n\n/**\n * Logs a security event and redirects the user to the login page.\n * @example\n * logAndRedirect({\n *   req: requestObject, \n *   res: responseObject, \n *   requestMetadata: { ip: '192.168.1.1', userAgent: 'Mozilla/5.0', url: '/dashboard' }, \n *   reason: 'Session Expired', \n *   userError: new Error('User authentication failed')\n * })\n * // Redirects user to login page and logs the event\n * @param {Object} req - Express request object containing details of the incoming request.\n * @param {Object} res - Express response object used to send a response to the client.\n * @param {Object} requestMetadata - Metadata associated with the request, including IP and user agent.\n * @param {string} reason - The reason for redirect, generally describing why access was denied.\n * @param {Error} userError - Optional error object that provides additional context about the user error.\n * @returns {Promise<void>} Returns a promise that resolves once the security event is logged and redirect is completed.\n * @description\n *   - Utilizes a severity of 'warning' when logging security events.\n *   - Redirects users from the attempted URL to the login page.\n *   - Captures detailed information about the request including attempted URL and user agent.\n */\nasync function logAndRedirect({\n  req,\n  res,\n  requestMetadata,\n  reason,\n  userError,\n}: LogAndRedirectParams) {\n  return logSecurityEventAndRedirect({\n    req,\n    res,\n    logParams: {\n      event_type: 'permission_denied',\n      ip_address: requestMetadata.ip,\n      user_agent: requestMetadata.userAgent,\n      details: {\n        attempted_url: requestMetadata.url,\n        reason,\n        error: userError?.message,\n      },\n      severity: 'warning',\n    },\n    redirectPath: '/login',\n    redirectFromPath: req.nextUrl.pathname,\n  });\n}\n\ninterface LogAndRedirectDeniedParams {\n  req: NextRequest;\n  res: NextResponse;\n  requestMetadata: RequestMetadata;\n  user: SupabaseUser;\n  profile: SupabaseProfile | null;\n  profileQueryError?: { message?: string } | null; // Changed to allow null\n}\n\n/**\n * Logs a security event and redirects to an access-denied page.\n * @example\n * logAndRedirectDenied({\n *   req: requestObject,\n *   res: responseObject,\n *   requestMetadata: metadataObject,\n *   user: userObject,\n *   profile: profileObject,\n *   profileQueryError: errorObject\n * })\n * // Redirects user and logs the event with relevant details\n * @param {Object} params - Contains necessary parameters for the function.\n * @param {Object} params.req - The HTTP request object.\n * @param {Object} params.res - The HTTP response object.\n * @param {Object} params.requestMetadata - Metadata related to the request.\n * @param {Object} params.user - User information object.\n * @param {Object} params.profile - Profile object related to the user.\n * @param {Object} params.profileQueryError - Error object if querying profile fails.\n * @returns {Promise<void>} Returns a promise that resolves after logging and redirecting.\n * @description\n *   - Utilizes `logSecurityEventAndRedirect` to perform logging and redirect operations.\n *   - The function assumes a structure for the user object, expecting 'id' and 'email' properties.\n *   - Redirects to '/access-denied' path by default.\n *   - Sets event severity as 'error' when logging the security event.\n */\nasync function logAndRedirectDenied({\n  req,\n  res,\n  requestMetadata,\n  user,\n  profile,\n  profileQueryError,\n}: LogAndRedirectDeniedParams) {\n  return logSecurityEventAndRedirect({\n    req,\n    res,\n    logParams: {\n      event_type: 'permission_denied',\n      user_id: user.id,\n      user_email: user.email ?? undefined,\n      ip_address: requestMetadata.ip,\n      user_agent: requestMetadata.userAgent,\n      details: {\n        attempted_url: requestMetadata.url,\n        user_role: profile?.role ?? 'none',\n        reason: 'insufficient_privileges',\n        error: profileQueryError?.message,\n      },\n      severity: 'error',\n    },\n    redirectPath: '/access-denied',\n  });\n}\n\n/**\n * Protects admin routes by verifying user authentication and authorization.\n * @example\n * protectAdminRoutes(req, res, requestMetadata)\n * returns NextResponse or redirects depending on user authentication status.\n * @param {NextRequest} req - The incoming request object.\n * @param {NextResponse} res - The response object to send back to the client.\n * @param {RequestMetadata} requestMetadata - Metadata about the request for logging purposes.\n * @returns {NextResponse} Returns the response object or redirects to an error page.\n * @description\n *   - Fetches and verifies the user's session from Supabase.\n *   - Checks if the user is an admin based on the profile 'role' from the database.\n *   - Logs access attempts to the admin panel for auditing purposes.\n *   - Redirects to an appropriate error handler if the user isn't authenticated or authorized.\n */\nexport async function protectAdminRoutes(\n  req: NextRequest,\n  res: NextResponse,\n  requestMetadata: RequestMetadata,\n) {\n  const supabase = createSupabaseMiddlewareClient(req, res);\n  const { data, error: userError } = await supabase.auth.getUser();\n  const user = data?.user;\n\n  if (userError || !user) {\n    return logAndRedirect({\n      req,\n      res,\n      requestMetadata,\n      reason: 'no_session',\n      userError: userError ?? undefined,\n    });\n  }\n  // Explicitly type the result of the Supabase query\n  const { data: profile, error: profileQueryError } = (await supabase\n    .from('profiles')\n    .select('role')\n    .eq('id', user.id)\n    .single()) as { data: SupabaseProfile | null; error: { message?: string } | null };\n  if (profileQueryError || (profile && profile.role !== 'admin')) {\n    return logAndRedirectDenied({\n      req,\n      res,\n      requestMetadata,\n      user,\n      profile: profile ?? undefined,\n      profileQueryError: profileQueryError ?? undefined,\n    });\n  }\n  if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\n    await AuditLogger.logDataAccess({\n      userId: user.id,\n      userEmail: user.email ?? 'unknown',\n      resourceType: 'admin_panel',\n      resourceId: req.nextUrl.pathname,\n      action: req.method === 'GET' ? 'read' : 'admin_access',\n      request: {\n        ip: requestMetadata.ip,\n        userAgent: requestMetadata.userAgent,\n      },\n    });\n  }\n  return res;\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/monitoring/apiMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/performance/bundleAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/performance/databaseCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/performance/webVitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/pipeline/pipelineHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/pipeline/scrapingProcessor.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":29,"column":33,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":29,"endColumn":60,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1206,1234],"text":"((scrapeResult.data?.markdown) == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1207,1234],"text":"((scrapeResult.data?.markdown) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1206,1234],"text":"(!Boolean((scrapeResult.data?.markdown)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":110,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":110,"endColumn":12},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":145,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":145,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6352,6367],"text":"job.target_url == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6353,6367],"text":"(job.target_url ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6352,6367],"text":"!Boolean(job.target_url)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\nimport { gemini } from '@/lib/gemini';\nimport { ScrapingJobService } from '@/lib/supabase';\nimport { ExtractedFoodTruckDetails } from '../types';\nimport {\n  validateInputAndPrepare,\n  buildTruckDataSchema,\n  handleDuplicateCheck,\n  finalizeJobStatus,\n} from './pipelineHelpers';\n\n/**\n * Initiates web scraping for a specified food truck website.\n * @example\n * handleScraping(\"https://foodtruck.com\", \"job123\")\n * Returns data object with markdown content\n * @param {string} targetUrl - The URL of the food truck website to scrape.\n * @param {string} jobId - The unique identifier for the scraping job.\n * @returns {Object} An object containing the scraped data, including markdown content.\n * @description\n *   - Utilizes firecrawl library to perform web scraping.\n *   - Calls handleJobFailure if scraping is unsuccessful or markdown content is missing.\n *   - Logs the progress and success of the scraping process in the console.\n */\nasync function handleScraping(targetUrl: string, jobId: string) {\n  console.info(`Starting scrape for ${targetUrl}`);\n  const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(targetUrl);\n\n  if (!scrapeResult.success || !scrapeResult.data?.markdown) {\n    const error = scrapeResult.error ?? 'Scraping failed or markdown content not found';\n    await handleJobFailure(jobId, error);\n    throw new Error(error);\n  }\n\n  console.info(`Scraping successful for ${targetUrl}, proceeding to Gemini extraction.`);\n  return scrapeResult.data;\n}\n\n/**\n * Handles the extraction of food truck details using Gemini and manages job failures.\n * @example\n * handleGeminiExtraction(\"sample_markdown\", \"http://example.com\", \"12345\")\n * { name: \"Sample Food Truck\", location: \"123 Main St.\" }\n * @param {string} markdown - The Markdown content containing food truck details.\n * @param {string} sourceUrl - The URL of the source from which details are extracted.\n * @param {string} jobId - The identifier for the job being processed.\n * @returns {Object} The extracted food truck details if successful.\n * @description\n *   - Utilizes Gemini to extract data from the provided Markdown content.\n *   - Handles failure scenarios by logging errors and updating job status.\n *   - Throws an error when extraction is unsuccessful.\n */\nasync function handleGeminiExtraction(markdown: string, sourceUrl: string, jobId: string) {\n  const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(markdown, sourceUrl);\n\n  if (!geminiResult.success || !geminiResult.data) {\n    const error = geminiResult.error ?? 'Gemini data extraction failed';\n    await handleJobFailure(jobId, error);\n    throw new Error(error);\n  }\n\n  console.info(`Gemini extraction successful for ${sourceUrl}.`);\n  return geminiResult.data;\n}\n\n/**\n* Handles the failure of a job by updating its status.\n* @example\n* handleJobFailure('job1234', 'Timeout error')\n* // Output: Logs an error message and updates the job status.\n* @param {string} jobId - The unique identifier of the job that failed.\n* @param {string} error - The error message describing the reason for failure.\n* @returns {Promise<void>} Resolves successfully once the job status is updated.\n* @description\n*   - Logs the error to the console for debugging purposes.\n*   - Checks if the current job status is not already 'failed' before updating.\n*   - Updates the job status to 'failed' if applicable, capturing any errors encountered.\n*   - Manages any errors that arise during the status update attempt.\n*/\nasync function handleJobFailure(jobId: string, error: string) {\n  console.error(`Job ${jobId} failed:`, error);\n  try {\n    const currentJob = await ScrapingJobService.getJobsByStatus('all').then((jobs) =>\n      jobs.find((j) => j.id === jobId),\n    );\n    if (currentJob && currentJob.status !== 'failed') {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', { errors: [error] });\n    }\n  } catch (statusUpdateError) {\n    console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\n  }\n}\n\n/**\n * Manages retry logic for a scraping job based on its current retry count.\n * @example\n * handleRetryLogic(\"job123\")\n * undefined\n * @param {string} jobId - The unique identifier for the scraping job.\n * @returns {Promise<void>} Does not return a value but handles retries or logs errors.\n * @description\n *   - Utilizes ScrapingJobService to increment the retry count for the given job.\n *   - Determines whether to retry the job based on retry_count and max_retries properties.\n *   - Logs messages to inform about retry attempts or if max retries have been reached.\n *   - Catches and logs errors encountered during the retry process.\n */\nasync function handleRetryLogic(jobId: string) {\n  try {\n    const job = await ScrapingJobService.incrementRetryCount(jobId);\n    if (job && typeof job.retry_count === 'number' && typeof job.max_retries === 'number') {\n      if (job.retry_count < job.max_retries) {\n        console.info(`Retrying job ${jobId} (attempt ${job.retry_count}/${job.max_retries})`);\n        setTimeout(() => {\n          void processScrapingJob(jobId);\n        }, 5000);\n      } else {\n        console.warn(`Job ${jobId} reached max retries (${job.max_retries}).`);\n      }\n    } else {\n      console.error(\n        `Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`,\n      );\n    }\n  } catch (retryError) {\n    console.error(`Error during retry logic for job ${jobId}:`, retryError);\n  }\n}\n\n/**\n * Processes a scraping job by managing its lifecycle and data extraction.\n * @example\n * processScrapingJob('12345')\n * // Scraping job 12345 completed successfully and data processed.\n * @param {string} jobId - The unique identifier for the scraping job.\n * @returns {Promise<void>} Resolves when the job is completed or retried.\n * @description\n *   - Updates the scraping job status to 'running' at the beginning and 'completed' at the end of the process.\n *   - Performs data scraping and extraction using job's target URL.\n *   - Handles scenarios where a target URL is not specified, resulting in an error.\n *   - Implements retry logic in case of failure during the job processing.\n */\nexport async function processScrapingJob(jobId: string): Promise<void> {\n  try {\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\n    if (!job.target_url) {\n      throw new Error('No target URL specified');\n    }\n\n    const scrapeData = await handleScraping(job.target_url, jobId);\n    const extractedData = await handleGeminiExtraction(\n      scrapeData.markdown,\n      scrapeData.source_url ?? job.target_url,\n      jobId,\n    );\n\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\n      data_collected: extractedData as unknown as Record<string, unknown>,\n      completed_at: new Date().toISOString(),\n    });\n\n    await createOrUpdateFoodTruck(jobId, extractedData, scrapeData.source_url ?? job.target_url);\n\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\n  } catch {\n    await handleRetryLogic(jobId);\n  }\n}\n\n/**\n* Creates or updates a food truck entry based on extracted data and handles job processing.\n* @example\n* createOrUpdateFoodTruck('123abc', extractedTruckData, 'http://example.com')\n* undefined\n* @param {string} jobId - Unique identifier for the job being processed.\n* @param {ExtractedFoodTruckDetails} extractedTruckData - Object containing details about the food truck extracted from a source.\n* @param {string} sourceUrl - The URL from which the food truck data was extracted.\n* @returns {Promise<void>} Resolves when processing is complete; returns nothing explicitly.\n* @description\n*   - Validates the input data before proceeding with creation or update.\n*   - Applies a duplicate check mechanism to avoid redundant entries.\n*   - Finalizes the job status, ensuring proper completion or failure handling.\n*   - Logs error details for troubleshooting job processing issues.\n*/\nexport async function createOrUpdateFoodTruck(\n  jobId: string,\n  extractedTruckData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n) {\n  try {\n    const validation = await validateInputAndPrepare(jobId, extractedTruckData, sourceUrl);\n    if (!validation.isValid) {\n      return;\n    }\n\n    const truckData = buildTruckDataSchema(extractedTruckData, sourceUrl, validation.name);\n    const truck = await handleDuplicateCheck(jobId, truckData, validation.name);\n    await finalizeJobStatus(jobId, truck, sourceUrl);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.error(\n      `Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`,\n      error,\n    );\n    await handleJobFailure(jobId, `Food truck data processing/saving failed: ${errorMessage}`);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/pipelineProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/security/auditLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/security/rateLimiter.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":288,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":288,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7946,7963],"text":"result.retryAfter != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7946,7963],"text":"result.retryAfter ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7946,7963],"text":"Boolean(result.retryAfter)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Rate Limiting Implementation\n * Prevents brute force attacks and API abuse with intelligent rate limiting\n */\n\nimport { NextResponse } from 'next/server'; // Added import for NextResponse\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  blocked: boolean;\n  blockUntil?: number;\n}\n\n// In-memory rate limit store (in production, use Redis)\nconst rateLimitStore = new Map<string, RateLimitEntry>();\n\n// Rate limit configurations for different endpoints\nexport const RATE_LIMIT_CONFIGS = {\n  // Authentication endpoints - strict limits\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5, // 5 attempts per 15 minutes\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\n    skipSuccessfulRequests: true,\n  },\n  // API endpoints - moderate limits\n  api: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 60, // 60 requests per minute\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\n    skipSuccessfulRequests: false,\n  },\n  // Admin endpoints - very strict limits\n  admin: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 20, // 20 requests per minute\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\n    skipSuccessfulRequests: false,\n  },\n} as const;\n\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\n\n/**\n * Rate Limiter Service\n */\nexport class RateLimiter {\n  // Extract logic from checkRateLimit to reduce function size\n  private static isBlocked(entry: RateLimitEntry | undefined, now: number): boolean {\n    return Boolean(\n      entry && entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil,\n    );\n  }\n\n  private static resetEntry(\n    entry: RateLimitEntry,\n    now: number,\n    config: (typeof RATE_LIMIT_CONFIGS)[RateLimitType],\n  ): void {\n    entry.count = 0;\n    entry.resetTime = now + config.windowMs;\n    entry.blocked = false;\n    entry.blockUntil = undefined;\n  }\n\n  /**\n   * Check if request should be rate limited\n   */\n  static checkRateLimit(\n    identifier: string,\n    type: RateLimitType = 'api',\n  ): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    this.cleanupExpiredEntries();\n    let entry = rateLimitStore.get(key);\n    if (!entry) {\n      entry = { count: 0, resetTime: now + config.windowMs, blocked: false };\n      rateLimitStore.set(key, entry);\n    }\n    if (this.isBlocked(entry, now)) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil((entry.blockUntil! - now) / 1000),\n      };\n    }\n    if (now >= entry.resetTime) {\n      this.resetEntry(entry, now, config);\n    }\n    if (entry.count >= config.maxRequests) {\n      entry.blocked = true;\n      entry.blockUntil = now + config.blockDurationMs;\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil(config.blockDurationMs / 1000),\n      };\n    }\n    entry.count += 1;\n    rateLimitStore.set(key, entry);\n    return {\n      allowed: true,\n      remaining: config.maxRequests - entry.count,\n      resetTime: entry.resetTime,\n    };\n  }\n\n  /**\n   * Record successful request (for auth endpoints)\n   */\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\n    const config = RATE_LIMIT_CONFIGS[type];\n    if (!config.skipSuccessfulRequests) return;\n\n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n\n    if (entry) {\n      // Reset counter on successful auth\n      entry.count = 0;\n      entry.blocked = false;\n      entry.blockUntil = undefined;\n      rateLimitStore.set(key, entry);\n    }\n  }\n\n  /**\n   * Get rate limit status without incrementing\n   */\n  static getStatus(\n    identifier: string,\n    type: RateLimitType = 'api',\n  ): {\n    remaining: number;\n    resetTime: number;\n    blocked: boolean;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n\n    if (!entry) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false,\n      };\n    }\n\n    // Check if blocked\n    if (entry.blocked && entry.blockUntil != undefined && now < entry.blockUntil) {\n      // Changed != undefined to != null\n      return {\n        remaining: 0,\n        resetTime: entry.resetTime,\n        blocked: true,\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000),\n      };\n    }\n\n    // Check if window expired\n    if (now >= entry.resetTime) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false,\n      };\n    }\n\n    return {\n      remaining: Math.max(0, config.maxRequests - entry.count),\n      resetTime: entry.resetTime,\n      blocked: false,\n    };\n  }\n\n  /**\n   * Clean up expired entries to prevent memory leaks\n   */\n  private static cleanupExpiredEntries(): void {\n    const now = Date.now();\n\n    for (const [key, entry] of rateLimitStore.entries()) {\n      // Remove entries that are expired and not blocked\n      if (\n        now >= entry.resetTime &&\n        (!entry.blocked || entry.blockUntil == undefined || now >= entry.blockUntil)\n      ) {\n        // Changed == undefined to == null\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Clear all rate limit data for an identifier\n   */\n  static clearLimits(identifier: string, type?: RateLimitType): void {\n    if (type) {\n      const key = `${type}:${identifier}`;\n      rateLimitStore.delete(key);\n    } else {\n      // Clear all types for this identifier\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS) as RateLimitType[]) {\n        // Added type assertion\n        const key = `${limitType}:${identifier}`;\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Get rate limit statistics\n   */\n  static getStats(): {\n    totalEntries: number;\n    blockedEntries: number;\n    entriesByType: Record<string, number>;\n  } {\n    const stats = {\n      totalEntries: rateLimitStore.size,\n      blockedEntries: 0,\n      entriesByType: {} as Record<string, number>,\n    };\n\n    for (const [key, entry] of rateLimitStore.entries()) {\n      const type = key.split(':')[0];\n      stats.entriesByType[type] = (stats.entriesByType[type] ?? 0) + 1;\n\n      if (entry.blocked) {\n        stats.blockedEntries += 1;\n      }\n    }\n\n    return stats;\n  }\n}\n\n/**\n * Utility function to get client identifier from request\n */\nexport function getClientIdentifier(request: Request): string {\n  // Try to get IP address from various headers\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\n\n  // Use the first available IP\n  const ip = forwarded?.split(',')[0]?.trim() ?? realIp ?? cfConnectingIp ?? 'unknown';\n\n  // Include user agent for more specific identification\n  const userAgent = request.headers.get('user-agent') ?? 'unknown';\n\n  // Create a hash of IP + User Agent for better identification\n  return `${ip}:${userAgent.slice(0, 50)}`;\n}\n\n/**\n * Rate limiting middleware for API routes\n */\nexport function withRateLimit(\n  handler: (request: Request) => Promise<Response>,\n  type: RateLimitType = 'api',\n) {\n  return async (request: Request): Promise<Response> => {\n    const identifier = getClientIdentifier(request);\n    const result = RateLimiter.checkRateLimit(identifier, type);\n\n    if (result.allowed === false) {\n      const headers = new Headers({\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\n        'X-RateLimit-Remaining': '0',\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\n      });\n\n      if (result.retryAfter) {\n        headers.set('Retry-After', result.retryAfter.toString());\n      }\n\n      return new NextResponse('Too Many Requests', { status: 429, headers });\n    }\n\n    const response = await handler(request);\n\n    // Update headers on successful requests if not skipped\n    if (RATE_LIMIT_CONFIGS[type].skipSuccessfulRequests === false) {\n      const status = RateLimiter.getStatus(identifier, type);\n      response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\n      response.headers.set('X-RateLimit-Remaining', status.remaining.toString());\n      response.headers.set('X-RateLimit-Reset', new Date(status.resetTime).toISOString());\n    }\n\n    return response;\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/supabase.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":12,"column":6,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":12,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[335,354],"text":"supabaseServiceKey == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[336,354],"text":"(supabaseServiceKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[335,354],"text":"!Boolean(supabaseServiceKey)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":107,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":107,"endColumn":43},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'(): PostgrestTransformBuilder<any, any, RawMenuItemFromDB[], \"menu_items\", unknown>' is deprecated.","line":143,"column":14,"nodeType":null,"messageId":"deprecation","endLine":143,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":168,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":168,"endColumn":16},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'(): PostgrestTransformBuilder<any, any, RawMenuItemFromDB[], \"menu_items\", unknown>' is deprecated.","line":176,"column":10,"nodeType":null,"messageId":"deprecation","endLine":176,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":773,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":773,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":781,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":781,"endColumn":25},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":807,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":807,"endColumn":15},{"ruleId":"sonarjs/no-unenclosed-multiline-block","severity":2,"message":"This statement will not be executed conditionally; only the first statement will be. The rest will execute unconditionally.","line":949,"column":68,"nodeType":"EmptyStatement","endLine":949,"endColumn":69}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createClient,\n  type PostgrestSingleResponse,\n  type PostgrestResponse,\n  type PostgrestError,\n} from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseServiceKey) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\n}\n\nif (supabaseAnonKey === undefined || supabaseAnonKey === '') {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Only create admin client on server side where service key is available\nexport const supabaseAdmin = supabaseServiceKey\n  ? createClient(supabaseUrl, supabaseServiceKey)\n  : undefined;\n\n// Database types\nimport { MenuCategory, MenuItem } from './types';\n\nexport interface FoodTruckLocation {\n  lat: number;\n  lng: number;\n  address?: string;\n  timestamp: string;\n}\n\n// Re-exporting from types.ts to ensure consistency\n\nimport { FoodTruckSchema } from './types';\n\nexport interface FoodTruck extends FoodTruckSchema {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  is_active?: boolean; // This property is in lib/types.ts but not in lib/supabase.ts\n  // Add any other properties that are in the database but not in FoodTruckSchema\n  // For example, if the database has 'exact_location' or 'city_location'\n  exact_location?: FoodTruckLocation;\n  city_location?: FoodTruckLocation;\n}\n\nexport interface ScrapingJob {\n  id: string;\n  job_type: string;\n  target_url?: string;\n  target_handle?: string;\n  platform?: string;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  priority: number;\n  scheduled_at: string;\n  started_at?: string;\n  completed_at?: string;\n  data_collected?: Record<string, unknown>;\n  errors?: string[];\n  retry_count: number;\n  max_retries: number;\n  created_at: string;\n}\n\nexport interface DataProcessingQueue {\n  id: string;\n  truck_id?: string;\n  processing_type: string;\n  raw_data: Record<string, unknown>;\n  processed_data?: Record<string, unknown>;\n  gemini_tokens_used: number;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  priority: number;\n  created_at: string;\n  processed_at?: string;\n}\n\nexport interface ApiUsage {\n  id: string;\n  service_name: string;\n  usage_date: string;\n  requests_count: number;\n  tokens_used: number;\n}\n\n// Food truck operations\n/**\n* Groups menu items by their associated food truck ID.\n* @example\n* buildMenuByTruck([{ food_truck_id: '1', name: 'Burger' }, { food_truck_id: '2', name: 'Pizza' }])\n* { '1': [{ food_truck_id: '1', name: 'Burger' }], '2': [{ food_truck_id: '2', name: 'Pizza' }] }\n* @param {RawMenuItemFromDB[]} menuItems - Array of menu items where each item must have a food truck ID.\n* @returns {Record<string, RawMenuItemFromDB[]>} A record with keys of food truck IDs and values of arrays of menu items.\n* @description\n*   - Ensures only menu items with valid, non-empty food truck IDs are included.\n*   - Initializes an array for each unique food truck ID, grouping corresponding menu items.\n*/\nfunction buildMenuByTruck(menuItems: RawMenuItemFromDB[]): Record<string, RawMenuItemFromDB[]> {\n  const menuByTruck: Record<string, RawMenuItemFromDB[]> = {};\n  for (const item of menuItems) {\n    if (typeof item.food_truck_id === 'string' && item.food_truck_id.trim() !== '') {\n      if (!menuByTruck[item.food_truck_id]) {\n        menuByTruck[item.food_truck_id] = [];\n      }\n      menuByTruck[item.food_truck_id].push(item);\n    }\n  }\n  return menuByTruck;\n}\n\nfunction handleSupabaseError(error: PostgrestError | Error, context: string) {\n  // Log technical details for developers\n  console.warn(`Error in ${context}:`, error.message);\n}\n\nexport const FoodTruckService = {\n  async getAllTrucks(\n    limit = 50,\n    offset = 0,\n  ): Promise<{ trucks: FoodTruck[]; total: number; error?: string }> {\n    try {\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*', { count: 'exact' })\n        .order('updated_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n      if (error) throw error;\n      const trucks: FoodTruck[] = (data ?? []).map((t: FoodTruck) => normalizeTruckLocation(t));\n      if (trucks.length === 0) return { trucks: [], total: count ?? 0 };\n      const truckIds = trucks.map((t: FoodTruck) => t.id);\n      let menuItems: RawMenuItemFromDB[] = [];\n      try {\n        if (truckIds.length > 0) {\n          const { data: items, error: menuError } = await supabase\n            .from('menu_items')\n            .select('*')\n            .in('food_truck_id', truckIds)\n            .returns<RawMenuItemFromDB[]>();\n          if (menuError) throw new Error(menuError.message);\n          menuItems = items ?? [];\n        }\n      } catch (menuError) {\n        handleSupabaseError(menuError, 'getAllTrucks:menu_items');\n      }\n      const menuByTruck = buildMenuByTruck(menuItems);\n      for (const truck of trucks) {\n        truck.menu = groupMenuItems(menuByTruck[truck.id] ?? []);\n      }\n      return { trucks, total: count ?? 0 };\n    } catch (error) {\n      handleSupabaseError(error, 'getAllTrucks');\n      return { trucks: [], total: 0, error: \"That didn't work, please try again later.\" };\n    }\n  },\n  async getTruckById(id: string): Promise<FoodTruck | { error: string }> {\n    try {\n      const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*')\n        .eq('id', id)\n        .single();\n      if (error) throw error;\n      if (!data) {\n        return { error: \"That didn't work, please try again later.\" };\n      }\n      const truck: FoodTruck = normalizeTruckLocation(data);\n      const { data: items, error: menuError } = await supabase\n        .from('menu_items')\n        .select('*')\n        .eq('food_truck_id', id)\n        .returns<RawMenuItemFromDB[]>();\n      if (menuError) throw menuError;\n      truck.menu = groupMenuItems(items ?? []);\n      return truck;\n    } catch (error) {\n      handleSupabaseError(error, 'getTruckById');\n      return { error: \"That didn't work, please try again later.\" };\n    }\n  },\n\n  async getTrucksByLocation(\n    lat: number,\n    lng: number,\n    radiusKm: number,\n  ): Promise<FoodTruck[] | { error: string }> {\n    try {\n      const { trucks } = await FoodTruckService.getAllTrucks();\n      const nearbyTrucks = trucks.filter((truck: FoodTruck) => {\n        if (\n          truck.current_location == undefined ||\n          typeof truck.current_location.lat !== 'number' ||\n          typeof truck.current_location.lng !== 'number'\n        ) {\n          return false;\n        }\n        const distance = calculateDistance(\n          lat,\n          lng,\n          truck.current_location.lat,\n          truck.current_location.lng,\n        );\n        return distance <= radiusKm;\n      });\n      return nearbyTrucks;\n    } catch (error: unknown) {\n      handleSupabaseError(error, 'getTrucksByLocation');\n      return { error: \"That didn't work, please try again later.\" };\n    }\n  },\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const menuData = truckData.menu;\n    const truckDataWithoutMenu = { ...truckData };\n    delete truckDataWithoutMenu.menu;\n    const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .insert([truckDataWithoutMenu])\n      .select()\n      .single();\n    if (error) {\n      handleSupabaseError(error, 'createTruck');\n      return { error: 'Failed to create truck.' };\n    }\n    await insertMenuItems(truck.id, menuData);\n    return truck;\n  },\n\n  async updateTruck(\n    id: string,\n    updates: Partial<FoodTruck>,\n  ): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const menuData = updates.menu;\n    const updatesWithoutMenu = { ...updates };\n    delete updatesWithoutMenu.menu;\n    const truckResult = await updateTruckData(id, updatesWithoutMenu);\n    if ('error' in truckResult) {\n      return truckResult;\n    }\n    if (menuData != undefined) {\n      await updateTruckMenu(id, menuData);\n    }\n    return truckResult;\n  },\n\n  async getDataQualityStats(): Promise<{\n    total_trucks: number;\n    avg_quality_score: number;\n    high_quality_count: number;\n    medium_quality_count: number;\n    low_quality_count: number;\n    verified_count: number;\n    pending_count: number;\n    flagged_count: number;\n  }> {\n    try {\n      const {\n        data,\n        error,\n      }: PostgrestSingleResponse<{\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      }> = await supabase.rpc('get_data_quality_stats').single();\n      if (error) throw error;\n      return data as {\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      };\n    } catch (error: unknown) {\n      console.warn('Error fetching data quality stats:', error);\n      return {\n        total_trucks: 0,\n        avg_quality_score: 0,\n        high_quality_count: 0,\n        medium_quality_count: 0,\n        low_quality_count: 0,\n        verified_count: 0,\n        pending_count: 0,\n        flagged_count: 0,\n      };\n    }\n  },\n};\n\n// Helper functions to reduce cognitive complexity\nconst isMenuCategory = (obj: unknown): obj is MenuCategory =>\n  typeof obj === 'object' &&\n  obj != undefined &&\n  'name' in obj &&\n  'items' in obj &&\n  Array.isArray(obj.items);\n\n/**\n * Determines whether the given object is a MenuItem.\n * @example\n * isMenuItem({ name: \"Pizza\", description: \"Delicious\", price: 9.99, dietary_tags: [\"Vegetarian\"] })\n * true\n * @param {unknown} obj - The object to be checked.\n * @returns {boolean} Returns true if the object has properties consistent with a MenuItem.\n * @description\n *   - Checks if 'name' is a string.\n *   - Checks if 'description' is either undefined or a string.\n *   - Checks if 'price' is either undefined or a number.\n *   - Ensures 'dietary_tags' is either undefined or an array of strings.\n */\nconst isMenuItem = (obj: unknown): obj is MenuItem => {\n  if (typeof obj !== 'object' || obj == undefined) return false;\n  const item = obj as Record<string, unknown>;\n  return (\n    typeof item.name === 'string' &&\n    (item.description === undefined || typeof item.description === 'string') &&\n    (item.price === undefined || typeof item.price === 'number') &&\n    (item.dietary_tags === undefined ||\n      (Array.isArray(item.dietary_tags) &&\n        item.dietary_tags.every((tag) => typeof tag === 'string')))\n  );\n};\n\n/**\n* Updates the food truck data for a given truck ID with provided updates.\n* @example\n* updateTruckData('truck123', { name: 'New Truck Name', location: 'Downtown' })\n* { id: 'truck123', name: 'New Truck Name', location: 'Downtown', ... }\n* @param {string} id - The ID of the food truck to be updated.\n* @param {Partial<FoodTruck>} updatesWithoutMenu - Partial object containing truck attributes to be updated, excluding menu items.\n* @returns {Promise<FoodTruck | { error: string }>} Returns the updated FoodTruck object or an error message upon failure.\n* @description\n*   - Requires SUPABASE_SERVICE_ROLE_KEY to perform operations.\n*   - Updates only non-menu details of the food truck.\n*   - Selects and returns the single updated record from the database.\n*   - Handles errors by invoking handleSupabaseError and returns an error message if any issues occur during update.\n*/\nasync function updateTruckData(\n  id: string,\n  updatesWithoutMenu: Partial<FoodTruck>,\n): Promise<FoodTruck | { error: string }> {\n  if (!supabaseAdmin) {\n    return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n  }\n\n  const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n    .from('food_trucks')\n    .update(updatesWithoutMenu)\n    .eq('id', id)\n    .select()\n    .single();\n\n  if (error) {\n    handleSupabaseError(error, 'updateTruckData');\n    return { error: 'Failed to update truck data.' };\n  }\n  return truck;\n}\n\n/**\n * Updates the menu items for a specific food truck in the Supabase database.\n * @example\n * updateTruckMenu('truck123', menuData)\n * Promise<void> // Updates the menu items and resolves a promise.\n * @param {string} id - Identifier for the food truck whose menu is being updated.\n * @param {MenuCategory[] | unknown[]} menuData - Array containing menu category objects or unknown objects.\n * @returns {Promise<void>} Resolves a promise when the operation is complete.\n * @description\n *   - Requires `SUPABASE_SERVICE_ROLE_KEY` to perform admin operations.\n *   - Deletes existing menu items before inserting updated ones.\n *   - Handles invalid categories or menu items by skipping them and logs warnings.\n */\nasync function updateTruckMenu(id: string, menuData: MenuCategory[] | unknown[]): Promise<void> {\n  if (!supabaseAdmin) {\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n  }\n\n  // Delete existing menu items\n  const { error: deleteError } = await supabaseAdmin\n    .from('menu_items')\n    .delete()\n    .eq('food_truck_id', id);\n\n  if (deleteError) {\n    console.error('Error deleting existing menu items for truck', id, deleteError);\n  }\n\n  // Insert new menu items if they exist\n  if (menuData != undefined && menuData.length > 0) {\n    const menuItems = menuData.flatMap((category: unknown) => {\n      if (!isMenuCategory(category)) {\n        console.warn('Skipping invalid category in updateTruckMenu:', category);\n        return [];\n      }\n\n      return (category.items ?? []).map((item: unknown) => {\n        if (!isMenuItem(item)) {\n          console.warn('Skipping invalid menu item in updateTruckMenu:', item);\n          // Return a default valid MenuItem or skip based on requirements\n          return {\n            food_truck_id: id,\n            category: category.name ?? 'Uncategorized',\n            name: 'Unknown Item',\n            description: undefined,\n            price: undefined,\n            dietary_tags: [],\n          };\n        }\n\n        return {\n          food_truck_id: id,\n          category: category.name ?? 'Uncategorized',\n          name: item.name ?? 'Unknown Item',\n          description: item.description ?? undefined,\n          price: typeof item.price === 'number' ? item.price : undefined,\n          dietary_tags: Array.isArray(item.dietary_tags) ? item.dietary_tags : [],\n        };\n      });\n    });\n\n    if (menuItems.length > 0) {\n      const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\n\n      if (menuError) {\n        console.error('Error inserting updated menu items for truck', id, menuError);\n      }\n    }\n  }\n}\n\n/**\n* Computes the distance between two geographical points using the Haversine formula.\n* @example\n* calculateDistance(51.5074, -0.1278, 40.7128, -74.0060)\n* 5585.107071089907\n* @param {number} lat1 - Latitude of the first point in decimal degrees.\n* @param {number} lon1 - Longitude of the first point in decimal degrees.\n* @param {number} lat2 - Latitude of the second point in decimal degrees.\n* @param {number} lon2 - Longitude of the second point in decimal degrees.\n* @returns {number} The distance between the two points in kilometers.\n* @description\n*   - Uses Haversine formula to account for Earth's curvature.\n*   - Assumes Earth’s radius is 6371 kilometers.\n*   - Angles should be provided in decimal degrees, not radians.\n*/\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6371;\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\n  const dLon = ((lon2 - lon1) * Math.PI) / 180;\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos((lat1 * Math.PI) / 180) *\n      Math.cos((lat2 * Math.PI) / 180) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance;\n}\n\n// Define a helper type for items coming from the DB, which might include a category field\ninterface RawMenuItemFromDB {\n  name: string;\n  description?: string;\n  price?: number;\n  dietary_tags?: string[];\n  category?: string; // This field is expected from the DB query\n  // Potentially other fields like id, food_truck_id, etc.\n  [key: string]: unknown; // Allow other properties from DB select *\n}\n\n/**\n * Groups raw menu items into categories based on their category property.\n * @example\n * groupMenuItems([{name: 'Salad', category: 'Appetizers'}, {name: 'Burger'}])\n * // Returns: [{name: 'Appetizers', items: [{name: 'Salad', description: undefined, price: undefined, dietary_tags: []}]}, \n * //           {name: 'Uncategorized', items: [{name: 'Burger', description: undefined, price: undefined, dietary_tags: []}]}]\n * @param {RawMenuItemFromDB[]} rawItems - Array of raw menu items from the database.\n * @returns {MenuCategory[]} A list of menu categories with categorized menu items.\n * @description\n *   - Wraps raw menu items into a structured format separating them by categories.\n *   - Uses the nullish coalescing operator to handle null and undefined values from the database.\n *   - Explicitly casts dietary tags to an array of strings.\n */\nfunction groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\n  const byCategory: Record<string, MenuItem[]> = {}; // Stores processed MenuItems\n  for (const rawItem of rawItems) {\n    const categoryName: string = rawItem.category ?? 'Uncategorized';\n    byCategory[categoryName] ??= [];\n    // Construct a MenuItem conforming to the MenuItem interface (no 'category' property)\n    const menuItem: MenuItem = {\n      name: rawItem.name,\n      // Use nullish coalescing to convert null from DB to undefined for the MenuItem type\n      description: rawItem.description ?? undefined,\n      price: rawItem.price ?? undefined,\n      dietary_tags: (rawItem.dietary_tags as string[]) ?? [], // Explicitly cast to string[]\n    };\n    byCategory[categoryName].push(menuItem);\n  }\n  // Map to MenuCategory structure { name: string, items: MenuItem[] }\n  return Object.entries(byCategory).map(([categoryName, itemsList]: [string, MenuItem[]]) => ({\n    name: categoryName,\n    items: itemsList,\n  }));\n}\n\n// Remove redundant type constituent in normalizeTruckLocation\n/**\n * Normalizes the location of a food truck by selecting the most accurate available location data.\n * @example\n * normalizeTruckLocation(truckInstance)\n * returns truckInstance with updated current_location property\n * @param {FoodTruck} truck - A food truck object whose location needs normalization.\n * @returns {FoodTruck} A food truck object with a standardized current location.\n * @description\n *   - If no valid latitude or longitude is found, it defaults to the fallback location.\n *   - The function prioritizes exact_location over current_location and city_location.\n *   - Ensures that the address is populated even if only latitude and longitude are available.\n *   - Uses the current timestamp when none is provided in the location data.\n */\nfunction normalizeTruckLocation(truck: FoodTruck): FoodTruck {\n  const fallback: FoodTruckLocation = {\n    lat: 0,\n    lng: 0,\n    address: 'Unknown',\n    timestamp: new Date().toISOString(),\n  };\n  const loc = truck.exact_location ?? truck.current_location ?? truck.city_location ?? {};\n  const lat = typeof loc.lat === 'number' ? loc.lat : 0;\n  const lng = typeof loc.lng === 'number' ? loc.lng : 0;\n  const {address} = loc;\n  const {timestamp} = loc;\n\n  truck.current_location =\n    lat === 0 || lng === 0\n      ? { ...fallback, address: address ?? fallback.address }\n      : {\n          lat,\n          lng,\n          address: address ?? fallback.address,\n          timestamp: timestamp ?? fallback.timestamp,\n        };\n  return truck;\n}\n\nexport const ScrapingJobService = {\n  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .insert([\n        {\n          ...jobData,\n          status: 'pending',\n          retry_count: 0,\n          max_retries: 3,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getJobsByStatus(status: string): Promise<ScrapingJob[]> {\n    try {\n      const query = supabase.from('scraping_jobs').select('*');\n\n      const { data, error }: PostgrestResponse<ScrapingJob> = await (\n        status === 'all' ? query : query.eq('status', status)\n      )\n        .order('priority', { ascending: false })\n        .order('scheduled_at', { ascending: true });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs:', error);\n      return [];\n    }\n  },\n  async updateJobStatus(\n    id: string,\n    status: string,\n    updates: Partial<ScrapingJob> = {},\n  ): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({\n        status,\n        ...updates,\n        ...(status === 'running' && { started_at: new Date().toISOString() }),\n        ...(status === 'completed' && { completed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n  async incrementRetryCount(id: string): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const {\n      data: current,\n      error: fetchError,\n    }: PostgrestSingleResponse<Pick<ScrapingJob, 'retry_count'>> = await supabaseAdmin\n      .from('scraping_jobs')\n      .select('retry_count')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) throw fetchError;\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({ retry_count: (current?.retry_count ?? 0) + 1 })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n  async getAllJobs(limit = 50, offset = 0): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .order('priority', { ascending: false })\n        .order('scheduled_at', { ascending: true })\n        .range(offset, offset + limit - 1);\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs:', error);\n      return [];\n    }\n  },\n\n  async getJobsFromDate(date: Date): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .gte('created_at', date.toISOString())\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs from date:', error);\n      return [];\n    }\n  },\n};\n\nexport const DataProcessingService = {\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .insert([\n        {\n          ...queueData,\n          status: 'pending',\n          gemini_tokens_used: 0,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getNextQueueItem(): Promise<DataProcessingQueue | undefined> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .select('*')\n      .eq('status', 'pending')\n      .order('priority', { ascending: false })\n      .order('created_at', { ascending: true })\n      .limit(1)\n      .single();\n\n    if (error !== null && String(error.code) != 'PGRST116') throw error;\n    return data ?? undefined;\n  },\n\n  async getQueueByStatus(status: string): Promise<DataProcessingQueue[]> {\n    try {\n      const { data, error }: PostgrestResponse<DataProcessingQueue> = await supabase\n        .from('data_processing_queue')\n        .select('*')\n        .eq('status', status)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error fetching queue:', error);\n      return [];\n    }\n  },\n  async updateQueueItem(\n    id: string,\n    updates: Partial<DataProcessingQueue>,\n  ): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .update({\n        ...updates,\n        ...(updates.status === 'completed' && { processed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n};\n\nexport const DataQualityService = {\n  calculateQualityScore: (truck: FoodTruck) => {\n    // Placeholder for actual quality score calculation logic\n    // This should be implemented based on defined data quality rules\n    let score = 0;\n    if (typeof truck.name === 'string' && truck.name.trim() !== '') score += 20;\n    if (\n      truck.current_location &&\n      typeof truck.current_location.lat === 'number' &&\n      !Number.isNaN(truck.current_location.lat) &&\n      typeof truck.current_location.lng === 'number' &&\n      !Number.isNaN(truck.current_location.lng)\n    )\n      score += 30;\n    if (\n      truck.contact_info &&\n      ((typeof truck.contact_info.phone === 'string' && truck.contact_info.phone.trim() !== '') ||\n        (typeof truck.contact_info.email === 'string' && truck.contact_info.email.trim() !== '') ||\n        (typeof truck.contact_info.website === 'string' &&\n          truck.contact_info.website.trim() !== ''))\n    )\n      score += 25;\n    if (Array.isArray(truck.menu) && truck.menu.length > 0) score += 15;\n    if (truck.operating_hours != undefined) score += 10;\n    return { score: Math.min(100, score) };\n  },\n\n  async updateTruckQualityScore(truckId: string): Promise<FoodTruck | { error: string }> {\n    if (!supabaseAdmin) {\n      return { error: 'Admin operations require SUPABASE_SERVICE_ROLE_KEY' };\n    }\n    const { data: truck, error: fetchError }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .select('*')\n      .eq('id', truckId)\n      .single();\n\n    if (fetchError) {\n      handleSupabaseError(fetchError, 'updateTruckQualityScore:fetch');\n      return { error: `Failed to fetch truck with ID ${truckId}.` };\n    }\n    if (!truck) {\n      return { error: `Truck with ID ${truckId} not found.` };\n    }\n\n    const { score } = this.calculateQualityScore(truck);\n\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .update({ data_quality_score: score })\n      .eq('id', truckId)\n      .select()\n      .single();\n\n    if (error) {\n      handleSupabaseError(error, 'updateTruckQualityScore:update');\n      return { error: `Failed to update quality score for truck with ID ${truckId}.` };\n    }\n    return data;\n  },\n};\n\nexport const APIUsageService = {\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<ApiUsage> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const {\n        data: existing,\n        error: existingError,\n      }: { data: ApiUsage | undefined; error: PostgrestError | undefined } = await supabaseAdmin\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n\n      if (existingError && existingError.code !== 'PGRST116') throw existingError;\n\n      if (existing) {\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .update({\n            requests_count: (existing.requests_count ?? 0) + requests,\n            tokens_used: (existing.tokens_used ?? 0) + tokens,\n          })\n          .eq('id', existing.id)\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      } \n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .insert([\n            {\n              service_name: serviceName,\n              usage_date: today,\n              requests_count: requests,\n              tokens_used: tokens,\n            },\n          ])\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      \n    } catch (error: unknown) {\n      console.warn('Error tracking usage:', error);\n      throw error;\n    }\n  },\n  async getTodayUsage(serviceName: string): Promise<ApiUsage | undefined> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n\n      if (error !== null && String(error.code) != 'PGRST116') throw error;\n      return data ?? undefined;\n    } catch (error: unknown) {\n      console.warn('Error getting today usage:', error);\n      throw error;\n    }\n  },\n\n  async getAllUsageStats(): Promise<ApiUsage[]> {\n    try {\n      const { data, error }: PostgrestResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .order('usage_date', { ascending: false })\n        .limit(30);\n\n      if (error) throw error;\n      return data ?? [];\n    } catch (error: unknown) {\n      console.warn('Error getting usage stats:', error);\n      throw error;\n    }\n  },\n};\n\nexport { type MenuItem, type MenuCategory, type OperatingHours, type PriceRange } from './types';\n\n// Helper to prepare menu items for DB insertion\n/**\n * Prepares a list of menu items for insertion by filtering and transforming the input data.\n * @example\n * prepareMenuItemsForInsert(\"truck123\", [{ name: \"Beverages\", items: [{name: \"Tea\", price: 3.00}]}])\n * [\n *   {\n *     food_truck_id: \"truck123\",\n *     category: \"Beverages\",\n *     name: \"Tea\",\n *     description: undefined,\n *     price: 3.00,\n *     dietary_tags: []\n *   }\n * ]\n * @param {string} truckId - Unique identifier of the food truck.\n * @param {MenuCategory[] | unknown[] | undefined} menuData - Array of menu categories or unknown data, which may contain items to insert.\n * @returns {MenuItem[]} Returns an array of valid menu items formatted for database insertion, excluding invalid entries.\n * @description\n *   - Filters input data to ensure items are of MenuCategory type.\n *   - Logs warnings for invalid menu items and skips them.\n *   - Uses default values for missing item properties such as `category`, `name`, or `price`.\n */\nfunction prepareMenuItemsForInsert(\n  truckId: string,\n  menuData: MenuCategory[] | unknown[] | undefined,\n) {\n  if (!Array.isArray(menuData) || menuData.length === 0) return [];;\n  // Explicitly filter for MenuCategory to ensure type safety\n  const categories = menuData.filter(\n    (category): category is MenuCategory =>\n      typeof category === 'object' &&\n      category != undefined &&\n      'name' in category &&\n      'items' in category &&\n      Array.isArray(category.items),\n  ) as MenuCategory[];\n\n  return categories.flatMap(\n    (category) =>\n      (Array.isArray(category.items) ? category.items : [])\n        .map((item: unknown) => {\n          if (!isMenuItem(item)) {\n            console.warn('Skipping invalid menu item:', item);\n            return; // Return undefined for invalid items to be filtered out later\n          }\n\n          return {\n            food_truck_id: truckId,\n            category:\n              typeof category.name === 'string' && category.name !== ''\n                ? category.name\n                : 'Uncategorized',\n            name: typeof item.name === 'string' && item.name !== '' ? item.name : 'Unknown Item',\n            description:\n              typeof item.description === 'string' && item.description !== ''\n                ? item.description\n                : undefined,\n            price:\n              typeof item.price === 'number' && !Number.isNaN(item.price) ? item.price : undefined,\n            dietary_tags: Array.isArray(item.dietary_tags) ? item.dietary_tags : [],\n          };\n        })\n        .filter(Boolean) as MenuItem[], // Filter out nulls and assert type\n  );\n}\n\nasync function insertMenuItems(truckId: string, menuData: MenuCategory[] | unknown[] | undefined) {\n  const menuItems = prepareMenuItemsForInsert(truckId, menuData);\n  if (menuItems.length === 0) return;\n  const { error: menuError } = await supabaseAdmin!.from('menu_items').insert(menuItems);\n  if (menuError) {\n    console.error('Error inserting menu items for truck', truckId, menuError);\n  }\n}\n\n// Fix all strict-boolean-expressions and always-true/false comparisons below\n// Example: if (someString) => if (typeof someString === 'string' && someString.trim() !== '')\n// Example: if (someNumber) => if (typeof someNumber === 'number' && !Number.isNaN(someNumber) && someNumber !== 0)\n// Example: if (someObject) => if (someObject != null && someObject != undefined)\n\n// For all other conditionals, ensure explicit nullish/empty/NaN checks as above\n\nexport { type PostgrestError, type PostgrestResponse } from '@supabase/supabase-js';","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[298,301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[298,301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Shared types for the Food Truck Finder application\n\nexport type PriceRange = '$|$$,$$$';\n\nexport interface MenuCategory {\n  name: string;\n  items: MenuItem[];\n}\n\nexport interface MenuItem {\n  name: string;\n  description: string | undefined;\n  price: number | string | undefined;\n  dietary_tags: any[];\n  is_popular?: boolean;\n}\n\nexport interface LocationData {\n  address: string | undefined;\n  city: string | undefined;\n  state: string | undefined;\n  landmarks: string[];\n  coordinates: {\n    lat: number | undefined;\n    lng: number | undefined;\n  };\n  confidence: number;\n  raw_location_text: string | undefined;\n}\n\nexport type DailyOperatingHours =\n  | { open: string; close: string; closed: boolean }\n  | { closed: true }\n  | undefined;\n\nexport interface OperatingHours {\n  monday: DailyOperatingHours;\n  tuesday: DailyOperatingHours;\n  wednesday: DailyOperatingHours;\n  thursday: DailyOperatingHours;\n  friday: DailyOperatingHours;\n  saturday: DailyOperatingHours;\n  sunday: DailyOperatingHours;\n  [key: string]: DailyOperatingHours; // Add index signature\n}\n\nexport interface SentimentAnalysisResult {\n  sentiment: 'positive' | 'negative' | 'neutral';\n  score: number;\n  confidence: number;\n  key_topics: string[];\n  positive_aspects: string[];\n  negative_aspects: string[];\n  summary: string;\n  recommended: boolean;\n}\n\nexport interface EnhancedFoodTruckData {\n  name: string | undefined;\n  description: string | undefined;\n  cuisine_type: string[];\n  price_range: PriceRange;\n  specialties: string[];\n  dietary_options: string[];\n  enhanced_menu: {\n    categories: MenuCategory[];\n  };\n  standardized_hours: OperatingHours;\n  cleaned_contact: {\n    phone: string | undefined;\n    email: string | undefined;\n    website: string | undefined;\n  };\n  data_quality_improvements: string[];\n  confidence_score: number;\n}\n\nexport interface ExtractedFoodTruckDetails {\n  name: string | undefined;\n  description: string | undefined;\n  cuisine_type: string[];\n  price_range: PriceRange | undefined;\n  specialties: string[];\n  current_location: {\n    address: string | undefined;\n    city: string | undefined;\n    state: string | undefined;\n    zip_code: string | undefined;\n    lat?: number;\n    lng?: number;\n    raw_text: string | undefined;\n  };\n  scheduled_locations?: {\n    // Added scheduled_locations\n    address?: string;\n    city?: string;\n    state?: string;\n    zip_code?: string;\n    lat?: number;\n    lng?: number;\n    timestamp: string;\n    start_time: string; // Added start_time\n    end_time: string; // Added end_time\n  }[];\n  operating_hours: OperatingHours;\n  menu: MenuCategory[];\n  contact_info: {\n    phone?: string;\n    email?: string;\n    website?: string;\n  };\n  social_media: {\n    instagram?: string;\n    facebook?: string;\n    twitter?: string;\n    tiktok?: string;\n    yelp?: string;\n  };\n  source_url: string;\n}\n\nexport interface FirecrawlOutputData {\n  markdown: string;\n  name?: string;\n  source_url?: string;\n}\n\nexport interface FoodTruckSchema {\n  name: string;\n  description?: string;\n  current_location: {\n    lat: number;\n    lng: number;\n    address: string | undefined;\n    timestamp: string;\n  };\n  scheduled_locations: ExtractedFoodTruckDetails['scheduled_locations'];\n  operating_hours: OperatingHours;\n  menu: MenuCategory[];\n  contact_info: ExtractedFoodTruckDetails['contact_info'];\n  social_media: ExtractedFoodTruckDetails['social_media'];\n  cuisine_type: string[];\n  price_range: PriceRange | undefined;\n  specialties: string[];\n  data_quality_score: number;\n  verification_status: 'pending' | 'verified' | 'flagged';\n  source_urls: string[];\n  last_scraped_at: string;\n  test_run_flag?: boolean;\n  website?: string;\n  phone_number?: string;\n  email?: string;\n  instagram_handle?: string;\n  facebook_handle?: string;\n  twitter_handle?: string;\n  schedule?: unknown[]; // Assuming schedule is an array, adjust type if known\n  average_rating?: number;\n  review_count?: number;\n}\n\n// Database record type with additional fields\nexport interface FoodTruck extends FoodTruckSchema {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  is_active?: boolean;\n}\n\nexport interface GeminiResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  tokensUsed?: number;\n  error?: string;\n  promptSent?: string;\n}\n\nexport interface StageResult {\n  status: string;\n  data?: FirecrawlOutputData | ExtractedFoodTruckDetails | FoodTruckSchema;\n  error?: string;\n  details?: string;\n  prompt?: string;\n  tokensUsed?: number;\n  metadata?: { name?: string; source_url?: string };\n  rawContent?: string;\n  preparedData?: FoodTruckSchema;\n  recordId?: string;\n}\n\nexport interface TestPipelineResults {\n  firecrawl?: StageResult;\n  gemini?: StageResult;\n  supabase?: StageResult;\n  overallStatus?: string;\n  logs?: string[];\n  error?: string;\n}\n\nexport interface PipelineRunResult {\n  firecrawl?: StageResult;\n  gemini?: StageResult;\n  supabase?: StageResult;\n  logs: string[];\n  overallStatus: 'Success' | 'Error';\n}\n\nexport interface RealtimeMetrics {\n  scrapingJobs: {\n    active: number;\n    completed: number;\n    failed: number;\n    pending: number;\n  };\n  dataQuality: {\n    averageScore: number;\n    totalTrucks: number;\n    recentChanges: number;\n  };\n  systemHealth: {\n    status: 'healthy' | 'warning' | 'error';\n    uptime: number;\n    lastUpdate: string;\n  };\n}\n\nexport interface TruckRating {\n  id: number;\n  title: string;\n  score: number;\n}\n\nexport interface PipelineEvent {\n  type: string; // e.g., 'job_started', 'job_completed', 'data_updated'\n  payload: Record<string, unknown>; // Generic payload for event-specific data\n  timestamp: string;\n}","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/types/foodTruck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/types/webVitals.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/utils/QualityScorer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/utils/apiHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/utils/dataQualityFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]},{"filePath":"/app/lib/utils/foodTruckHelpers.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":58,"column":51,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":58,"endColumn":55},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":1,"message":"Unexpected object value in conditional. The condition is always true.","line":76,"column":8,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":76,"endColumn":16},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":155,"column":15,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":155,"endColumn":36,"fix":{"range":[5947,5962],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":185,"column":15,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":185,"endColumn":36,"fix":{"range":[7068,7083],"text":""}}],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":115,"column":5,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":115,"endColumn":45,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { FoodTruck, DailyOperatingHours, MenuItem } from '@/lib/types'; // Added DailyOperatingHours, PriceRange, MenuItem\nimport { supabaseFallback } from '@/lib/fallback/supabaseFallback';\n\nexport const getCurrentDay = () => {\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  return days[new Date().getDay()];\n};\n\nexport const formatPrice = (price: number | string) => {\n  // Updated to accept string\n  if (typeof price === 'string') {\n    // Handle cases where price might be a string like \"$10-$20\" or \"Varies\"\n    return price;\n  }\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(price);\n};\n\n/**\n* Converts operational hours to a readable format or returns 'Closed' if applicable.\n* @example\n* formatOperatingHours({ open: '09:00', close: '17:00', closed: false })\n* '9:00 AM - 5:00 PM'\n* @param {DailyOperatingHours} hours - Object containing daily opening and closing times, and closed status.\n* @returns {string} Formatted operating hours string or 'Closed'.\n* @description\n*   - Handles conversion of military time to 12-hour format.\n*   - Adjusts for typical date parsing without relying on actual date due to fixed date string.\n*   - Properly responds to 'closed' status by returning 'Closed'.\n*   - Locales can impact formatted output by changing time conventions.\n*/\nexport const formatHours = (hours: DailyOperatingHours) => {\n  // Updated to accept DailyOperatingHours\n  if (!hours || hours.closed) {\n    return 'Closed';\n  }\n  const open = new Date(`1970-01-01T${hours.open}Z`).toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  });\n  const close = new Date(`1970-01-01T${hours.close}Z`).toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  });\n  return `${open} - ${close}`;\n};\n\nexport const getPopularItems = (truck: FoodTruck): MenuItem[] => {\n  // Explicitly define return type\n  // Explicitly check for nullish and boolean\n  return (\n    truck.menu\n      ?.flatMap((category) => category.items)\n      .filter((item): item is MenuItem => Boolean(item && item.is_popular === true)) ?? []\n  );\n};\n\n/**\n * Calculates the price range of all items in the food truck's menu.\n * @example\n * getPriceRange(foodTruck)\n * \"5.00 - 12.50\"\n * @param {FoodTruck} truck - The food truck object containing menu details.\n * @returns {string} Returns a formatted string representing the price range or 'N/A' if no valid prices are found.\n * @description\n *   - Utilizes the optional chaining operator to safely access nested menu items.\n *   - Filters out non-numeric and undefined prices before calculating the range.\n *   - Formats the minimum and maximum prices using a helper function.\n */\nexport const getPriceRange = (truck: FoodTruck) => {\n  const allItems = truck.menu?.flatMap((category) => category.items);\n  if (!allItems || allItems.length === 0) {\n    return 'N/A';\n  }\n  const numericPrices = allItems\n    .map((item) => item.price)\n    .filter((price): price is number => typeof price === 'number' && price != undefined); // Filter for numbers\n\n  if (numericPrices.length === 0) {\n    return 'N/A'; // No numeric prices found\n  }\n\n  const minPrice = Math.min(...numericPrices);\n  const maxPrice = Math.max(...numericPrices);\n  return `${formatPrice(minPrice)} - ${formatPrice(maxPrice)}`;\n};\n\nexport const getTodayHours = (truck: FoodTruck) => {\n  const today = getCurrentDay();\n  return truck.operating_hours?.[today];\n};\n\n// Get user's current location or default to San Francisco\n/**\n * Retrieves the user's geolocation and updates the location state.\n * @example\n * getUserLocationHelper(setUserLocation)\n * // Updates user's location or defaults to San Francisco\n * @param {function} setUserLocation - Callback function to update user's location state with latitude and longitude.\n * @returns {void} Function does not return anything.\n * @description\n *   - Defaults the location to San Francisco if geolocation access is denied or not supported.\n *   - Utilizes browser's geolocation API to fetch current coordinates.\n *   - Provides a warning in the console if location access is denied.\n */\nexport function getUserLocationHelper(\n  setUserLocation: (location: { lat: number; lng: number }) => void,\n) {\n  if (typeof navigator !== 'undefined' && navigator.geolocation != undefined) {\n    // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      },\n      (error) => {\n        console.warn('Location access denied:', error);\n        // Default to San Francisco\n        setUserLocation({ lat: 37.7749, lng: -122.4194 });\n      },\n    );\n  } else {\n    // Default to San Francisco if geolocation is not supported\n    setUserLocation({ lat: 37.7749, lng: -122.4194 });\n  }\n}\n\n// Load all food trucks from API\n/**\n * Loads food truck data from the server and updates state.\n * @example\n * loadFoodTrucksHelper(setTrucks, setLoading)\n * undefined\n * @param {(trucks: FoodTruck[]) => void} setTrucks - Callback to update the state with loaded food trucks.\n * @param {(loading: boolean) => void} setLoading - Callback to update the loading state.\n * @returns {void} No return value.\n * @description\n *   - Fetches data from '/api/trucks' endpoint.\n *   - Parses the response and expects an object containing a 'trucks' array.\n *   - Logs an error message to the console if fetching or parsing fails.\n *   - Ensures loading state is updated to false in all cases.\n */\nexport async function loadFoodTrucksHelper(\n  setTrucks: (trucks: FoodTruck[]) => void,\n  setLoading: (loading: boolean) => void,\n) {\n  try {\n    const { trucks } = await supabaseFallback.getFoodTrucks();\n    setTrucks(trucks as FoodTruck[]);\n  } catch (error: unknown) {\n    console.error('Failed to load food trucks:', error);\n  } finally {\n    setLoading(false);\n  }\n}\n\n// Load nearby food trucks based on user location\n/**\n* Loads nearby food trucks based on user's location.\n* @example\n* loadNearbyTrucksHelper({ lat: 37.7749, lng: -122.4194 }, setTrucksCallback)\n* // sets trucks with food truck data or an empty array\n* @param {{ lat: number; lng: number } | undefined} userLocation - The location of the user used to find nearby trucks.\n* @param {(trucks: FoodTruck[]) => void} setTrucks - Callback function to set the trucks data.\n* @returns {void} No return value.\n* @description\n*   - Fetches nearby trucks from the API using latitude and longitude.\n*   - Uses a fixed radius of 10 units for truck search.\n*   - Handles errors by logging them to the console.\n*/\nexport async function loadNearbyTrucksHelper(\n  userLocation: { lat: number; lng: number } | undefined,\n  setTrucks: (trucks: FoodTruck[]) => void,\n) {\n  if (!userLocation) return;\n\n  try {\n    const { trucks } = await supabaseFallback.getFoodTrucks();\n    setTrucks(trucks as FoodTruck[]);\n  } catch (error: unknown) {\n    console.error('Failed to load nearby trucks:', error);\n  }\n}\n\n// Check if a food truck is currently open\n/**\n * Determines if the food truck is currently open based on its operating hours.\n * @example\n * isTruckOpen(myFoodTruck)\n * // returns true or false depending on current time and truck's operating hours\n * @param {FoodTruck} truck - The food truck object with operating hours.\n * @returns {boolean} Indicates whether the food truck is open.\n * @description\n *   - Utilizes the current day's name to fetch operating hours.\n *   - Handles potential errors in parsing operating hours.\n *   - Logs errors related to parsing time and truck name.\n *   - Uses military time format (HHMM) for comparison.\n */\nexport function isTruckOpen(truck: FoodTruck): boolean {\n  const today = getCurrentDay();\n  const hours = truck.operating_hours?.[today];\n\n  // Ensure hours and its properties are not null/undefined before accessing\n  if (\n    hours == undefined ||\n    hours.closed === true ||\n    hours.open == undefined ||\n    hours.close == undefined\n  ) {\n    return false;\n  }\n\n  try {\n    const now = new Date();\n    const currentTime = now.getHours() * 100 + now.getMinutes();\n    const openTime = Number.parseInt(hours.open.replace(':', ''), 10);\n    const closeTime = Number.parseInt(hours.close.replace(':', ''), 10);\n\n    return currentTime >= openTime && currentTime <= closeTime;\n  } catch (error: unknown) {\n    console.error('Error parsing operating hours for truck', truck.name, error);\n    return false;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]}]