{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChEA;AACA;;;;AEDA;AACA;AACA;AACA","sources":["../../home/jules/.nvm/versions/node/v22.17.1/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../external node-commonjs \"node:util\"",".././.github/actions/scrape/github-action-scraper.js","../webpack/bootstrap","../webpack/runtime/async module","../webpack/runtime/compat","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":[null,"module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:util\");","/**\n * GitHub Action Scraper Script (TypeScript)\n *\n * This script is designed to run in GitHub Actions to process pending scraping jobs.\n * It uses ESM imports and is compatible with Node.js 20+.\n *\n * Usage: node src/actions/github-action-scraper.js --limit 10\n */\nimport { parseArgs } from 'node:util';\nimport { processScrapingJob } from '../../dist/lib/pipeline/scrapingProcessor.js';\nimport { ScrapingJobService } from '../../dist/lib/supabase/services/scrapingJobService.js';\n// Parse command line arguments\nconst options = {\n    limit: {\n        type: 'string',\n        short: 'l',\n        default: '10'\n    },\n    help: {\n        type: 'boolean',\n        short: 'h',\n        default: false\n    }\n};\nconst { values } = parseArgs({ options, allowPositionals: false });\nif (values.help) {\n    console.log(`\nGitHub Action Scraper\n\nUsage: node src/actions/github-action-scraper.js [options]\n\nOptions:\n  -l, --limit <number>  Maximum number of jobs to process (default: 10)\n  -h, --help           Show this help message\n\nEnvironment Variables Required:\n  - NEXT_PUBLIC_SUPABASE_URL\n  - SUPABASE_SERVICE_ROLE_KEY\n  - FIRECRAWL_API_KEY\n  - GEMINI_API_KEY or GOOGLE_API_KEY\n  `);\n    process.exit(0);\n}\nconst limit = parseInt(values.limit || '10', 10);\n// Validate environment variables\nconst requiredEnvVars = [\n    'NEXT_PUBLIC_SUPABASE_URL',\n    'SUPABASE_SERVICE_ROLE_KEY',\n    'FIRECRAWL_API_KEY'\n];\nconst missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);\nif (missingEnvVars.length > 0) {\n    console.error('‚ùå Missing required environment variables:');\n    missingEnvVars.forEach(envVar => console.error(`  - ${envVar}`));\n    process.exit(1);\n}\n// Check for AI API key\nif (!process.env.GEMINI_API_KEY && !process.env.GOOGLE_API_KEY) {\n    console.error('‚ùå Missing AI API key: either GEMINI_API_KEY or GOOGLE_API_KEY is required');\n    process.exit(1);\n}\nconsole.log('üöÄ GitHub Action Scraper Starting');\nconsole.log(`üìä Processing up to ${limit} jobs`);\nconsole.log(`üîó Supabase URL: ${process.env.NEXT_PUBLIC_SUPABASE_URL?.substring(0, 50)}...`);\n/**\n * Main execution function\n */\nasync function main() {\n    let processedCount = 0;\n    let successCount = 0;\n    let failureCount = 0;\n    try {\n        console.log('\\nüìã Fetching pending scraping jobs...');\n        // Get pending jobs from Supabase\n        const pendingJobs = await ScrapingJobService.getJobsByStatus('pending');\n        if (!pendingJobs || pendingJobs.length === 0) {\n            console.log('‚úÖ No pending jobs found');\n            return;\n        }\n        console.log(`üì¶ Found ${pendingJobs.length} pending jobs`);\n        // Limit the number of jobs to process\n        const jobsToProcess = pendingJobs.slice(0, limit);\n        console.log(`‚ö° Processing ${jobsToProcess.length} jobs`);\n        // Process jobs sequentially to avoid overwhelming APIs\n        for (const job of jobsToProcess) {\n            processedCount++;\n            console.log(`\\n[${processedCount}/${jobsToProcess.length}] Processing job: ${job.id}`);\n            console.log(`üéØ Target URL: ${job.target_url}`);\n            try {\n                // Process the scraping job using the pipeline\n                await processScrapingJob(job.id);\n                successCount++;\n                console.log(`‚úÖ Job ${job.id} completed successfully`);\n            }\n            catch (error) {\n                failureCount++;\n                const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n                console.error(`‚ùå Job ${job.id} failed:`, errorMessage);\n                // Log the error but continue processing other jobs\n                console.error('Error details:', error);\n            }\n            // Add a small delay between jobs to be respectful to APIs\n            if (processedCount < jobsToProcess.length) {\n                console.log('‚è±Ô∏è  Waiting 2 seconds before next job...');\n                await new Promise(resolve => setTimeout(resolve, 2000));\n            }\n        }\n    }\n    catch (error) {\n        console.error('üí• Fatal error in main execution:', error);\n        process.exit(1);\n    }\n    // Final summary\n    console.log('\\nüìä Processing Summary:');\n    console.log(`  Total processed: ${processedCount}`);\n    console.log(`  Successful: ${successCount} ‚úÖ`);\n    console.log(`  Failed: ${failureCount} ‚ùå`);\n    console.log(`  Success rate: ${processedCount > 0 ? Math.round((successCount / processedCount) * 100) : 0}%`);\n    if (failureCount > 0) {\n        console.log('\\n‚ö†Ô∏è  Some jobs failed. Check the logs above for details.');\n        // Don't exit with error code as partial success is acceptable\n    }\n    console.log('\\nüèÅ GitHub Action Scraper completed');\n}\n// Error handlers\nprocess.on('uncaughtException', (error) => {\n    console.error('üí• Uncaught Exception:', error);\n    process.exit(1);\n});\nprocess.on('unhandledRejection', (reason, promise) => {\n    console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);\n    process.exit(1);\n});\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n    console.log('\\n‚èπÔ∏è  Received SIGINT, shutting down gracefully...');\n    process.exit(0);\n});\nprocess.on('SIGTERM', () => {\n    console.log('\\n‚èπÔ∏è  Received SIGTERM, shutting down gracefully...');\n    process.exit(0);\n});\n// Run the main function using top-level await for pure ESM module\nawait main().catch((error) => {\n    console.error('üí• Unhandled error in main:', error);\n    process.exit(1);\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(84);\n",""],"names":[],"sourceRoot":""}