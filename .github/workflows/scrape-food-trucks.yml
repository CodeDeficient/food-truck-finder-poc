name: Scrape Food Truck Websites
on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:
    inputs:
      limit:
        description: 'Number of jobs to process (default: 10)'
        required: false
        default: '10'
      debug:
        description: 'Enable debug logging'
        required: false
        default: 'false'

jobs:
  scrape-food-trucks:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      NODE_OPTIONS: --max_old_space_size=4096
      DEBUG_LOGGING: ${{ github.event.inputs.debug || 'false' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Setup environment
        run: |
          echo "Setting up environment variables..."
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
          echo "FIRECRAWL_API_KEY=${{ secrets.FIRECRAWL_API_KEY }}" >> $GITHUB_ENV

      - name: Run scraping pipeline
        id: scrape
        run: |
          echo "🚀 Starting food truck scraping pipeline..."
          LIMIT=${{ github.event.inputs.limit || 10 }}
          
          if [ "$DEBUG_LOGGING" = "true" ]; then
            node scripts/github-action-scraper.js --limit $LIMIT --debug
          else
            node scripts/github-action-scraper.js --limit $LIMIT
          fi
          
          echo "✅ Pipeline completed successfully"

      - name: Report results
        if: always()
        run: |
          echo "📊 Job Summary:"
          echo "Job status: ${{ job.status }}"
          echo "Processed at: $(date)"
          
          if [ "${{ job.status }}" = "failure" ]; then
            echo "❌ Pipeline failed - check logs above for details"
            exit 1
          else
            echo "✅ Pipeline completed successfully"
          fi

      - name: Monitor API usage
        if: always()
        run: |
          echo "📈 Checking API usage..."
          node -e "
          import { APIUsageService } from './dist/lib/supabase/services/apiUsageService.js';
          APIUsageService.getTodayUsage('gemini').then(usage => {
            console.log('Gemini API usage today:', JSON.stringify(usage, null, 2));
          }).catch(console.error);
          "
