[{"filePath":"/app/analyze-complexity-violations.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `analyzeComplexityViolations.cjs` or `AnalyzeComplexityViolations.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":51},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":5,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":5,"endColumn":12,"suggestions":[{"fix":{"range":[105,147],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":8,"column":27,"nodeType":"Literal","messageId":"issue","endLine":8,"endColumn":55},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":64,"column":27,"nodeType":"Literal","messageId":"error","endLine":64,"endColumn":31,"suggestions":[{"messageId":"remove","fix":{"range":[1753,1760],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[1756,1760],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":112,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":112,"endColumn":12,"suggestions":[{"fix":{"range":[3031,3099],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":113,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":113,"endColumn":12,"suggestions":[{"fix":{"range":[3100,3129],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":115,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":115,"endColumn":12,"suggestions":[{"fix":{"range":[3131,3160],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":116,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":116,"endColumn":12,"suggestions":[{"fix":{"range":[3161,3245],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":117,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":117,"endColumn":12,"suggestions":[{"fix":{"range":[3246,3323],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":120,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":120,"endColumn":14,"suggestions":[{"fix":{"range":[3364,3415],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/no-process-exit","severity":2,"message":"Only use `process.exit()` in CLI apps. Throw an error instead.","line":121,"column":3,"nodeType":"CallExpression","messageId":"no-process-exit","endLine":121,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":124,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":124,"endColumn":12,"suggestions":[{"fix":{"range":[3438,3507],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":125,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":125,"endColumn":12,"suggestions":[{"fix":{"range":[3508,3536],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":131,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":131,"endColumn":14,"suggestions":[{"fix":{"range":[3737,3829],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":132,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":132,"endColumn":14,"suggestions":[{"fix":{"range":[3832,3876],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":135,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":135,"endColumn":16,"suggestions":[{"fix":{"range":[3916,4059],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":138,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":138,"endColumn":14,"suggestions":[{"fix":{"range":[4069,4128],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":140,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":140,"endColumn":16,"suggestions":[{"fix":{"range":[4178,4268],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":144,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":144,"endColumn":12,"suggestions":[{"fix":{"range":[4276,4325],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":145,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":145,"endColumn":12,"suggestions":[{"fix":{"range":[4326,4354],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":148,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":148,"endColumn":12,"suggestions":[{"fix":{"range":[4451,4538],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":150,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":150,"endColumn":14,"suggestions":[{"fix":{"range":[4600,4680],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":153,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":153,"endColumn":12,"suggestions":[{"fix":{"range":[4684,4735],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":154,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":154,"endColumn":12,"suggestions":[{"fix":{"range":[4736,4803],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":155,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":155,"endColumn":12,"suggestions":[{"fix":{"range":[4804,4877],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":156,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":156,"endColumn":12,"suggestions":[{"fix":{"range":[4878,4934],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":157,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":157,"endColumn":12,"suggestions":[{"fix":{"range":[4935,4993],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":158,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":158,"endColumn":12,"suggestions":[{"fix":{"range":[4994,5059],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":160,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":160,"endColumn":12,"suggestions":[{"fix":{"range":[5061,5099],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":161,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":161,"endColumn":12,"suggestions":[{"fix":{"range":[5100,5184],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":162,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":162,"endColumn":12,"suggestions":[{"fix":{"range":[5185,5271],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":176,"column":80,"nodeType":"Literal","messageId":"error","endLine":176,"endColumn":84,"suggestions":[{"messageId":"replace","fix":{"range":[5655,5659],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":177,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":177,"endColumn":12,"suggestions":[{"fix":{"range":[5666,5744],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { execSync } = require('node:child_process');\nconst fs = require('node:fs');\n\n// Get ESLint output\nconsole.log('Running ESLint analysis...');\nlet eslintOutput;\ntry {\n  eslintOutput = execSync('npx eslint . --format json', { \n    encoding: 'utf8',\n    stdio: 'pipe',\n    timeout: 120_000\n  });\n} catch (error) {\n  // ESLint returns non-zero exit code when errors are found\n  eslintOutput = error.stdout;\n}\n\nconst results = JSON.parse(eslintOutput);\n\n// Complexity-related rules to look for\nconst complexityRules = new Set([\n  'max-lines-per-function',\n  'max-lines',\n  'sonarjs/cognitive-complexity',\n  'complexity',\n  'max-depth',\n  'max-params',\n  'sonarjs/no-identical-functions'\n]);\n\n// Extract components with complexity violations\nconst complexityViolations = [];\n\nfor (const file of results) {\n  if (file.messages && file.messages.length > 0) {\n    for (const message of file.messages) {\n      if (complexityRules.has(message.ruleId)) {\n        complexityViolations.push({\n          filePath: file.filePath.replace('C:\\\\AI\\\\food-truck-finder-poc\\\\', ''),\n          ruleId: message.ruleId,\n          message: message.message,\n          line: message.line,\n          endLine: message.endLine,\n          severity: message.severity,\n          nodeType: message.nodeType\n        });\n      }\n    }\n  }\n}\n\n// Group by file and calculate severity\nconst fileViolations = {};\nfor (const violation of complexityViolations) {\n  if (!fileViolations[violation.filePath]) {\n    fileViolations[violation.filePath] = [];\n  }\n  fileViolations[violation.filePath].push(violation);\n}\n\n// Calculate severity scores and sort\nconst prioritizedFiles = Object.entries(fileViolations).map(([filePath, violations]) => {\n  let severityScore = 0;\n  let maxLinesViolation = null;\n  \n  for (const violation of violations) {\n    switch (violation.ruleId) {\n      case 'max-lines-per-function': {\n        // Extract current and max lines from message\n        const match = violation.message.match(/has too many lines \\((\\d+)\\)\\. Maximum allowed is (\\d+)/);\n        if (match) {\n          const current = Number.parseInt(match[1]);\n          const max = Number.parseInt(match[2]);\n          const excess = current - max;\n          severityScore += excess * 2; // Weight function length heavily\n          maxLinesViolation = { current, max, excess };\n        }\n        break;\n      }\n      case 'sonarjs/cognitive-complexity': {\n        severityScore += 15; // High impact\n        break;\n      }\n      case 'max-depth': {\n        severityScore += 10;\n        break;\n      }\n      case 'max-params': {\n        severityScore += 8;\n        break;\n      }\n      case 'sonarjs/no-identical-functions': {\n        severityScore += 20; // Very high impact - duplicate code\n        break;\n      }\n      default: {\n        severityScore += 5;\n      }\n    }\n  }\n  \n  return {\n    filePath,\n    violations,\n    severityScore,\n    maxLinesViolation,\n    violationCount: violations.length\n  };\n}).sort((a, b) => b.severityScore - a.severityScore);\n\n// Generate report\nconsole.log('\\n🚨 REACT COMPONENT COMPLEXITY ANALYSIS REPORT 🚨\\n');\nconsole.log('=' .repeat(80));\n\nconsole.log(`\\n📊 SUMMARY:`);\nconsole.log(`- Total files with complexity violations: ${prioritizedFiles.length}`);\nconsole.log(`- Total complexity violations: ${complexityViolations.length}`);\n\nif (prioritizedFiles.length === 0) {\n  console.log('\\n✅ No complexity violations found!');\n  process.exit(0);\n}\n\nconsole.log(`\\n🎯 PARETO 80/20 PRIORITIZATION (by severity score):`);\nconsole.log('-'.repeat(80));\n\nfor (const [index, file] of prioritizedFiles.entries()) {\n  const isHighPriority = index < Math.ceil(prioritizedFiles.length * 0.2);\n  const priority = isHighPriority ? '🔥 HIGH' : '📋 MEDIUM';\n  \n  console.log(`\\n${index + 1}. ${priority} PRIORITY - Severity Score: ${file.severityScore}`);\n  console.log(`   📁 File: ${file.filePath}`);\n  \n  if (file.maxLinesViolation) {\n    console.log(`   📏 Lines: ${file.maxLinesViolation.current} (limit: ${file.maxLinesViolation.max}, excess: ${file.maxLinesViolation.excess})`);\n  }\n  \n  console.log(`   ⚠️  Violations (${file.violationCount}):`);\n  for (const violation of file.violations) {\n    console.log(`      - ${violation.ruleId}: ${violation.message} (line ${violation.line})`);\n  }\n}\n\nconsole.log(`\\n🔧 REFACTORING RECOMMENDATIONS:`);\nconsole.log('-'.repeat(80));\n\nconst highPriorityFiles = prioritizedFiles.slice(0, Math.ceil(prioritizedFiles.length * 0.2));\nconsole.log(`\\n1. Focus on TOP ${highPriorityFiles.length} files first (80/20 rule):`);\nfor (const [index, file] of highPriorityFiles.entries()) {\n  console.log(`   ${index + 1}. ${file.filePath} (Score: ${file.severityScore})`);\n}\n\nconsole.log(`\\n2. Common refactoring strategies:`);\nconsole.log(`   - Extract helper functions from large components`);\nconsole.log(`   - Split complex components into smaller sub-components`);\nconsole.log(`   - Move business logic to custom hooks`);\nconsole.log(`   - Use composition over large prop lists`);\nconsole.log(`   - Extract duplicate code into shared utilities`);\n\nconsole.log(`\\n3. Estimated impact:`);\nconsole.log(`   - Fixing top 20% of files could resolve ~80% of complexity issues`);\nconsole.log(`   - Focus on max-lines-per-function violations first (highest impact)`);\n\n// Save detailed report\nconst reportData = {\n  timestamp: new Date().toISOString(),\n  summary: {\n    totalFiles: prioritizedFiles.length,\n    totalViolations: complexityViolations.length,\n    highPriorityFiles: highPriorityFiles.length\n  },\n  prioritizedFiles,\n  allViolations: complexityViolations\n};\n\nfs.writeFileSync('complexity-analysis-report.json', JSON.stringify(reportData, null, 2));\nconsole.log(`\\n💾 Detailed report saved to: complexity-analysis-report.json`);\n","usedDeprecatedRules":[]},{"filePath":"/app/app/access-denied/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/analytics/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/auto-scraping/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/data-cleanup/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/data-quality/page.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":91,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":92,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":91,"column":44,"nodeType":"Identifier","messageId":"unsafeCall","endLine":91,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":93,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":93,"endColumn":80,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":93,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":95,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":95,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":29,"nodeType":"Identifier","messageId":"unsafeCall","endLine":95,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":108,"column":12,"nodeType":"Identifier","messageId":"unsafeCall","endLine":108,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `error` typed value.","line":114,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/events/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/food-trucks/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'qualityCategory' is defined but never used. Allowed unused args must match /^_/u.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":82,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":82,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1982,1998],"text":"(truck.created_at != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1982,1998],"text":"(truck.created_at ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1982,1998],"text":"(Boolean(truck.created_at))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":87,"column":16,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":87,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2133,2149],"text":"(truck.updated_at != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2133,2149],"text":"(truck.updated_at ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2133,2149],"text":"(Boolean(truck.updated_at))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":122,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":122,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3001,3005],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3001,3005],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3001,3005],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/no-all-duplicated-branches","severity":2,"message":"This conditional operation returns the same value whether the condition is \"true\" or \"false\".","line":129,"column":14,"nodeType":"ConditionalExpression","messageId":"returnsTheSameValue","endLine":129,"endColumn":53},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":144,"column":12,"nodeType":"Literal","messageId":"error","endLine":144,"endColumn":16,"suggestions":[{"messageId":"remove","fix":{"range":[3612,3616],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[3612,3616],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":159,"column":60,"nodeType":"Literal","messageId":"error","endLine":159,"endColumn":64,"suggestions":[{"messageId":"remove","fix":{"range":[4278,4282],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[4278,4282],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":338,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":338,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9818,9843],"text":"((truck.contact_info?.phone) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9818,9843],"text":"((truck.contact_info?.phone) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9818,9843],"text":"(Boolean((truck.contact_info?.phone)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":346,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":346,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[10087,10112],"text":"((truck.contact_info?.email) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[10087,10112],"text":"((truck.contact_info?.email) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[10087,10112],"text":"(Boolean((truck.contact_info?.email)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":519,"column":60,"nodeType":"Identifier","messageId":"anyAssignment","endLine":519,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":539,"column":85,"nodeType":"Identifier","messageId":"anyAssignment","endLine":539,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":553,"column":55,"nodeType":"Identifier","messageId":"anyAssignment","endLine":553,"endColumn":70}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":64,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":64,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `error` typed value.","line":230,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":230,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":513,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":513,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `error` typed value.","line":515,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":515,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":533,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":533,"endColumn":92,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":533,"column":44,"nodeType":"Identifier","messageId":"unsafeCall","endLine":533,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":535,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":535,"endColumn":80,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":535,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":535,"endColumn":54,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { FoodTruckService } from '@/lib/supabase';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  MapPin,\n  Phone,\n  Mail,\n  Globe,\n  Clock,\n  Star,\n  Users,\n  Edit,\n  ArrowLeft\n} from 'lucide-react';\nimport Link from 'next/link';\nimport {\n  formatQualityScore,\n  categorizeQualityScore,\n  getQualityBadgeClasses,\n  type QualityCategory\n} from '@/lib/utils/data-quality-formatters';\n\n// Quality score metric component\nfunction QualityScoreMetric({\n  value,\n  label,\n  className = \"text-gray-900\"\n}: {\n  readonly value: React.ReactNode;\n  readonly label: string;\n  readonly className?: string;\n}) {\n  return (\n    <div className=\"text-center\">\n      <div className={`text-lg font-semibold ${className}`}>\n        {value}\n      </div>\n      <div className=\"text-sm text-gray-500\">{label}</div>\n    </div>\n  );\n}\n\n// Quality metrics grid component\nfunction QualityMetricsGrid({\n  truck,\n  qualityCategory\n}: {\n  readonly truck: {\n    data_quality_score?: number;\n    verification_status?: string;\n    created_at?: string;\n    updated_at?: string\n  };\n  readonly qualityCategory: QualityCategory;\n}) {\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n      <QualityScoreMetric\n        value={\n          <div className=\"text-2xl font-bold text-blue-600\">\n            {/* eslint-disable-next-line @typescript-eslint/no-unsafe-call */}\n            {formatQualityScore(truck.data_quality_score)}\n          </div>\n        }\n        label=\"Overall Score\"\n        className=\"\"\n      />\n\n      <QualityScoreMetric\n        value={\n          <Badge variant={truck.verification_status === 'verified' ? 'default' : 'outline'}>\n            {truck.verification_status}\n          </Badge>\n        }\n        label=\"Status\"\n        className=\"\"\n      />\n\n      <QualityScoreMetric\n        value={truck.created_at ? new Date(truck.created_at).toLocaleDateString() : 'N/A'}\n        label=\"Created\"\n      />\n\n      <QualityScoreMetric\n        value={truck.updated_at ? new Date(truck.updated_at).toLocaleDateString() : 'N/A'}\n        label=\"Updated\"\n      />\n    </div>\n  );\n}\n\n// Contact field component\nfunction ContactField({\n  icon: Icon,\n  label,\n  value,\n  href,\n  unavailableText\n}: {\n  readonly icon: React.ComponentType<{ className?: string }>;\n  readonly label: string;\n  readonly value?: string;\n  readonly href?: string;\n  readonly unavailableText: string;\n}) {\n  if (value == undefined || value === '') {\n    return (\n      <div className=\"flex items-center gap-3 text-gray-400\">\n        <Icon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{unavailableText}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <Icon className=\"h-4 w-4 text-gray-500\" />\n      <div>\n        <label className=\"text-sm font-medium text-gray-500\">{label}</label>\n        {href ? (\n          <a\n            href={href}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-blue-600 hover:text-blue-800 underline\"\n          >\n            {href.startsWith('http') ? value : value}\n          </a>\n        ) : (\n          <p className=\"text-gray-900\">{value}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Social media links component\nfunction SocialMediaLinks({ socialMedia }: {\n  readonly socialMedia?: { instagram?: string; facebook?: string; twitter?: string };\n}) {\n  if (!socialMedia || Object.keys(socialMedia).length === 0) {\n    return null;\n  }\n\n  const socialPlatforms = [\n    { key: 'instagram' as const, name: 'Instagram', baseUrl: 'https://instagram.com/', color: 'pink' },\n    { key: 'facebook' as const, name: 'Facebook', baseUrl: 'https://facebook.com/', color: 'blue' },\n    { key: 'twitter' as const, name: 'Twitter', baseUrl: 'https://twitter.com/', color: 'sky' },\n  ];\n\n  return (\n    <div>\n      <label className=\"text-sm font-medium text-gray-500\">Social Media</label>\n      <div className=\"flex flex-wrap gap-2 mt-2\">\n        {socialPlatforms.map(({ key, name, baseUrl, color }) => {\n          const handle = socialMedia[key];\n          if (handle == undefined || handle === '') return null;\n\n          return (\n            <a\n              key={key}\n              href={`${baseUrl}${handle}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={`flex items-center gap-1 px-2 py-1 bg-${color}-100 text-${color}-800 rounded-md text-sm hover:bg-${color}-200`}\n            >\n              <Globe className=\"h-3 w-3\" />\n              {name}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\ninterface FoodTruckDetailPageProps {\n  readonly params: {\n    readonly id: string;\n  };\n}\n\n// Not found component\nfunction TruckNotFound() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\n      <h1 className=\"text-2xl font-bold text-gray-900\">Food Truck Not Found</h1>\n      <p className=\"text-gray-600 mt-2\">The requested food truck could not be found.</p>\n      <Button asChild className=\"mt-4\">\n        <Link href=\"/admin/food-trucks\">\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Food Trucks\n        </Link>\n      </Button>\n    </div>\n  );\n}\n\n// Header component\nfunction TruckDetailHeader({\n  truck,\n  badgeClasses,\n  qualityCategory\n}: {\n  readonly truck: { id: string; name: string };\n  readonly badgeClasses: string;\n  readonly qualityCategory: QualityCategory;\n}) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"outline\" size=\"sm\" asChild>\n          <Link href=\"/admin/food-trucks\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Link>\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">{truck.name}</h1>\n          <p className=\"text-muted-foreground\">\n            Food truck details and data quality information\n          </p>\n        </div>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <Badge className={badgeClasses}>\n          {/* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */}\n          {qualityCategory.label} Quality\n        </Badge>\n        <Button asChild>\n          <Link href={`/admin/food-trucks/${truck.id}/edit`}>\n            <Edit className=\"h-4 w-4 mr-2\" />\n            Edit\n          </Link>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Basic Information card component\nfunction BasicInfoCard({ truck }: { readonly truck: { name: string; description?: string; cuisine_type?: string[]; price_range?: string; specialties?: string[] } }) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Basic Information</CardTitle>\n        <CardDescription>Core food truck details</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm font-medium text-gray-500\">Name</label>\n          <p className=\"text-lg font-semibold\">{truck.name}</p>\n        </div>\n\n        {(truck.description !== undefined) && truck.description !== '' && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500\">Description</label>\n            <p className=\"text-gray-900\">{truck.description}</p>\n          </div>\n        )}\n\n        <CuisineTypeSection cuisineType={truck.cuisine_type} />\n        <PriceRangeSection priceRange={truck.price_range} />\n        <SpecialtiesSection specialties={truck.specialties} />\n      </CardContent>\n    </Card>\n  );\n}\n\n// Cuisine type section component\nfunction CuisineTypeSection({ cuisineType }: { readonly cuisineType?: string[] }) {\n  if ((cuisineType == undefined) || cuisineType.length === 0) return;\n\n  return (\n    <div>\n      <label className=\"text-sm font-medium text-gray-500\">Cuisine Type</label>\n      <div className=\"flex flex-wrap gap-1 mt-1\">\n        {cuisineType.map((cuisine: string, index: number) => (\n          <Badge key={index} variant=\"secondary\">\n            {cuisine}\n          </Badge>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Price range section component\nfunction PriceRangeSection({ priceRange }: { readonly priceRange?: string }) {\n  if ((priceRange == undefined) || priceRange === '') return;\n\n  return (\n    <div>\n      <label className=\"text-sm font-medium text-gray-500\">Price Range</label>\n      <p className=\"text-gray-900\">{priceRange}</p>\n    </div>\n  );\n}\n\n// Specialties section component\nfunction SpecialtiesSection({ specialties }: { readonly specialties?: string[] }) {\n  if ((specialties == undefined) || specialties.length === 0) return;\n\n  return (\n    <div>\n      <label className=\"text-sm font-medium text-gray-500\">Specialties</label>\n      <div className=\"flex flex-wrap gap-1 mt-1\">\n        {specialties.map((specialty: string, index: number) => (\n          <Badge key={index} variant=\"outline\">\n            {specialty}\n          </Badge>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n\n\n// Contact Information card component\nfunction ContactInfoCard({ truck }: { readonly truck: { contact_info?: { phone?: string; email?: string; website?: string }; social_media?: { instagram?: string; facebook?: string; twitter?: string } } }) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Phone className=\"h-5 w-5\" />\n          Contact Information\n        </CardTitle>\n        <CardDescription>Phone, email, website, and social media</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <ContactField\n          icon={Phone}\n          label=\"Phone\"\n          value={truck.contact_info?.phone}\n          href={truck.contact_info?.phone ? `tel:${truck.contact_info.phone}` : undefined}\n          unavailableText=\"No phone number available\"\n        />\n\n        <ContactField\n          icon={Mail}\n          label=\"Email\"\n          value={truck.contact_info?.email}\n          href={truck.contact_info?.email ? `mailto:${truck.contact_info.email}` : undefined}\n          unavailableText=\"No email address available\"\n        />\n\n        <ContactField\n          icon={Globe}\n          label=\"Website\"\n          value={truck.contact_info?.website}\n          href={truck.contact_info?.website}\n          unavailableText=\"No website available\"\n        />\n\n        <SocialMediaLinks socialMedia={truck.social_media} />\n      </CardContent>\n    </Card>\n  );\n}\n\n// Location Information card component\nfunction LocationInfoCard({ truck }: { readonly truck: { current_location?: { address?: string; lat?: number; lng?: number; timestamp?: string } } }) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MapPin className=\"h-5 w-5\" />\n          Location Information\n        </CardTitle>\n        <CardDescription>Current location and address details</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {(truck.current_location?.address === undefined) ? (\n          <p className=\"text-gray-400 text-sm\">No address available</p>\n        ) : (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500\">Address</label>\n            <p className=\"text-gray-900\">{truck.current_location.address}</p>\n          </div>\n        )}\n\n        {truck.current_location?.lat !== undefined && truck.current_location?.lng !== undefined && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500\">Coordinates</label>\n            <p className=\"text-gray-900 font-mono text-sm\">\n              {truck.current_location.lat.toFixed(6)}, {truck.current_location.lng.toFixed(6)}\n            </p>\n          </div>\n        )}\n\n        {truck.current_location?.timestamp != undefined && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\n            <p className=\"text-gray-900\">\n              {new Date(truck.current_location.timestamp).toLocaleString()}\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Operating Hours card component\nfunction OperatingHoursCard({ truck }: { readonly truck: { operating_hours?: Record<string, { closed?: boolean; open?: string; close?: string }> } }) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Clock className=\"h-5 w-5\" />\n          Operating Hours\n        </CardTitle>\n        <CardDescription>Daily operating schedule</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {(truck.operating_hours !== undefined) && Object.keys(truck.operating_hours).length > 0 ? (\n          <div className=\"space-y-2\">\n            {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map((day) => {\n              const dayData = truck.operating_hours ? truck.operating_hours[day] as { closed?: boolean; open?: string; close?: string } | undefined : undefined;\n              const dayName = day.charAt(0).toUpperCase() + day.slice(1);\n\n              return (\n                <div key={day} className=\"flex justify-between items-center py-1\">\n                  <span className=\"font-medium text-gray-700\">{dayName}</span>\n                  {(() => {\n                    if (dayData !== undefined && typeof dayData === 'object') {\n                      if (dayData.closed === true) {\n                        return <span className=\"text-red-600 text-sm\">Closed</span>;\n                      }\n                      return (\n                        <span className=\"text-gray-900 text-sm\">\n                          {dayData.open ?? 'N/A'} - {dayData.close ?? 'N/A'}\n                        </span>\n                      );\n                    }\n                    return <span className=\"text-gray-400 text-sm\">Not specified</span>;\n                  })()}\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <p className=\"text-gray-400 text-sm\">No operating hours available</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Ratings & Reviews card component\nfunction RatingsReviewsCard({ truck }: { readonly truck: { average_rating?: number; review_count?: number } }) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Star className=\"h-5 w-5\" />\n          Ratings & Reviews\n        </CardTitle>\n        <CardDescription>Customer feedback and ratings</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {((truck as { average_rating?: number }).average_rating === undefined) ? (\n          <p className=\"text-gray-400 text-sm\">No ratings available</p>\n        ) : (\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"flex\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <Star\n                    key={star}\n                    className={`h-5 w-5 ${\n                      star <= Math.round((truck as { average_rating?: number }).average_rating ?? 0)\n                        ? 'text-yellow-400 fill-current'\n                        : 'text-gray-300'\n                    }`}\n                  />\n                ))}\n              </div>\n              <span className=\"text-lg font-semibold\">{((truck as { average_rating?: number }).average_rating ?? 0).toFixed(1)}</span>\n            </div>\n            {((truck as { review_count?: number }).review_count !== undefined) && (\n              <div className=\"flex items-center gap-1 text-gray-600\">\n                <Users className=\"h-4 w-4\" />\n                <span className=\"text-sm\">{(truck as { review_count?: number }).review_count} reviews</span>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Data Quality card component\nfunction DataQualityCard({ truck, qualityCategory }: {\n  readonly truck: {\n    data_quality_score?: number;\n    verification_status?: string;\n    created_at?: string;\n    updated_at?: string\n  };\n  readonly qualityCategory: QualityCategory\n}) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Data Quality Assessment</CardTitle>\n        <CardDescription>\n          {/* eslint-disable-next-line @typescript-eslint/no-unsafe-call */}\n          Quality score: {formatQualityScore(truck.data_quality_score)}\n          {/* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */}\n          ({qualityCategory.label} quality)\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <QualityMetricsGrid truck={truck} qualityCategory={qualityCategory} />\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default async function FoodTruckDetailPage({ params }: FoodTruckDetailPageProps) {\n  const truck = await FoodTruckService.getTruckById(params.id);\n\n  if (truck == undefined) {\n    return <TruckNotFound />;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n  const qualityCategory: QualityCategory = categorizeQualityScore(truck.data_quality_score);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n  const badgeClasses: string = getQualityBadgeClasses(truck.data_quality_score);\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <TruckDetailHeader truck={truck} badgeClasses={badgeClasses} qualityCategory={qualityCategory} />\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <BasicInfoCard truck={truck} />\n\n        <ContactInfoCard truck={truck} />\n\n        <LocationInfoCard truck={truck} />\n\n        <OperatingHoursCard truck={truck} />\n\n        <RatingsReviewsCard truck={truck} />\n      </div>\n\n      <DataQualityCard truck={truck} qualityCategory={qualityCategory} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/admin/food-trucks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/layout.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'DesktopSidebar' has too many lines (74). Maximum allowed is 50.","line":34,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":107,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'MobileNavigation' has too many lines (76). Maximum allowed is 50.","line":110,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":185,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7206,7209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7206,7209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `any` value.","line":198,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_metadata on an `any` value.","line":207,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":208,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":208,"endColumn":70}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// @ts-expect-error TS(2792): Cannot find module 'next/link'. Did you mean to se... Remove this comment to see the full error message\nimport Link from 'next/link';\nimport {\n  Home,\n  Truck,\n  Settings,\n  Activity,\n  Users,\n  CalendarDays,\n  BarChart3,\n  LogOut,\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\n} from 'lucide-react';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/DropdownMenu';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { ModeToggle } from '@/components/ModeToggle';\nimport { AuthProvider, useAuth } from '@/app/auth/AuthProvider';\n// @ts-expect-error TS(2792): Cannot find module 'next/navigation'. Did you mean... Remove this comment to see the full error message\nimport { useRouter } from 'next/navigation';\n\n// Desktop Sidebar component\nfunction DesktopSidebar() {\n  return (\n    <div className=\"hidden border-r bg-muted/40 md:block\">\n      <div className=\"flex h-full max-h-screen flex-col gap-2\">\n        <div className=\"flex h-14 items-center border-b px-4 lg:h-[60px] lg:px-6\">\n          <Link href=\"/admin\" className=\"flex items-center gap-2 font-semibold\">\n            <Truck className=\"h-6 w-6\" />\n            <span className=\"\">Food Truck Admin</span>\n          </Link>\n        </div>\n        <div className=\"flex-1\">\n          <nav className=\"grid items-start px-2 text-sm font-medium lg:px-4\">\n            <Link\n              href=\"/admin\"\n              className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\n            >\n              <Home className=\"h-4 w-4\" />\n              Dashboard\n            </Link>\n            <Link\n              href=\"/admin/food-trucks\"\n              className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\n            >\n              <Truck className=\"h-4 w-4\" />\n              Food Truck Management\n            </Link>\n            <Link\n              href=\"/admin/pipeline\"\n              className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\n            >\n              <Activity className=\"h-4 w-4\" />\n              Pipeline Monitoring\n            </Link>\n            <Link\n              href=\"/admin/auto-scraping\"\n              className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\n            >\n              <Settings className=\"h-4 w-4\" />\n              Auto-Scraping\n            </Link>\n            <Link\n              href=\"/admin/data-quality\"\n              className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\n            >\n              <Settings className=\"h-4 w-4\" />\n              Data Quality\n            </Link>\n            <Link\n              href=\"/admin/users\"\n              className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\n            >\n              <Users className=\"h-4 w-4\" />\n              User Management\n            </Link>\n            <Link\n              href=\"/admin/events\"\n              className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\n            >\n              <CalendarDays className=\"h-4 w-4\" />\n              Event Management\n            </Link>\n            <Link\n              href=\"/admin/analytics\"\n              className=\"flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary\"\n            >\n              <BarChart3 className=\"h-4 w-4\" />\n              Analytics\n            </Link>\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Mobile Navigation component\nfunction MobileNavigation() {\n  return (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\" className=\"shrink-0 md:hidden\">\n          <Home className=\"h-5 w-5\" />\n          <span className=\"sr-only\">Toggle navigation menu</span>\n        </Button>\n      </SheetTrigger>\n      <SheetContent side=\"left\" className=\"flex flex-col\">\n        <nav className=\"grid gap-2 text-lg font-medium\">\n          <Link href=\"/admin\" className=\"flex items-center gap-2 text-lg font-semibold\">\n            <Truck className=\"h-6 w-6\" />\n            <span className=\"sr-only\">Food Truck Admin</span>\n          </Link>\n          <Link\n            href=\"/admin\"\n            className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\n          >\n            <Home className=\"h-5 w-5\" />\n            Dashboard\n          </Link>\n          <Link\n            href=\"/admin/food-trucks\"\n            className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\n          >\n            <Truck className=\"h-5 w-5\" />\n            Food Truck Management\n          </Link>\n          <Link\n            href=\"/admin/pipeline\"\n            className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\n          >\n            <Activity className=\"h-5 w-5\" />\n            Pipeline Monitoring\n          </Link>\n          <Link\n            href=\"/admin/auto-scraping\"\n            className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\n          >\n            <Settings className=\"h-5 w-5\" />\n            Auto-Scraping\n          </Link>\n          <Link\n            href=\"/admin/data-quality\"\n            className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\n          >\n            <Settings className=\"h-5 w-5\" />\n            Data Quality\n          </Link>\n          <Link\n            href=\"/admin/users\"\n            className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\n          >\n            <Users className=\"h-5 w-5\" />\n            User Management\n          </Link>\n          <Link\n            href=\"/admin/events\"\n            className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\n          >\n            <CalendarDays className=\"h-5 w-5\" />\n            Event Management\n          </Link>\n          <Link\n            href=\"/admin/analytics\"\n            className=\"mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-muted-foreground hover:text-foreground\"\n          >\n            <BarChart3 className=\"h-4 w-4\" />\n            Analytics\n          </Link>\n        </nav>\n      </SheetContent>\n    </Sheet>\n  );\n}\n\n// User Menu component\nfunction UserMenu({ user, userInitials, handleSignOut }: {\n  readonly user: any;\n  readonly userInitials: string;\n  readonly handleSignOut: () => Promise<void>;\n}) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"secondary\" size=\"icon\" className=\"rounded-full\">\n          <Avatar>\n            <AvatarImage src={user?.user_metadata?.avatar_url as string} alt=\"Avatar\" />\n            <AvatarFallback>{userInitials}</AvatarFallback>\n          </Avatar>\n          <span className=\"sr-only\">Toggle user menu</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuLabel>\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium\">{user?.user_metadata?.full_name ?? 'Admin'}</p>\n            <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>Settings</DropdownMenuItem>\n        <DropdownMenuItem>Support</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem\n          onClick={() => {\n            handleSignOut().catch((error) => console.warn('Sign out failed:', error));\n          }}\n        >\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          Logout\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nfunction AdminLayoutContent({ children }: { readonly children: React.ReactNode }) {\n  const { user, signOut } = useAuth();\n  const router = useRouter();\n\n  const handleSignOut = async () => {\n    await signOut();\n    router.push('/');\n  };\n\n  const userInitials = user?.user_metadata?.full_name == undefined\n    ? user?.email?.slice(0, 2).toUpperCase() ?? 'AD'\n    : (user.user_metadata.full_name as string)\n        .split(' ')\n        .map((n: string) => n[0])\n        .join('')\n        .toUpperCase();\n\n  return (\n    <div className=\"grid min-h-screen w-full md:grid-cols-[220px_1fr] lg:grid-cols-[280px_1fr]\">\n      <DesktopSidebar />\n      <div className=\"flex flex-col\">\n        <header className=\"flex h-14 items-center gap-4 border-b bg-muted/40 px-4 lg:h-[60px] lg:px-6\">\n          <MobileNavigation />\n          <div className=\"w-full flex-1\">\n            <form>\n              <div className=\"relative\">\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search...\"\n                  className=\"w-full rounded-lg bg-background pl-8 md:w-[200px] lg:w-[336px]\"\n                />\n              </div>\n            </form>\n          </div>\n          <ModeToggle />\n          <UserMenu user={user} userInitials={userInitials} handleSignOut={handleSignOut} />\n        </header>\n        <main className=\"flex flex-1 flex-col gap-4 p-4 lg:gap-6 lg:p-6\">{children}</main>\n      </div>\n    </div>\n  );\n}\n\nexport default function AdminLayout({ children }: { readonly children: React.ReactNode }) {\n  return (\n    <AuthProvider>\n      <AdminLayoutContent>{children}</AdminLayoutContent>\n    </AuthProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/admin/monitoring/page.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'FeatureOverviewCards' has too many lines (57). Maximum allowed is 50.","line":26,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":82,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'MonitoringFeaturesCard' has too many lines (59). Maximum allowed is 50.","line":101,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":159,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { APIMonitoringDashboard } from '@/components/monitoring/ApiMonitoringDashboard';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Activity, Shield, Zap, TrendingUp } from 'lucide-react';\n\n// Header component for the monitoring page\nfunction MonitoringPageHeader() {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">API Monitoring & Alerting</h1>\n        <p className=\"text-muted-foreground\">\n          Real-time monitoring, alerting, and optimization for external API usage\n        </p>\n      </div>\n      <Badge variant=\"outline\" className=\"text-sm\">\n        <Activity className=\"h-4 w-4 mr-1\" />\n        Live Monitoring\n      </Badge>\n    </div>\n  );\n}\n\n// Feature overview cards component\nfunction FeatureOverviewCards() {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Proactive Monitoring</CardTitle>\n          <Activity className=\"h-4 w-4 text-blue-600\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-blue-600\">Real-time</div>\n          <p className=\"text-xs text-muted-foreground\">\n            Live API usage tracking with 30-second refresh\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Smart Alerting</CardTitle>\n          <Shield className=\"h-4 w-4 text-yellow-600\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-yellow-600\">80% / 95%</div>\n          <p className=\"text-xs text-muted-foreground\">\n            Warning / Critical thresholds with recommendations\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Auto Throttling</CardTitle>\n          <Zap className=\"h-4 w-4 text-green-600\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-green-600\">Enabled</div>\n          <p className=\"text-xs text-muted-foreground\">\n            Prevents quota exceeded errors automatically\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Optimization</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-purple-600\">SOTA</div>\n          <p className=\"text-xs text-muted-foreground\">\n            AI-powered usage optimization recommendations\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n/**\n * API Monitoring Page\n * Provides comprehensive real-time monitoring of all external API usage\n */\nexport default function MonitoringPage() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <MonitoringPageHeader />\n      <FeatureOverviewCards />\n      <MonitoringFeaturesCard />\n      <APIMonitoringDashboard />\n      <TechnicalDetailsCard />\n    </div>\n  );\n}\n\n// Monitoring features details component\nfunction MonitoringFeaturesCard() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Monitoring Features</CardTitle>\n        <CardDescription>\n          State-of-the-art API monitoring and alerting capabilities\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-sm\">Proactive Monitoring</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li className=\"flex items-center gap-2\">\n                <Activity className=\"h-3 w-3 text-blue-600\" />\n                Real-time usage tracking for all APIs\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Shield className=\"h-3 w-3 text-green-600\" />\n                Predictive limit checking before requests\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Zap className=\"h-3 w-3 text-yellow-600\" />\n                Automatic throttling to prevent quota exceeded\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-3 w-3 text-purple-600\" />\n                Historical usage trends and analytics\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-sm\">Smart Alerting</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li className=\"flex items-center gap-2\">\n                <Activity className=\"h-3 w-3 text-orange-600\" />\n                Multi-level alerts (Warning 80%, Critical 95%)\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Shield className=\"h-3 w-3 text-red-600\" />\n                Service-specific recommendations\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <Zap className=\"h-3 w-3 text-blue-600\" />\n                Optimization suggestions for high usage\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-3 w-3 text-green-600\" />\n                Wait time calculations for rate limit resets\n              </li>\n            </ul>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Technical implementation details component\nfunction TechnicalDetailsCard() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Technical Implementation</CardTitle>\n        <CardDescription>\n          Advanced monitoring system built with SOTA practices\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          <div className=\"space-y-2\">\n            <h4 className=\"font-semibold text-sm\">Monitored APIs</h4>\n            <ul className=\"space-y-1 text-sm text-muted-foreground\">\n              <li>• Gemini AI (1,500 req/day, 32K tokens)</li>\n              <li>• Firecrawl (500 req/day)</li>\n              <li>• Tavily Search (1,000 req/day)</li>\n              <li>• Supabase (50K req/day)</li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-2\">\n            <h4 className=\"font-semibold text-sm\">Alert Thresholds</h4>\n            <ul className=\"space-y-1 text-sm text-muted-foreground\">\n              <li>• Warning: 80% usage</li>\n              <li>• Critical: 95% usage</li>\n              <li>• Auto-throttling: 95%+</li>\n              <li>• Rate limit reset tracking</li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-2\">\n            <h4 className=\"font-semibold text-sm\">Optimization Features</h4>\n            <ul className=\"space-y-1 text-sm text-muted-foreground\">\n              <li>• Request queuing recommendations</li>\n              <li>• Caching strategy suggestions</li>\n              <li>• Token usage optimization</li>\n              <li>• Batch processing guidance</li>\n            </ul>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/admin/page.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'AdminDashboard' has too many lines (84). Maximum allowed is 50.","line":67,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":150,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  FoodTruckService,\n  ScrapingJobService,\n  DataProcessingService,\n  supabase,\n} from '@/lib/supabase';\nimport { Truck, Activity, Settings, AlertTriangle } from 'lucide-react'; // Import icons\n\n// Define the data quality stats type based on the database function\ninterface DataQualityStats {\n  total_trucks: number;\n  avg_quality_score: number;\n  high_quality_count: number;\n  medium_quality_count: number;\n  low_quality_count: number;\n  verified_count: number;\n  pending_count: number;\n  flagged_count: number;\n}\n\nasync function getDashboardData() {\n  // Fetch total food trucks and verification statuses\n  const { trucks: allTrucks } = await FoodTruckService.getAllTrucks(1000, 0); // Fetch a reasonable number for overview\n  const totalFoodTrucks = allTrucks.length;\n  const pendingVerifications = allTrucks.filter((t) => t.verification_status === 'pending').length;\n\n  // Fetch pipeline status (e.g., pending scraping jobs)\n  const pendingScrapingJobs = await ScrapingJobService.getJobsByStatus('pending');\n  const runningScrapingJobs = await ScrapingJobService.getJobsByStatus('running');\n  const failedScrapingJobs = await ScrapingJobService.getJobsByStatus('failed');\n\n  // Fetch recent errors from data processing queue\n  const failedProcessingQueueItems = await DataProcessingService.getQueueByStatus('failed');\n  // Fetch data quality stats using the Supabase function\n  const { data: qualityStatsResult, error: qualityError } = await supabase\n    .rpc('get_data_quality_stats')\n    .single();\n\n  if (qualityError != undefined) {\n    console.error('Error fetching data quality stats:', qualityError);\n  }\n\n  const dataQualityStats: DataQualityStats = (qualityStatsResult as DataQualityStats) ?? {\n    total_trucks: 0,\n    avg_quality_score: 0,\n    high_quality_count: 0,\n    medium_quality_count: 0,\n    low_quality_count: 0,\n    verified_count: 0,\n    pending_count: 0,\n    flagged_count: 0,\n  };\n\n  return {\n    totalFoodTrucks,\n    pendingVerifications,\n    pendingScrapingJobsCount: pendingScrapingJobs.length,\n    runningScrapingJobsCount: runningScrapingJobs.length,\n    failedScrapingJobsCount: failedScrapingJobs.length,\n    failedProcessingQueueItemsCount: failedProcessingQueueItems.length,\n    dataQualityStats,\n  };\n}\n\nexport default async function AdminDashboard() {\n  const {\n    totalFoodTrucks,\n    pendingVerifications,\n    pendingScrapingJobsCount,\n    runningScrapingJobsCount,\n    failedScrapingJobsCount,\n    failedProcessingQueueItemsCount,\n    dataQualityStats,\n  } = await getDashboardData();\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Food Trucks</CardTitle>\n            <Truck className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalFoodTrucks}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {pendingVerifications} pending verification\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pipeline Status</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{pendingScrapingJobsCount} pending</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {runningScrapingJobsCount} running, {failedScrapingJobsCount} failed\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Data Quality Score</CardTitle>\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {((dataQualityStats.avg_quality_score ?? 0) * 100).toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Average quality score across all trucks\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Quality Distribution</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {dataQualityStats.high_quality_count ?? 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              <span className=\"text-green-600\">{dataQualityStats.high_quality_count ?? 0} high</span>,{' '}\n              <span className=\"text-yellow-600\">{dataQualityStats.medium_quality_count ?? 0} medium</span>,{' '}\n              <span className=\"text-red-600\">{dataQualityStats.low_quality_count ?? 0} low</span>\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Recent Errors</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{failedProcessingQueueItemsCount}</div>\n            <p className=\"text-xs text-muted-foreground\">from data processing queue</p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/admin/pipeline/page.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'PipelineStatisticsCards' has too many lines (55). Maximum allowed is 50.","line":60,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":114,"endColumn":2},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":60,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":73,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[2061,2374],"text":"Readonly<{\n  scrapingJobs: {\n    pending: ScrapingJob[];\n    running: ScrapingJob[];\n    failed: ScrapingJob[];\n    completed: ScrapingJob[];\n  };\n  processingQueue: {\n    pending: DataProcessingQueue[];\n    processing: DataProcessingQueue[];\n    failed: DataProcessingQueue[];\n    completed: DataProcessingQueue[];\n  };\n}>"},"desc":"Mark the props as read-only"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'RecentScrapingJobsTable' has too many lines (70). Maximum allowed is 50.","line":117,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":186,"endColumn":2},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":117,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":124,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[4250,4389],"text":"Readonly<{\n  scrapingJobs: {\n    pending: ScrapingJob[];\n    running: ScrapingJob[];\n    failed: ScrapingJob[];\n    completed: ScrapingJob[];\n  };\n}>"},"desc":"Mark the props as read-only"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":189,"column":37,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":196,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[6945,7122],"text":"Readonly<{\n  processingQueue: {\n    pending: DataProcessingQueue[];\n    processing: DataProcessingQueue[];\n    failed: DataProcessingQueue[];\n    completed: DataProcessingQueue[];\n  };\n}>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  ScrapingJobService,\n  DataProcessingService,\n  ScrapingJob,\n  DataProcessingQueue,\n} from '@/lib/supabase';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\nimport { RefreshCcw, PlayCircle, XCircle } from 'lucide-react';\n\nfunction getBadgeVariant(status: string) {\n  if (status === 'completed') {\n    return 'default';\n  }\n  if (status === 'failed') {\n    return 'destructive';\n  }\n  return 'outline';\n}\n\nasync function getPipelineData() {\n  const pendingScrapingJobs = await ScrapingJobService.getJobsByStatus('pending');\n  const runningScrapingJobs = await ScrapingJobService.getJobsByStatus('running');\n  const completedScrapingJobs = await ScrapingJobService.getJobsByStatus('completed');\n  const failedScrapingJobs = await ScrapingJobService.getJobsByStatus('failed');\n\n  const pendingProcessingQueue = await DataProcessingService.getQueueByStatus('pending');\n  const processingProcessingQueue = await DataProcessingService.getQueueByStatus('processing');\n  const completedProcessingQueue = await DataProcessingService.getQueueByStatus('completed');\n  const failedProcessingQueue = await DataProcessingService.getQueueByStatus('failed');\n\n  return {\n    scrapingJobs: {\n      pending: pendingScrapingJobs,\n      running: runningScrapingJobs,\n      completed: completedScrapingJobs,\n      failed: failedScrapingJobs,\n    },\n    processingQueue: {\n      pending: pendingProcessingQueue,\n      processing: processingProcessingQueue,\n      completed: completedProcessingQueue,\n      failed: failedProcessingQueue,\n    },\n  };\n}\n\n// Statistics Cards Component\nfunction PipelineStatisticsCards({ scrapingJobs, processingQueue }: {\n  scrapingJobs: {\n    pending: ScrapingJob[];\n    running: ScrapingJob[];\n    failed: ScrapingJob[];\n    completed: ScrapingJob[];\n  };\n  processingQueue: {\n    pending: DataProcessingQueue[];\n    processing: DataProcessingQueue[];\n    failed: DataProcessingQueue[];\n    completed: DataProcessingQueue[];\n  };\n}) {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Scraping Jobs (Pending)</CardTitle>\n          <RefreshCcw className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{scrapingJobs.pending.length}</div>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Scraping Jobs (Running)</CardTitle>\n          <PlayCircle className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{scrapingJobs.running.length}</div>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Scraping Jobs (Failed)</CardTitle>\n          <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{scrapingJobs.failed.length}</div>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Processing Queue (Failed)</CardTitle>\n          <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{processingQueue.failed.length}</div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Recent Scraping Jobs Table Component\nfunction RecentScrapingJobsTable({ scrapingJobs }: {\n  scrapingJobs: {\n    pending: ScrapingJob[];\n    running: ScrapingJob[];\n    failed: ScrapingJob[];\n    completed: ScrapingJob[];\n  };\n}) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Recent Scraping Jobs</CardTitle>\n        <CardDescription>Overview of recent web scraping activities.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Job Type</TableHead>\n              <TableHead>Target URL/Handle</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Priority</TableHead>\n              <TableHead>Retries</TableHead>\n              <TableHead>Scheduled At</TableHead>\n              <TableHead>Completed At</TableHead>\n              <TableHead className=\"text-right\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {[\n              ...scrapingJobs.pending,\n              ...scrapingJobs.running,\n              ...scrapingJobs.failed,\n              ...scrapingJobs.completed,\n            ]\n              .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n              .slice(0, 20) // Show latest 20 jobs\n              .map((job: ScrapingJob) => (\n                <TableRow key={job.id}>\n                  <TableCell className=\"font-medium\">{job.job_type}</TableCell>\n                  <TableCell>{job.target_url ?? job.target_handle}</TableCell>\n                  <TableCell>\n                    <Badge variant={getBadgeVariant(job.status)}>{job.status}</Badge>\n                  </TableCell>\n                  <TableCell>{job.priority}</TableCell>\n                  <TableCell>\n                    {job.retry_count}/{job.max_retries}\n                  </TableCell>\n                  <TableCell>{new Date(job.scheduled_at).toLocaleString()}</TableCell>\n                  <TableCell>\n                    {job.completed_at == undefined ? 'N/A'  : new Date(job.completed_at).toLocaleString()}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    {job.status === 'failed' && (\n                      <Button variant=\"outline\" size=\"sm\" className=\"mr-2\">\n                        Retry\n                      </Button>\n                    )}\n                    <Button variant=\"outline\" size=\"sm\">\n                      View Logs\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Failed Processing Queue Table Component\nfunction FailedProcessingQueueTable({ processingQueue }: {\n  processingQueue: {\n    pending: DataProcessingQueue[];\n    processing: DataProcessingQueue[];\n    failed: DataProcessingQueue[];\n    completed: DataProcessingQueue[];\n  };\n}) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Failed Data Processing Queue Items</CardTitle>\n        <CardDescription>\n          Items that failed during data processing (e.g., Gemini API errors).\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Truck ID</TableHead>\n              <TableHead>Processing Type</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Created At</TableHead>\n              <TableHead className=\"text-right\">Errors</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {processingQueue.failed.map((item: DataProcessingQueue) => (\n              <TableRow key={item.id}>\n                <TableCell className=\"font-medium\">{item.truck_id ?? 'N/A'}</TableCell>\n                <TableCell>{item.processing_type}</TableCell>\n                <TableCell>\n                  <Badge variant=\"destructive\">{item.status}</Badge>\n                </TableCell>\n                <TableCell>{new Date(item.created_at).toLocaleString()}</TableCell>\n                <TableCell className=\"text-right\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    View Details\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function PipelineMonitoringPage() {\n  const { scrapingJobs, processingQueue } = await getPipelineData();\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <h1 className=\"text-2xl font-bold\">Pipeline Monitoring</h1>\n\n      <PipelineStatisticsCards scrapingJobs={scrapingJobs} processingQueue={processingQueue} />\n\n      <RecentScrapingJobsTable scrapingJobs={scrapingJobs} />\n\n      <FailedProcessingQueueTable processingQueue={processingQueue} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/admin/test-pipeline/page.tsx","messages":[],"suppressedMessages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":122,"column":31,"nodeType":"Literal","messageId":"error","endLine":122,"endColumn":35,"suggestions":[{"messageId":"replace","fix":{"range":[4714,4718],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/admin/users/page.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'UserManagementPage' has too many lines (62). Maximum allowed is 50.","line":69,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":130,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { supabaseAdmin } from '@/lib/supabase';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\nimport { UserPlus } from 'lucide-react';\n// @ts-expect-error TS(2792): Cannot find module 'next/link'. Did you mean to se... Remove this comment to see the full error message\nimport Link from 'next/link';\n// @ts-expect-error TS(2792): Cannot find module '@supabase/supabase-js'. Did yo... Remove this comment to see the full error message\nimport { User, PostgrestError } from '@supabase/supabase-js';\n\ninterface UserDisplayData {\n  id: string;\n  email: string | undefined;\n  created_at: string;\n  last_sign_in_at: string | undefined;\n  role: string;\n}\n\nasync function getUsersData(): Promise<UserDisplayData[]> {\n  if (!supabaseAdmin) {\n    throw new Error('Supabase admin client not available');\n  }\n\n  const { data, error } = await supabaseAdmin.auth.admin.listUsers();\n\n  if (error != undefined) {\n    console.error('Error fetching users:', error);\n    return [];\n  }\n\n  const users: User[] = data.users ?? [];\n\n  interface Profile {\n    id: string;\n    role: string;\n  }\n\n  // Fetch profiles to get roles\n  const { data: profiles, error: profilesError } = (await supabaseAdmin\n    .from('profiles')\n    .select('id, role')) as { data: Profile[] | null; error: PostgrestError | null };\n\n  if (profilesError != undefined) {\n    console.error('Error fetching profiles:', profilesError);\n    // Continue with users data even if profiles fetch fails\n  }\n\n  const profilesMap = new Map<string, string>(profiles?.map((p) => [p.id, p.role]) ?? []);\n\n  return users.map((user) => ({\n    id: user.id,\n    email: user.email,\n    created_at: user.created_at,\n    last_sign_in_at: user.last_sign_in_at,\n    role: profilesMap.get(user.id) ?? 'user', // Default to 'user' if no profile role\n  })) as UserDisplayData[];\n}\n\nexport default async function UserManagementPage() {\n  const users = await getUsersData();\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">User Management</h1>\n        <Button asChild>\n          <Link href=\"/admin/users/new\">\n            <UserPlus className=\"mr-2 h-4 w-4\" />\n            Add New User\n          </Link>\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>System Users</CardTitle>\n          <CardDescription>\n            Manage user accounts and their roles. ({users.length} total)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Email</TableHead>\n                <TableHead>Role</TableHead>\n                <TableHead>Created At</TableHead>\n                <TableHead>Last Sign In</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users.map((user) => (\n                <TableRow key={user.id}>\n                  <TableCell className=\"font-medium\">{user.email}</TableCell>\n                  <TableCell>\n                    <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                      {user.role}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{new Date(user.created_at).toLocaleDateString()}</TableCell>\n                  <TableCell>\n                    {user.last_sign_in_at == undefined\n                      ? 'N/A'\n                      : new Date(user.last_sign_in_at).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <Link href={`/admin/users/${user.id}`}>Edit</Link>\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/automated-cleanup/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'GET' has too many lines (70). Maximum allowed is 50.","line":87,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":156,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'POST' has too many lines (114). Maximum allowed is 50.","line":158,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":271,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { BatchCleanupService } from '@/lib/data-quality/batchCleanup';\nimport { supabase, supabaseAdmin } from '@/lib/supabase';\n\n/**\n * SOTA Automated Data Cleanup API\n * \n * Provides scheduled and on-demand data cleanup operations\n * with comprehensive monitoring and reporting capabilities\n * \n * GET /api/admin/automated-cleanup - Get cleanup status and schedule\n * POST /api/admin/automated-cleanup - Run cleanup operations\n */\n\ninterface CleanupSchedule {\n  id: string;\n  name: string;\n  operations: string[];\n  schedule: string; // cron expression\n  enabled: boolean;\n  lastRun?: string;\n  nextRun?: string;\n  successCount: number;\n  errorCount: number;\n}\n\ninterface CleanupResult {\n  id: string;\n  timestamp: string;\n  operation: string;\n  success: boolean;\n  details: Record<string, unknown>;\n}\n\ninterface RequestBody {\n  action: string;\n  options?: Record<string, unknown>;\n}\n\ninterface RunScheduledOptions {\n  scheduleId: string;\n}\n\ninterface RunImmediateOptions {\n  operations?: string[];\n  batchSize?: number;\n  dryRun?: boolean;\n}\n\ninterface ScheduleCleanupOptions {\n  name: string;\n  operations: string[];\n  schedule: string;\n  enabled?: boolean;\n}\n\ninterface UpdateScheduleOptions {\n  scheduleId: string;\n  updates: Record<string, unknown>;\n}\n\ninterface DeleteScheduleOptions {\n  scheduleId: string;\n}\n\ninterface AnalyzeDuplicatesOptions {\n  threshold?: number;\n}\n\ninterface AutomatedCleanupStatus {\n  isRunning: boolean;\n  lastRun: string | null;\n  nextScheduledRun: string | null;\n  schedules: CleanupSchedule[];\n  recentResults: CleanupResult[];\n  statistics: {\n    totalRuns: number;\n    successfulRuns: number;\n    failedRuns: number;\n    trucksImproved: number;\n    duplicatesRemoved: number;\n  };\n}\n\ntype CleanupOperationType = 'normalize_phone' | 'fix_coordinates' | 'remove_placeholders' | 'update_quality_scores' | 'merge_duplicates';\n\nexport async function GET(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Verify admin access\n    const hasAccess = await verifyAdminAccess(request);\n    if (!hasAccess) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const action = searchParams.get('action');\n\n    switch (action) {\n      case 'status': {\n        const status = await getCleanupStatus();\n        return NextResponse.json({\n          success: true,\n          status\n        });\n      }\n\n      case 'schedules': {\n        const schedules = await getCleanupSchedules();\n        return NextResponse.json({\n          success: true,\n          schedules\n        });\n      }\n\n      case 'history': {\n        const limit = Number.parseInt(searchParams.get('limit') ?? '10');\n        const history = await getCleanupHistory(limit);\n        return NextResponse.json({\n          success: true,\n          history\n        });\n      }\n\n      case 'preview': {\n        const operations = searchParams.get('operations')?.split(',') ?? [];\n        const preview = await previewCleanupOperations(operations);\n        return NextResponse.json({\n          success: true,\n          preview\n        });\n      }\n\n      default: {\n        const status = await getCleanupStatus();\n        return NextResponse.json({\n          success: true,\n          status,\n          endpoints: [\n            'GET ?action=status - Get overall cleanup status',\n            'GET ?action=schedules - Get cleanup schedules',\n            'GET ?action=history&limit=N - Get cleanup history',\n            'GET ?action=preview&operations=op1,op2 - Preview cleanup operations',\n            'POST - Run cleanup operations'\n          ]\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Automated cleanup GET error:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to process cleanup request',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Verify admin access\n    const hasAccess = await verifyAdminAccess(request);\n    if (!hasAccess) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json() as RequestBody;\n    const { action, options = {} } = body;\n\n    switch (action) {\n      case 'run_scheduled': {\n        const { scheduleId } = options as RunScheduledOptions;\n        const result = await runScheduledCleanup(scheduleId);\n        return NextResponse.json({\n          success: true,\n          action: 'run_scheduled',\n          result\n        });\n      }\n\n      case 'run_immediate': {\n        const {\n          operations = ['remove_placeholders', 'normalize_phone', 'fix_coordinates', 'update_quality_scores'],\n          batchSize = 50,\n          dryRun = false\n        } = options as RunImmediateOptions;\n\n        const result = await BatchCleanupService.runFullCleanup({\n          operations: operations as CleanupOperationType[],\n          batchSize,\n          dryRun\n        });\n\n        // Log the cleanup operation\n        // @ts-expect-error TS(2345): Argument of type 'BatchCleanupResult' is not assig... Remove this comment to see the full error message\n        await logCleanupOperation('immediate', result, options);\n\n        return NextResponse.json({\n          success: true,\n          action: 'run_immediate',\n          result,\n          message: dryRun ? 'Dry run completed successfully' : 'Cleanup completed successfully'\n        });\n      }\n\n      case 'schedule_cleanup': {\n        // @ts-expect-error TS(2352): Conversion of type 'Record<string, unknown>' to ty... Remove this comment to see the full error message\n        const { name, operations, schedule, enabled = true } = options as ScheduleCleanupOptions;\n        const scheduleResult = await createCleanupSchedule(name, operations, schedule, enabled);\n        return NextResponse.json({\n          success: true,\n          action: 'schedule_cleanup',\n          result: scheduleResult\n        });\n      }\n\n      case 'update_schedule': {\n        // @ts-expect-error TS(2352): Conversion of type 'Record<string, unknown>' to ty... Remove this comment to see the full error message\n        const { scheduleId, updates } = options as UpdateScheduleOptions;\n        const updateResult = await updateCleanupSchedule(scheduleId, updates);\n        return NextResponse.json({\n          success: true,\n          action: 'update_schedule',\n          result: updateResult\n        });\n      }\n\n      case 'delete_schedule': {\n        // @ts-expect-error TS(2352): Conversion of type 'Record<string, unknown>' to ty... Remove this comment to see the full error message\n        const { scheduleId } = options as DeleteScheduleOptions;\n        const deleteResult = await deleteCleanupSchedule(scheduleId);\n        return NextResponse.json({\n          success: true,\n          action: 'delete_schedule',\n          result: deleteResult\n        });\n      }\n\n      case 'analyze_duplicates': {\n        const { threshold = 0.8 } = options as AnalyzeDuplicatesOptions;\n        const analysis = await analyzeDuplicates(threshold);\n        return NextResponse.json({\n          success: true,\n          action: 'analyze_duplicates',\n          result: analysis\n        });\n      }\n\n      default: {\n        return NextResponse.json({\n          success: false,\n          error: 'Unknown action',\n          available_actions: [\n            'run_scheduled',\n            'run_immediate',\n            'schedule_cleanup',\n            'update_schedule',\n            'delete_schedule',\n            'analyze_duplicates'\n          ]\n        }, { status: 400 });\n      }\n    }\n  } catch (error) {\n    console.error('Automated cleanup POST error:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to process cleanup request',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nasync function verifyAdminAccess(request: NextRequest): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (authHeader?.startsWith('Bearer ') !== true) {\n      return false;\n    }\n\n    const token = authHeader.slice(7);\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) {\n      return false;\n    }\n\n    if (!supabaseAdmin) {\n      return false;\n    }\n\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nasync function getCleanupStatus(): Promise<AutomatedCleanupStatus> {\n  // This would typically fetch from a database table\n  // For now, return a mock status\n  return {\n    isRunning: false,\n    lastRun: new Date(Date.now() - 3_600_000).toISOString(), // 1 hour ago\n    nextScheduledRun: new Date(Date.now() + 3_600_000).toISOString(), // 1 hour from now\n    schedules: await getCleanupSchedules(),\n    recentResults: [],\n    statistics: {\n      totalRuns: 42,\n      successfulRuns: 40,\n      failedRuns: 2,\n      trucksImproved: 156,\n      duplicatesRemoved: 23\n    }\n  };\n}\n\nfunction getCleanupSchedules(): Promise<CleanupSchedule[]> {\n  return Promise.resolve([\n    // Default cleanup schedules\n    {\n      id: 'daily-maintenance',\n      name: 'Daily Maintenance Cleanup',\n      operations: ['remove_placeholders', 'normalize_phone', 'update_quality_scores'],\n      schedule: '0 2 * * *', // Daily at 2 AM\n      enabled: true,\n      lastRun: new Date(Date.now() - 86_400_000).toISOString(), // 24 hours ago\n      nextRun: new Date(Date.now() + 3_600_000).toISOString(), // 1 hour from now\n      successCount: 30,\n      errorCount: 1\n    },\n    {\n      id: 'weekly-deep-clean',\n      name: 'Weekly Deep Cleanup',\n      operations: ['remove_placeholders', 'normalize_phone', 'fix_coordinates', 'update_quality_scores', 'merge_duplicates'],\n      schedule: '0 3 * * 0', // Weekly on Sunday at 3 AM\n      enabled: true,\n      lastRun: new Date(Date.now() - 604_800_000).toISOString(), // 7 days ago\n      nextRun: new Date(Date.now() + 259_200_000).toISOString(), // 3 days from now\n      successCount: 4,\n      errorCount: 0\n    }\n  ]);\n}\n\nfunction getCleanupHistory(_limit: number): Promise<CleanupResult[]> {\n  // This would fetch from a cleanup_history table\n  return Promise.resolve([]);\n}\n\ninterface PreviewResult {\n  estimatedChanges: Record<string, unknown>;\n  operationDetails: Record<string, unknown>;\n  estimatedDuration: number;\n  affectedTrucks: number;\n}\n\nasync function previewCleanupOperations(operations: string[]): Promise<PreviewResult> {\n  try {\n    const result = await BatchCleanupService.runFullCleanup({\n      operations: operations as CleanupOperationType[],\n      batchSize: 10,\n      dryRun: true\n    });\n\n    return {\n      estimatedChanges: result.summary as Record<string, unknown>,\n      operationDetails: (() => {\n        const details: Record<string, unknown> = {};\n        for (const [index, op] of result.operations.entries()) {\n          details[`operation_${index}`] = {\n            type: op.type,\n            description: op.description,\n            affectedCount: op.affectedCount,\n            successCount: op.successCount,\n            errorCount: op.errorCount\n          };\n        }\n        return details;\n      })(),\n      estimatedDuration: result.duration,\n      affectedTrucks: result.totalProcessed\n    };\n  } catch (error) {\n    throw new Error(`Preview failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nasync function runScheduledCleanup(scheduleId: string): Promise<Record<string, unknown>> {\n  const schedules = await getCleanupSchedules();\n  const schedule = schedules.find(s => s.id === scheduleId);\n\n  if (!schedule) {\n    throw new Error(`Schedule ${scheduleId} not found`);\n  }\n\n  if (!schedule.enabled) {\n    throw new Error(`Schedule ${scheduleId} is disabled`);\n  }\n\n  const result = await BatchCleanupService.runFullCleanup({\n    operations: schedule.operations as CleanupOperationType[],\n    batchSize: 50,\n    dryRun: false\n  });\n\n  // Log the scheduled cleanup\n  // @ts-expect-error TS(2345): Argument of type 'BatchCleanupResult' is not assig... Remove this comment to see the full error message\n  await logCleanupOperation('scheduled', result, { scheduleId });\n\n  // @ts-expect-error TS(2352): Conversion of type 'BatchCleanupResult' to type 'R... Remove this comment to see the full error message\n  return result as Record<string, unknown>;\n}\n\ninterface ScheduleCreateResult {\n  id: string;\n  name: string;\n  operations: string[];\n  schedule: string;\n  enabled: boolean;\n  created: string;\n}\n\ninterface ScheduleUpdateResult {\n  scheduleId: string;\n  updates: Record<string, unknown>;\n  updated: string;\n}\n\ninterface ScheduleDeleteResult {\n  scheduleId: string;\n  deleted: string;\n}\n\ninterface DuplicateAnalysisResult {\n  threshold: number;\n  potentialDuplicates: number;\n  highConfidenceMatches: number;\n  mediumConfidenceMatches: number;\n  lowConfidenceMatches: number;\n  analysisTime: string;\n}\n\nfunction createCleanupSchedule(\n  name: string,\n  operations: string[],\n  schedule: string,\n  enabled: boolean\n): Promise<ScheduleCreateResult> {\n  // This would create a new schedule in the database\n  return Promise.resolve({\n    id: `schedule-${Date.now()}`,\n    name,\n    operations,\n    schedule,\n    enabled,\n    created: new Date().toISOString()\n  });\n}\n\nfunction updateCleanupSchedule(scheduleId: string, updates: Record<string, unknown>): Promise<ScheduleUpdateResult> {\n  // This would update the schedule in the database\n  return Promise.resolve({\n    scheduleId,\n    updates,\n    updated: new Date().toISOString()\n  });\n}\n\nfunction deleteCleanupSchedule(scheduleId: string): Promise<ScheduleDeleteResult> {\n  // This would delete the schedule from the database\n  return Promise.resolve({\n    scheduleId,\n    deleted: new Date().toISOString()\n  });\n}\n\nfunction analyzeDuplicates(threshold: number): Promise<DuplicateAnalysisResult> {\n  try {\n    // This would run a comprehensive duplicate analysis\n    return Promise.resolve({\n      threshold,\n      potentialDuplicates: 0,\n      highConfidenceMatches: 0,\n      mediumConfidenceMatches: 0,\n      lowConfidenceMatches: 0,\n      analysisTime: new Date().toISOString()\n    });\n  } catch (error) {\n    throw new Error(`Duplicate analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nfunction logCleanupOperation(type: string, result: Record<string, unknown>, options: Record<string, unknown>): Promise<void> {\n  try {\n    // This would log the cleanup operation to a database table\n    console.info(`Cleanup operation completed:`, {\n      type,\n      result: result.summary as Record<string, unknown>,\n      options,\n      timestamp: new Date().toISOString()\n    });\n    return Promise.resolve();\n  } catch (error) {\n    console.warn('Failed to log cleanup operation:', error);\n    return Promise.resolve();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/cron-status/route.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":87,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":87,"endColumn":111,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":87,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":87,"endColumn":67,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/data-cleanup/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'POST' has too many lines (91). Maximum allowed is 50.","line":22,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":112,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'GET' has too many lines (74). Maximum allowed is 50.","line":114,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":187,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { BatchCleanupService } from '@/lib/data-quality/batchCleanup';\nimport { DuplicatePreventionService } from '@/lib/data-quality/duplicatePrevention';\n\n/**\n * Data Cleanup API Endpoint\n * Provides automated data quality improvements and cleanup operations\n */\n\ninterface DataCleanupRequestBody {\n  action: string;\n  options?: {\n    batchSize?: number;\n    dryRun?: boolean;\n    operations?: string[];\n    truckData?: Record<string, unknown>;\n    targetId?: string;\n    sourceId?: string;\n  };\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json() as DataCleanupRequestBody;\n    const { action, options = {} } = body;\n\n    switch (action) {\n      case 'full-cleanup': {\n        const result = await BatchCleanupService.runFullCleanup({\n          batchSize: options.batchSize ?? 50,\n          dryRun: options.dryRun ?? false,\n          operations: options.operations\n        });\n        \n        return NextResponse.json({\n          success: true,\n          action: 'full-cleanup',\n          result,\n          message: `Cleanup completed: ${result.summary.trucksImproved} trucks improved, ${result.summary.duplicatesRemoved} duplicates removed`\n        });\n      }\n\n      case 'check-duplicates': {\n        const { truckData } = options;\n        if (!truckData) {\n          return NextResponse.json(\n            { success: false, error: 'Missing truckData for duplicate check' },\n            { status: 400 }\n          );\n        }\n\n        const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\n        \n        return NextResponse.json({\n          success: true,\n          action: 'check-duplicates',\n          result: duplicateCheck\n        });\n      }\n\n      case 'merge-duplicates': {\n        const { targetId, sourceId } = options;\n        if (targetId === undefined || sourceId === undefined) {\n          return NextResponse.json(\n            { success: false, error: 'Missing targetId or sourceId for merge operation' },\n            { status: 400 }\n          );\n        }\n\n        const mergedTruck = await DuplicatePreventionService.mergeDuplicates(targetId, sourceId);\n        \n        return NextResponse.json({\n          success: true,\n          action: 'merge-duplicates',\n          result: mergedTruck,\n          message: `Successfully merged truck ${sourceId} into ${targetId}`\n        });\n      }\n\n      case 'dry-run': {\n        const result = await BatchCleanupService.runFullCleanup({\n          ...options,\n          dryRun: true\n        });\n        \n        return NextResponse.json({\n          success: true,\n          action: 'dry-run',\n          result,\n          message: 'Dry run completed - no changes made to database'\n        });\n      }\n\n      default: {\n        return NextResponse.json(\n          { success: false, error: `Unknown action: ${action}` },\n          { status: 400 }\n        );\n      }\n    }\n  } catch (error) {\n    console.error('Data cleanup API error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to process cleanup request',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const action = searchParams.get('action');\n\n    switch (action) {\n      case 'status': {\n        // Return cleanup system status\n        return NextResponse.json({\n          success: true,\n          status: {\n            available_operations: [\n              'remove_placeholders',\n              'normalize_phone',\n              'fix_coordinates',\n              'update_quality_scores',\n              'merge_duplicates'\n            ],\n            default_batch_size: 50,\n            supports_dry_run: true\n          }\n        });\n      }\n\n      case 'preview': {\n        // Run a small dry run to preview changes\n        const result = await BatchCleanupService.runFullCleanup({\n          batchSize: 10,\n          dryRun: true\n        });\n        \n        return NextResponse.json({\n          success: true,\n          preview: {\n            estimated_improvements: result.summary.trucksImproved,\n            estimated_duplicates: result.summary.duplicatesRemoved,\n            operations: result.operations.map(op => ({\n              type: op.type,\n              description: op.description,\n              affected_count: op.affectedCount\n            }))\n          }\n        });\n      }\n\n      default: {\n        return NextResponse.json({\n          success: true,\n          endpoints: [\n            'GET /api/admin/data-cleanup?action=status - Get cleanup system status',\n            'GET /api/admin/data-cleanup?action=preview - Preview cleanup changes',\n            'POST /api/admin/data-cleanup - Run cleanup operations'\n          ],\n          actions: [\n            'full-cleanup - Run all cleanup operations',\n            'check-duplicates - Check if truck data is duplicate',\n            'merge-duplicates - Merge two duplicate trucks',\n            'dry-run - Preview changes without making them'\n          ]\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Data cleanup GET error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to process cleanup request',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/data-quality/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'POST' has too many lines (107). Maximum allowed is 50.","line":157,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":263,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":8,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":8,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":8,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":8,"endColumn":64,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getQualityThresholds on an `error` typed value.","line":8,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":8,"endColumn":64,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":29,"endColumn":75,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":29,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":29,"endColumn":65,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateQualityScore on an `error` typed value.","line":29,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":65,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":43,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":43,"endColumn":58,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .categorizeQualityScore on an `error` typed value.","line":43,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":58,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":181,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":181,"endColumn":90,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":181,"column":39,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":181,"endColumn":81,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateTruckQualityScore on an `error` typed value.","line":181,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":81,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":200,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":200,"endColumn":89,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":200,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":200,"endColumn":77,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .batchUpdateQualityScores on an `error` typed value.","line":200,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":200,"endColumn":77,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":224,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":224,"endColumn":61,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateTruckQualityScore on an `error` typed value.","line":224,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":61,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { DataQualityService, FoodTruckService, supabase } from '@/lib/supabase';\n\n// Helper function to handle stats action\nasync function handleStatsAction() {\n  const qualityStatsRaw = await FoodTruckService.getDataQualityStats();\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n  const thresholdsRaw = DataQualityService.getQualityThresholds();\n\n  // Type-safe casting with proper error handling\n  const qualityStats = qualityStatsRaw as Record<string, unknown>;\n  const thresholds = thresholdsRaw as QualityThresholds;\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      ...qualityStats,\n      thresholds,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\n// Helper function to handle assess action\nasync function handleAssessAction(truckId: string) {\n  // Get truck and assess quality\n  const truckRaw = await FoodTruckService.getTruckById(truckId);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n  const assessmentRaw = DataQualityService.calculateQualityScore(truckRaw);\n\n  // Type-safe casting\n  const truck = truckRaw as TruckData;\n  const assessment = assessmentRaw as QualityAssessment;\n\n  return NextResponse.json({\n    success: true,\n    data: {\n      truckId,\n      truckName: truck.name,\n      currentScore: truck.data_quality_score,\n      newAssessment: assessment,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n      category: DataQualityService.categorizeQualityScore(assessment.score) as QualityCategory,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\n// Helper function to handle default action\nasync function handleDefaultAction() {\n  const qualityStats = await FoodTruckService.getDataQualityStats();\n  return NextResponse.json({\n    success: true,\n    data: qualityStats\n  });\n}\n\n// Type definitions for API responses\ninterface QualityThresholds {\n  excellent: number;\n  good: number;\n  fair: number;\n  poor: number;\n}\n\ninterface QualityAssessment {\n  score: number;\n  breakdown: Record<string, number>;\n  recommendations: string[];\n}\n\ninterface TruckData {\n  id: string;\n  name: string;\n  data_quality_score: number;\n  verification_status: string;\n}\n\ninterface QualityCategory {\n  label: string;\n  color: string;\n  description: string;\n}\n\n// Security check for admin API endpoints\nasync function verifyAdminAccess(request: Request): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (authHeader == undefined) return false;\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    \n    if (error || !user) return false;\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\n// GET: Retrieve data quality statistics and metrics\nexport async function GET(request: NextRequest) {\n  // Verify admin access\n  const hasAdminAccess = await verifyAdminAccess(request);\n  if (!hasAdminAccess) {\n    return NextResponse.json(\n      { success: false, error: 'Unauthorized access' },\n      { status: 401 }\n    );\n  }\n\n  try {\n    const { searchParams } = new URL(request.url);\n    const action = searchParams.get('action');\n    const truckId = searchParams.get('truckId');\n\n    switch (action) {\n      case 'stats': {\n        return await handleStatsAction();\n      }\n\n      case 'assess': {\n        if (truckId == undefined) {\n          return NextResponse.json(\n            { success: false, error: 'Truck ID required for assessment' },\n            { status: 400 }\n          );\n        }\n        return await handleAssessAction(truckId);\n      }\n\n      default: {\n        return await handleDefaultAction();\n      }\n    }\n  } catch (error: unknown) {\n    console.error('Error fetching data quality information:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to fetch data quality information',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// POST: Update quality scores or perform quality operations\nexport async function POST(request: NextRequest) {\n  // Verify admin access\n  const hasAdminAccess = await verifyAdminAccess(request);\n  if (!hasAdminAccess) {\n    return NextResponse.json(\n      { success: false, error: 'Unauthorized access' },\n      { status: 401 }\n    );\n  }\n\n  try {\n    const body = await request.json() as { action: string; truckId?: string; limit?: number };\n    const { action, truckId, limit } = body;\n\n    switch (action) {\n      case 'update_single': {\n        if (truckId == undefined) {\n          return NextResponse.json(\n            { success: false, error: 'Truck ID required' },\n            { status: 400 }\n          );\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        const updatedTruckRaw = await DataQualityService.updateTruckQualityScore(truckId);\n        const updatedTruck = updatedTruckRaw as TruckData;\n        \n        return NextResponse.json({\n          success: true,\n          message: 'Quality score updated successfully',\n          data: {\n            truckId: updatedTruck.id,\n            truckName: updatedTruck.name,\n            newScore: updatedTruck.data_quality_score,\n            verificationStatus: updatedTruck.verification_status,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n\n      case 'batch_update': {\n        const batchLimit = limit ?? 100;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        const resultsRaw = await DataQualityService.batchUpdateQualityScores(batchLimit);\n        const results = resultsRaw as Record<string, unknown>;\n        \n        return NextResponse.json({\n          success: true,\n          message: 'Batch quality score update completed',\n          data: {\n            ...results,\n            limit: batchLimit,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n\n      case 'recalculate_all': {\n        // Recalculate quality scores for all trucks\n        const { trucks } = await FoodTruckService.getAllTrucks(1000, 0);\n        let updated = 0;\n        let errors = 0;\n\n        for (const truck of trucks) {\n          try {\n            const truckData = truck as TruckData;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            await DataQualityService.updateTruckQualityScore(truckData.id);\n            updated++;\n          } catch (error: unknown) {\n            const truckData = truck as TruckData;\n            console.error(`Failed to update truck ${truckData.id}:`, error);\n            errors++;\n          }\n        }\n\n        return NextResponse.json({\n          success: true,\n          message: 'Quality score recalculation completed',\n          data: {\n            totalTrucks: trucks.length,\n            updated,\n            errors,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n\n      default: {\n        return NextResponse.json(\n          { success: false, error: 'Invalid action specified' },\n          { status: 400 }\n        );\n      }\n    }\n  } catch (error: unknown) {\n    console.error('Error updating data quality:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to update data quality',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/oauth-status/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'GET' has too many lines (109). Maximum allowed is 50.","line":37,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":145,"endColumn":2},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.","line":37,"column":23,"nodeType":null,"messageId":"refactorFunction","endLine":37,"endColumn":26},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":91,"column":11,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":93,"endColumn":12},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":248,"column":129,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":248,"endColumn":155}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabase } from '@/lib/supabase';\n\n/**\n * OAuth Configuration Status Endpoint\n * Provides comprehensive status of Google OAuth configuration\n * for admin dashboard monitoring and setup verification.\n */\n\ninterface OAuthStatus {\n  timestamp: string;\n  environment: 'development' | 'production';\n  supabase: {\n    connected: boolean;\n    projectId: string;\n    authSettings?: {\n      googleEnabled: boolean;\n      signupEnabled: boolean;\n      autoconfirm: boolean;\n    };\n    error?: string;\n  };\n  environment_variables: {\n    supabaseUrl: boolean;\n    supabaseAnonKey: boolean;\n    supabaseServiceKey: boolean;\n  };\n  oauth_flow: {\n    loginPageExists: boolean;\n    callbackRouteExists: boolean;\n    authProviderConfigured: boolean;\n  };\n  recommendations: string[];\n  overall_status: 'ready' | 'partial' | 'not_configured' | 'error';\n}\n\nexport async function GET(_request: NextRequest) {\n  try {\n    const status: OAuthStatus = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\n      supabase: {\n        connected: false,\n        projectId: 'zkwliyjjkdnigizidlln'\n      },\n      environment_variables: {\n        supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL != undefined,\n        supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY != undefined,\n        supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY != undefined\n      },\n      oauth_flow: {\n        loginPageExists: true, // We know this exists from our codebase\n        callbackRouteExists: true, // We know this exists from our codebase\n        authProviderConfigured: false\n      },\n      recommendations: [],\n      overall_status: 'not_configured'\n    };\n\n    // Test Supabase connection\n    try {\n      const { error } = await supabase.from('profiles').select('count').limit(1);\n\n      if (error == undefined) {\n        status.supabase.connected = true;\n      } else {\n        status.supabase.error = error.message;\n      }\n    } catch (error) {\n      status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\n    }\n\n    // Try to get Supabase auth settings\n    try {\n      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n      if (supabaseUrl != undefined && supabaseUrl !== '') {\n        const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\n\n        if (settingsResponse.ok === true) {\n          const settings = await settingsResponse.json() as {\n            external?: { google?: boolean };\n            disable_signup?: boolean;\n            autoconfirm?: boolean;\n          };\n          status.supabase.authSettings = {\n            googleEnabled: settings.external?.google ?? false,\n            signupEnabled: settings.disable_signup !== true,\n            autoconfirm: settings.autoconfirm ?? false\n          };\n\n          if (settings.external?.google != undefined) {\n            status.oauth_flow.authProviderConfigured = true;\n          }\n        }\n      }\n    } catch {\n      // Auth settings endpoint might require authentication, which is normal\n      console.info('Auth settings endpoint requires authentication (normal)');\n    }\n\n    // Test OAuth provider availability\n    try {\n      const { error: oauthError } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: 'http://localhost:3000/auth/callback',\n          skipBrowserRedirect: true\n        }\n      });\n\n      if (!oauthError || oauthError.message !== 'Provider not found') {\n        status.oauth_flow.authProviderConfigured = true;\n      }\n    } catch {\n      console.info('OAuth provider test failed (may be normal)');\n    }\n\n    // Generate recommendations and determine status\n    status.recommendations = generateRecommendations(status);\n    status.overall_status = determineOverallStatus(status);\n\n    return NextResponse.json({\n      success: true,\n      ...status,\n      legacy_format: {\n        oauth_status: status.overall_status,\n        message: getStatusMessage(status.overall_status),\n        configuration_steps: status.overall_status === 'ready' ? undefined : [\n          '1. Go to Supabase Dashboard > Authentication > Providers',\n          '2. Enable Google provider',\n          '3. Add Google OAuth Client ID and Secret',\n          '4. Configure redirect URLs',\n          '5. Test OAuth flow'\n        ]\n      }\n    });\n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: 'OAuth status check failed',\n      details: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n}\n\nfunction generateRecommendations(status: OAuthStatus): string[] {\n  const recommendations: string[] = [];\n\n  // Environment variables check\n  if (!status.environment_variables.supabaseUrl) {\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\n  }\n  if (!status.environment_variables.supabaseAnonKey) {\n    recommendations.push('❌ Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n  }\n  if (!status.environment_variables.supabaseServiceKey) {\n    recommendations.push('❌ Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\n  }\n\n  // Supabase connection check\n  if (!status.supabase.connected) {\n    recommendations.push('❌ Fix Supabase connection issue');\n    if (status.supabase.error != undefined && status.supabase.error !== '') {\n      recommendations.push(`   Error: ${status.supabase.error}`);\n    }\n  }\n\n  // OAuth configuration check\n  if (status.supabase.authSettings == undefined) {\n    recommendations.push('🔧 Configure Google OAuth in Supabase Dashboard', '   1. Create Google Cloud Console OAuth credentials', '   2. Add credentials to Supabase Auth settings');\n  } else {\n    if (status.supabase.authSettings.googleEnabled === true) {\n      recommendations.push('✅ Google OAuth provider is enabled');\n    } else {\n      recommendations.push('🔧 Enable Google OAuth provider in Supabase Dashboard', '   Go to: Authentication > Providers > Google');\n    }\n  }\n\n  // Success state\n  if (status.overall_status === 'ready') {\n    recommendations.push('🎉 OAuth configuration is complete!', '✅ Test the login flow at /login');\n  }\n\n  // General guidance\n  if (recommendations.length > 1) {\n    recommendations.push('📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions', '🔧 Run: npm run oauth:verify for automated checks');\n  }\n\n  return recommendations;\n}\n\nfunction determineOverallStatus(status: OAuthStatus): 'ready' | 'partial' | 'not_configured' | 'error' {\n  // Error state\n  if (status.supabase.connected !== true || (status.supabase.error != undefined && status.supabase.error !== '')) {\n    return 'error';\n  }\n\n  // Check if all environment variables are present\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\n  if (!envVarsComplete) {\n    return 'not_configured';\n  }\n\n  // Check OAuth configuration\n  if (status.supabase.authSettings?.googleEnabled === true && status.oauth_flow.authProviderConfigured === true) {\n    return 'ready';\n  }\n\n  // Partial configuration\n  if (status.supabase.connected === true && envVarsComplete) {\n    return 'partial';\n  }\n\n  return 'not_configured';\n}\n\nfunction getStatusMessage(status: string): string {\n  switch (status) {\n    case 'ready': {\n      return 'Google OAuth is fully configured and ready to use';\n    }\n    case 'partial': {\n      return 'Basic configuration complete, OAuth provider needs setup';\n    }\n    case 'not_configured': {\n      return 'Google OAuth is not configured';\n    }\n    case 'error': {\n      return 'Configuration error detected';\n    }\n    default: {\n      return 'Unknown configuration status';\n    }\n  }\n}\n\n/**\n * Test OAuth Flow Endpoint\n * Provides OAuth test URL for manual testing\n */\nexport function POST() {\n  try {\n    const baseUrl = process.env.NODE_ENV === 'production'\n      ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\n      : 'http://localhost:3000';\n\n    const testUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/auth/v1/authorize?provider=google&redirect_to=${encodeURIComponent(`${baseUrl}/auth/callback`)}`;\n\n    return NextResponse.json({\n      success: true,\n      message: 'OAuth test URL generated',\n      test_url: testUrl,\n      environment: process.env.NODE_ENV ?? 'development',\n      instructions: [\n        '1. Open the test_url in a new browser tab',\n        '2. Complete Google OAuth flow',\n        '3. Verify redirect to admin dashboard',\n        '4. Check for proper role assignment'\n      ],\n      manual_test_steps: [\n        'Navigate to /login page',\n        'Click Google login button',\n        'Complete OAuth flow',\n        'Verify admin access'\n      ],\n      automation_commands: [\n        'npm run oauth:verify - Check configuration',\n        'npm run oauth:test:dev - Test development flow',\n        'npm run oauth:test:prod - Test production flow'\n      ]\n    });\n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to generate OAuth test URL',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/realtime-events/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'GET' has too many lines (85). Maximum allowed is 50.","line":40,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":124,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Method 'start' has too many lines (63). Maximum allowed is 50.","line":50,"column":5,"nodeType":"Property","messageId":"exceed","endLine":112,"endColumn":6},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":97,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":104,"endColumn":8},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'monitorDataChanges' has too many lines (68). Maximum allowed is 50.","line":206,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":273,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'POST' has too many lines (59). Maximum allowed is 50.","line":285,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":343,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `ReadableStreamDefaultController<any>` assigned to a parameter of type `ReadableStreamDefaultController<Uint8Array<ArrayBufferLike>>`.","line":100,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":100,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":160,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":160,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":160,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":160,"endColumn":59,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":171,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":171,"endColumn":68,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":171,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":171,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getQualityStats on an `error` typed value.","line":171,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":174,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":174,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avg_quality_score on an `error` typed value.","line":174,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":174,"endColumn":51,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":176,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":176,"endColumn":50,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total_trucks on an `error` typed value.","line":176,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":213,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":215,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":213,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":213,"endColumn":64,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":218,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":225,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":225,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":225,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":235,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":281,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":281,"endColumn":40,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":293,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":293,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":295,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":295,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from 'next/server';\nimport { supabase, supabaseAdmin, ScrapingJobService, FoodTruckService, DataQualityService } from '@/lib/supabase';\n\n/**\n * SOTA Real-time Admin Dashboard Events API\n * \n * Implements Server-Sent Events (SSE) for real-time admin dashboard updates\n * Provides live monitoring of scraping jobs, data quality, and system status\n * \n * GET /api/admin/realtime-events\n */\n\ninterface AdminEvent {\n  id: string;\n  type: 'scraping_update' | 'data_quality_change' | 'system_alert' | 'user_activity' | 'heartbeat';\n  timestamp: string;\n  data: Record<string, unknown>;\n  severity?: 'info' | 'warning' | 'error' | 'critical';\n}\n\ninterface RealtimeMetrics {\n  scrapingJobs: {\n    active: number;\n    completed: number;\n    failed: number;\n    pending: number;\n  };\n  dataQuality: {\n    averageScore: number;\n    totalTrucks: number;\n    recentChanges: number;\n  };\n  systemHealth: {\n    status: 'healthy' | 'warning' | 'error';\n    uptime: number;\n    lastUpdate: string;\n  };\n}\n\nexport async function GET(request: NextRequest): Promise<Response> {\n  // Verify admin access\n  const hasAccess = await verifyAdminAccess(request);\n  if (!hasAccess) {\n    return new Response('Unauthorized', { status: 401 });\n  }\n\n  // Create SSE response\n  const encoder = new TextEncoder();\n  const stream = new ReadableStream({\n    start(controller) {\n      // Send initial connection event\n      const connectionEvent: AdminEvent = {\n        id: generateEventId(),\n        type: 'heartbeat',\n        timestamp: new Date().toISOString(),\n        data: {\n          message: 'Real-time admin dashboard connected',\n          connectionId: generateEventId()\n        }\n      };\n      \n      controller.enqueue(encoder.encode(formatSSEMessage(connectionEvent)));\n\n      // Set up periodic updates\n      const intervalId = setInterval(() => {\n        void (async () => {\n          try {\n            const metrics = await fetchRealtimeMetrics();\n            const event: AdminEvent = {\n              id: generateEventId(),\n              type: 'heartbeat',\n              timestamp: new Date().toISOString(),\n              data: metrics as Record<string, unknown>\n            };\n\n            controller.enqueue(encoder.encode(formatSSEMessage(event)));\n          } catch (error) {\n            console.error('Error fetching realtime metrics:', error);\n\n            const errorEvent: AdminEvent = {\n              id: generateEventId(),\n              type: 'system_alert',\n              timestamp: new Date().toISOString(),\n              data: {\n                error: 'Failed to fetch metrics',\n                details: error instanceof Error ? error.message : 'Unknown error'\n              },\n              severity: 'error'\n            };\n\n            controller.enqueue(encoder.encode(formatSSEMessage(errorEvent)));\n          }\n        })();\n      }, 5000); // Update every 5 seconds\n\n      // Set up data change monitoring\n      const changeMonitorId = setInterval(async () => {\n        try {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          await monitorDataChanges(controller, encoder);\n        } catch (error) {\n          console.error('Error monitoring data changes:', error);\n        }\n      }, 10_000); // Check for changes every 10 seconds\n\n      // Cleanup on connection close\n      request.signal.addEventListener('abort', () => {\n        clearInterval(intervalId);\n        clearInterval(changeMonitorId);\n        controller.close();\n      });\n    }\n  });\n\n  return new Response(stream, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control'\n    }\n  });\n}\n\nasync function verifyAdminAccess(request: NextRequest): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (authHeader?.startsWith('Bearer ') !== true) {\n      return false;\n    }\n\n    const token = authHeader.slice(7);\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) {\n      return false;\n    }\n\n    if (!supabaseAdmin) {\n      return false;\n    }\n\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nasync function fetchRealtimeMetrics(): Promise<RealtimeMetrics> {\n  try {\n    // Fetch scraping job metrics\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n    const recentJobs = await ScrapingJobService.getAllJobs(50, 0);\n    const typedJobs = recentJobs as Array<{ status?: string }>;\n    const scrapingMetrics = {\n      active: typedJobs.filter(job => job.status === 'running').length,\n      completed: typedJobs.filter(job => job.status === 'completed').length,\n      failed: typedJobs.filter(job => job.status === 'failed').length,\n      pending: typedJobs.filter(job => job.status === 'pending').length\n    };\n\n    // Fetch data quality metrics\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    const qualityStats = await DataQualityService.getQualityStats();\n    const dataQualityMetrics = {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      averageScore: qualityStats.avg_quality_score ?? 0,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      totalTrucks: qualityStats.total_trucks ?? 0,\n      recentChanges: 0 // This would need additional tracking\n    };\n\n    // System health check\n    const systemHealth = {\n      status: 'healthy' as const,\n      uptime: process.uptime(),\n      lastUpdate: new Date().toISOString()\n    };\n\n    return {\n      scrapingJobs: scrapingMetrics,\n      dataQuality: dataQualityMetrics,\n      systemHealth\n    };\n  } catch (error) {\n    console.error('Error fetching realtime metrics:', error);\n    return {\n      scrapingJobs: { active: 0, completed: 0, failed: 0, pending: 0 },\n      dataQuality: { averageScore: 0, totalTrucks: 0, recentChanges: 0 },\n      systemHealth: {\n        status: 'error',\n        uptime: 0,\n        lastUpdate: new Date().toISOString()\n      }\n    };\n  }\n}\n\nasync function monitorDataChanges(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): Promise<void> {\n  try {\n    // Check for recent scraping job changes\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n    const recentJobs = await ScrapingJobService.getJobsFromDate(\n      new Date(Date.now() - 60_000) // Last minute\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (recentJobs.length > 0) {\n      const event: AdminEvent = {\n        id: generateEventId(),\n        type: 'scraping_update',\n        timestamp: new Date().toISOString(),\n        data: {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n          recentJobs: recentJobs.map((job: unknown) => {\n            const jobData = job as { id?: string; status?: string; started_at?: string; completed_at?: string };\n            return {\n              id: jobData.id,\n              status: jobData.status,\n              started_at: jobData.started_at,\n              completed_at: jobData.completed_at\n            };\n          }),\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          count: recentJobs.length\n        },\n        severity: 'info'\n      };\n\n      controller.enqueue(encoder.encode(formatSSEMessage(event)));\n    }\n\n    // Check for data quality changes\n    const recentTrucks = await FoodTruckService.getAllTrucks(10, 0);\n    const recentlyUpdated = recentTrucks.trucks.filter(truck => {\n      const updatedAt = new Date(truck.updated_at);\n      const oneMinuteAgo = new Date(Date.now() - 60_000);\n      return updatedAt > oneMinuteAgo;\n    });\n\n    if (recentlyUpdated.length > 0) {\n      const event: AdminEvent = {\n        id: generateEventId(),\n        type: 'data_quality_change',\n        timestamp: new Date().toISOString(),\n        data: {\n          updatedTrucks: recentlyUpdated.map(truck => ({\n            id: truck.id,\n            name: truck.name,\n            data_quality_score: truck.data_quality_score,\n            updated_at: truck.updated_at\n          })),\n          count: recentlyUpdated.length\n        },\n        severity: 'info'\n      };\n\n      controller.enqueue(encoder.encode(formatSSEMessage(event)));\n    }\n  } catch (error) {\n    console.error('Error monitoring data changes:', error);\n  }\n}\n\nfunction formatSSEMessage(event: AdminEvent): string {\n  return `id: ${event.id}\\nevent: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`;\n}\n\nfunction generateEventId(): string {\n  // eslint-disable-next-line sonarjs/pseudo-random\n  return `${Date.now()}-${Math.random().toString(36).slice(2, 11)}`;\n}\n\n// Health check endpoint for monitoring\nexport async function POST(request: NextRequest): Promise<Response> {\n  try {\n    const hasAccess = await verifyAdminAccess(request);\n    if (!hasAccess) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const body = await request.json();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { action } = body;\n\n    switch (action) {\n      case 'health_check': {\n        const metrics = await fetchRealtimeMetrics();\n        return new Response(JSON.stringify({\n          success: true,\n          status: 'healthy',\n          metrics,\n          timestamp: new Date().toISOString()\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      case 'trigger_test_event': {\n        // This would trigger a test event for debugging\n        return new Response(JSON.stringify({\n          success: true,\n          message: 'Test event triggered',\n          timestamp: new Date().toISOString()\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      default: {\n        return new Response(JSON.stringify({\n          success: false,\n          error: 'Unknown action',\n          available_actions: ['health_check', 'trigger_test_event']\n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Realtime events POST error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Internal server error',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/admin/scraping-metrics/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'GET' has too many lines (81). Maximum allowed is 50.","line":27,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":107,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":40,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":46,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":42,"endColumn":36,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":44,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":44,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":49,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":49,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .trucks on an `error` typed value.","line":75,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":83,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total on an `error` typed value.","line":88,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { ScrapingJobService, FoodTruckService, supabase } from '@/lib/supabase';\n\n// Security check for admin API endpoints\nasync function verifyAdminAccess(request: Request): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (authHeader == undefined) return false;\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) return false;\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nexport async function GET(request: Request) {\n  // Verify admin access for API endpoint security\n  const hasAdminAccess = await verifyAdminAccess(request);\n  if (!hasAdminAccess) {\n    return NextResponse.json(\n      { success: false, error: 'Unauthorized access' },\n      { status: 401 }\n    );\n  }\n\n  try {\n    // Fetch real scraping metrics from database\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const [allJobs, , recentTrucks] = await Promise.all([\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      ScrapingJobService.getAllJobs(100, 0), // Get last 100 jobs for metrics\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      ScrapingJobService.getJobsFromDate(new Date(Date.now() - 24 * 60 * 60 * 1000)), // Last 24 hours (unused but kept for potential future use)\n      FoodTruckService.getAllTrucks(1000, 0), // Get trucks for processing count\n    ]);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n    const totalRuns = allJobs.length;\n    const typedJobs = allJobs as Array<{ status?: string; started_at?: string; completed_at?: string }>;\n    const successfulRuns = typedJobs.filter(job => job.status === 'completed').length;\n    const failedRuns = typedJobs.filter(job => job.status === 'failed').length;\n\n    // Calculate average run time from completed jobs\n    const completedJobs = typedJobs.filter(job =>\n      job.status === 'completed' && job.started_at !== undefined && job.completed_at !== undefined\n    );\n\n    let totalRunTime = 0;\n    for (const job of completedJobs) {\n      const start = new Date(job.started_at ?? '').getTime();\n      const end = new Date(job.completed_at ?? '').getTime();\n      totalRunTime += (end - start) / 1000; // Convert to seconds\n    }\n\n    const averageRunTime = completedJobs.length > 0\n      ? Math.round(totalRunTime / completedJobs.length)\n      : 0;\n\n    // Count trucks processed today and new trucks\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const typedTrucks = recentTrucks.trucks as Array<{ created_at: string }>;\n    const newTrucksToday = typedTrucks.filter(truck => {\n      const createdAt = new Date(truck.created_at);\n      return createdAt >= today;\n    }).length;\n\n    const metrics = {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      totalRuns,\n      successfulRuns,\n      failedRuns,\n      averageRunTime,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      totalTrucksProcessed: recentTrucks.total,\n      newTrucksToday,\n    };\n\n    return NextResponse.json({\n      success: true,\n      metrics,\n    });\n  } catch (error: unknown) {\n    console.error('Error fetching scraping metrics:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to fetch scraping metrics',\n        metrics: undefined,\n      },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/analytics/web-vitals/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'POST' has too many lines (53). Maximum allowed is 50.","line":18,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":70,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'GET' has too many lines (57). Maximum allowed is 50.","line":75,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":131,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\n/**\n * Web Vitals Analytics Endpoint\n * Collects and stores Core Web Vitals metrics for performance monitoring\n */\n\ninterface WebVitalMetric {\n  name: string;\n  value: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  timestamp: number;\n  url: string;\n  userAgent: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const metric = await request.json() as WebVitalMetric;\n\n    // Validate metric data\n    if (!metric.name || typeof metric.value !== 'number' || !metric.url) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid metric data' },\n        { status: 400 }\n      );\n    }\n\n    // Store metric in database (if admin client available)\n    if (supabaseAdmin) {\n      try {\n        const { error } = await supabaseAdmin\n          .from('web_vitals_metrics')\n          .insert({\n            metric_name: metric.name,\n            metric_value: metric.value,\n            rating: metric.rating,\n            page_url: metric.url,\n            user_agent: metric.userAgent,\n            recorded_at: new Date(metric.timestamp).toISOString()\n          });\n\n        if (error) {\n          console.warn('Failed to store web vital metric:', error);\n          // Don't fail the request - metrics collection should be non-blocking\n        }\n      } catch (dbError) {\n        console.warn('Database error storing web vital:', dbError);\n      }\n    }\n\n    // Log performance issues for monitoring\n    if (metric.rating === 'poor') {\n      console.warn(`Poor ${metric.name} performance detected:`, {\n        value: metric.value,\n        url: metric.url,\n        timestamp: new Date(metric.timestamp).toISOString()\n      });\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Web vitals endpoint error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Get Web Vitals Analytics Data\n */\nexport function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const days = Number.parseInt(searchParams.get('days') ?? '7');\n    const page = searchParams.get('page');\n\n    if (!supabaseAdmin) {\n      return NextResponse.json(\n        { success: false, error: 'Database not available' },\n        { status: 503 }\n      );\n    }\n\n    // Calculate date range\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    let query = supabaseAdmin\n      .from('web_vitals_metrics')\n      .select('*')\n      .gte('recorded_at', startDate.toISOString())\n      .order('recorded_at', { ascending: false });\n\n    // Filter by page if specified\n    if (page != undefined && page !== '') {\n      query = query.ilike('page_url', `%${page}%`);\n    }\n\n    const { data: metrics, error } = await query.limit(1000);\n\n    if (error) {\n      throw error;\n    }\n\n    // Calculate summary statistics\n    const summary = calculateMetricsSummary((metrics ?? []) as Array<{ metric_name: string; metric_value: number; rating: string }>);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        metrics: metrics ?? [],\n        summary,\n        period: {\n          days,\n          startDate: startDate.toISOString(),\n          endDate: new Date().toISOString()\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Failed to fetch web vitals analytics:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch analytics data' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Calculate summary statistics for metrics\n */\nfunction calculateMetricsSummary(metrics: Array<{ metric_name: string; metric_value: number; rating: string }>) {\n  const metricTypes = ['LCP', 'FID', 'CLS', 'FCP', 'TTFB'];\n  const summary: Record<string, {\n    count: number;\n    average: number | undefined;\n    median: number | undefined;\n    p75: number | undefined;\n    p95: number | undefined;\n    goodCount: number;\n    needsImprovementCount: number;\n    poorCount: number;\n  }> = {};\n\n  for (const metricName of metricTypes) {\n    const metricData = metrics.filter(m => m.metric_name === metricName);\n    \n    if (metricData.length === 0) {\n      summary[metricName] = {\n        count: 0,\n        average: undefined,\n        median: undefined,\n        p75: undefined,\n        p95: undefined,\n        goodCount: 0,\n        needsImprovementCount: 0,\n        poorCount: 0\n      };\n      continue;\n    }\n\n    const values = metricData.map(m => m.metric_value).sort((a, b) => a - b);\n    const ratings = metricData.map(m => m.rating);\n\n    summary[metricName] = {\n      count: metricData.length,\n      average: Math.round(values.reduce((sum: number, val: number) => sum + val, 0) / values.length),\n      median: getPercentile(values, 50),\n      p75: getPercentile(values, 75),\n      p95: getPercentile(values, 95),\n      goodCount: ratings.filter(r => r === 'good').length,\n      needsImprovementCount: ratings.filter(r => r === 'needs-improvement').length,\n      poorCount: ratings.filter(r => r === 'poor').length\n    };\n  }\n\n  return summary;\n}\n\n/**\n * Calculate percentile value from sorted array\n */\nfunction getPercentile(sortedValues: number[], percentile: number): number {\n  if (sortedValues.length === 0) return 0;\n  \n  const index = (percentile / 100) * (sortedValues.length - 1);\n  const lower = Math.floor(index);\n  const upper = Math.ceil(index);\n  \n  if (lower === upper) {\n    return Math.round(sortedValues[lower]);\n  }\n  \n  const weight = index - lower;\n  return Math.round(sortedValues[lower] * (1 - weight) + sortedValues[upper] * weight);\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/auto-scrape-initiate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/autonomous-discovery/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/cron/auto-scrape/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'POST' has too many lines (77). Maximum allowed is 50.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":84,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\nimport { NextRequest, NextResponse } from 'next/server';\nimport { autoScraper } from '@/lib/autoScraper';\nimport { scheduler } from '@/lib/scheduler';\nimport { logActivity } from '@/lib/activityLogger';\nimport { AutoScrapeResult } from '@/lib/autoScraper';\n\nexport function POST(request: NextRequest) {\n  try {\n    // Verify cron secret for security\n    const authHeader = request.headers.get('authorization');\n    const cronSecret = process.env.CRON_SECRET;\n\n    if (cronSecret === undefined || cronSecret === '') {\n      console.error('CRON_SECRET not configured');\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n\n    if (authHeader !== `Bearer ${cronSecret}`) {\n      console.error('Unauthorized cron attempt:', authHeader);\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    console.info('Starting automated scraping job...');\n\n    // Log the start of the cron job\n    logActivity({\n      type: 'cron_job',\n      action: 'auto_scrape_started',\n      details: { timestamp: new Date().toISOString() },\n    });\n\n    // Execute the auto-scraping system\n    const result: AutoScrapeResult = await autoScraper.runAutoScraping();\n\n    // Schedule follow-up tasks if needed\n    scheduler.scheduleFollowUpTasks(result);\n\n    // Log successful completion\n    logActivity({\n      type: 'cron_job',\n      action: 'auto_scrape_completed',\n      details: {\n        timestamp: new Date().toISOString(),\n        trucksProcessed: result.trucksProcessed,\n        newTrucksFound: result.newTrucksFound,\n        errorsCount: result.errors?.length ?? 0,\n      },\n    });\n\n    console.info('Automated scraping job completed successfully');\n\n    return NextResponse.json({\n      success: true,\n      message: 'Auto-scraping completed successfully',\n      data: {\n        trucksProcessed: result.trucksProcessed,\n        newTrucksFound: result.newTrucksFound,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    console.error('Auto-scraping cron job failed:', error);\n\n    // Log the error\n    logActivity({\n      type: 'cron_job',\n      action: 'auto_scrape_failed',\n      details: {\n        timestamp: new Date().toISOString(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      },\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Auto-scraping failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    );\n  }\n}\n\n// Only allow POST requests for cron jobs\nexport function GET() {\n  return NextResponse.json(\n    { error: 'Method not allowed. Use POST for cron jobs.' },\n    { status: 405 },\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/cron/quality-check/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'POST' has too many lines (71). Maximum allowed is 50.","line":17,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":87,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'performDataQualityCheck' has too many lines (57). Maximum allowed is 50.","line":89,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":145,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { logActivity } from '@/lib/activityLogger';\nimport { DataQualityService, FoodTruckService } from '@/lib/supabase';\n\n// Type definitions for quality assessment\ninterface QualityAssessment {\n  score: number;\n  issues: unknown[];\n}\n\ninterface QualityService {\n  calculateQualityScore: (truck: unknown) => QualityAssessment;\n  categorizeQualityScore: (score: number) => string;\n  batchUpdateQualityScores: (limit: number) => Promise<unknown>;\n}\n\nexport function POST(request: NextRequest) {\n  try {\n    // Verify cron secret for security\n    const authHeader = request.headers.get('authorization');\n    const cronSecret = process.env.CRON_SECRET;\n\n    if (cronSecret === undefined) {\n      console.error('CRON_SECRET not configured');\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n\n    if (authHeader !== `Bearer ${cronSecret}`) {\n      console.error('Unauthorized cron attempt:', authHeader);\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    console.info('Starting daily data quality check...');\n\n    // Log the start of the quality check\n    logActivity({\n      type: 'cron_job',\n      action: 'quality_check_started',\n      details: { timestamp: new Date().toISOString() },\n    });\n\n    // Perform data quality checks using SOTA algorithm\n    const qualityResults = await performDataQualityCheck();\n\n    // Log completion with results\n    logActivity({\n      type: 'cron_job',\n      action: 'quality_check_completed',\n      details: {\n        logTimestamp: new Date().toISOString(),\n        ...qualityResults,\n      },\n    });\n\n    console.info('Data quality check completed successfully');\n\n    return NextResponse.json({\n      success: true,\n      message: 'Quality check completed successfully',\n      data: {\n        ...qualityResults,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    console.error('Quality check cron job failed:', error);\n\n    // Log the error\n    logActivity({\n      type: 'cron_job',\n      action: 'quality_check_failed',\n      details: {\n        timestamp: new Date().toISOString(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      },\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Quality check failed',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    );\n  }\n}\n\nasync function performDataQualityCheck() {\n  try {\n    // Get all trucks for quality assessment\n    const { trucks, total } = await FoodTruckService.getAllTrucks(1000, 0);\n\n    let trucksWithMissingData = 0;\n    let lowQualityTrucks = 0;\n    let totalQualityScore = 0;\n    let staleDataCount = 0;\n    const qualityBreakdown = { high: 0, medium: 0, low: 0 };\n\n    // Assess each truck using SOTA algorithm\n    for (const truck of trucks) {\n      const assessment = (DataQualityService as QualityService).calculateQualityScore(truck);\n      totalQualityScore += assessment.score;\n\n      const category = (DataQualityService as QualityService).categorizeQualityScore(assessment.score);\n      (qualityBreakdown as Record<string, number>)[category]++;\n\n      if (assessment.issues.length > 0) {\n        trucksWithMissingData++;\n      }\n\n      if (assessment.score < 0.6) {\n        lowQualityTrucks++;\n      }\n\n      // Check for stale data (location timestamp > 7 days old)\n      if (truck.current_location?.timestamp) {\n        const locationAge = Date.now() - new Date(truck.current_location.timestamp).getTime();\n        const daysSinceUpdate = locationAge / (1000 * 60 * 60 * 24);\n        if (daysSinceUpdate > 7) {\n          staleDataCount++;\n        }\n      }\n    }\n\n    const averageQualityScore = trucks.length > 0 ? totalQualityScore / trucks.length : 0;\n\n    // Update quality scores for trucks that need it (batch update)\n    const updateResults = await (DataQualityService as QualityService).batchUpdateQualityScores(100);\n\n    return {\n      totalTrucks: total,\n      trucksWithMissingData,\n      lowQualityTrucks,\n      staleDataCount,\n      averageQualityScore: Math.round(averageQualityScore * 100) / 100,\n      qualityBreakdown,\n      updateResults,\n      timestamp: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Error performing data quality check:', error);\n    throw error;\n  }\n}\n\n// Only allow POST requests for cron jobs\nexport function GET() {\n  return NextResponse.json(\n    { error: 'Method not allowed. Use POST for cron jobs.' },\n    { status: 405 },\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/dashboard/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'GET' has too many lines (61). Maximum allowed is 50.","line":9,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":69,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type NextRequest, NextResponse } from 'next/server';\nimport {\n  FoodTruckService,\n  ScrapingJobService,\n  DataProcessingService,\n  APIUsageService,\n} from '@/lib/supabase';\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const section = searchParams.get('section');\n\n  try {\n    switch (section) {\n      case 'overview': {\n        return NextResponse.json(await getDashboardOverview());\n      }\n\n      case 'scraping': {\n        return NextResponse.json(await getScrapingStatus());\n      }\n\n      case 'processing': {\n        return NextResponse.json(await getProcessingStatus());\n      }\n\n      case 'quality': {\n        return NextResponse.json(await getDataQualityStatus());\n      }\n\n      case 'usage': {\n        return NextResponse.json(await getAPIUsageStatus());\n      }\n\n      default: {\n        // Return complete dashboard data with error handling\n        const [overview, scraping, processing, quality, usage] = await Promise.allSettled([\n          getDashboardOverview(),\n          getScrapingStatus(),\n          getProcessingStatus(),\n          getDataQualityStatus(),\n          getAPIUsageStatus(),\n        ]);\n\n        return NextResponse.json({\n          overview: overview.status === 'fulfilled' ? overview.value : getDefaultOverview(),\n          scraping: scraping.status === 'fulfilled' ? scraping.value : getDefaultScraping(),\n          processing: processing.status === 'fulfilled' ? processing.value : getDefaultProcessing(),\n          quality: quality.status === 'fulfilled' ? quality.value : getDefaultQuality(),\n          usage: usage.status === 'fulfilled' ? usage.value : getDefaultUsage(),\n          timestamp: new Date().toISOString(),\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Dashboard API error:', error);\n\n    // Return fallback data instead of error\n    return NextResponse.json({\n      overview: getDefaultOverview(),\n      scraping: getDefaultScraping(),\n      processing: getDefaultProcessing(),\n      quality: getDefaultQuality(),\n      usage: getDefaultUsage(),\n      timestamp: new Date().toISOString(),\n      error: 'Some data may be unavailable',\n    });\n  }\n}\n\nasync function getDashboardOverview() {\n  try {\n    const { trucks, total } = await FoodTruckService.getAllTrucks(10, 0);\n    const qualityStats = await FoodTruckService.getDataQualityStats();\n\n    return {\n      totalTrucks: total,\n      recentTrucks: trucks.slice(0, 5).map((truck) => ({\n        id: truck.id,\n        name: truck.name,\n        location: truck.current_location ?? { address: 'Unknown location' },\n        operating_hours: truck.operating_hours ?? {},\n        menu: truck.menu ?? [],\n        contact: truck.contact_info ?? {},\n        last_updated: truck.updated_at,\n        data_quality_score: truck.data_quality_score ?? 0,\n      })),\n      averageQuality: qualityStats.avg_quality_score,\n      verifiedTrucks: qualityStats.verified_count,\n      pendingTrucks: qualityStats.pending_count,\n      lastUpdated: new Date().toISOString(),\n    };\n  } catch (error) {\n    console.error('Error getting dashboard overview:', error);\n    return getDefaultOverview();\n  }\n}\n\nasync function getScrapingStatus() {\n  try {\n    const [pendingJobs, runningJobs, completedJobs, failedJobs] = await Promise.all([\n      ScrapingJobService.getJobsByStatus('pending'),\n      ScrapingJobService.getJobsByStatus('running'),\n      ScrapingJobService.getJobsByStatus('completed'),\n      ScrapingJobService.getJobsByStatus('failed'),\n    ]);\n\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\n    const recentCompleted = completedJobs.filter(\n      (job) => job.completed_at != undefined && job.completed_at > yesterday,\n    );\n    const recentFailed = failedJobs.filter((job) => job.created_at > yesterday);\n    const totalRecent = recentCompleted.length + recentFailed.length;\n\n    return {\n      pending: pendingJobs.length,\n      running: runningJobs.length,\n      completedToday: recentCompleted.length,\n      failedToday: recentFailed.length,\n      recentJobs: [...recentCompleted, ...recentFailed].slice(0, 10),\n      successRate: totalRecent > 0 ? (recentCompleted.length / totalRecent) * 100 : 0,\n    };\n  } catch (error) {\n    console.error('Error getting scraping status:', error);\n    return getDefaultScraping();\n  }\n}\n\nasync function getProcessingStatus() {\n  try {\n    const [pendingQueue, processingQueue, completedQueue, failedQueue] = await Promise.all([\n      DataProcessingService.getQueueByStatus('pending'),\n      DataProcessingService.getQueueByStatus('processing'),\n      DataProcessingService.getQueueByStatus('completed'),\n      DataProcessingService.getQueueByStatus('failed'),\n    ]);\n\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\n\n    return {\n      pending: pendingQueue.length,\n      processing: processingQueue.length,\n      completedToday: completedQueue.filter(\n        (item) => item.processed_at != undefined && item.processed_at > yesterday,\n      ).length,\n      failedToday: failedQueue.filter((item) => item.created_at > yesterday).length,\n      totalTokensUsed: completedQueue.reduce(\n        (sum, item) => sum + (item.gemini_tokens_used ?? 0),\n        0,\n      ),\n    };\n  } catch (error) {\n    console.error('Error getting processing status:', error);\n    return getDefaultProcessing();\n  }\n}\n\nasync function getDataQualityStatus() {\n  try {\n    const qualityStats = await FoodTruckService.getDataQualityStats();\n    return qualityStats;\n  } catch (error) {\n    console.error('Error getting data quality status:', error);\n    return getDefaultQuality();\n  }\n}\n\nasync function getAPIUsageStatus() {\n  try {\n    const [geminiUsage, firecrawlUsage, allUsage] = await Promise.all([\n      APIUsageService.getTodayUsage('gemini'),\n      APIUsageService.getTodayUsage('firecrawl'),\n      APIUsageService.getAllUsageStats(),\n    ]);\n\n    const geminiLimits = { requests: 1500, tokens: 32_000 };\n    const firecrawlLimits = { requests: 500, tokens: 0 };\n\n    return {\n      gemini: {\n        requests: {\n          used: geminiUsage?.requests_count ?? 0,\n          limit: geminiLimits.requests,\n          remaining: geminiLimits.requests - (geminiUsage?.requests_count ?? 0),\n          percentage: ((geminiUsage?.requests_count ?? 0) / geminiLimits.requests) * 100,\n        },\n        tokens: {\n          used: geminiUsage?.tokens_used ?? 0,\n          limit: geminiLimits.tokens,\n          remaining: geminiLimits.tokens - (geminiUsage?.tokens_used ?? 0),\n          percentage: ((geminiUsage?.tokens_used ?? 0) / geminiLimits.tokens) * 100,\n        },\n      },\n      firecrawl: {\n        requests: {\n          used: firecrawlUsage?.requests_count ?? 0,\n          limit: firecrawlLimits.requests,\n          remaining: firecrawlLimits.requests - (firecrawlUsage?.requests_count ?? 0),\n          percentage: ((firecrawlUsage?.requests_count ?? 0) / firecrawlLimits.requests) * 100,\n        },\n      },\n      history: allUsage.slice(0, 7),\n    };\n  } catch (error) {\n    console.error('Error getting API usage status:', error);\n    return getDefaultUsage();\n  }\n}\n\n// Default fallback data\nfunction getDefaultOverview() {\n  return {\n    totalTrucks: 0,\n    recentTrucks: [],\n    averageQuality: 0,\n    verifiedTrucks: 0,\n    pendingTrucks: 0,\n    lastUpdated: new Date().toISOString(),\n  };\n}\n\nfunction getDefaultScraping() {\n  return {\n    pending: 0,\n    running: 0,\n    completedToday: 0,\n    failedToday: 0,\n    recentJobs: [],\n    successRate: 0,\n  };\n}\n\nfunction getDefaultProcessing() {\n  return {\n    pending: 0,\n    processing: 0,\n    completedToday: 0,\n    failedToday: 0,\n    totalTokensUsed: 0,\n  };\n}\n\nfunction getDefaultQuality() {\n  return {\n    total_trucks: 0,\n    avg_quality_score: 0,\n    high_quality_count: 0,\n    medium_quality_count: 0,\n    low_quality_count: 0,\n    verified_count: 0,\n    pending_count: 0,\n    flagged_count: 0,\n  };\n}\n\nfunction getDefaultUsage() {\n  return {\n    gemini: {\n      requests: { used: 0, limit: 1500, remaining: 1500, percentage: 0 },\n      tokens: { used: 0, limit: 32_000, remaining: 32_000, percentage: 0 },\n    },\n    firecrawl: {\n      requests: { used: 0, limit: 500, remaining: 500, percentage: 0 },\n    },\n    history: [],\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/enhanced-pipeline/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/firecrawl/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'POST' has too many lines (59). Maximum allowed is 50.","line":93,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":151,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/firecrawl/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { firecrawl } from '@/lib/firecrawl';\n\ninterface FirecrawlRequestBody {\n  operation: string;\n  url?: string;\n  query?: string;\n  options?: Record<string, unknown>;\n}\n\n// Helper function to handle scrape operation\nasync function handleScrapeOperation(url: string, options: Record<string, unknown>) {\n  const scrapeResult = await firecrawl.scrapeUrl(url, {\n    formats: ['markdown', 'html'],\n    onlyMainContent: true,\n    ...options,\n  });\n\n  return NextResponse.json({\n    success: scrapeResult.success,\n    data: scrapeResult.success ? [scrapeResult.data] : undefined,\n    error: scrapeResult.error,\n  });\n}\n\n// Helper function to poll crawl status\nasync function pollCrawlStatus(jobId: string): Promise<NextResponse> {\n  let attempts = 0;\n  const maxAttempts = 30; // 5 minutes max\n  const pollInterval = 10_000; // 10 seconds\n\n  while (attempts < maxAttempts) {\n    await new Promise((resolve) => setTimeout(resolve, pollInterval));\n\n    const status = await firecrawl.getCrawlStatus(jobId);\n    if (status.success && status.status === 'completed' && status.data) {\n      return NextResponse.json({\n        success: true,\n        data: status.data,\n      });\n    } else if (status.success && status.status === 'failed') {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Crawl job failed',\n        },\n        { status: 500 },\n      );\n    }\n\n    attempts++;\n  }\n\n  // Timeout\n  return NextResponse.json(\n    {\n      success: false,\n      error: 'Crawl job timed out',\n    },\n    { status: 408 },\n  );\n}\n\n// Helper function to handle crawl operation\nasync function handleCrawlOperation(url: string, options: Record<string, unknown>) {\n  const crawlJob = await firecrawl.crawlWebsite(url, {\n    crawlerOptions: {\n      maxDepth: (options.maxDepth as number) || 2,\n      limit: (options.limit as number) || 20,\n      includes: options.includes as string[] | undefined,\n      excludes: options.excludes as string[] | undefined,\n    },\n    pageOptions: {\n      formats: ['markdown'],\n      onlyMainContent: true,\n    },\n  });\n\n  if (!crawlJob.success || crawlJob.jobId == undefined) {\n    return NextResponse.json(\n      {\n        success: false,\n        error: crawlJob.error ?? 'Failed to start crawl job',\n      },\n      { status: 500 },\n    );\n  }\n\n  return pollCrawlStatus(crawlJob.jobId);\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = (await request.json()) as FirecrawlRequestBody;\n    const { operation, url, options = {} } = body;\n\n    switch (operation) {\n      case 'search': {\n        // Note: Firecrawl doesn't have a direct search API, but we can simulate it\n        // by scraping search engine results or known directories\n        return NextResponse.json(\n          {\n            success: false,\n            error:\n              'Search operation not directly supported by Firecrawl API. Use crawl on directory URLs instead.',\n          },\n          { status: 400 },\n        );\n      }\n\n      case 'scrape': {\n        if (url == undefined) {\n          return NextResponse.json(\n            { success: false, error: 'URL is required for scrape operation' },\n            { status: 400 },\n          );\n        }\n\n        return handleScrapeOperation(url, options);\n      }\n\n      case 'crawl': {\n        if (url == undefined) {\n          return NextResponse.json(\n            { success: false, error: 'URL is required for crawl operation' },\n            { status: 400 },\n          );\n        }\n\n        return handleCrawlOperation(url, options);\n      }\n\n      default: {\n        return NextResponse.json(\n          { success: false, error: `Unknown operation: ${operation}` },\n          { status: 400 },\n        );\n      }\n    }\n  } catch (error) {\n    console.error('Firecrawl API error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Internal server error',\n      },\n      { status: 500 },\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const jobId = searchParams.get('jobId');\n\n  if (jobId == undefined) {\n    return NextResponse.json({ success: false, error: 'Job ID is required' }, { status: 400 });\n  }\n  try {\n    const status = await firecrawl.getCrawlStatus(jobId);\n    return NextResponse.json(status);\n  } catch (error) {\n    console.error('Error getting crawl status:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to get crawl status',\n      },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/gemini/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/monitoring/api-usage/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'GET' has too many lines (62). Maximum allowed is 50.","line":10,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":71,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'POST' has too many lines (62). Maximum allowed is 50.","line":73,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":134,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":39,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":39,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":41,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":41,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":43,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":43,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":76,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":76,"endColumn":38,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":78,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":78,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":40,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\nimport { NextRequest, NextResponse } from 'next/server';\nimport { APIMonitor, type APIService } from '@/lib/monitoring/apiMonitor';\n\n/**\n * API Usage Monitoring Endpoint\n * Provides real-time API usage monitoring and alerting\n */\n\nexport function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const service = searchParams.get('service') as APIService | null;\n    const action = searchParams.get('action');\n\n    // Get comprehensive monitoring data\n    if (!service) {\n      const monitoringResult = APIMonitor.checkAllAPIs();\n      \n      return NextResponse.json({\n        success: true,\n        data: monitoringResult,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Service-specific monitoring\n    if (action === 'check') {\n      const requestCount = Number.parseInt(searchParams.get('requests') ?? '1', 10);\n      const tokenCount = Number.parseInt(searchParams.get('tokens') ?? '0', 10);\n      \n      const canMakeRequest = APIMonitor.canMakeRequest(service, requestCount, tokenCount);\n      const usage = APIMonitor.getCurrentUsage(service);\n      \n      return NextResponse.json({\n        success: true,\n        service,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        canMakeRequest: canMakeRequest.allowed,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        reason: canMakeRequest.reason,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        waitTime: canMakeRequest.waitTime,\n        usage,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Get usage for specific service\n    const usage = APIMonitor.getCurrentUsage(service);\n    \n    return NextResponse.json({\n      success: true,\n      service,\n      usage,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n     \n    console.error('API monitoring error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to get API monitoring data',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const body = await request.json();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { action } = body;\n\n    switch (action) {\n      case 'clear-alerts': {\n        APIMonitor.clearAlertHistory();\n        return NextResponse.json({\n          success: true,\n          message: 'Alert history cleared'\n        });\n      }\n\n      case 'get-alerts': {\n        const alerts = APIMonitor.getAlertHistory();\n        return NextResponse.json({\n          success: true,\n          alerts,\n          count: alerts.length\n        });\n      }\n\n      case 'test-alert': {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const { service, level } = body;\n        if (service == undefined || level == undefined) {\n          return NextResponse.json(\n            { success: false, error: 'Missing service or level' },\n            { status: 400 }\n          );\n        }\n\n        // This would trigger a test alert in a real implementation\n        return NextResponse.json({\n          success: true,\n          message: `Test alert triggered for ${service} at ${level} level`\n        });\n      }\n\n      default: {\n        return NextResponse.json(\n          { success: false, error: `Unknown action: ${action}` },\n          { status: 400 }\n        );\n      }\n    }\n  } catch (error) {\n     \n    console.error('API monitoring POST error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to process monitoring request',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/pipeline/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'POST' has too many lines (78). Maximum allowed is 50.","line":25,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":102,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/pipeline/route.ts\n// Unified Pipeline API - Consolidates all pipeline functionality\n\n// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\nimport { type NextRequest, NextResponse } from 'next/server';\nimport { ScrapingJobService } from '@/lib/supabase';\nimport { pipelineManager, type PipelineConfig } from '@/lib/pipelineManager';\n\ninterface PipelineRequestBody {\n  action?: 'discovery' | 'processing' | 'full' | 'maintenance';\n  target_url?: string;\n  config?: {\n    maxUrls?: number;\n    maxUrlsToProcess?: number;\n    targetCities?: string[];\n    priority?: number;\n    skipDiscovery?: boolean;\n    retryFailedJobs?: boolean;\n  };\n  // Legacy support\n  job_type?: string;\n  priority?: number;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = (await request.json()) as PipelineRequestBody;\n\n    // Handle legacy single URL scraping\n    if (body.target_url != undefined && body.action == undefined) {\n      const { target_url, job_type = 'website_scrape', priority = 1 } = body;\n\n      if (target_url == undefined || target_url === '') {\n        return NextResponse.json({ error: 'target_url is required' }, { status: 400 });\n      }\n\n      // Basic URL validation\n      try {\n        new URL(target_url);\n      } catch {\n        return NextResponse.json({ error: 'Invalid target_url format' }, { status: 400 });\n      }\n\n      // Create a scraping job using the centralized service\n      const job = await ScrapingJobService.createJob({\n        target_url,\n        job_type,\n        priority,\n        scheduled_at: new Date().toISOString(),\n      });\n\n      if (job == undefined) {\n        return NextResponse.json({ error: 'Failed to create scraping job' }, { status: 500 });\n      }\n\n      return NextResponse.json({\n        message: 'Scraping job created (legacy mode)',\n        job_id: job.id,\n        target_url,\n        note: 'Consider using the new unified pipeline API with action parameter',\n      });\n    }\n\n    // Handle unified pipeline requests\n    const { action = 'full', config = {} } = body;\n\n    const pipelineConfig: PipelineConfig = {\n      type: action,\n      params: {\n        maxUrls: config.maxUrls ?? 50,\n        maxUrlsToProcess: config.maxUrlsToProcess ?? 20,\n        targetCities: config.targetCities ?? ['Charleston', 'Columbia', 'Greenville'],\n        priority: config.priority ?? 5,\n        skipDiscovery: config.skipDiscovery ?? false,\n        retryFailedJobs: config.retryFailedJobs ?? false,\n      },\n    };\n\n    console.info(`🚀 Pipeline API: Starting ${action} pipeline with config:`, pipelineConfig);\n\n    const result = await pipelineManager.runPipeline(pipelineConfig);\n\n    return NextResponse.json({\n      success: result.success,\n      action,\n      result,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error: unknown) {\n    console.error('Pipeline API error:', error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown pipeline error';\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Pipeline processing failed',\n        details: errorMessage,\n      },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/scheduler/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'GET' has too many lines (69). Maximum allowed is 50.","line":88,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":156,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'POST' has too many lines (72). Maximum allowed is 50.","line":158,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":229,"endColumn":2}],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":205,"column":13,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":205,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\nimport { type NextRequest, NextResponse } from 'next/server';\n\n// Mock scheduler instance and tasks\ninterface SchedulerTask {\n  id: string;\n  name: string;\n  enabled: boolean;\n  intervalMinutes: number;\n  lastRun: string;\n  lastSuccess: string;\n  successCount: number;\n  errorCount: number;\n  nextRun: string | undefined;\n  lastError?: string;\n}\n\ninterface PostRequestBody {\n  action: 'start' | 'stop' | 'execute';\n  taskId?: string;\n}\n\ninterface PutRequestBody {\n  taskId: string;\n  config: Partial<SchedulerTask>;\n}\n\nlet schedulerInstance: { started: string } | undefined;\nconst schedulerTasks: SchedulerTask[] = [\n  {\n    id: 'instagram_scrape',\n    name: 'Instagram Data Scraping',\n    enabled: true,\n    intervalMinutes: 120,\n    lastRun: new Date(Date.now() - 1_800_000).toISOString(),\n    lastSuccess: new Date(Date.now() - 1_800_000).toISOString(),\n    successCount: 45,\n    errorCount: 3,\n    nextRun: new Date(Date.now() + 5_400_000).toISOString(),\n  },\n  {\n    id: 'website_crawl',\n    name: 'Website Crawling',\n    enabled: true,\n    intervalMinutes: 360,\n    lastRun: new Date(Date.now() - 7_200_000).toISOString(),\n    lastSuccess: new Date(Date.now() - 7_200_000).toISOString(),\n    successCount: 23,\n    errorCount: 1,\n    nextRun: new Date(Date.now() + 14_400_000).toISOString(),\n  },\n  {\n    id: 'data_quality_check',\n    name: 'Data Quality Assessment',\n    enabled: true,\n    intervalMinutes: 720,\n    lastRun: new Date(Date.now() - 21_600_000).toISOString(),\n    lastSuccess: new Date(Date.now() - 21_600_000).toISOString(),\n    successCount: 12,\n    errorCount: 0,\n    nextRun: new Date(Date.now() + 21_600_000).toISOString(),\n  },\n  {\n    id: 'gemini_processing',\n    name: 'AI Data Processing',\n    enabled: false,\n    intervalMinutes: 480,\n    lastRun: new Date(Date.now() - 28_800_000).toISOString(),\n    lastSuccess: new Date(Date.now() - 28_800_000).toISOString(),\n    successCount: 8,\n    errorCount: 2,\n    lastError: 'Rate limit exceeded',\n    nextRun: undefined,\n  },\n  {\n    id: 'location_update',\n    name: 'Real-time Location Updates',\n    enabled: true,\n    intervalMinutes: 30,\n    lastRun: new Date(Date.now() - 900_000).toISOString(),\n    lastSuccess: new Date(Date.now() - 900_000).toISOString(),\n    successCount: 156,\n    errorCount: 8,\n    nextRun: new Date(Date.now() + 900_000).toISOString(),\n  },\n];\n\nexport function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const action = searchParams.get('action');\n\n  try {\n    switch (action) {\n      case 'status': {\n        return NextResponse.json({\n          isRunning: schedulerInstance !== undefined,\n          tasks: schedulerTasks,\n          summary: {\n            totalTasks: schedulerTasks.length,\n            enabledTasks: schedulerTasks.filter((t) => t.enabled).length,\n            runningTasks: schedulerTasks.filter((t) => t.enabled && t.nextRun !== undefined).length,\n            totalSuccesses: schedulerTasks.reduce((acc, t) => acc + t.successCount, 0),\n            totalErrors: schedulerTasks.reduce((acc, t) => acc + t.errorCount, 0),\n          },\n        });\n      }\n\n      case 'logs': {\n        // Return recent task execution logs\n        return NextResponse.json({\n          logs: [\n            {\n              timestamp: new Date(Date.now() - 300_000).toISOString(),\n              taskId: 'location_update',\n              level: 'info',\n              message: 'Successfully updated locations for 12 food trucks',\n            },\n            {\n              timestamp: new Date(Date.now() - 900_000).toISOString(),\n              taskId: 'instagram_scrape',\n              level: 'info',\n              message: 'Scraped 3 Instagram accounts, found 8 new posts',\n            },\n            {\n              timestamp: new Date(Date.now() - 1_800_000).toISOString(),\n              taskId: 'gemini_processing',\n              level: 'error',\n              message: 'Rate limit exceeded, skipping AI processing',\n            },\n            {\n              timestamp: new Date(Date.now() - 3_600_000).toISOString(),\n              taskId: 'website_crawl',\n              level: 'warning',\n              message: 'Failed to crawl tacoparadise.com - site temporarily unavailable',\n            },\n          ],\n        });\n      }\n\n      default: {\n        return NextResponse.json({\n          message: 'Task Scheduler API',\n          endpoints: [\n            'GET /api/scheduler?action=status - Get scheduler status',\n            'GET /api/scheduler?action=logs - Get execution logs',\n            'POST /api/scheduler - Start/stop scheduler or execute task',\n            'PUT /api/scheduler - Update task configuration',\n          ],\n        });\n      }\n    }\n  } catch (error: unknown) {\n    console.error('Scheduler API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = (await request.json()) as PostRequestBody;\n    const { action, taskId } = body;\n\n    switch (action) {\n      case 'start': {\n        if (schedulerInstance) {\n          return NextResponse.json({ error: 'Scheduler is already running' }, { status: 409 });\n        }\n\n        schedulerInstance = { started: new Date().toISOString() };\n\n        return NextResponse.json({\n          message: 'Scheduler started successfully',\n          status: 'running',\n        });\n      }\n\n      case 'stop': {\n        if (!schedulerInstance) {\n          return NextResponse.json({ error: 'Scheduler is not running' }, { status: 409 });\n        }\n\n        schedulerInstance = undefined;\n\n        return NextResponse.json({\n          message: 'Scheduler stopped successfully',\n          status: 'stopped',\n        });\n      }\n\n      case 'execute': {\n        if (taskId === undefined || taskId === '') {\n          return NextResponse.json({ error: 'Task ID is required for execution' }, { status: 400 });\n        }\n\n        const task = schedulerTasks.find((t) => t.id === taskId);\n        if (!task) {\n          return NextResponse.json({ error: 'Task not found' }, { status: 404 });\n        }\n\n        // Simulate task execution\n        task.lastRun = new Date().toISOString();\n\n        // Simulate success/failure\n        // eslint-disable-next-line sonarjs/pseudo-random\n        if (Math.random() > 0.1) {\n          // 90% success rate\n          task.lastSuccess = task.lastRun;\n          task.successCount++;\n          task.lastError = undefined;\n        } else {\n          task.errorCount++;\n          task.lastError = 'Simulated execution error';\n        }\n\n        return NextResponse.json({\n          message: `Task ${taskId} executed`,\n          task: task,\n        });\n      }\n\n      default: {\n        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });\n      }\n    }\n  } catch (error: unknown) {\n    console.error('Error in scheduler POST:', error);\n    return NextResponse.json({ error: 'Failed to process request' }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = (await request.json()) as PutRequestBody;\n    const { taskId, config } = body;\n\n    if (!taskId) {\n      return NextResponse.json({ error: 'Task ID is required' }, { status: 400 });\n    }\n\n    const taskIndex = schedulerTasks.findIndex((t) => t.id === taskId);\n    if (taskIndex === -1) {\n      return NextResponse.json({ error: 'Task not found' }, { status: 404 });\n    }\n\n    // Update task configuration\n    schedulerTasks[taskIndex] = {\n      ...schedulerTasks[taskIndex],\n      ...config,\n    };\n\n    // Update next run time if interval changed\n    if (config.intervalMinutes !== undefined && config.intervalMinutes > 0 && schedulerTasks[taskIndex].enabled) {\n      const lastRun = new Date(schedulerTasks[taskIndex].lastRun ?? Date.now());\n      const nextRun = new Date(lastRun.getTime() + config.intervalMinutes * 60 * 1000);\n      schedulerTasks[taskIndex].nextRun = nextRun.toISOString();\n    }\n\n    return NextResponse.json({\n      message: 'Task configuration updated',\n      task: schedulerTasks[taskIndex],\n    });\n  } catch (error: unknown) {\n    console.error('Error updating task configuration:', error);\n    return NextResponse.json({ error: 'Failed to update task configuration' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/scrape/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/search/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'GET' has too many lines (95). Maximum allowed is 50.","line":5,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":99,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type NextRequest, NextResponse } from 'next/server';\nimport { CachedFoodTruckService } from '@/lib/performance/databaseCache';\nimport { MenuCategory, MenuItem, OperatingHours, type FoodTruck } from '@/lib/types';\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const query = searchParams.get('q');\n  const cuisine = searchParams.get('cuisine');\n  const openNow = searchParams.get('openNow') === 'true';\n  const lat = searchParams.get('lat');\n  const lng = searchParams.get('lng');\n  const radius = searchParams.get('radius') ?? '10';\n\n  try {\n    let trucks: FoodTruck[] = [];\n\n    // Get trucks by location if coordinates provided\n    if (lat != undefined && lng != undefined) {\n      const userLat = Number.parseFloat(lat);\n      const userLng = Number.parseFloat(lng);\n      const radiusKm = Number.parseFloat(radius);\n      trucks = await CachedFoodTruckService.getTrucksByLocationCached(userLat, userLng, radiusKm);\n    } else {\n      // Get all trucks\n      const result = await CachedFoodTruckService.getAllTrucksCached();\n      trucks = result.trucks;\n    }\n\n    // Apply filters\n    let filteredTrucks = trucks;\n\n    // Text search filter\n    if (query != undefined && query !== '') {\n      filteredTrucks = filteredTrucks.filter(\n        (truck: FoodTruck) => truck.name.toLowerCase().includes(query.toLowerCase()) ||\n        truck.description?.toLowerCase().includes(query.toLowerCase()) ??\n        truck.menu?.some((category: MenuCategory) =>\n          category.items?.some(\n            (item: MenuItem) =>\n              item.name.toLowerCase().includes(query.toLowerCase()) ??\n              (item.description?.toLowerCase().includes(query.toLowerCase()) ?? false),\n          ) ?? false,\n        ) ?? false,\n      );\n    }\n\n    // Cuisine filter\n    if (cuisine != undefined && cuisine != '') {\n      filteredTrucks = filteredTrucks.filter((truck: FoodTruck) => truck.menu?.some((category: MenuCategory) =>\n        category.name.toLowerCase().includes(cuisine.toLowerCase()),\n      ),\n      );\n    }\n\n    // Open now filter\n    if (openNow === true) {\n      const now = new Date();\n      const daysOfWeek: Array<keyof OperatingHours> = [\n        'sunday',\n        'monday',\n        'tuesday',\n        'wednesday',\n        'thursday',\n        'friday',\n        'saturday',\n      ];\n      const currentDay = daysOfWeek[now.getDay()];\n      const currentTime = now.getHours() * 100 + now.getMinutes();\n\n      filteredTrucks = filteredTrucks.filter((truck: FoodTruck) => {\n        const hours = truck.operating_hours?.[currentDay];\n        if (!hours || hours.closed) return false;\n\n        const openTime = Number.parseInt(hours.open.replace(':', ''));\n        const closeTime = Number.parseInt(hours.close.replace(':', ''));\n        return currentTime >= openTime && currentTime <= closeTime;\n      });\n    }\n\n    // Sort by data quality score\n    filteredTrucks.sort((a: FoodTruck, b: FoodTruck) => (b.data_quality_score ?? 0) - (a.data_quality_score ?? 0));\n\n    return NextResponse.json({\n      trucks: filteredTrucks,\n      total: filteredTrucks.length,\n      filters: {\n        query,\n        cuisine,\n        openNow,\n        location:\n          lat != undefined && lng != undefined ? { lat: Number.parseFloat(lat), lng: Number.parseFloat(lng) } : undefined,\n        radius: Number.parseFloat(radius),\n      },\n    });\n  } catch (error) {\n    console.error('Search error:', error);\n    return NextResponse.json({ error: 'Search failed' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/tavily/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'performTavilySearch' has too many lines (58). Maximum allowed is 50.","line":67,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":124,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/tavily/route.ts\n// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\nimport { NextRequest, NextResponse } from 'next/server';\n\ninterface TavilyRequestBody {\n  operation: string;\n  params: Record<string, unknown>;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = (await request.json()) as TavilyRequestBody;\n    const { operation, params } = body;\n\n    if (operation == undefined || params == undefined) {\n      return NextResponse.json({ error: 'Missing operation or params' }, { status: 400 });\n    }\n\n    let result;\n\n    switch (operation) {\n      case 'search': {\n        // Use Tavily MCP search tool through server-side execution\n        // This would be called from the discovery engine\n        result = performTavilySearch(params);\n        break;\n      }\n\n      case 'crawl': {\n        result = performTavilyCrawl(params);\n        break;\n      }\n\n      case 'map': {\n        result = performTavilyMap(params);\n        break;\n      }\n\n      default: {\n        return NextResponse.json({ error: `Unknown operation: ${operation}` }, { status: 400 });\n      }\n    }\n\n    return NextResponse.json({ success: true, data: result });\n  } catch (error) {\n    console.error('Tavily API error:', error);\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    );\n  }\n}\n\n// These functions would use the Tavily MCP tools\n// For now, they return mock data - in production these would be actual MCP calls\n\ninterface TavilyResult {\n  title: string;\n  url: string;\n  content: string;\n  raw_content: string;\n}\n\nfunction performTavilySearch(params: Record<string, unknown>) {\n  const apiKey = process.env.TAVILY_API_KEY;\n  if (apiKey === undefined || apiKey === '') {\n    console.warn('TAVILY_API_KEY not found, using mock data');\n    return {\n      results: [\n        {\n          title: 'South Carolina Food Trucks (Mock)',\n          url: 'https://example-foodtruck1.com',\n          content:\n            'Check out the best food trucks in South Carolina. Visit https://carolinabbq.com for amazing BBQ on wheels.',\n          raw_content: 'Carolina BBQ Food Truck serves authentic South Carolina barbecue...',\n        },\n        {\n          title: 'Charleston Mobile Food Directory (Mock)',\n          url: 'https://example-directory.com',\n          content:\n            'Directory of Charleston area food trucks including https://charlestontacos.com and https://lowcountryeats.com',\n          raw_content: 'Complete listing of mobile food vendors in the Charleston area...',\n        },\n      ],\n    };\n  }\n  try {\n    const response = await fetch('https://api.tavily.com/search', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        query: (params.query as string) ?? (params.q as string),\n        max_results: (params.limit as number) ?? 10,\n        search_depth: (params.search_depth as string) ?? 'advanced',\n        include_answer: true,\n        include_raw_content: true,\n      }),\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Tavily API error response:', errorText);\n      throw new Error(`Tavily API error: ${response.status} ${response.statusText} - ${errorText}`);\n    }\n    const data = (await response.json()) as { results?: TavilyResult[] };\n    return {\n      results:\n        data.results?.map((result: TavilyResult) => ({\n          title: result.title,\n          url: result.url,\n          content: result.content,\n          raw_content: result.raw_content,\n        })) ?? [],\n    };\n  } catch (error) {\n    console.error('Tavily API call failed:', error);\n    throw error;\n  }\n}\n\nfunction performTavilyCrawl(params: Record<string, unknown>) {\n  console.info('Mock Tavily crawl with params:', params);\n\n  return {\n    results: [\n      {\n        url: 'https://example-crawled-truck.com',\n        title: 'Gourmet Food Truck',\n        content: 'Premium mobile dining experience...',\n      },\n    ],\n  };\n}\n\nfunction performTavilyMap(params: Record<string, unknown>) {\n  console.info('Mock Tavily map with params:', params);\n\n  return {\n    results: ['https://foodtruckdirectory.com/truck1', 'https://foodtruckdirectory.com/truck2'],\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/test-integration/route.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":31,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":31,"endColumn":36,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1147,1386],"text":"type GeminiProcessorFullResult = GeminiResponse<GeminiProcessingResultData>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":62,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2050,2053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2050,2053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'testSupabaseOperations' has too many lines (61). Maximum allowed is 50.","line":85,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":145,"endColumn":2}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\nimport { type NextRequest, NextResponse } from 'next/server';\nimport { firecrawl } from '@/lib/firecrawl';\nimport { gemini } from '@/lib/gemini';\nimport { FoodTruckService, ScrapingJobService, DataProcessingService, type FoodTruck, type ScrapingJob, type DataProcessingQueue as DataProcessingQueueItem } from '@/lib/supabase'; // Assuming types can be imported\nimport type { MenuCategory, GeminiResponse } from '@/lib/types'; // Assuming MenuCategory is in types\n\n// Define interfaces for more specific typing\ninterface FirecrawlScrapeResultData {\n  markdown?: string;\n  html?: string;\n  metadata?: Record<string, unknown>;\n  is_fallback?: boolean;\n}\n\ninterface FirecrawlScrapeResult {\n  success: boolean;\n  result?: {\n    data?: FirecrawlScrapeResultData;\n    // Include other properties from firecrawl.scrapeUrl if necessary\n  };\n  error?: string;\n  details?: string;\n}\n\ninterface GeminiProcessingResultData {\n  categories: MenuCategory[];\n  // Add other fields if present in actual geminiResult.result.data\n}\n\ninterface GeminiProcessorFullResult extends GeminiResponse<GeminiProcessingResultData> {\n  // success, error, details are part of GeminiResponse\n  // data would be GeminiProcessingResultData\n  // tokensUsed is also part of GeminiResponse\n}\n\n\ninterface SupabaseOperationsResult {\n  testTruck: FoodTruck;\n  testJob: ScrapingJob;\n  queueItem: DataProcessingQueueItem;\n  nearbyTrucks: FoodTruck[];\n}\n\n\n// Helper function to test Firecrawl scraping\nasync function testFirecrawlScraping(testUrl: string): Promise<FirecrawlScrapeResult> {\n  console.info('Testing Firecrawl scraping...');\n  const scrapeResult = await firecrawl.scrapeUrl(testUrl, {\n    formats: ['markdown'],\n    onlyMainContent: true,\n  });\n\n  if (!scrapeResult.success) {\n    return {\n      success: false,\n      error: 'Firecrawl test failed',\n      details: scrapeResult.error,\n    };\n  }\n\n  return { success: true, result: scrapeResult as any }; // Cast to any for now if scrapeResult type is not fully defined from firecrawl\n}\n\n// Helper function to test Gemini processing\nasync function testGeminiProcessing(): Promise<GeminiProcessorFullResult> {\n  console.info('Testing Gemini processing...');\n  const testMenuText =\n    'Burgers: Classic Burger $12.99, Veggie Burger $11.99. Sides: Fries $4.99, Onion Rings $5.99';\n\n  const geminiResult = await gemini.processMenuData(testMenuText);\n\n  if (!geminiResult.success || !geminiResult.data) {\n    return {\n      success: false,\n      error: geminiResult.error ?? 'Gemini test failed',\n      details: geminiResult.details as string | undefined, // Cast if details is not always string\n    };\n  }\n  // Assuming gemini.processMenuData returns compatible structure\n  return { success: true, data: { categories: geminiResult.data }, tokensUsed: geminiResult.tokensUsed };\n}\n\n// Helper function to test Supabase operations\nasync function testSupabaseOperations(testUrl: string, geminiData: GeminiProcessingResultData | undefined): Promise<SupabaseOperationsResult> {\n  // Create a test food truck\n  const testTruck = await FoodTruckService.createTruck({\n    name: 'Test Food Truck',\n    description: 'Integration test truck',\n    current_location: {\n      lat: 37.7749,\n      lng: -122.4194,\n      address: 'San Francisco, CA',\n      timestamp: new Date().toISOString(),\n    },\n    scheduled_locations: [],\n    operating_hours: {\n      monday: { closed: true },\n      tuesday: { closed: true },\n      wednesday: { closed: true },\n      thursday: { closed: true },\n      friday: { closed: true },\n      saturday: { closed: true },\n      sunday: { closed: true },\n    },\n    menu: geminiData?.categories ?? [],\n    contact_info: { phone: '+1-555-TEST', email: undefined, website: undefined },\n    social_media: {\n      instagram: undefined,\n      facebook: undefined,\n      twitter: undefined,\n      tiktok: undefined,\n      yelp: undefined,\n    },\n    source_urls: [testUrl],\n    data_quality_score: 0.8,\n    verification_status: 'pending',\n  });\n\n  // Create a test scraping job\n  const testJob = await ScrapingJobService.createJob({\n    job_type: 'integration_test',\n    target_url: testUrl,\n    priority: 10,\n    scheduled_at: new Date().toISOString(),\n  });\n\n  // Add to processing queue\n  const queueItem = await DataProcessingService.addToQueue({\n    truck_id: testTruck.id,\n    processing_type: 'integration_test',\n    raw_data: { test: true },\n    priority: 10,\n  });\n\n  // Test geospatial query\n  const nearbyTrucks = await FoodTruckService.getTrucksByLocation(37.7749, -122.4194, 10);\n\n  return {\n    testTruck,\n    testJob,\n    queueItem,\n    nearbyTrucks,\n  };\n}\n\n// Helper function to format test results\nfunction formatTestResults(\n  scrapeResult: FirecrawlScrapeResult,\n  geminiResult: GeminiProcessorFullResult,\n  supabaseResults: SupabaseOperationsResult\n) {\n  return {\n    success: true,\n    message: 'Integration test completed successfully',\n    results: {\n      firecrawl: {\n        success: scrapeResult.success,\n        dataLength: scrapeResult.result?.data?.markdown?.length ?? 0,\n      },\n      gemini: {\n        success: geminiResult.success,\n        tokensUsed: geminiResult.tokensUsed ?? 0,\n        categoriesFound: geminiResult.data?.categories?.length ?? 0,\n      },\n      supabase: {\n        truckCreated: supabaseResults.testTruck.id,\n        jobCreated: supabaseResults.testJob.id,\n        queueItemCreated: supabaseResults.queueItem.id,\n        nearbyTrucksFound: supabaseResults.nearbyTrucks.length,\n      },\n    },\n    testData: {\n      truck: supabaseResults.testTruck,\n      processedMenu: geminiResult.data?.categories,\n      nearbyTrucks: supabaseResults.nearbyTrucks.slice(0, 3),\n    },\n  };\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = (await request.json()) as { testUrl?: string };\n    const { testUrl = 'https://example-food-truck.com' } = body;\n\n    console.info('Starting integration test...');\n\n    // Step 1: Test Firecrawl scraping\n    const firecrawlTest = await testFirecrawlScraping(testUrl);\n    if (!firecrawlTest.success) {\n      return NextResponse.json(firecrawlTest);\n    }\n\n    // Step 2: Test Gemini processing\n    const geminiTest = await testGeminiProcessing();\n    if (!geminiTest.success) {\n      return NextResponse.json(geminiTest);\n    }\n\n    // Step 3: Test Supabase operations\n    console.info('Testing Supabase operations...');\n    const supabaseResults = await testSupabaseOperations(testUrl, geminiTest.data);\n\n    // Step 4: Format and return results\n    const results = formatTestResults(firecrawlTest, geminiTest, supabaseResults);\n    return NextResponse.json(results);\n  } catch (error) {\n    console.error('Integration test failed:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Integration test failed',\n      details: error instanceof Error ? error.message : 'Unknown error',\n    });\n  }\n}\n\nexport function GET() {\n  return NextResponse.json({\n    message: 'Food Truck Integration Test API',\n    description: 'Tests the complete integration of Supabase, Firecrawl, and Gemini',\n    usage: \"POST /api/test-integration with optional { testUrl: 'https://example.com' }\",\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/test-pipeline-run/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'mapExtractedDataToTruckSchema' has too many lines (54). Maximum allowed is 50.","line":18,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":71,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'handleFirecrawlStage' has too many lines (58). Maximum allowed is 50.","line":73,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":130,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'POST' has too many lines (98). Maximum allowed is 50.","line":214,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":311,"endColumn":2}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\nimport { NextResponse, NextRequest } from 'next/server';\nimport { firecrawl } from '@/lib/firecrawl';\nimport { gemini } from '@/lib/gemini';\nimport { FoodTruckService } from '@/lib/supabase';\nimport {\n  ExtractedFoodTruckDetails,\n  FoodTruckSchema,\n  FirecrawlOutputData,\n  GeminiResponse,\n  StageResult,\n  MenuCategory,\n  MenuItem,\n} from '@/lib/types';\n\n// Helper function to simulate parts of createOrUpdateFoodTruck for dry runs or direct mapping display\n// This is a simplified version for testing; actual createOrUpdateFoodTruck handles job IDs etc.\nfunction mapExtractedDataToTruckSchema(\n  extractedData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n  isDryRun: boolean,\n): FoodTruckSchema {\n  if (extractedData == undefined || typeof extractedData !== 'object') {\n    throw new Error('Invalid extractedData for mapping.');\n  }\n\n  const name = extractedData.name ?? 'Unknown Test Truck';\n  const locationData = extractedData.current_location ?? {};\n  const fullAddress = [\n    locationData.address,\n    locationData.city,\n    locationData.state,\n    locationData.zip_code,\n  ]\n    .filter(Boolean)\n    .join(', ');\n\n  const truckData: FoodTruckSchema = {\n    name: name,\n    description: extractedData.description ?? undefined,\n    current_location: {\n      lat: locationData.lat ?? 0,\n      lng: locationData.lng ?? 0,\n      address: fullAddress ?? (locationData.raw_text ?? undefined),\n      timestamp: new Date().toISOString(),\n    },\n    scheduled_locations: extractedData.scheduled_locations ?? undefined,\n    operating_hours: extractedData.operating_hours ?? undefined,\n    menu: (extractedData.menu ?? []).map((category: MenuCategory) => ({\n      name: category.name ?? 'Uncategorized',\n      items: (category.items ?? []).map((item: MenuItem) => ({\n        name: item.name ?? 'Unknown Item',\n        description: item.description ?? undefined,\n        price:\n          typeof item.price === 'number' || typeof item.price === 'string' ? item.price : undefined,\n        dietary_tags: item.dietary_tags ?? [],\n      })),\n    })),\n    contact_info: extractedData.contact_info ?? undefined,\n    social_media: extractedData.social_media ?? undefined,\n    cuisine_type: extractedData.cuisine_type ?? [],\n    price_range: extractedData.price_range ?? undefined,\n    specialties: extractedData.specialties ?? [],\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\n    verification_status: 'pending',\n    source_urls: [sourceUrl].filter(Boolean),\n    last_scraped_at: new Date().toISOString(),\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\n  };\n  return truckData;\n}\n\nasync function handleFirecrawlStage(\n  url: string,\n  rawText: string | undefined,\n  logs: string[],\n): Promise<{\n  firecrawlResult: StageResult;\n  contentToProcess: string | undefined;\n  sourceUrlForProcessing: string;\n}> {\n  let firecrawlResult: StageResult;\n  let contentToProcess: string | undefined;\n  let sourceUrlForProcessing: string = url ?? 'raw_text_input';\n\n  if (url != undefined && url != '' && (rawText == undefined || rawText == '')) {\n    logs.push(`Starting Firecrawl scrape for URL: ${url}`);\n    try {\n      const fcOutput: GeminiResponse<FirecrawlOutputData> =\n        await firecrawl.scrapeFoodTruckWebsite(url);\n      if (fcOutput.success && fcOutput.data?.markdown != undefined && fcOutput.data.markdown != '') {\n        contentToProcess = fcOutput.data.markdown;\n        sourceUrlForProcessing = fcOutput.data.source_url ?? url;\n        firecrawlResult = {\n          status: 'Success',\n          rawContent: fcOutput.data.markdown,\n          metadata: { name: fcOutput.data.name, source_url: fcOutput.data.source_url },\n          details: `Markdown length: ${fcOutput.data.markdown.length}`,\n        };\n        logs.push('Firecrawl scrape successful.');\n      } else {\n        throw new Error(fcOutput.error ?? 'Firecrawl failed to return markdown.');\n      }\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'An unknown error occurred during Firecrawl scrape.';\n      logs.push(`Firecrawl error: ${errorMessage}`);\n      firecrawlResult = { status: 'Error', error: errorMessage };\n    }\n  } else if (rawText != undefined && rawText != '') {\n    logs.push('Using raw text input for processing.');\n    contentToProcess = rawText;\n    firecrawlResult = {\n      status: 'Skipped (Raw Text Provided)',\n      details: `Raw text length: ${rawText.length}`,\n    };\n  } else {\n    logs.push('No URL or raw text provided.');\n    throw new Error('Either a URL or raw text must be provided for testing.');\n  }\n\n  if (contentToProcess == undefined || contentToProcess == '') {\n    logs.push('Content to process is empty after Firecrawl/raw text stage.');\n    throw new Error('Content to process is empty.');\n  }\n\n  return { firecrawlResult, contentToProcess, sourceUrlForProcessing };\n}\n\nasync function handleGeminiStage(\n  contentToProcess: string,\n  sourceUrlForProcessing: string,\n  logs: string[],\n): Promise<{ geminiResult: StageResult; extractedData: ExtractedFoodTruckDetails | undefined }> {\n  let geminiResult: StageResult;\n  let extractedData: ExtractedFoodTruckDetails | undefined;\n\n  logs.push('Starting Gemini processing.');\n  try {\n    const geminiOutput: GeminiResponse<ExtractedFoodTruckDetails> =\n      await gemini.extractFoodTruckDetailsFromMarkdown(contentToProcess, sourceUrlForProcessing);\n    if (geminiOutput.success && geminiOutput.data) {\n      extractedData = geminiOutput.data;\n      geminiResult = {\n        status: 'Success',\n        data: geminiOutput.data,\n        tokensUsed: geminiOutput.tokensUsed,\n        prompt: geminiOutput.promptSent,\n        details: 'Gemini extraction successful.',\n      };\n      logs.push('Gemini processing successful.');\n    } else {\n      throw new Error(geminiOutput.error ?? 'Gemini processing failed to return data.');\n    }\n  } catch (error: unknown) {\n    const errorMessage =\n      error instanceof Error\n        ? error.message\n        : 'An unknown error occurred during Gemini processing.';\n    logs.push(`Gemini error: ${errorMessage}`);\n    geminiResult = { status: 'Error', error: errorMessage };\n  }\n  return { geminiResult, extractedData };\n}\n\nasync function handleSupabaseStage(\n  extractedData: ExtractedFoodTruckDetails,\n  sourceUrlForProcessing: string,\n  isDryRun: boolean,\n  logs: string[],\n): Promise<StageResult> {\n  let supabaseResult: StageResult = { status: 'Skipped' };\n\n  logs.push('Preparing for Supabase interaction.');\n  try {\n    const truckDataToSave = mapExtractedDataToTruckSchema(\n      extractedData,\n      sourceUrlForProcessing,\n      isDryRun,\n    );\n    supabaseResult = { status: 'Prepared', preparedData: truckDataToSave };\n\n    if (isDryRun) {\n      supabaseResult.status = 'Success (Dry Run)';\n      supabaseResult.details = 'Dry Run: Data was prepared but not saved.';\n      logs.push('Supabase interaction skipped (Dry Run).');\n    } else {\n      logs.push('Attempting to save to Supabase (Dry Run is FALSE).');\n      const createdTruck = await FoodTruckService.createTruck(truckDataToSave);\n      if (createdTruck == undefined) {\n        throw new Error('Failed to create truck in Supabase.');\n      }\n      supabaseResult = {\n        status: 'Success (Saved)',\n        preparedData: truckDataToSave,\n        recordId: createdTruck.id,\n        details: `Truck data saved with ID: ${createdTruck.id}`,\n      };\n      logs.push(`Data saved to Supabase. Record ID: ${createdTruck.id}`);\n    }\n  } catch (error: unknown) {\n    const errorMessage =\n      error instanceof Error\n        ? error.message\n        : 'An unknown error occurred during Supabase interaction.';\n    logs.push(`Supabase interaction error: ${errorMessage}`);\n    supabaseResult = { ...supabaseResult, status: 'Error', error: errorMessage };\n  }\n  return supabaseResult;\n}\n\nexport function POST(request: NextRequest) {\n  const logs: string[] = [];\n  logs.push('Test pipeline run started.');\n\n  let firecrawlResult: StageResult = { status: 'Incomplete' };\n  let geminiResult: StageResult = { status: 'Incomplete' };\n  let supabaseResult: StageResult = { status: 'Incomplete' };\n  let overallStatus = 'Incomplete';\n\n  try {\n    const body = (await request.json()) as { url?: string; rawText?: string; isDryRun?: boolean };\n    const { url, rawText, isDryRun = true } = body;\n    logs.push(`Request body: ${JSON.stringify(body)}`);\n\n    const firecrawlStageOutput = await handleFirecrawlStage(url ?? '', rawText, logs);\n    firecrawlResult = firecrawlStageOutput.firecrawlResult;\n    const { contentToProcess, sourceUrlForProcessing } = firecrawlStageOutput;\n\n    if (firecrawlResult.status === 'Error') {\n      overallStatus = 'Error';\n      return NextResponse.json(\n        { results: { firecrawl: firecrawlResult, logs, overallStatus } },\n        { status: 200 },\n      );\n    }\n\n    const geminiStageOutput = await handleGeminiStage(\n      contentToProcess!,\n      sourceUrlForProcessing,\n      logs,\n    );\n    geminiResult = geminiStageOutput.geminiResult;\n    const { extractedData } = geminiStageOutput;\n\n    if (geminiResult.status === 'Error' || !extractedData) {\n      overallStatus = 'Error';\n      return NextResponse.json(\n        { results: { firecrawl: firecrawlResult, gemini: geminiResult, logs, overallStatus } },\n        { status: 200 },\n      );\n    }\n\n    supabaseResult = await handleSupabaseStage(\n      extractedData,\n      sourceUrlForProcessing,\n      isDryRun,\n      logs,\n    );\n\n    if (supabaseResult.status === 'Error') {\n      overallStatus = 'Error';\n      return NextResponse.json(\n        {\n          results: {\n            firecrawl: firecrawlResult,\n            gemini: geminiResult,\n            supabase: supabaseResult,\n            logs,\n            overallStatus,\n          },\n        },\n        { status: 200 },\n      );\n    }\n\n    overallStatus = 'Success';\n    logs.push('Test pipeline run completed successfully.');\n    return NextResponse.json({\n      results: {\n        firecrawl: firecrawlResult,\n        gemini: geminiResult,\n        supabase: supabaseResult,\n        logs,\n        overallStatus,\n      },\n    });\n  } catch (error: unknown) {\n    const errorMessage =\n      error instanceof Error\n        ? error.message\n        : 'An unknown error occurred during overall test pipeline run.';\n    logs.push(`Overall test pipeline error: ${errorMessage}`);\n    return NextResponse.json(\n      {\n        message: 'Test pipeline run failed.',\n        error: errorMessage,\n        results: {\n          firecrawl: firecrawlResult,\n          gemini: geminiResult,\n          supabase: supabaseResult,\n          logs,\n          overallStatus: 'Error',\n        },\n      },\n      { status: 200 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/api/trucks/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/api/trucks/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'GET' has too many lines (59). Maximum allowed is 50.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":65,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\nimport { type NextRequest, NextResponse } from 'next/server';\nimport { FoodTruckService } from '@/lib/supabase';\n// @ts-expect-error TS(2792): Cannot find module 'zod'. Did you mean to set the ... Remove this comment to see the full error message\nimport { z, type infer as ZInfer } from 'zod';\n\nexport function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get('id');\n  const lat = searchParams.get('lat');\n  const lng = searchParams.get('lng');\n  const radius = searchParams.get('radius') ?? '5';\n  const limit = Number.parseInt(searchParams.get('limit') ?? '50');\n  const offset = Number.parseInt(searchParams.get('offset') ?? '0');\n\n  try {\n    // Get specific truck by ID\n    if (id != undefined && id != '') {\n      const truck = await FoodTruckService.getTruckById(id);\n      return NextResponse.json({ truck });\n    }\n\n    // Get trucks by location\n    if (lat != undefined && lat != '' && lng != undefined && lng != '') {\n      const userLat = Number.parseFloat(lat);\n      const userLng = Number.parseFloat(lng);\n      const radiusKm = Number.parseFloat(radius);\n\n      const nearbyTrucks = await FoodTruckService.getTrucksByLocation(userLat, userLng, radiusKm);\n\n      return NextResponse.json({\n        trucks: nearbyTrucks,\n        total: nearbyTrucks.length,\n        limit,\n        offset,\n        hasMore: false, // Location-based queries don't use pagination\n      });\n    }\n\n    // Get all trucks with pagination\n    const { trucks, total } = await FoodTruckService.getAllTrucks(limit, offset);\n\n    return NextResponse.json({\n      trucks,\n      total,\n      limit,\n      offset,\n      hasMore: offset + limit < (total ?? 0),\n      summary: {\n        totalTrucks: total,\n        averageQuality:\n          trucks != undefined && trucks.length > 0\n            ? trucks.reduce((acc, t) => acc + (t.data_quality_score ?? 0), 0) / trucks.length\n            : 0,\n        lastUpdated:\n          trucks != undefined && trucks.length > 0\n            ? Math.max(...trucks.map((t) => new Date(t.updated_at).getTime()))\n            : 0,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching food trucks:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\nconst MenuItemSchema = z.object({\n  name: z.string(),\n  description: z.string().optional().default(''),\n  price: z.union([z.number(), z.string()]).optional().default(0),\n  dietary_tags: z.array(z.string()).optional().default([]),\n});\n\nconst MenuCategorySchema = z.object({\n  name: z.string(),\n  items: z.array(MenuItemSchema),\n});\n\nconst FoodTruckSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  description: z.string().optional(),\n  current_location: z\n    .object({\n      lat: z.number(),\n      lng: z.number(),\n      address: z.string(),\n      timestamp: z.string().datetime().optional().default(new Date().toISOString()),\n    })\n    .optional(),\n  scheduled_locations: z\n    .array(\n      z.object({\n        address: z.string().optional(),\n        city: z.string().optional(),\n        state: z.string().optional(),\n        zip_code: z.string().optional(),\n        lat: z.number().optional(),\n        lng: z.number().optional(),\n        timestamp: z.string().datetime(),\n        start_time: z.string().datetime(),\n        end_time: z.string().datetime(),\n      }),\n    )\n    .optional()\n    .default([]),\n  operating_hours: z\n    .object({\n      monday: z\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\n        .or(z.object({ closed: z.literal(true) }))\n        .default({ closed: true }),\n      tuesday: z\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\n        .or(z.object({ closed: z.literal(true) }))\n        .default({ closed: true }),\n      wednesday: z\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\n        .or(z.object({ closed: z.literal(true) }))\n        .default({ closed: true }),\n      thursday: z\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\n        .or(z.object({ closed: z.literal(true) }))\n        .default({ closed: true }),\n      friday: z\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\n        .or(z.object({ closed: z.literal(true) }))\n        .default({ closed: true }),\n      saturday: z\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\n        .or(z.object({ closed: z.literal(true) }))\n        .default({ closed: true }),\n      sunday: z\n        .object({ open: z.string(), close: z.string(), closed: z.boolean() })\n        .or(z.object({ closed: z.literal(true) }))\n        .default({ closed: true }),\n    })\n    .optional()\n    .default({\n      monday: { closed: true },\n      tuesday: { closed: true },\n      wednesday: { closed: true },\n      thursday: { closed: true },\n      friday: { closed: true },\n      saturday: { closed: true },\n      sunday: { closed: true },\n    }),\n  menu: z.array(MenuCategorySchema).optional().default([]),\n  contact_info: z\n    .object({\n      email: z.string().email().optional(),\n      phone: z.string().optional(),\n      website: z.string().url().optional(),\n    })\n    .optional(),\n  social_media: z\n    .object({\n      instagram: z.string().optional(),\n      facebook: z.string().optional(),\n      twitter: z.string().optional(),\n      tiktok: z.string().optional(),\n      yelp: z.string().optional(),\n    })\n    .optional()\n    .default({}),\n  source_urls: z.array(z.string().url()).optional().default([]),\n  data_quality_score: z.number().min(0).max(1).optional().default(0.5),\n  verification_status: z.enum(['pending', 'verified', 'rejected']).optional().default('pending'),\n});\n\nconst UpdateFoodTruckSchema = FoodTruckSchema.partial().extend({\n  id: z.string().uuid('Invalid truck ID format').min(1, 'Truck ID is required'),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = (await request.json()) as ZInfer<typeof FoodTruckSchema>;\n    const validatedData = FoodTruckSchema.parse(body);\n\n    const newTruck = await FoodTruckService.createTruck(validatedData);\n\n    return NextResponse.json(\n      {\n        message: 'Food truck created successfully',\n        truck: newTruck,\n      },\n      { status: 201 },\n    );\n  } catch (error) {\n    console.error('Error creating food truck:', error);\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ error: error.errors }, { status: 400 });\n    }\n    return NextResponse.json({ error: 'Failed to create food truck' }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    const body = (await request.json()) as ZInfer<typeof UpdateFoodTruckSchema>;\n    const validatedData = UpdateFoodTruckSchema.parse(body);\n    const { id, ...updates } = validatedData;\n\n    const updatedTruck = await FoodTruckService.updateTruck(id, updates);\n\n    return NextResponse.json({\n      message: 'Food truck updated successfully',\n      truck: updatedTruck,\n    });\n  } catch (error) {\n    console.error('Error updating food truck:', error);\n    if (error instanceof z.ZodError) {\n      return NextResponse.json({ error: error.errors }, { status: 400 });\n    }\n    return NextResponse.json({ error: 'Failed to update food truck' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/auth/AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/auth/callback/route.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'GET' has too many lines (93). Maximum allowed is 50.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":100,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-expect-error TS(2792): Cannot find module 'next/server'. Did you mean to ... Remove this comment to see the full error message\nimport { NextRequest, NextResponse } from 'next/server';\nimport { supabase } from '@/lib/supabase';\n// @ts-expect-error TS(2792): Cannot find module '@/lib/security/rateLimiter'. D... Remove this comment to see the full error message\nimport { RateLimiter, getClientIdentifier } from '@/lib/security/rateLimiter';\nimport { AuditLogger } from '@/lib/security/auditLogger';\n\nexport async function GET(request: NextRequest) {\n  // Apply rate limiting to auth callback\n  const identifier = getClientIdentifier(request);\n  const rateLimitResult = RateLimiter.checkRateLimit(identifier, 'auth');\n\n  if (!rateLimitResult.allowed) {\n    await AuditLogger.logSecurityEvent({\n      event_type: 'login_failure',\n      ip_address: identifier.split(':')[0],\n      user_agent: request.headers.get('user-agent') ?? 'unknown',\n      details: {\n        reason: 'rate_limit_exceeded',\n        retryAfter: rateLimitResult.retryAfter\n      },\n      severity: 'warning'\n    });\n\n    return NextResponse.redirect(`${new URL(request.url).origin}/login?error=rate_limit`);\n  }\n\n  const { searchParams, origin } = new URL(request.url);\n  const code = searchParams.get('code');\n  const redirectTo = searchParams.get('redirectTo') ?? '/admin';\n\n  if (code != undefined && code != '') {\n    const { error } = await supabase.auth.exchangeCodeForSession(code);\n\n    if (error) {\n      // Log authentication failure\n      await AuditLogger.logAuthEvent(\n        'login_failure',\n        undefined,\n        undefined,\n        {\n          ip: identifier.split(':')[0],\n          userAgent: request.headers.get('user-agent') ?? 'unknown'\n        },\n        { provider: 'google', error: error.message }\n      );\n    } else {\n      // Check if user has admin role\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n\n      if (user) {\n        const { data: profile } = await supabase\n          .from('profiles')\n          .select('role')\n          .eq('id', user.id)\n          .single();\n\n        // Log successful authentication\n        await AuditLogger.logAuthEvent(\n          'login_success',\n          user.email,\n          user.id,\n          {\n            ip: identifier.split(':')[0],\n            userAgent: request.headers.get('user-agent') ?? 'unknown'\n          },\n          { provider: 'google', role: profile?.role }\n        );\n\n        // Record successful auth for rate limiting\n        RateLimiter.recordSuccess(identifier, 'auth');\n\n        if (profile?.role === 'admin') {\n          return NextResponse.redirect(`${origin}${redirectTo}`);\n        } else {\n          // Log unauthorized access attempt\n          await AuditLogger.logSecurityEvent({\n            event_type: 'permission_denied',\n            user_id: user.id,\n            user_email: user.email,\n            ip_address: identifier.split(':')[0],\n            user_agent: request.headers.get('user-agent') ?? 'unknown',\n            details: {\n              reason: 'insufficient_role',\n              user_role: profile?.role ?? 'none'\n            },\n            severity: 'warning'\n          });\n\n          return NextResponse.redirect(`${origin}/access-denied`);\n        }\n      }\n    }\n  }\n\n  // If there was an error or no code, redirect to login\n  return NextResponse.redirect(`${origin}/login`);\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/app/login/page.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'EmailLoginForm' has too many lines (57). Maximum allowed is 50.","line":27,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":83,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'LoginPage' has too many lines (107). Maximum allowed is 50.","line":139,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":245,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Shield, Mail } from 'lucide-react';\n\n// Login header component\nfunction LoginHeader() {\n  return (\n    <CardHeader className=\"text-center\">\n      <div className=\"mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-primary/10\">\n        <Shield className=\"h-8 w-8 text-primary\" />\n      </div>\n      <CardTitle className=\"text-2xl\">Admin Login</CardTitle>\n      <CardDescription>Sign in to access the admin dashboard</CardDescription>\n    </CardHeader>\n  );\n}\n\n// Email login form component\nfunction EmailLoginForm({\n  email,\n  setEmail,\n  password,\n  setPassword,\n  loading,\n  handleEmailLogin\n}: {\n  readonly email: string;\n  readonly setEmail: (email: string) => void;\n  readonly password: string;\n  readonly setPassword: (password: string) => void;\n  readonly loading: boolean;\n  readonly handleEmailLogin: (e: React.FormEvent) => Promise<void>;\n}) {\n  return (\n    <form\n      onSubmit={(e) => {\n        handleEmailLogin(e).catch((error) => {\n          console.warn('Failed to handle email login:', error);\n        });\n      }}\n      className=\"space-y-4\"\n    >\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"email\">Email</Label>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"zabrien@gmail.com\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n      </div>\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"password\">Password</Label>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          placeholder=\"Enter your password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n      </div>\n      <Button type=\"submit\" disabled={loading} className=\"w-full\" size=\"lg\">\n        {loading ? (\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n        ) : (\n          <Mail className=\"mr-2 h-4 w-4\" />\n        )}\n        {loading ? 'Signing in...' : 'Sign in with Email'}\n      </Button>\n    </form>\n  );\n}\n\n// Google login button component\nfunction GoogleLoginButton({\n  loading,\n  handleGoogleLogin\n}: {\n  readonly loading: boolean;\n  readonly handleGoogleLogin: () => Promise<void>;\n}) {\n  return (\n    <Button\n      onClick={() => {\n        handleGoogleLogin().catch((error) => {\n          console.warn('Failed to handle Google login:', error);\n        });\n      }}\n      disabled={loading}\n      variant=\"outline\"\n      className=\"w-full\"\n      size=\"lg\"\n    >\n      {loading ? (\n        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n      ) : (\n        <Mail className=\"mr-2 h-4 w-4\" />\n      )}\n      Google\n    </Button>\n  );\n}\n\n// Login footer component\nfunction LoginFooter() {\n  return (\n    <div className=\"text-center text-sm text-muted-foreground\">\n      <p>Admin access only</p>\n      <p>Contact your administrator if you need access</p>\n    </div>\n  );\n}\n\n// Divider component\nfunction LoginDivider() {\n  return (\n    <div className=\"relative\">\n      <div className=\"absolute inset-0 flex items-center\">\n        <span className=\"w-full border-t\" />\n      </div>\n      <div className=\"relative flex justify-center text-xs uppercase\">\n        <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n      </div>\n    </div>\n  );\n}\n\nexport default function LoginPage() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string>();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const redirectTo = searchParams.get('redirectedFrom') ?? '/admin';\n\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      setError(undefined);\n\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      // Check if user has admin role\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n\n      if (user) {\n        const { data: profile } = await supabase\n          .from('profiles')\n          .select('role')\n          .eq('id', user.id)\n          .single();\n\n        if (profile?.role === 'admin') {\n          router.push(redirectTo);\n        } else {\n          // User exists but is not admin - redirect to access denied\n          router.push('/access-denied');\n        }\n      }\n    } catch (error: unknown) {\n      console.error('Login error:', error);\n      setError(error instanceof Error ? error.message : 'An error occurred during login');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleLogin = async () => {\n    try {\n      setLoading(true);\n      setError(undefined);\n\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${globalThis.location.origin}/auth/callback?redirectTo=${encodeURIComponent(redirectTo)}`,\n        },\n      });\n\n      if (error) {\n        throw error;\n      }\n    } catch (error: unknown) {\n      console.error('Login error:', error);\n      setError(error instanceof Error ? error.message : 'An error occurred during login');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-background to-secondary/20 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <LoginHeader />\n        <CardContent className=\"space-y-4\">\n          {error !== undefined && error !== '' && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <EmailLoginForm\n            email={email}\n            setEmail={setEmail}\n            password={password}\n            setPassword={setPassword}\n            loading={loading}\n            handleEmailLogin={handleEmailLogin}\n          />\n\n          <LoginDivider />\n\n          <GoogleLoginButton\n            loading={loading}\n            handleGoogleLogin={handleGoogleLogin}\n          />\n\n          <LoginFooter />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/middleware.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'middleware' has too many lines (93). Maximum allowed is 50.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":98,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\nimport { AuditLogger } from '@/lib/security/auditLogger';\n\nexport async function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  const supabase = createSupabaseMiddlewareClient(req, res);\n\n  // Extract request metadata for security logging\n  const requestMetadata = {\n    ip: (req.ip as string | undefined) ?? req.headers.get('x-forwarded-for') ?? req.headers.get('x-real-ip') ?? 'unknown',\n    userAgent: req.headers.get('user-agent') ?? 'unknown',\n    url: req.nextUrl.pathname,\n    method: req.method\n  } as {\n    ip: string;\n    userAgent: string;\n    url: string;\n    method: string;\n  };\n\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser();\n\n  // Protect admin routes\n  if (req.nextUrl.pathname.startsWith('/admin')) {\n    if (userError || !user) {\n      // Log unauthorized access attempt\n      await AuditLogger.logSecurityEvent({\n        event_type: 'permission_denied',\n        ip_address: requestMetadata.ip,\n        user_agent: requestMetadata.userAgent,\n        details: {\n          attempted_url: requestMetadata.url,\n          reason: 'no_session',\n          error: userError?.message\n        },\n        severity: 'warning'\n      } as Parameters<typeof AuditLogger.logSecurityEvent>[0]);\n\n      // Redirect unauthenticated users to login\n      const redirectUrl = req.nextUrl.clone();\n      redirectUrl.pathname = '/login';\n      redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname);\n      return NextResponse.redirect(redirectUrl);\n    }\n\n    // Check for admin role (assuming 'profiles' table with 'role' column)\n    const { data: profile, error: profileQueryError } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    if (profileQueryError || profile?.role !== 'admin') {\n      // Log unauthorized admin access attempt\n      await AuditLogger.logSecurityEvent({\n        event_type: 'permission_denied',\n        user_id: user.id,\n        user_email: user.email,\n        ip_address: requestMetadata.ip,\n        user_agent: requestMetadata.userAgent,\n        details: {\n          attempted_url: requestMetadata.url,\n          user_role: profile?.role ?? 'none',\n          reason: 'insufficient_privileges',\n          error: profileQueryError?.message\n        },\n        severity: 'error'\n      } as Parameters<typeof AuditLogger.logSecurityEvent>[0]);\n\n      // Redirect non-admin users to access denied page\n      const redirectUrl = req.nextUrl.clone();\n      redirectUrl.pathname = '/access-denied';\n      return NextResponse.redirect(redirectUrl);\n    }\n\n    // Log successful admin access for audit trail\n    if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\n      await AuditLogger.logDataAccess(\n        user.id,\n        user.email ?? 'unknown',\n        'admin_panel',\n        req.nextUrl.pathname,\n        req.method === 'GET' ? 'read' : 'write',\n        {\n          ip: requestMetadata.ip,\n          userAgent: requestMetadata.userAgent\n        } as Parameters<typeof AuditLogger.logDataAccess>[5]\n      );\n    }\n  }\n\n  return res;\n}\n\nexport const config = {\n  matcher: ['/admin/:path*'],\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/app/page.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'TruckListSection' has too many lines (58). Maximum allowed is 50.","line":259,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":316,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'FoodTruckFinder' has too many lines (52). Maximum allowed is 50.","line":451,"column":16,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":502,"endColumn":2}],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":366,"column":5,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":366,"endColumn":45,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\n\nimport { Search, Navigation, Moon, Sun } from 'lucide-react';\nimport { useThemeSwitcher } from '@/components/ThemeProvider';\nimport dynamic from 'next/dynamic';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion';\nimport { TruckCard } from '@/components/TruckCard';\nimport { Badge } from '@/components/ui/badge';\n\nconst getCurrentDay = () => {\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  return days[new Date().getDay()];\n};\n\nconst formatPrice = (price: number) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(price);\n};\n\nconst MapDisplay = dynamic(() => import('@/components/MapDisplay'), {\n  ssr: false,\n  loading: () => (\n    <div className=\"h-96 flex items-center justify-center bg-gray-100 dark:bg-slate-800 rounded-lg\">\n      <p>Loading map...</p>\n    </div>\n  ),\n});\n\ninterface FoodTruck {\n  id: string;\n  name: string;\n  description: string;\n  current_location: {\n    lat: number;\n    lng: number;\n    address: string;\n    timestamp: string;\n  };\n  operating_hours: Record<string, { open: string; close: string; closed: boolean }>;\n  menu: Array<{\n    category: string;\n    items: Array<{\n      name: string;\n      description: string;\n      price: number;\n      dietary_tags: string[];\n    }>;\n  }>;\n  contact_info: {\n    phone?: string;\n    email?: string;\n    website?: string;\n  };\n  social_media: {\n    instagram?: string;\n    facebook?: string;\n    twitter?: string;\n  };\n  data_quality_score: number;\n  verification_status: string;\n  distance?: number;\n}\n\ninterface TrucksApiResponse {\n  trucks: FoodTruck[];\n  // Add other properties if your API returns more, e.g., total, page, etc.\n}\n\n// Helper components extracted from AppHeader to reduce function length\nfunction ThemeToggleSection({\n  mounted,\n  resolvedTheme,\n  setTheme\n}: {\n  readonly mounted: boolean;\n  readonly resolvedTheme: string | undefined;\n  readonly setTheme: (theme: string) => void;\n}) {\n  return (\n    <div className=\"flex items-center space-x-2 order-1 sm:order-none\">\n      {mounted &&\n        (resolvedTheme === 'dark' ? (\n          <Sun className=\"h-5 w-5 text-yellow-400\" />\n        ) : (\n          <Moon className=\"h-5 w-5 text-slate-500\" />\n        ))}\n      <Switch\n        id=\"theme-switcher\"\n        checked={mounted && resolvedTheme === 'dark'}\n        onCheckedChange={(checked: boolean) => {\n          setTheme(checked ? 'dark' : 'light');\n        }}\n        aria-label=\"Switch between dark and light mode\"\n        disabled={!mounted}\n      />\n      <Label\n        htmlFor=\"theme-switcher\"\n        className=\"hidden sm:block text-sm text-gray-700 dark:text-gray-300\"\n      >\n        {mounted && (resolvedTheme === 'dark' ? 'Light Mode' : 'Dark Mode')}\n      </Label>\n    </div>\n  );\n}\n\nfunction SearchInputSection({\n  searchTerm,\n  setSearchTerm\n}: {\n  readonly searchTerm: string;\n  readonly setSearchTerm: (term: string) => void;\n}) {\n  return (\n    <div className=\"relative order-3 sm:order-none w-full sm:w-64\">\n      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 h-4 w-4\" />\n      <Input\n        placeholder=\"Search food trucks...\"\n        value={searchTerm}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setSearchTerm(e.target.value)\n        }\n        className=\"pl-10 w-full bg-white dark:bg-slate-700 dark:text-gray-100 dark:placeholder-gray-400\"\n      />\n    </div>\n  );\n}\n\nfunction NearbyButton({\n  userLocation,\n  loadNearbyTrucks\n}: {\n  readonly userLocation: { lat: number; lng: number } | undefined;\n  readonly loadNearbyTrucks: () => Promise<void>;\n}) {\n  return (\n    <Button\n      onClick={() => {\n        void loadNearbyTrucks();\n      }}\n      disabled={!userLocation}\n      variant=\"outline\"\n      className=\"order-2 sm:order-none\"\n    >\n      <Navigation className=\"h-4 w-4 mr-2\" />\n      Find Nearby\n    </Button>\n  );\n}\n\n// App Header component\nfunction AppHeader({\n  mounted,\n  resolvedTheme,\n  setTheme,\n  searchTerm,\n  setSearchTerm,\n  userLocation,\n  loadNearbyTrucks\n}: {\n  readonly mounted: boolean;\n  readonly resolvedTheme: string | undefined;\n  readonly setTheme: (theme: string) => void;\n  readonly searchTerm: string;\n  readonly setSearchTerm: (term: string) => void;\n  readonly userLocation: { lat: number; lng: number } | undefined;\n  readonly loadNearbyTrucks: () => Promise<void>;\n}) {\n  return (\n    <div className=\"bg-white dark:bg-slate-800 shadow-sm border-b dark:border-slate-700\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n              🚚 Food Truck Finder\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Discover amazing food trucks near you\n            </p>\n          </div>\n          <div className=\"flex flex-wrap items-center justify-end gap-2 sm:space-x-4\">\n            <ThemeToggleSection\n              mounted={mounted}\n              resolvedTheme={resolvedTheme}\n              setTheme={setTheme}\n            />\n            <SearchInputSection\n              searchTerm={searchTerm}\n              setSearchTerm={setSearchTerm}\n            />\n            <NearbyButton\n              userLocation={userLocation}\n              loadNearbyTrucks={loadNearbyTrucks}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Helper function to get selected truck location\nfunction getSelectedTruckLocation(\n  selectedTruckId: string | undefined,\n  filteredTrucks: FoodTruck[]\n): [number, number] | undefined {\n  if (selectedTruckId == undefined) return undefined;\n\n  const truck = filteredTrucks.find((t) => t.id === selectedTruckId);\n  return (truck?.current_location?.lat == undefined) || (truck?.current_location?.lng == undefined)\n    ? undefined\n    : [truck.current_location.lat, truck.current_location.lng];\n}\n\n// Map section component extracted from MainContent\nfunction MapSection({\n  filteredTrucks,\n  userLocation,\n  selectedTruckId,\n  setSelectedTruckId\n}: {\n  readonly filteredTrucks: FoodTruck[];\n  readonly userLocation: { lat: number; lng: number } | undefined;\n  readonly selectedTruckId: string | undefined;\n  readonly setSelectedTruckId: (id: string | undefined) => void;\n}) {\n  return (\n    <div\n      key=\"map-container-parent\"\n      className=\"lg:col-span-2 h-80 min-h-[320px] sm:h-96 sm:min-h-[400px] dark:bg-slate-800 rounded-lg shadow\"\n    >\n      <MapDisplay\n        trucks={filteredTrucks}\n        userLocation={userLocation}\n        onSelectTruck={setSelectedTruckId}\n        defaultCenter={\n          userLocation ? [userLocation.lat, userLocation.lng] : [37.7749, -122.4194]\n        }\n        selectedTruckLocation={getSelectedTruckLocation(selectedTruckId, filteredTrucks)}\n      />\n    </div>\n  );\n}\n\n// Truck list section component extracted from MainContent\nfunction TruckListSection({\n  filteredTrucks,\n  selectedTruckId,\n  setSelectedTruckId,\n  isOpen,\n  userLocation\n}: {\n  readonly filteredTrucks: FoodTruck[];\n  readonly selectedTruckId: string | undefined;\n  readonly setSelectedTruckId: (id: string | undefined) => void;\n  readonly isOpen: (truck: FoodTruck) => boolean;\n  readonly userLocation: { lat: number; lng: number } | undefined;\n}) {\n  return (\n    <div className=\"lg:col-span-1 space-y-4\">\n      <h3 className=\"text-lg font-semibold dark:text-gray-100\">\n        Nearby Trucks ({filteredTrucks.length})\n      </h3>\n      <Accordion\n        type=\"single\"\n        collapsible\n        className=\"w-full\"\n        value={selectedTruckId ?? undefined}\n        onValueChange={(value: string | undefined) =>\n          setSelectedTruckId((currentId) => (value === currentId ? undefined : value))\n        }\n      >\n        {filteredTrucks.map((truck) => (\n          <AccordionItem value={truck.id} key={truck.id}>\n            <AccordionTrigger className=\"flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-slate-700 rounded-md\">\n              <div className=\"flex-1 text-left\">\n                <h4 className=\"font-medium dark:text-gray-100\">{truck.name}</h4>\n                {truck.current_location?.address && (\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-1\">\n                    {truck.current_location.address}\n                  </p>\n                )}\n              </div>\n              <Badge variant={isOpen(truck) ? 'default' : 'secondary'}>\n                {isOpen(truck) ? 'Open' : 'Closed'}\n              </Badge>\n            </AccordionTrigger>\n            <AccordionContent>\n              <TruckCard\n                truck={truck}\n                isOpen={isOpen(truck)}\n                onSelectTruck={() => setSelectedTruckId(truck.id)}\n                userLocation={userLocation}\n                formatPrice={formatPrice}\n                hideHeader={true}\n              />\n            </AccordionContent>\n          </AccordionItem>\n        ))}\n      </Accordion>\n    </div>\n  );\n}\n\n// Main Content component\nfunction MainContent({\n  filteredTrucks,\n  userLocation,\n  selectedTruckId,\n  setSelectedTruckId,\n  isOpen\n}: {\n  readonly filteredTrucks: FoodTruck[];\n  readonly userLocation: { lat: number; lng: number } | undefined;\n  readonly selectedTruckId: string | undefined;\n  readonly setSelectedTruckId: (id: string | undefined) => void;\n  readonly isOpen: (truck: FoodTruck) => boolean;\n}) {\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <MapSection\n            filteredTrucks={filteredTrucks}\n            userLocation={userLocation}\n            selectedTruckId={selectedTruckId}\n            setSelectedTruckId={setSelectedTruckId}\n          />\n          <TruckListSection\n            filteredTrucks={filteredTrucks}\n            selectedTruckId={selectedTruckId}\n            setSelectedTruckId={setSelectedTruckId}\n            isOpen={isOpen}\n            userLocation={userLocation}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Helper functions extracted from FoodTruckFinder to reduce function length\n\n// Get user's current location or default to San Francisco\nfunction getUserLocationHelper(\n  setUserLocation: (location: { lat: number; lng: number }) => void\n) {\n  if (navigator.geolocation == undefined) {\n    // Default to San Francisco\n    setUserLocation({ lat: 37.7749, lng: -122.4194 });\n  } else {\n    // eslint-disable-next-line sonarjs/no-intrusive-permissions -- Geolocation is essential for finding nearby food trucks\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n      },\n      (error) => {\n        console.warn('Location access denied:', error);\n        // Default to San Francisco\n        setUserLocation({ lat: 37.7749, lng: -122.4194 });\n      },\n    );\n  }\n}\n\n// Load all food trucks from API\nasync function loadFoodTrucksHelper(\n  setTrucks: (trucks: FoodTruck[]) => void,\n  setLoading: (loading: boolean) => void\n) {\n  try {\n    const response = await fetch('/api/trucks');\n    const data: TrucksApiResponse = (await response.json()) as TrucksApiResponse;\n    setTrucks(data.trucks ?? []);\n  } catch (error) {\n    console.error('Failed to load food trucks:', error);\n  } finally {\n    setLoading(false);\n  }\n}\n\n// Load nearby food trucks based on user location\nasync function loadNearbyTrucksHelper(\n  userLocation: { lat: number; lng: number } | undefined,\n  setTrucks: (trucks: FoodTruck[]) => void\n) {\n  if (!userLocation) return;\n\n  try {\n    const response = await fetch(\n      `/api/trucks?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10`,\n    );\n    const data: TrucksApiResponse = (await response.json()) as TrucksApiResponse;\n    setTrucks(data.trucks ?? []);\n  } catch (error) {\n    console.error('Failed to load nearby trucks:', error);\n  }\n}\n\n// Check if a food truck is currently open\nfunction isTruckOpen(truck: FoodTruck): boolean {\n  const today = getCurrentDay();\n  const hours = truck.operating_hours?.[today];\n\n  // Ensure hours and its properties are not null/undefined before accessing\n  if (hours == undefined || hours.closed || (hours.open == undefined) || (hours.close == undefined)) {\n    return false;\n  }\n\n  try {\n    const now = new Date();\n    const currentTime = now.getHours() * 100 + now.getMinutes();\n    const openTime = Number.parseInt(hours.open.replace(':', ''));\n    const closeTime = Number.parseInt(hours.close.replace(':', ''));\n\n    return currentTime >= openTime && currentTime <= closeTime;\n  } catch (error) {\n    console.error('Error parsing operating hours for truck', truck.name, error);\n    return false;\n  }\n}\n\n// Loading component extracted from FoodTruckFinder\nfunction LoadingScreen() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 dark:border-blue-400 mx-auto mb-4\"></div>\n        <p className=\"text-gray-600 dark:text-gray-400\">Finding delicious food trucks...</p>\n      </div>\n    </div>\n  );\n}\n\nexport default function FoodTruckFinder() {\n  const [trucks, setTrucks] = useState<FoodTruck[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | undefined>();\n  const [selectedTruckId, setSelectedTruckId] = useState<string | undefined>();\n\n  const { setTheme, resolvedTheme } = useThemeSwitcher();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n    void loadFoodTrucksHelper(setTrucks, setLoading);\n    getUserLocationHelper(setUserLocation);\n  }, []);\n\n  const loadNearbyTrucks = async () => {\n    await loadNearbyTrucksHelper(userLocation, setTrucks);\n  };\n\n  const filteredTrucks = trucks.filter(\n    (truck) =>\n      truck.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (truck.description ?? '').toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  if (loading) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\n      <AppHeader\n        mounted={mounted}\n        resolvedTheme={resolvedTheme}\n        setTheme={setTheme}\n        searchTerm={searchTerm}\n        setSearchTerm={setSearchTerm}\n        userLocation={userLocation}\n        loadNearbyTrucks={loadNearbyTrucks}\n      />\n\n      <MainContent\n        filteredTrucks={filteredTrucks}\n        userLocation={userLocation}\n        selectedTruckId={selectedTruckId}\n        setSelectedTruckId={setSelectedTruckId}\n        isOpen={isTruckOpen}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/app/trucks/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/MapDisplay.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (90). Maximum allowed is 50.","line":58,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":147,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css';\nimport 'leaflet-defaulticon-compatibility';\n\n// @ts-expect-error TS(2792): Cannot find module 'react-leaflet'. Did you mean t... Remove this comment to see the full error message\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\nimport type { LatLngExpression } from 'leaflet';\nimport L from 'leaflet';\nimport { useEffect, useState } from 'react'; // Added useState\n\ninterface MapDisplayProps {\n  trucks: Array<{\n    id: string;\n    name: string;\n    current_location: {\n      lat?: number;\n      lng?: number;\n      address?: string;\n    };\n  }>;\n  userLocation?: { lat: number; lng: number };\n  // defaultCenter will be the initial, stable center\n  defaultCenter: LatLngExpression;\n  defaultZoom?: number;\n  onSelectTruck?: (truckId: string) => void;\n  selectedTruckLocation?: LatLngExpression;\n}\n\n// Component to handle map view updates\nconst MapViewUpdater = ({\n  center,\n  zoom,\n}: {\n  center: LatLngExpression | undefined;\n  zoom?: number;\n}) => {\n  const map = useMap();\n  useEffect(() => {\n    if (center) {\n      map.flyTo(center, zoom ?? map.getZoom());\n    }\n  }, [center, zoom, map]);\n  // Empty fragment instead of null\n  return <></>;\n};\n\n// Custom food truck icon\nconst foodTruckIcon = new L.Icon({\n  iconUrl: '/food-truck-icon.svg',\n  iconSize: [32, 32],\n  iconAnchor: [16, 32],\n  popupAnchor: [0, -32],\n  className: 'food-truck-marker-icon',\n});\n\nconst MapDisplay = ({\n  trucks,\n  userLocation,\n  defaultCenter, // No longer has a default here, will be passed from parent\n  defaultZoom = 10,\n  onSelectTruck,\n  selectedTruckLocation,\n}: MapDisplayProps) => {\n  const [isMounted, setIsMounted] = useState(false);\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  const validTrucks = trucks.filter(\n    (truck) =>\n      truck.current_location != undefined &&\n      typeof truck.current_location.lat === 'number' &&\n      typeof truck.current_location.lng === 'number',\n  );\n\n  // initialMapCenter is derived from defaultCenter prop or userLocation if available.\n  const initialMapCenter: LatLngExpression =\n    userLocation && typeof userLocation.lat === 'number' && typeof userLocation.lng === 'number'\n      ? [userLocation.lat, userLocation.lng]\n      : defaultCenter;\n\n  if (!isMounted) {\n    // You can return a placeholder or null until the component is mounted\n    // This helps prevent Leaflet from initializing on a container that might be\n    // part of a double-render in StrictMode before full client-side hydration.\n    return (\n      <div\n        style={{\n          height: '100%',\n          width: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundColor: '#f0f0f0',\n        }}\n      >\n        <p>Loading map...</p>\n      </div>\n    );\n  }\n\n  return (\n    <MapContainer\n      center={initialMapCenter}\n      zoom={defaultZoom}\n      scrollWheelZoom={true}\n      style={{ height: '100%', width: '100%' }}\n      className=\"rounded-lg\"\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <MapViewUpdater\n        center={selectedTruckLocation}\n        zoom={selectedTruckLocation ? 13 : undefined}\n      />\n      {validTrucks.map((truck) => (\n        <Marker\n          key={truck.id}\n          position={[truck.current_location.lat!, truck.current_location.lng!]}\n          icon={foodTruckIcon}\n          eventHandlers={{\n            click: () => {\n              if (onSelectTruck) {\n                onSelectTruck(truck.id);\n              }\n            },\n          }}\n        >\n          <Popup>\n            <h4 className=\"font-bold\">{truck.name}</h4>\n            {truck.current_location.address != undefined && truck.current_location.address != '' && <div>{truck.current_location.address}</div>}\n          </Popup>\n        </Marker>\n      ))}\n      {userLocation && (\n        <Marker position={[userLocation.lat, userLocation.lng]}>\n          <Popup>You are here</Popup>\n        </Marker>\n      )}\n    </MapContainer>\n  );\n};\n\nexport default MapDisplay;\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/SearchFilters.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'MainSearchSection' has too many lines (53). Maximum allowed is 50.","line":12,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":64,"endColumn":2},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'SearchFilters' has too many lines (83). Maximum allowed is 50.","line":176,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":258,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\nimport { Search, Filter, Clock } from 'lucide-react';\n\n// Main search section component\nfunction MainSearchSection({\n  filters,\n  setFilters,\n  loading,\n  handleSearch,\n  showAdvanced,\n  setShowAdvanced,\n  activeFilterCount\n}: {\n  readonly filters: SearchFilters;\n  readonly setFilters: (filters: SearchFilters) => void;\n  readonly loading?: boolean;\n  readonly handleSearch: () => void;\n  readonly showAdvanced: boolean;\n  readonly setShowAdvanced: (show: boolean) => void;\n  readonly activeFilterCount: number;\n}) {\n  return (\n    <div className=\"flex flex-wrap items-center gap-2 sm:space-x-2\">\n      <div className=\"relative flex-grow min-w-[200px]\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 h-4 w-4\" />\n        <Input\n          placeholder=\"Search food trucks, cuisine, or menu items...\"\n          value={filters.query}\n          onChange={(e) => setFilters({ ...filters, query: e.target.value })}\n          className=\"pl-10 w-full dark:bg-slate-700 dark:text-gray-100 dark:placeholder-gray-400\"\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              handleSearch();\n            }\n          }}\n        />\n      </div>\n      <Button onClick={handleSearch} disabled={loading} className=\"flex-shrink-0\">\n        <Search className=\"h-4 w-4 mr-2\" />\n        Search\n      </Button>\n      <Button\n        variant=\"outline\"\n        onClick={() => setShowAdvanced(!showAdvanced)}\n        className=\"dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700 flex-shrink-0\"\n      >\n        <Filter className=\"h-4 w-4 mr-2\" />\n        Filters\n        {activeFilterCount > 0 && (\n          <Badge variant=\"secondary\" className=\"ml-2 dark:bg-slate-700 dark:text-gray-300\">\n            {activeFilterCount}\n          </Badge>\n        )}\n      </Button>\n    </div>\n  );\n}\n\n// Quick filters section component\nfunction QuickFiltersSection({\n  filters,\n  setFilters,\n  clearFilters\n}: {\n  readonly filters: SearchFilters;\n  readonly setFilters: (filters: SearchFilters) => void;\n  readonly clearFilters: () => void;\n}) {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Button\n        variant={filters.openNow ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setFilters({ ...filters, openNow: !filters.openNow })}\n        className=\"dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700\"\n      >\n        <Clock className=\"h-4 w-4 mr-1\" />\n        Open Now\n      </Button>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={clearFilters}\n        className=\"dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700\"\n      >\n        Clear All\n      </Button>\n    </div>\n  );\n}\n\n// Cuisine types section component\nfunction CuisineTypesSection({\n  filters,\n  setFilters,\n  cuisineTypes\n}: {\n  readonly filters: SearchFilters;\n  readonly setFilters: (filters: SearchFilters) => void;\n  readonly cuisineTypes: readonly string[];\n}) {\n  return (\n    <div>\n      <label className=\"text-sm font-medium mb-2 block dark:text-gray-100\">\n        Cuisine Type\n      </label>\n      <div className=\"flex flex-wrap gap-2\">\n        {cuisineTypes.map((cuisine) => (\n          <Badge\n            key={cuisine}\n            variant={filters.cuisine === cuisine ? 'default' : 'outline'}\n            className=\"cursor-pointer dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700\"\n            onClick={() =>\n              setFilters({\n                ...filters,\n                cuisine: filters.cuisine === cuisine ? '' : cuisine,\n              })\n            }\n          >\n            {cuisine}\n          </Badge>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Distance slider section component\nfunction DistanceSliderSection({\n  filters,\n  setFilters\n}: {\n  readonly filters: SearchFilters;\n  readonly setFilters: (filters: SearchFilters) => void;\n}) {\n  return (\n    <div>\n      <label className=\"text-sm font-medium mb-2 block dark:text-gray-100\">\n        Distance: {filters.radius} km\n      </label>\n      <input\n        type=\"range\"\n        min=\"1\"\n        max=\"50\"\n        value={filters.radius}\n        onChange={(e) => setFilters({ ...filters, radius: Number(e.target.value) })}\n        className=\"w-full accent-blue-600 dark:accent-blue-500\"\n      />\n      <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n        <span>1 km</span>\n        <span>50 km</span>\n      </div>\n    </div>\n  );\n}\n\ninterface SearchFiltersProps {\n  readonly onSearch: (filters: SearchFilters) => void;\n  readonly loading?: boolean;\n}\n\ninterface SearchFilters {\n  query: string;\n  cuisine: string;\n  openNow: boolean;\n  radius: number;\n}\n\nexport function SearchFilters({ onSearch, loading }: SearchFiltersProps) {\n  const [filters, setFilters] = useState<SearchFilters>({\n    query: '',\n    cuisine: '',\n    openNow: false,\n    radius: 10,\n  });\n\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  const cuisineTypes = [\n    'Mexican',\n    'American',\n    'Asian',\n    'Italian',\n    'BBQ',\n    'Burgers',\n    'Tacos',\n    'Pizza',\n    'Sandwiches',\n    'Desserts',\n  ];\n\n  const handleSearch = () => {\n    onSearch(filters);\n  };\n\n  const clearFilters = () => {\n    const clearedFilters = {\n      query: '',\n      cuisine: '',\n      openNow: false,\n      radius: 10,\n    };\n    setFilters(clearedFilters);\n    onSearch(clearedFilters);\n  };\n\n  const activeFilterCount = [\n    filters.query !== '',\n    filters.cuisine !== '',\n    filters.openNow === true\n  ].filter(Boolean).length;\n\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardContent className=\"p-4\">\n        <div className=\"space-y-4\">\n          <MainSearchSection\n            filters={filters}\n            setFilters={setFilters}\n            loading={loading}\n            handleSearch={handleSearch}\n            showAdvanced={showAdvanced}\n            setShowAdvanced={setShowAdvanced}\n            activeFilterCount={activeFilterCount}\n          />\n\n          {showAdvanced && (\n            <div className=\"space-y-4 pt-4 border-t dark:border-slate-700\">\n              <QuickFiltersSection\n                filters={filters}\n                setFilters={setFilters}\n                clearFilters={clearFilters}\n              />\n\n              <CuisineTypesSection\n                filters={filters}\n                setFilters={setFilters}\n                cuisineTypes={cuisineTypes}\n              />\n\n              <DistanceSliderSection\n                filters={filters}\n                setFilters={setFilters}\n              />\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":32,"column":15,"nodeType":null,"endLine":32,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[1099,1102],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/TruckCard.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":146,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":146,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4827,4845],"text":"(verificationStatus != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4827,4845],"text":"(verificationStatus ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4827,4845],"text":"(Boolean(verificationStatus))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":241,"column":26,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":251,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[8296,8429],"text":"Readonly<{\n  truck: FoodTruck;\n  isOpen: boolean;\n  popularItems: Array<{ name: string; price?: number }>;\n  priceRange: string | undefined;\n}>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":267,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":267,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9203,9214],"text":"item.price == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[9204,9214],"text":"(item.price ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9203,9214],"text":"!Boolean(item.price)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":267,"column":57,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":267,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9219,9229],"text":"(priceRange != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9219,9229],"text":"(priceRange ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9219,9229],"text":"(Boolean(priceRange))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":279,"column":32,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":279,"endColumn":67,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[9504,9523],"text":"Readonly<{ todayHours: any }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":279,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9518,9521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9518,9521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":280,"column":8,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":280,"endColumn":18,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[9534,9544],"text":"(Boolean(todayHours))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":280,"column":27,"nodeType":"Literal","messageId":"error","endLine":280,"endColumn":31,"suggestions":[{"messageId":"remove","fix":{"range":[9553,9557],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[9553,9557],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ open: string; close: string; closed: boolean; }`.","line":288,"column":24,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":288,"endColumn":34},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":296,"column":26,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":296,"endColumn":57,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[10000,10020],"text":"Readonly<{ truck: FoodTruck }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'TruckCard' has too many lines (55). Maximum allowed is 50.","line":317,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":371,"endColumn":2}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n{/* @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message */}\nimport { MapPin, Phone, Star, Clock, Globe, Eye } from 'lucide-react';\n// @ts-expect-error TS(2792): Cannot find module 'next/link'. Did you mean to se... Remove this comment to see the full error message\nimport Link from 'next/link';\n\ninterface FoodTruck {\n  id: string;\n  name: string;\n  description: string;\n  current_location?: {\n    address: string;\n  };\n  operating_hours?: Record<string, { open: string; close: string; closed: boolean }>;\n  contact_info?: {\n    phone?: string;\n    website?: string;\n    email?: string;\n  };\n  social_media?: {\n    instagram?: string;\n    facebook?: string;\n    twitter?: string;\n  };\n  average_rating?: number;\n  review_count?: number;\n  data_quality_score: number;\n  verification_status: string;\n  menu?: Array<{\n    category: string;\n    items: Array<{ name: string; price: number }>;\n  }>;\n}\n\ninterface TruckCardProps {\n  readonly truck: FoodTruck;\n  readonly isOpen: boolean;\n  readonly onSelectTruck: () => void;\n  readonly formatPrice: (price: number) => string;\n  readonly userLocation?: { lat: number; lng: number };\n  readonly hideHeader?: boolean; // Add option to hide header when used in accordion\n}\n\n// Helper to format operating hours\nconst formatHours = (hours: { open: string; close: string; closed: boolean }) => {\n  if (hours.closed) return 'Closed';\n  return `${hours.open} - ${hours.close}`;\n};\n\n// Rating section component\nfunction RatingSection({ averageRating, reviewCount }: {\n  readonly averageRating?: number;\n  readonly reviewCount?: number;\n}) {\n  if (averageRating === undefined) return;\n\n  return (\n    <div>\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Rating</h4>\n      <div className=\"flex items-center gap-2\">\n        <div className=\"flex\">\n          {[1, 2, 3, 4, 5].map((star) => (\n            <Star\n              key={star}\n              className={`h-4 w-4 ${\n                star <= Math.round(averageRating ?? 0)\n                  ? 'text-yellow-400 fill-current'\n                  : 'text-gray-300'\n              }`}\n            />\n          ))}\n        </div>\n        <span className=\"text-sm font-medium dark:text-gray-200\">\n          {averageRating.toFixed(1)}\n        </span>\n        {(reviewCount !== undefined) && (\n          <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n            ({reviewCount} reviews)\n          </span>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Menu section component\nfunction MenuSection({ popularItems, formatPrice }: {\n  readonly popularItems: Array<{ name: string; price?: number }>;\n  readonly formatPrice: (price: number) => string;\n}) {\n  return (\n    <div>\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Popular Items</h4>\n      <div className=\"space-y-1\">\n        {popularItems.map((item, idx) => (\n          <div key={idx} className=\"flex justify-between text-sm dark:text-gray-300\">\n            <span className=\"truncate dark:text-gray-200\">{item.name}</span>\n            {typeof item.price === 'number' && item.price > 0 && (\n              <span className=\"text-green-600 dark:text-green-400 ml-2\">\n                {formatPrice(item.price)}\n              </span>\n            )}\n          </div>\n        ))}\n        {popularItems.length === 0 && (\n          <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Menu not available</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Contact section component\nfunction ContactSection({ contactInfo, verificationStatus }: {\n  readonly contactInfo?: { phone?: string; website?: string };\n  readonly verificationStatus?: string;\n}) {\n  return (\n    <div>\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Contact</h4>\n      <div className=\"space-y-1 dark:text-gray-300\">\n        {(contactInfo?.phone !== undefined) && (\n          <a\n            href={`tel:${contactInfo.phone}`}\n            className=\"flex items-center text-sm hover:text-blue-600 dark:hover:text-blue-400\"\n          >\n            <Phone className=\"h-3 w-3 mr-1\" />\n            <span className=\"truncate\">{contactInfo.phone}</span>\n          </a>\n        )}\n        {(contactInfo?.website !== undefined) && (\n          <a\n            href={contactInfo.website}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"flex items-center text-sm hover:text-blue-600 dark:hover:text-blue-400\"\n          >\n            <Globe className=\"h-3 w-3 mr-1\" />\n            <span className=\"truncate\">Website</span>\n          </a>\n        )}\n        {verificationStatus && (\n          <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n            <Star className=\"h-3 w-3 mr-1\" />\n            <span className=\"capitalize\">{verificationStatus}</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Social Media section component\nfunction SocialMediaSection({ socialMedia }: {\n  readonly socialMedia?: { instagram?: string; facebook?: string; twitter?: string };\n}) {\n  if (!socialMedia || Object.keys(socialMedia).length === 0) return;\n\n  return (\n    <div>\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Social Media</h4>\n      <div className=\"flex flex-wrap gap-2\">\n        {(socialMedia.instagram !== undefined) && (\n          <a\n            href={`https://instagram.com/${socialMedia.instagram}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"flex items-center gap-1 px-2 py-1 bg-pink-100 text-pink-800 rounded-md text-xs hover:bg-pink-200 dark:bg-pink-900 dark:text-pink-200\"\n          >\n            <Globe className=\"h-3 w-3\" />\n            Instagram\n          </a>\n        )}\n        {(socialMedia.facebook !== undefined) && (\n          <a\n            href={`https://facebook.com/${socialMedia.facebook}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-xs hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200\"\n          >\n            <Globe className=\"h-3 w-3\" />\n            Facebook\n          </a>\n        )}\n        {(socialMedia.twitter !== undefined) && (\n          <a\n            href={`https://twitter.com/${socialMedia.twitter}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"flex items-center gap-1 px-2 py-1 bg-sky-100 text-sky-800 rounded-md text-xs hover:bg-sky-200 dark:bg-sky-900 dark:text-sky-200\"\n          >\n            <Globe className=\"h-3 w-3\" />\n            Twitter\n          </a>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Helper functions extracted from TruckCard to reduce function length\n\n// Get popular menu items for display\nfunction getPopularItems(truck: FoodTruck) {\n  if (!truck.menu || truck.menu.length === 0) return [];\n  return truck.menu[0]?.items?.slice(0, 3) ?? [];\n}\n\n// Determine price range fallback from menu items\nfunction getPriceRange(truck: FoodTruck) {\n  // Flatten all prices from all menu items\n  const prices = (truck.menu ?? [])\n    .flatMap((cat) => cat.items)\n    .map((item) => (typeof item.price === 'number' ? item.price : undefined))\n    .filter((p): p is number => p !== undefined && !Number.isNaN(p));\n  if (prices.length === 0) return;\n  const min = Math.min(...prices);\n  const max = Math.max(...prices);\n  if (max < 10) return '$';\n  if (min >= 10 && max <= 20) return '$$';\n  if (min > 20) return '$$$';\n  if (min < 10 && max > 20) return '$-$$$';\n  if (min < 10 && max <= 20) return '$-$$';\n  if (min >= 10 && max > 20) return '$$-$$$';\n  return '$';\n}\n\n// Get today's operating hours\nfunction getTodayHours(truck: FoodTruck) {\n  if (!truck.operating_hours) return;\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  const todayKey = days[new Date().getDay()];\n  return truck.operating_hours[todayKey];\n}\n\n// Card header component extracted from TruckCard\nfunction TruckCardHeader({\n  truck,\n  isOpen,\n  popularItems,\n  priceRange\n}: {\n  truck: FoodTruck;\n  isOpen: boolean;\n  popularItems: Array<{ name: string; price?: number }>;\n  priceRange: string | undefined;\n}) {\n  return (\n    <CardHeader>\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex-1\">\n          <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\n          {(truck.current_location?.address !== undefined) && (\n            <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\n              <MapPin className=\"h-4 w-4 mr-1\" />\n              {truck.current_location.address}\n            </CardDescription>\n          )}\n        </div>\n        <div className=\"flex flex-col items-end space-y-1\">\n          <Badge variant={isOpen ? 'default' : 'secondary'}>{isOpen ? 'Open' : 'Closed'}</Badge>\n          {/* Show price range fallback if no explicit prices */}\n          {popularItems.every((item) => !item.price) && priceRange && (\n            <Badge variant=\"outline\" className=\"mt-1\">\n              {priceRange}\n            </Badge>\n          )}\n        </div>\n      </div>\n    </CardHeader>\n  );\n}\n\n// Operating hours section extracted from TruckCard\nfunction OperatingHoursSection({ todayHours }: { todayHours: any }) {\n  if (!todayHours) return null;\n\n  return (\n    <div>\n      <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Today's Hours</h4>\n      <div className=\"flex items-center gap-2\">\n        <Clock className=\"h-3 w-3 text-gray-500\" />\n        <span className=\"text-sm dark:text-gray-300\">\n          {formatHours(todayHours)}\n        </span>\n      </div>\n    </div>\n  );\n}\n\n// Card footer with action buttons extracted from TruckCard\nfunction TruckCardFooter({ truck }: { truck: FoodTruck }) {\n  return (\n    <div className=\"px-4 py-2 border-t border-gray-200 dark:border-gray-700\">\n      <div className=\"flex gap-2\">\n        {/* @ts-expect-error TS(2322): Type '{ children: Element; asChild: true; classNam... Remove this comment to see the full error message */}\n        <Button asChild className=\"flex-1\" variant=\"outline\">\n          <Link href={`/trucks/${truck.id}`}>\n            <Eye className=\"h-4 w-4 mr-2\" />\n            View Details\n          </Link>\n        </Button>\n        {truck.verification_status === 'verified' && (\n          <Button className=\"flex-1\" variant=\"default\" disabled>\n            Book Me\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport function TruckCard({\n  truck,\n  isOpen,\n  onSelectTruck,\n  formatPrice,\n  hideHeader = false,\n}: TruckCardProps) {\n  const popularItems = getPopularItems(truck);\n  const priceRange = getPriceRange(truck);\n  const todayHours = getTodayHours(truck);\n\n  return (\n    <Card\n      className={`hover:shadow-md transition-shadow cursor-pointer dark:bg-slate-800 dark:border-slate-700 ${hideHeader ? 'shadow-none border-none bg-transparent dark:bg-transparent' : ''}`}\n      onClick={onSelectTruck}\n    >\n      {!hideHeader && (\n        <TruckCardHeader\n          truck={truck}\n          isOpen={isOpen}\n          popularItems={popularItems}\n          priceRange={priceRange}\n        />\n      )}\n      <CardContent className={hideHeader ? 'pt-0' : ''}>\n        {truck.description && (\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">{truck.description}</p>\n        )}\n        <div className=\"space-y-4\">\n          {/* Ratings & Hours Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <RatingSection averageRating={truck.average_rating} reviewCount={truck.review_count} />\n            <OperatingHoursSection todayHours={todayHours} />\n          </div>\n\n          {/* Menu & Contact Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <MenuSection popularItems={popularItems} formatPrice={formatPrice} />\n            <ContactSection contactInfo={truck.contact_info} verificationStatus={truck.verification_status} />\n          </div>\n\n          <SocialMediaSection socialMedia={truck.social_media} />\n        </div>\n        {truck.verification_status && (\n          <div className=\"mt-2\">\n            <Badge variant={truck.verification_status === 'verified' ? 'default' : 'secondary'}>\n              <span className=\"capitalize\">{truck.verification_status}</span>\n            </Badge>\n          </div>\n        )}\n      </CardContent>\n      <TruckCardFooter truck={truck} />\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/WebVitalsReporter.tsx","messages":[{"ruleId":"sonarjs/no-redundant-jump","severity":2,"message":"Remove this redundant jump.","line":19,"column":3,"nodeType":"ReturnStatement","messageId":"removeRedundantJump","endLine":19,"endColumn":10,"suggestions":[{"messageId":"suggestJumpRemoval","fix":{"range":[464,474],"text":""},"desc":"Remove this redundant jump"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect } from 'react';\nimport { initWebVitalsMonitoring } from '@/lib/performance/webVitals';\n\n/**\n * Web Vitals Reporter Component\n * Initializes Core Web Vitals monitoring for the application\n */\nexport function WebVitalsReporter() {\n  useEffect(() => {\n    // Only initialize in browser environment\n    if (globalThis.window != undefined) {\n      initWebVitalsMonitoring();\n    }\n  }, []);\n\n  // This component doesn't render anything\n  return;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/DataCleanupDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/RealtimeStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupHeader.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":14,"column":31,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":14,"endColumn":99,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[358,376],"text":"Readonly<CleanupHeaderProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Eye, RefreshCw, Play } from 'lucide-react';\n\ninterface CleanupHeaderProps {\n  isRunning: boolean;\n  onPreview: () => void;\n  onDryRun: () => void;\n  onRunCleanup: () => void;\n}\n\nexport function CleanupHeader({ isRunning, onPreview, onDryRun, onRunCleanup }: CleanupHeaderProps) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div>\n        <h2 className=\"text-2xl font-bold tracking-tight\">Data Cleanup & Quality</h2>\n        <p className=\"text-muted-foreground\">\n          Automated data quality improvements and duplicate prevention\n        </p>\n      </div>\n      <div className=\"flex gap-2\">\n        <Button variant=\"outline\" onClick={onPreview} disabled={isRunning}>\n          <Eye className=\"h-4 w-4 mr-2\" />\n          Preview Changes\n        </Button>\n        <Button variant=\"outline\" onClick={onDryRun} disabled={isRunning}>\n          <RefreshCw className={`h-4 w-4 mr-2 ${isRunning ? 'animate-spin' : ''}`} />\n          Dry Run\n        </Button>\n        <Button onClick={onRunCleanup} disabled={isRunning}>\n          <Play className=\"h-4 w-4 mr-2\" />\n          Run Cleanup\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupPreview.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":32,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":68,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[248,267],"text":"Readonly<CleanupPreviewProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\ninterface CleanupPreviewProps {\n  previewData: unknown;\n}\n\nexport function CleanupPreview({ previewData }: CleanupPreviewProps) {\n  if (previewData == undefined) {\n    return;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Cleanup Preview</CardTitle>\n        <CardDescription>\n          Estimated changes (based on sample of 10 trucks)\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {(previewData as { estimated_improvements: number }).estimated_improvements}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Trucks to Improve</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {(previewData as { estimated_duplicates: number }).estimated_duplicates}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Duplicates Found</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {(previewData as { operations?: unknown[] }).operations?.length ?? 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Operations Ready</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              ~{Math.round(((previewData as { estimated_improvements: number }).estimated_improvements / 10) * 100)}%\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Improvement Rate</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/CleanupResults.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'CleanupResults' has too many lines (86). Maximum allowed is 50.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":101,"endColumn":2},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":16,"column":32,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":16,"endColumn":67,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[599,618],"text":"Readonly<CleanupResultsProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { CheckCircle, AlertTriangle } from 'lucide-react';\nimport { CleanupResult } from '@/hooks/useDataCleanup';\nimport { operationConfig } from './OperationSelector';\n\ninterface CleanupResultsProps {\n  lastResult: CleanupResult;\n}\n\nexport function CleanupResults({ lastResult }: CleanupResultsProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CheckCircle className=\"h-5 w-5 text-green-600\" />\n          Last Cleanup Results\n        </CardTitle>\n        <CardDescription>\n          Completed in {Math.round(lastResult.duration / 1000)}s - {lastResult.totalProcessed} trucks processed\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Summary Cards */}\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {lastResult.summary.trucksImproved}\n            </div>\n            <div className=\"text-sm text-blue-700 dark:text-blue-300\">Trucks Improved</div>\n          </div>\n          <div className=\"text-center p-3 bg-purple-50 dark:bg-purple-950 rounded-lg\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {lastResult.summary.duplicatesRemoved}\n            </div>\n            <div className=\"text-sm text-purple-700 dark:text-purple-300\">Duplicates Removed</div>\n          </div>\n          <div className=\"text-center p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {lastResult.summary.qualityScoreImprovement}\n            </div>\n            <div className=\"text-sm text-green-700 dark:text-green-300\">Quality Updates</div>\n          </div>\n          <div className=\"text-center p-3 bg-red-50 dark:bg-red-950 rounded-lg\">\n            <div className=\"text-2xl font-bold text-red-600\">\n              {lastResult.summary.placeholdersRemoved}\n            </div>\n            <div className=\"text-sm text-red-700 dark:text-red-300\">Placeholders Removed</div>\n          </div>\n        </div>\n\n        {/* Operation Details */}\n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold\">Operation Details</h4>\n          {lastResult.operations.map((operation, index) => (\n            <div key={index} className=\"border rounded-lg p-3\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2\">\n                  {operationConfig[operation.type as keyof typeof operationConfig]?.icon}\n                  <span className=\"font-medium\">{operation.description}</span>\n                </div>\n                <Badge variant={operation.errorCount > 0 ? 'destructive' : 'default'}>\n                  {operation.successCount}/{operation.affectedCount}\n                </Badge>\n              </div>\n              \n              {operation.affectedCount > 0 && (\n                <Progress \n                  value={(operation.successCount / operation.affectedCount) * 100} \n                  className=\"h-2 mb-2\"\n                />\n              )}\n              \n              {operation.errors.length > 0 && (\n                <Alert variant=\"destructive\" className=\"mt-2\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertTitle>Errors ({operation.errors.length})</AlertTitle>\n                  <AlertDescription>\n                    <div className=\"max-h-20 overflow-y-auto text-xs\">\n                      {operation.errors.slice(0, 3).map((error, i) => (\n                        <div key={i}>{error}</div>\n                      ))}\n                      {operation.errors.length > 3 && (\n                        <div>... and {operation.errors.length - 3} more</div>\n                      )}\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/admin/cleanup/OperationSelector.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":47,"column":35,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":47,"endColumn":100,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[1410,1432],"text":"Readonly<OperationSelectorProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle, Trash2, Phone, MapPin, Star, Merge } from 'lucide-react';\n\nexport { operationConfig };\n\ninterface OperationSelectorProps {\n  selectedOperations: string[];\n  onToggleOperation: (operation: string) => void;\n}\n\nconst operationConfig = {\n  remove_placeholders: {\n    name: 'Remove Placeholders',\n    description: 'Remove placeholder and mock data values',\n    icon: <Trash2 className=\"h-4 w-4\" />,\n    color: 'text-red-600'\n  },\n  normalize_phone: {\n    name: 'Normalize Phone Numbers',\n    description: 'Format phone numbers consistently',\n    icon: <Phone className=\"h-4 w-4\" />,\n    color: 'text-blue-600'\n  },\n  fix_coordinates: {\n    name: 'Fix GPS Coordinates',\n    description: 'Correct invalid location coordinates',\n    icon: <MapPin className=\"h-4 w-4\" />,\n    color: 'text-green-600'\n  },\n  update_quality_scores: {\n    name: 'Update Quality Scores',\n    description: 'Recalculate data quality scores',\n    icon: <Star className=\"h-4 w-4\" />,\n    color: 'text-yellow-600'\n  },\n  merge_duplicates: {\n    name: 'Merge Duplicates',\n    description: 'Identify and merge duplicate entries',\n    icon: <Merge className=\"h-4 w-4\" />,\n    color: 'text-purple-600'\n  }\n};\n\nexport function OperationSelector({ selectedOperations, onToggleOperation }: OperationSelectorProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Cleanup Operations</CardTitle>\n        <CardDescription>\n          Select which cleanup operations to run\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-3\">\n          {Object.entries(operationConfig).map(([key, config]) => (\n            <div\n              key={key}\n              className={`flex items-center space-x-3 p-3 border rounded-lg cursor-pointer transition-colors ${\n                selectedOperations.includes(key)\n                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-950'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => onToggleOperation(key)}\n            >\n              <div className={config.color}>\n                {config.icon}\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-sm\">{config.name}</div>\n                <div className=\"text-xs text-muted-foreground\">{config.description}</div>\n              </div>\n              {selectedOperations.includes(key) && (\n                <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n              )}\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckBasicInfo.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":32,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":62,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[319,338],"text":"Readonly<TruckBasicInfoProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckBasicInfoProps {\n  truck: FoodTruck;\n}\n\nexport function TruckBasicInfo({ truck }: TruckBasicInfoProps) {\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"dark:text-gray-100\">About</CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Food truck information</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Name</label>\n          <p className=\"text-lg font-semibold dark:text-gray-100\">{truck.name}</p>\n        </div>\n        \n        {truck.description != undefined && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Description</label>\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.description}</p>\n          </div>\n        )}\n\n        {truck.cuisine_type && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Cuisine Type</label>\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.cuisine_type}</p>\n          </div>\n        )}\n\n        {truck.price_range && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Price Range</label>\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {truck.price_range}\n            </Badge>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckContactInfo.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":23,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":22,"endColumn":2,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[374,509],"text":"Readonly<{\n  icon: React.ComponentType<{ className?: string }>;\n  label: string;\n  value?: string;\n  href?: string;\n  unavailableText: string;\n}>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":37,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":37,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[960,964],"text":"(href != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[960,964],"text":"(href ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[960,964],"text":"(Boolean(href))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":54,"column":27,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":54,"endColumn":84,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[1532,1572],"text":"Readonly<{ socialMedia?: Record<string, string> }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":91,"column":34,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":91,"endColumn":66,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[2837,2858],"text":"Readonly<TruckContactInfoProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":106,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":106,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3399,3424],"text":"((truck.contact_info?.phone) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3399,3424],"text":"((truck.contact_info?.phone) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3399,3424],"text":"(Boolean((truck.contact_info?.phone)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":114,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":114,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3668,3693],"text":"((truck.contact_info?.email) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3668,3693],"text":"((truck.contact_info?.email) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3668,3693],"text":"(Boolean((truck.contact_info?.email)))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Phone, Mail, Globe } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckContactInfoProps {\n  truck: FoodTruck;\n}\n\nfunction ContactField({ \n  icon: Icon, \n  label, \n  value, \n  href, \n  unavailableText \n}: {\n  icon: React.ComponentType<{ className?: string }>;\n  label: string;\n  value?: string;\n  href?: string;\n  unavailableText: string;\n}) {\n  if (value == undefined) {\n    return (\n      <div className=\"flex items-center gap-3 text-gray-400\">\n        <Icon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{unavailableText}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <Icon className=\"h-4 w-4 text-gray-500\" />\n      <div>\n        <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{label}</label>\n        {href ? (\n          <a \n            href={href}\n            target={href.startsWith('http') ? '_blank' : undefined}\n            rel={href.startsWith('http') ? 'noopener noreferrer' : undefined}\n            className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline\"\n          >\n            {href.startsWith('http') ? 'Visit Website' : value}\n          </a>\n        ) : (\n          <p className=\"text-gray-900 dark:text-gray-200\">{value}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction SocialMediaLinks({ socialMedia }: { socialMedia?: Record<string, string> }) {\n  if (!socialMedia || Object.keys(socialMedia).length === 0) {\n    return;\n  }\n\n  const socialPlatforms = [\n    { key: 'instagram', name: 'Instagram', baseUrl: 'https://instagram.com/', color: 'pink' },\n    { key: 'facebook', name: 'Facebook', baseUrl: 'https://facebook.com/', color: 'blue' },\n    { key: 'twitter', name: 'Twitter', baseUrl: 'https://twitter.com/', color: 'sky' },\n  ];\n\n  return (\n    <div>\n      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Social Media</label>\n      <div className=\"flex flex-wrap gap-2 mt-2\">\n        {socialPlatforms.map(({ key, name, baseUrl, color }) => {\n          const handle = socialMedia[key];\n          if (handle == undefined) return;\n\n          return (\n            <a\n              key={key}\n              href={`${baseUrl}${handle}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={`flex items-center gap-1 px-2 py-1 bg-${color}-100 text-${color}-800 rounded-md text-sm hover:bg-${color}-200 dark:bg-${color}-900 dark:text-${color}-200`}\n            >\n              <Globe className=\"h-3 w-3\" />\n              {name}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function TruckContactInfo({ truck }: TruckContactInfoProps) {\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Phone className=\"h-5 w-5\" />\n          Contact Information\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Get in touch</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <ContactField\n          icon={Phone}\n          label=\"Phone\"\n          value={truck.contact_info?.phone}\n          href={truck.contact_info?.phone ? `tel:${truck.contact_info.phone}` : undefined}\n          unavailableText=\"No phone number available\"\n        />\n\n        <ContactField\n          icon={Mail}\n          label=\"Email\"\n          value={truck.contact_info?.email}\n          href={truck.contact_info?.email ? `mailto:${truck.contact_info.email}` : undefined}\n          unavailableText=\"No email available\"\n        />\n\n        <ContactField\n          icon={Globe}\n          label=\"Website\"\n          value={truck.contact_info?.website}\n          href={truck.contact_info?.website}\n          unavailableText=\"No website available\"\n        />\n\n        <SocialMediaLinks socialMedia={truck.social_media} />\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckDetailHeader.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":35,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":72,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[257,279],"text":"Readonly<TruckDetailHeaderProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\n\ninterface TruckDetailHeaderProps {\n  truckName: string;\n}\n\nexport function TruckDetailHeader({ truckName }: TruckDetailHeaderProps) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"outline\" size=\"sm\" asChild>\n          <Link href=\"/\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Map\n          </Link>\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight dark:text-gray-100\">{truckName}</h1>\n          <p className=\"text-muted-foreground dark:text-gray-400\">\n            Food truck details and information\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckLocationInfo.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":35,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":68,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[317,339],"text":"Readonly<TruckLocationInfoProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { MapPin } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckLocationInfoProps {\n  truck: FoodTruck;\n}\n\nexport function TruckLocationInfo({ truck }: TruckLocationInfoProps) {\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <MapPin className=\"h-5 w-5\" />\n          Location\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Current location</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {truck.current_location?.address == undefined ? (\n          <p className=\"text-gray-400 text-sm\">No address available</p>\n        ) : (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Address</label>\n            <p className=\"text-gray-900 dark:text-gray-200\">{truck.current_location.address}</p>\n          </div>\n        )}\n\n        {truck.current_location?.lat != undefined && truck.current_location?.lng != undefined && (\n          <div>\n            <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Coordinates</label>\n            <p className=\"text-gray-900 dark:text-gray-200 text-sm\">\n              {truck.current_location.lat.toFixed(6)}, {truck.current_location.lng.toFixed(6)}\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckOperatingHours.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":16,"column":22,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":16,"endColumn":74,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[390,424],"text":"Readonly<{ day: string; dayData?: DayData }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":29,"column":37,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":29,"endColumn":72,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[891,915],"text":"Readonly<TruckOperatingHoursProps>"},"desc":"Mark the props as read-only"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":43,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":43,"endColumn":27,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1514,1531],"text":"(hasOperatingHours ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1514,1531],"text":"(hasOperatingHours === true)"},"desc":"Change condition to check if true (`value === true`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock } from 'lucide-react';\nimport type { FoodTruck } from '@/lib/supabase';\n\ninterface TruckOperatingHoursProps {\n  truck: FoodTruck;\n}\n\ninterface DayData {\n  closed?: boolean;\n  open?: string;\n  close?: string;\n}\n\nfunction DaySchedule({ day, dayData }: { day: string; dayData?: DayData }) {\n  const dayName = day.charAt(0).toUpperCase() + day.slice(1);\n  \n  return (\n    <div className=\"flex justify-between items-center\">\n      <span className=\"text-sm font-medium dark:text-gray-200\">{dayName}</span>\n      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n        {dayData?.closed === true ? 'Closed' : `${dayData?.open ?? 'N/A'} - ${dayData?.close ?? 'N/A'}`}\n      </span>\n    </div>\n  );\n}\n\nexport function TruckOperatingHours({ truck }: TruckOperatingHoursProps) {\n  const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n  const hasOperatingHours = truck.operating_hours && Object.keys(truck.operating_hours).length > 0;\n\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Clock className=\"h-5 w-5\" />\n          Operating Hours\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Daily schedule</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {hasOperatingHours ? (\n          <div className=\"space-y-2\">\n            {daysOfWeek.map((day) => {\n              const dayData = truck.operating_hours?.[day as keyof typeof truck.operating_hours] as DayData | undefined;\n              return (\n                <DaySchedule key={day} day={day} dayData={dayData} />\n              );\n            })}\n          </div>\n        ) : (\n          <p className=\"text-gray-400 text-sm\">Operating hours not available</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/trucks/TruckRatingsReviews.tsx","messages":[{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":10,"column":21,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":10,"endColumn":51,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[346,364],"text":"Readonly<{ rating: number }>"},"desc":"Mark the props as read-only"}]},{"ruleId":"sonarjs/prefer-read-only-props","severity":2,"message":"Mark the props of the component as read-only.","line":27,"column":37,"nodeType":"ObjectPattern","messageId":"readOnlyProps","endLine":27,"endColumn":72,"suggestions":[{"messageId":"readOnlyPropsFix","fix":{"range":[732,756],"text":"Readonly<TruckRatingsReviewsProps>"},"desc":"Mark the props as read-only"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Star, Users } from 'lucide-react';\nimport type { FoodTruckWithRatings } from '@/hooks/useFoodTruckDetails';\n\ninterface TruckRatingsReviewsProps {\n  truck: FoodTruckWithRatings;\n}\n\nfunction StarRating({ rating }: { rating: number }) {\n  return (\n    <div className=\"flex\">\n      {[1, 2, 3, 4, 5].map((star) => (\n        <Star\n          key={star}\n          className={`h-6 w-6 ${\n            star <= Math.round(rating)\n              ? 'text-yellow-400 fill-current'\n              : 'text-gray-300'\n          }`}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport function TruckRatingsReviews({ truck }: TruckRatingsReviewsProps) {\n  if (truck.average_rating == undefined) {\n    return;\n  }\n\n  return (\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n          <Star className=\"h-5 w-5\" />\n          Ratings & Reviews\n        </CardTitle>\n        <CardDescription className=\"dark:text-gray-400\">Customer feedback</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <StarRating rating={truck.average_rating} />\n            <span className=\"text-xl font-semibold dark:text-gray-100\">\n              {truck.average_rating.toFixed(1)}\n            </span>\n          </div>\n          {truck.review_count != undefined && (\n            <div className=\"flex items-center gap-1 text-gray-600 dark:text-gray-400\">\n              <Users className=\"h-4 w-4\" />\n              <span className=\"text-sm\">{truck.review_count} reviews</span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/NavigationMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/ToggleGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/UseToast.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":65,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":119,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// Inspired by react-hot-toast library\nimport * as React from 'react';\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1_000_000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype Action =\n  | {\n      type: 'ADD_TOAST';\n      toast: ToasterToast;\n    }\n  | {\n      type: 'UPDATE_TOAST';\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: 'DISMISS_TOAST';\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: 'REMOVE_TOAST';\n      toastId?: ToasterToast['id'];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST': {\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n    }\n\n    case 'UPDATE_TOAST': {\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      };\n    }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId != undefined && toastId !== '') {\n        addToRemoveQueue(toastId);\n      } else {\n        for (const toast of state.toasts) {\n          addToRemoveQueue(toast.id);\n        }\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case 'REMOVE_TOAST': {\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n    }\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  for (const listener of listeners) {\n    listener(memoryState);\n  }\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open: boolean) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index !== -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, []);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":15,"column":9,"nodeType":null,"messageId":"deprecation","endLine":15,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/carousel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (91). Maximum allowed is 50.","line":48,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":138,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\n// @ts-expect-error TS(2792): Cannot find module 'embla-carousel-react'. Did you... Remove this comment to see the full error message\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: 'horizontal' | 'vertical';\n  setApi?: (api: CarouselApi) => void;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | undefined>(undefined);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />');\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(({ orientation = 'horizontal', opts, setApi, plugins, className, children, ...props }, ref) => {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      // @ts-expect-error TS(2698): Spread types may only be created from object types... Remove this comment to see the full error message\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins,\n  );\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n  const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      return;\n    }\n\n    setCanScrollPrev(api.canScrollPrev());\n    setCanScrollNext(api.canScrollNext());\n  }, []);\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev();\n  }, [api]);\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext();\n  }, [api]);\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault();\n        scrollPrev();\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault();\n        scrollNext();\n      }\n    },\n    [scrollPrev, scrollNext],\n  );\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return;\n    }\n\n    setApi(api);\n  }, [api, setApi]);\n\n  React.useEffect(() => {\n    if (!api) {\n      return;\n    }\n\n    onSelect(api);\n    api.on('reInit', onSelect);\n    api.on('select', onSelect);\n\n    return () => {\n      api?.off('select', onSelect);\n    };\n  }, [api, onSelect]);\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        // @ts-expect-error TS(2571): Object is of type 'unknown'.\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        ref={ref}\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n});\nCarousel.displayName = 'Carousel';\n\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { carouselRef, orientation } = useCarousel();\n\n    return (\n      <div ref={carouselRef} className=\"overflow-hidden\">\n        <div\n          ref={ref}\n          className={cn(\n            'flex',\n            orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n            className,\n          )}\n          {...props}\n        />\n      </div>\n    );\n  },\n);\nCarouselContent.displayName = 'CarouselContent';\n\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel();\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        aria-roledescription=\"slide\"\n        className={cn(\n          'min-w-0 shrink-0 grow-0 basis-full',\n          orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nCarouselItem.displayName = 'CarouselItem';\n\nconst CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  // @ts-expect-error TS(2339): Property 'variant' does not exist on type 'Omit<Bu... Remove this comment to see the full error message\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; defaultChecked?: bool... Remove this comment to see the full error message\n        variant={variant}\n        size={size}\n        className={cn(\n          'absolute  h-8 w-8 rounded-full',\n          orientation === 'horizontal'\n            ? '-left-12 top-1/2 -translate-y-1/2'\n            : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n          className,\n        )}\n        disabled={!canScrollPrev}\n        onClick={scrollPrev}\n        {...props}\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Previous slide</span>\n      </Button>\n    );\n  },\n);\nCarouselPrevious.displayName = 'CarouselPrevious';\n\nconst CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  // @ts-expect-error TS(2339): Property 'variant' does not exist on type 'Omit<Bu... Remove this comment to see the full error message\n  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n    return (\n      <Button\n        ref={ref}\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; defaultChecked?: bool... Remove this comment to see the full error message\n        variant={variant}\n        size={size}\n        className={cn(\n          'absolute h-8 w-8 rounded-full',\n          orientation === 'horizontal'\n            ? '-right-12 top-1/2 -translate-y-1/2'\n            : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n          className,\n        )}\n        disabled={!canScrollNext}\n        onClick={scrollNext}\n        {...props}\n      >\n        <ArrowRight className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Next slide</span>\n      </Button>\n    );\n  },\n);\nCarouselNext.displayName = 'CarouselNext';\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/chart.tsx","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":165,"column":12,"nodeType":"Literal","messageId":"error","endLine":165,"endColumn":16,"suggestions":[{"messageId":"remove","fix":{"range":[5050,5054],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[5050,5054],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"max-params","severity":2,"message":"Function has too many parameters (5). Maximum allowed is 4.","line":199,"column":24,"nodeType":"TSFunctionType","messageId":"exceed","endLine":199,"endColumn":24},{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (88). Maximum allowed is 50.","line":247,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":334,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport * as RechartsPrimitive from 'recharts';\n// Remove unused imports\n// import {\n//   type Payload,\n//   type NameType,\n//   type ValueType,\n// } from \"recharts/types/component/DefaultTooltipContent\"\n\nimport { cn } from '@/lib/utils';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | undefined>(undefined);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (context == undefined) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    config: ChartConfig;\n    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id ?? uniqueId.replaceAll(':', '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = 'Chart';\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([_, itemConfig]) => (itemConfig.theme ?? itemConfig.color) !== undefined);\n  if (colorConfig.length === 0) {\n    return;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ?? itemConfig.color;\n    return color !== undefined && color !== '' ? `  --color-${key}: ${color};` : undefined;\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\n// Helper function to render tooltip label\nfunction useTooltipLabel({\n  hideLabel,\n  payload,\n  label,\n  labelFormatter,\n  labelClassName,\n  config,\n  labelKey\n}: {\n  readonly hideLabel: boolean;\n  readonly payload: unknown[] | undefined;\n  readonly label: unknown;\n  readonly labelFormatter?: (value: unknown, payload: unknown[]) => React.ReactNode;\n  readonly labelClassName?: string;\n  readonly config: ChartConfig;\n  readonly labelKey?: string;\n}) {\n  return React.useMemo(() => {\n    if (hideLabel === true || (payload?.length ?? 0) === 0) {\n      return;\n    }\n\n    const [item] = payload;\n\n    const key = `${labelKey ?? (item as { dataKey?: string; name?: string }).dataKey ?? (item as { dataKey?: string; name?: string }).name ?? 'value'}`;\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\n    const value =\n      (labelKey == undefined && typeof label === 'string') ? config[label]?.label ?? label : itemConfig?.label;\n\n    if (labelFormatter) {\n      return (\n        <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>\n      );\n    }\n\n    if (value === undefined || value === null || value === '') {\n      return;\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>;\n  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\n}\n\n// Helper function to render tooltip indicator\nfunction TooltipIndicator({\n  indicator,\n  hideIndicator,\n  indicatorColor,\n  nestLabel,\n  itemConfig\n}: {\n  readonly indicator: string;\n  readonly hideIndicator: boolean;\n  readonly indicatorColor?: string;\n  readonly nestLabel: boolean;\n  readonly itemConfig?: { icon?: React.ComponentType };\n}) {\n  if (itemConfig?.icon) {\n    return <itemConfig.icon />;\n  }\n\n  if (hideIndicator) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',\n        {\n          'h-2.5 w-2.5': indicator === 'dot',\n          'w-1': indicator === 'line',\n          'w-0 border-[1.5px] border-dashed bg-transparent': indicator === 'dashed',\n          'my-0.5': nestLabel && indicator === 'dashed',\n        },\n      )}\n      style={\n        {\n          '--color-bg': indicatorColor,\n          '--color-border': indicatorColor,\n        } as React.CSSProperties\n      }\n    />\n  );\n}\n\n// Helper function to render tooltip item content\nfunction TooltipItemContent({\n  formatter,\n  itemData,\n  item,\n  index,\n  itemConfig,\n  nestLabel,\n  tooltipLabel\n}: {\n  readonly formatter?: (value: number, name: string, item: unknown, index: number, payload: Record<string, unknown>[]) => React.ReactNode;\n  readonly itemData: { name?: string; dataKey?: string; payload?: unknown; color?: string; value?: number };\n  readonly item: unknown;\n  readonly index: number;\n  readonly itemConfig?: { label?: React.ReactNode };\n  readonly nestLabel: boolean;\n  readonly tooltipLabel: React.ReactNode;\n}) {\n  if (formatter !== undefined && itemData?.value !== undefined && itemData.name !== undefined && itemData.name !== '') {\n    const payloadArray = Array.isArray(itemData.payload)\n      ? (itemData.payload as Record<string, unknown>[])\n      : [];\n    return <>{formatter(itemData.value, itemData.name, item, index, payloadArray)}</>;\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex flex-1 justify-between leading-none',\n        nestLabel ? 'items-end' : 'items-center',\n      )}\n    >\n      <div className=\"grid gap-1.5\">\n        {nestLabel ? tooltipLabel : undefined}\n        <span className=\"text-muted-foreground\">\n          {itemConfig?.label ?? itemData.name}\n        </span>\n      </div>\n      {itemData.value !== undefined && itemData.value !== 0 && (\n        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n          {itemData.value.toLocaleString()}\n        </span>\n      )}\n    </div>\n  );\n}\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<'div'> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: 'line' | 'dot' | 'dashed';\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = 'dot',\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = useTooltipLabel({\n      hideLabel,\n      payload,\n      label,\n      labelFormatter,\n      labelClassName,\n      config,\n      labelKey\n    });\n\n    if (active !== true || (payload?.length ?? 0) === 0) {\n      return;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot';\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\n          className,\n        )}\n      >\n        {nestLabel ? undefined : tooltipLabel}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item: unknown, index: number) => {\n            const itemData = item as { name?: string; dataKey?: string; payload?: unknown; color?: string; value?: number };\n            const key = `${nameKey ?? itemData.name ?? itemData.dataKey ?? 'value'}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor =\n              color ??\n              (itemData.payload !== undefined && itemData.payload !== null && typeof itemData.payload === 'object' && 'fill' in itemData.payload\n                ? String((itemData.payload as Record<string, unknown>).fill)\n                : undefined) ??\n              itemData.color;\n\n            return (\n              <div\n                key={itemData.dataKey}\n                className={cn(\n                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\n                  indicator === 'dot' && 'items-center',\n                )}\n              >\n                <TooltipIndicator\n                  indicator={indicator}\n                  hideIndicator={hideIndicator}\n                  indicatorColor={indicatorColor}\n                  nestLabel={nestLabel}\n                  itemConfig={itemConfig}\n                />\n                <TooltipItemContent\n                  formatter={formatter}\n                  itemData={itemData}\n                  item={item}\n                  index={index}\n                  itemConfig={itemConfig}\n                  nestLabel={nestLabel}\n                  tooltipLabel={tooltipLabel}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = 'ChartTooltip';\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> &\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\n  const { config } = useChart();\n\n  if ((payload?.length ?? 0) === 0) {\n    return;\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className,\n      )}\n    >\n      {payload.map((item: unknown) => {\n        const itemData = item as { dataKey?: string; value?: string; color?: string };\n        const keyValue = nameKey ?? (itemData.dataKey !== undefined && itemData.dataKey !== '' ? String(itemData.dataKey) : 'value');\n        const key = `${keyValue}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={itemData.value as string}\n            className={cn(\n              'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground',\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: itemData.color !== undefined && itemData.color !== '' ? String(itemData.color) : undefined,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\nChartLegendContent.displayName = 'ChartLegend';\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== 'object' || payload == undefined) {\n    return;\n  }\n\n  const payloadPayload =\n    'payload' in payload && typeof (payload as Record<string, unknown>).payload === 'object' && (payload as Record<string, unknown>).payload !== undefined\n      ? (payload as Record<string, unknown>).payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload !== undefined && payloadPayload !== null &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/dataQualityCharts.tsx","messages":[{"ruleId":"sonarjs/no-redundant-jump","severity":2,"message":"Remove this redundant jump.","line":67,"column":3,"nodeType":"ReturnStatement","messageId":"removeRedundantJump","endLine":67,"endColumn":10,"suggestions":[{"messageId":"suggestJumpRemoval","fix":{"range":[1675,1685],"text":""},"desc":"Remove this redundant jump"}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (60). Maximum allowed is 50.","line":71,"column":80,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":130,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\n// SOTA color scheme for data quality categories\nconst QUALITY_COLORS = {\n  high: '#22c55e',    // Green for high quality (≥80%)\n  medium: '#f59e0b',  // Amber for medium quality (60-79%)\n  low: '#ef4444',     // Red for low quality (<60%)\n};\n\ninterface DataQualityStats {\n  total_trucks: number;\n  avg_quality_score: number;\n  high_quality_count: number;\n  medium_quality_count: number;\n  low_quality_count: number;\n  verified_count: number;\n  pending_count: number;\n  flagged_count: number;\n}\n\ninterface DataQualityChartsProps {\n  qualityStats: DataQualityStats;\n}\n\n// Custom tooltip for better accessibility and UX\ninterface TooltipProps {\n  active?: boolean;\n  payload?: Array<{\n    value: number;\n    payload: {\n      percentage?: string;\n    };\n  }>;\n  label?: string;\n}\n\nconst CustomTooltip = ({ active, payload, label }: TooltipProps) => {\n  if (active === true && payload != undefined && payload.length > 0) {\n    return (\n      <div\n        className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\"\n        role=\"status\"\n        aria-live=\"assertive\"\n      >\n        <p className=\"font-medium\">{`${label ?? 'Unknown'}: ${payload[0].value}`}</p>\n        <p className=\"text-sm text-gray-600\">\n          {payload[0].payload.percentage != undefined && payload[0].payload.percentage !== '' && `${payload[0].payload.percentage}% of total`}\n        </p>\n      </div>\n    );\n  }\n  return;\n};\n\n// Quality Distribution Pie Chart Component\nconst QualityDistributionChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\n  const data = [\n    {\n      name: 'High Quality',\n      value: qualityStats.high_quality_count,\n      percentage: ((qualityStats.high_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Medium Quality',\n      value: qualityStats.medium_quality_count,\n      percentage: ((qualityStats.medium_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Low Quality',\n      value: qualityStats.low_quality_count,\n      percentage: ((qualityStats.low_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quality Distribution</CardTitle>\n        <CardDescription>\n          Breakdown of food trucks by data quality categories\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({\n                name,\n                percentage\n              }: {\n                name?: string;\n                percentage?: string;\n              }) => `${name ?? 'Unknown'}: ${percentage ?? '0'}%`}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {data.map((entry, index) => (\n                <Cell \n                  key={`cell-${index}`} \n                  fill={Object.values(QUALITY_COLORS)[index]} \n                />\n              ))}\n            </Pie>\n            <Tooltip content={<CustomTooltip />} />\n          </PieChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Verification Status Bar Chart Component\nconst VerificationStatusChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\n  const data = [\n    {\n      name: 'Verified',\n      count: qualityStats.verified_count,\n      percentage: ((qualityStats.verified_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Pending',\n      count: qualityStats.pending_count,\n      percentage: ((qualityStats.pending_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Flagged',\n      count: qualityStats.flagged_count,\n      percentage: ((qualityStats.flagged_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Verification Status</CardTitle>\n        <CardDescription>\n          Current verification status of all food trucks\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip content={<CustomTooltip />} />\n            <Bar dataKey=\"count\" fill=\"#3b82f6\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Helper function to get score color\nconst getScoreColor = (score: number): string => {\n  if (score >= 0.8) return 'text-green-600';\n  if (score >= 0.6) return 'text-yellow-600';\n  return 'text-red-600';\n};\n\n// Helper function to get quality threshold label\nconst getQualityThreshold = (score: number): string => {\n  if (score >= 0.8) return 'High';\n  if (score >= 0.6) return 'Medium';\n  return 'Low';\n};\n\n// Quality Score Overview Component\nconst QualityScoreOverview: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\n  const averageScore = (qualityStats.avg_quality_score * 100).toFixed(1);\n  const scoreColor = getScoreColor(qualityStats.avg_quality_score);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Overall Quality Score</CardTitle>\n        <CardDescription>\n          Average data quality score across all food trucks\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className={`text-6xl font-bold ${scoreColor}`}>\n            {averageScore}%\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Based on {qualityStats.total_trucks} food trucks\n          </p>\n          <div className=\"mt-4 text-sm\">\n            <div className=\"flex justify-between items-center\">\n              <span>Quality Threshold:</span>\n              <span className=\"font-medium\">\n                {getQualityThreshold(qualityStats.avg_quality_score)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main Data Quality Charts Component\nexport const DataQualityCharts: React.FC<DataQualityChartsProps> = ({ qualityStats }) => {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      <QualityScoreOverview qualityStats={qualityStats} />\n      <QualityDistributionChart qualityStats={qualityStats} />\n      <VerificationStatusChart qualityStats={qualityStats} />\n    </div>\n  );\n};\n\nexport default DataQualityCharts;\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/sidebar.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (96). Maximum allowed is 50.","line":57,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":152,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (92). Maximum allowed is 50.","line":164,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":255,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\n// @ts-expect-error TS(2792): Cannot find module '@radix-ui/react-slot'. Did you... Remove this comment to see the full error message\nimport { Slot } from '@radix-ui/react-slot';\n// @ts-expect-error TS(2792): Cannot find module 'class-variance-authority'. Did... Remove this comment to see the full error message\nimport { VariantProps, cva } from 'class-variance-authority';\n// @ts-expect-error TS(2792): Cannot find module 'lucide-react'. Did you mean to... Remove this comment to see the full error message\nimport { PanelLeft } from 'lucide-react';\n\nimport { useIsMobile } from '@/hooks/UseMobile';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\nimport { Sheet, SheetContent } from '@/components/ui/sheet';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport Cookies from 'js-cookie';\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar:state';\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = '16rem';\nconst SIDEBAR_WIDTH_MOBILE = '18rem';\nconst SIDEBAR_WIDTH_ICON = '3rem';\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b';\n\ntype SidebarContext = {\n  state: 'expanded' | 'collapsed';\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | undefined>(undefined);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error('useSidebar must be used within a SidebarProvider.');\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === 'function' ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        Cookies.set(SIDEBAR_COOKIE_NAME, String(openState), {\n          path: '/',\n          expires: SIDEBAR_COOKIE_MAX_AGE / (60 * 60 * 24), // Convert seconds to days\n        });\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      globalThis.addEventListener('keydown', handleKeyDown);\n      return () => globalThis.removeEventListener('keydown', handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? 'expanded' : 'collapsed';\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                '--sidebar-width': SIDEBAR_WIDTH,\n                '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              'group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar',\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = 'SidebarProvider';\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    side?: 'left' | 'right';\n    variant?: 'sidebar' | 'floating' | 'inset';\n    collapsible?: 'offcanvas' | 'icon' | 'none';\n  }\n>(\n  (\n    {\n      side = 'left',\n      variant = 'sidebar',\n      collapsible = 'offcanvas',\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === 'none') {\n      return (\n        <div\n          className={cn(\n            'flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground',\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === 'collapsed' ? collapsible : ''}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            'duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear',\n            'group-data-[collapsible=offcanvas]:w-0',\n            'group-data-[side=right]:rotate-180',\n            variant === 'floating' || variant === 'inset'\n              ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]'\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon]',\n          )}\n        />\n        <div\n          className={cn(\n            'duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex',\n            side === 'left'\n              ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\n              : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\n            // Adjust the padding for floating and inset variants.\n            variant === 'floating' || variant === 'inset'\n              ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'\n              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = 'Sidebar';\n\nconst SidebarTrigger = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(\n  ({ className, onClick, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <Button\n        ref={ref}\n        data-sidebar=\"trigger\"\n        // @ts-expect-error TS(2322): Type '{ children: Element[]; form?: string | undef... Remove this comment to see the full error message\n        variant=\"ghost\"\n        size=\"icon\"\n        className={cn('h-7 w-7', className)}\n        onClick={(event) => {\n          onClick?.(event);\n          toggleSidebar();\n        }}\n        {...props}\n      >\n        <PanelLeft />\n        <span className=\"sr-only\">Toggle Sidebar</span>\n      </Button>\n    );\n  },\n);\nSidebarTrigger.displayName = 'SidebarTrigger';\n\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<'button'>>(\n  ({ className, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <button\n        ref={ref}\n        data-sidebar=\"rail\"\n        aria-label=\"Toggle Sidebar\"\n        tabIndex={-1}\n        onClick={toggleSidebar}\n        title=\"Toggle Sidebar\"\n        className={cn(\n          'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',\n          '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',\n          '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\n          'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar',\n          '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\n          '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarRail.displayName = 'SidebarRail';\n\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<'main'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <main\n        ref={ref}\n        className={cn(\n          'relative flex min-h-svh flex-1 flex-col bg-background',\n          'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInset.displayName = 'SidebarInset';\n\nconst SidebarInput = React.forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Input\n        ref={ref}\n        data-sidebar=\"input\"\n        className={cn(\n          'h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInput.displayName = 'SidebarInput';\n\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"header\"\n        className={cn('flex flex-col gap-2 p-2', className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarHeader.displayName = 'SidebarHeader';\n\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"footer\"\n        className={cn('flex flex-col gap-2 p-2', className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarFooter.displayName = 'SidebarFooter';\n\nconst SidebarSeparator = React.forwardRef<HTMLDivElement, React.ComponentProps<typeof Separator>>(\n  ({ className, ...props }, ref) => (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn('mx-2 w-auto bg-sidebar-border', className)}\n      {...props}\n    />\n  ),\n);\nSidebarSeparator.displayName = 'SidebarSeparator';\n\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"content\"\n        className={cn(\n          'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarContent.displayName = 'SidebarContent';\n\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        data-sidebar=\"group\"\n        className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroup.displayName = 'SidebarGroup';\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        'duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = 'SidebarGroupLabel';\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        'absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 after:md:hidden',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = 'SidebarGroupAction';\n\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"group-content\"\n      className={cn('w-full text-sm', className)}\n      {...props}\n    />\n  ),\n);\nSidebarGroupContent.displayName = 'SidebarGroupContent';\n\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu\"\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\n      {...props}\n    />\n  ),\n);\nSidebarMenu.displayName = 'SidebarMenu';\n\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\n  ({ className, ...props }, ref) => (\n    <li\n      ref={ref}\n      data-sidebar=\"menu-item\"\n      className={cn('group/menu-item relative', className)}\n      {...props}\n    />\n  ),\n);\nSidebarMenuItem.displayName = 'SidebarMenuItem';\n\nconst sidebarMenuButtonVariants = cva(\n  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\n        outline:\n          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\n      },\n      size: {\n        default: 'h-8 text-sm',\n        sm: 'h-7 text-xs',\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = 'default',\n      size = 'default',\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : 'button';\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (tooltip == undefined) {\n      return button;\n    }\n\n    if (typeof tooltip === 'string') {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== 'collapsed' || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = 'SidebarMenuButton';\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<'button'> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        'absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 after:md:hidden',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        showOnHover &&\n          'group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = 'SidebarMenuAction';\n\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        'absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none',\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuBadge.displayName = 'SidebarMenuBadge';\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Predictable width between 50 to 90%.\n\n  const width = React.useMemo(() => {\n    // Use a more predictable approach for skeleton width to avoid pseudorandom warning\n    const widths = ['50%', '60%', '70%', '80%', '90%'];\n    const index = Math.floor(Date.now() / 1000) % widths.length;\n    return widths[index];\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn('rounded-md h-8 flex gap-2 px-2 items-center', className)}\n      {...props}\n    >\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            '--skeleton-width': width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = 'SidebarMenuSkeleton';\n\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        'mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuSub.displayName = 'SidebarMenuSub';\n\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\n  ({ ...props }, ref) => <li ref={ref} {...props} />,\n);\nSidebarMenuSubItem.displayName = 'SidebarMenuSubItem';\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<'a'> & {\n    asChild?: boolean;\n    size?: 'sm' | 'md';\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = 'md', isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : 'a';\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        'flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground',\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\n        size === 'sm' && 'text-xs',\n        size === 'md' && 'text-sm',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = 'SidebarMenuSubButton';\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/simpleQualityPanel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (93). Maximum allowed is 50.","line":13,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":105,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":31,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type conversion is required.","line":34,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":34,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1127,1141],"text":"Boolean(result.success)"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":34,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":36,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":36,"column":101,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":105,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":40,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":40,"endColumn":79,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":40,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":65,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":65,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { RefreshCw, Settings, Loader2 } from 'lucide-react';\n\ninterface SimpleQualityPanelProps {\n  onRefresh?: () => void;\n}\n\nexport const SimpleQualityPanel: React.FC<SimpleQualityPanelProps> = ({ onRefresh }) => {\n  const [isRecalculating, setIsRecalculating] = useState(false);\n\n  const handleRecalculateAll = async () => {\n    setIsRecalculating(true);\n\n    try {\n      const response = await fetch('/api/admin/data-quality', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'recalculate_all',\n        }),\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const result = await response.json();\n\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access\n      if (result.success) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-member-access\n        alert(`Quality scores updated successfully! ${result.data.updated} trucks updated, ${result.data.errors} errors.`);\n        onRefresh?.();\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\n        throw new Error(result.error ?? 'Failed to recalculate quality scores');\n      }\n    } catch (error) {\n      console.error('Error recalculating quality scores:', error);\n      alert('Failed to recalculate quality scores. Please try again.');\n    } finally {\n      setIsRecalculating(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Settings className=\"h-5 w-5\" />\n          Quality Management Operations\n        </CardTitle>\n        <CardDescription>\n          Bulk operations for managing data quality scores across all food trucks\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Button\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            onClick={handleRecalculateAll}\n            disabled={isRecalculating}\n            className=\"flex items-center gap-2\"\n            variant=\"default\"\n          >\n            {isRecalculating ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4\" />\n            )}\n            Recalculate All Scores\n          </Button>\n        </div>\n\n        <div className=\"border rounded-lg p-4 bg-blue-50/50\">\n          <h4 className=\"font-medium mb-2 text-blue-900\">Quality Score Thresholds</h4>\n          <div className=\"space-y-1 text-sm text-blue-800\">\n            <div className=\"flex justify-between\">\n              <span>High Quality:</span>\n              <Badge className=\"bg-green-100 text-green-800\">≥ 80%</Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Medium Quality:</span>\n              <Badge className=\"bg-yellow-100 text-yellow-800\">60% - 79%</Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Low Quality:</span>\n              <Badge className=\"bg-red-100 text-red-800\">&lt; 60%</Badge>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-xs text-muted-foreground\">\n          <p>\n            <strong>Recalculate All:</strong> Updates quality scores for all food trucks using the latest algorithm.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SimpleQualityPanel;\n","usedDeprecatedRules":[]},{"filePath":"/app/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/UseToast.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":65,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":119,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// Inspired by react-hot-toast library\nimport * as React from 'react';\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1_000_000;\n\nexport type ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype Action =\n  | {\n      type: 'ADD_TOAST';\n      toast: ToasterToast;\n    }\n  | {\n      type: 'UPDATE_TOAST';\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: 'DISMISS_TOAST';\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: 'REMOVE_TOAST';\n      toastId?: ToasterToast['id'];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST': {\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n    }\n\n    case 'UPDATE_TOAST': {\n      return {\n        ...state,\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      };\n    }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId != undefined && toastId !== '') {\n        addToRemoveQueue(toastId);\n      } else {\n        for (const toast of state.toasts) {\n          addToRemoveQueue(toast.id);\n        }\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case 'REMOVE_TOAST': {\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n    }\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  for (const listener of listeners) {\n    listener(memoryState);\n  }\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open: boolean) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index !== -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, []);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/useDataCleanup.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'useDataCleanup' has too many lines (72). Maximum allowed is 50.","line":26,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":97,"endColumn":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\n\nexport interface CleanupOperation {\n  type: string;\n  description: string;\n  affectedCount: number;\n  successCount: number;\n  errorCount: number;\n  errors: string[];\n}\n\nexport interface CleanupResult {\n  totalProcessed: number;\n  operations: CleanupOperation[];\n  summary: {\n    trucksImproved: number;\n    duplicatesRemoved: number;\n    qualityScoreImprovement: number;\n    placeholdersRemoved: number;\n  };\n  duration: number;\n}\n\nexport function useDataCleanup() {\n  const [isRunning, setIsRunning] = useState(false);\n  const [lastResult, setLastResult] = useState<CleanupResult | undefined>();\n  const [previewData, setPreviewData] = useState<unknown>();\n  const [selectedOperations, setSelectedOperations] = useState<string[]>([\n    'remove_placeholders',\n    'normalize_phone',\n    'fix_coordinates',\n    'update_quality_scores'\n  ]);\n\n  const runCleanup = async (dryRun: boolean = false) => {\n    setIsRunning(true);\n    try {\n      const response = await fetch('/api/admin/data-cleanup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: dryRun ? 'dry-run' : 'full-cleanup',\n          options: {\n            operations: selectedOperations,\n            batchSize: 50,\n            dryRun\n          }\n        })\n      });\n\n      const data = await response.json() as { success: boolean; result?: CleanupResult; error?: string };\n\n      if (data.success === true) {\n        setLastResult(data.result);\n      } else {\n        console.error('Cleanup failed:', data.error);\n      }\n    } catch (error) {\n      console.error('Error running cleanup:', error);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const loadPreview = async () => {\n    try {\n      const response = await fetch('/api/admin/data-cleanup?action=preview');\n      const data = await response.json() as { success: boolean; preview?: unknown };\n\n      if (data.success === true) {\n        setPreviewData(data.preview);\n      }\n    } catch (error) {\n      console.error('Error loading preview:', error);\n    }\n  };\n\n  const toggleOperation = (operation: string) => {\n    setSelectedOperations(prev => \n      prev.includes(operation)\n        ? prev.filter(op => op !== operation)\n        : [...prev, operation]\n    );\n  };\n\n  return {\n    isRunning,\n    lastResult,\n    previewData,\n    selectedOperations,\n    runCleanup,\n    loadPreview,\n    toggleOperation\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/hooks/useFoodTruckDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/hooks/useRealtimeAdminEvents.ts","messages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":113,"column":36,"nodeType":null,"messageId":"deprecation","endLine":113,"endColumn":52},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":117,"column":30,"nodeType":null,"messageId":"deprecation","endLine":117,"endColumn":46},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":164,"column":25,"nodeType":null,"messageId":"deprecation","endLine":164,"endColumn":41},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":166,"column":36,"nodeType":null,"messageId":"deprecation","endLine":166,"endColumn":52},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":170,"column":30,"nodeType":null,"messageId":"deprecation","endLine":170,"endColumn":46},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":236,"column":25,"nodeType":null,"messageId":"deprecation","endLine":236,"endColumn":41},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":237,"column":30,"nodeType":null,"messageId":"deprecation","endLine":237,"endColumn":46},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":238,"column":36,"nodeType":null,"messageId":"deprecation","endLine":238,"endColumn":52},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":299,"column":25,"nodeType":null,"messageId":"deprecation","endLine":299,"endColumn":41},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'MutableRefObject' is deprecated.","line":300,"column":30,"nodeType":null,"messageId":"deprecation","endLine":300,"endColumn":46}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Real-time Admin Dashboard Hook\n * \n * Provides real-time updates for admin dashboard using Server-Sent Events (SSE)\n * Implements automatic reconnection, error handling, and event filtering\n */\n\nimport { useState, useEffect, useRef, useCallback } from 'react';\n\n// Utility function for parsing event data\nfunction parseEventData(eventData: string, eventType: string): AdminEvent | undefined {\n  try {\n    return JSON.parse(eventData) as AdminEvent;\n  } catch (error) {\n    console.warn(`Failed to parse ${eventType} event:`, error);\n    return undefined;\n  }\n}\n\n// Setup event listeners for different event types (global scope)\nfunction globalSetupEventListeners(eventSource: EventSource, handleEvent: (event: AdminEvent) => void) {\n  const eventTypes = ['heartbeat', 'scraping_update', 'data_quality_change', 'system_alert'];\n\n  for (const eventType of eventTypes) {\n    eventSource.addEventListener(eventType, (event: MessageEvent) => {\n      const adminEvent = parseEventData(event.data as string, eventType);\n      if (adminEvent) {\n        handleEvent(adminEvent);\n      }\n    });\n  }\n}\n\ninterface AdminEvent {\n  id: string;\n  type: 'scraping_update' | 'data_quality_change' | 'system_alert' | 'user_activity' | 'heartbeat';\n  timestamp: string;\n  data: Record<string, unknown>;\n  severity?: 'info' | 'warning' | 'error' | 'critical';\n}\n\ninterface RealtimeMetrics {\n  scrapingJobs: {\n    active: number;\n    completed: number;\n    failed: number;\n    pending: number;\n  };\n  dataQuality: {\n    averageScore: number;\n    totalTrucks: number;\n    recentChanges: number;\n  };\n  systemHealth: {\n    status: 'healthy' | 'warning' | 'error';\n    uptime: number;\n    lastUpdate: string;\n  };\n}\n\ninterface UseRealtimeAdminEventsOptions {\n  autoConnect?: boolean;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n  eventFilter?: (event: AdminEvent) => boolean;\n}\n\ninterface UseRealtimeAdminEventsReturn {\n  isConnected: boolean;\n  isConnecting: boolean;\n  connectionError: string | null;\n  latestMetrics: RealtimeMetrics | null;\n  recentEvents: AdminEvent[];\n  connect: () => void;\n  disconnect: () => void;\n  clearEvents: () => void;\n  connectionAttempts: number;\n  lastEventTime: Date | null;\n}\n\nfunction useConnectionState() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionError, setConnectionError] = useState<string | undefined>();\n  const [latestMetrics, setLatestMetrics] = useState<RealtimeMetrics | undefined>();\n  const [recentEvents, setRecentEvents] = useState<AdminEvent[]>([]);\n  const [connectionAttempts, setConnectionAttempts] = useState(0);\n  const [lastEventTime, setLastEventTime] = useState<Date | undefined>();\n\n  return {\n    isConnected, setIsConnected,\n    isConnecting, setIsConnecting,\n    connectionError, setConnectionError,\n    latestMetrics, setLatestMetrics,\n    recentEvents, setRecentEvents,\n    connectionAttempts, setConnectionAttempts,\n    lastEventTime, setLastEventTime\n  };\n}\n\nfunction setupEventSourceAuth(): string {\n  const token = localStorage.getItem('supabase.auth.token') ?? sessionStorage.getItem('supabase.auth.token');\n  if (token == undefined || token === '') {\n    throw new Error('No authentication token available');\n  }\n  return token;\n}\n\ninterface EventSourceListenerOptions {\n  eventSource: EventSource;\n  handleEvent: (event: AdminEvent) => void;\n  connectionState: ReturnType<typeof useConnectionState>;\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>;\n  connectionAttempts: number;\n  maxReconnectAttempts: number;\n  reconnectInterval: number;\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>;\n  connect: () => void;\n}\n\nfunction handleOpenEvent(options: EventSourceListenerOptions) {\n  options.connectionState.setIsConnected(true);\n  options.connectionState.setIsConnecting(false);\n  options.connectionState.setConnectionError(undefined);\n  options.connectionState.setConnectionAttempts(0);\n}\n\nfunction handleMessageEvent(event: MessageEvent, handleEventFn: (event: AdminEvent) => void) {\n  const adminEvent = parseEventData(event.data as string, 'message');\n  if (adminEvent) {\n    handleEventFn(adminEvent);\n  }\n}\n\nfunction handleErrorEvent(options: EventSourceListenerOptions, error: Event) {\n  console.error('Real-time admin events error:', error);\n  options.connectionState.setIsConnected(false);\n  options.connectionState.setIsConnecting(false);\n  options.connectionState.setConnectionError('Connection error occurred');\n\n  if (!options.isManuallyDisconnectedRef.current && options.connectionAttempts < options.maxReconnectAttempts) {\n    options.connectionState.setConnectionAttempts(prev => prev + 1);\n    if (options.reconnectTimeoutRef.current) {\n      clearTimeout(options.reconnectTimeoutRef.current);\n    }\n    options.reconnectTimeoutRef.current = setTimeout(() => {\n      if (!options.isManuallyDisconnectedRef.current) {\n        options.connect();\n      }\n    }, options.reconnectInterval);\n  } else if (options.connectionAttempts >= options.maxReconnectAttempts) {\n    options.connectionState.setConnectionError('Max reconnection attempts reached');\n  }\n}\n\nfunction localSetupEventSourceListeners(options: EventSourceListenerOptions) {\n  options.eventSource.addEventListener('open', () => handleOpenEvent(options));\n  options.eventSource.addEventListener('message', (event: MessageEvent) => handleMessageEvent(event, options.handleEvent));\n  options.eventSource.addEventListener('error', (errorEvent: Event) => handleErrorEvent(options, errorEvent));\n  globalSetupEventListeners(options.eventSource, options.handleEvent);\n}\n\ninterface CreateEventSourceConnectionOptions {\n  eventSourceRef: React.MutableRefObject<EventSource | undefined>;\n  isConnecting: boolean;\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>;\n  connectionAttempts: number;\n  maxReconnectAttempts: number;\n  reconnectInterval: number;\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>;\n  handleEvent: (event: AdminEvent) => void;\n  connectionState: ReturnType<typeof useConnectionState>;\n  connect: () => void;\n}\n\nfunction establishEventSource(options: CreateEventSourceConnectionOptions) {\n  setupEventSourceAuth();\n  const eventSource = new EventSource('/api/admin/realtime-events');\n  localSetupEventSourceListeners({ eventSource, ...options });\n  options.eventSourceRef.current = eventSource;\n}\n\nfunction prepareConnectionStateForAttempt(options: CreateEventSourceConnectionOptions): boolean {\n  if (options.eventSourceRef.current || options.isConnecting) {\n    return false;\n  }\n  options.connectionState.setIsConnecting(true);\n  options.connectionState.setConnectionError(undefined);\n  options.isManuallyDisconnectedRef.current = false;\n  return true;\n}\n\nfunction createEventSourceConnection(options: CreateEventSourceConnectionOptions) {\n  if (!prepareConnectionStateForAttempt(options)) {\n    return;\n  }\n  try {\n    establishEventSource(options);\n  } catch (error) {\n    console.error('Failed to establish real-time connection:', error);\n    options.connectionState.setIsConnecting(false);\n    options.connectionState.setConnectionError(error instanceof Error ? error.message : 'Connection failed');\n  }\n}\n\nfunction useEventHandlers(\n  eventFilter: ((event: AdminEvent) => boolean) | undefined,\n  setLastEventTime: (date: Date) => void,\n  setLatestMetrics: (metrics: RealtimeMetrics) => void,\n  setRecentEvents: React.Dispatch<React.SetStateAction<AdminEvent[]>>\n) {\n  return useCallback((event: AdminEvent) => {\n    if (eventFilter && !eventFilter(event)) {\n      return;\n    }\n    setLastEventTime(new Date());\n    switch (event.type) {\n      case 'heartbeat': {\n        if (event.data != undefined && typeof event.data === 'object') {\n          setLatestMetrics(event.data as RealtimeMetrics);\n        }\n        break;\n      }\n      case 'scraping_update':\n      case 'data_quality_change':\n      case 'system_alert':\n      case 'user_activity': {\n        setRecentEvents(prev => [event, ...prev].slice(0, 50));\n        break;\n      }\n    }\n  }, [eventFilter, setLastEventTime, setLatestMetrics, setRecentEvents]);\n}\n\ninterface ConnectionManagementOptions {\n  eventSourceRef: React.MutableRefObject<EventSource | undefined>;\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>;\n  isManuallyDisconnectedRef: React.MutableRefObject<boolean>;\n  connectionState: ReturnType<typeof useConnectionState>;\n  handleEvent: (event: AdminEvent) => void;\n  connectionAttempts: number;\n  maxReconnectAttempts: number;\n  reconnectInterval: number;\n  isConnecting: boolean;\n}\n\nfunction useConnectionManagement(options: ConnectionManagementOptions) {\n  const {\n    eventSourceRef, reconnectTimeoutRef, isManuallyDisconnectedRef, connectionState,\n    handleEvent, connectionAttempts, maxReconnectAttempts, reconnectInterval, isConnecting,\n  } = options;\n  const { setIsConnected, setIsConnecting, setConnectionError, setRecentEvents } = connectionState;\n\n  const connect = useCallback(() => {\n    createEventSourceConnection({ ...options, connect: () => connect() });\n  }, [handleEvent, connectionAttempts, maxReconnectAttempts, reconnectInterval, isConnecting, connectionState, options]);\n\n  const disconnect = useCallback(() => {\n    isManuallyDisconnectedRef.current = true;\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = undefined;\n    }\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = undefined;\n    }\n    setIsConnected(false);\n    setIsConnecting(false);\n    setConnectionError(undefined);\n  }, [setIsConnected, setIsConnecting, setConnectionError, eventSourceRef, reconnectTimeoutRef, isManuallyDisconnectedRef]);\n\n  const clearEvents = useCallback(() => {\n    setRecentEvents([]);\n  }, [setRecentEvents]);\n\n  return { connect, disconnect, clearEvents };\n}\n\nfunction useAutoConnect(autoConnect: boolean, connect: () => void, disconnect: () => void) {\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n    return () => {\n      disconnect();\n    };\n  }, [autoConnect, connect, disconnect]);\n}\n\nfunction useRealtimeAdminEventRefs() {\n  const eventSourceRef = useRef<EventSource | undefined>(undefined);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\n  const isManuallyDisconnectedRef = useRef<boolean>(false);\n  return { eventSourceRef, reconnectTimeoutRef, isManuallyDisconnectedRef };\n}\n\nfunction useRealtimeEventsCleanupEffect(\n  eventSourceRef: React.MutableRefObject<EventSource | undefined>,\n  reconnectTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined>\n) {\n  useEffect(() => {\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n      }\n    };\n  }, [eventSourceRef, reconnectTimeoutRef]);\n}\n\nexport function useRealtimeAdminEvents(\n  options: UseRealtimeAdminEventsOptions = {}\n): UseRealtimeAdminEventsReturn {\n  const { autoConnect = true, reconnectInterval = 5000, maxReconnectAttempts = 10, eventFilter } = options;\n\n  const connectionState = useConnectionState();\n  const { eventSourceRef, reconnectTimeoutRef, isManuallyDisconnectedRef } = useRealtimeAdminEventRefs();\n\n  const handleEvent = useEventHandlers(\n    eventFilter,\n    connectionState.setLastEventTime,\n    connectionState.setLatestMetrics,\n    connectionState.setRecentEvents\n  );\n\n  const connectionManagementOptions: ConnectionManagementOptions = {\n    eventSourceRef,\n    reconnectTimeoutRef,\n    isManuallyDisconnectedRef,\n    connectionState,\n    handleEvent,\n    connectionAttempts: connectionState.connectionAttempts,\n    maxReconnectAttempts,\n    reconnectInterval,\n    isConnecting: connectionState.isConnecting,\n  };\n  const { connect, disconnect, clearEvents } = useConnectionManagement(connectionManagementOptions);\n\n  useAutoConnect(autoConnect, connect, disconnect);\n  useRealtimeEventsCleanupEffect(eventSourceRef, reconnectTimeoutRef);\n\n  return {\n    isConnected: connectionState.isConnected,\n    isConnecting: connectionState.isConnecting,\n    connectionError: connectionState.connectionError,\n    latestMetrics: connectionState.latestMetrics,\n    recentEvents: connectionState.recentEvents,\n    connect,\n    disconnect,\n    clearEvents,\n    connectionAttempts: connectionState.connectionAttempts,\n    lastEventTime: connectionState.lastEventTime\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/ScraperEngine.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'scrapeWebsite' has too many lines (65). Maximum allowed is 50.","line":110,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":174,"endColumn":4},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":110,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":110,"endColumn":22},{"ruleId":"max-lines-per-function","severity":2,"message":"Method 'assessTruckData' has too many lines (76). Maximum allowed is 50.","line":390,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":465,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'makeGeminiRequest' has too many lines (55). Maximum allowed is 50.","line":693,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":747,"endColumn":4}],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":305,"column":39,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":305,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":311,"column":39,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":311,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 26 to the 15 allowed.","line":390,"column":3,"nodeType":null,"messageId":"refactorFunction","endLine":390,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.","line":468,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":468,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from './firecrawl'; // Import the firecrawl singleton\n\ninterface InstagramPost {\n  id: string;\n  caption: string;\n  timestamp: string;\n  location: string;\n  hashtags: string[];\n  engagement: { likes: number; comments: number };\n}\n\ninterface InstagramProfile {\n  followers: number;\n  following: number;\n  posts_count: number;\n  bio: string;\n  contact_info: { email: string; phone: string };\n}\n\ninterface FacebookPost {\n  id: string;\n  content: string;\n  timestamp: string;\n  reactions: { likes: number; loves: number; shares: number };\n  comments: number;\n}\n\ninterface FacebookPageInfo {\n  likes: number;\n  followers: number;\n  check_ins: number;\n  about: string;\n  hours: Record<string, string>;\n}\n\ninterface TwitterTweet {\n  id: string;\n  text: string;\n  timestamp: string;\n  retweets: number;\n  likes: number;\n  replies: number;\n  location: string;\n}\n\ninterface TwitterProfile {\n  followers: number;\n  following: number;\n  tweets_count: number;\n  bio: string;\n  location: string;\n  website: string;\n}\n\ninterface InstagramData {\n  posts: InstagramPost[];\n  profile: InstagramProfile;\n}\n\ninterface FacebookData {\n  posts: FacebookPost[];\n  page_info: FacebookPageInfo;\n}\n\ninterface TwitterData {\n  tweets: TwitterTweet[];\n  profile: TwitterProfile;\n}\n\nexport interface WebsiteScrapeData {\n  markdown?: string;\n  html?: string;\n  metadata?: Record<string, unknown>;\n  is_fallback?: boolean;\n}\n\nexport interface ExtractedHTMLData {\n  name?: string;\n  location?: string;\n  phone?: string;\n  hours?: string;\n  menu?: { item: string; price: string }[];\n}\n\ninterface ScrapeResult {\n  success: boolean;\n  error?: string;\n  data?: InstagramData | FacebookData | TwitterData | WebsiteScrapeData | ExtractedHTMLData;\n  timestamp: string;\n  source: string;\n  note?: string;\n}\n\n// Core scraping engine with anti-detection measures\nexport class ScraperEngine {\n  private userAgents: string[];\n  private requestDelay: number;\n  private maxRetries: number;\n\n  constructor() {\n    this.userAgents = [\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    ];\n    this.requestDelay = 2000;\n    this.maxRetries = 3;\n  }\n\n  async scrapeWebsite(url: string, _selectors?: Record<string, string>): Promise<ScrapeResult> {\n    try {\n      const firecrawlResult = await firecrawl.scrapeUrl(url, {\n        formats: ['markdown', 'html'],\n        onlyMainContent: true,\n      });\n\n      if (!firecrawlResult.success || !firecrawlResult.data) {\n        throw new Error(firecrawlResult.error ?? 'Firecrawl scraping failed to return data.');\n      }\n\n      const returnedData: WebsiteScrapeData = {};\n      if (firecrawlResult.data.markdown != undefined && firecrawlResult.data.markdown !== '') {\n        returnedData.markdown = firecrawlResult.data.markdown;\n      }\n      if (firecrawlResult.data.html != undefined && firecrawlResult.data.html !== '') {\n        returnedData.html = firecrawlResult.data.html;\n      }\n      if (firecrawlResult.data.metadata != undefined) {\n        returnedData.metadata = firecrawlResult.data.metadata;\n      }\n\n      if ((returnedData.markdown == undefined || returnedData.markdown === '') && (returnedData.html == undefined || returnedData.html === '')) {\n        throw new Error('Firecrawl returned no markdown or HTML content.');\n      }\n\n      return {\n        success: true,\n        data: returnedData,\n        timestamp: new Date().toISOString(),\n        source: url,\n      };\n    } catch (error: unknown) {\n      console.warn(`Scraping error for ${url} using Firecrawl:`, error);\n      console.info(`Falling back to basic fetch for ${url}`);\n      try {\n        const response = await fetch(url, { headers: { 'User-Agent': this.getRandomUserAgent() } });\n        if (!response.ok) {\n          throw new Error(\n            `HTTP error ${response.status}: ${response.statusText} during fallback fetch.`,\n          );\n        }\n        const htmlContent = await response.text();\n        return {\n          success: true,\n          data: {\n            html: htmlContent,\n            is_fallback: true,\n          },\n          timestamp: new Date().toISOString(),\n          source: url,\n          note: 'Fetched using basic fetch as Firecrawl failed.',\n        };\n      } catch (fallbackError: unknown) {\n        console.warn(`Fallback fetch error for ${url}:`, fallbackError);\n        return {\n          success: false,\n          error:\n            fallbackError instanceof Error ? fallbackError.message : 'Unknown fallback fetch error',\n          timestamp: new Date().toISOString(),\n          source: url,\n        };\n      }\n    }\n  }\n\n  async scrapeSocialMedia(platform: string, handle: string): Promise<ScrapeResult> {\n    try {\n      await this.randomDelay();\n\n      switch (platform) {\n        case 'instagram': {\n          return this.scrapeInstagram(handle);\n        }\n        case 'facebook': {\n          return this.scrapeFacebook(handle);\n        }\n        case 'twitter': {\n          return this.scrapeTwitter(handle);\n        }\n        default: {\n          throw new Error(`Unsupported platform: ${platform}`);\n        }\n      }\n    } catch (error: unknown) {\n      console.warn(`Social media scraping error for ${platform}/${handle}:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n        source: `social_media:${platform}:${handle}`,\n      };\n    }\n  }\n\n  private async scrapeInstagram(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    return {\n      success: true,\n      data: {\n        posts: [\n          {\n            id: 'post_001',\n            caption: 'Fresh tacos available now at Mission St! 🌮 #foodtruck #tacos',\n            timestamp: new Date(Date.now() - 3_600_000).toISOString(),\n            location: 'Mission St, San Francisco',\n            hashtags: ['foodtruck', 'tacos', 'fresh'],\n            engagement: { likes: 45, comments: 8 },\n          },\n        ],\n        profile: {\n          followers: 1250,\n          following: 340,\n          posts_count: 156,\n          bio: 'Best tacos in SF 🌮 Follow for daily locations!',\n          contact_info: {\n            email: 'contact@tacoparadise.com',\n            phone: '+1-555-0456',\n          },\n        },\n      } as InstagramData, // Type assertion\n      timestamp: new Date().toISOString(),\n      source: `instagram:${handle}`,\n    };\n  }\n\n  private async scrapeFacebook(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    return {\n      success: true,\n      data: {\n        posts: [\n          {\n            id: 'fb_post_001',\n            content:\n              \"Today we'll be at Union Square from 11 AM to 3 PM! Come try our new BBQ burger!\",\n            timestamp: new Date(Date.now() - 7_200_000).toISOString(),\n            reactions: { likes: 23, loves: 5, shares: 3 },\n            comments: 12,\n          },\n        ],\n        page_info: {\n          likes: 890,\n          followers: 1100,\n          check_ins: 450,\n          about: 'Gourmet food truck serving the Bay Area',\n          hours: {\n            monday: '11:00-15:00',\n            tuesday: '11:00-15:00',\n            wednesday: '11:00-15:00',\n            thursday: '11:00-15:00',\n            friday: '11:00-20:00',\n            saturday: '12:00-20:00',\n            sunday: '12:00-16:00',\n          },\n        },\n      } as FacebookData, // Type assertion\n      timestamp: new Date().toISOString(),\n      source: `facebook:${handle}`,\n    };\n  }\n\n  private async scrapeTwitter(handle: string): Promise<ScrapeResult> {\n    await this.randomDelay();\n    return {\n      success: true,\n      data: {\n        tweets: [\n          {\n            id: 'tweet_001',\n            text: 'LIVE at Dolores Park! Fresh burritos and quesadillas available now 🌯',\n            timestamp: new Date(Date.now() - 1_800_000).toISOString(),\n            retweets: 8,\n            likes: 34,\n            replies: 5,\n            location: 'Dolores Park, San Francisco',\n          },\n        ],\n        profile: {\n          followers: 2340,\n          following: 567,\n          tweets_count: 1890,\n          bio: '🚚 SF Food Truck | Fresh Mexican Food | Follow for locations',\n          location: 'San Francisco, CA',\n          website: 'https://tacoparadise.com',\n        },\n      } as TwitterData, // Type assertion\n      timestamp: new Date().toISOString(),\n      source: `twitter:${handle}`,\n    };\n  }\n\n  private getRandomUserAgent(): string {\n    // Using Math.random() for non-cryptographic purposes (e.g., selecting a user agent) is acceptable.\n    // eslint-disable-next-line sonarjs/pseudo-random\n    return this.userAgents[Math.floor(Math.random() * this.userAgents.length)];\n  }\n\n  private async randomDelay(): Promise<void> {\n    // Using Math.random() for non-cryptographic purposes (e.g., simulating delay) is acceptable.\n    // eslint-disable-next-line sonarjs/pseudo-random\n    const delay = this.requestDelay + Math.random() * 1000;\n    return new Promise((resolve) => setTimeout(resolve, delay));\n  }\n\n  async handleRateLimit(retryAfter: number): Promise<void> {\n    console.info(`Rate limited. Waiting ${retryAfter} seconds before retry...`);\n    return new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));\n  }\n\n  async retryWithBackoff<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = this.maxRetries,\n  ): Promise<T> {\n    let lastError: unknown; // Changed to unknown\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error: unknown) {\n        // Catch error as unknown\n        lastError = error;\n        if (attempt === maxRetries) {\n          throw lastError instanceof Error ? lastError : new Error(String(lastError));\n        }\n\n        const backoffDelay = Math.pow(2, attempt) * 1000;\n        console.info(`Attempt ${attempt} failed. Retrying in ${backoffDelay}ms...`);\n        await new Promise((resolve) => setTimeout(resolve, backoffDelay));\n      }\n    }\n\n    throw lastError instanceof Error ? lastError : new Error('Request failed after all retries');\n  }\n}\n\ninterface LocationData {\n  current?: {\n    lat: number | undefined;\n    lng: number | undefined;\n    address?: string;\n  };\n}\n\ninterface ContactInfo {\n  phone?: string;\n  email?: string;\n}\n\ninterface OperatingHours {\n  [key: string]: {\n    open: string;\n    close: string;\n    closed: boolean;\n  };\n}\n\ninterface MenuItem {\n  name: string;\n  description?: string;\n  price: number;\n  dietary_tags?: string[];\n}\n\ninterface MenuCategory {\n  category: string;\n  items: MenuItem[];\n}\n\ninterface TruckData {\n  name: string;\n  location: LocationData;\n  contact?: ContactInfo;\n  operating_hours?: OperatingHours;\n  menu?: MenuCategory[];\n  last_updated?: string;\n}\n\nexport class DataQualityAssessor {\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  assessTruckData(truckData: TruckData): { score: number; issues: string[] } {\n    const issues: string[] = [];\n    let score = 100;\n\n    if (truckData.name == undefined || truckData.name.trim().length === 0) {\n      issues.push('Missing or empty truck name');\n      score -= 20;\n    }\n\n    if (truckData.location?.current == undefined) {\n      issues.push('Missing current location data');\n      score -= 25;\n    } else {\n      if (\n        truckData.location.current.lat === undefined ||\n        truckData.location.current.lng === undefined\n      ) {\n        issues.push('Missing GPS coordinates');\n        score -= 15;\n      }\n      if (truckData.location.current.address == undefined || truckData.location.current.address === '') {\n        issues.push('Missing address information');\n        score -= 10;\n      }\n    }\n\n    if (truckData.contact == undefined) {\n      issues.push('Missing contact information');\n      score -= 20;\n    } else {\n      if ((truckData.contact.phone == undefined || truckData.contact.phone === '') && (truckData.contact.email == undefined || truckData.contact.email === '')) {\n        issues.push('No phone or email contact available');\n        score -= 15;\n      }\n      if (truckData.contact.phone != undefined && truckData.contact.phone !== '' && !this.isValidPhone(truckData.contact.phone)) {\n        issues.push('Invalid phone number format');\n        score -= 5;\n      }\n      if (truckData.contact.email != undefined && truckData.contact.email !== '' && !this.isValidEmail(truckData.contact.email)) {\n        issues.push('Invalid email format');\n        score -= 5;\n      }\n    }\n\n    if (truckData.operating_hours == undefined || Object.keys(truckData.operating_hours).length === 0) {\n      issues.push('Missing operating hours');\n      score -= 15;\n    }\n\n    if (truckData.menu == undefined || truckData.menu.length === 0) {\n      issues.push('Missing menu information');\n      score -= 10;\n    } else {\n      const menuIssues = this.validateMenuData(truckData.menu);\n      issues.push(...menuIssues);\n      score -= menuIssues.length * 2;\n    }\n\n    if (truckData.last_updated != undefined && truckData.last_updated !== '') {\n      const lastUpdate = new Date(truckData.last_updated);\n      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);\n\n      if (daysSinceUpdate > 7) {\n        issues.push('Data is more than 7 days old');\n        score -= 10;\n      } else if (daysSinceUpdate > 3) {\n        issues.push('Data is more than 3 days old');\n        score -= 5;\n      }\n    }\n\n    return {\n      score: Math.max(0, score) / 100,\n      issues,\n    };\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  private validateMenuData(menu: MenuCategory[]): string[] {\n    const issues: string[] = [];\n\n    for (const [categoryIndex, category] of menu.entries()) {\n      if (category.category == undefined || category.category.trim().length === 0) {\n        issues.push(`Menu category ${categoryIndex + 1} missing name`);\n      }\n\n      if (category.items == undefined || category.items.length === 0) {\n        issues.push(`Menu category \"${category.category ?? 'Unknown'}\" has no items`);\n      } else {\n        for (const [itemIndex, item] of category.items.entries()) {\n          if (item.name == undefined || item.name.trim().length === 0) {\n            issues.push(`Menu item ${itemIndex + 1} in \"${category.category ?? 'Unknown'}\" missing name`);\n          }\n          if (typeof item.price !== 'number' || item.price <= 0) {\n            issues.push(`Menu item \"${item.name ?? 'Unknown'}\" has invalid price`);\n          }\n        }\n      }\n    }\n\n    return issues;\n  }\n  private isValidPhone(phone: string): boolean {\n    // Regex for phone number validation. Removed duplicate characters in character class.\n    // This regex is not vulnerable to super-linear runtime due to backtracking.\n\n    const phoneRegex = /^\\+?[\\d\\s-()]{10,}$/;\n    return phoneRegex.test(phone);\n  }\n  private isValidEmail(email: string): boolean {\n    // Regex for email validation optimized to avoid backtracking\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);\n  }\n}\n\ninterface GeminiLocationData {\n  address: string;\n  city: string;\n  state: string;\n  coordinates: {\n    lat: number | undefined;\n    lng: number | undefined;\n  };\n  confidence: number;\n}\n\ninterface GeminiOperatingHours {\n  monday: { open: string; close: string; closed: boolean };\n  tuesday: { open: string; close: string; closed: boolean };\n  wednesday: { open: string; close: string; closed: boolean };\n  thursday: { open: string; close: string; closed: boolean };\n  friday: { open: string; close: string; closed: boolean };\n  saturday: { open: string; close: string; closed: boolean };\n  sunday: { open: string; close: string; closed: boolean };\n}\n\ninterface GeminiSentimentAnalysis {\n  sentiment: 'positive' | 'negative' | 'neutral';\n  score: number;\n  key_topics: string[];\n  summary: string;\n}\n\nexport class GeminiDataProcessor {\n  private _apiKey: string;\n  private _baseUrl: string;\n  private requestCount: number;\n  private tokenCount: number;\n  private dailyLimit: { requests: number; tokens: number };\n\n  constructor(apiKey: string) {\n    this._apiKey = apiKey;\n    this._baseUrl = 'https://generativelanguage.googleapis.com/v1beta';\n    this.requestCount = 0;\n    this.tokenCount = 0;\n    this.dailyLimit = { requests: 1500, tokens: 32_000 };\n  }\n  async processMenuData(rawMenuText: string): Promise<{ categories: MenuCategory[] }> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Parse the following food truck menu text and return a structured JSON format:\n        \n        ${rawMenuText}\n        \n        Return format:\n        {\n          \"categories\": [\n            {\n              \"name\": \"category_name\",\n              \"items\": [\n                {\n                  \"name\": \"item_name\",\n                  \"description\": \"item_description\",\n                  \"price\": 0.00,\n                  \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", etc.]\n                }\n              ]\n            }\n          ]\n        }\n        \n        Only return valid JSON, no additional text.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n\n      return JSON.parse(response) as { categories: MenuCategory[] };\n    } catch (error) {\n      console.error('Error processing menu data with Gemini:', error);\n      throw error;\n    }\n  }\n\n  async extractLocationFromText(text: string): Promise<GeminiLocationData> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Extract location information from the following text and return structured data:\n        \n        \"${text}\"\n        \n        Return format:\n        {\n          \"address\": \"full_address\",\n          \"city\": \"city_name\",\n          \"state\": \"state\",\n          \"coordinates\": {\n            \"lat\": 0.0,\n            \"lng\": 0.0\n          },\n          \"confidence\": 0.95\n        }\n        \n        If coordinates cannot be determined, set them to undefined. Only return valid JSON.\n      `;\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n      const parsedResponse = JSON.parse(response) as GeminiLocationData;\n      parsedResponse.coordinates.lat ??= undefined;\n      parsedResponse.coordinates.lng ??= undefined;\n      return parsedResponse;\n    } catch (error) {\n      console.error('Error extracting location with Gemini:', error);\n      throw error;\n    }\n  }\n\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiOperatingHours> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Parse the following operating hours text and return standardized format:\n        \n        \"${hoursText}\"\n        \n        Return format:\n        {\n          \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n          \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\n        }\n          Use 24-hour format. If closed on a day, set \"closed\": true and omit open/close times.\n        Only return valid JSON.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n\n      return JSON.parse(response) as GeminiOperatingHours;\n    } catch (error) {\n      console.error('Error standardizing hours with Gemini:', error);\n      throw error;\n    }\n  }\n\n  async analyzeSentiment(reviewText: string): Promise<GeminiSentimentAnalysis> {\n    if (!this.canMakeRequest()) {\n      throw new Error('Gemini API rate limit exceeded');\n    }\n\n    try {\n      const prompt = `\n        Analyze the sentiment of this food truck review and extract key insights:\n        \n        \"${reviewText}\"\n        \n        Return format:\n        {\n          \"sentiment\": \"positive|negative|neutral\",\n          \"score\": 0.85,\n          \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\"],\n          \"summary\": \"brief_summary_of_review\"\n        }\n          Score should be between 0 (very negative) and 1 (very positive).\n        Only return valid JSON.\n      `;\n\n      const response = await this.makeGeminiRequest(prompt);\n      this.updateUsageCounters(1, prompt.length + response.length);\n\n      return JSON.parse(response) as GeminiSentimentAnalysis;\n    } catch (error) {\n      console.error('Error analyzing sentiment with Gemini:', error);\n      throw error;\n    }\n  }\n\n  private async makeGeminiRequest(prompt: string): Promise<string> {\n    // Simulate Gemini API call\n    // In real implementation, would make actual API call to Google Gemini\n\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay\n\n    // Mock responses based on prompt content\n    if (prompt.includes('menu text')) {\n      return JSON.stringify({\n        categories: [\n          {\n            name: 'Burgers',\n            items: [\n              {\n                name: 'Classic Cheeseburger',\n                description: 'Beef patty with cheese, lettuce, tomato',\n                price: 12.99,\n                dietary_tags: [],\n              },\n            ],\n          },\n        ],\n      });\n    } else if (prompt.includes('location information')) {\n      return JSON.stringify({\n        address: '123 Market St, San Francisco, CA 94105',\n        city: 'San Francisco',\n        state: 'CA',\n        coordinates: {\n          lat: 37.7749,\n          lng: -122.4194,\n        },\n        confidence: 0.95,\n      });\n    } else if (prompt.includes('operating hours')) {\n      return JSON.stringify({\n        monday: { open: '11:00', close: '15:00', closed: false },\n        tuesday: { open: '11:00', close: '15:00', closed: false },\n        wednesday: { open: '11:00', close: '15:00', closed: false },\n        thursday: { open: '11:00', close: '15:00', closed: false },\n        friday: { open: '11:00', close: '20:00', closed: false },\n        saturday: { open: '12:00', close: '20:00', closed: false },\n        sunday: { open: '12:00', close: '16:00', closed: false },\n      });\n    } else if (prompt.includes('sentiment')) {\n      return JSON.stringify({\n        sentiment: 'positive',\n        score: 0.85,\n        key_topics: ['food_quality', 'service'],\n        summary: 'Customer enjoyed the food and service',\n      });\n    }\n\n    return '{\"processed\": true}';\n  }\n\n  private canMakeRequest(): boolean {\n    return this.requestCount < this.dailyLimit.requests && this.tokenCount < this.dailyLimit.tokens;\n  }\n\n  private updateUsageCounters(requests: number, tokens: number): void {\n    this.requestCount += requests;\n    this.tokenCount += tokens;\n  }\n\n  getUsageStats(): {\n    requests: { used: number; limit: number; remaining: number };\n    tokens: { used: number; limit: number; remaining: number };\n  } {\n    return {\n      requests: {\n        used: this.requestCount,\n        limit: this.dailyLimit.requests,\n        remaining: this.dailyLimit.requests - this.requestCount,\n      },\n      tokens: {\n        used: this.tokenCount,\n        limit: this.dailyLimit.tokens,\n        remaining: this.dailyLimit.tokens - this.tokenCount,\n      },\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":45,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":45,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/data-quality/batchCleanup.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static async method 'runFullCleanup' has too many lines (55). Maximum allowed is 50.","line":38,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":92,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Static async method 'removePlaceholders' has too many lines (65). Maximum allowed is 50.","line":187,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":251,"endColumn":4},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 36 to the 15 allowed.","line":187,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":187,"endColumn":42},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":256,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":256,"endColumn":45},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":272,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":283,"endColumn":14},{"ruleId":"max-lines-per-function","severity":2,"message":"Static async method 'fixCoordinates' has too many lines (54). Maximum allowed is 50.","line":295,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":348,"endColumn":4},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 29 to the 15 allowed.","line":295,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":295,"endColumn":38},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":330,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":341,"endColumn":14},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":353,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":353,"endColumn":43},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 26 to the 15 allowed.","line":390,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":390,"endColumn":39},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":411,"column":13,"nodeType":"TryStatement","messageId":"tooDeeply","endLine":418,"endColumn":14}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":360,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":360,"endColumn":80,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":360,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":360,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calculateQualityScore on an `error` typed value.","line":360,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":362,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":362,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .score on an `error` typed value.","line":362,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":374,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":374,"endColumn":61,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updateTruckQualityScore on an `error` typed value.","line":374,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":374,"endColumn":61,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Batch Data Cleanup System\n * Implements automated data quality improvements and cleanup operations\n */\n\nimport { FoodTruckService, DataQualityService, type FoodTruck } from '@/lib/supabase';\nimport { DuplicatePreventionService } from './duplicatePrevention';\n\nexport interface CleanupOperation {\n  type: 'normalize_phone' | 'fix_coordinates' | 'remove_placeholders' | 'update_quality_scores' | 'merge_duplicates';\n  description: string;\n  affectedCount: number;\n  successCount: number;\n  errorCount: number;\n  errors: string[];\n}\n\nexport interface BatchCleanupResult {\n  totalProcessed: number;\n  operations: CleanupOperation[];\n  summary: {\n    trucksImproved: number;\n    duplicatesRemoved: number;\n    qualityScoreImprovement: number;\n    placeholdersRemoved: number;\n  };\n  duration: number;\n}\n\n/**\n * Automated Data Quality Cleanup Service\n */\nexport class BatchCleanupService {\n  \n  /**\n   * Run comprehensive data cleanup operations\n   */\n  static async runFullCleanup(options: {\n    batchSize?: number;\n    dryRun?: boolean;\n    operations?: CleanupOperation['type'][];\n  } = {}): Promise<BatchCleanupResult> {\n    const startTime = Date.now();\n    const { batchSize = 50, dryRun = false, operations = [\n      'remove_placeholders',\n      'normalize_phone',\n      'fix_coordinates',\n      'update_quality_scores',\n      'merge_duplicates'\n    ] } = options;\n    \n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\n    \n    const result: BatchCleanupResult = {\n      totalProcessed: 0,\n      operations: [],\n      summary: {\n        trucksImproved: 0,\n        duplicatesRemoved: 0,\n        qualityScoreImprovement: 0,\n        placeholdersRemoved: 0\n      },\n      duration: 0\n    };\n    \n    try {\n      // Get all trucks for processing\n      const allTrucks = await FoodTruckService.getAllTrucks();\n      result.totalProcessed = allTrucks.total;\n      \n      // Process trucks in batches\n      for (let i = 0; i < allTrucks.trucks.length; i += batchSize) {\n        const batch = allTrucks.trucks.slice(i, i + batchSize);\n        \n        for (const operation of operations) {\n          const opResult = await this.runOperation(operation, batch, dryRun);\n          result.operations.push(opResult);\n        }\n      }\n      \n      // Calculate summary\n      result.summary = this.calculateSummary(result.operations);\n      result.duration = Date.now() - startTime;\n      \n      console.info(`Batch cleanup completed in ${result.duration}ms`);\n      return result;\n      \n    } catch (error) {\n      console.error('Batch cleanup failed:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Run a specific cleanup operation\n   */\n  private static async runOperation(\n    type: CleanupOperation['type'],\n    trucks: FoodTruck[],\n    dryRun: boolean\n  ): Promise<CleanupOperation> {\n    const operation: CleanupOperation = {\n      type,\n      description: this.getOperationDescription(type),\n      affectedCount: 0,\n      successCount: 0,\n      errorCount: 0,\n      errors: []\n    };\n    \n    try {\n      switch (type) {\n        case 'remove_placeholders': {\n          return await this.removePlaceholders(trucks, dryRun, operation);\n        }\n        case 'normalize_phone': {\n          return await this.normalizePhoneNumbers(trucks, dryRun, operation);\n        }\n        case 'fix_coordinates': {\n          return await this.fixCoordinates(trucks, dryRun, operation);\n        }\n        case 'update_quality_scores': {\n          return await this.updateQualityScores(trucks, dryRun, operation);\n        }\n        case 'merge_duplicates': {\n          return await this.mergeDuplicates(trucks, dryRun, operation);\n        }\n        default: {\n          operation.errors.push(`Unknown operation type: ${String(type)}`);\n          return operation;\n        }\n      }\n    } catch (error) {\n      operation.errors.push(`Operation failed: ${error instanceof Error ? error.message : String(error)}`);\n      return operation;\n    }\n  }\n  \n  /**\n   * Get placeholder detection patterns\n   */\n  private static getPlaceholderPatterns(): RegExp[] {\n    return [\n      /undefined/i,\n      /placeholder/i,\n      /example\\.com/i,\n      /test\\s*truck/i,\n      /lorem\\s*ipsum/i,\n      /\\bna\\b/i,\n      /\\bn\\/a\\b/i,\n      /^0+$/,\n      /^null$/i\n    ];\n  }\n\n  /**\n   * Check if truck data needs placeholder cleanup\n   */\n  private static checkForPlaceholders(truck: FoodTruck, patterns: RegExp[]): { updates: Partial<FoodTruck>; needsUpdate: boolean } {\n    const updates: Partial<FoodTruck> = {};\n    let needsUpdate = false;\n\n    // Check name\n    if (truck.name && patterns.some(pattern => pattern.test(truck.name))) {\n      updates.name = undefined;\n      needsUpdate = true;\n    }\n\n    // Check description\n    if (truck.description !== undefined && typeof truck.description === 'string' && patterns.some(pattern => pattern.test(truck.description))) {\n      updates.description = undefined;\n      needsUpdate = true;\n    }\n\n    // Check price range\n    if (truck.price_range !== undefined && typeof truck.price_range === 'string' && patterns.some(pattern => pattern.test(truck.price_range))) {\n      updates.price_range = undefined;\n      needsUpdate = true;\n    }\n\n    return { updates, needsUpdate };\n  }\n\n  /**\n   * Remove placeholder and mock data\n   */\n  private static async removePlaceholders(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    const placeholderPatterns = this.getPlaceholderPatterns();\n\n    for (const truck of trucks) {\n      const { updates, needsUpdate: initialNeedsUpdate } = this.checkForPlaceholders(truck, placeholderPatterns);\n      let needsUpdate = initialNeedsUpdate;\n\n      // Check contact info\n      if (truck.contact_info) {\n        const cleanContact = { ...truck.contact_info };\n        let contactUpdated = false;\n\n        if (cleanContact.phone !== undefined && typeof cleanContact.phone === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.phone))) {\n          cleanContact.phone = undefined;\n          contactUpdated = true;\n        }\n\n        if (cleanContact.website !== undefined && typeof cleanContact.website === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.website))) {\n          cleanContact.website = undefined;\n          contactUpdated = true;\n        }\n\n        if (cleanContact.email !== undefined && typeof cleanContact.email === 'string' && placeholderPatterns.some(pattern => pattern.test(cleanContact.email))) {\n          cleanContact.email = undefined;\n          contactUpdated = true;\n        }\n\n        if (contactUpdated) {\n          updates.contact_info = cleanContact;\n          needsUpdate = true;\n        }\n      }\n\n      // Check address\n      if (truck.current_location?.address !== undefined && typeof truck.current_location.address === 'string' && placeholderPatterns.some(pattern => pattern.test(truck.current_location.address))) {\n        updates.current_location = {\n          ...truck.current_location,\n          address: undefined\n        };\n        needsUpdate = true;\n      }\n      \n      if (needsUpdate) {\n        operation.affectedCount++;\n        \n        if (dryRun) {\n          operation.successCount++;\n        } else {\n          try {\n            await FoodTruckService.updateTruck(truck.id, updates);\n            operation.successCount++;\n          } catch (error) {\n            operation.errorCount++;\n            operation.errors.push(`Failed to update truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Normalize phone numbers to consistent format\n   */\n  private static async normalizePhoneNumbers(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    for (const truck of trucks) {\n      if (truck.contact_info?.phone !== undefined) {\n        const originalPhone = truck.contact_info.phone;\n        const normalizedPhone = this.normalizePhone(originalPhone);\n\n        if (normalizedPhone !== undefined && normalizedPhone !== originalPhone) {\n          operation.affectedCount++;\n          \n          if (dryRun) {\n            operation.successCount++;\n          } else {\n            try {\n              await FoodTruckService.updateTruck(truck.id, {\n                contact_info: {\n                  ...truck.contact_info,\n                  phone: normalizedPhone\n                }\n              });\n              operation.successCount++;\n            } catch (error) {\n              operation.errorCount++;\n              operation.errors.push(`Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n            }\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Fix invalid GPS coordinates\n   */\n  private static async fixCoordinates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    // Charleston, SC default coordinates\n    const defaultLat = 32.7767;\n    const defaultLng = -79.9311;\n    \n    for (const truck of trucks) {\n      if (truck.current_location != undefined) {\n        const { lat, lng } = truck.current_location;\n        let needsUpdate = false;\n        const updates: Partial<FoodTruck['current_location']> = {};\n\n        // Fix invalid coordinates (0,0 or null)\n        if (lat == undefined || lat === 0 || lng == undefined || lng === 0) {\n          updates.lat = defaultLat;\n          updates.lng = defaultLng;\n          needsUpdate = true;\n        }\n\n        // Fix coordinates outside reasonable bounds for Charleston area\n        if (lat != undefined && lng != undefined && (lat < 32 || lat > 34 || lng > -79 || lng < -81)) {\n          updates.lat = defaultLat;\n          updates.lng = defaultLng;\n          needsUpdate = true;\n        }\n        \n        if (needsUpdate) {\n          operation.affectedCount++;\n          \n          if (dryRun) {\n            operation.successCount++;\n          } else {\n            try {\n              await FoodTruckService.updateTruck(truck.id, {\n                current_location: {\n                  ...truck.current_location,\n                  ...updates\n                }\n              });\n              operation.successCount++;\n            } catch (error) {\n              operation.errorCount++;\n              operation.errors.push(`Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n            }\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Update quality scores for all trucks\n   */\n  private static async updateQualityScores(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    for (const truck of trucks) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n      const qualityAssessment = DataQualityService.calculateQualityScore(truck);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      const newScore = qualityAssessment.score;\n      const currentScore = truck.data_quality_score ?? 0;\n      \n      // Only update if score changed significantly (>5% difference)\n      if (Math.abs(newScore - currentScore) > 0.05) {\n        operation.affectedCount++;\n        \n        if (dryRun) {\n          operation.successCount++;\n        } else {\n          try {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            await DataQualityService.updateTruckQualityScore(truck.id);\n            operation.successCount++;\n          } catch (error) {\n            operation.errorCount++;\n            operation.errors.push(`Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Identify and merge duplicate trucks\n   */\n  private static async mergeDuplicates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    const processedIds = new Set<string>();\n    \n    for (const truck of trucks) {\n      if (processedIds.has(truck.id)) continue;\n      \n      const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\n      \n      if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\n        const { bestMatch } = duplicateCheck;\n        \n        if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\n          operation.affectedCount++;\n          \n          if (dryRun) {\n            operation.successCount++;\n          } else {\n            try {\n              await DuplicatePreventionService.mergeDuplicates(truck.id, bestMatch.existingTruck.id);\n              processedIds.add(bestMatch.existingTruck.id);\n              operation.successCount++;\n            } catch (error) {\n              operation.errorCount++;\n              operation.errors.push(`Failed to merge duplicates ${truck.id} and ${bestMatch.existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`);\n            }\n          }\n        }\n      }\n      \n      processedIds.add(truck.id);\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Normalize phone number format\n   */\n  private static normalizePhone(phone: string): string | undefined {\n    if (!phone) return undefined;\n    \n    // Remove all non-digit characters\n    const digits = phone.replaceAll(/\\D/g, '');\n    \n    // Handle US phone numbers\n    if (digits.length === 10) {\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\n    } else if (digits.length === 11 && digits[0] === '1') {\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\n    }\n    \n    // Return original if can't normalize\n    return phone;\n  }\n  \n  /**\n   * Get operation description\n   */\n  private static getOperationDescription(type: CleanupOperation['type']): string {\n    const descriptions = {\n      remove_placeholders: 'Remove placeholder and mock data values',\n      normalize_phone: 'Normalize phone numbers to consistent format',\n      fix_coordinates: 'Fix invalid GPS coordinates',\n      update_quality_scores: 'Recalculate data quality scores',\n      merge_duplicates: 'Identify and merge duplicate truck entries'\n    };\n    \n    return descriptions[type] ?? 'Unknown operation';\n  }\n  \n  /**\n   * Calculate cleanup summary\n   */\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\n    return {\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\n      duplicatesRemoved: operations.find(op => op.type === 'merge_duplicates')?.successCount ?? 0,\n      qualityScoreImprovement: operations.find(op => op.type === 'update_quality_scores')?.successCount ?? 0,\n      placeholdersRemoved: operations.find(op => op.type === 'remove_placeholders')?.successCount ?? 0\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/data-quality/duplicatePrevention.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static method 'calculateSimilarity' has too many lines (57). Maximum allowed is 50.","line":101,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":157,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Duplicate Prevention System\n * Implements intelligent duplicate detection and prevention for food truck data\n */\n\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\n\n// Duplicate detection configuration\nexport const DUPLICATE_DETECTION_CONFIG = {\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\n  thresholds: {\n    name: 0.85,        // High threshold for name matching\n    location: 0.9,     // Very high threshold for location matching\n    phone: 1,        // Exact match for phone numbers\n    website: 1,      // Exact match for websites\n    overall: 0.8       // Overall similarity threshold\n  },\n  \n  // Weight factors for different fields\n  weights: {\n    name: 0.4,         // 40% weight for name similarity\n    location: 0.3,     // 30% weight for location similarity\n    contact: 0.2,      // 20% weight for contact info similarity\n    menu: 0.1          // 10% weight for menu similarity\n  }\n} as const;\n\nexport interface DuplicateMatch {\n  existingTruck: FoodTruck;\n  similarity: number;\n  matchedFields: string[];\n  confidence: 'high' | 'medium' | 'low';\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\n}\n\nexport interface DuplicateDetectionResult {\n  isDuplicate: boolean;\n  matches: DuplicateMatch[];\n  bestMatch?: DuplicateMatch;\n  action: 'create' | 'update' | 'merge' | 'manual_review';\n  reason: string;\n}\n\n/**\n * Advanced Duplicate Prevention Service\n */\nexport class DuplicatePreventionService {\n  \n  /**\n   * Check if a food truck is a duplicate of existing trucks\n   */\n  static async checkForDuplicates(candidateTruck: Partial<FoodTruck>): Promise<DuplicateDetectionResult> {\n    try {\n      // Get all existing trucks for comparison\n      const existingTrucks = await FoodTruckService.getAllTrucks();\n      \n      const matches: DuplicateMatch[] = [];\n      \n      for (const existingTruck of existingTrucks.trucks) {\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\n        \n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\n          matches.push({\n            existingTruck,\n            similarity: similarity.overall,\n            matchedFields: similarity.matchedFields,\n            confidence: this.getConfidenceLevel(similarity.overall),\n            recommendation: this.getRecommendation(similarity)\n          });\n        }\n      }\n      \n      // Sort matches by similarity (highest first)\n      matches.sort((a, b) => b.similarity - a.similarity);\n      \n      const bestMatch = matches[0];\n      const isDuplicate = matches.length > 0;\n      \n      return {\n        isDuplicate,\n        matches,\n        bestMatch,\n        action: this.determineAction(matches, candidateTruck),\n        reason: this.generateReason(matches, candidateTruck)\n      };\n      \n    } catch (error) {\n      console.error('Error checking for duplicates:', error);\n      return {\n        isDuplicate: false,\n        matches: [],\n        action: 'create',\n        reason: 'Error during duplicate detection - proceeding with creation'\n      };\n    }\n  }\n  \n  /**\n   * Calculate similarity between two food trucks\n   */\n  private static calculateSimilarity(\n    candidate: Partial<FoodTruck>, \n    existing: FoodTruck\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\n    const breakdown: Record<string, number> = {};\n    const matchedFields: string[] = [];\n    \n    // Name similarity\n    const nameSimilarity = this.calculateStringSimilarity(\n      candidate.name ?? '', \n      existing.name ?? ''\n    );\n    breakdown.name = nameSimilarity;\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\n      matchedFields.push('name');\n    }\n    \n    // Location similarity\n    const locationSimilarity = this.calculateLocationSimilarity(\n      candidate.current_location,\n      existing.current_location\n    );\n    breakdown.location = locationSimilarity;\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\n      matchedFields.push('location');\n    }\n    \n    // Contact similarity\n    const contactSimilarity = this.calculateContactSimilarity(\n      candidate.contact_info,\n      existing.contact_info\n    );\n    breakdown.contact = contactSimilarity;\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\n      matchedFields.push('contact');\n    }\n    \n    // Menu similarity (basic)\n    const menuSimilarity = this.calculateMenuSimilarity(\n      candidate.menu,\n      existing.menu\n    );\n    breakdown.menu = menuSimilarity;\n    if (menuSimilarity > 0.7) {\n      matchedFields.push('menu');\n    }\n    \n    // Calculate weighted overall similarity\n    const overall = (\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu\n    );\n    \n    return { overall, matchedFields, breakdown };\n  }\n  \n  /**\n   * Calculate string similarity using Levenshtein distance\n   */\n  private static calculateStringSimilarity(str1: string, str2: string): number {\n    if (!str1 || !str2) return 0;\n    \n    // Normalize strings\n    const s1 = str1.toLowerCase().trim();\n    const s2 = str2.toLowerCase().trim();\n    \n    if (s1 === s2) return 1;\n    \n    // Calculate Levenshtein distance\n    const matrix: number[][] = [];\n    const len1 = s1.length;\n    const len2 = s2.length;\n    \n    for (let i = 0; i <= len1; i++) {\n      matrix[i] = [i];\n    }\n    \n    for (let j = 0; j <= len2; j++) {\n      matrix[0][j] = j;\n    }\n    \n    for (let i = 1; i <= len1; i++) {\n      for (let j = 1; j <= len2; j++) {\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1,      // deletion\n          matrix[i][j - 1] + 1,      // insertion\n          matrix[i - 1][j - 1] + cost // substitution\n        );\n      }\n    }\n    \n    const distance = matrix[len1][len2];\n    const maxLength = Math.max(len1, len2);\n    \n    return maxLength === 0 ? 1 : 1 - (distance / maxLength);\n  }\n  \n  /**\n   * Calculate location similarity\n   */\n  private static calculateLocationSimilarity(\n    loc1: FoodTruck['current_location'],\n    loc2: FoodTruck['current_location']\n  ): number {\n    if (loc1 == undefined || loc2 == undefined) return 0;\n    \n    let similarity = 0;\n    let factors = 0;\n    \n    // Address similarity\n    if (loc1.address != undefined && loc2.address != undefined) {\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\n      factors++;\n    }\n    \n    // GPS coordinate similarity (within 100 meters = high similarity)\n    if (loc1.lat != undefined && loc1.lng != undefined && loc2.lat != undefined && loc2.lng != undefined) {\n      const distance = this.calculateGPSDistance(\n        loc1.lat, loc1.lng,\n        loc2.lat, loc2.lng\n      );\n      \n      // Distance similarity (closer = higher similarity)\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - (distance / 1)); // 1km max\n      similarity += distanceSimilarity;\n      factors++;\n    }\n    \n    return factors > 0 ? similarity / factors : 0;\n  }\n  \n  /**\n   * Calculate GPS distance in kilometers\n   */\n  private static calculateGPSDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n  \n  /**\n   * Calculate contact similarity\n   */\n  private static calculateContactSimilarity(\n    contact1: FoodTruck['contact_info'],\n    contact2: FoodTruck['contact_info']\n  ): number {\n    if (!contact1 || !contact2) return 0;\n    \n    let matches = 0;\n    let total = 0;\n    \n    // Phone number exact match\n    if (contact1.phone != undefined && contact2.phone != undefined) {\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\n      if (phone1 === phone2) matches++;\n      total++;\n    }\n    \n    // Website exact match\n    if (contact1.website != undefined && contact2.website != undefined) {\n      const url1 = contact1.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\n      const url2 = contact2.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\n      if (url1 === url2) matches++;\n      total++;\n    }\n    \n    // Email similarity\n    if (contact1.email != undefined && contact2.email != undefined) {\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches++;\n      total++;\n    }\n    \n    return total > 0 ? matches / total : 0;\n  }\n  \n  /**\n   * Calculate menu similarity (basic implementation)\n   */\n  private static calculateMenuSimilarity(\n    menu1: FoodTruck['menu'],\n    menu2: FoodTruck['menu']\n  ): number {\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\n    \n    // Simple category name matching\n    const categories1 = menu1.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\n    const categories2 = menu2.map(cat => (cat as { category?: string }).category?.toLowerCase() ?? '').filter(Boolean);\n    \n    const commonCategories = categories1.filter(cat => categories2.includes(cat));\n    const totalCategories = new Set([...categories1, ...categories2]).size;\n    \n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\n  }\n  \n  /**\n   * Get confidence level based on similarity score\n   */\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\n    if (similarity >= 0.95) return 'high';\n    if (similarity >= 0.85) return 'medium';\n    return 'low';\n  }\n  \n  /**\n   * Get recommendation based on similarity analysis\n   */\n  private static getRecommendation(similarity: { overall: number; matchedFields: string[] }): 'merge' | 'update' | 'skip' | 'manual_review' {\n    if (similarity.overall >= 0.95) return 'merge';\n    if (similarity.overall >= 0.9) return 'update';\n    if (similarity.overall >= 0.8) return 'manual_review';\n    return 'skip';\n  }\n  \n  /**\n   * Determine action based on matches\n   */\n  private static determineAction(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): 'create' | 'update' | 'merge' | 'manual_review' {\n    if (matches.length === 0) return 'create';\n    \n    const bestMatch = matches[0];\n    \n    if (bestMatch.confidence === 'high') {\n      const recommendation = bestMatch.recommendation;\n      if (recommendation === 'merge' || recommendation === 'update') {\n        return recommendation;\n      }\n      return 'manual_review';\n    }\n    \n    return 'manual_review';\n  }\n  \n  /**\n   * Generate human-readable reason\n   */\n  private static generateReason(matches: DuplicateMatch[], _candidate: Partial<FoodTruck>): string {\n    if (matches.length === 0) {\n      return 'No duplicates found - safe to create new truck entry';\n    }\n    \n    const bestMatch = matches[0];\n    const similarity = Math.round(bestMatch.similarity * 100);\n    \n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\n  }\n  \n  /**\n   * Merge duplicate truck data intelligently\n   */\n  static async mergeDuplicates(targetId: string, sourceId: string): Promise<FoodTruck> {\n    const target = await FoodTruckService.getTruckById(targetId);\n    const source = await FoodTruckService.getTruckById(sourceId);\n    \n    // Merge logic: prefer non-null, more complete data\n    const mergedData: Partial<FoodTruck> = {\n      name: target.name ?? source.name,\n      description: target.description ?? source.description,\n      cuisine_type: (target.cuisine_type?.length ?? 0) > 0 ? target.cuisine_type : source.cuisine_type,\n      price_range: target.price_range ?? source.price_range,\n      current_location: target.current_location ?? source.current_location,\n      contact_info: {\n        ...source.contact_info,\n        ...target.contact_info // Target takes precedence\n      },\n      operating_hours: target.operating_hours ?? source.operating_hours,\n      menu: (target.menu?.length ?? 0) > 0 ? target.menu : source.menu,\n      social_media: {\n        ...source.social_media,\n        ...target.social_media\n      },\n      source_urls: [...new Set([...(target.source_urls ?? []), ...(source.source_urls ?? [])])],\n      last_scraped_at: new Date().toISOString()\n    };\n\n    // Update target with merged data\n    const updatedTruck = await FoodTruckService.updateTruck(targetId, mergedData);\n\n    // Note: Delete functionality would need to be implemented in FoodTruckService\n    console.info(`Merged truck ${sourceId} into ${targetId}`);\n    \n    return updatedTruck;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/discoveryEngine.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'isFoodTruckUrl' has too many lines (86). Maximum allowed is 50.","line":363,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":448,"endColumn":4},{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'storeDiscoveredUrl' has too many lines (58). Maximum allowed is 50.","line":605,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":662,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/discoveryEngine.ts\nimport { supabaseAdmin } from './supabase';\nimport { SC_TARGET_CITIES, DISCOVERY_CONFIG } from './config';\n\nexport interface DiscoveredUrl {\n  url: string;\n  source_directory_url?: string;\n  region?: string;\n  status: 'new' | 'processing' | 'processed' | 'irrelevant';\n  notes?: string;\n}\n\nexport interface DiscoveryResult {\n  urls_discovered: number;\n  urls_stored: number;\n  urls_duplicates: number;\n  errors: string[];\n}\n\n/**\n * Autonomous Discovery Engine\n *\n * This engine discovers new food truck websites across South Carolina using Tavily for search\n * and Firecrawl for crawling. It operates autonomously without human intervention, finding and\n * validating new URLs to add to the discovered_urls table for subsequent scraping.\n *\n * Strategy:\n * 1. Search for food trucks in each SC city using Tavily search\n * 2. Find food truck directories and event listings using Firecrawl crawling\n * 3. Extract individual food truck website URLs from discovered content\n * 4. Validate and filter URLs to avoid false positives\n * 5. Store new URLs in discovered_urls table for processing\n *\n * NOTE: Uses Tavily for search operations and Firecrawl for crawling/scraping\n */\n\n// Helper functions to call APIs\n// Use Tavily for search, Firecrawl for crawling/scraping\ninterface TavilySearchResult {\n  url: string;\n  content?: string;\n  raw_content?: string;\n}\n\nasync function tavilySearch(\n  query: string,\n  options: Record<string, unknown> = {},\n): Promise<TavilySearchResult[]> {\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL ?? 'http://localhost:3003';\n  const response = await fetch(`${baseUrl}/api/tavily`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      operation: 'search',\n      params: {\n        query,\n        limit: options.limit ?? 10,\n        ...options,\n      },\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(`Tavily search failed: ${response.statusText}`);\n  }\n\n  const result = (await response.json()) as {\n    data?: { results?: TavilySearchResult[] };\n    results?: TavilySearchResult[];\n  };\n  return result.data?.results ?? result.results ?? [];\n}\n\ninterface CrawlResult {\n  url: string;\n}\n\nasync function firecrawlCrawl(\n  url: string,\n  options: Record<string, unknown> = {},\n): Promise<CrawlResult[]> {\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL ?? 'http://localhost:3003';\n  const response = await fetch(`${baseUrl}/api/firecrawl`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      operation: 'crawl',\n      url,\n      options: {\n        maxDepth: options.maxDepth ?? 2,\n        limit: options.limit ?? 20,\n        ...options,\n      },\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(`Firecrawl crawl failed: ${response.statusText}`);\n  }\n\n  const result = (await response.json()) as { data: CrawlResult[] };\n  return result.data ?? [];\n}\n\nexport class FoodTruckDiscoveryEngine {\n  private readonly searchTerms = [\n    'food truck South Carolina',\n    'mobile food vendor SC',\n    'food truck Charleston',\n    'food truck Columbia SC',\n    'food truck Greenville SC',\n    'street food South Carolina',\n    'food truck directory SC',\n  ];\n\n  private readonly directoryUrls = [\n    'https://www.foodtrucksin.com/south-carolina',\n    'https://www.roaminghunger.com/sc/',\n    'https://southcarolinafoodtrucks.com',\n    'https://www.yelp.com/sc/food-trucks',\n  ];\n\n  // Helper method to process search results\n  private async processSearchResults(\n    searchResults: TavilySearchResult[],\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    for (const result of searchResults) {\n      if (result.url && (await this.isFoodTruckUrl(result.url))) {\n        discoveredUrls.add(result.url);\n      }\n\n      // Extract URLs from content\n      if (result.content != undefined || result.raw_content != undefined) {\n        const content = result.content ?? result.raw_content ?? '';\n        const extractedUrls = this.extractFoodTruckUrls(content);\n        for (const url of extractedUrls) {\n          if (await this.isFoodTruckUrl(url)) {\n            discoveredUrls.add(url);\n          }\n        }\n      }\n    }\n  }\n\n  // Helper method to perform search term discovery\n  private async performSearchTermDiscovery(\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    for (const searchTerm of this.searchTerms) {\n      try {\n        console.info(`🔍 Searching for: ${searchTerm}`);\n\n        const searchResults = await tavilySearch(searchTerm, {\n          limit: DISCOVERY_CONFIG.searchResultsLimit,\n        });\n\n        if (searchResults != undefined && searchResults.length > 0) {\n          await this.processSearchResults(searchResults, discoveredUrls);\n        }\n      } catch (error) {\n        console.error(`❌ Search failed for \"${searchTerm}\":`, error);\n        results.errors.push(\n          `Search failed for \"${searchTerm}\": ${error instanceof Error ? error.message : 'Unknown error'}`,\n        );\n      }\n\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\n    }\n  }\n\n  // Helper method to perform directory crawling\n  private async performDirectoryCrawling(\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    for (const directoryUrl of this.directoryUrls) {\n      await this.crawlSingleDirectory(directoryUrl, discoveredUrls, results);\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\n    }\n  }\n\n  // Helper method to crawl a single directory\n  private async crawlSingleDirectory(\n    directoryUrl: string,\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    try {\n      console.info(`🕷️ Crawling directory: ${directoryUrl}`);\n\n      const crawlResults = await firecrawlCrawl(directoryUrl, {\n        maxDepth: DISCOVERY_CONFIG.maxDepthCrawl,\n        limit: DISCOVERY_CONFIG.maxUrlsPerRun,\n      });\n\n      await this.processCrawlResults(crawlResults, discoveredUrls);\n    } catch (error) {\n      console.error(`❌ Crawl failed for ${directoryUrl}:`, error);\n      results.errors.push(\n        `Crawl failed for ${directoryUrl}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  // Helper method to process crawl results\n  private async processCrawlResults(\n    crawlResults: unknown,\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    if (crawlResults != undefined && Array.isArray(crawlResults) && crawlResults.length > 0) {\n      for (const result of crawlResults) {\n        if (typeof result === 'object' && result !== null && 'url' in result) {\n          const resultUrl = (result as { url?: string }).url;\n          if (\n            resultUrl != undefined &&\n            typeof resultUrl === 'string' &&\n            (await this.isFoodTruckUrl(resultUrl))\n          ) {\n            discoveredUrls.add(resultUrl);\n          }\n        }\n      }\n    }\n  }\n\n  // Helper method to perform location-specific discovery\n  private async performLocationDiscovery(\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    for (const city of SC_TARGET_CITIES) {\n      await this.searchSingleCity(city, discoveredUrls, results);\n      await this.delay(DISCOVERY_CONFIG.rateLimitDelayMs);\n    }\n  }\n\n  // Helper method to search a single city\n  private async searchSingleCity(\n    city: string,\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    try {\n      console.info(`📍 Searching for food trucks in ${city}, SC`);\n      const locationQuery = `food trucks in ${city} South Carolina`;\n      const searchResults = await tavilySearch(locationQuery, {\n        limit: 5,\n      });\n\n      await this.processLocationSearchResults(searchResults, discoveredUrls);\n    } catch (error) {\n      console.error(`❌ Location search failed for ${city}:`, error);\n      results.errors.push(\n        `Location search failed for ${city}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n  }\n\n  // Helper method to process location search results\n  private async processLocationSearchResults(\n    searchResults: unknown,\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    if (searchResults != undefined && Array.isArray(searchResults) && searchResults.length > 0) {\n      for (const result of searchResults) {\n        if (typeof result === 'object' && result !== null && 'url' in result) {\n          const resultUrl = (result as { url?: string }).url;\n          if (\n            resultUrl != undefined &&\n            typeof resultUrl === 'string' &&\n            (await this.isFoodTruckUrl(resultUrl))\n          ) {\n            discoveredUrls.add(resultUrl);\n          }\n        }\n      }\n    }\n  }\n\n  // Helper method to store discovered URLs from discovery process\n  private async storeDiscoveredUrlsFromDiscovery(\n    discoveredUrls: Set<string>,\n    results: DiscoveryResult,\n  ): Promise<void> {\n    for (const url of discoveredUrls) {\n      try {\n        const stored = await this.storeDiscoveredUrl(url, 'autonomous_search', {\n          search_context: 'full_discovery',\n          discovery_timestamp: new Date().toISOString(),\n        });\n        if (stored.isNew === true) {\n          results.urls_stored++;\n        } else {\n          results.urls_duplicates++;\n        }\n      } catch (error) {\n        console.error(`❌ Failed to store URL ${url}:`, error);\n        results.errors.push(\n          `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        );\n      }\n    }\n  }\n\n  async discoverNewFoodTrucks(): Promise<DiscoveryResult> {\n    console.info('🔍 Starting autonomous food truck discovery...');\n\n    const results: DiscoveryResult = {\n      urls_discovered: 0,\n      urls_stored: 0,\n      urls_duplicates: 0,\n      errors: [],\n    };\n\n    const discoveredUrls = new Set<string>();\n\n    // 1. Search for food trucks using Tavily search\n    await this.performSearchTermDiscovery(discoveredUrls, results);\n\n    // 2. Crawl known food truck directory sites\n    await this.performDirectoryCrawling(discoveredUrls, results);\n\n    // 3. Location-specific discovery for SC cities\n    await this.performLocationDiscovery(discoveredUrls, results);\n\n    results.urls_discovered = discoveredUrls.size;\n    console.info(`🎯 Discovered ${results.urls_discovered} potential food truck URLs`);\n\n    // 4. Store new URLs in database\n    await this.storeDiscoveredUrlsFromDiscovery(discoveredUrls, results);\n\n    console.info(\n      `✅ Discovery complete: ${results.urls_stored} new URLs stored, ${results.urls_duplicates} duplicates skipped`,\n    );\n\n    return results;\n  }\n  private extractFoodTruckUrls(content: string): string[] {\n    const urls: string[] = [];\n\n    // Look for URL patterns in content - using a safer regex to avoid backtracking\n    const urlRegex = /https?:\\/\\/[^\\s<>\"']{1,200}/g;\n    const foundUrls = content.match(urlRegex) ?? [];\n\n    for (const url of foundUrls) {\n      try {\n        // Basic URL validation\n        new URL(url);\n        // Remove trailing punctuation - using safer regex to avoid backtracking\n        const cleanUrl = url.replace(/[.,;!?]$/, '');\n        urls.push(cleanUrl);\n      } catch {\n        // Invalid URL, skip\n        continue;\n      }\n    }\n\n    return urls;\n  }\n\n  private async isFoodTruckUrl(url: string): Promise<boolean> {\n    try {\n      // Basic URL validation\n      new URL(url);\n\n      // Food truck indicators in URL\n      const foodTruckKeywords = [\n        'food-truck',\n        'foodtruck',\n        'mobile-food',\n        'street-food',\n        'truck',\n        'kitchen',\n        'eats',\n        'bbq',\n        'burger',\n        'taco',\n        'catering',\n        'mobile',\n        'chef',\n        'bistro',\n        'cafe',\n      ];\n\n      // Blacklist - skip these domains\n      const blacklistKeywords = [\n        'facebook.com',\n        'instagram.com',\n        'twitter.com',\n        'linkedin.com',\n        'youtube.com',\n        'yelp.com',\n        'google.com',\n        'maps.google.com',\n        'foursquare.com',\n        'tripadvisor.com',\n        'zomato.com',\n        'eventbrite.com',\n        'meetup.com',\n      ];\n\n      const urlLower = url.toLowerCase();\n\n      // Skip social media and review sites\n      if (blacklistKeywords.some((keyword) => urlLower.includes(keyword))) {\n        return false;\n      }\n\n      // Check if we already have this URL in discovered_urls\n      if (supabaseAdmin == undefined) {\n        return false;\n      }\n\n      const { data: existingDiscovered } = await supabaseAdmin\n        .from('discovered_urls')\n        .select('id')\n        .eq('url', url)\n        .limit(1);\n\n      if (existingDiscovered != undefined && existingDiscovered.length > 0) {\n        return false; // Already discovered\n      }\n\n      // Check if we already have this URL in food_trucks\n      const { data: existingTrucks } = await supabaseAdmin\n        .from('food_trucks')\n        .select('id')\n        .contains('source_urls', [url])\n        .limit(1);\n\n      if (existingTrucks != undefined && existingTrucks.length > 0) {\n        return false; // Already have this URL\n      }\n\n      // Accept if has food truck keywords or if it's a business domain\n      return (\n        foodTruckKeywords.some((keyword) => urlLower.includes(keyword)) ||\n        (/\\.(com|net|org|biz|info)/.test(urlLower) &&\n          !urlLower.includes('blog') &&\n          !urlLower.includes('news'))\n      );\n    } catch (error) {\n      console.error('Error validating food truck URL:', error);\n      return false;\n    }\n  }\n\n  async getLocationSpecificDiscovery(city: string, state: string = 'SC'): Promise<DiscoveryResult> {\n    console.info(`🔍 Starting location-specific discovery for ${city}, ${state}`);\n\n    const locationQuery = `food trucks in ${city} ${state}`;\n    const results: DiscoveryResult = {\n      urls_discovered: 0,\n      urls_stored: 0,\n      urls_duplicates: 0,\n      errors: [],\n    };\n\n    const discoveredUrls = new Set<string>();\n\n    try {\n      await this.performLocationSpecificSearch(locationQuery, discoveredUrls);\n      results.urls_discovered = discoveredUrls.size;\n      await this.storeLocationDiscoveryResults({ discoveredUrls, locationQuery, city, state, results });\n    } catch (error) {\n      console.error(`❌ Location search failed for ${city}:`, error);\n      results.errors.push(\n        `Location search failed for ${city}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n\n    console.info(\n      `✅ Location discovery complete for ${city}: ${results.urls_stored} new URLs stored`,\n    );\n    return results;\n  }\n\n  // Helper method to perform location-specific search\n  private async performLocationSpecificSearch(\n    locationQuery: string,\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    const searchResults = await tavilySearch(locationQuery, { limit: 15 });\n\n    if (searchResults != undefined && searchResults.length > 0) {\n      for (const result of searchResults) {\n        await this.processSearchResult(result, discoveredUrls);\n      }\n    }\n  }\n\n  // Helper method to process a single search result\n  private async processSearchResult(result: unknown, discoveredUrls: Set<string>): Promise<void> {\n    if (typeof result === 'object' && result !== null && 'url' in result) {\n      const resultUrl = (result as { url?: string }).url;\n      if (resultUrl != undefined && resultUrl !== '' && (await this.isFoodTruckUrl(resultUrl))) {\n        discoveredUrls.add(resultUrl);\n      }\n\n      // Extract URLs from content\n      await this.extractUrlsFromContent(result, discoveredUrls);\n    }\n  }\n\n  // Helper method to extract URLs from content\n  private async extractUrlsFromContent(\n    result: unknown,\n    discoveredUrls: Set<string>,\n  ): Promise<void> {\n    if (typeof result === 'object' && result != undefined) {\n      const resultObj = result as { content?: string; raw_content?: string };\n      if (resultObj.content != undefined || resultObj.raw_content != undefined) {\n        const content = resultObj.content ?? resultObj.raw_content ?? '';\n        const extractedUrls = this.extractFoodTruckUrls(content);\n        for (const url of extractedUrls) {\n          if (await this.isFoodTruckUrl(url)) {\n            discoveredUrls.add(url);\n          }\n        }\n      }\n    }\n  }\n\n  // Helper method to store location discovery results\n  private async storeLocationDiscoveryResults(\n    params: {\n      discoveredUrls: Set<string>;\n      locationQuery: string;\n      city: string;\n      state: string;\n      results: DiscoveryResult;\n    }\n  ): Promise<void> {\n    const { discoveredUrls, locationQuery, city, state, results } = params;\n    for (const url of discoveredUrls) {\n      try {\n        const stored = await this.storeDiscoveredUrl(url, 'tavily_search', {\n          search_query: locationQuery,\n          target_city: city,\n          target_state: state,\n        });\n        if (stored.isNew === true) {\n          results.urls_stored++;\n        } else {\n          results.urls_duplicates++;\n        }\n      } catch (error) {\n        console.error(`❌ Failed to store URL ${url}:`, error);\n        results.errors.push(\n          `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        );\n      }\n    }\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Store multiple discovered URLs with metadata\n   */\n  async storeDiscoveredUrls(\n    urls: string[],\n    discoveryMethod: string = 'manual',\n    metadata: Record<string, unknown> = {},\n  ): Promise<{\n    urls_stored: number;\n    urls_duplicates: number;\n    errors: string[];\n  }> {\n    const result: {\n      urls_stored: number;\n      urls_duplicates: number;\n      errors: string[];\n    } = {\n      urls_stored: 0,\n      urls_duplicates: 0,\n      errors: [],\n    };\n\n    for (const url of urls) {\n      try {\n        const stored = await this.storeDiscoveredUrl(url, discoveryMethod, metadata);\n        if (stored.isNew === true) {\n          result.urls_stored++;\n        } else {\n          result.urls_duplicates++;\n        }\n      } catch (error) {\n        const errorMsg = `Failed to store URL ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`;\n        result.errors.push(errorMsg);\n        console.error(errorMsg);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Enhanced store method with discovery method and metadata\n   */\n  private async storeDiscoveredUrl(\n    url: string,\n    discoveryMethod: string = 'manual',\n    metadata: Record<string, unknown> = {},\n  ): Promise<{ isNew: boolean }> {\n    try {\n      if (!supabaseAdmin) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      // Check if URL already exists\n      const { data: existing } = await supabaseAdmin\n        .from('discovered_urls')\n        .select('id')\n        .eq('url', url)\n        .limit(1);\n\n      if (existing && existing.length > 0) {\n        return { isNew: false };\n      }\n\n      // Store new URL - handle missing columns gracefully\n      const insertData: Record<string, unknown> = {\n        url,\n        status: 'new',\n        notes: `Discovered via ${discoveryMethod}`,\n      };\n\n      // Add optional columns only if they exist in the table\n      try {\n        // Check if discovery_method column exists\n        const { error: testError } = await supabaseAdmin\n          .from('discovered_urls')\n          .select('discovery_method')\n          .limit(1);\n\n        if (!testError) {\n          insertData.discovery_method = discoveryMethod;\n          insertData.region = 'SC';\n          insertData.metadata = metadata;\n        }\n      } catch {\n        // Column doesn't exist, continue without it\n        console.info('Some columns missing in discovered_urls table, using basic structure');\n      }\n\n      const { error } = await supabaseAdmin.from('discovered_urls').insert(insertData);\n\n      if (error) {\n        throw error;\n      }\n\n      return { isNew: true };\n    } catch (error) {\n      console.error('Error storing discovered URL:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for food truck directories\n   */\n  async searchFoodTruckDirectories(\n    query: string = 'food truck directory South Carolina',\n  ): Promise<TavilySearchResult[]> {\n    try {\n      return await tavilySearch(query, { limit: 10 });\n    } catch (error) {\n      console.error('Error searching food truck directories:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Search for food truck websites\n   */\n  async searchFoodTruckWebsites(query: string): Promise<TavilySearchResult[]> {\n    try {\n      return await tavilySearch(query, { limit: 15 });\n    } catch (error) {\n      console.error('Error searching food truck websites:', error);\n      return [];\n    }\n  }\n}\n\nexport const discoveryEngine = new FoodTruckDiscoveryEngine();\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/firecrawl.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'crawlWebsite' has too many lines (60). Maximum allowed is 50.","line":145,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":204,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface FirecrawlResponse {\n  success: boolean;\n  data?: {\n    markdown?: string;\n    html?: string;\n    metadata?: {\n      title?: string;\n      description?: string;\n      language?: string;\n      sourceURL?: string;\n    };\n    links?: string[];\n  };\n  error?: string;\n}\n\ninterface CrawlJobResponse {\n  success: boolean;\n  jobId?: string;\n  error?: string;\n}\n\ninterface ScrapedMetadata {\n  title?: string;\n  description?: string;\n  language?: string;\n  sourceURL?: string;\n}\n\ninterface CrawlStatusResponse {\n  success: boolean;\n  status?: 'scraping' | 'completed' | 'failed';\n  data?: Array<{\n    markdown?: string;\n    html?: string;\n    metadata?: ScrapedMetadata;\n  }>;\n  error?: string;\n}\n\ninterface ContactInfo {\n  phone?: string;\n  email?: string;\n}\n\ninterface SocialMediaInfo {\n  instagram?: string;\n  facebook?: string;\n  twitter?: string;\n}\n\nconst FIRECRAWL_CACHE_TTL_MS = 1000 * 60 * 60 * 12; // 12 hours\nconst firecrawlCache: Record<string, { data: unknown; timestamp: number }> = {};\n\nexport class FirecrawlService {\n  private apiKey: string;\n  private baseUrl: string;\n\n  constructor() {\n    this.apiKey = process.env.FIRECRAWL_API_KEY!;\n    this.baseUrl = 'https://api.firecrawl.dev/v0';\n  }\n\n  private getCachedResult(\n    cacheKey: string,\n  ): FirecrawlResponse | CrawlJobResponse | CrawlStatusResponse | undefined {\n    const now = Date.now();\n    // Clean up expired cache\n    for (const key in firecrawlCache) {\n      if (\n        Object.prototype.hasOwnProperty.call(firecrawlCache, key) &&\n        now - firecrawlCache[key].timestamp > FIRECRAWL_CACHE_TTL_MS\n      ) {\n        delete firecrawlCache[key];\n      }\n    }\n    if (\n      firecrawlCache[cacheKey] != undefined &&\n      now - firecrawlCache[cacheKey].timestamp < FIRECRAWL_CACHE_TTL_MS\n    ) {\n      console.info(`FirecrawlService: Cache hit for ${cacheKey}`);\n      return firecrawlCache[cacheKey].data as\n        | FirecrawlResponse\n        | CrawlJobResponse\n        | CrawlStatusResponse;\n    }\n    return undefined;\n  }\n\n  private setCacheResult(cacheKey: string, data: unknown) {\n    firecrawlCache[cacheKey] = { data, timestamp: Date.now() };\n  }\n\n  async scrapeUrl(\n    url: string,\n    options: {\n      formats?: ('markdown' | 'html')[];\n      includeTags?: string[];\n      excludeTags?: string[];\n      onlyMainContent?: boolean;\n      waitFor?: number;\n    } = {},\n  ): Promise<FirecrawlResponse> {\n    const cacheKey = `scrape:${url}:${JSON.stringify(options)}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) {\n      return cached as FirecrawlResponse;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/scrape`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          url,\n          formats: options.formats ?? ['markdown'],\n          includeTags: options.includeTags,\n          excludeTags: options.excludeTags,\n          onlyMainContent: options.onlyMainContent ?? true,\n          waitFor: options.waitFor ?? 0,\n        }),\n      });\n\n      const data: unknown = await response.json();\n\n      if (!response.ok) {\n        const errorData = data as { error?: string };\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\n      }\n\n      this.setCacheResult(cacheKey, data);\n      return data as FirecrawlResponse;\n    } catch (error: unknown) {\n      console.warn('Firecrawl scrape error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  async crawlWebsite(\n    url: string,\n    options: {\n      crawlerOptions?: {\n        includes?: string[];\n        excludes?: string[];\n        maxDepth?: number;\n        limit?: number;\n      };\n      pageOptions?: {\n        formats?: ('markdown' | 'html')[];\n        onlyMainContent?: boolean;\n      };\n    } = {},\n  ): Promise<CrawlJobResponse> {\n    const cacheKey = `crawl:${url}:${JSON.stringify(options)}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) {\n      return cached as CrawlJobResponse;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/crawl`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          url,\n          crawlerOptions: {\n            maxDepth: 2,\n            limit: 10,\n            ...options.crawlerOptions,\n          },\n          pageOptions: {\n            formats: ['markdown'],\n            onlyMainContent: true,\n            ...options.pageOptions,\n          },\n        }),\n      });\n\n      const data: unknown = await response.json();\n\n      if (!response.ok) {\n        const errorData = data as { error?: string };\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\n      }\n\n      this.setCacheResult(cacheKey, data);\n      return data as CrawlJobResponse;\n    } catch (error: unknown) {\n      console.warn('Firecrawl crawl error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  async getCrawlStatus(jobId: string): Promise<CrawlStatusResponse> {\n    const cacheKey = `crawlStatus:${jobId}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) {\n      return cached as CrawlStatusResponse;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/crawl/status/${jobId}`, {\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n      });\n\n      const data: unknown = await response.json();\n\n      if (!response.ok) {\n        const errorData = data as { error?: string };\n        throw new Error(errorData.error ?? `HTTP ${response.status}`);\n      }\n\n      this.setCacheResult(cacheKey, data);\n      return data as CrawlStatusResponse;\n    } catch (error: unknown) {\n      console.warn('Firecrawl status error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  // Specialized methods for food truck data\n  async scrapeFoodTruckWebsite(url: string): Promise<{\n    success: boolean;\n    data?: { markdown: string; name?: string; source_url?: string };\n    error?: string;\n  }> {\n    const result = await this.scrapeUrl(url, {\n      formats: ['markdown'],\n      onlyMainContent: true,\n      waitFor: 2000,\n    });\n\n    return result.success && result.data?.markdown != undefined\n      ? {\n          success: true,\n          data: {\n            markdown: result.data.markdown,\n            name: result.data.metadata?.title,\n            source_url: result.data.metadata?.sourceURL,\n          },\n        }\n      : { success: false, error: result.error ?? 'Markdown content not found' };\n  }\n\n  private extractPattern(text: string, pattern: RegExp): string | undefined {\n    const match = pattern.exec(text);\n    return match ? match[1].trim() : undefined;\n  }\n  private extractMenuSection(markdown: string): string | undefined {\n    // Use simpler, more efficient regex patterns with fixed max length\n    const menuPatterns = [\n      /menu\\s*:\\s*([^\\n]{1,50})/i,\n      /food\\s*:\\s*([^\\n]{1,50})/i,\n      /items?\\s*:\\s*([^\\n]{1,50})/i,\n      /what we serve\\s*:\\s*([^\\n]{1,50})/i,\n      /our food\\s*:\\s*([^\\n]{1,50})/i,\n    ];\n\n    for (const pattern of menuPatterns) {\n      const match = pattern.exec(markdown);\n      if (match) {\n        return match[1].trim();\n      }\n    }\n\n    return undefined;\n  }\n  private extractContactInfo(markdown: string): ContactInfo | undefined {\n    const contact: ContactInfo = {}; // Phone number - Use specific patterns to prevent backtracking\n    const phoneRegex = /(?:phone|call|contact)(?:\\s*:\\s*)?([+]?\\d{3,4}[.\\s-]\\d{3}[.\\s-]\\d{3,4})/i;\n    const phoneMatch = phoneRegex.exec(markdown);\n    if (phoneMatch) {\n      contact.phone = phoneMatch[1].trim();\n    } // Email - Use specific pattern to avoid backtracking\n    const emailRegex = /([a-zA-Z0-9._%-]{1,64}@[a-zA-Z0-9-]{1,63}\\.[a-zA-Z]{2,6})/;\n    const emailMatch = emailRegex.exec(markdown);\n    if (emailMatch) {\n      contact.email = emailMatch[1].trim();\n    }\n\n    return Object.keys(contact).length > 0 ? contact : undefined;\n  }\n\n  private extractSocialMedia(markdown: string): SocialMediaInfo | undefined {\n    const social: SocialMediaInfo = {};\n    // Instagram - Use concise character class\n    const instagramRegex = /(?:instagram|@)\\s*([\\w.]+)/i;\n    const instagramMatch = instagramRegex.exec(markdown);\n    if (instagramMatch) {\n      social.instagram = instagramMatch[1].trim();\n    }\n    // Facebook - With fixed character class\n    const facebookRegex = /facebook\\.com\\/([\\w.-]+)/i;\n    const facebookMatch = facebookRegex.exec(markdown);\n    if (facebookMatch) {\n      social.facebook = facebookMatch[1].trim();\n    }\n    // Twitter - Use concise character class\n    const twitterRegex = /(?:twitter|@)\\s*([\\w.]+)/i; // Changed \\w+ to [\\w.]+ to allow dots in usernames\n    const twitterMatch = twitterRegex.exec(markdown);\n    if (twitterMatch) {\n      social.twitter = twitterMatch[1].trim();\n    }\n\n    return Object.keys(social).length > 0 ? social : undefined;\n  }\n\n  async scrapeMultipleUrls(\n    urls: string[],\n    options: {\n      batchSize?: number;\n      delay?: number;\n    } = {},\n  ): Promise<Array<{ url: string; result: FirecrawlResponse }>> {\n    const batchSize = options.batchSize ?? 5;\n    const delay = options.delay ?? 1000;\n    const results: Array<{ url: string; result: FirecrawlResponse }> = [];\n\n    for (let i = 0; i < urls.length; i += batchSize) {\n      const batch = urls.slice(i, i + batchSize);\n\n      const batchPromises = batch.map(async (url) => {\n        const result = await this.scrapeUrl(url);\n        return { url, result };\n      });\n\n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n\n      // Add delay between batches to respect rate limits\n      if (i + batchSize < urls.length) {\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      }\n    }\n\n    return results;\n  }\n\n  // Rate limiting and error handling\n  async scrapeWithRetry(url: string, maxRetries = 3, backoffMs = 1000): Promise<FirecrawlResponse> {\n    let lastError: Error;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await this.scrapeUrl(url);\n\n        if (result.success) {\n          return result;\n        }\n\n        // If it's a rate limit error, wait longer\n        if (result.error?.includes('rate limit') === true) {\n          const waitTime = backoffMs * Math.pow(2, attempt);\n          console.info(`Rate limited. Waiting ${waitTime}ms before retry ${attempt}/${maxRetries}`);\n          await new Promise((resolve) => setTimeout(resolve, waitTime));\n          continue;\n        }\n\n        throw new Error(result.error);\n      } catch (error: unknown) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n\n        if (attempt === maxRetries) {\n          break;\n        }\n\n        const waitTime = backoffMs * Math.pow(2, attempt);\n        console.info(`Attempt ${attempt} failed. Retrying in ${waitTime}ms...`);\n        await new Promise((resolve) => setTimeout(resolve, waitTime));\n      }\n    }\n\n    return {\n      success: false,\n      error: lastError!.message,\n    };\n  }\n}\n\n// Export singleton instance\nexport const firecrawl = new FirecrawlService();\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'APIMonitor' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'APIMonitor'.","line":2,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":20,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[45,99],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorContext' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":76,"endColumn":45},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":93,"endColumn":47},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":110,"endColumn":50},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":127,"endColumn":54}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APIUsageService } from './supabase';\nimport { APIMonitor } from './monitoring/apiMonitor';\nimport { GeminiApiClient } from './gemini/geminiApiClient';\nimport { GeminiUsageLimits } from './gemini/usageLimits';\nimport { PromptTemplates } from './gemini/promptTemplates';\nimport { GeminiResponseParser } from './gemini/responseParser';\n\nimport {\n  MenuCategory,\n  LocationData,\n  OperatingHours,\n  SentimentAnalysisResult,\n  EnhancedFoodTruckData,\n  ExtractedFoodTruckDetails,\n  GeminiResponse,\n} from './types';\n\nexport class GeminiService {\n  private apiClient: GeminiApiClient;\n  private dailyRequestLimit = 1500;\n  private dailyTokenLimit = 32_000;\n\n  constructor() {\n    this.apiClient = new GeminiApiClient();\n  }\n\n  async checkUsageLimits() {\n    return GeminiUsageLimits.checkUsageLimits({\n      dailyRequestLimit: this.dailyRequestLimit,\n      dailyTokenLimit: this.dailyTokenLimit,\n    });\n  }\n\n  private async makeGeminiRequest<T>(\n    prompt: string,\n    parser: (text: string) => T,\n    errorContext: string\n  ): Promise<GeminiResponse<T>> {\n    return this.apiClient.makeRequestWithParsing(prompt, parser);\n  }\n\n  async processMenuData(rawMenuText: string): Promise<GeminiResponse<MenuCategory[]>> {\n    const estimatedTokens = Math.ceil(rawMenuText.length / 4) + 500;\n    const usageCheck = await GeminiUsageLimits.checkWithMonitoring(estimatedTokens);\n\n    if (!usageCheck.allowed) {\n      return {\n        success: false,\n        error: usageCheck.reason ?? 'API limit reached',\n      };\n    }\n\n    const prompt = PromptTemplates.menuProcessing(rawMenuText);\n    return this.makeGeminiRequest(\n      prompt,\n      (text: string) => {\n        const parsedData = JSON.parse(text) as { categories: MenuCategory[] };\n        return parsedData.categories;\n      },\n      'menu processing'\n    );\n  }\n\n  async extractLocationFromText(textInput: string): Promise<GeminiResponse<LocationData>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded',\n      };\n    }\n\n    const prompt = PromptTemplates.locationExtraction(textInput);\n    return this.makeGeminiRequest(\n      prompt,\n      GeminiResponseParser.parseLocationData,\n      'location extraction'\n    );\n  }\n\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiResponse<OperatingHours>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded',\n      };\n    }\n\n    const prompt = PromptTemplates.operatingHours(hoursText);\n    return this.makeGeminiRequest(\n      prompt,\n      GeminiResponseParser.parseOperatingHours,\n      'hours standardization'\n    );\n  }\n\n  async analyzeSentiment(reviewText: string): Promise<GeminiResponse<SentimentAnalysisResult>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded',\n      };\n    }\n\n    const prompt = PromptTemplates.sentimentAnalysis(reviewText);\n    return this.makeGeminiRequest(\n      prompt,\n      GeminiResponseParser.parseSentimentAnalysis,\n      'sentiment analysis'\n    );\n  }\n\n  async enhanceFoodTruckData(rawData: unknown): Promise<GeminiResponse<EnhancedFoodTruckData>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded',\n      };\n    }\n\n    const prompt = PromptTemplates.dataEnhancement(rawData);\n    return this.makeGeminiRequest(\n      prompt,\n      GeminiResponseParser.parseEnhancedFoodTruckData,\n      'data enhancement'\n    );\n  }\n\n  async batchProcess(\n    items: Array<{ type: string; data: unknown }>,\n  ): Promise<Array<GeminiResponse<unknown>>> {\n    const results: Array<GeminiResponse<unknown>> = [];\n\n    for (const item of items) {\n      let result: GeminiResponse<unknown>;\n      switch (item.type) {\n        case 'menu': {\n          result = await this.processMenuData(item.data as string);\n          break;\n        }\n        case 'location': {\n          result = await this.extractLocationFromText(item.data as string);\n          break;\n        }\n        case 'hours': {\n          result = await this.standardizeOperatingHours(item.data as string);\n          break;\n        }\n        case 'sentiment': {\n          result = await this.analyzeSentiment(item.data as string);\n          break;\n        }\n        case 'enhance': {\n          result = await this.enhanceFoodTruckData(item.data); // item.data is already unknown\n          break;\n        }\n        default: {\n          result = { success: false, error: `Unknown processing type: ${item.type}` };\n          break;\n        }\n      }\n      results.push(result);\n    }\n\n    return results;\n  }\n\n  async getUsageStats(): Promise<{ requests_count: number; tokens_used: number } | undefined> {\n    const usage = await APIUsageService.getTodayUsage('gemini');\n    return usage ?? undefined;\n  }\n\n  async extractFoodTruckDetailsFromMarkdown(\n    markdownContent: string,\n    sourceUrl?: string,\n  ): Promise<GeminiResponse<ExtractedFoodTruckDetails>> {\n    const usageCheck = await this.checkUsageLimits();\n    if (!usageCheck.canMakeRequest) {\n      return {\n        success: false,\n        error: 'Daily API limits exceeded for Gemini',\n      };\n    }\n\n    const prompt = PromptTemplates.foodTruckExtraction(markdownContent, sourceUrl);\n\n\n    const response = await this.makeGeminiRequest(\n      prompt,\n      (text: string) => {\n        const cleanedText = GeminiResponseParser.cleanMarkdownResponse(text);\n        return GeminiResponseParser.parseExtractedFoodTruckDetails(cleanedText);\n      },\n      'food truck extraction'\n    );\n\n    // Add promptSent to response for this specific method\n    return {\n      ...response,\n      promptSent: prompt,\n    };\n  }\n}\n\n// Export singleton instance\nexport const gemini = new GeminiService();\n\n// Centralized Gemini operation dispatcher to eliminate duplication\nexport async function dispatchGeminiOperation(\n  type: 'menu' | 'location' | 'hours' | 'sentiment' | 'enhance',\n  data: unknown\n): Promise<unknown> {\n  switch (type) {\n    case 'menu': {\n      return await gemini.processMenuData(data as string);\n    }\n    case 'location': {\n      return await gemini.extractLocationFromText(data as string);\n    }\n    case 'hours': {\n      return await gemini.standardizeOperatingHours(data as string);\n    }\n    case 'sentiment': {\n      return await gemini.analyzeSentiment(data as string);\n    }\n    case 'enhance': {\n      return await gemini.enhanceFoodTruckData(data);\n    }\n    default: {\n      throw new Error(`Unknown Gemini operation type: ${String(type)}`);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini/geminiApiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini/promptTemplates.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Method 'foodTruckExtraction' has too many lines (69). Maximum allowed is 50.","line":151,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":219,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":157,"column":3,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":157,"endColumn":12,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4470,4479],"text":"(sourceUrl != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4470,4479],"text":"(sourceUrl ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4470,4479],"text":"(Boolean(sourceUrl))"},"desc":"Explicitly convert value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const PromptTemplates = {\n  menuProcessing: (rawMenuText: string) => `\nParse the following food truck menu text and return a structured JSON format.\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\n\nMenu text:\n${rawMenuText}\n\nExpected JSON format:\n[\n  {\n    \"category\": \"string\",\n    \"items\": [\n      {\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"price\": number,\n        \"dietary_tags\": [\"string\"]\n      }\n    ]\n  }\n]\n\nRules:\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\n- Include dietary restrictions and special tags\n- Group items into logical categories\n- If no clear categories, use \"Main Items\"\n- Return only the json, no additional text\n  `,\n\n  locationExtraction: (textInput: string) => `\nExtract location information from the following text and return structured data.\nLook for addresses, cross streets, landmarks, or location descriptions.\n\nText:\n${textInput}\n\nExpected JSON format:\n{\n  \"address\": \"string or undefined\",\n  \"city\": \"string or undefined\", \n  \"state\": \"string or undefined\",\n  \"zipCode\": \"string or undefined\",\n  \"coordinates\": {\"lat\": number, \"lng\": number} or undefined,\n  \"confidence\": number,\n  \"landmarks\": [\"string\"]\n}\n\nRules:\n- Set coordinates to undefined if not explicitly provided\n- Confidence should be 0.0 to 1.0 based on clarity\n- Include any mentioned landmarks or cross streets\n- Return only the json, no additional text\n  `,\n\n  operatingHours: (hoursText: string) => `\nParse the following operating hours text and return standardized format.\nConvert all times to 24-hour format and handle various input formats.\n\nHours text:\n${hoursText}\n\nExpected JSON format:\n{\n  \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\n  \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\n}\n\nRules:\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\n- If closed on a day, set \"closed\": true and omit open/close times\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\n- Default to reasonable hours if ambiguous\n- Return only the json, no additional text\n  `,\n\n  sentimentAnalysis: (reviewText: string) => `\nAnalyze the sentiment of this food truck review and extract key insights.\nFocus on food quality, service, value, and overall experience.\n\nReview text:\n${reviewText}\n\nExpected JSON format:\n{\n  \"score\": number,\n  \"confidence\": number,\n  \"aspects\": {\n    \"food_quality\": number,\n    \"service\": number,\n    \"value\": number,\n    \"overall\": number\n  },\n  \"summary\": \"string\",\n  \"keywords\": [\"string\"]\n}\n\nRules:\n- Score should be 0.0 (very negative) to 1.0 (very positive)\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\n- Include specific aspects mentioned in the review\n- Summary should be 1-2 sentences max\n- Return only the json, no additional text\n  `,\n\n  dataEnhancement: (rawData: unknown) => `\nEnhance and standardize the following food truck data.\nFill in missing information where possible and improve data quality.\n\nRaw data:\n${JSON.stringify(rawData, undefined, 2)}\n\nExpected JSON format:\n{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"cuisine_type\": \"string\",\n  \"price_range\": \"$ | $$ | $$$ | $$$$\",\n  \"contact\": {\n    \"phone\": \"string\",\n    \"email\": \"string\",\n    \"website\": \"string\",\n    \"social_media\": {}\n  },\n  \"location\": {\n    \"address\": \"string\",\n    \"city\": \"string\",\n    \"state\": \"string\",\n    \"coordinates\": {\"lat\": number, \"lng\": number}\n  },\n  \"operating_hours\": {},\n  \"menu_categories\": [\"string\"],\n  \"specialties\": [\"string\"],\n  \"dietary_options\": [\"string\"]\n}\n\nRules:\n- Preserve all original data while enhancing it\n- Standardize naming conventions\n- Infer cuisine type from menu items\n- Estimate price range from menu prices\n- Return only the json, no additional text\n  `,\n\n  foodTruckExtraction: (markdownContent: string, sourceUrl?: string) => `\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\n\nWebsite content:\n${markdownContent}\n\n${sourceUrl ? `Source URL: ${sourceUrl}` : ''}\n\nExpected JSON schema:\n{\n  \"name\": \"string (food truck name)\",\n  \"description\": \"string (brief description of the food truck)\",\n  \"cuisine_type\": \"string (type of cuisine served)\",\n  \"contact\": {\n    \"phone\": \"string (phone number if found)\",\n    \"email\": \"string (email if found)\", \n    \"website\": \"string (website URL if found)\",\n    \"social_media\": {\n      \"facebook\": \"string (Facebook URL if found)\",\n      \"instagram\": \"string (Instagram URL if found)\",\n      \"twitter\": \"string (Twitter URL if found)\"\n    }\n  },\n  \"location\": {\n    \"address\": \"string (physical address if found)\",\n    \"city\": \"string (city name)\",\n    \"state\": \"string (state abbreviation)\",\n    \"coordinates\": {\n      \"lat\": \"number (latitude if found)\",\n      \"lng\": \"number (longitude if found)\"\n    }\n  },\n  \"operating_hours\": {\n    \"monday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"tuesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"wednesday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"thursday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"friday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"saturday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"},\n    \"sunday\": {\"open\": \"string (HH:MM)\", \"close\": \"string (HH:MM)\", \"closed\": \"boolean\"}\n  },\n  \"menu\": [\n    {\n      \"category\": \"string (menu category)\",\n      \"items\": [\n        {\n          \"name\": \"string (item name)\",\n          \"description\": \"string (item description)\",\n          \"price\": \"number (price as number, not string)\",\n          \"dietary_tags\": [\"string (dietary restrictions/tags)\"]\n        }\n      ]\n    }\n  ],\n  \"specialties\": [\"string (signature dishes or specialties)\"],\n  \"dietary_options\": [\"string (dietary accommodations like vegan, gluten-free)\"],\n  \"price_range\": \"string ($ for under $10, $$ for $10-20, $$$ for $20-30, $$$$ for over $30)\"\n}\n\nInstructions:\n- Extract as much information as possible from the provided content\n- If information is not available, use null for the field\n- For operating hours, use 24-hour format (e.g., \"14:30\" for 2:30 PM)\n- If a day is closed, set \"closed\": true and omit open/close times\n- For prices, extract numeric values only (e.g., 12.99, not \"$12.99\")\n- Be thorough in extracting menu items and their details\n- Look for social media links and contact information carefully\n- Return only the JSON object, no additional text or formatting\n  `\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini/responseParser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/gemini/usageLimits.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limits' is assigned a value but never used. Allowed unused args must match /^_/u.","line":60,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APIUsageService } from '../supabase';\nimport { APIMonitor } from '../monitoring/apiMonitor';\n\nexport interface UsageLimits {\n  dailyRequestLimit: number;\n  dailyTokenLimit: number;\n}\n\nexport interface UsageCheck {\n  canMakeRequest: boolean;\n  usage?: {\n    requests: { used: number; limit: number; remaining: number };\n    tokens: { used: number; limit: number; remaining: number };\n  };\n}\n\nexport class GeminiUsageLimits {\n  private static readonly DEFAULT_LIMITS: UsageLimits = {\n    dailyRequestLimit: 1500,\n    dailyTokenLimit: 32_000,\n  };\n\n  static async checkUsageLimits(limits: UsageLimits = this.DEFAULT_LIMITS): Promise<UsageCheck> {\n    try {\n      const usage = await APIUsageService.getTodayUsage('gemini');\n\n      if (!usage) {\n        return { canMakeRequest: true };\n      }\n\n      const requestsUsed = usage.requests_count ?? 0;\n      const tokensUsed = usage.tokens_used ?? 0;\n\n      const requestsRemaining = limits.dailyRequestLimit - requestsUsed;\n      const tokensRemaining = limits.dailyTokenLimit - tokensUsed;\n\n      return {\n        canMakeRequest: requestsRemaining > 0 && tokensRemaining > 100, // Keep 100 token buffer\n        usage: {\n          requests: {\n            used: requestsUsed,\n            limit: limits.dailyRequestLimit,\n            remaining: requestsRemaining,\n          },\n          tokens: {\n            used: tokensUsed,\n            limit: limits.dailyTokenLimit,\n            remaining: tokensRemaining,\n          },\n        },\n      };\n    } catch (error: unknown) {\n      console.warn('Error checking Gemini usage limits:', error);\n      return { canMakeRequest: false };\n    }\n  }\n\n  static async checkWithMonitoring(\n    estimatedTokens: number,\n    limits: UsageLimits = this.DEFAULT_LIMITS\n  ): Promise<{ allowed: boolean; reason?: string; waitTime?: number }> {\n    const canMakeRequest = await APIMonitor.canMakeRequest('gemini', 1, estimatedTokens);\n\n    if (!canMakeRequest.allowed) {\n      return {\n        allowed: false,\n        reason: `API limit reached: ${canMakeRequest.reason}. Wait time: ${Math.ceil((canMakeRequest.waitTime ?? 0) / 1000 / 60)} minutes`,\n      };\n    }\n\n    return { allowed: true };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/monitoring/apiMonitor.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static method 'generateAlerts' has too many lines (93). Maximum allowed is 50.","line":191,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":283,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA API Usage Monitoring and Alerting System\n * Implements proactive monitoring, alerting, and throttling for all external APIs\n */\n\nimport { APIUsageService } from '@/lib/supabase';\n\n// API Rate Limits Configuration\nexport const API_LIMITS = {\n  gemini: {\n    requests: { daily: 1500, hourly: 100 },\n    tokens: { daily: 32_000, hourly: 2000 },\n    alertThresholds: { warning: 0.8, critical: 0.95 }\n  },\n  firecrawl: {\n    requests: { daily: 500, hourly: 50 },\n    tokens: { daily: 0, hourly: 0 },\n    alertThresholds: { warning: 0.8, critical: 0.95 }\n  },\n  tavily: {\n    requests: { daily: 1000, hourly: 100 },\n    tokens: { daily: 0, hourly: 0 },\n    alertThresholds: { warning: 0.8, critical: 0.95 }\n  },\n  supabase: {\n    requests: { daily: 50_000, hourly: 5000 },\n    tokens: { daily: 0, hourly: 0 },\n    alertThresholds: { warning: 0.9, critical: 0.98 }\n  }\n} as const;\n\nexport type APIService = keyof typeof API_LIMITS;\nexport type AlertLevel = 'info' | 'warning' | 'critical';\n\nexport interface APIUsageAlert {\n  service: APIService;\n  level: AlertLevel;\n  message: string;\n  usage: {\n    current: number;\n    limit: number;\n    percentage: number;\n  };\n  timestamp: string;\n  recommendations: string[];\n}\n\nexport interface APIUsageData {\n  requests: { used: number; limit: number; percentage: number };\n  tokens?: { used: number; limit: number; percentage: number };\n}\n\nexport interface APIMonitoringResult {\n  canMakeRequest: boolean;\n  alerts: APIUsageAlert[];\n  usage: Record<APIService, APIUsageData>;\n  recommendations: string[];\n}\n\n/**\n * Comprehensive API Monitoring Service\n */\nexport class APIMonitor {\n  private static alertHistory: APIUsageAlert[] = [];\n\n  /**\n   * Check if API request can be made safely\n   */\n  static async canMakeRequest(\n    service: APIService, \n    requestCount: number = 1, \n    tokenCount: number = 0\n  ): Promise<{ allowed: boolean; reason?: string; waitTime?: number }> {\n    try {\n      const usage = await this.getCurrentUsage(service);\n      const limits = API_LIMITS[service];\n\n      // Check daily limits\n      const newRequestCount = usage.requests.used + requestCount;\n      const newTokenCount = (usage.tokens?.used ?? 0) + tokenCount;\n\n      if (newRequestCount > limits.requests.daily) {\n        return {\n          allowed: false,\n          reason: `Daily request limit exceeded (${newRequestCount}/${limits.requests.daily})`,\n          waitTime: this.getTimeUntilReset('daily')\n        };\n      }\n\n      if (limits.tokens != undefined && newTokenCount > limits.tokens.daily) {\n        return {\n          allowed: false,\n          reason: `Daily token limit exceeded (${newTokenCount}/${limits.tokens.daily})`,\n          waitTime: this.getTimeUntilReset('daily')\n        };\n      }\n\n      // Check if approaching critical threshold\n      const requestPercentage = newRequestCount / limits.requests.daily;\n      if (requestPercentage > limits.alertThresholds.critical) {\n        return {\n          allowed: false,\n          reason: `Approaching critical usage threshold (${(requestPercentage * 100).toFixed(1)}%)`,\n          waitTime: this.getTimeUntilReset('daily')\n        };\n      }\n\n      return { allowed: true };\n    } catch (error) {\n      console.error(`Error checking API limits for ${service}:`, error);\n      // Fail safe - allow request but log error\n      return { allowed: true };\n    }\n  }\n\n  /**\n   * Get current usage for a service\n   */\n  static async getCurrentUsage(service: APIService): Promise<APIUsageData> {\n    const todayUsage = await APIUsageService.getTodayUsage(service);\n    const limits = API_LIMITS[service];\n\n    const usage: APIUsageData = {\n      requests: {\n        used: todayUsage?.requests_count ?? 0,\n        limit: limits.requests.daily,\n        percentage: ((todayUsage?.requests_count ?? 0) / limits.requests.daily) * 100\n      }\n    };\n\n    if (limits.tokens.daily > 0) {\n      usage.tokens = {\n        used: todayUsage?.tokens_used ?? 0,\n        limit: limits.tokens.daily,\n        percentage: ((todayUsage?.tokens_used ?? 0) / limits.tokens.daily) * 100\n      };\n    }\n\n    return usage;\n  }\n\n  /**\n   * Comprehensive monitoring check for all APIs\n   */\n  static async checkAllAPIs(): Promise<APIMonitoringResult> {\n    const alerts: APIUsageAlert[] = [];\n    const usage: Record<APIService, APIUsageData> = {} as Record<APIService, APIUsageData>;\n    const recommendations: string[] = [];\n    let canMakeRequest = true;\n\n    for (const service of Object.keys(API_LIMITS) as APIService[]) {\n      try {\n        const serviceUsage = await this.getCurrentUsage(service);\n        usage[service] = serviceUsage;\n\n        // Check for alerts\n        const serviceAlerts = this.generateAlerts(service, serviceUsage);\n        alerts.push(...serviceAlerts);\n\n        // Check if any service is at critical level\n        if (serviceUsage.requests.percentage > API_LIMITS[service].alertThresholds.critical * 100) {\n          canMakeRequest = false;\n        }\n      } catch (error) {\n        console.error(`Error monitoring ${service}:`, error);\n        alerts.push({\n          service,\n          level: 'warning',\n          message: `Failed to check usage for ${service}`,\n          usage: { current: 0, limit: 0, percentage: 0 },\n          timestamp: new Date().toISOString(),\n          recommendations: ['Check API connectivity', 'Verify credentials']\n        });\n      }\n    }\n\n    // Generate global recommendations\n    recommendations.push(...this.generateRecommendations(usage, alerts));\n\n    return {\n      canMakeRequest,\n      alerts,\n      usage,\n      recommendations\n    };\n  }\n\n  /**\n   * Generate alerts for a specific service\n   */\n  private static generateAlerts(service: APIService, usage: APIUsageData): APIUsageAlert[] {\n    const alerts: APIUsageAlert[] = [];\n    const limits = API_LIMITS[service];\n    const timestamp = new Date().toISOString();\n\n    // Check request usage\n    const requestPercentage = usage.requests.percentage;\n    if (requestPercentage > limits.alertThresholds.critical * 100) {\n      alerts.push({\n        service,\n        level: 'critical',\n        message: `Critical: ${service} request usage at ${requestPercentage.toFixed(1)}%`,\n        usage: {\n          current: usage.requests.used,\n          limit: usage.requests.limit,\n          percentage: requestPercentage\n        },\n        timestamp,\n        recommendations: [\n          'Immediately reduce API calls',\n          'Implement request queuing',\n          'Consider upgrading API plan'\n        ]\n      });\n    } else if (requestPercentage > limits.alertThresholds.warning * 100) {\n      alerts.push({\n        service,\n        level: 'warning',\n        message: `Warning: ${service} request usage at ${requestPercentage.toFixed(1)}%`,\n        usage: {\n          current: usage.requests.used,\n          limit: usage.requests.limit,\n          percentage: requestPercentage\n        },\n        timestamp,\n        recommendations: [\n          'Monitor usage closely',\n          'Optimize request patterns',\n          'Enable request caching'\n        ]\n      });\n    }\n\n    // Check token usage if applicable\n    if (usage.tokens && limits.tokens.daily > 0) {\n      const tokenPercentage = usage.tokens.percentage;\n      if (tokenPercentage > limits.alertThresholds.critical * 100) {\n        alerts.push({\n          service,\n          level: 'critical',\n          message: `Critical: ${service} token usage at ${tokenPercentage.toFixed(1)}%`,\n          usage: {\n            current: usage.tokens.used,\n            limit: usage.tokens.limit,\n            percentage: tokenPercentage\n          },\n          timestamp,\n          recommendations: [\n            'Reduce prompt complexity',\n            'Implement response caching',\n            'Optimize token usage patterns'\n          ]\n        });\n      } else if (tokenPercentage > limits.alertThresholds.warning * 100) {\n        alerts.push({\n          service,\n          level: 'warning',\n          message: `Warning: ${service} token usage at ${tokenPercentage.toFixed(1)}%`,\n          usage: {\n            current: usage.tokens.used,\n            limit: usage.tokens.limit,\n            percentage: tokenPercentage\n          },\n          timestamp,\n          recommendations: [\n            'Monitor token consumption',\n            'Optimize prompt efficiency',\n            'Consider response caching'\n          ]\n        });\n      }\n    }\n\n    // Store alerts in history\n    this.alertHistory.push(...alerts);\n    \n    // Keep only last 100 alerts\n    if (this.alertHistory.length > 100) {\n      this.alertHistory = this.alertHistory.slice(-100);\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Generate optimization recommendations\n   */\n  private static generateRecommendations(usage: Record<APIService, APIUsageData>, alerts: APIUsageAlert[]): string[] {\n    const recommendations: string[] = [];\n\n    // High-level optimization recommendations\n    const criticalAlerts = alerts.filter(a => a.level === 'critical');\n    const warningAlerts = alerts.filter(a => a.level === 'warning');\n\n    if (criticalAlerts.length > 0) {\n      recommendations.push('URGENT: Implement immediate API throttling', 'Enable aggressive caching for all API responses', 'Consider upgrading API plans for critical services');\n    }\n\n    if (warningAlerts.length > 0) {\n      recommendations.push('Implement request queuing and batching', 'Optimize API call patterns and frequency', 'Enable response caching where possible');\n    }\n\n    // Service-specific recommendations\n    if (usage.gemini?.requests?.percentage > 70) {\n      recommendations.push('Gemini: Optimize prompt length and complexity', 'Gemini: Implement response caching for similar queries');\n    }\n\n    if (usage.firecrawl?.requests?.percentage > 70) {\n      recommendations.push('Firecrawl: Implement URL deduplication', 'Firecrawl: Cache crawl results for repeated URLs');\n    }\n\n    return [...new Set(recommendations)]; // Remove duplicates\n  }\n\n  /**\n   * Get time until rate limit reset\n   */\n  private static getTimeUntilReset(period: 'hourly' | 'daily'): number {\n    const now = new Date();\n    \n    if (period === 'hourly') {\n      const nextHour = new Date(now);\n      nextHour.setHours(now.getHours() + 1, 0, 0, 0);\n      return nextHour.getTime() - now.getTime();\n    } else {\n      const nextDay = new Date(now);\n      nextDay.setDate(now.getDate() + 1);\n      nextDay.setHours(0, 0, 0, 0);\n      return nextDay.getTime() - now.getTime();\n    }\n  }\n\n  /**\n   * Get alert history\n   */\n  static getAlertHistory(): APIUsageAlert[] {\n    return [...this.alertHistory];\n  }\n\n  /**\n   * Clear alert history\n   */\n  static clearAlertHistory(): void {\n    this.alertHistory = [];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/performance/bundleAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/performance/databaseCache.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Async arrow function has too many lines (66). Maximum allowed is 50.","line":78,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":143,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":142,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":142,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Database Query Optimization and Caching\n * Implements Next.js unstable_cache for optimal performance\n */\n\nimport { unstable_cache } from 'next/cache';\nimport { supabaseAdmin, FoodTruckService } from '@/lib/supabase';\nimport type { FoodTruck } from '@/lib/types';\n\n// Cache configuration\nconst CACHE_CONFIG = {\n  // Short-term cache for frequently changing data\n  SHORT_TTL: 60 * 5, // 5 minutes\n  // Medium-term cache for semi-static data\n  MEDIUM_TTL: 60 * 30, // 30 minutes\n  // Long-term cache for static data\n  LONG_TTL: 60 * 60 * 24, // 24 hours\n} as const;\n\n/**\n * Cached food truck queries with optimized database access\n */\nexport const CachedFoodTruckService = {\n  /**\n   * Get all food trucks with caching\n   * Cache for 30 minutes since truck data changes moderately\n   */\n  getAllTrucksCached : unstable_cache(\n    async (): Promise<{ trucks: FoodTruck[]; count: number }> => {\n      console.info('CachedFoodTruckService: Cache miss - fetching all trucks from database');\n      const result = await FoodTruckService.getAllTrucks();\n      return { trucks: result.trucks, count: result.total };\n    },\n    ['all-trucks'],\n    {\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\n      tags: ['food-trucks', 'all-trucks']\n    }\n  ),\n\n  /**\n   * Get trucks by location with caching\n   * Cache for 5 minutes since location-based queries are time-sensitive\n   */\n  getTrucksByLocationCached : unstable_cache(\n    async (lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> => {\n      console.info(`CachedFoodTruckService: Cache miss - fetching trucks near ${lat},${lng} (${radiusKm}km)`);\n      return await FoodTruckService.getTrucksByLocation(lat, lng, radiusKm);\n    },\n    ['trucks-by-location'],\n    {\n      revalidate: CACHE_CONFIG.SHORT_TTL,\n      tags: ['food-trucks', 'location-search']\n    }\n  ),\n\n  /**\n   * Get truck by ID with caching\n   * Cache for 30 minutes since individual truck data is relatively stable\n   */\n  getTruckByIdCached : unstable_cache(\n    async (id: string): Promise<FoodTruck | null> => {\n      console.info(`CachedFoodTruckService: Cache miss - fetching truck ${id} from database`);\n      return await FoodTruckService.getTruckById(id);\n    },\n    ['truck-by-id'],\n    {\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\n      tags: ['food-trucks', 'truck-details']\n    }\n  ),\n\n  /**\n   * Search trucks with caching\n   * Cache for 5 minutes since search results should be relatively fresh\n   */\n  searchTrucksCached : unstable_cache(\n    async (query: string, filters?: {\n      cuisine?: string;\n      openNow?: boolean;\n      lat?: number;\n      lng?: number;\n      radius?: number;\n    }): Promise<FoodTruck[]> => {\n      console.info(`CachedFoodTruckService: Cache miss - searching trucks for \"${query}\"`);\n      \n      if (supabaseAdmin == undefined) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      let dbQuery = supabaseAdmin\n        .from('food_trucks')\n        .select('*')\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%,cuisine_type.cs.{${query}}`);\n\n      // Apply filters\n      if (filters?.cuisine != undefined && filters.cuisine !== '') {\n        dbQuery = dbQuery.contains('cuisine_type', [filters.cuisine]);\n      }\n\n      const { data: trucks, error } = await dbQuery.limit(50);\n\n      if (error != undefined) {\n        throw new Error(`Search query failed: ${error.message}`);\n      }\n\n      let results = trucks ?? [];\n\n      // Apply location filter if provided\n      if (filters?.lat != undefined && filters?.lng != undefined && filters?.radius != undefined) {\n        results = results.filter((truck: FoodTruck) => {\n          if (truck.current_location?.lat == undefined || truck.current_location?.lng == undefined) {\n            return false;\n          }\n          const distance = calculateDistance(\n            filters.lat,\n            filters.lng,\n            truck.current_location.lat,\n            truck.current_location.lng\n          );\n          return distance <= (filters.radius ?? 10);\n        });\n      }\n\n      // Apply openNow filter if provided\n      if (filters?.openNow === true) {\n        const now = new Date();\n        const currentDay = now.toLocaleDateString('en-US', { weekday: 'short' }).toLowerCase(); // 'mon', 'tue', etc.\n        const currentTime = now.getHours() * 100 + now.getMinutes(); // HHMM format\n\n        results = results.filter((truck: FoodTruck) => {\n          const hours = truck.operating_hours?.[currentDay as keyof typeof truck.operating_hours] as { closed?: boolean; open?: string; close?: string } | undefined;\n          if (hours == undefined || hours.closed === true) return false;\n\n          const openTime = parseTimeString(hours.open ?? '');\n          const closeTime = parseTimeString(hours.close ?? '');\n\n          return currentTime >= openTime && currentTime <= closeTime;\n        });\n      }\n\n      return results;\n    },\n    ['search-trucks'],\n    {\n      revalidate: CACHE_CONFIG.SHORT_TTL,\n      tags: ['food-trucks', 'search']\n    }\n  ),\n\n  /**\n   * Get data quality statistics with caching\n   * Cache for 24 hours since quality stats change slowly\n   */\n  getDataQualityStatsCached : unstable_cache(\n    async (): Promise<{\n      averageScore: number;\n      distribution: Record<string, number>;\n      totalTrucks: number;\n    }> => {\n      console.info('CachedFoodTruckService: Cache miss - calculating data quality stats');\n      \n      if (supabaseAdmin == undefined) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      const { data: trucks, error } = await supabaseAdmin\n        .from('food_trucks')\n        .select('data_quality_score');\n\n      if (error) {\n        throw new Error(`Quality stats query failed: ${error.message}`);\n      }\n\n      const scores = trucks == undefined ? [] : trucks.map((t: { data_quality_score?: number }) => t.data_quality_score ?? 0);\n      const averageScore = scores.length > 0\n        ? scores.reduce((sum: number, score: number) => sum + score, 0) / scores.length\n        : 0;\n\n      const distribution = {\n        high: scores.filter((s: number) => s >= 0.8).length,\n        medium: scores.filter((s: number) => s >= 0.6 && s < 0.8).length,\n        low: scores.filter((s: number) => s < 0.6).length\n      };\n\n      return {\n        averageScore: Math.round(averageScore * 100) / 100,\n        distribution,\n        totalTrucks: scores.length\n      };\n    },\n    ['data-quality-stats'],\n    {\n      revalidate: CACHE_CONFIG.LONG_TTL,\n      tags: ['food-trucks', 'data-quality']\n    }\n  ),\n};\n\n/**\n * Cache invalidation utilities\n */\nexport const CacheManager = {\n  /**\n   * Invalidate all food truck related caches\n   */\n  async invalidateAllFoodTruckCaches(): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag('food-trucks');\n      console.info('CacheManager: Invalidated all food truck caches');\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate caches:', error);\n    }\n  },\n\n  /**\n   * Invalidate specific truck cache\n   */\n  async invalidateTruckCache(truckId: string): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag(`truck-${truckId}`);\n      revalidateTag('food-trucks'); // Also invalidate general caches\n      console.info(`CacheManager: Invalidated cache for truck ${truckId}`);\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate truck cache:', error);\n    }\n  },\n\n  /**\n   * Invalidate search and location caches\n   */\n  async invalidateSearchCaches(): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag('search');\n      revalidateTag('location-search');\n      console.info('CacheManager: Invalidated search caches');\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate search caches:', error);\n    }\n  },\n};\n\n/**\n * Utility functions\n */\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nfunction parseTimeString(timeStr: string): number {\n  if (timeStr == undefined || timeStr === '') return 0;\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  return hours * 100 + (minutes ?? 0);\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/performance/webVitals.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'getPerformanceOptimizationSuggestions' has too many lines (102). Maximum allowed is 50.","line":221,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":322,"endColumn":2}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":105,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":105,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":107,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":107,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":109,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":109,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":113,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":113,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Core Web Vitals Monitoring Implementation\n * Tracks LCP, FID, CLS, FCP, and TTFB metrics for performance optimization\n */\n\n// @ts-expect-error TS(2792): Cannot find module 'web-vitals'. Did you mean to s... Remove this comment to see the full error message\nimport { getCLS, getFCP, getFID, getLCP, getTTFB, Metric } from 'web-vitals';\n\n// Performance thresholds based on Google's Core Web Vitals standards\nexport const PERFORMANCE_THRESHOLDS = {\n  LCP: { good: 2500, needsImprovement: 4000 }, // Largest Contentful Paint\n  FID: { good: 100, needsImprovement: 300 },   // First Input Delay\n  CLS: { good: 0.1, needsImprovement: 0.25 },  // Cumulative Layout Shift\n  FCP: { good: 1800, needsImprovement: 3000 }, // First Contentful Paint\n  TTFB: { good: 800, needsImprovement: 1800 }  // Time to First Byte\n} as const;\n\nexport type MetricName = keyof typeof PERFORMANCE_THRESHOLDS;\n\nexport interface PerformanceMetric {\n  name: MetricName;\n  value: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  timestamp: number;\n  url: string;\n  userAgent: string;\n}\n\n// In-memory storage for metrics (in production, send to analytics service)\nconst metricsStore: PerformanceMetric[] = [];\n\n/**\n * Categorizes metric value based on thresholds\n */\nfunction getRating(name: MetricName, value: number): 'good' | 'needs-improvement' | 'poor' {\n  const thresholds = PERFORMANCE_THRESHOLDS[name];\n  if (value <= thresholds.good) return 'good';\n  if (value <= thresholds.needsImprovement) return 'needs-improvement';\n  return 'poor';\n}\n\n/**\n * Processes and stores a web vital metric\n */\nfunction handleMetric(metric: Metric) {\n  // Type-safe casting with validation\n  const metricName = String((metric as { name: string }).name) as MetricName;\n  const metricValue = Number((metric as { value: number }).value);\n\n  const performanceMetric: PerformanceMetric = {\n    name: metricName,\n    value: metricValue,\n    rating: getRating(metricName, metricValue),\n    timestamp: Date.now(),\n    url: globalThis.location.href,\n    userAgent: navigator.userAgent\n  };\n\n  // Store metric locally\n  metricsStore.push(performanceMetric);\n\n  // Send to analytics endpoint (non-blocking)\n  sendMetricToAnalytics(performanceMetric).catch(error => {\n    console.warn('Failed to send metric to analytics:', error);\n  });\n\n  // Log performance issues\n  if (performanceMetric.rating === 'poor') {\n    console.warn(`Poor ${metricName} performance:`, {\n      value: metricValue,\n      threshold: PERFORMANCE_THRESHOLDS[metricName],\n      url: performanceMetric.url\n    });\n  }\n}\n\n/**\n * Sends metric data to analytics endpoint\n */\nasync function sendMetricToAnalytics(metric: PerformanceMetric): Promise<void> {\n  try {\n    await fetch('/api/analytics/web-vitals', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(metric),\n    });\n  } catch (error) {\n    // Silently fail - don't impact user experience\n    console.info('Analytics endpoint unavailable:', error);\n  }\n}\n\n/**\n * Initializes Core Web Vitals monitoring\n * Call this in your app's root component or _app.tsx\n */\nexport function initWebVitalsMonitoring(): void {\n  try {\n    // Type-safe metric handlers with explicit casting\n    const safeHandleMetric = (metric: Metric) => handleMetric(metric);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getCLS(safeHandleMetric);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getFCP(safeHandleMetric);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getFID(safeHandleMetric);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getLCP(safeHandleMetric);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    getTTFB(safeHandleMetric);\n  } catch (error) {\n    console.warn('Failed to initialize web vitals monitoring:', error);\n  }\n}\n\n/**\n * Gets current performance metrics summary\n */\nexport function getPerformanceMetrics(): {\n  metrics: PerformanceMetric[];\n  summary: Record<MetricName, {\n    latest: number | null;\n    average: number;\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\n    count: number;\n  }>;\n} {\n  const summary = {} as Record<MetricName, {\n    latest: number | null;\n    average: number;\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\n    count: number;\n  }>;\n\n  // Initialize summary for all metrics\n  for (const metricName of Object.keys(PERFORMANCE_THRESHOLDS)) {\n    const name = metricName as MetricName;\n    const metricData = metricsStore.filter(m => m.name === name);\n    \n    if (metricData.length === 0) {\n      summary[name] = {\n        latest: undefined,\n        average: 0,\n        rating: 'no-data',\n        count: 0\n      };\n    } else {\n      const latest = metricData.at(-1);\n      const average = metricData.reduce((sum, m) => sum + m.value, 0) / metricData.length;\n      \n      summary[name] = {\n        latest: latest?.value ?? undefined,\n        average: Math.round(average),\n        rating: getRating(name, average),\n        count: metricData.length\n      };\n    }\n  }\n\n  return {\n    metrics: [...metricsStore],\n    summary\n  };\n}\n\n/**\n * Performance budget checker\n */\nexport function checkPerformanceBudget(): {\n  passed: boolean;\n  violations: Array<{\n    metric: MetricName;\n    value: number;\n    threshold: number;\n    severity: 'warning' | 'critical';\n  }>;\n} {\n  const { summary } = getPerformanceMetrics();\n  const violations: Array<{\n    metric: MetricName;\n    value: number;\n    threshold: number;\n    severity: 'warning' | 'critical';\n  }> = [];\n\n  for (const [metricName, data] of Object.entries(summary)) {\n    const name = metricName as MetricName;\n    if (data.latest == undefined) continue;\n\n    const thresholds = PERFORMANCE_THRESHOLDS[name];\n    \n    if (data.latest > thresholds.needsImprovement) {\n      violations.push({\n        metric: name,\n        value: data.latest,\n        threshold: thresholds.needsImprovement,\n        severity: 'critical'\n      });\n    } else if (data.latest > thresholds.good) {\n      violations.push({\n        metric: name,\n        value: data.latest,\n        threshold: thresholds.good,\n        severity: 'warning'\n      });\n    }\n  }\n\n  return {\n    passed: violations.length === 0,\n    violations\n  };\n}\n\n/**\n * Performance optimization suggestions based on metrics\n */\nexport function getPerformanceOptimizationSuggestions(): Array<{\n  metric: MetricName;\n  issue: string;\n  suggestions: string[];\n  priority: 'high' | 'medium' | 'low';\n}> {\n  const { summary } = getPerformanceMetrics();\n  const suggestions: Array<{\n    metric: MetricName;\n    issue: string;\n    suggestions: string[];\n    priority: 'high' | 'medium' | 'low';\n  }> = [];\n\n  for (const [metricName, data] of Object.entries(summary)) {\n    const name = metricName as MetricName;\n    if (data.rating === 'poor' || data.rating === 'needs-improvement') {\n      switch (name) {\n        case 'LCP': {\n          suggestions.push({\n            metric: name,\n            issue: `Largest Contentful Paint is ${data.latest}ms (target: <2500ms)`,\n            suggestions: [\n              'Optimize images with Next.js Image component',\n              'Implement lazy loading for non-critical content',\n              'Use CDN for static assets',\n              'Optimize server response times',\n              'Preload critical resources'\n            ],\n            priority: 'high'\n          });\n          break;\n        }\n        case 'FID': {\n          suggestions.push({\n            metric: name,\n            issue: `First Input Delay is ${data.latest}ms (target: <100ms)`,\n            suggestions: [\n              'Reduce JavaScript bundle size',\n              'Implement code splitting',\n              'Use web workers for heavy computations',\n              'Optimize third-party scripts',\n              'Defer non-critical JavaScript'\n            ],\n            priority: 'high'\n          });\n          break;\n        }\n        case 'CLS': {\n          suggestions.push({\n            metric: name,\n            issue: `Cumulative Layout Shift is ${data.latest} (target: <0.1)`,\n            suggestions: [\n              'Set explicit dimensions for images and videos',\n              'Reserve space for dynamic content',\n              'Use CSS aspect-ratio for responsive images',\n              'Avoid inserting content above existing content',\n              'Use transform animations instead of layout changes'\n            ],\n            priority: 'medium'\n          });\n          break;\n        }\n        case 'FCP': {\n          suggestions.push({\n            metric: name,\n            issue: `First Contentful Paint is ${data.latest}ms (target: <1800ms)`,\n            suggestions: [\n              'Optimize critical rendering path',\n              'Inline critical CSS',\n              'Minimize render-blocking resources',\n              'Use resource hints (preload, prefetch)',\n              'Optimize web fonts loading'\n            ],\n            priority: 'medium'\n          });\n          break;\n        }\n        case 'TTFB': {\n          suggestions.push({\n            metric: name,\n            issue: `Time to First Byte is ${data.latest}ms (target: <800ms)`,\n            suggestions: [\n              'Optimize server response times',\n              'Use CDN for global distribution',\n              'Implement server-side caching',\n              'Optimize database queries',\n              'Use edge computing for dynamic content'\n            ],\n            priority: 'high'\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  return suggestions.sort((a, b) => {\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/pipelineProcessor.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'buildTruckDataSchema' has too many lines (66). Maximum allowed is 50.","line":35,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":100,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4645,4648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4645,4648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6265,6268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6265,6268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":145,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":145,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":82},{"ruleId":"max-lines-per-function","severity":2,"message":"Async function 'processScrapingJob' has too many lines (106). Maximum allowed is 50.","line":156,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":261,"endColumn":2},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":348,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":348,"endColumn":80}],"suppressedMessages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 22 to the 15 allowed.","line":156,"column":23,"nodeType":null,"messageId":"refactorFunction","endLine":156,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\nimport { gemini } from '@/lib/gemini';\nimport { ScrapingJobService, FoodTruckService } from '@/lib/supabase';\nimport { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from './types';\nimport { DuplicatePreventionService } from './data-quality/duplicatePrevention';\n\n// Helper function to validate input and prepare basic data\nasync function validateInputAndPrepare(\n  jobId: string,\n  extractedTruckData: ExtractedFoodTruckDetails,\n  sourceUrl: string\n): Promise<{ isValid: boolean; name: string }> {\n  // Basic input validation\n  if (!validateTruckData(jobId, extractedTruckData)) {\n    await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n      errors: ['Invalid extracted data received from AI processing step.'],\n    });\n    return { isValid: false, name: '' };\n  }\n\n  if (!sourceUrl) {\n    // Log a warning but proceed if sourceUrl is missing, as it might not be critical for all data.\n    console.warn(`Job ${jobId}: Missing sourceUrl for food truck data, proceeding without it.`);\n  }\n\n  const name = extractedTruckData.name ?? 'Unknown Food Truck'; // Ensure name has a fallback\n  console.info(\n    `Job ${jobId}: Preparing to create/update food truck: ${name} from ${sourceUrl ?? 'Unknown Source'}`,\n  );\n\n  return { isValid: true, name };\n}\n\n// Helper function to build truck data schema\nfunction buildTruckDataSchema(\n  extractedTruckData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n  name: string\n): FoodTruckSchema {\n  const currentLocation = buildLocationData(extractedTruckData);\n\n  return {\n    name: name,\n    description: extractedTruckData.description ?? undefined, // Keep as undefined if null/missing\n    current_location: currentLocation,\n    scheduled_locations: Array.isArray(extractedTruckData.scheduled_locations)\n      ? extractedTruckData.scheduled_locations.map((loc) => ({\n          lat: typeof loc.lat === 'number' ? loc.lat : 0,\n          lng: typeof loc.lng === 'number' ? loc.lng : 0,\n          address: loc.address ?? undefined,\n          start_time: loc.start_time ?? undefined,\n          end_time: loc.end_time ?? undefined,\n          timestamp: new Date().toISOString(),\n        }))\n      : undefined,\n    operating_hours: extractedTruckData.operating_hours == undefined\n      ? {\n          monday: { closed: true },\n          tuesday: { closed: true },\n          wednesday: { closed: true },\n          thursday: { closed: true },\n          friday: { closed: true },\n          saturday: { closed: true },\n          sunday: { closed: true },\n        }\n      : {\n          monday: extractedTruckData.operating_hours.monday ?? { closed: true },\n          tuesday: extractedTruckData.operating_hours.tuesday ?? { closed: true },\n          wednesday: extractedTruckData.operating_hours.wednesday ?? { closed: true },\n          thursday: extractedTruckData.operating_hours.thursday ?? { closed: true },\n          friday: extractedTruckData.operating_hours.friday ?? { closed: true },\n          saturday: extractedTruckData.operating_hours.saturday ?? { closed: true },\n          sunday: extractedTruckData.operating_hours.sunday ?? { closed: true },\n        },\n    menu: processMenuData(extractedTruckData),\n    contact_info: {\n      phone: extractedTruckData.contact_info?.phone ?? undefined,\n      email: extractedTruckData.contact_info?.email ?? undefined,\n      website: extractedTruckData.contact_info?.website ?? undefined,\n    },\n    social_media: {\n      instagram: extractedTruckData.social_media?.instagram ?? undefined,\n      facebook: extractedTruckData.social_media?.facebook ?? undefined,\n      twitter: extractedTruckData.social_media?.twitter ?? undefined,\n      tiktok: extractedTruckData.social_media?.tiktok ?? undefined,\n      yelp: extractedTruckData.social_media?.yelp ?? undefined,\n    },\n    cuisine_type: Array.isArray(extractedTruckData.cuisine_type)\n      ? extractedTruckData.cuisine_type\n      : [],\n    price_range: extractedTruckData.price_range ?? undefined, // Ensure it's one of the allowed enum values or undefined\n    specialties: Array.isArray(extractedTruckData.specialties)\n      ? extractedTruckData.specialties\n      : [],\n    data_quality_score: 0.5, // Default score - confidence_score not available in type\n    verification_status: 'pending',\n    source_urls: sourceUrl != undefined && sourceUrl !== '' ? [sourceUrl] : [], // Ensure source_urls is always an array\n    last_scraped_at: new Date().toISOString(),\n  };\n}\n\n// Helper function to handle duplicate checking and resolution\nasync function handleDuplicateCheck(\n  jobId: string,\n  truckData: FoodTruckSchema,\n  name: string\n): Promise<any> {\n  // Check for duplicates before creating\n  console.info(`Job ${jobId}: Checking for duplicates before creating truck: ${name}`);\n  const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\n\n  let truck;\n  if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\n    const { bestMatch } = duplicateCheck;\n    console.info(`Job ${jobId}: Found potential duplicate (${Math.round(bestMatch.similarity * 100)}% similarity) with truck: ${bestMatch.existingTruck.name}`);\n\n    if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\n      // Merge with existing truck\n      truck = await DuplicatePreventionService.mergeDuplicates(bestMatch.existingTruck.id, bestMatch.existingTruck.id);\n      console.info(`Job ${jobId}: Merged data with existing truck: ${truck.name} (ID: ${truck.id})`);\n    } else if (bestMatch.recommendation === 'update') {\n      // Update existing truck with new data\n      truck = await FoodTruckService.updateTruck(bestMatch.existingTruck.id, truckData);\n      console.info(`Job ${jobId}: Updated existing truck: ${truck.name} (ID: ${truck.id})`);\n    } else {\n      // Create new truck but log the potential duplicate\n      truck = await FoodTruckService.createTruck(truckData);\n      console.warn(`Job ${jobId}: Created new truck despite potential duplicate (${duplicateCheck.reason})`);\n    }\n  } else {\n    // No duplicates found, create new truck\n    truck = await FoodTruckService.createTruck(truckData);\n  }\n\n  return truck;\n}\n\n// Helper function to finalize job status\nasync function finalizeJobStatus(\n  jobId: string,\n  truck: any,\n  sourceUrl: string\n): Promise<void> {\n  console.info(\n    `Job ${jobId}: Successfully created food truck: ${truck.name} (ID: ${truck.id}) from ${sourceUrl ?? 'Unknown Source'}`,\n  );\n\n  // Link truck_id back to the scraping job\n  await ScrapingJobService.updateJobStatus(jobId, 'completed', {\n    completed_at: new Date().toISOString(),\n  });\n}\n\n// Background job processing function\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport async function processScrapingJob(jobId: string) {\n  try {\n    // Update job status to running\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\n\n    if (job.target_url == undefined) {\n      throw new Error('No target URL specified');\n    }\n\n    // Scrape the website using Firecrawl\n    console.info(`Starting scrape for ${job.target_url}`);\n    const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(job.target_url); // Simplified call\n\n    if (scrapeResult.success !== true || scrapeResult.data?.markdown == undefined) {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n        errors: [scrapeResult.error ?? 'Scraping failed or markdown content not found'],\n      });\n      throw new Error(scrapeResult.error ?? 'Scraping failed or markdown content not found');\n    }\n\n    console.info(`Scraping successful for ${job.target_url}, proceeding to Gemini extraction.`);\n\n    // Call Gemini to extract structured data\n    const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(\n      scrapeResult.data.markdown,\n      scrapeResult.data.source_url ?? job.target_url,\n    );\n\n    if (geminiResult.success !== true || geminiResult.data == undefined) {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n        errors: [geminiResult.error ?? 'Gemini data extraction failed'],\n      });\n      throw new Error(geminiResult.error ?? 'Gemini data extraction failed');\n    }\n\n    console.info(`Gemini extraction successful for ${job.target_url}.`);\n\n    // Update job with structured data from Gemini\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\n      data_collected: geminiResult.data as unknown as Record<string, unknown>, // Cast to unknown first, then to Record<string, unknown>\n      completed_at: new Date().toISOString(),\n    });\n\n    // Create or update FoodTruck entry\n    await createOrUpdateFoodTruck(\n      jobId,\n      geminiResult.data,\n      scrapeResult.data.source_url ?? job.target_url,\n    );\n\n    // The call to processScrapedData is removed as Gemini now handles full extraction.\n    // The old processScrapedData and processDataQueue can remain for other potential uses or reprocessing.\n\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\n  } catch (error: unknown) {\n    // Explicitly type error as unknown\n    console.error(`Scraping job ${jobId} failed:`, error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n\n    // Attempt to update job status to failed\n    try {\n      // Check current status to avoid overwriting if already failed in a specific step\n      const currentJobData = await ScrapingJobService.getJobsByStatus('all').then((jobs) =>\n        jobs.find((j) => j.id === jobId),\n      );\n      if (currentJobData && currentJobData.status !== 'failed') {\n        await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n          errors: [errorMessage],\n        });\n      } else if (!currentJobData) {\n        // If job couldn't be fetched, log but proceed to retry logic if appropriate\n        console.error(`Could not fetch job ${jobId} to update status to failed.`);\n      }\n    } catch (statusUpdateError) {\n      console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\n    }\n\n    // Increment retry count and potentially retry\n    try {\n      const jobAfterRetryIncrement = await ScrapingJobService.incrementRetryCount(jobId);\n      // Ensure jobAfterRetryIncrement and its properties are valid before using them\n      if (\n        jobAfterRetryIncrement != undefined &&\n        typeof jobAfterRetryIncrement.retry_count === 'number' &&\n        typeof jobAfterRetryIncrement.max_retries === 'number'\n      ) {\n        if (jobAfterRetryIncrement.retry_count < jobAfterRetryIncrement.max_retries) {\n          console.info(\n            `Retrying job ${jobId} (attempt ${jobAfterRetryIncrement.retry_count}/${jobAfterRetryIncrement.max_retries})`,\n          );\n          setTimeout(() => {\n            void processScrapingJob(jobId);\n          }, 5000); // Retry after 5 seconds\n        } else {\n          console.warn(`Job ${jobId} reached max retries (${jobAfterRetryIncrement.max_retries}).`);\n        }\n      } else {\n        console.error(\n          `Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`,\n        );\n      }\n    } catch (retryIncrementError) {\n      console.error(`Error during retry increment logic for job ${jobId}:`, retryIncrementError);\n    }\n  }\n}\n\n// Helper function to validate input data\nfunction validateTruckData(jobId: string, extractedTruckData: ExtractedFoodTruckDetails): boolean {\n  if (extractedTruckData == undefined || typeof extractedTruckData !== 'object') {\n    console.error(`Job ${jobId}: Invalid extractedTruckData, cannot create/update food truck.`);\n    return false;\n  }\n  return true;\n}\n\n// Helper function to build location data\nfunction buildLocationData(extractedTruckData: ExtractedFoodTruckDetails) {\n  const locationData = extractedTruckData.current_location ?? {};\n  const fullAddress = [\n    locationData.address,\n    locationData.city,\n    locationData.state,\n    locationData.zip_code,\n  ]\n    .filter(Boolean)\n    .join(', ');\n\n  return {\n    lat: typeof locationData.lat === 'number' ? locationData.lat : 0,\n    lng: typeof locationData.lng === 'number' ? locationData.lng : 0,\n    address: fullAddress || (locationData.raw_text ?? undefined),\n    timestamp: new Date().toISOString(),\n  };\n}\n\n// Helper function to process menu data\nfunction processMenuData(extractedTruckData: ExtractedFoodTruckDetails): MenuCategory[] {\n  if (!Array.isArray(extractedTruckData.menu)) {\n    return [];\n  }\n\n  return extractedTruckData.menu.map((category: unknown): MenuCategory => {\n    const categoryData = category as { items?: unknown[]; category?: string; name?: string };\n    const items = (Array.isArray(categoryData.items) ? categoryData.items : []).map(\n      (item: unknown): MenuItem => {\n        const itemData = item as {\n          name?: string;\n          description?: string;\n          price?: string | number;\n          dietary_tags?: string[];\n        };\n        let price: number | undefined = undefined;\n        if (typeof itemData.price === 'number') {\n          price = itemData.price;\n        } else if (typeof itemData.price === 'string') {\n          const parsedPrice = Number.parseFloat(itemData.price.replaceAll(/[^\\d.-]/g, ''));\n          if (!Number.isNaN(parsedPrice)) {\n            price = parsedPrice;\n          }\n        }\n        return {\n          name: itemData.name ?? 'Unknown Item',\n          description: itemData.description ?? undefined,\n          price: price,\n          dietary_tags: Array.isArray(itemData.dietary_tags) ? itemData.dietary_tags : [],\n        };\n      },\n    );\n    return {\n      name: categoryData.category ?? categoryData.name ?? 'Uncategorized',\n      items: items,\n    };\n  });\n}\n\nexport async function createOrUpdateFoodTruck(\n  jobId: string,\n  extractedTruckData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n) {\n  try {\n    // Validate input and prepare basic data\n    const validation = await validateInputAndPrepare(jobId, extractedTruckData, sourceUrl);\n    if (!validation.isValid) {\n      return;\n    }\n\n    // Build truck data schema\n    const truckData = buildTruckDataSchema(extractedTruckData, sourceUrl, validation.name);\n\n    // Handle duplicate checking and resolution\n    const truck = await handleDuplicateCheck(jobId, truckData, validation.name);\n\n    // Finalize job status\n    await finalizeJobStatus(jobId, truck, sourceUrl);\n  } catch (error: unknown) {\n    console.error(\n      `Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl ?? 'Unknown Source'}:`,\n      error,\n    );\n    // Update the scraping job with this error information\n    try {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n        errors: [\n          `Food truck data processing/saving failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        ],\n      });\n    } catch (jobUpdateError) {\n      console.error(\n        `Job ${jobId}: Critical error - failed to update job status after data processing failure:`,\n        jobUpdateError,\n      );\n    }\n  }\n}\n\n// Fix type assignment and compatibility errors, replace any with unknown or specific types, and remove unused variables/imports.\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/security/auditLogger.ts","messages":[{"ruleId":"max-params","severity":2,"message":"Static async method 'logAdminAction' has too many parameters (7). Maximum allowed is 4.","line":42,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":42,"endColumn":30},{"ruleId":"max-params","severity":2,"message":"Static async method 'logAuthEvent' has too many parameters (5). Maximum allowed is 4.","line":117,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":117,"endColumn":28},{"ruleId":"max-params","severity":2,"message":"Static async method 'logDataAccess' has too many parameters (6). Maximum allowed is 4.","line":143,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":143,"endColumn":29}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":234,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":234,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":274,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":274,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Security Audit Logging System\n * Implements comprehensive audit logging for admin actions and security events\n */\n\nimport { supabaseAdmin } from '@/lib/supabase';\n\n// Type alias for severity levels to comply with sonarjs/use-type-alias\ntype SeverityLevel = 'info' | 'warning' | 'error' | 'critical';\n\nexport interface AuditLogEntry {\n  user_id: string;\n  user_email: string;\n  action: string;\n  resource_type: string;\n  resource_id?: string;\n  details?: Record<string, unknown>;\n  ip_address?: string;\n  user_agent?: string;\n  session_id?: string;\n  timestamp: string;\n  severity: SeverityLevel;\n}\n\nexport interface SecurityEvent {\n  event_type: 'login_attempt' | 'login_success' | 'login_failure' | 'logout' | 'permission_denied' | 'data_access' | 'data_modification' | 'admin_action';\n  user_id?: string;\n  user_email?: string;\n  ip_address?: string;\n  user_agent?: string;\n  details?: Record<string, unknown>;\n  severity: SeverityLevel;\n}\n\n/**\n * Audit Logger Service\n */\nexport class AuditLogger {\n  /**\n   * Log admin action with full audit trail\n   */\n  static async logAdminAction(\n    userId: string,\n    userEmail: string,\n    action: string,\n    resourceType: string,\n    resourceId?: string,\n    details?: Record<string, unknown>,\n    request?: {\n      ip?: string;\n      userAgent?: string;\n      sessionId?: string;\n    }\n  ): Promise<void> {\n    const auditEntry: AuditLogEntry = {\n      user_id: userId,\n      user_email: userEmail,\n      action,\n      resource_type: resourceType,\n      resource_id: resourceId,\n      details,\n      ip_address: request?.ip,\n      user_agent: request?.userAgent,\n      session_id: request?.sessionId,\n      timestamp: new Date().toISOString(),\n      severity: this.determineSeverity(action, resourceType)\n    };\n\n    await this.writeAuditLog(auditEntry);\n    \n    // Log to console for immediate monitoring\n    console.info('Admin Action Audit:', {\n      user: userEmail,\n      action,\n      resource: (resourceId === undefined) ? resourceType : `${resourceType}:${resourceId}`,\n      timestamp: auditEntry.timestamp\n    });\n  }\n\n  /**\n   * Log security event\n   */\n  static async logSecurityEvent(event: SecurityEvent): Promise<void> {\n    const logEntry = {\n      event_type: event.event_type,\n      user_id: event.user_id,\n      user_email: event.user_email,\n      ip_address: event.ip_address,\n      user_agent: event.user_agent,\n      details: event.details,\n      severity: event.severity,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      if (supabaseAdmin) {\n        await supabaseAdmin\n          .from('security_events')\n          .insert(logEntry);\n      }\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n\n    // Always log security events to console\n    console.info('Security Event:', logEntry);\n\n    // Alert on critical security events\n    if (event.severity === 'critical' || event.severity === 'error') {\n      console.warn('SECURITY ALERT:', logEntry);\n    }\n  }\n\n  /**\n   * Log authentication events\n   */\n  static async logAuthEvent(\n    eventType: 'login_attempt' | 'login_success' | 'login_failure' | 'logout',\n    userEmail?: string,\n    userId?: string,\n    request?: {\n      ip?: string;\n      userAgent?: string;\n    },\n    details?: Record<string, unknown>\n  ): Promise<void> {\n    const severity = eventType === 'login_failure' ? 'warning' : 'info';\n    \n    await this.logSecurityEvent({\n      event_type: eventType,\n      user_id: userId,\n      user_email: userEmail,\n      ip_address: request?.ip,\n      user_agent: request?.userAgent,\n      details,\n      severity\n    });\n  }\n\n  /**\n   * Log data access events\n   */\n  static async logDataAccess(\n    userId: string,\n    userEmail: string,\n    resourceType: string,\n    resourceId?: string,\n    action: 'read' | 'search' | 'export' = 'read',\n    request?: {\n      ip?: string;\n      userAgent?: string;\n    }\n  ): Promise<void> {\n    await this.logSecurityEvent({\n      event_type: 'data_access',\n      user_id: userId,\n      user_email: userEmail,\n      ip_address: request?.ip,\n      user_agent: request?.userAgent,\n      details: {\n        resource_type: resourceType,\n        resource_id: resourceId,\n        action\n      },\n      severity: 'info'\n    });\n  }\n\n  /**\n   * Write audit log to database\n   */\n  private static async writeAuditLog(entry: AuditLogEntry): Promise<void> {\n    try {\n      if (supabaseAdmin) {\n        await supabaseAdmin\n          .from('audit_logs')\n          .insert(entry);\n      }\n    } catch (error) {\n      console.error('Failed to write audit log:', error);\n      // Don't throw - audit logging should not break application flow\n    }\n  }\n\n  /**\n   * Determine severity based on action and resource type\n   */\n  private static determineSeverity(action: string, resourceType: string): SeverityLevel {\n    // Critical actions\n    if (action.includes('delete') || action.includes('remove')) {\n      return 'critical';\n    }\n    \n    // Warning actions\n    if (action.includes('update') || action.includes('modify') || action.includes('change')) {\n      return 'warning';\n    }\n    \n    // Admin-specific actions\n    if (resourceType === 'user' || resourceType === 'admin' || resourceType === 'system') {\n      return 'warning';\n    }\n    \n    // Default to info\n    return 'info';\n  }\n\n  /**\n   * Get audit logs for a specific user\n   */\n  static async getUserAuditLogs(\n    userId: string,\n    limit: number = 100,\n    offset: number = 0\n  ): Promise<AuditLogEntry[]> {\n    try {\n      if (!supabaseAdmin) {\n        return [];\n      }\n\n      const { data, error } = await supabaseAdmin\n        .from('audit_logs')\n        .select('*')\n        .eq('user_id', userId)\n        .order('timestamp', { ascending: false })\n        .range(offset, offset + limit - 1);\n\n      if (error) {\n        console.error('Failed to fetch user audit logs:', error);\n        return [];\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return data ?? [];\n    } catch (error) {\n      console.error('Error fetching user audit logs:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get recent security events\n   */\n  static async getRecentSecurityEvents(\n    hours: number = 24,\n    severity?: SeverityLevel\n  ): Promise<Record<string, unknown>[]> {\n    try {\n      if (!supabaseAdmin) {\n        return [];\n      }\n\n      const startTime = new Date();\n      startTime.setHours(startTime.getHours() - hours);\n\n      let query = supabaseAdmin\n        .from('security_events')\n        .select('*')\n        .gte('timestamp', startTime.toISOString())\n        .order('timestamp', { ascending: false });\n\n      if (severity) {\n        query = query.eq('severity', severity);\n      }\n\n      const { data, error } = await query.limit(500);\n\n      if (error) {\n        console.error('Failed to fetch security events:', error);\n        return [];\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return data ?? [];\n    } catch (error) {\n      console.error('Error fetching security events:', error);\n      return [];\n    }\n  }\n}\n\n/**\n * Security monitoring utilities\n */\nexport const SecurityMonitor = {\n  /**\n   * Check for suspicious activity patterns\n   */\n  async checkSuspiciousActivity(userId: string): Promise<{\n    suspicious: boolean;\n    reasons: string[];\n    riskLevel: 'low' | 'medium' | 'high';\n  }> {\n    const reasons: string[] = [];\n    let riskLevel: 'low' | 'medium' | 'high' = 'low';\n\n    try {\n      // Check recent failed login attempts\n      const recentEvents = await AuditLogger.getRecentSecurityEvents(1, 'warning');\n      const failedLogins = recentEvents.filter(\n         \n        event => event.event_type === 'login_failure' && event.user_id === userId\n      );\n\n      if (failedLogins.length > 5) {\n        reasons.push('Multiple failed login attempts');\n        riskLevel = 'high';\n      } else if (failedLogins.length > 2) {\n        reasons.push('Recent failed login attempts');\n        riskLevel = 'medium';\n      }\n\n      // Check for unusual access patterns\n      const auditLogs = await AuditLogger.getUserAuditLogs(userId, 50);\n      const recentActions = auditLogs.filter(\n        log => new Date(log.timestamp) > new Date(Date.now() - 60 * 60 * 1000) // Last hour\n      );\n\n      if (recentActions.length > 20) {\n        reasons.push('High activity volume');\n        riskLevel = riskLevel === 'high' ? 'high' : 'medium';\n      }\n\n      return {\n        suspicious: reasons.length > 0,\n        reasons,\n        riskLevel\n      };\n    } catch (error) {\n      console.error('Error checking suspicious activity:', error);\n      return {\n        suspicious: false,\n        reasons: [],\n        riskLevel: 'low'\n      };\n    }\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/security/rateLimiter.ts","messages":[{"ruleId":"max-lines-per-function","severity":2,"message":"Static method 'checkRateLimit' has too many lines (69). Maximum allowed is 50.","line":51,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":119,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Rate Limiting Implementation\n * Prevents brute force attacks and API abuse with intelligent rate limiting\n */\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  blocked: boolean;\n  blockUntil?: number;\n}\n\n\n// In-memory rate limit store (in production, use Redis)\nconst rateLimitStore = new Map<string, RateLimitEntry>();\n\n// Rate limit configurations for different endpoints\nexport const RATE_LIMIT_CONFIGS = {\n  // Authentication endpoints - strict limits\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5, // 5 attempts per 15 minutes\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\n    skipSuccessfulRequests: true\n  },\n  // API endpoints - moderate limits\n  api: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 60, // 60 requests per minute\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\n    skipSuccessfulRequests: false\n  },\n  // Admin endpoints - very strict limits\n  admin: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 20, // 20 requests per minute\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\n    skipSuccessfulRequests: false\n  }\n} as const;\n\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\n\n/**\n * Rate Limiter Service\n */\nexport class RateLimiter {\n  /**\n   * Check if request should be rate limited\n   */\n  static checkRateLimit(\n    identifier: string,\n    type: RateLimitType = 'api'\n  ): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    \n    // Clean up expired entries\n    this.cleanupExpiredEntries();\n    \n    let entry = rateLimitStore.get(key);\n    \n    // Initialize entry if it doesn't exist\n    if (!entry) {\n      entry = {\n        count: 0,\n        resetTime: now + config.windowMs,\n        blocked: false\n      };\n      rateLimitStore.set(key, entry);\n    }\n    \n    // Check if currently blocked\n    if (entry.blocked && (entry.blockUntil != undefined) && now < entry.blockUntil) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000)\n      };\n    }\n    \n    // Reset window if expired\n    if (now >= entry.resetTime) {\n      entry.count = 0;\n      entry.resetTime = now + config.windowMs;\n      entry.blocked = false;\n      entry.blockUntil = undefined;\n    }\n    \n    // Check if limit exceeded\n    if (entry.count >= config.maxRequests) {\n      entry.blocked = true;\n      entry.blockUntil = now + config.blockDurationMs;\n      \n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil(config.blockDurationMs / 1000)\n      };\n    }\n    \n    // Increment counter\n    entry.count++;\n    rateLimitStore.set(key, entry);\n    \n    return {\n      allowed: true,\n      remaining: config.maxRequests - entry.count,\n      resetTime: entry.resetTime\n    };\n  }\n  \n  /**\n   * Record successful request (for auth endpoints)\n   */\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\n    const config = RATE_LIMIT_CONFIGS[type];\n    if (!config.skipSuccessfulRequests) return;\n    \n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n    \n    if (entry) {\n      // Reset counter on successful auth\n      entry.count = 0;\n      entry.blocked = false;\n      entry.blockUntil = undefined;\n      rateLimitStore.set(key, entry);\n    }\n  }\n  \n  /**\n   * Get rate limit status without incrementing\n   */\n  static getStatus(\n    identifier: string,\n    type: RateLimitType = 'api'\n  ): {\n    remaining: number;\n    resetTime: number;\n    blocked: boolean;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n    \n    if (!entry) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false\n      };\n    }\n    \n    // Check if blocked\n    if (entry.blocked && (entry.blockUntil != undefined) && now < entry.blockUntil) {\n      return {\n        remaining: 0,\n        resetTime: entry.resetTime,\n        blocked: true,\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000)\n      };\n    }\n    \n    // Check if window expired\n    if (now >= entry.resetTime) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false\n      };\n    }\n    \n    return {\n      remaining: Math.max(0, config.maxRequests - entry.count),\n      resetTime: entry.resetTime,\n      blocked: false\n    };\n  }\n  \n  /**\n   * Clean up expired entries to prevent memory leaks\n   */\n  private static cleanupExpiredEntries(): void {\n    const now = Date.now();\n    \n    for (const [key, entry] of rateLimitStore.entries()) {\n      // Remove entries that are expired and not blocked\n      if (now >= entry.resetTime && (!entry.blocked || (entry.blockUntil == undefined) || now >= entry.blockUntil)) {\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n  \n  /**\n   * Clear all rate limit data for an identifier\n   */\n  static clearLimits(identifier: string, type?: RateLimitType): void {\n    if (type) {\n      const key = `${type}:${identifier}`;\n      rateLimitStore.delete(key);\n    } else {\n      // Clear all types for this identifier\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS)) {\n        const key = `${limitType}:${identifier}`;\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n  \n  /**\n   * Get rate limit statistics\n   */\n  static getStats(): {\n    totalEntries: number;\n    blockedEntries: number;\n    entriesByType: Record<string, number>;\n  } {\n    const stats = {\n      totalEntries: rateLimitStore.size,\n      blockedEntries: 0,\n      entriesByType: {} as Record<string, number>\n    };\n    \n    for (const [key, entry] of rateLimitStore.entries()) {\n      const type = key.split(':')[0];\n      stats.entriesByType[type] = (stats.entriesByType[type] ?? 0) + 1;\n      \n      if (entry.blocked) {\n        stats.blockedEntries++;\n      }\n    }\n    \n    return stats;\n  }\n}\n\n/**\n * Utility function to get client identifier from request\n */\nexport function getClientIdentifier(request: Request): string {\n  // Try to get IP address from various headers\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\n  \n  // Use the first available IP\n  const ip = (forwarded?.split(',')[0]?.trim() ?? realIp ?? cfConnectingIp) ?? 'unknown';\n  \n  // Include user agent for more specific identification\n  const userAgent = request.headers.get('user-agent') ?? 'unknown';\n  \n  // Create a hash of IP + User Agent for better identification\n  return `${ip}:${userAgent.slice(0, 50)}`;\n}\n\n/**\n * Rate limiting middleware for API routes\n */\nexport function withRateLimit(\n  handler: (request: Request) => Promise<Response>,\n  type: RateLimitType = 'api'\n) {\n  return async (request: Request): Promise<Response> => {\n    const identifier = getClientIdentifier(request);\n    const result = RateLimiter.checkRateLimit(identifier, type);\n    \n    if (result.allowed === false) {\n      const headers = new Headers({\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\n        'X-RateLimit-Remaining': '0',\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\n      });\n      \n      if (result.retryAfter != undefined) {\n        headers.set('Retry-After', result.retryAfter.toString());\n      }\n      \n      return new Response(\n        JSON.stringify({\n          error: 'Rate limit exceeded',\n          message: (result.retryAfter == undefined) ? 'Too many requests. Try again later.' : `Too many requests. Try again in ${result.retryAfter} seconds.`,\n          retryAfter: result.retryAfter\n        }),\n        {\n          status: 429,\n          headers: {\n            'Content-Type': 'application/json',\n            ...Object.fromEntries(headers.entries())\n          }\n        }\n      );\n    }\n    \n    // Add rate limit headers to successful responses\n    const response = await handler(request);\n    \n    response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\n    response.headers.set('X-RateLimit-Remaining', result.remaining.toString());\n    response.headers.set('X-RateLimit-Reset', new Date(result.resetTime).toISOString());\n    \n    return response;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/utils/dataQualityFormatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/lib/utils/quality-scorer.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `qualityScorer.ts` or `QualityScorer.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"unicorn/no-empty-file","severity":2,"message":"Empty files are not allowed.","line":1,"column":1,"nodeType":"Program","messageId":"no-empty-file","endLine":1,"endColumn":1}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/app/lib/utils/qualityScorer.ts","messages":[{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":114,"column":9,"nodeType":"Literal","endLine":114,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Quality Scoring Utilities\n * Centralized quality scoring functions to eliminate duplication\n * and provide consistent quality metrics across the application\n */\n\nimport { isNonEmptyString, isValidNumber, safeNumber, safeString } from './typeGuards';\n\n// Quality score weights (must sum to 1.0)\nexport const QUALITY_WEIGHTS = {\n  CORE_DATA: 0.35,      // 35% - name, description, location\n  LOCATION_DATA: 0.25,  // 25% - coordinates, address\n  CONTACT_DATA: 0.2,    // 20% - phone, email, website\n  MENU_DATA: 0.1,       // 10% - menu items, pricing\n  OPERATIONAL_DATA: 0.05, // 5% - hours, social media\n  VERIFICATION: 0.05    // 5% - verification status\n} as const;\n\n// Quality thresholds\nexport const QUALITY_THRESHOLDS = {\n  HIGH: 0.8,    // 80%+\n  MEDIUM: 0.6,  // 60-79%\n  LOW: 0       // <60%\n} as const;\n\n// Core data quality scoring\nexport function scoreCoreData(truck: Record<string, unknown>): number {\n  let score = 0;\n  let maxScore = 0;\n\n  // Name (required - 40% of core score)\n  maxScore += 0.4;\n  if (isNonEmptyString(truck.name)) {\n    score += 0.4;\n  }\n\n  // Description (30% of core score)\n  maxScore += 0.3;\n  if (isNonEmptyString(truck.description)) {\n    const desc = safeString(truck.description);\n    if (desc.length > 50) {\n      score += 0.3;\n    } else if (desc.length > 20) {\n      score += 0.15;\n    }\n  }\n\n  // Cuisine type (20% of core score)\n  maxScore += 0.2;\n  if (isNonEmptyString(truck.cuisine_type)) {\n    score += 0.2;\n  }\n\n  // Image URL (10% of core score)\n  maxScore += 0.1;\n  if (isNonEmptyString(truck.image_url)) {\n    score += 0.1;\n  }\n\n  return maxScore > 0 ? score / maxScore : 0;\n}\n\n// Location data quality scoring\nexport function scoreLocationData(truck: Record<string, unknown>): number {\n  let score = 0;\n  let maxScore = 0;\n\n  // Coordinates (50% of location score)\n  maxScore += 0.5;\n  const latitude = safeNumber(truck.latitude);\n  const longitude = safeNumber(truck.longitude);\n  if (isValidNumber(latitude) && isValidNumber(longitude) && \n      latitude !== 0 && longitude !== 0) {\n    score += 0.5;\n  }\n\n  // Address (30% of location score)\n  maxScore += 0.3;\n  if (isNonEmptyString(truck.address)) {\n    score += 0.3;\n  }\n\n  // City/State (20% of location score)\n  maxScore += 0.2;\n  if (isNonEmptyString(truck.city) || isNonEmptyString(truck.state)) {\n    score += 0.2;\n  }\n\n  return maxScore > 0 ? score / maxScore : 0;\n}\n\n// Contact data quality scoring\nexport function scoreContactData(truck: Record<string, unknown>): number {\n  let score = 0;\n  let maxScore = 0;\n\n  // Phone (40% of contact score)\n  maxScore += 0.4;\n  if (isNonEmptyString(truck.phone)) {\n    const phone = safeString(truck.phone);\n    // Basic phone validation - simplified to avoid backtracking\n    if (/^\\+?[\\d\\s\\-()]{10,}$/.test(phone)) {\n      score += 0.4;\n    } else if (phone.length > 5) {\n      score += 0.2;\n    }\n  }\n\n  // Email (30% of contact score)\n  maxScore += 0.3;\n  if (isNonEmptyString(truck.email)) {\n    const email = safeString(truck.email);\n    // Basic email validation\n    if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n      score += 0.3;\n    }\n  }\n\n  // Website (30% of contact score)\n  maxScore += 0.3;\n  if (isNonEmptyString(truck.website)) {\n    const website = safeString(truck.website);\n    // Basic URL validation\n    if (/^https?:\\/\\/.+\\..+/.test(website)) {\n      score += 0.3;\n    }\n  }\n\n  return maxScore > 0 ? score / maxScore : 0;\n}\n\n// Menu data quality scoring\nexport function scoreMenuData(truck: Record<string, unknown>): number {\n  let score = 0;\n  let maxScore = 0;\n\n  // Menu items (70% of menu score)\n  maxScore += 0.7;\n  if (isNonEmptyString(truck.menu_items)) {\n    const menuItems = safeString(truck.menu_items);\n    if (menuItems.length > 100) {\n      score += 0.7;\n    } else if (menuItems.length > 20) {\n      score += 0.35;\n    }\n  }\n\n  // Price range (30% of menu score)\n  maxScore += 0.3;\n  if (isNonEmptyString(truck.price_range)) {\n    score += 0.3;\n  }\n\n  return maxScore > 0 ? score / maxScore : 0;\n}\n\n// Operational data quality scoring\nexport function scoreOperationalData(truck: Record<string, unknown>): number {\n  let score = 0;\n  let maxScore = 0;\n\n  // Operating hours (60% of operational score)\n  maxScore += 0.6;\n  if (isNonEmptyString(truck.operating_hours)) {\n    score += 0.6;\n  }\n\n  // Social media (40% of operational score)\n  maxScore += 0.4;\n  const socialFields = ['facebook_url', 'twitter_url', 'instagram_url'];\n  const socialCount = socialFields.filter(field => isNonEmptyString(truck[field])).length;\n  score += (socialCount / socialFields.length) * 0.4;\n\n  return maxScore > 0 ? score / maxScore : 0;\n}\n\n// Verification status scoring\nexport function scoreVerificationStatus(truck: Record<string, unknown>): number {\n  const status = safeString(truck.verification_status);\n  switch (status) {\n    case 'verified': {\n      return 1;\n    }\n    case 'pending': {\n      return 0.5;\n    }\n    default: {\n      return 0;\n    }\n  }\n}\n\n// Calculate overall quality score\nexport function calculateOverallQualityScore(truck: Record<string, unknown>): number {\n  const coreScore = scoreCoreData(truck);\n  const locationScore = scoreLocationData(truck);\n  const contactScore = scoreContactData(truck);\n  const menuScore = scoreMenuData(truck);\n  const operationalScore = scoreOperationalData(truck);\n  const verificationScore = scoreVerificationStatus(truck);\n\n  return (\n    coreScore * QUALITY_WEIGHTS.CORE_DATA +\n    locationScore * QUALITY_WEIGHTS.LOCATION_DATA +\n    contactScore * QUALITY_WEIGHTS.CONTACT_DATA +\n    menuScore * QUALITY_WEIGHTS.MENU_DATA +\n    operationalScore * QUALITY_WEIGHTS.OPERATIONAL_DATA +\n    verificationScore * QUALITY_WEIGHTS.VERIFICATION\n  );\n}\n\n// Get quality category\nexport function getQualityCategory(score: number): 'high' | 'medium' | 'low' {\n  if (score >= QUALITY_THRESHOLDS.HIGH) return 'high';\n  if (score >= QUALITY_THRESHOLDS.MEDIUM) return 'medium';\n  return 'low';\n}\n\n// Get quality label\nexport function getQualityLabel(score: number): string {\n  const category = getQualityCategory(score);\n  switch (category) {\n    case 'high': {\n      return 'Excellent';\n    }\n    case 'medium': {\n      return 'Good';\n    }\n    case 'low': {\n      return 'Needs Work';\n    }\n  }\n}\n\n// Get quality color\nexport function getQualityColor(score: number): string {\n  const category = getQualityCategory(score);\n  switch (category) {\n    case 'high': {\n      return '#22c55e';\n    }\n    case 'medium': {\n      return '#f59e0b';\n    }\n    case 'low': {\n      return '#ef4444';\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/lib/utils/type-guards.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `typeGuards.ts` or `TypeGuards.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"unicorn/no-empty-file","severity":2,"message":"Empty files are not allowed.","line":1,"column":1,"nodeType":"Program","messageId":"no-empty-file","endLine":1,"endColumn":1}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"","usedDeprecatedRules":[]},{"filePath":"/app/lib/utils/typeGuards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/scripts/analyze-error-patterns.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `analyzeErrorPatterns.cjs` or `AnalyzeErrorPatterns.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":8,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":8,"endColumn":51},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":9,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":9,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":23,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":23,"endColumn":18,"suggestions":[{"fix":{"range":[447,492],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":24,"column":31,"nodeType":"Literal","messageId":"issue","endLine":24,"endColumn":59},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":50,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":50,"endColumn":16,"suggestions":[{"fix":{"range":[1224,1270],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Method 'identifyAutomationCandidates' has too many lines (83). Maximum allowed is 50.","line":73,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":155,"endColumn":4},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":74,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":74,"endColumn":16,"suggestions":[{"fix":{"range":[1934,1989],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":174,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":174,"endColumn":16,"suggestions":[{"fix":{"range":[5256,5315],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Method 'printResults' has too many lines (60). Maximum allowed is 50.","line":199,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":258,"endColumn":4},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":204,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":204,"endColumn":16,"suggestions":[{"fix":{"range":[6502,6553],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":205,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":205,"endColumn":16,"suggestions":[{"fix":{"range":[6558,6611],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":206,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":206,"endColumn":16,"suggestions":[{"fix":{"range":[6616,6660],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":207,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":207,"endColumn":16,"suggestions":[{"fix":{"range":[6665,6740],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":208,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":208,"endColumn":16,"suggestions":[{"fix":{"range":[6745,6823],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":210,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":210,"endColumn":16,"suggestions":[{"fix":{"range":[6833,6873],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":211,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":211,"endColumn":16,"suggestions":[{"fix":{"range":[6878,6916],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":214,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":214,"endColumn":18,"suggestions":[{"fix":{"range":[7070,7134],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":217,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":217,"endColumn":16,"suggestions":[{"fix":{"range":[7150,7209],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":218,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":218,"endColumn":16,"suggestions":[{"fix":{"range":[7214,7272],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":221,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":221,"endColumn":20,"suggestions":[{"fix":{"range":[7420,7543],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":222,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":222,"endColumn":20,"suggestions":[{"fix":{"range":[7552,7595],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":224,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":224,"endColumn":18,"suggestions":[{"fix":{"range":[7610,7704],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":226,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":226,"endColumn":18,"suggestions":[{"fix":{"range":[7724,7787],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":229,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":229,"endColumn":16,"suggestions":[{"fix":{"range":[7803,7865],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":230,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":230,"endColumn":16,"suggestions":[{"fix":{"range":[7870,7930],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":233,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":233,"endColumn":20,"suggestions":[{"fix":{"range":[8082,8206],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":234,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":234,"endColumn":20,"suggestions":[{"fix":{"range":[8215,8258],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":236,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":236,"endColumn":18,"suggestions":[{"fix":{"range":[8273,8370],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":238,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":238,"endColumn":18,"suggestions":[{"fix":{"range":[8390,8455],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":244,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":244,"endColumn":16,"suggestions":[{"fix":{"range":[8696,8736],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":245,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":245,"endColumn":16,"suggestions":[{"fix":{"range":[8741,8779],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":246,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":246,"endColumn":16,"suggestions":[{"fix":{"range":[8784,8830],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":247,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":247,"endColumn":16,"suggestions":[{"fix":{"range":[8835,8933],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":248,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":248,"endColumn":16,"suggestions":[{"fix":{"range":[8938,9025],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":250,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":250,"endColumn":16,"suggestions":[{"fix":{"range":[9035,9089],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":251,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":251,"endColumn":16,"suggestions":[{"fix":{"range":[9094,9145],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":254,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":254,"endColumn":18,"suggestions":[{"fix":{"range":[9313,9340],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":284,"column":68,"nodeType":"Literal","messageId":"error","endLine":284,"endColumn":72,"suggestions":[{"messageId":"replace","fix":{"range":[10147,10151],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":285,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":285,"endColumn":16,"suggestions":[{"fix":{"range":[10162,10220],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * ESLint Error Pattern Analyzer\n * Analyzes current ESLint errors to identify automation opportunities\n */\n\nconst { execSync } = require('node:child_process');\nconst fs = require('node:fs');\n\nclass ErrorPatternAnalyzer {\n  constructor() {\n    this.errorCounts = {};\n    this.fileErrorCounts = {};\n    this.automationCandidates = [];\n  }\n\n  /**\n   * Get current ESLint results\n   */\n  getESLintResults() {\n    try {\n      console.log('🔍 Running ESLint analysis...');\n      const output = execSync('npx eslint . --format json', {\n        encoding: 'utf8',\n        stdio: ['pipe', 'pipe', 'pipe'],\n        timeout: 120_000\n      });\n      return JSON.parse(output);\n    } catch (error) {\n      // Try to parse output even if ESLint failed\n      const stdout = error.stdout ? error.stdout.toString() : '';\n      if (stdout) {\n        try {\n          return JSON.parse(stdout);\n        } catch (parseError) {\n          console.error('Failed to parse ESLint output:', parseError.message);\n          return [];\n        }\n      }\n      console.error('ESLint failed:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * Analyze error patterns from ESLint results\n   */\n  analyzePatterns(results) {\n    console.log('📊 Analyzing error patterns...');\n    \n    for (const file of results) {\n      const fileName = file.filePath.replace(process.cwd(), '').replaceAll('\\\\', '/');\n      let fileErrorCount = 0;\n      \n      for (const msg of file.messages) {\n        if (msg.severity === 2) { // Error (not warning)\n          const ruleId = msg.ruleId || 'unknown';\n          this.errorCounts[ruleId] = (this.errorCounts[ruleId] || 0) + 1;\n          fileErrorCount++;\n        }\n      }\n      \n      if (fileErrorCount > 0) {\n        this.fileErrorCounts[fileName] = fileErrorCount;\n      }\n    }\n  }\n\n  /**\n   * Identify automation candidates based on frequency and safety\n   */\n  identifyAutomationCandidates() {\n    console.log('🎯 Identifying automation candidates...');\n    \n    // Define automation-friendly rules\n    const automationRules = {\n      // High confidence - safe to automate\n      '@typescript-eslint/no-unused-vars': {\n        confidence: 'HIGH',\n        method: 'eslint-autofix',\n        description: 'Remove unused variables and imports',\n        estimatedReduction: '90%'\n      },\n      'sonarjs/unused-import': {\n        confidence: 'HIGH', \n        method: 'eslint-autofix',\n        description: 'Remove unused imports',\n        estimatedReduction: '95%'\n      },\n      'unicorn/no-null': {\n        confidence: 'HIGH',\n        method: 'pattern-replacement',\n        description: 'Replace null with undefined',\n        estimatedReduction: '85%'\n      },\n      \n      // Medium confidence - needs careful automation\n      '@typescript-eslint/no-explicit-any': {\n        confidence: 'MEDIUM',\n        method: 'pattern-replacement',\n        description: 'Replace any with unknown in safe contexts',\n        estimatedReduction: '40%'\n      },\n      '@typescript-eslint/no-unsafe-assignment': {\n        confidence: 'MEDIUM',\n        method: 'type-annotation',\n        description: 'Add type annotations for unsafe assignments',\n        estimatedReduction: '30%'\n      },\n      'sonarjs/no-dead-store': {\n        confidence: 'MEDIUM',\n        method: 'pattern-replacement',\n        description: 'Remove dead store assignments',\n        estimatedReduction: '70%'\n      },\n      \n      // Low confidence - manual review needed\n      '@typescript-eslint/strict-boolean-expressions': {\n        confidence: 'LOW',\n        method: 'manual-review',\n        description: 'Complex boolean expression fixes',\n        estimatedReduction: '10%'\n      },\n      'max-lines-per-function': {\n        confidence: 'MANUAL_ONLY',\n        method: 'manual-ide-refactor',\n        description: 'RESEARCH-PROVEN UNSAFE FOR AUTOMATION: Function extraction requires human judgment. Use VS Code Extract Method only.',\n        estimatedReduction: '0%',\n        automationRisk: 'HIGH',\n        researchEvidence: 'Academic studies show 47% failure rate, semantic errors common'\n      }\n    };\n\n    // Calculate automation potential\n    for (const [ruleId, count] of Object.entries(this.errorCounts)) {\n      if (automationRules[ruleId] && count >= 5) { // Only consider rules with 5+ occurrences\n        const rule = automationRules[ruleId];\n        const estimatedFixes = Math.floor(count * (Number.parseInt(rule.estimatedReduction) / 100));\n        \n        this.automationCandidates.push({\n          ruleId,\n          count,\n          confidence: rule.confidence,\n          method: rule.method,\n          description: rule.description,\n          estimatedFixes,\n          priority: this.calculatePriority(count, rule.confidence, estimatedFixes)\n        });\n      }\n    }\n\n    // Sort by priority (highest first)\n    this.automationCandidates.sort((a, b) => b.priority - a.priority);\n  }\n\n  /**\n   * Calculate automation priority score\n   */\n  calculatePriority(count, confidence, estimatedFixes) {\n    const confidenceMultiplier = {\n      'HIGH': 3,\n      'MEDIUM': 2,\n      'LOW': 1\n    };\n    \n    return estimatedFixes * confidenceMultiplier[confidence];\n  }\n\n  /**\n   * Generate automation recommendations\n   */\n  generateRecommendations() {\n    console.log('💡 Generating automation recommendations...');\n    \n    const highConfidenceCandidates = this.automationCandidates.filter(c => c.confidence === 'HIGH');\n    const mediumConfidenceCandidates = this.automationCandidates.filter(c => c.confidence === 'MEDIUM');\n    \n    const totalHighConfidenceFixes = highConfidenceCandidates.reduce((sum, c) => sum + c.estimatedFixes, 0);\n    const totalMediumConfidenceFixes = mediumConfidenceCandidates.reduce((sum, c) => sum + c.estimatedFixes, 0);\n    \n    return {\n      highConfidence: {\n        candidates: highConfidenceCandidates,\n        totalFixes: totalHighConfidenceFixes,\n        methods: [...new Set(highConfidenceCandidates.map(c => c.method))]\n      },\n      mediumConfidence: {\n        candidates: mediumConfidenceCandidates,\n        totalFixes: totalMediumConfidenceFixes,\n        methods: [...new Set(mediumConfidenceCandidates.map(c => c.method))]\n      }\n    };\n  }\n\n  /**\n   * Print analysis results\n   */\n  printResults() {\n    const totalErrors = Object.values(this.errorCounts).reduce((sum, count) => sum + count, 0);\n    const sortedErrors = Object.entries(this.errorCounts).sort((a, b) => b[1] - a[1]);\n    const recommendations = this.generateRecommendations();\n    \n    console.log('\\n📈 ERROR PATTERN ANALYSIS RESULTS');\n    console.log('=====================================');\n    console.log(`Total errors: ${totalErrors}`);\n    console.log(`Unique error types: ${Object.keys(this.errorCounts).length}`);\n    console.log(`Files with errors: ${Object.keys(this.fileErrorCounts).length}`);\n    \n    console.log('\\n🔝 TOP 15 ERROR TYPES:');\n    console.log('----------------------');\n    for (const [index, [rule, count]] of sortedErrors.slice(0, 15).entries()) {\n      const percentage = ((count / totalErrors) * 100).toFixed(1);\n      console.log(`${index + 1}. ${rule}: ${count} (${percentage}%)`);\n    }\n    \n    console.log('\\n🎯 HIGH CONFIDENCE AUTOMATION CANDIDATES:');\n    console.log('------------------------------------------');\n    if (recommendations.highConfidence.candidates.length > 0) {\n      for (const candidate of recommendations.highConfidence.candidates) {\n        console.log(`✅ ${candidate.ruleId}: ${candidate.count} errors → ~${candidate.estimatedFixes} fixes (${candidate.method})`);\n        console.log(`   ${candidate.description}`);\n      }\n      console.log(`\\n🚀 TOTAL HIGH CONFIDENCE FIXES: ${recommendations.highConfidence.totalFixes}`);\n    } else {\n      console.log('No high confidence automation candidates found.');\n    }\n    \n    console.log('\\n⚠️  MEDIUM CONFIDENCE AUTOMATION CANDIDATES:');\n    console.log('--------------------------------------------');\n    if (recommendations.mediumConfidence.candidates.length > 0) {\n      for (const candidate of recommendations.mediumConfidence.candidates) {\n        console.log(`🔶 ${candidate.ruleId}: ${candidate.count} errors → ~${candidate.estimatedFixes} fixes (${candidate.method})`);\n        console.log(`   ${candidate.description}`);\n      }\n      console.log(`\\n⚡ TOTAL MEDIUM CONFIDENCE FIXES: ${recommendations.mediumConfidence.totalFixes}`);\n    } else {\n      console.log('No medium confidence automation candidates found.');\n    }\n    \n    const totalAutomationPotential = recommendations.highConfidence.totalFixes + recommendations.mediumConfidence.totalFixes;\n    const automationPercentage = ((totalAutomationPotential / totalErrors) * 100).toFixed(1);\n    \n    console.log('\\n📊 AUTOMATION SUMMARY:');\n    console.log('----------------------');\n    console.log(`Current errors: ${totalErrors}`);\n    console.log(`Automation potential: ${totalAutomationPotential} fixes (${automationPercentage}%)`);\n    console.log(`Remaining manual work: ${totalErrors - totalAutomationPotential} errors`);\n    \n    console.log('\\n🛠️  RECOMMENDED AUTOMATION METHODS:');\n    console.log('-----------------------------------');\n    const allMethods = [...recommendations.highConfidence.methods, ...recommendations.mediumConfidence.methods];\n    for (const method of new Set(allMethods)) {\n      console.log(`• ${method}`);\n    }\n    \n    return recommendations;\n  }\n\n  /**\n   * Run the complete analysis\n   */\n  async run() {\n    const results = this.getESLintResults();\n    this.analyzePatterns(results);\n    this.identifyAutomationCandidates();\n    return this.printResults();\n  }\n}\n\n// CLI interface\nif (require.main === module) {\n  const analyzer = new ErrorPatternAnalyzer();\n  analyzer.run().then(recommendations => {\n    // Save results for other scripts to use\n    const output = {\n      timestamp: new Date().toISOString(),\n      totalErrors: Object.values(analyzer.errorCounts).reduce((sum, count) => sum + count, 0),\n      errorCounts: analyzer.errorCounts,\n      automationCandidates: analyzer.automationCandidates,\n      recommendations\n    };\n    \n    fs.writeFileSync('error-analysis.json', JSON.stringify(output, null, 2));\n    console.log('\\n💾 Analysis saved to error-analysis.json');\n    \n    process.exit(0);\n  }).catch(error => {\n    console.error('Analysis failed:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ErrorPatternAnalyzer;\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/async-function-cleaner.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `asyncFunctionCleaner.cjs` or `AsyncFunctionCleaner.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":18,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":18,"endColumn":30},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":19,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":19,"endColumn":34},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":20,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":20,"endColumn":51},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":36,"column":31,"nodeType":"Literal","messageId":"issue","endLine":36,"endColumn":62},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":38,"column":30,"nodeType":"MemberExpression","messageId":"safeOSCommand","endLine":38,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":106,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":106,"endColumn":20,"suggestions":[{"fix":{"range":[3041,3122],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":109,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":109,"endColumn":20,"suggestions":[{"fix":{"range":[3167,3210],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'run' has too many lines (79). Maximum allowed is 50.","line":150,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":228,"endColumn":4},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":150,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":150,"endColumn":12},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":152,"column":18,"nodeType":"Literal","messageId":"error","endLine":152,"endColumn":22,"suggestions":[{"messageId":"replace","fix":{"range":[4352,4356],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":156,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":156,"endColumn":16,"suggestions":[{"fix":{"range":[4402,4453],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":157,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":157,"endColumn":16,"suggestions":[{"fix":{"range":[4458,4509],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":160,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":160,"endColumn":18,"suggestions":[{"fix":{"range":[4539,4598],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":165,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":165,"endColumn":16,"suggestions":[{"fix":{"range":[4697,4753],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":171,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":171,"endColumn":16,"suggestions":[{"fix":{"range":[4912,4972],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":172,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":172,"endColumn":16,"suggestions":[{"fix":{"range":[4977,5037],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":173,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":173,"endColumn":16,"suggestions":[{"fix":{"range":[5042,5058],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":178,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":178,"endColumn":18,"suggestions":[{"fix":{"range":[5154,5189],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":186,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":186,"endColumn":22,"suggestions":[{"fix":{"range":[5415,5480],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":202,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":202,"endColumn":16,"suggestions":[{"fix":{"range":[5863,5879],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":203,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":203,"endColumn":16,"suggestions":[{"fix":{"range":[5884,5934],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":204,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":204,"endColumn":16,"suggestions":[{"fix":{"range":[5939,5989],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":205,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":205,"endColumn":16,"suggestions":[{"fix":{"range":[5994,6055],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":206,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":206,"endColumn":16,"suggestions":[{"fix":{"range":[6060,6106],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":207,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":207,"endColumn":16,"suggestions":[{"fix":{"range":[6111,6185],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":208,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":208,"endColumn":16,"suggestions":[{"fix":{"range":[6190,6253],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":209,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":209,"endColumn":16,"suggestions":[{"fix":{"range":[6258,6274],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":210,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":210,"endColumn":16,"suggestions":[{"fix":{"range":[6279,6327],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":211,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":211,"endColumn":16,"suggestions":[{"fix":{"range":[6332,6376],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":212,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":212,"endColumn":16,"suggestions":[{"fix":{"range":[6381,6485],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":215,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":215,"endColumn":18,"suggestions":[{"fix":{"range":[6533,6549],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":216,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":216,"endColumn":18,"suggestions":[{"fix":{"range":[6556,6581],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":218,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":218,"endColumn":20,"suggestions":[{"fix":{"range":[6635,6678],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Async Function Cleaner\n * Fixes @typescript-eslint/require-await errors by removing unnecessary async keywords\n * \n * SAFE PATTERNS (auto-fix):\n * - async function with no await → remove async\n * - async arrow function with no await → remove async\n * - async method with no await → remove async\n * \n * SAFETY MEASURES:\n * - Only removes async if no await expressions found\n * - Preserves function signatures and return types\n * - Maintains code formatting\n */\n\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst { execSync } = require('node:child_process');\n\nclass AsyncFunctionCleaner {\n  constructor() {\n    this.stats = {\n      filesProcessed: 0,\n      asyncKeywordsRemoved: 0,\n      errors: []\n    };\n  }\n\n  /**\n   * Get current error count\n   */\n  getCurrentErrorCount() {\n    try {\n      const output = execSync('node scripts/count-errors.cjs', { encoding: 'utf8' });\n      const lines = output.trim().split('\\n');\n      return Number.parseInt(lines.at(-1)) || 0;\n    } catch (error) {\n      console.warn('Could not get current error count:', error.message);\n      return 0;\n    }\n  }\n\n  /**\n   * Check if a function body contains await expressions\n   */\n  hasAwaitExpressions(functionBody) {\n    // Simple regex to find await expressions\n    // This is conservative - if we're not sure, we don't remove async\n    const awaitPattern = /\\bawait\\s+/g;\n    return awaitPattern.test(functionBody);\n  }\n\n  /**\n   * Fix async functions without await in a file\n   */\n  fixAsyncFunctions(content) {\n    let fixed = content;\n    let changes = 0;\n\n    // Pattern 1: async function declarations\n    const functionPattern = /async\\s+(function\\s+[a-zA-Z_$][a-zA-Z0-9_$]*\\s*\\([^)]*\\)\\s*\\{[^}]*\\})/g;\n    fixed = fixed.replaceAll(functionPattern, (match, functionDef) => {\n      if (!this.hasAwaitExpressions(functionDef)) {\n        changes++;\n        return functionDef; // Remove 'async' keyword\n      }\n      return match;\n    });\n\n    // Pattern 2: async arrow functions\n    const arrowPattern = /async\\s+(\\([^)]*\\)\\s*=>\\s*\\{[^}]*\\})/g;\n    fixed = fixed.replaceAll(arrowPattern, (match, arrowDef) => {\n      if (!this.hasAwaitExpressions(arrowDef)) {\n        changes++;\n        return arrowDef; // Remove 'async' keyword\n      }\n      return match;\n    });\n\n    // Pattern 3: async methods in classes/objects\n    const methodPattern = /async\\s+([a-zA-Z_$][a-zA-Z0-9_$]*\\s*\\([^)]*\\)\\s*\\{[^}]*\\})/g;\n    fixed = fixed.replaceAll(methodPattern, (match, methodDef) => {\n      if (!this.hasAwaitExpressions(methodDef)) {\n        changes++;\n        return methodDef; // Remove 'async' keyword\n      }\n      return match;\n    });\n\n    return { fixed, changes };\n  }\n\n  /**\n   * Process a single file\n   */\n  processFile(filePath) {\n    try {\n      const content = fs.readFileSync(filePath, 'utf8');\n      const result = this.fixAsyncFunctions(content);\n\n      if (result.changes > 0) {\n        fs.writeFileSync(filePath, result.fixed);\n        this.stats.asyncKeywordsRemoved += result.changes;\n        console.log(`✅ Updated: ${filePath} (${result.changes} async keywords removed)`);\n        return true;\n      } else {\n        console.log(`⏭️  No changes: ${filePath}`);\n        return false;\n      }\n    } catch (error) {\n      this.stats.errors.push({ file: filePath, error: error.message });\n      console.error(`❌ Error processing ${filePath}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Find TypeScript files\n   */\n  findTSFiles(directories = ['app', 'components', 'lib']) {\n    const files = [];\n    \n    for (const dir of directories) {\n      if (fs.existsSync(dir)) {\n        const findFiles = (currentDir) => {\n          const items = fs.readdirSync(currentDir);\n          for (const item of items) {\n            const fullPath = path.join(currentDir, item);\n            const stat = fs.statSync(fullPath);\n            \n            if (stat.isDirectory() && !item.startsWith('.')) {\n              findFiles(fullPath);\n            } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.tsx'))) {\n              files.push(fullPath.replaceAll('\\\\', '/'));\n            }\n          }\n        };\n        findFiles(dir);\n      }\n    }\n    \n    return files;\n  }\n\n  /**\n   * Run the async function cleaning process\n   */\n  async run(options = {}) {\n    const { \n      maxFiles = null,\n      dryRun = false \n    } = options;\n\n    console.log('🚀 Starting Async Function Cleaning');\n    console.log('===================================');\n    \n    if (dryRun) {\n      console.log('🔍 DRY RUN MODE - No files will be modified');\n    }\n\n    // Get baseline error count\n    const initialErrors = this.getCurrentErrorCount();\n    console.log(`📊 Initial error count: ${initialErrors}`);\n\n    // Find files to process\n    const allFiles = this.findTSFiles();\n    const filesToProcess = maxFiles ? allFiles.slice(0, maxFiles) : allFiles;\n    \n    console.log(`📁 Found ${allFiles.length} TypeScript files`);\n    console.log(`🎯 Processing ${filesToProcess.length} files`);\n    console.log('');\n\n    // Process files\n    let filesChanged = 0;\n    for (const file of filesToProcess) {\n      console.log(`Processing: ${file}`);\n      \n      if (dryRun) {\n        // Dry run - just analyze\n        const content = fs.readFileSync(file, 'utf8');\n        const result = this.fixAsyncFunctions(content);\n        \n        if (result.changes > 0) {\n          console.log(`  Would remove ${result.changes} async keyword(s)`);\n          filesChanged++;\n        }\n      } else {\n        const changed = this.processFile(file);\n        if (changed) filesChanged++;\n      }\n      \n      this.stats.filesProcessed++;\n    }\n\n    // Get final error count\n    const finalErrors = dryRun ? initialErrors : this.getCurrentErrorCount();\n    const errorReduction = initialErrors - finalErrors;\n\n    // Print summary\n    console.log('');\n    console.log('📈 ASYNC FUNCTION CLEANING SUMMARY');\n    console.log('==================================');\n    console.log(`Files processed: ${this.stats.filesProcessed}`);\n    console.log(`Files changed: ${filesChanged}`);\n    console.log(`Async keywords removed: ${this.stats.asyncKeywordsRemoved}`);\n    console.log(`Errors encountered: ${this.stats.errors.length}`);\n    console.log('');\n    console.log(`Initial errors: ${initialErrors}`);\n    console.log(`Final errors: ${finalErrors}`);\n    console.log(`Error reduction: ${errorReduction} (${((errorReduction/initialErrors)*100).toFixed(1)}%)`);\n\n    if (this.stats.errors.length > 0) {\n      console.log('');\n      console.log('❌ ERRORS:');\n      for (const err of this.stats.errors) {\n        console.log(`  ${err.file}: ${err.error}`);\n      }\n    }\n\n    return {\n      filesChanged,\n      asyncKeywordsRemoved: this.stats.asyncKeywordsRemoved,\n      errorReduction,\n      success: this.stats.errors.length === 0\n    };\n  }\n}\n\n// CLI interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  const options = {};\n  \n  // Parse command line arguments\n  if (args.includes('--dry-run')) options.dryRun = true;\n  if (args.includes('--max-files')) {\n    const maxIndex = args.indexOf('--max-files');\n    options.maxFiles = Number.parseInt(args[maxIndex + 1]) || 10;\n  }\n  \n  const cleaner = new AsyncFunctionCleaner();\n  cleaner.run(options).then(result => {\n    process.exit(result.success ? 0 : 1);\n  }).catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = AsyncFunctionCleaner;\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/automated-nullish-coalescing-converter.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `automatedNullishCoalescingConverter.cjs` or `AutomatedNullishCoalescingConverter.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":21,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":21,"endColumn":30},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":22,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":22,"endColumn":34},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":23,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":23,"endColumn":51},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":29,"column":7,"nodeType":"Literal","endLine":29,"endColumn":79},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":31,"column":7,"nodeType":"Literal","endLine":31,"endColumn":83},{"ruleId":"sonarjs/regex-complexity","severity":2,"message":"Simplify this regular expression to reduce its complexity from 23 to the 20 allowed.","line":31,"column":7,"nodeType":"Literal","endLine":31,"endColumn":83},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":33,"column":7,"nodeType":"Literal","endLine":33,"endColumn":88},{"ruleId":"sonarjs/regex-complexity","severity":2,"message":"Simplify this regular expression to reduce its complexity from 22 to the 20 allowed.","line":33,"column":7,"nodeType":"Literal","endLine":33,"endColumn":88},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":35,"column":7,"nodeType":"Literal","endLine":35,"endColumn":92},{"ruleId":"sonarjs/regex-complexity","severity":2,"message":"Simplify this regular expression to reduce its complexity from 23 to the 20 allowed.","line":35,"column":7,"nodeType":"Literal","endLine":35,"endColumn":92},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":37,"column":7,"nodeType":"Literal","endLine":37,"endColumn":45},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":42,"column":7,"nodeType":"Literal","endLine":42,"endColumn":34},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":44,"column":7,"nodeType":"Literal","endLine":44,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lineNumber' is defined but never used. Allowed unused args must match /^_/u.","line":71,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":115,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":115,"endColumn":22,"suggestions":[{"fix":{"range":[3358,3430],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":121,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":121,"endColumn":20,"suggestions":[{"fix":{"range":[3538,3576],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":124,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":124,"endColumn":20,"suggestions":[{"fix":{"range":[3621,3664],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":167,"column":31,"nodeType":"Literal","messageId":"issue","endLine":167,"endColumn":62},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":169,"column":30,"nodeType":"MemberExpression","messageId":"safeOSCommand","endLine":169,"endColumn":38},{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'run' has too many lines (87). Maximum allowed is 50.","line":179,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":265,"endColumn":4},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":179,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":179,"endColumn":12},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":183,"column":18,"nodeType":"Literal","messageId":"error","endLine":183,"endColumn":22,"suggestions":[{"messageId":"replace","fix":{"range":[5300,5304],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":208,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":208,"endColumn":18,"suggestions":[{"fix":{"range":[6106,6141],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":252,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":252,"endColumn":18,"suggestions":[{"fix":{"range":[7769,7785],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":253,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":253,"endColumn":18,"suggestions":[{"fix":{"range":[7792,7817],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":255,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":255,"endColumn":20,"suggestions":[{"fix":{"range":[7871,7914],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Automated Nullish Coalescing Converter\n * Safely converts || patterns to ?? for @typescript-eslint/prefer-nullish-coalescing fixes\n *\n * SAFE PATTERNS (auto-convert):\n * - value || defaultValue\n * - data?.field || fallback\n * - array || []\n * - object || {}\n * - string || 'default'\n * - number || 0\n *\n * UNSAFE PATTERNS (manual review needed):\n * - if (condition1 || condition2)\n * - error || !user\n * - boolean || boolean\n */\n\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst { execSync } = require('node:child_process');\n\nclass NullishCoalescingConverter {\n  constructor() {\n    this.safePatterns = [\n      // Simple variable || default patterns\n      /(\\w+(?:\\?\\.\\w+)*)\\s*\\|\\|\\s*(\\[|\\{|'[^']*'|\"[^\"]*\"|\\d+|null|undefined)/g,\n      // Property access with fallbacks\n      /(\\w+(?:\\?\\.\\w+)+)\\s*\\|\\|\\s*(\\w+|\\[|\\{|'[^']*'|\"[^\"]*\"|\\d+|null|undefined)/g,\n      // Function call results with defaults\n      /(\\w+\\([^)]*\\)(?:\\?\\.\\w+)*)\\s*\\|\\|\\s*(\\[|\\{|'[^']*'|\"[^\"]*\"|\\d+|null|undefined)/g,\n      // Array/object access with defaults\n      /([\\w.]+\\[[^\\]]+\\](?:\\?\\.\\w+)*)\\s*\\|\\|\\s*(\\[|\\{|'[^']*'|\"[^\"]*\"|\\d+|null|undefined)/g,\n      // Complex property chains\n      /([\\w.]+(?:\\?\\.\\w+)+)\\s*\\|\\|\\s*(\\w+)/g,\n    ];\n\n    this.unsafePatterns = [\n      // Boolean conditions in if statements\n      /if\\s*\\([^)]*\\|\\|[^)]*\\)/gi,\n      // While/for conditions\n      /(while|for)\\s*\\([^)]*\\|\\|[^)]*\\)/gi,\n      // Error handling patterns\n      /(error|err)\\s*\\|\\|\\s*!/gi,\n      // Boolean variables\n      /\\b(is|has|can|should|will|was|were)\\w*\\s*\\|\\|\\s*\\b(is|has|can|should|will|was|were)/gi,\n      // Return statements with boolean logic\n      /return\\s+\\w+\\s*\\|\\|\\s*\\w+\\s*$/gi,\n    ];\n    \n    this.stats = {\n      filesProcessed: 0,\n      conversionsApplied: 0,\n      unsafePatternsSaved: 0,\n      errors: []\n    };\n  }\n\n  /**\n   * Check if a line contains unsafe patterns that should not be auto-converted\n   */\n  containsUnsafePattern(line) {\n    return this.unsafePatterns.some(pattern => pattern.test(line));\n  }\n\n  /**\n   * Convert safe || patterns to ?? in a single line\n   */\n  convertLine(line, lineNumber) {\n    if (this.containsUnsafePattern(line)) {\n      this.stats.unsafePatternsSaved++;\n      return { converted: line, changed: false, reason: 'Contains unsafe boolean logic' };\n    }\n\n    let converted = line;\n    let changed = false;\n    let conversions = 0;\n\n    // Apply safe pattern conversions\n    for (const pattern of this.safePatterns) {\n      const matches = converted.match(pattern);\n      if (matches) {\n        converted = converted.replace(pattern, (match, left, right) => {\n          conversions++;\n          return `${left} ?? ${right}`;\n        });\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.stats.conversionsApplied += conversions;\n    }\n\n    return { converted, changed, conversions };\n  }\n\n  /**\n   * Process a single TypeScript/TSX file\n   */\n  processFile(filePath) {\n    try {\n      const content = fs.readFileSync(filePath, 'utf8');\n      const lines = content.split('\\n');\n      let hasChanges = false;\n      const results = [];\n\n      for (const [index, line] of lines.entries()) {\n        const result = this.convertLine(line, index + 1);\n        results.push(result.converted);\n        if (result.changed) {\n          hasChanges = true;\n          console.log(`  Line ${index + 1}: ${result.conversions} conversion(s)`);\n        }\n      }\n\n      if (hasChanges) {\n        fs.writeFileSync(filePath, results.join('\\n'));\n        console.log(`✅ Updated: ${filePath}`);\n        return true;\n      } else {\n        console.log(`⏭️  No changes: ${filePath}`);\n        return false;\n      }\n    } catch (error) {\n      this.stats.errors.push({ file: filePath, error: error.message });\n      console.error(`❌ Error processing ${filePath}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Find all TypeScript/TSX files in specified directories\n   */\n  findTSFiles(directories = ['app', 'components', 'lib']) {\n    const files = [];\n    \n    for (const dir of directories) {\n      if (fs.existsSync(dir)) {\n        const findFiles = (currentDir) => {\n          const items = fs.readdirSync(currentDir);\n          for (const item of items) {\n            const fullPath = path.join(currentDir, item);\n            const stat = fs.statSync(fullPath);\n            \n            if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {\n              findFiles(fullPath);\n            } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.tsx'))) {\n              files.push(fullPath);\n            }\n          }\n        };\n        findFiles(dir);\n      }\n    }\n    \n    return files;\n  }\n\n  /**\n   * Get current error count for comparison\n   */\n  getCurrentErrorCount() {\n    try {\n      const output = execSync('node scripts/count-errors.cjs', { encoding: 'utf8' });\n      const lines = output.trim().split('\\n');\n      return Number.parseInt(lines.at(-1)) || 0;\n    } catch (error) {\n      console.warn('Could not get current error count:', error.message);\n      return 0;\n    }\n  }\n\n  /**\n   * Run the conversion process\n   */\n  async run(options = {}) {\n    const { \n      directories = ['app', 'components', 'lib'],\n      dryRun = false,\n      maxFiles = null \n    } = options;\n\n    console.info('🚀 Starting Automated Nullish Coalescing Converter');\n    console.info('================================================');\n\n    if (dryRun) {\n      console.info('🔍 DRY RUN MODE - No files will be modified');\n    }\n\n    // Get baseline error count\n    const initialErrors = this.getCurrentErrorCount();\n    console.info(`📊 Initial error count: ${initialErrors}`);\n\n    // Find files to process\n    const files = this.findTSFiles(directories);\n    const filesToProcess = maxFiles ? files.slice(0, maxFiles) : files;\n\n    console.info(`📁 Found ${files.length} TypeScript files`);\n    console.info(`🎯 Processing ${filesToProcess.length} files`);\n    console.info('');\n\n    // Process files\n    let filesChanged = 0;\n    for (const file of filesToProcess) {\n      console.log(`Processing: ${file}`);\n      \n      if (dryRun) {\n        // Dry run - just analyze\n        const content = fs.readFileSync(file, 'utf8');\n        const lines = content.split('\\n');\n        let potentialChanges = 0;\n        \n        for (const [index, line] of lines.entries()) {\n          const result = this.convertLine(line, index + 1);\n          if (result.changed) potentialChanges += result.conversions;\n        }\n        \n        if (potentialChanges > 0) {\n          console.info(`  Would make ${potentialChanges} conversion(s)`);\n          filesChanged++;\n        }\n      } else {\n        const changed = this.processFile(file);\n        if (changed) filesChanged++;\n      }\n      \n      this.stats.filesProcessed++;\n    }\n\n    // Get final error count\n    const finalErrors = dryRun ? initialErrors : this.getCurrentErrorCount();\n    const errorReduction = initialErrors - finalErrors;\n\n    // Print summary\n    console.info('');\n    console.info('📈 CONVERSION SUMMARY');\n    console.info('====================');\n    console.info(`Files processed: ${this.stats.filesProcessed}`);\n    console.info(`Files changed: ${filesChanged}`);\n    console.info(`Total conversions: ${this.stats.conversionsApplied}`);\n    console.info(`Unsafe patterns preserved: ${this.stats.unsafePatternsSaved}`);\n    console.info(`Errors encountered: ${this.stats.errors.length}`);\n    console.info('');\n    console.info(`Initial errors: ${initialErrors}`);\n    console.info(`Final errors: ${finalErrors}`);\n    console.info(`Error reduction: ${errorReduction} (${((errorReduction/initialErrors)*100).toFixed(1)}%)`);\n\n    if (this.stats.errors.length > 0) {\n      console.log('');\n      console.log('❌ ERRORS:');\n      for (const err of this.stats.errors) {\n        console.log(`  ${err.file}: ${err.error}`);\n      }\n    }\n\n    return {\n      filesChanged,\n      conversionsApplied: this.stats.conversionsApplied,\n      errorReduction,\n      success: this.stats.errors.length === 0\n    };\n  }\n}\n\n// CLI interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  const options = {};\n  \n  // Parse command line arguments\n  if (args.includes('--dry-run')) options.dryRun = true;\n  if (args.includes('--max-files')) {\n    const maxIndex = args.indexOf('--max-files');\n    options.maxFiles = Number.parseInt(args[maxIndex + 1]) || 10;\n  }\n  \n  const converter = new NullishCoalescingConverter();\n  converter.run(options).then(result => {\n    process.exit(result.success ? 0 : 1);\n  }).catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = NullishCoalescingConverter;\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/automated-unused-code-cleaner.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `automatedUnusedCodeCleaner.cjs` or `AutomatedUnusedCodeCleaner.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":19,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":19,"endColumn":30},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":20,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":20,"endColumn":34},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":21,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":21,"endColumn":51},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":39,"column":31,"nodeType":"Literal","messageId":"issue","endLine":39,"endColumn":62},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":41,"column":30,"nodeType":"MemberExpression","messageId":"safeOSCommand","endLine":41,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":52,"endColumn":16,"suggestions":[{"fix":{"range":[1294,1331],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":55,"column":7,"nodeType":"Identifier","messageId":"safeOSCommand","endLine":55,"endColumn":15},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":64,"column":9,"nodeType":"Identifier","messageId":"safeOSCommand","endLine":64,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":68,"endColumn":16,"suggestions":[{"fix":{"range":[1793,1846],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":75,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":75,"endColumn":16,"suggestions":[{"fix":{"range":[1913,1956],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":84,"column":9,"nodeType":"Identifier","messageId":"safeOSCommand","endLine":84,"endColumn":17},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":87,"column":9,"nodeType":"Identifier","messageId":"safeOSCommand","endLine":87,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":91,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":91,"endColumn":16,"suggestions":[{"fix":{"range":[2447,2493],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":99,"column":7,"nodeType":"Identifier","messageId":"safeOSCommand","endLine":99,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":100,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":100,"endColumn":18,"suggestions":[{"fix":{"range":[2681,2719],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":108,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":108,"endColumn":16,"suggestions":[{"fix":{"range":[2819,2880],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":112,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":112,"endColumn":18,"suggestions":[{"fix":{"range":[2932,2976],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":113,"column":16,"nodeType":"Literal","messageId":"issue","endLine":113,"endColumn":86},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":119,"endColumn":18,"suggestions":[{"fix":{"range":[3167,3209],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":120,"column":16,"nodeType":"Literal","messageId":"issue","endLine":120,"endColumn":74},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":125,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":125,"endColumn":18,"suggestions":[{"fix":{"range":[3359,3404],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":137,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":137,"endColumn":16,"suggestions":[{"fix":{"range":[3639,3693],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":140,"column":16,"nodeType":"Literal","messageId":"issue","endLine":140,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":144,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":144,"endColumn":18,"suggestions":[{"fix":{"range":[3819,3870],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":157,"column":31,"nodeType":"Literal","messageId":"issue","endLine":157,"endColumn":59},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (5). Maximum allowed is 4.","line":170,"column":13,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":174,"endColumn":14},{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'run' has too many lines (90). Maximum allowed is 50.","line":189,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":278,"endColumn":4},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":196,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":196,"endColumn":16,"suggestions":[{"fix":{"range":[5138,5195],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":197,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":197,"endColumn":16,"suggestions":[{"fix":{"range":[5200,5258],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":203,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":203,"endColumn":16,"suggestions":[{"fix":{"range":[5408,5464],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":204,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":204,"endColumn":16,"suggestions":[{"fix":{"range":[5469,5538],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":205,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":205,"endColumn":16,"suggestions":[{"fix":{"range":[5543,5618],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":235,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":235,"endColumn":18,"suggestions":[{"fix":{"range":[6556,6592],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":236,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":236,"endColumn":18,"suggestions":[{"fix":{"range":[6599,6633],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":237,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":237,"endColumn":18,"suggestions":[{"fix":{"range":[6640,6729],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":238,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":238,"endColumn":18,"suggestions":[{"fix":{"range":[6736,6856],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":239,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":239,"endColumn":18,"suggestions":[{"fix":{"range":[6863,6990],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":240,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":240,"endColumn":18,"suggestions":[{"fix":{"range":[6997,7085],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":251,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":251,"endColumn":18,"suggestions":[{"fix":{"range":[7349,7412],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":266,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":266,"endColumn":20,"suggestions":[{"fix":{"range":[7790,7837],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":269,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":269,"endColumn":20,"suggestions":[{"fix":{"range":[7906,7942],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Automated Unused Code Cleaner\n * Safely removes unused imports and variables using ESLint auto-fix capabilities\n * \n * HIGH CONFIDENCE FIXES:\n * - @typescript-eslint/no-unused-vars\n * - sonarjs/unused-import  \n * - Unused imports that can be safely removed\n * \n * SAFETY MEASURES:\n * - Uses ESLint's built-in auto-fix (proven safe)\n * - Backs up files before changes\n * - Verifies no build errors after changes\n * - Rollback capability if issues detected\n */\n\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst { execSync } = require('node:child_process');\n\nclass UnusedCodeCleaner {\n  constructor() {\n    this.backupDir = '.backup-unused-cleanup';\n    this.stats = {\n      filesProcessed: 0,\n      unusedVarsFixed: 0,\n      unusedImportsFixed: 0,\n      errors: []\n    };\n  }\n\n  /**\n   * Get current error count for comparison\n   */\n  getCurrentErrorCount() {\n    try {\n      const output = execSync('node scripts/count-errors.cjs', { encoding: 'utf8' });\n      const lines = output.trim().split('\\n');\n      return Number.parseInt(lines.at(-1)) || 0;\n    } catch (error) {\n      console.warn('Could not get current error count:', error.message);\n      return 0;\n    }\n  }\n\n  /**\n   * Create backup of current state\n   */\n  createBackup() {\n    console.log('💾 Creating backup...');\n    \n    if (fs.existsSync(this.backupDir)) {\n      execSync(`rmdir /s /q \"${this.backupDir}\"`, { stdio: 'ignore' });\n    }\n    \n    fs.mkdirSync(this.backupDir, { recursive: true });\n    \n    // Backup key directories\n    const dirsToBackup = ['app', 'components', 'lib'];\n    for (const dir of dirsToBackup) {\n      if (fs.existsSync(dir)) {\n        execSync(`xcopy \"${dir}\" \"${this.backupDir}\\\\${dir}\" /E /I /Q`, { stdio: 'ignore' });\n      }\n    }\n    \n    console.log(`✅ Backup created in ${this.backupDir}`);\n  }\n\n  /**\n   * Restore from backup\n   */\n  restoreBackup() {\n    console.log('🔄 Restoring from backup...');\n    \n    if (!fs.existsSync(this.backupDir)) {\n      throw new Error('No backup found to restore from');\n    }\n    \n    const dirsToRestore = ['app', 'components', 'lib'];\n    for (const dir of dirsToRestore) {\n      if (fs.existsSync(dir)) {\n        execSync(`rmdir /s /q \"${dir}\"`, { stdio: 'ignore' });\n      }\n      if (fs.existsSync(path.join(this.backupDir, dir))) {\n        execSync(`xcopy \"${this.backupDir}\\\\${dir}\" \"${dir}\" /E /I /Q`, { stdio: 'ignore' });\n      }\n    }\n    \n    console.log('✅ Backup restored successfully');\n  }\n\n  /**\n   * Clean up backup directory\n   */\n  cleanupBackup() {\n    if (fs.existsSync(this.backupDir)) {\n      execSync(`rmdir /s /q \"${this.backupDir}\"`, { stdio: 'ignore' });\n      console.log('🗑️  Backup cleaned up');\n    }\n  }\n\n  /**\n   * Run ESLint auto-fix for unused code rules\n   */\n  runUnusedCodeFixes() {\n    console.log('🧹 Running ESLint auto-fix for unused code...');\n    \n    try {\n      // Fix unused variables\n      console.log('  Fixing unused variables...');\n      execSync('npx eslint . --fix --rule \"@typescript-eslint/no-unused-vars: error\"', {\n        stdio: 'pipe',\n        timeout: 120_000\n      });\n      \n      // Fix unused imports  \n      console.log('  Fixing unused imports...');\n      execSync('npx eslint . --fix --rule \"sonarjs/unused-import: error\"', {\n        stdio: 'pipe', \n        timeout: 120_000\n      });\n      \n      console.log('✅ ESLint auto-fixes completed');\n      return true;\n    } catch (error) {\n      console.error('❌ ESLint auto-fix failed:', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Verify TypeScript compilation still works\n   */\n  verifyTypeScriptCompilation() {\n    console.log('🔍 Verifying TypeScript compilation...');\n    \n    try {\n      execSync('npx tsc --noEmit --strict', {\n        stdio: 'pipe',\n        timeout: 120_000\n      });\n      console.log('✅ TypeScript compilation successful');\n      return true;\n    } catch (error) {\n      console.error('❌ TypeScript compilation failed:', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Count specific error types before and after\n   */\n  countSpecificErrors() {\n    try {\n      const output = execSync('npx eslint . --format json', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 120_000\n      });\n      \n      const results = JSON.parse(output);\n      let unusedVars = 0;\n      let unusedImports = 0;\n      \n      for (const file of results) {\n        for (const msg of file.messages) {\n          if (msg.severity === 2) {\n            if (msg.ruleId === '@typescript-eslint/no-unused-vars') {\n              unusedVars++;\n            } else if (msg.ruleId === 'sonarjs/unused-import') {\n              unusedImports++;\n            }\n          }\n        }\n      }\n      \n      return { unusedVars, unusedImports };\n    } catch (error) {\n      console.warn('Could not count specific errors:', error.message);\n      return { unusedVars: 0, unusedImports: 0 };\n    }\n  }\n\n  /**\n   * Run the complete unused code cleanup process\n   */\n  async run(options = {}) {\n    const { \n      createBackup = true,\n      verifyCompilation = true,\n      autoRollback = true \n    } = options;\n\n    console.log('🚀 Starting Automated Unused Code Cleanup');\n    console.log('==========================================');\n\n    // Get baseline metrics\n    const initialErrors = this.getCurrentErrorCount();\n    const initialSpecific = this.countSpecificErrors();\n    \n    console.log(`📊 Initial error count: ${initialErrors}`);\n    console.log(`📊 Initial unused vars: ${initialSpecific.unusedVars}`);\n    console.log(`📊 Initial unused imports: ${initialSpecific.unusedImports}`);\n\n    try {\n      // Create backup if requested\n      if (createBackup) {\n        this.createBackup();\n      }\n\n      // Run the fixes\n      const fixSuccess = this.runUnusedCodeFixes();\n      if (!fixSuccess) {\n        throw new Error('ESLint auto-fix failed');\n      }\n\n      // Verify compilation if requested\n      if (verifyCompilation) {\n        const compileSuccess = this.verifyTypeScriptCompilation();\n        if (!compileSuccess) {\n          throw new Error('TypeScript compilation failed after fixes');\n        }\n      }\n\n      // Get final metrics\n      const finalErrors = this.getCurrentErrorCount();\n      const finalSpecific = this.countSpecificErrors();\n      const errorReduction = initialErrors - finalErrors;\n      const unusedVarsFixed = initialSpecific.unusedVars - finalSpecific.unusedVars;\n      const unusedImportsFixed = initialSpecific.unusedImports - finalSpecific.unusedImports;\n\n      // Print results\n      console.log('\\n📈 CLEANUP RESULTS');\n      console.log('==================');\n      console.log(`Total errors: ${initialErrors} → ${finalErrors} (${errorReduction} fixed)`);\n      console.log(`Unused variables: ${initialSpecific.unusedVars} → ${finalSpecific.unusedVars} (${unusedVarsFixed} fixed)`);\n      console.log(`Unused imports: ${initialSpecific.unusedImports} → ${finalSpecific.unusedImports} (${unusedImportsFixed} fixed)`);\n      console.log(`Error reduction: ${((errorReduction / initialErrors) * 100).toFixed(1)}%`);\n\n      // Update stats\n      this.stats.unusedVarsFixed = unusedVarsFixed;\n      this.stats.unusedImportsFixed = unusedImportsFixed;\n\n      // Clean up backup on success\n      if (createBackup && errorReduction > 0) {\n        this.cleanupBackup();\n      }\n\n      console.log('\\n✅ Unused code cleanup completed successfully!');\n      \n      return {\n        success: true,\n        errorReduction,\n        unusedVarsFixed,\n        unusedImportsFixed,\n        finalErrors\n      };\n\n    } catch (error) {\n      console.error('\\n❌ Cleanup failed:', error.message);\n      \n      // Auto-rollback if requested and backup exists\n      if (autoRollback && createBackup && fs.existsSync(this.backupDir)) {\n        console.log('🔄 Auto-rolling back changes...');\n        this.restoreBackup();\n        this.cleanupBackup();\n        console.log('✅ Rollback completed');\n      }\n      \n      return {\n        success: false,\n        error: error.message,\n        finalErrors: initialErrors\n      };\n    }\n  }\n}\n\n// CLI interface\nif (require.main === module) {\n  const args = new Set(process.argv.slice(2));\n  const options = {};\n  \n  // Parse command line arguments\n  if (args.has('--no-backup')) options.createBackup = false;\n  if (args.has('--no-verify')) options.verifyCompilation = false;\n  if (args.has('--no-rollback')) options.autoRollback = false;\n  \n  const cleaner = new UnusedCodeCleaner();\n  cleaner.run(options).then(result => {\n    process.exit(result.success ? 0 : 1);\n  }).catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = UnusedCodeCleaner;\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/comprehensive-automated-fixer.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `comprehensiveAutomatedFixer.cjs` or `ComprehensiveAutomatedFixer.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":15,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":15,"endColumn":30},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":16,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":16,"endColumn":34},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":17,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":17,"endColumn":51},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":38,"column":31,"nodeType":"Literal","messageId":"issue","endLine":38,"endColumn":62},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":40,"column":30,"nodeType":"MemberExpression","messageId":"safeOSCommand","endLine":40,"endColumn":38},{"ruleId":"sonarjs/no-invariant-returns","severity":2,"message":"Refactor this function to not always return the same value.","line":50,"column":3,"nodeType":null,"endLine":50,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":51,"endColumn":16,"suggestions":[{"fix":{"range":[1252,1305],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":55,"column":16,"nodeType":"Literal","messageId":"issue","endLine":55,"endColumn":44},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":60,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":60,"endColumn":18,"suggestions":[{"fix":{"range":[1486,1529],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":72,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":72,"endColumn":16,"suggestions":[{"fix":{"range":[1837,1900],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":76,"column":31,"nodeType":"Literal","messageId":"issue","endLine":76,"endColumn":88},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":83,"column":30,"nodeType":"MemberExpression","messageId":"safeOSCommand","endLine":83,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":91,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":91,"endColumn":18,"suggestions":[{"fix":{"range":[2525,2605],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":103,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":103,"endColumn":16,"suggestions":[{"fix":{"range":[2841,2898],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":142,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":142,"endColumn":16,"suggestions":[{"fix":{"range":[4116,4169],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-invariant-returns","severity":2,"message":"Refactor this function to not always return the same value.","line":149,"column":3,"nodeType":null,"endLine":149,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":150,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":150,"endColumn":16,"suggestions":[{"fix":{"range":[4282,4337],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":154,"column":16,"nodeType":"Literal","messageId":"issue","endLine":154,"endColumn":82},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":159,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":159,"endColumn":18,"suggestions":[{"fix":{"range":[4554,4603],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":200,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":200,"endColumn":16,"suggestions":[{"fix":{"range":[5624,5678],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":203,"column":16,"nodeType":"Literal","messageId":"issue","endLine":203,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":207,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":207,"endColumn":18,"suggestions":[{"fix":{"range":[5804,5855],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'run' has too many lines (102). Maximum allowed is 50.","line":218,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":319,"endColumn":4},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":227,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":227,"endColumn":16,"suggestions":[{"fix":{"range":[6285,6343],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":228,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":228,"endColumn":16,"suggestions":[{"fix":{"range":[6348,6406],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":232,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":232,"endColumn":16,"suggestions":[{"fix":{"range":[6492,6559],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":240,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":240,"endColumn":20,"suggestions":[{"fix":{"range":[6807,6901],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":247,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":247,"endColumn":20,"suggestions":[{"fix":{"range":[7095,7155],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":254,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":254,"endColumn":20,"suggestions":[{"fix":{"range":[7329,7384],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":261,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":261,"endColumn":20,"suggestions":[{"fix":{"range":[7560,7616],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":275,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":275,"endColumn":18,"suggestions":[{"fix":{"range":[8037,8090],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":276,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":276,"endColumn":18,"suggestions":[{"fix":{"range":[8097,8148],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":277,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":277,"endColumn":18,"suggestions":[{"fix":{"range":[8155,8214],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":278,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":278,"endColumn":18,"suggestions":[{"fix":{"range":[8221,8276],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":279,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":279,"endColumn":18,"suggestions":[{"fix":{"range":[8283,8359],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":280,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":280,"endColumn":18,"suggestions":[{"fix":{"range":[8366,8382],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":281,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":281,"endColumn":18,"suggestions":[{"fix":{"range":[8389,8434],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":282,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":282,"endColumn":18,"suggestions":[{"fix":{"range":[8441,8507],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":283,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":283,"endColumn":18,"suggestions":[{"fix":{"range":[8514,8598],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":284,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":284,"endColumn":18,"suggestions":[{"fix":{"range":[8605,8673],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":285,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":285,"endColumn":18,"suggestions":[{"fix":{"range":[8680,8735],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":289,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":289,"endColumn":18,"suggestions":[{"fix":{"range":[8876,8892],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":290,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":290,"endColumn":18,"suggestions":[{"fix":{"range":[8899,8935],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":291,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":291,"endColumn":18,"suggestions":[{"fix":{"range":[8942,8976],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":292,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":292,"endColumn":18,"suggestions":[{"fix":{"range":[8983,9040],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":293,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":293,"endColumn":18,"suggestions":[{"fix":{"range":[9047,9111],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":296,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":296,"endColumn":20,"suggestions":[{"fix":{"range":[9170,9213],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":299,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":299,"endColumn":20,"suggestions":[{"fix":{"range":[9339,9409],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Comprehensive Automated Fixer\n * Targets multiple high-impact, safe-to-automate ESLint error patterns\n * \n * AUTOMATION TARGETS (in priority order):\n * 1. ESLint auto-fixable rules (highest safety)\n * 2. Remaining || → ?? conversions  \n * 3. null → undefined conversions\n * 4. Unused import removal\n * 5. Simple type safety improvements\n */\n\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst { execSync } = require('node:child_process');\n\nclass ComprehensiveAutomatedFixer {\n  constructor() {\n    this.stats = {\n      initialErrors: 0,\n      finalErrors: 0,\n      eslintAutoFixes: 0,\n      nullishCoalescingFixes: 0,\n      nullUndefinedFixes: 0,\n      unusedImportFixes: 0,\n      totalFilesProcessed: 0,\n      errors: []\n    };\n  }\n\n  /**\n   * Get current error count\n   */\n  getCurrentErrorCount() {\n    try {\n      const output = execSync('node scripts/count-errors.cjs', { encoding: 'utf8' });\n      const lines = output.trim().split('\\n');\n      return Number.parseInt(lines.at(-1)) || 0;\n    } catch (error) {\n      console.warn('Could not get current error count:', error.message);\n      return 0;\n    }\n  }\n\n  /**\n   * Step 1: Run ESLint auto-fix for safe rules\n   */\n  runESLintAutoFix() {\n    console.log('🔧 Step 1: Running ESLint auto-fix...');\n    \n    try {\n      // Run auto-fix with specific safe rules\n      execSync('npx eslint . --fix --quiet', {\n        stdio: 'pipe',\n        timeout: 120_000\n      });\n      \n      console.log('✅ ESLint auto-fix completed');\n      return true;\n    } catch {\n      console.warn('⚠️  ESLint auto-fix had issues (expected with many errors)');\n      return true; // Continue anyway, auto-fix often \"fails\" but still fixes things\n    }\n  }\n\n  /**\n   * Step 2: Fix remaining || → ?? patterns\n   */\n  fixRemainingNullishCoalescing() {\n    console.log('🔄 Step 2: Fixing remaining || → ?? patterns...');\n    \n    try {\n      // Use our proven nullish coalescing converter\n      const result = execSync('node scripts/automated-nullish-coalescing-converter.cjs', {\n        encoding: 'utf8',\n        timeout: 120_000\n      });\n      \n      // Extract conversion count from output\n      const lines = result.split('\\n');\n      const conversionLine = lines.find(line => line.includes('Total conversions:'));\n      if (conversionLine) {\n        const match = conversionLine.match(/Total conversions: (\\d+)/);\n        if (match) {\n          this.stats.nullishCoalescingFixes = Number.parseInt(match[1]);\n        }\n      }\n      \n      console.log(`✅ Nullish coalescing fixes: ${this.stats.nullishCoalescingFixes}`);\n      return true;\n    } catch (error) {\n      console.warn('⚠️  Nullish coalescing fixes had issues:', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Step 3: Fix null → undefined patterns\n   */\n  fixNullToUndefined() {\n    console.log('🔄 Step 3: Converting null → undefined...');\n    \n    const files = this.findTSFiles();\n    let fixCount = 0;\n    \n    for (const filePath of files) {\n      try {\n        const content = fs.readFileSync(filePath, 'utf8');\n        let modified = content;\n        \n        // Safe null → undefined patterns\n        const patterns = [\n          // Variable assignments\n          { from: /:\\s*null(?=\\s*[,;}\\]])/g, to: ': undefined' },\n          // Return statements\n          { from: /return\\s+null(?=\\s*[;}])/g, to: 'return undefined' },\n          // Default parameters\n          { from: /=\\s*null(?=\\s*[,)])/g, to: '= undefined' },\n          // Object properties\n          { from: /:\\s*null(?=\\s*[,}])/g, to: ': undefined' }\n        ];\n        \n        for (const pattern of patterns) {\n          const matches = modified.match(pattern.from);\n          if (matches) {\n            modified = modified.replace(pattern.from, pattern.to);\n            fixCount += matches.length;\n          }\n        }\n        \n        if (modified !== content) {\n          fs.writeFileSync(filePath, modified);\n        }\n      } catch (error) {\n        console.warn(`Error processing ${filePath}:`, error.message);\n      }\n    }\n    \n    this.stats.nullUndefinedFixes = fixCount;\n    console.log(`✅ Null → undefined fixes: ${fixCount}`);\n    return true;\n  }\n\n  /**\n   * Step 4: Remove unused imports using ESLint\n   */\n  removeUnusedImports() {\n    console.log('🗑️  Step 4: Removing unused imports...');\n    \n    try {\n      // Target specific unused import rules\n      execSync('npx eslint . --fix --rule \"sonarjs/unused-import: error\" --quiet', {\n        stdio: 'pipe',\n        timeout: 120_000\n      });\n      \n      console.log('✅ Unused import removal completed');\n      return true;\n    } catch {\n      console.warn('⚠️  Unused import removal had issues (expected)');\n      return true; // Continue anyway\n    }\n  }\n\n  /**\n   * Find all TypeScript files\n   */\n  findTSFiles() {\n    const files = [];\n    const directories = ['app', 'components', 'lib'];\n    \n    for (const dir of directories) {\n      if (fs.existsSync(dir)) {\n        const findFiles = (currentDir) => {\n          const items = fs.readdirSync(currentDir);\n          for (const item of items) {\n            const fullPath = path.join(currentDir, item);\n            const stat = fs.statSync(fullPath);\n            \n            if (stat.isDirectory() && !item.startsWith('.')) {\n              findFiles(fullPath);\n            } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.tsx'))) {\n              files.push(fullPath);\n            }\n          }\n        };\n        findFiles(dir);\n      }\n    }\n    \n    return files;\n  }\n\n  /**\n   * Verify TypeScript compilation\n   */\n  verifyCompilation() {\n    console.log('🔍 Verifying TypeScript compilation...');\n    \n    try {\n      execSync('npx tsc --noEmit --strict', {\n        stdio: 'pipe',\n        timeout: 120_000\n      });\n      console.log('✅ TypeScript compilation successful');\n      return true;\n    } catch {\n      console.warn('⚠️  TypeScript compilation has issues (may be expected)');\n      return false;\n    }\n  }\n\n  /**\n   * Run the complete automated fixing process\n   */\n  async run(options = {}) {\n    const { \n      skipESLintFix = false,\n      skipNullishCoalescing = false,\n      skipNullUndefined = false,\n      skipUnusedImports = false,\n      verifyCompilation = false\n    } = options;\n\n    console.log('🚀 Starting Comprehensive Automated Fixing');\n    console.log('==========================================');\n\n    // Get baseline\n    this.stats.initialErrors = this.getCurrentErrorCount();\n    console.log(`📊 Initial error count: ${this.stats.initialErrors}`);\n\n    try {\n      // Step 1: ESLint auto-fix\n      if (!skipESLintFix) {\n        this.runESLintAutoFix();\n        const afterESLint = this.getCurrentErrorCount();\n        this.stats.eslintAutoFixes = this.stats.initialErrors - afterESLint;\n        console.log(`📉 After ESLint auto-fix: ${afterESLint} (${this.stats.eslintAutoFixes} fixed)`);\n      }\n\n      // Step 2: Nullish coalescing\n      if (!skipNullishCoalescing) {\n        this.fixRemainingNullishCoalescing();\n        const afterNullish = this.getCurrentErrorCount();\n        console.log(`📉 After nullish coalescing: ${afterNullish}`);\n      }\n\n      // Step 3: Null → undefined\n      if (!skipNullUndefined) {\n        this.fixNullToUndefined();\n        const afterNull = this.getCurrentErrorCount();\n        console.log(`📉 After null → undefined: ${afterNull}`);\n      }\n\n      // Step 4: Unused imports\n      if (!skipUnusedImports) {\n        this.removeUnusedImports();\n        const afterImports = this.getCurrentErrorCount();\n        console.log(`📉 After unused imports: ${afterImports}`);\n      }\n\n      // Final verification\n      if (verifyCompilation) {\n        this.verifyCompilation();\n      }\n\n      // Get final metrics\n      this.stats.finalErrors = this.getCurrentErrorCount();\n      const totalReduction = this.stats.initialErrors - this.stats.finalErrors;\n      const reductionPercentage = ((totalReduction / this.stats.initialErrors) * 100).toFixed(1);\n\n      // Print comprehensive results\n      console.log('\\n📈 COMPREHENSIVE AUTOMATION RESULTS');\n      console.log('===================================');\n      console.log(`Initial errors: ${this.stats.initialErrors}`);\n      console.log(`Final errors: ${this.stats.finalErrors}`);\n      console.log(`Total reduction: ${totalReduction} (${reductionPercentage}%)`);\n      console.log('');\n      console.log('BREAKDOWN BY AUTOMATION TYPE:');\n      console.log(`• ESLint auto-fixes: ${this.stats.eslintAutoFixes}`);\n      console.log(`• Nullish coalescing (|| → ??): ${this.stats.nullishCoalescingFixes}`);\n      console.log(`• Null → undefined: ${this.stats.nullUndefinedFixes}`);\n      console.log(`• Unused imports: estimated from ESLint`);\n      \n      // Calculate remaining work\n      const remainingToTarget = Math.max(0, this.stats.finalErrors - 200); // Phase 1 target\n      console.log('');\n      console.log(`🎯 PHASE 1 PROGRESS:`);\n      console.log(`Target: 200 errors`);\n      console.log(`Current: ${this.stats.finalErrors} errors`);\n      console.log(`Remaining: ${remainingToTarget} errors to target`);\n      \n      if (this.stats.finalErrors <= 200) {\n        console.log('🎉 PHASE 1 TARGET ACHIEVED!');\n      } else {\n        const progressPercentage = ((1333 - this.stats.finalErrors) / (1333 - 200) * 100).toFixed(1);\n        console.log(`Progress: ${progressPercentage}% toward Phase 1 target`);\n      }\n\n      return {\n        success: true,\n        initialErrors: this.stats.initialErrors,\n        finalErrors: this.stats.finalErrors,\n        totalReduction,\n        reductionPercentage: Number.parseFloat(reductionPercentage),\n        phase1Complete: this.stats.finalErrors <= 200\n      };\n\n    } catch (error) {\n      console.error('\\n❌ Comprehensive automation failed:', error.message);\n      return {\n        success: false,\n        error: error.message,\n        finalErrors: this.stats.finalErrors || this.stats.initialErrors\n      };\n    }\n  }\n}\n\n// CLI interface\nif (require.main === module) {\n  const args = new Set(process.argv.slice(2));\n  const options = {};\n  \n  // Parse command line arguments\n  if (args.has('--skip-eslint')) options.skipESLintFix = true;\n  if (args.has('--skip-nullish')) options.skipNullishCoalescing = true;\n  if (args.has('--skip-null')) options.skipNullUndefined = true;\n  if (args.has('--skip-imports')) options.skipUnusedImports = true;\n  if (args.has('--verify')) options.verifyCompilation = true;\n  \n  const fixer = new ComprehensiveAutomatedFixer();\n  fixer.run(options).then(result => {\n    process.exit(result.success ? 0 : 1);\n  }).catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = ComprehensiveAutomatedFixer;\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/count-errors.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `countErrors.cjs` or `CountErrors.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":8,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":8,"endColumn":51},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":9,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":9,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is assigned a value but never used.","line":10,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":10,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":10,"endColumn":34},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'countErrors' has too many lines (93). Maximum allowed is 50.","line":12,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":104,"endColumn":2},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":17,"column":35,"nodeType":"Literal","messageId":"issue","endLine":17,"endColumn":63},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":16,"suggestions":[{"fix":{"range":[1149,1174],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":53,"column":71,"nodeType":"Literal","messageId":"error","endLine":53,"endColumn":75,"suggestions":[{"messageId":"replace","fix":{"range":[1523,1527],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":72,"endColumn":18,"suggestions":[{"fix":{"range":[2143,2168],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":83,"column":73,"nodeType":"Literal","messageId":"error","endLine":83,"endColumn":77,"suggestions":[{"messageId":"replace","fix":{"range":[2575,2579],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":90,"column":55,"nodeType":"Literal","endLine":90,"endColumn":70},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":94,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":94,"endColumn":20,"suggestions":[{"fix":{"range":[2963,2987],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":100,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":100,"endColumn":18,"suggestions":[{"fix":{"range":[3182,3202],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * 📊 CROSS-PLATFORM ERROR COUNTING SCRIPT\n * Counts ESLint errors in a platform-independent way\n */\n\nconst { execSync } = require('node:child_process');\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nfunction countErrors() {\n  try {\n    console.error('Running ESLint to count errors...');\n\n    // Run ESLint and capture output with timeout\n    const eslintOutput = execSync('npx eslint . --format json', {\n      encoding: 'utf8',\n      stdio: ['pipe', 'pipe', 'pipe'],\n      timeout: 120_000, // 2 minutes timeout\n      maxBuffer: 1024 * 1024 * 10 // 10MB buffer\n    });\n\n    console.error('ESLint completed successfully');\n\n    // Parse JSON output\n    const results = JSON.parse(eslintOutput);\n\n    // Count total errors\n    const totalErrors = results.reduce((total, file) => {\n      return total + file.errorCount;\n    }, 0);\n\n    // Count total warnings\n    const totalWarnings = results.reduce((total, file) => {\n      return total + file.warningCount;\n    }, 0);\n\n    console.error(`Found ${totalErrors} errors and ${totalWarnings} warnings`);\n\n    // Output just the error count for scripts\n    console.log(totalErrors);\n\n    // Also save detailed metrics for monitoring\n    const metrics = {\n      timestamp: new Date().toISOString(),\n      errors: totalErrors,\n      warnings: totalWarnings,\n      files: results.length,\n      filesWithErrors: results.filter(f => f.errorCount > 0).length\n    };\n\n    fs.writeFileSync('.current-metrics.json', JSON.stringify(metrics, null, 2));\n\n    return totalErrors;\n\n  } catch (error) {\n    console.error('ESLint failed:', error.message);\n\n    // If ESLint fails, try to extract error count from stderr\n    const errorOutput = error.stderr ? error.stderr.toString() : '';\n    const stdout = error.stdout ? error.stdout.toString() : '';\n\n    // Try to parse the JSON output even if command failed\n    try {\n      const results = JSON.parse(stdout);\n      const totalErrors = results.reduce((total, file) => {\n        return total + file.errorCount;\n      }, 0);\n\n      console.error(`Extracted ${totalErrors} errors from failed ESLint output`);\n      console.log(totalErrors);\n\n      // Save metrics even from failed run\n      const metrics = {\n        timestamp: new Date().toISOString(),\n        errors: totalErrors,\n        warnings: results.reduce((total, file) => total + file.warningCount, 0),\n        files: results.length,\n        filesWithErrors: results.filter(f => f.errorCount > 0).length\n      };\n\n      fs.writeFileSync('.current-metrics.json', JSON.stringify(metrics, null, 2));\n      return totalErrors;\n\n    } catch {\n      console.error('Could not parse ESLint output as JSON');\n\n      // Look for error patterns in output\n      const errorMatch = (errorOutput + stdout).match(/(\\d+)\\s+error/);\n      if (errorMatch) {\n        const errorCount = Number.parseInt(errorMatch[1], 10);\n        console.error(`Extracted error count: ${errorCount}`);\n        console.log(errorCount);\n        return errorCount;\n      }\n\n      // If we can't determine error count, use baseline from analysis\n      console.error('Could not determine error count, using baseline estimate');\n      console.log('1332');\n      return 1332;\n    }\n  }\n}\n\n// Run the function\ncountErrors();\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/get-high-impact-files.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `getHighImpactFiles.cjs` or `GetHighImpactFiles.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":6,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":6,"endColumn":14,"suggestions":[{"fix":{"range":[82,153],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":10,"column":29,"nodeType":"Literal","messageId":"issue","endLine":10,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":45,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":45,"endColumn":14,"suggestions":[{"fix":{"range":[1388,1440],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":46,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":46,"endColumn":14,"suggestions":[{"fix":{"range":[1443,1472],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":49,"column":33,"nodeType":"MemberExpression","messageId":"limited","endLine":49,"endColumn":44},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":51,"endColumn":16,"suggestions":[{"fix":{"range":[1653,1700],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":54,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":54,"endColumn":14,"suggestions":[{"fix":{"range":[1710,1766],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":55,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":14,"suggestions":[{"fix":{"range":[1769,1798],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":58,"column":35,"nodeType":"MemberExpression","messageId":"limited","endLine":58,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":60,"endColumn":16,"suggestions":[{"fix":{"range":[2002,2051],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":63,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":63,"endColumn":14,"suggestions":[{"fix":{"range":[2061,2114],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":64,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":64,"endColumn":14,"suggestions":[{"fix":{"range":[2117,2146],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":67,"column":34,"nodeType":"MemberExpression","messageId":"limited","endLine":67,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":69,"endColumn":16,"suggestions":[{"fix":{"range":[2346,2393],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":72,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":72,"endColumn":14,"suggestions":[{"fix":{"range":[2403,2432],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":73,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":73,"endColumn":14,"suggestions":[{"fix":{"range":[2435,2464],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":74,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":74,"endColumn":14,"suggestions":[{"fix":{"range":[2467,2523],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":75,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":75,"endColumn":14,"suggestions":[{"fix":{"range":[2526,2587],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":76,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":76,"endColumn":14,"suggestions":[{"fix":{"range":[2590,2657],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":77,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":77,"endColumn":14,"suggestions":[{"fix":{"range":[2660,2723],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":78,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":78,"endColumn":14,"suggestions":[{"fix":{"range":[2726,2805],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\nconst { execSync } = require('node:child_process');\n\ntry {\n  console.log('🔍 Getting high-impact files for linting remediation...');\n  \n  let eslintOutput;\n  try {\n    eslintOutput = execSync('npx eslint . --format json', {\n      encoding: 'utf8',\n      stdio: ['pipe', 'pipe', 'pipe'], // Capture stdout, stderr, and stdin\n      timeout: 120_000\n    });\n  } catch (error) {\n    // If ESLint exits with a non-zero code (e.g., errors found), execSync throws an error.\n    // However, the JSON output might still be available in error.stdout.\n    if (error.stdout) {\n      eslintOutput = error.stdout.toString();\n      console.warn('ESLint found errors, but output was captured.');\n    } else {\n      console.error('ESLint execution failed and no output was captured:', error.message);\n      process.exit(1);\n    }\n  }\n  \n  let data;\n  try {\n    data = JSON.parse(eslintOutput);\n  } catch (parseError) {\n    console.error('Failed to parse ESLint output as JSON:', parseError.message);\n    console.error('ESLint output was:', eslintOutput); // Log the problematic output\n    process.exit(1);\n  }\n  \n  // Process files and sort by error count\n  const files = data\n    .filter(f => f.errorCount > 0)\n    .map(f => ({\n      file: f.filePath.replace(process.cwd(), '').replaceAll('\\\\', '/'),\n      errors: f.errorCount\n    }))\n    .sort((a, b) => b.errors - a.errors);\n  \n  console.log('\\n🎯 HIGH-IMPACT FILES (20+ errors):');\n  console.log('=' .repeat(50));\n  const highImpact = files.filter(f => f.errors >= 20);\n  if (highImpact.length > 0) {\n    for (const f of highImpact) console.log(`${f.errors} errors: ${f.file}`);\n  } else {\n    console.log('No files with 20+ errors found.');\n  }\n  \n  console.log('\\n📊 MEDIUM-IMPACT FILES (10-19 errors):');\n  console.log('=' .repeat(50));\n  const mediumImpact = files.filter(f => f.errors >= 10 && f.errors < 20);\n  if (mediumImpact.length > 0) {\n    for (const f of mediumImpact) console.log(`${f.errors} errors: ${f.file}`);\n  } else {\n    console.log('No files with 10-19 errors found.');\n  }\n  \n  console.log('\\n📈 LOWER-IMPACT FILES (5-9 errors):');\n  console.log('=' .repeat(50));\n  const lowerImpact = files.filter(f => f.errors >= 5 && f.errors < 10);\n  if (lowerImpact.length > 0) {\n    for (const f of lowerImpact) console.log(`${f.errors} errors: ${f.file}`);\n  } else {\n    console.log('No files with 5-9 errors found.');\n  }\n  \n  console.log('\\n📋 SUMMARY:');\n  console.log('=' .repeat(50));\n  console.log(`Total files with errors: ${files.length}`);\n  console.log(`High-impact files (20+): ${highImpact.length}`);\n  console.log(`Medium-impact files (10-19): ${mediumImpact.length}`);\n  console.log(`Lower-impact files (5-9): ${lowerImpact.length}`);\n  console.log(`Files with <5 errors: ${files.filter(f => f.errors < 5).length}`);\n  \n} catch (error) { // Catch any other unexpected errors during processing\n  console.error('Error processing ESLint data:', error.message);\n  process.exit(1);\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/revert-boolean-fixer-damage.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `revertBooleanFixerDamage.cjs` or `RevertBooleanFixerDamage.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":8,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is assigned a value but never used.","line":9,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":9,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":9,"endColumn":34},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":10,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":10,"endColumn":51},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":26,"column":31,"nodeType":"Literal","messageId":"issue","endLine":26,"endColumn":62},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":28,"column":30,"nodeType":"MemberExpression","messageId":"safeOSCommand","endLine":28,"endColumn":38},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":44,"column":31,"nodeType":"Literal","endLine":44,"endColumn":70},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":52,"column":35,"nodeType":"Literal","endLine":52,"endColumn":173},{"ruleId":"sonarjs/regex-complexity","severity":2,"message":"Simplify this regular expression to reduce its complexity from 29 to the 20 allowed.","line":52,"column":35,"nodeType":"Literal","endLine":52,"endColumn":173},{"ruleId":"sonarjs/regex-complexity","severity":2,"message":"Simplify this regular expression to reduce its complexity from 24 to the 20 allowed.","line":60,"column":30,"nodeType":"Literal","endLine":60,"endColumn":152},{"ruleId":"sonarjs/regex-complexity","severity":2,"message":"Simplify this regular expression to reduce its complexity from 22 to the 20 allowed.","line":68,"column":31,"nodeType":"Literal","endLine":68,"endColumn":143},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":97,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":97,"endColumn":22,"suggestions":[{"fix":{"range":[3266,3328],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":103,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":103,"endColumn":20,"suggestions":[{"fix":{"range":[3436,3474],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":106,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":106,"endColumn":20,"suggestions":[{"fix":{"range":[3519,3562],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":122,"column":22,"nodeType":"Identifier","messageId":"safeOSCommand","endLine":122,"endColumn":30},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":127,"column":14,"nodeType":"MemberExpression","messageId":"safeOSCommand","endLine":127,"endColumn":71},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":127,"column":14,"nodeType":"MemberExpression","messageId":"safeOSCommand","endLine":127,"endColumn":46},{"ruleId":"max-lines-per-function","severity":2,"message":"Async method 'run' has too many lines (57). Maximum allowed is 50.","line":147,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":203,"endColumn":4},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":148,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":148,"endColumn":16,"suggestions":[{"fix":{"range":[4913,4971],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":149,"endColumn":16,"suggestions":[{"fix":{"range":[4976,5034],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":153,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":153,"endColumn":16,"suggestions":[{"fix":{"range":[5127,5183],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":158,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":158,"endColumn":16,"suggestions":[{"fix":{"range":[5289,5353],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":159,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":159,"endColumn":16,"suggestions":[{"fix":{"range":[5358,5374],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":165,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":165,"endColumn":20,"suggestions":[{"fix":{"range":[5505,5540],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":177,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":177,"endColumn":16,"suggestions":[{"fix":{"range":[5842,5858],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":178,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":178,"endColumn":16,"suggestions":[{"fix":{"range":[5863,5899],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":179,"endColumn":16,"suggestions":[{"fix":{"range":[5904,5939],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":180,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":180,"endColumn":16,"suggestions":[{"fix":{"range":[5944,6005],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":181,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":181,"endColumn":16,"suggestions":[{"fix":{"range":[6010,6056],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":182,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":182,"endColumn":16,"suggestions":[{"fix":{"range":[6061,6118],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":183,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":183,"endColumn":16,"suggestions":[{"fix":{"range":[6123,6186],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":184,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":184,"endColumn":16,"suggestions":[{"fix":{"range":[6191,6207],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":185,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":185,"endColumn":16,"suggestions":[{"fix":{"range":[6212,6260],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":186,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":186,"endColumn":16,"suggestions":[{"fix":{"range":[6265,6309],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":187,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":187,"endColumn":16,"suggestions":[{"fix":{"range":[6314,6418],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":190,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":190,"endColumn":18,"suggestions":[{"fix":{"range":[6466,6482],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":191,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":191,"endColumn":18,"suggestions":[{"fix":{"range":[6489,6514],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":193,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":193,"endColumn":20,"suggestions":[{"fix":{"range":[6568,6611],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Revert Boolean Fixer Damage\n * Fixes the malformed expressions created by the targeted-boolean-expression-fixer.cjs\n */\n\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst { execSync } = require('node:child_process');\n\nclass BooleanFixerReverter {\n  constructor() {\n    this.stats = {\n      filesProcessed: 0,\n      fixesApplied: 0,\n      errors: []\n    };\n  }\n\n  /**\n   * Get current error count\n   */\n  getCurrentErrorCount() {\n    try {\n      const output = execSync('node scripts/count-errors.cjs', { encoding: 'utf8' });\n      const lines = output.trim().split('\\n');\n      return Number.parseInt(lines.at(-1)) || 0;\n    } catch (error) {\n      console.warn('Could not get current error count:', error.message);\n      return 0;\n    }\n  }\n\n  /**\n   * Fix malformed boolean expressions in a line\n   */\n  fixMalformedExpressions(line) {\n    let fixed = line;\n    let changes = 0;\n\n    // Pattern 1: Fix instanceof expressions\n    // \"error instanceof Error != null\" → \"error instanceof Error\"\n    const instanceofPattern = /(\\w+\\s+instanceof\\s+\\w+)\\s*!=\\s*null/g;\n    fixed = fixed.replaceAll(instanceofPattern, (match, instanceofExpr) => {\n      changes++;\n      return instanceofExpr;\n    });\n\n    // Pattern 2: Fix boolean ternary expressions\n    // \"booleanVar != null ? a : b\" → \"booleanVar ? a : b\" (for known boolean patterns)\n    const booleanTernaryPattern = /(is\\w+|has\\w+|can\\w+|should\\w+|success|loading|error|active|enabled|disabled|visible|hidden)\\s*!=\\s*null\\s*\\?\\s*([^:]+)\\s*:\\s*([^;,}]+)/g;\n    fixed = fixed.replaceAll(booleanTernaryPattern, (match, booleanVar, trueExpr, falseExpr) => {\n      changes++;\n      return `${booleanVar} ? ${trueExpr} : ${falseExpr}`;\n    });\n\n    // Pattern 3: Fix boolean if conditions\n    // \"if (booleanVar != null)\" → \"if (booleanVar)\"\n    const booleanIfPattern = /if\\s*\\(\\s*(is\\w+|has\\w+|can\\w+|should\\w+|success|loading|error|active|enabled|disabled|visible|hidden)\\s*!=\\s*null\\s*\\)/g;\n    fixed = fixed.replaceAll(booleanIfPattern, (match, booleanVar) => {\n      changes++;\n      return `if (${booleanVar})`;\n    });\n\n    // Pattern 4: Fix boolean && expressions\n    // \"booleanVar != null &&\" → \"booleanVar &&\"\n    const booleanAndPattern = /(is\\w+|has\\w+|can\\w+|should\\w+|success|loading|error|active|enabled|disabled|visible|hidden)\\s*!=\\s*null\\s*&&/g;\n    fixed = fixed.replaceAll(booleanAndPattern, (match, booleanVar) => {\n      changes++;\n      return `${booleanVar} &&`;\n    });\n\n    // Pattern 5: Fix specific known patterns that should be nullable checks\n    // Keep these as != null for actual nullable values like dates, objects, etc.\n    // But fix the malformed ones where the property access was broken\n\n    return { fixed, changes };\n  }\n\n  /**\n   * Process a single file\n   */\n  processFile(filePath) {\n    try {\n      const content = fs.readFileSync(filePath, 'utf8');\n      const lines = content.split('\\n');\n      let hasChanges = false;\n      const results = [];\n\n      for (const [index, line] of lines.entries()) {\n        const result = this.fixMalformedExpressions(line);\n        results.push(result.fixed);\n        if (result.changes > 0) {\n          hasChanges = true;\n          this.stats.fixesApplied += result.changes;\n          console.log(`  Line ${index + 1}: ${result.changes} fix(es)`);\n        }\n      }\n\n      if (hasChanges) {\n        fs.writeFileSync(filePath, results.join('\\n'));\n        console.log(`✅ Updated: ${filePath}`);\n        return true;\n      } else {\n        console.log(`⏭️  No changes: ${filePath}`);\n        return false;\n      }\n    } catch (error) {\n      this.stats.errors.push({ file: filePath, error: error.message });\n      console.error(`❌ Error processing ${filePath}: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Find files with malformed patterns\n   */\n  findFilesWithMalformedPatterns() {\n    try {\n      // Use PowerShell to find files with the malformed patterns\n      const output = execSync(String.raw`Get-ChildItem -Path . -Include \"*.ts\", \"*.tsx\" -Recurse | Select-String \"!= null \\?\" | Select-Object -ExpandProperty Filename | Sort-Object | Get-Unique`, {\n        encoding: 'utf8',\n        shell: 'powershell'\n      });\n      \n      return output.trim().split('\\n').filter(file => file.trim()).map(file => file.trim());\n    } catch {\n      console.warn('Could not find files with malformed patterns, using fallback');\n      // Fallback to known affected files\n      return [\n        'app/admin/auto-scraping/page.tsx',\n        'app/admin/events/page.tsx', \n        'app/admin/food-trucks/[id]/page.tsx',\n        'app/admin/pipeline/page.tsx',\n        'app/admin/test-pipeline/page.tsx',\n        'app/api/admin/automated-cleanup/route.ts',\n        'app/api/admin/data-cleanup/route.ts',\n        'app/api/admin/data-quality/route.ts'\n      ];\n    }\n  }\n\n  /**\n   * Run the reversion process\n   */\n  async run() {\n    console.log('🔄 Starting Boolean Fixer Damage Reversion');\n    console.log('==========================================');\n\n    // Get baseline error count\n    const initialErrors = this.getCurrentErrorCount();\n    console.log(`📊 Initial error count: ${initialErrors}`);\n\n    // Find files to process\n    const filesToProcess = this.findFilesWithMalformedPatterns();\n    \n    console.log(`📁 Found ${filesToProcess.length} files to check`);\n    console.log('');\n\n    // Process files\n    let filesChanged = 0;\n    for (const file of filesToProcess) {\n      if (fs.existsSync(file)) {\n        console.log(`Processing: ${file}`);\n        const changed = this.processFile(file);\n        if (changed) filesChanged++;\n        this.stats.filesProcessed++;\n      }\n    }\n\n    // Get final error count\n    const finalErrors = this.getCurrentErrorCount();\n    const errorReduction = initialErrors - finalErrors;\n\n    // Print summary\n    console.log('');\n    console.log('📈 REVERSION SUMMARY');\n    console.log('===================');\n    console.log(`Files processed: ${this.stats.filesProcessed}`);\n    console.log(`Files changed: ${filesChanged}`);\n    console.log(`Fixes applied: ${this.stats.fixesApplied}`);\n    console.log(`Errors encountered: ${this.stats.errors.length}`);\n    console.log('');\n    console.log(`Initial errors: ${initialErrors}`);\n    console.log(`Final errors: ${finalErrors}`);\n    console.log(`Error reduction: ${errorReduction} (${((errorReduction/initialErrors)*100).toFixed(1)}%)`);\n\n    if (this.stats.errors.length > 0) {\n      console.log('');\n      console.log('❌ ERRORS:');\n      for (const err of this.stats.errors) {\n        console.log(`  ${err.file}: ${err.error}`);\n      }\n    }\n\n    return {\n      filesChanged,\n      fixesApplied: this.stats.fixesApplied,\n      errorReduction,\n      success: this.stats.errors.length === 0\n    };\n  }\n}\n\n// CLI interface\nif (require.main === module) {\n  const reverter = new BooleanFixerReverter();\n  reverter.run().then(result => {\n    process.exit(result.success ? 0 : 1);\n  }).catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = BooleanFixerReverter;\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/test-oauth-flow.js","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `testOauthFlow.js` or `TestOauthFlow.js`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'__dirname' is assigned a value but never used.","line":19,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":62,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":62,"endColumn":16,"suggestions":[{"fix":{"range":[1664,1735],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":298,"column":57,"nodeType":"Literal","messageId":"error","endLine":298,"endColumn":61,"suggestions":[{"messageId":"replace","fix":{"range":[8764,8768],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/prefer-top-level-await","severity":2,"message":"Prefer top-level await over using a promise chain.","line":369,"column":14,"nodeType":"Identifier","messageId":"promise","endLine":369,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * OAuth Flow Testing Script\n *\n * This script provides automated testing for the Google OAuth flow\n * and generates test reports for verification.\n *\n * Usage: node scripts/test-oauth-flow.js [--env=development|production]\n */\n\nimport https from 'node:https';\nimport http from 'node:http';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Configuration\nconst SUPABASE_PROJECT_ID = 'zkwliyjjkdnigizidlln';\nconst DEV_URL = 'http://localhost:3000';\nconst PROD_URL = 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app';\n\nclass OAuthTester {\n  constructor(environment = 'development') {\n    this.environment = environment;\n    this.baseUrl = environment === 'production' ? PROD_URL : DEV_URL;\n    this.results = {\n      tests: [],\n      passed: 0,\n      failed: 0,\n      warnings: 0\n    };\n    this.loadEnvironment();\n  }\n\n  loadEnvironment() {\n    const envPath = path.join(process.cwd(), '.env.local');\n    if (fs.existsSync(envPath)) {\n      const envContent = fs.readFileSync(envPath, 'utf8');\n      for (const line of envContent.split('\\n')) {\n        const [key, value] = line.split('=');\n        if (key && value) {\n          process.env[key] = value.replaceAll('\"', '');\n        }\n      }\n    }\n  }\n\n  log(message, type = 'info') {\n    const colors = {\n      info: '\\u001B[36m',\n      success: '\\u001B[32m',\n      warning: '\\u001B[33m',\n      error: '\\u001B[31m',\n      reset: '\\u001B[0m'\n    };\n    \n    const timestamp = new Date().toISOString();\n    console.log(`${colors[type]}[${timestamp}] ${message}${colors.reset}`);\n  }\n\n  async runTest(name, testFn) {\n    this.log(`Running test: ${name}`, 'info');\n    \n    try {\n      const result = await testFn();\n      this.results.tests.push({\n        name,\n        status: 'passed',\n        result,\n        timestamp: new Date().toISOString()\n      });\n      this.results.passed++;\n      this.log(`✅ ${name} - PASSED`, 'success');\n      return result;\n    } catch (error) {\n      this.results.tests.push({\n        name,\n        status: 'failed',\n        error: error.message,\n        timestamp: new Date().toISOString()\n      });\n      this.results.failed++;\n      this.log(`❌ ${name} - FAILED: ${error.message}`, 'error');\n      throw error;\n    }\n  }\n\n  async testLoginPageAccessibility() {\n    return this.runTest('Login Page Accessibility', async () => {\n      const response = await this.makeRequest(`${this.baseUrl}/login`);\n      \n      if (response.statusCode !== 200) {\n        throw new Error(`Login page returned status ${response.statusCode}`);\n      }\n      \n      if (!response.body.includes('Google')) {\n        throw new Error('Google login button not found on login page');\n      }\n      \n      return {\n        statusCode: response.statusCode,\n        hasGoogleButton: response.body.includes('Google'),\n        contentLength: response.body.length\n      };\n    });\n  }\n\n  async testAuthCallbackRoute() {\n    return this.runTest('Auth Callback Route', async () => {\n      // Test callback route without parameters (should handle gracefully)\n      const response = await this.makeRequest(`${this.baseUrl}/auth/callback`);\n      \n      // Should redirect to login or handle missing code gracefully\n      if (response.statusCode !== 302 && response.statusCode !== 200) {\n        throw new Error(`Callback route returned unexpected status ${response.statusCode}`);\n      }\n      \n      return {\n        statusCode: response.statusCode,\n        location: response.headers.location || 'No redirect',\n        handlesGracefully: true\n      };\n    });\n  }\n\n  async testSupabaseConnection() {\n    return this.runTest('Supabase Connection', async () => {\n      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n      if (!supabaseUrl) {\n        throw new Error('NEXT_PUBLIC_SUPABASE_URL not configured');\n      }\n      \n      const response = await this.makeRequest(`${supabaseUrl}/rest/v1/`);\n      \n      if (response.statusCode !== 200 && response.statusCode !== 401) {\n        throw new Error(`Supabase connection failed with status ${response.statusCode}`);\n      }\n      \n      return {\n        url: supabaseUrl,\n        statusCode: response.statusCode,\n        connected: true\n      };\n    });\n  }\n\n  async testSupabaseAuthSettings() {\n    return this.runTest('Supabase Auth Settings', async () => {\n      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n      const settingsUrl = `${supabaseUrl}/auth/v1/settings`;\n      \n      try {\n        const response = await this.makeRequest(settingsUrl);\n        const settings = JSON.parse(response.body);\n        \n        return {\n          googleEnabled: settings.external?.google || false,\n          signupDisabled: settings.disable_signup || false,\n          autoconfirm: settings.autoconfirm || false,\n          settingsAccessible: true\n        };\n      } catch {\n        // Settings endpoint might require auth, which is normal\n        this.log('⚠️  Auth settings endpoint requires authentication (normal)', 'warning');\n        this.results.warnings++;\n        \n        return {\n          settingsAccessible: false,\n          reason: 'Authentication required'\n        };\n      }\n    });\n  }\n\n  async testEnvironmentConfiguration() {\n    return this.runTest('Environment Configuration', async () => {\n      const requiredVars = [\n        'NEXT_PUBLIC_SUPABASE_URL',\n        'NEXT_PUBLIC_SUPABASE_ANON_KEY',\n        'SUPABASE_SERVICE_ROLE_KEY'\n      ];\n      \n      const missing = requiredVars.filter(varName => !process.env[varName]);\n      \n      if (missing.length > 0) {\n        throw new Error(`Missing environment variables: ${missing.join(', ')}`);\n      }\n      \n      return {\n        allVariablesPresent: true,\n        supabaseProjectId: SUPABASE_PROJECT_ID,\n        environment: this.environment\n      };\n    });\n  }\n\n  async testOAuthRedirectUrls() {\n    return this.runTest('OAuth Redirect URLs', async () => {\n      const expectedUrls = [\n        `${this.baseUrl}/auth/callback`,\n        `${PROD_URL}/auth/callback`,\n        'http://localhost:3000/auth/callback'\n      ];\n      \n      // This test validates the expected URLs are properly formatted\n      const validUrls = expectedUrls.filter(url => {\n        try {\n          new URL(url);\n          return true;\n        } catch {\n          return false;\n        }\n      });\n      \n      if (validUrls.length !== expectedUrls.length) {\n        throw new Error('Some redirect URLs are malformed');\n      }\n      \n      return {\n        expectedUrls,\n        validUrls: validUrls.length,\n        currentEnvironment: this.baseUrl\n      };\n    });\n  }\n\n  async makeRequest(url, options = {}) {\n    return new Promise((resolve, reject) => {\n      const urlObj = new URL(url);\n      const isHttps = urlObj.protocol === 'https:';\n      const client = isHttps ? https : http;\n      \n      const requestOptions = {\n        hostname: urlObj.hostname,\n        port: urlObj.port || (isHttps ? 443 : 80),\n        path: urlObj.pathname + urlObj.search,\n        method: options.method || 'GET',\n        headers: {\n          'User-Agent': 'OAuth-Tester/1.0',\n          ...options.headers\n        }\n      };\n      \n      const req = client.request(requestOptions, (res) => {\n        let body = '';\n        res.on('data', chunk => body += chunk);\n        res.on('end', () => {\n          resolve({\n            statusCode: res.statusCode,\n            headers: res.headers,\n            body\n          });\n        });\n      });\n      \n      req.on('error', reject);\n      req.setTimeout(10_000, () => {\n        req.destroy();\n        reject(new Error('Request timeout'));\n      });\n      \n      if (options.body) {\n        req.write(options.body);\n      }\n      \n      req.end();\n    });\n  }\n\n  generateReport() {\n    const report = {\n      summary: {\n        environment: this.environment,\n        baseUrl: this.baseUrl,\n        timestamp: new Date().toISOString(),\n        totalTests: this.results.tests.length,\n        passed: this.results.passed,\n        failed: this.results.failed,\n        warnings: this.results.warnings,\n        successRate: `${Math.round((this.results.passed / this.results.tests.length) * 100)}%`\n      },\n      tests: this.results.tests,\n      recommendations: this.generateRecommendations()\n    };\n    \n    // Save report to file\n    const reportPath = path.join(process.cwd(), 'reports', `oauth-test-${this.environment}-${Date.now()}.json`);\n    const reportsDir = path.dirname(reportPath);\n    \n    if (!fs.existsSync(reportsDir)) {\n      fs.mkdirSync(reportsDir, { recursive: true });\n    }\n    \n    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n    \n    return { report, reportPath };\n  }\n\n  generateRecommendations() {\n    const recommendations = [];\n    \n    if (this.results.failed > 0) {\n      recommendations.push('❌ Fix failed tests before proceeding with OAuth setup');\n    }\n    \n    if (this.results.warnings > 0) {\n      recommendations.push('⚠️  Review warnings - they may indicate configuration issues');\n    }\n    \n    if (this.results.passed === this.results.tests.length) {\n      recommendations.push('✅ All tests passed! Ready for manual OAuth configuration', '📋 Next: Configure Google Cloud Console and Supabase OAuth settings');\n    }\n    \n    recommendations.push('📖 See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed setup instructions');\n    \n    return recommendations;\n  }\n\n  async run() {\n    this.log(`🧪 Starting OAuth Flow Tests (${this.environment})`, 'info');\n    this.log(`Base URL: ${this.baseUrl}`, 'info');\n    \n    try {\n      await this.testEnvironmentConfiguration();\n      await this.testSupabaseConnection();\n      await this.testSupabaseAuthSettings();\n      await this.testLoginPageAccessibility();\n      await this.testAuthCallbackRoute();\n      await this.testOAuthRedirectUrls();\n      \n      const { report, reportPath } = this.generateReport();\n      \n      this.log('\\n📊 TEST SUMMARY:', 'info');\n      this.log(`Total Tests: ${report.summary.totalTests}`, 'info');\n      this.log(`Passed: ${report.summary.passed}`, 'success');\n      this.log(`Failed: ${report.summary.failed}`, 'error');\n      this.log(`Warnings: ${report.summary.warnings}`, 'warning');\n      this.log(`Success Rate: ${report.summary.successRate}`, 'info');\n      \n      this.log('\\n💡 RECOMMENDATIONS:', 'info');\n      for (const rec of report.recommendations) this.log(rec, 'info');\n      \n      this.log(`\\n📄 Report saved: ${reportPath}`, 'info');\n      \n      return report;\n      \n    } catch (error) {\n      this.log(`Test suite failed: ${error.message}`, 'error');\n      throw error;\n    }\n  }\n}\n\n// CLI interface\nconst args = process.argv.slice(2);\nconst envArg = args.find(arg => arg.startsWith('--env='));\nconst environment = envArg ? envArg.split('=')[1] : 'development';\n\nif (!['development', 'production'].includes(environment)) {\n  console.error('Invalid environment. Use --env=development or --env=production');\n  process.exit(1);\n}\n\nconst tester = new OAuthTester(environment);\ntester.run().catch(error => {\n  console.error('Testing failed:', error);\n  process.exit(1);\n});\n\nexport default OAuthTester;\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/update-monitoring.cjs","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `updateMonitoring.cjs` or `UpdateMonitoring.cjs`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":8,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is assigned a value but never used.","line":9,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":9,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":9,"endColumn":34},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":10,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":10,"endColumn":51},{"ruleId":"max-lines-per-function","severity":2,"message":"Function 'updateMonitoring' has too many lines (181). Maximum allowed is 50.","line":12,"column":1,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":192,"endColumn":2},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":12,"column":10,"nodeType":null,"messageId":"refactorFunction","endLine":12,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":13,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":13,"endColumn":14,"suggestions":[{"fix":{"range":[298,357],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":14,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":14,"endColumn":14,"suggestions":[{"fix":{"range":[360,426],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-os-command-from-path","severity":2,"message":"Make sure the \"PATH\" used to find this command includes only what you intend.","line":18,"column":39,"nodeType":"Literal","messageId":"issue","endLine":18,"endColumn":70},{"ruleId":"sonarjs/os-command","severity":2,"message":"Make sure that executing this OS command is safe here.","line":25,"column":43,"nodeType":"MemberExpression","messageId":"safeOSCommand","endLine":25,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":64,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":64,"endColumn":16,"suggestions":[{"fix":{"range":[2069,2101],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":65,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":65,"endColumn":16,"suggestions":[{"fix":{"range":[2106,2148],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":66,"endColumn":16,"suggestions":[{"fix":{"range":[2153,2198],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":67,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":67,"endColumn":16,"suggestions":[{"fix":{"range":[2203,2242],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":68,"endColumn":16,"suggestions":[{"fix":{"range":[2247,2299],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":69,"endColumn":16,"suggestions":[{"fix":{"range":[2304,2359],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'phase2Bar' is assigned a value but never used.","line":79,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":20},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'phase2Bar' variable.","line":79,"column":11,"nodeType":"Identifier","messageId":"unusedVariable","endLine":79,"endColumn":20},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"phase2Bar\".","line":79,"column":11,"nodeType":null,"messageId":"removeAssignment","endLine":79,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'phase3Bar' is assigned a value but never used.","line":80,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":20},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'phase3Bar' variable.","line":80,"column":11,"nodeType":"Identifier","messageId":"unusedVariable","endLine":80,"endColumn":20},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"phase3Bar\".","line":80,"column":11,"nodeType":null,"messageId":"removeAssignment","endLine":80,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":84,"endColumn":16,"suggestions":[{"fix":{"range":[2848,2897],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-regex-spaces","severity":2,"message":"If multiple spaces are required here, use number quantifier ({2}).","line":91,"column":34,"nodeType":null,"endLine":91,"endColumn":36,"suggestions":[{"desc":"Use quantifier {2}","fix":{"range":[17,19],"text":" {2}"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":101,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":101,"endColumn":16,"suggestions":[{"fix":{"range":[3485,3543],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-regex-spaces","severity":2,"message":"If multiple spaces are required here, use number quantifier ({6}).","line":112,"column":26,"nodeType":null,"endLine":112,"endColumn":32,"suggestions":[{"desc":"Use quantifier {6}","fix":{"range":[9,15],"text":" {6}"}}]},{"ruleId":"sonarjs/no-regex-spaces","severity":2,"message":"If multiple spaces are required here, use number quantifier ({4}).","line":116,"column":28,"nodeType":null,"endLine":116,"endColumn":32,"suggestions":[{"desc":"Use quantifier {4}","fix":{"range":[11,15],"text":" {4}"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":122,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":122,"endColumn":16,"suggestions":[{"fix":{"range":[4199,4246],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":172,"column":49,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":172,"endColumn":91},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":177,"column":82,"nodeType":"Literal","messageId":"error","endLine":177,"endColumn":86,"suggestions":[{"messageId":"replace","fix":{"range":[5796,5800],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":179,"endColumn":16,"suggestions":[{"fix":{"range":[5812,5878],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":180,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":180,"endColumn":16,"suggestions":[{"fix":{"range":[5883,5952],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":183,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":183,"endColumn":16,"suggestions":[{"fix":{"range":[5978,6017],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":184,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":184,"endColumn":16,"suggestions":[{"fix":{"range":[6022,6113],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":185,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":185,"endColumn":16,"suggestions":[{"fix":{"range":[6118,6215],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":186,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":186,"endColumn":16,"suggestions":[{"fix":{"range":[6220,6273],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":197,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":197,"endColumn":18,"suggestions":[{"fix":{"range":[6492,6551],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":208,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":208,"endColumn":16,"suggestions":[{"fix":{"range":[6791,6828],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":210,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":210,"endColumn":16,"suggestions":[{"fix":{"range":[6853,6919],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * 📈 CROSS-PLATFORM REAL-TIME MONITORING UPDATE SCRIPT\n * Updates dashboard files with current metrics and progress\n */\n\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst { execSync } = require('node:child_process');\n\nfunction updateMonitoring() {\n  console.log('📈 UPDATING REAL-TIME MONITORING DASHBOARDS');\n  console.log('==================================================');\n\n  try {\n    // Get current metrics directly from error counting script\n    const errorCountOutput = execSync('node scripts/count-errors.cjs', {\n      encoding: 'utf8',\n      stdio: ['pipe', 'pipe', 'pipe']\n    });\n\n    // Extract just the number from the output (last line should be the error count)\n    const lines = errorCountOutput.trim().split('\\n');\n    const currentErrors = Number.parseInt(lines.at(-1)) || 0;\n\n    const baselineErrors = fs.existsSync('.baseline-errors.txt')\n      ? Number.parseInt(fs.readFileSync('.baseline-errors.txt', 'utf8').trim())\n      : currentErrors;\n    \n    const timestamp = new Date().toLocaleString();\n    const isoTimestamp = new Date().toISOString();\n\n    // Calculate progress metrics\n    const errorsFixed = baselineErrors - currentErrors;\n    const reductionPercentage = baselineErrors > 0 ? Math.round((errorsFixed * 100) / baselineErrors) : 0;\n\n    // Phase calculations\n    let phase1Progress = 0;\n    let phase2Progress = 0;\n    let phase3Progress = 0;\n    let overallProgress = 0;\n\n    if (currentErrors <= 200) {\n      phase1Progress = 100;\n      if (currentErrors <= 50) {\n        phase2Progress = 100;\n        if (currentErrors <= 10) {\n          phase3Progress = 100;\n          overallProgress = 100;\n        } else {\n          phase3Progress = Math.round(((50 - currentErrors) * 100) / 40);\n          overallProgress = 75;\n        }\n      } else {\n        phase2Progress = Math.round(((200 - currentErrors) * 100) / 150);\n        overallProgress = 50;\n      }\n    } else {\n      phase1Progress = Math.round(((1332 - currentErrors) * 100) / 1132);\n      overallProgress = 25;\n    }\n\n    console.log('Current metrics:');\n    console.log(`  Errors: ${currentErrors}`);\n    console.log(`  Baseline: ${baselineErrors}`);\n    console.log(`  Fixed: ${errorsFixed}`);\n    console.log(`  Reduction: ${reductionPercentage}%`);\n    console.log(`  Overall Progress: ${overallProgress}%`);\n\n    // Create progress bars\n    const createProgressBar = (progress) => {\n      const filled = Math.floor(progress / 10);\n      const empty = 10 - filled;\n      return '█'.repeat(filled) + '░'.repeat(empty);\n    };\n\n    const phase1Bar = createProgressBar(phase1Progress);\n    const phase2Bar = createProgressBar(phase2Progress);\n    const phase3Bar = createProgressBar(phase3Progress);\n    const overallBar = createProgressBar(overallProgress);\n\n    // Update Progress Tracker file\n    console.log('\\n📊 Updating Progress Tracker...');\n    updateFileContent('📊_PHASE_PROGRESS_TRACKER_📊.md', [\n      {\n        search: /OVERALL PROGRESS: .*$/m,\n        replace: `OVERALL PROGRESS: ${overallBar} ${overallProgress}% (Phase 1 Active)`\n      },\n      {\n        search: /ERROR REDUCTION:  .*$/m,\n        replace: `ERROR REDUCTION:  ${overallBar} ${reductionPercentage}% (${baselineErrors} → ${currentErrors} errors)`\n      },\n      {\n        search: /PHASE 1 PROGRESS: .*$/m,\n        replace: `PHASE 1 PROGRESS: ${phase1Bar} ${phase1Progress}% (2/5 tasks complete)`\n      }\n    ]);\n\n    // Update Success Metrics Dashboard\n    console.log('\\n📈 Updating Success Metrics Dashboard...');\n    updateFileContent('📈_SUCCESS_METRICS_DASHBOARD_📈.md', [\n      {\n        search: /ERROR COUNT: 1,332 → \\[UPDATE\\]/g,\n        replace: `ERROR COUNT: ${baselineErrors} → ${currentErrors}`\n      },\n      {\n        search: /REDUCTION: \\[CALCULATE\\]%/g,\n        replace: `REDUCTION: ${reductionPercentage}%`\n      },\n      {\n        search: /CURRENT:      \\[UPDATE_REAL_TIME\\] errors/g,\n        replace: `CURRENT:      ${currentErrors} errors`\n      },\n      {\n        search: /REMAINING:    \\[CALCULATE\\] errors/g,\n        replace: `REMAINING:    ${currentErrors > 200 ? currentErrors - 200 : 0} errors`\n      }\n    ]);\n\n    // Update Command Center\n    console.log('\\n🚨 Updating Command Center...');\n    updateFileContent('🚨_LINTING_REMEDIATION_COMMAND_CENTER_🚨.md', [\n      {\n        search: /CURRENT COUNT\\*\\*: .* errors/g,\n        replace: `CURRENT COUNT**: ${currentErrors} errors`\n      },\n      {\n        search: /LAST UPDATED\\*\\*: .*/g,\n        replace: `LAST UPDATED**: ${timestamp}`\n      },\n      {\n        search: /UPDATED BY\\*\\*: .*/g,\n        replace: `UPDATED BY**: Automated Monitoring`\n      }\n    ]);\n\n    // Add to error history\n    const historyEntry = `${isoTimestamp},${currentErrors},${reductionPercentage}\\n`;\n    fs.appendFileSync('.error-history.log', historyEntry);\n\n    // Generate comprehensive monitoring report\n    const monitoringReport = {\n      timestamp: isoTimestamp,\n      metrics: {\n        currentErrors,\n        baselineErrors,\n        errorsFixed,\n        reductionPercentage\n      },\n      phases: {\n        phase1: {\n          progress: phase1Progress,\n          complete: currentErrors <= 200,\n          target: 200\n        },\n        phase2: {\n          progress: phase2Progress,\n          complete: currentErrors <= 50,\n          target: 50\n        },\n        phase3: {\n          progress: phase3Progress,\n          complete: currentErrors <= 10,\n          target: 10\n        },\n        overall: {\n          progress: overallProgress\n        }\n      },\n      status: {\n        trend: errorsFixed > 0 ? 'improving' : (errorsFixed === 0 ? 'stable' : 'declining'),\n        onTrack: reductionPercentage >= 20\n      }\n    };\n\n    fs.writeFileSync('.monitoring-report.json', JSON.stringify(monitoringReport, null, 2));\n\n    console.log('\\n✅ All monitoring dashboards updated successfully');\n    console.log('📊 Monitoring report saved to .monitoring-report.json');\n\n    // Show summary\n    console.log('\\n📈 MONITORING SUMMARY');\n    console.log(`Current Status: ${currentErrors} errors (${reductionPercentage}% reduction)`);\n    console.log(`Phase Progress: P1:${phase1Progress}% P2:${phase2Progress}% P3:${phase3Progress}%`);\n    console.log(`Overall Progress: ${overallProgress}%`);\n\n  } catch (error) {\n    console.error('❌ Error updating monitoring:', error.message);\n    process.exit(1);\n  }\n}\n\nfunction updateFileContent(filename, replacements) {\n  try {\n    if (!fs.existsSync(filename)) {\n      console.log(`⚠️  File ${filename} not found, skipping...`);\n      return;\n    }\n\n    let content = fs.readFileSync(filename, 'utf8');\n    \n    for (const { search, replace } of replacements) {\n      content = content.replace(search, replace);\n    }\n    \n    fs.writeFileSync(filename, content);\n    console.log(`✅ Updated ${filename}`);\n  } catch (error) {\n    console.log(`⚠️  Failed to update ${filename}: ${error.message}`);\n  }\n}\n\n// Run the function\nupdateMonitoring();\n","usedDeprecatedRules":[]},{"filePath":"/app/scripts/verify-oauth-setup.js","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `verifyOauthSetup.js` or `VerifyOauthSetup.js`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'__dirname' is assigned a value but never used.","line":18,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":58,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":58,"endColumn":16,"suggestions":[{"fix":{"range":[1530,1587],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/prefer-top-level-await","severity":2,"message":"Prefer top-level await over using a promise chain.","line":285,"column":16,"nodeType":"Identifier","messageId":"promise","endLine":285,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Google OAuth Setup Verification Script\n *\n * This script verifies that Google OAuth is properly configured for the Food Truck Finder application.\n * It checks Supabase configuration, environment variables, and provides setup guidance.\n *\n * Usage: node scripts/verify-oauth-setup.js\n */\n\nimport https from 'node:https';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// ANSI color codes for console output\nconst colors = {\n  reset: '\\u001B[0m',\n  bright: '\\u001B[1m',\n  red: '\\u001B[31m',\n  green: '\\u001B[32m',\n  yellow: '\\u001B[33m',\n  blue: '\\u001B[34m',\n  magenta: '\\u001B[35m',\n  cyan: '\\u001B[36m'\n};\n\n// Configuration\nconst SUPABASE_PROJECT_ID = 'zkwliyjjkdnigizidlln';\nconst PRODUCTION_URL = 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app';\n\nclass OAuthVerifier {\n  constructor() {\n    this.errors = [];\n    this.warnings = [];\n    this.successes = [];\n    this.loadEnvironment();\n  }\n\n  loadEnvironment() {\n    const envPath = path.join(process.cwd(), '.env.local');\n    if (fs.existsSync(envPath)) {\n      const envContent = fs.readFileSync(envPath, 'utf8');\n      for (const line of envContent.split('\\n')) {\n        const [key, value] = line.split('=');\n        if (key && value) {\n          process.env[key] = value.replaceAll('\"', '');\n        }\n      }\n    }\n  }\n\n  log(message, color = 'reset') {\n    console.log(`${colors[color]}${message}${colors.reset}`);\n  }\n\n  logSection(title) {\n    this.log(`\\n${'='.repeat(60)}`, 'cyan');\n    this.log(`${title}`, 'cyan');\n    this.log(`${'='.repeat(60)}`, 'cyan');\n  }\n\n  logSuccess(message) {\n    this.successes.push(message);\n    this.log(`✅ ${message}`, 'green');\n  }\n\n  logWarning(message) {\n    this.warnings.push(message);\n    this.log(`⚠️  ${message}`, 'yellow');\n  }\n\n  logError(message) {\n    this.errors.push(message);\n    this.log(`❌ ${message}`, 'red');\n  }\n\n  logInfo(message) {\n    this.log(`ℹ️  ${message}`, 'blue');\n  }\n\n  async checkEnvironmentVariables() {\n    this.logSection('ENVIRONMENT VARIABLES CHECK');\n\n    const requiredVars = [\n      'NEXT_PUBLIC_SUPABASE_URL',\n      'NEXT_PUBLIC_SUPABASE_ANON_KEY',\n      'SUPABASE_SERVICE_ROLE_KEY'\n    ];\n\n    for (const varName of requiredVars) {\n      if (process.env[varName]) {\n        this.logSuccess(`${varName} is configured`);\n      } else {\n        this.logError(`${varName} is missing`);\n      }\n    }\n\n    // Check Supabase URL format\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    if (supabaseUrl && supabaseUrl.includes(SUPABASE_PROJECT_ID)) {\n      this.logSuccess('Supabase URL matches expected project ID');\n    } else if (supabaseUrl) {\n      this.logWarning('Supabase URL does not match expected project ID');\n    }\n  }\n\n  async checkSupabaseAuthSettings() {\n    this.logSection('SUPABASE AUTH CONFIGURATION CHECK');\n\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    if (!supabaseUrl) {\n      this.logError('Cannot check Supabase settings - URL not configured');\n      return;\n    }\n\n    try {\n      const settingsUrl = `${supabaseUrl}/auth/v1/settings`;\n      const response = await this.makeHttpRequest(settingsUrl);\n      const settings = JSON.parse(response);\n\n      if (settings.external && settings.external.google !== undefined) {\n        if (settings.external.google) {\n          this.logSuccess('Google OAuth provider is enabled in Supabase');\n        } else {\n          this.logError('Google OAuth provider is disabled in Supabase');\n          this.logInfo('Enable it in: Supabase Dashboard > Authentication > Providers > Google');\n        }\n      } else {\n        this.logWarning('Unable to determine Google OAuth status from Supabase settings');\n      }\n\n      // Check other relevant settings\n      if (settings.disable_signup === false) {\n        this.logSuccess('User signup is enabled');\n      } else {\n        this.logWarning('User signup is disabled');\n      }\n\n    } catch (error) {\n      this.logWarning(`Unable to fetch Supabase auth settings: ${error.message}`);\n      this.logInfo('This is normal if the endpoint requires authentication');\n    }\n  }\n\n  async checkRedirectUrls() {\n    this.logSection('REDIRECT URL CONFIGURATION CHECK');\n\n    const expectedUrls = [\n      `${PRODUCTION_URL}/auth/callback`,\n      'http://localhost:3000/auth/callback',\n      'http://localhost:3001/auth/callback'\n    ];\n\n    this.logInfo('Expected redirect URLs for Google Cloud Console:');\n    for (const url of expectedUrls) {\n      this.log(`  • ${url}`, 'blue');\n    }\n\n    this.logInfo('\\nExpected authorized origins:');\n    this.log(`  • ${PRODUCTION_URL}`, 'blue');\n    this.log(`  • http://localhost:3000`, 'blue');\n    this.log(`  • http://localhost:3001`, 'blue');\n  }\n\n  async checkOAuthFlow() {\n    this.logSection('OAUTH FLOW VERIFICATION');\n\n    // Check if login page exists\n    const loginPagePath = path.join(process.cwd(), 'app', 'login', 'page.tsx');\n    if (fs.existsSync(loginPagePath)) {\n      this.logSuccess('Login page exists');\n      \n      // Check if Google OAuth is implemented\n      const loginContent = fs.readFileSync(loginPagePath, 'utf8');\n      if (loginContent.includes('signInWithOAuth') && loginContent.includes('google')) {\n        this.logSuccess('Google OAuth login implementation found');\n      } else {\n        this.logError('Google OAuth login implementation not found');\n      }\n    } else {\n      this.logError('Login page not found');\n    }\n\n    // Check auth callback route\n    const callbackPath = path.join(process.cwd(), 'app', 'auth', 'callback', 'route.ts');\n    if (fs.existsSync(callbackPath)) {\n      this.logSuccess('Auth callback route exists');\n    } else {\n      this.logError('Auth callback route not found');\n    }\n  }\n\n  makeHttpRequest(url) {\n    return new Promise((resolve, reject) => {\n      const request = https.get(url, (response) => {\n        let data = '';\n        response.on('data', chunk => data += chunk);\n        response.on('end', () => {\n          if (response.statusCode >= 200 && response.statusCode < 300) {\n            resolve(data);\n          } else {\n            reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));\n          }\n        });\n      });\n\n      request.on('error', reject);\n      request.setTimeout(10_000, () => {\n        request.destroy();\n        reject(new Error('Request timeout'));\n      });\n    });\n  }\n\n  generateSetupInstructions() {\n    this.logSection('SETUP INSTRUCTIONS');\n\n    if (this.errors.length === 0) {\n      this.logSuccess('All automated checks passed! 🎉');\n      this.logInfo('Manual configuration steps:');\n    } else {\n      this.logError('Issues found that need to be resolved:');\n    }\n\n    this.log('\\n📋 MANUAL SETUP CHECKLIST:', 'bright');\n    this.log('1. Google Cloud Console Setup:', 'yellow');\n    this.log('   • Create OAuth 2.0 credentials', 'blue');\n    this.log('   • Configure authorized redirect URIs', 'blue');\n    this.log('   • Copy Client ID and Client Secret', 'blue');\n    \n    this.log('\\n2. Supabase Configuration:', 'yellow');\n    this.log('   • Go to Authentication > Providers > Google', 'blue');\n    this.log('   • Enable Google provider', 'blue');\n    this.log('   • Add Client ID and Client Secret', 'blue');\n    \n    this.log('\\n3. Testing:', 'yellow');\n    this.log('   • Test login flow in development', 'blue');\n    this.log('   • Test login flow in production', 'blue');\n    this.log('   • Verify admin role assignment', 'blue');\n\n    this.log('\\n📖 Detailed instructions: docs/GOOGLE_OAUTH_SETUP_GUIDE.md', 'cyan');\n  }\n\n  generateSummary() {\n    this.logSection('VERIFICATION SUMMARY');\n\n    this.log(`✅ Successes: ${this.successes.length}`, 'green');\n    this.log(`⚠️  Warnings: ${this.warnings.length}`, 'yellow');\n    this.log(`❌ Errors: ${this.errors.length}`, 'red');\n\n    if (this.errors.length === 0 && this.warnings.length === 0) {\n      this.log('\\n🎉 All checks passed! OAuth setup appears to be ready.', 'green');\n    } else if (this.errors.length === 0) {\n      this.log('\\n✅ No critical errors found. Review warnings above.', 'yellow');\n    } else {\n      this.log('\\n❌ Critical errors found. Please resolve them before proceeding.', 'red');\n    }\n\n    this.log('\\n🚀 Next steps:', 'cyan');\n    this.log('1. Complete manual configuration steps above', 'blue');\n    this.log('2. Run: npm run dev', 'blue');\n    this.log('3. Test OAuth flow at: http://localhost:3000/login', 'blue');\n  }\n\n  async run() {\n    this.log('🔍 Google OAuth Setup Verification', 'bright');\n    this.log('Food Truck Finder Application\\n', 'bright');\n\n    await this.checkEnvironmentVariables();\n    await this.checkSupabaseAuthSettings();\n    await this.checkRedirectUrls();\n    await this.checkOAuthFlow();\n    this.generateSetupInstructions();\n    this.generateSummary();\n  }\n}\n\n// Run the verification\nconst verifier = new OAuthVerifier();\nverifier.run().catch(error => {\n  console.error('Verification failed:', error);\n  process.exit(1);\n});\n\nexport default OAuthVerifier;\n","usedDeprecatedRules":[]}]