[
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\analytics\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\data-quality\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\events\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\pipeline\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\test-pipeline\\page.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 124,
        "column": 46,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 124,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [6101, 6105], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 132,
        "column": 54,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 132,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [6526, 6530], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 142,
        "column": 50,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 142,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [7127, 7131], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\admin\\users\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AuthError' is defined but never used.",
        "line": 16,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 25
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'AuthError'.",
        "line": 16,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 16,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [476, 487], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 53,
        "column": 5,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 53,
        "endColumn": 45
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from \"react\"\r\nimport { supabaseAdmin } from \"@/lib/supabase\"\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { UserPlus } from \"lucide-react\"\r\nimport Link from \"next/link\"\r\nimport { User, AuthError } from \"@supabase/supabase-js\"\r\n\r\ninterface UserDisplayData {\r\n  id: string;\r\n  email: string | undefined;\r\n  created_at: string;\r\n  last_sign_in_at: string | undefined;\r\n  role: string;\r\n}\r\n\r\nasync function getUsersData(): Promise<UserDisplayData[]> {\r\n  const { data, error } = await supabaseAdmin.auth.admin.listUsers()\r\n\r\n  if (error) {\r\n    console.error(\"Error fetching users:\", error)\r\n    return []\r\n  }\r\n\r\n  const users: User[] = data.users ?? [];\r\n\r\n  // Fetch profiles to get roles\r\n  const { data: profiles, error: profilesError } = await supabaseAdmin\r\n    .from('profiles')\r\n    .select('id, role')\r\n\r\n  if (profilesError) {\r\n    console.error(\"Error fetching profiles:\", profilesError)\r\n    // Continue with users data even if profiles fetch fails\r\n  }\r\n\r\n  const profilesMap = new Map(profiles?.map(p => [p.id, p.role]))\r\n\r\n  return users.map(user => ({\r\n    id: user.id,\r\n    email: user.email,\r\n    created_at: user.created_at,\r\n    last_sign_in_at: user.last_sign_in_at,\r\n    role: profilesMap.get(user.id) || 'user', // Default to 'user' if no profile role\r\n  })) as UserDisplayData[]\r\n}\r\n\r\nexport default async function UserManagementPage() {\r\n  const users = await getUsersData()\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h1 className=\"text-2xl font-bold\">User Management</h1>\r\n        <Button asChild>\r\n          <Link href=\"/admin/users/new\">\r\n            <UserPlus className=\"mr-2 h-4 w-4\" />\r\n            Add New User\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>System Users</CardTitle>\r\n          <CardDescription>\r\n            Manage user accounts and their roles. ({users.length} total)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Email</TableHead>\r\n                <TableHead>Role</TableHead>\r\n                <TableHead>Created At</TableHead>\r\n                <TableHead>Last Sign In</TableHead>\r\n                <TableHead className=\"text-right\">Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {users.map((user) => (\r\n                <TableRow key={user.id}>\r\n                  <TableCell className=\"font-medium\">{user.email}</TableCell>\r\n                  <TableCell>\r\n                    <Badge variant={user.role === \"admin\" ? \"default\" : \"secondary\"}>\r\n                      {user.role}\r\n                    </Badge>\r\n                  </TableCell>\r\n                  <TableCell>{new Date(user.created_at).toLocaleDateString()}</TableCell>\r\n                  <TableCell>{user.last_sign_in_at ? new Date(user.last_sign_in_at).toLocaleDateString() : \"N/A\"}</TableCell>\r\n                  <TableCell className=\"text-right\">\r\n                    <Button variant=\"outline\" size=\"sm\" asChild>\r\n                      <Link href={`/admin/users/${user.id}`}>Edit</Link>\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\auto-scrape-initiate\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\dashboard\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\gemini\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\pipeline\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe array destructuring of a tuple element with an `any` value.",
        "line": 125,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unsafeArrayPatternFromTuple",
        "endLine": 125,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createClient, type PostgrestSingleResponse, type PostgrestResponse } from \"@supabase/supabase-js\"\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseKey)\r\n\r\n// Server-side client with service role key for admin operations\r\nexport const supabaseAdmin = createClient(supabaseUrl, process.env.SUPABASE_SERVICE_ROLE_KEY!)\r\n\r\n// Database types\r\nexport interface FoodTruck {\r\n  id: string\r\n  name: string\r\n  description?: string\r\n  current_location: {\r\n    lat: number\r\n    lng: number\r\n    address: string\r\n    timestamp: string\r\n  }\r\n  scheduled_locations: Array<{\r\n    lat: number\r\n    lng: number\r\n    start_time: string\r\n    end_time: string\r\n  }>\r\n  operating_hours: OperatingHours\r\n  menu: Array<{\r\n    category: string\r\n    items: Array<{\r\n      name: string\r\n      description?: string\r\n      price: number\r\n      dietary_tags: string[]\r\n    }>\r\n  }>\r\n  contact_info: {\r\n    phone?: string\r\n    email?: string\r\n    website?: string\r\n  }\r\n  social_media: {\r\n    instagram?: string\r\n    facebook?: string\r\n    twitter?: string\r\n  }\r\n  data_quality_score: number\r\n  verification_status: \"pending\" | \"verified\" | \"flagged\"\r\n  source_urls: string[]\r\n  cuisine_type?: string[]; // Added\r\n  price_range?: string; // Added\r\n  created_at: string\r\n  updated_at: string\r\n  last_scraped_at?: string\r\n}\r\n\r\nexport interface ScrapingJob {\r\n  id: string\r\n  job_type: string\r\n  target_url?: string\r\n  target_handle?: string\r\n  platform?: string\r\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\"\r\n  priority: number\r\n  scheduled_at: string\r\n  started_at?: string\r\n  completed_at?: string;\r\n  data_collected?: Record<string, unknown>;\r\n  errors?: string[]\r\n  retry_count: number\r\n  max_retries: number\r\n  created_at: string\r\n}\r\n\r\nexport interface DataProcessingQueue {\r\n  id: string\r\n  truck_id: string\r\n  processing_type: string\r\n  raw_data: Record<string, unknown>\r\n  processed_data?: Record<string, unknown>\r\n  gemini_tokens_used: number\r\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\"\r\n  priority: number\r\n  created_at: string\r\n  processed_at?: string\r\n}\r\n\r\ninterface PipelineRequestBody {\r\n  target_url: string;\r\n  job_type?: string;\r\n  priority?: number;\r\n}\r\n\r\n// Food truck operations\r\nexport const FoodTruckService = {\r\n  async getAllTrucks(limit = 50, offset = 0): Promise<{ trucks: FoodTruck[] | null; total: number | null }> {\r\n    // Construct the query\r\n    const query = supabase\r\n      .from(\"food_trucks\")\r\n      .select(\"*\", { count: \"exact\" })\r\n      // Filter by address containing \", SC\" or \" South Carolina\" (case-insensitive)\r\n      // Assumes 'current_location' is a JSONB field with an 'address' key.\r\n      .or(\"current_location->>address.ilike.%, SC%,current_location->>address.ilike.% South Carolina%\")\r\n      .order(\"updated_at\", { ascending: false })\r\n      .range(offset, offset + limit - 1);\r\n\r\n    const { data, error, count } = await query as PostgrestResponse<FoodTruck>;\r\n\r\n    if (error) {\r\n      throw error;\r\n    }\r\n    return { trucks: data, total: count };\r\n  },\r\n\r\n  async getTruckById(id: string): Promise<FoodTruck | null> {\r\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase.from(\"food_trucks\").select(\"*\").eq(\"id\", id).single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n\r\n  async getTrucksByLocation(lat: number, lng: number, radius = 5): Promise<FoodTruck[] | null> {\r\n    // Using PostGIS functions for geospatial queries\r\n    const { data, error }: PostgrestResponse<FoodTruck> = await supabase.rpc(\"get_trucks_near_location\", {\r\n      user_lat: lat,\r\n      user_lng: lng,\r\n      radius_km: radius,\r\n    })\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n\r\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck | null> {\r\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin.from(\"food_trucks\").insert([truckData]).select().single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n\r\n  async updateTruck(id: string, updates: Partial<FoodTruck>): Promise<FoodTruck | null> {\r\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin.from(\"food_trucks\").update(updates).eq(\"id\", id).select().single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n\r\n  async updateDataQuality(id: string, score: number, _issues: string[]): Promise<FoodTruck | null> {\r\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n      .from(\"food_trucks\")\r\n      .update({\r\n        data_quality_score: score,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n};\r\n\r\n// --------- API ROUTE HANDLERS ---------\r\n\r\nimport { type NextRequest, NextResponse } from \"next/server\";\r\nimport { ScraperEngine, WebsiteScrapeData } from \"@/lib/ScraperEngine\"; // Using path alias\r\nimport { gemini } from \"@/lib/gemini\"; // Using path alias\r\nimport { EnhancedFoodTruckData, OperatingHours } from \"@/lib/types\"; // Import the new type\r\n// FoodTruckService, ScrapingJobService, etc. are already defined in this file.\r\n\r\nexport async function POST(request: NextRequest) {\r\n    try {\r\n        const body = await request.json() as PipelineRequestBody;\r\n        const { target_url, job_type = \"website_scrape\", priority = 1 } = body;\r\n\r\n        if (!target_url) {\r\n            return NextResponse.json({ error: \"target_url is required\" }, { status: 400 });\r\n        }\r\n\r\n        // Basic URL validation\r\n        try {\r\n            new URL(target_url);\r\n        } catch {\r\n            return NextResponse.json({ error: \"Invalid target_url format\" }, { status: 400 });\r\n        }\r\n\r\n        // 1. Create a new scraping job\r\n        const job: ScrapingJob | null = await ScrapingJobService.createJob({\r\n            target_url,\r\n            job_type,\r\n            status: \"running\", // Simplified: set to running immediately\r\n            priority,\r\n            scheduled_at: new Date().toISOString(),\r\n        });\r\n\r\n        if (!job) {\r\n            return NextResponse.json({ error: \"Failed to create scraping job\" }, { status: 500 });\r\n        }\r\n\r\n        try {\r\n            // 2. Initiate scraping\r\n            const scraper = new ScraperEngine();\r\n            // Using a generic selector to get the main content of the page for Gemini processing\r\n            const scrapeResult = await scraper.scrapeWebsite(target_url, { page_content: \"body\" });\r\n\r\n            if (!scrapeResult.success || !scrapeResult.data) {\r\n                await ScrapingJobService.updateJobStatus(job.id, \"failed\", { errors: [scrapeResult.error || \"Scraping failed\"] });\r\n                return NextResponse.json({ error: \"Scraping failed\", job_id: job.id, details: scrapeResult.error }, { status: 500 });\r\n            }\r\n\r\n            // 3. Process scraped content with Gemini\r\n            // Pass the scraped content (assuming it's somewhat structured or just raw text/HTML)\r\n            // The current `enhanceFoodTruckData` expects a JSON object as `rawData`.\r\n            // The scraper with `page_content: \"body\"` will return `data: { page_content: \"<html>...\" }`. This fits.\r\n            // Ensure scrapeResult.data is WebsiteScrapeData before passing to Gemini\r\n            const scrapedWebsiteData: WebsiteScrapeData = scrapeResult.data as WebsiteScrapeData; // Type assertion\r\n            const geminiResponse = await gemini.enhanceFoodTruckData({\r\n              scraped_data: scrapedWebsiteData, // Pass the output of scrapeWebsite\r\n              source_url: target_url\r\n            });\r\n\r\n            if (!geminiResponse.success || !geminiResponse.data) {\r\n                await ScrapingJobService.updateJobStatus(job.id, \"failed\", { errors: [geminiResponse.error || \"Gemini processing failed\"] });\r\n                return NextResponse.json({ error: \"Gemini processing failed\", job_id: job.id, details: geminiResponse.error }, { status: 500 });\r\n            }\r\n            const processedData: EnhancedFoodTruckData = geminiResponse.data;\r\n\r\n            // 4. Save processed data to FoodTrucks table\r\n            // Map EnhancedFoodTruckData to Partial<FoodTruck> with defensive defaults\r\n            const currentLocationData = {\r\n                address: \"Address not specified\", // EnhancedFoodTruckData does not contain current_location\r\n                lat: 0, // Default to 0.0 as location is not in EnhancedFoodTruckData\r\n                lng: 0, // Default to 0.0 as location is not in EnhancedFoodTruckData\r\n                timestamp: new Date().toISOString(),\r\n            };\r\n\r\n            const contactInfoData = {\r\n                phone: processedData.cleaned_contact?.phone || undefined,\r\n                email: processedData.cleaned_contact?.email || undefined,\r\n                website: processedData.cleaned_contact?.website || undefined,\r\n            };\r\n\r\n            const socialMediaData = {\r\n              instagram: undefined, // EnhancedFoodTruckData does not contain social_media\r\n              facebook: undefined, // EnhancedFoodTruckData does not contain social_media\r\n              twitter: undefined, // EnhancedFoodTruckData does not contain social_media\r\n            };\r\n            const truckPayload: Partial<FoodTruck> = {\r\n                name: processedData.name || \"Unknown Truck Name\",\r\n                description: processedData.description || \"No description available.\",\r\n                current_location: currentLocationData,\r\n                scheduled_locations: [], // Not in EnhancedFoodTruckData\r\n                operating_hours: { // Ensure all days are present for OperatingHours type\r\n                    monday: processedData.standardized_hours?.monday || { closed: true },\r\n                    tuesday: processedData.standardized_hours?.tuesday || { closed: true },\r\n                    wednesday: processedData.standardized_hours?.wednesday || { closed: true },\r\n                    thursday: processedData.standardized_hours?.thursday || { closed: true },\r\n                    friday: processedData.standardized_hours?.friday || { closed: true },\r\n                    saturday: processedData.standardized_hours?.saturday || { closed: true },\r\n                    sunday: processedData.standardized_hours?.sunday || { closed: true },\r\n                },\r\n                menu: processedData.enhanced_menu?.categories.map(category => ({ // Map to FoodTruck menu structure\r\n                    category: category.name,\r\n                    items: category.items.map(item => ({\r\n                        name: item.name,\r\n                        description: item.description || \"\", // Ensure description is always string\r\n                        price: typeof item.price === 'number' ? item.price : 0, // Ensure price is number\r\n                        dietary_tags: item.dietary_tags || []\r\n                    }))\r\n                })) || [],\r\n                contact_info: contactInfoData,\r\n                social_media: socialMediaData,\r\n\r\n                cuisine_type: processedData.cuisine_type || [],\r\n                price_range: processedData.price_range || undefined,\r\n                // payment_methods: Array.isArray(processedData.payment_methods) ? processedData.payment_methods : [],\r\n                // images: Array.isArray(processedData.images) ? processedData.images : [],\r\n                // dietary_tags: Array.isArray(processedData.dietary_tags) ? processedData.dietary_tags : [],\r\n\r\n                source_urls: [target_url],\r\n                data_quality_score: processedData.confidence_score || 0.5, // Use confidence_score from EnhancedFoodTruckData\r\n                verification_status: \"pending\",\r\n                last_scraped_at: new Date().toISOString(),\r\n            };\r\n\r\n            const savedTruck: FoodTruck | null = await FoodTruckService.createTruck(truckPayload);\r\n\r\n            if (!savedTruck) {\r\n                await ScrapingJobService.updateJobStatus(job.id, \"failed\", { errors: [\"Failed to save food truck data.\"] });\r\n                return NextResponse.json({ error: \"Failed to save food truck data\", job_id: job.id }, { status: 500 });\r\n            }\r\n\r\n            // 5. Update job status to \"completed\"\r\n            await ScrapingJobService.updateJobStatus(job.id, \"completed\", {\r\n              data_collected: {\r\n                truck_id: savedTruck.id,\r\n                truck_name: savedTruck.name\r\n              }\r\n            });\r\n\r\n            return NextResponse.json({\r\n              message: \"Pipeline triggered and processed successfully\",\r\n              job_id: job.id,\r\n              truck_id: savedTruck.id\r\n            });\r\n\r\n        } catch (pipelineError: unknown) {\r\n            console.error(`Pipeline error for job ${job.id} and URL ${target_url}:`, pipelineError);\r\n            const errorMessage = pipelineError instanceof Error ? pipelineError.message : \"Unknown pipeline error\";\r\n            await ScrapingJobService.updateJobStatus(job.id, \"failed\", { errors: [errorMessage] });\r\n            return NextResponse.json({ error: \"Pipeline processing error\", job_id: job.id, details: errorMessage }, { status: 500 });\r\n        }\r\n\r\n    } catch (error: unknown) {\r\n        console.error(\"Error in pipeline trigger endpoint:\", error);\r\n        const errorMessage = error instanceof Error ? error.message : \"An unexpected error occurred.\";\r\n        return NextResponse.json({ error: \"Failed to trigger pipeline\", details: errorMessage }, { status: 500 });\r\n    }\r\n}\r\n\r\n// Scraping job operations\r\nexport const ScrapingJobService = {\r\n  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob | null> {\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from(\"scraping_jobs\")\r\n      .insert([\r\n        {\r\n          ...jobData,\r\n          status: \"pending\",\r\n          retry_count: 0,\r\n          max_retries: 3,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()\r\n      .single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n\r\n  async getJobsByStatus(status: string): Promise<ScrapingJob[] | null> {\r\n    const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\r\n      .from(\"scraping_jobs\")\r\n      .select(\"*\")\r\n      .eq(\"status\", status)\r\n      .order(\"priority\", { ascending: false })\r\n      .order(\"scheduled_at\", { ascending: true })\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n\r\n  async updateJobStatus(id: string, status: string, updates: Partial<ScrapingJob> = {}): Promise<ScrapingJob | null> {\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from(\"scraping_jobs\")\r\n      .update({\r\n        status,\r\n        ...updates,\r\n        ...(status === \"running\" && { started_at: new Date().toISOString() }),\r\n        ...(status === \"completed\" && { completed_at: new Date().toISOString() }),\r\n      })\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n  async incrementRetryCount(id: string): Promise<ScrapingJob | null> {\r\n    // Get current retry count first\r\n    const { data: currentJob, error: fetchError }: PostgrestSingleResponse<{ retry_count: number }> = await supabaseAdmin\r\n      .from(\"scraping_jobs\")\r\n      .select(\"retry_count\")\r\n      .eq(\"id\", id)\r\n      .single()\r\n\r\n    if (fetchError) throw fetchError\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from(\"scraping_jobs\")\r\n      .update({\r\n        retry_count: (currentJob?.retry_count || 0) + 1,\r\n      })\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n};\r\n\r\n// Data processing queue operations\r\nexport const DataProcessingService = {\r\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue | null> {\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from(\"data_processing_queue\")\r\n      .insert([\r\n        {\r\n          ...queueData,\r\n          status: \"pending\",\r\n          gemini_tokens_used: 0,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()\r\n      .single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n\r\n  async getNextQueueItem(): Promise<DataProcessingQueue | null> {\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from(\"data_processing_queue\")\r\n      .select(\"*\")\r\n      .eq(\"status\", \"pending\")\r\n      .order(\"priority\", { ascending: false })\r\n      .order(\"created_at\", { ascending: true })\r\n      .limit(1)\r\n      .single()\r\n\r\n    if (error && error.code !== \"PGRST116\") throw error\r\n    return data\r\n  },\r\n\r\n  async updateQueueItem(id: string, updates: Partial<DataProcessingQueue>): Promise<DataProcessingQueue | null> {\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from(\"data_processing_queue\")\r\n      .update({\r\n        ...updates,\r\n        ...(updates.status === \"completed\" && { processed_at: new Date().toISOString() }),\r\n      })\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n};\r\n\r\n// API usage tracking\r\nexport const APIUsageService = {\r\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<{ id: string; service_name: string; usage_date: string; requests_count: number; tokens_used: number } | null> {\r\n    const today = new Date().toISOString().split(\"T\")[0]\r\n\r\n    // Try to get existing record first\r\n    const { data: existing, error: fetchError }: PostgrestSingleResponse<{ requests_count: number; tokens_used: number }> = await supabaseAdmin\r\n      .from(\"api_usage\")\r\n      .select(\"requests_count, tokens_used\")\r\n      .eq(\"service_name\", serviceName)\r\n      .eq(\"usage_date\", today)\r\n      .single()\r\n\r\n    if (fetchError && fetchError.code !== \"PGRST116\") throw fetchError\r\n\r\n    const { data, error }: PostgrestSingleResponse<{ id: string; service_name: string; usage_date: string; requests_count: number; tokens_used: number }> = await supabaseAdmin\r\n      .from(\"api_usage\")\r\n      .upsert(\r\n        {\r\n          service_name: serviceName,\r\n          usage_date: today,\r\n          requests_count: (existing?.requests_count || 0) + requests,\r\n          tokens_used: (existing?.tokens_used || 0) + tokens,\r\n        },\r\n        {\r\n          onConflict: \"service_name,usage_date\",\r\n        },\r\n      )\r\n      .select()\r\n      .single()\r\n\r\n    if (error) throw error\r\n    return data\r\n  },\r\n\r\n  async getTodayUsage(serviceName: string): Promise<{ id: string; service_name: string; usage_date: string; requests_count: number; tokens_used: number } | null> {\r\n    const today = new Date().toISOString().split(\"T\")[0]\r\n\r\n    const { data, error }: PostgrestSingleResponse<{ id: string; service_name: string; usage_date: string; requests_count: number; tokens_used: number }> = await supabase\r\n      .from(\"api_usage\")\r\n      .select(\"*\")\r\n      .eq(\"service_name\", serviceName)\r\n      .eq(\"usage_date\", today)\r\n      .single()\r\n\r\n    if (error && error.code !== \"PGRST116\") throw error\r\n    return data\r\n  },\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\scheduler\\route.ts",
    "messages": [
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 72,
        "column": 14,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 72,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "replace",
            "fix": { "range": [2049, 2053], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 159,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 159,
        "endColumn": 55
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 203,
        "column": 13,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 203,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 231,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 231,
        "endColumn": 54
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { type NextRequest, NextResponse } from \"next/server\"\r\n\r\n// Mock scheduler instance and tasks\r\ninterface SchedulerTask {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  intervalMinutes: number;\r\n  lastRun: string;\r\n  lastSuccess: string;\r\n  successCount: number;\r\n  errorCount: number;\r\n  nextRun: string | null;\r\n  lastError?: string;\r\n}\r\n\r\ninterface PostRequestBody {\r\n  action: \"start\" | \"stop\" | \"execute\";\r\n  taskId?: string;\r\n}\r\n\r\ninterface PutRequestBody {\r\n  taskId: string;\r\n  config: Partial<SchedulerTask>;\r\n}\r\n\r\nlet schedulerInstance: { started: string } | undefined;\r\nconst schedulerTasks: SchedulerTask[] = [\r\n  {\r\n    id: \"instagram_scrape\",\r\n    name: \"Instagram Data Scraping\",\r\n    enabled: true,\r\n    intervalMinutes: 120,\r\n    lastRun: new Date(Date.now() - 1_800_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 1_800_000).toISOString(),\r\n    successCount: 45,\r\n    errorCount: 3,\r\n    nextRun: new Date(Date.now() + 5_400_000).toISOString(),\r\n  },\r\n  {\r\n    id: \"website_crawl\",\r\n    name: \"Website Crawling\",\r\n    enabled: true,\r\n    intervalMinutes: 360,\r\n    lastRun: new Date(Date.now() - 7_200_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 7_200_000).toISOString(),\r\n    successCount: 23,\r\n    errorCount: 1,\r\n    nextRun: new Date(Date.now() + 14_400_000).toISOString(),\r\n  },\r\n  {\r\n    id: \"data_quality_check\",\r\n    name: \"Data Quality Assessment\",\r\n    enabled: true,\r\n    intervalMinutes: 720,\r\n    lastRun: new Date(Date.now() - 21_600_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 21_600_000).toISOString(),\r\n    successCount: 12,\r\n    errorCount: 0,\r\n    nextRun: new Date(Date.now() + 21_600_000).toISOString(),\r\n  },\r\n  {\r\n    id: \"gemini_processing\",\r\n    name: \"AI Data Processing\",\r\n    enabled: false,\r\n    intervalMinutes: 480,\r\n    lastRun: new Date(Date.now() - 28_800_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 28_800_000).toISOString(),\r\n    successCount: 8,\r\n    errorCount: 2,\r\n    lastError: \"Rate limit exceeded\",\r\n    nextRun: null,\r\n  },\r\n  {\r\n    id: \"location_update\",\r\n    name: \"Real-time Location Updates\",\r\n    enabled: true,\r\n    intervalMinutes: 30,\r\n    lastRun: new Date(Date.now() - 900_000).toISOString(),\r\n    lastSuccess: new Date(Date.now() - 900_000).toISOString(),\r\n    successCount: 156,\r\n    errorCount: 8,\r\n    nextRun: new Date(Date.now() + 900_000).toISOString(),\r\n  },\r\n];\r\n\r\nexport function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url);\r\n  const action = searchParams.get(\"action\");\r\n\r\n  try {\r\n    switch (action) {\r\n      case \"status\": {\r\n        return NextResponse.json({\r\n          isRunning: schedulerInstance !== undefined,\r\n          tasks: schedulerTasks,\r\n          summary: {\r\n            totalTasks: schedulerTasks.length,\r\n            enabledTasks: schedulerTasks.filter((t) => t.enabled).length,\r\n            runningTasks: schedulerTasks.filter((t) => t.enabled && t.nextRun).length,\r\n            totalSuccesses: schedulerTasks.reduce((acc, t) => acc + t.successCount, 0),\r\n            totalErrors: schedulerTasks.reduce((acc, t) => acc + t.errorCount, 0),\r\n          },\r\n        });\r\n      }\r\n\r\n      case \"logs\": {\r\n        // Return recent task execution logs\r\n        return NextResponse.json({\r\n          logs: [\r\n            {\r\n              timestamp: new Date(Date.now() - 300_000).toISOString(),\r\n              taskId: \"location_update\",\r\n              level: \"info\",\r\n              message: \"Successfully updated locations for 12 food trucks\",\r\n            },\r\n            {\r\n              timestamp: new Date(Date.now() - 900_000).toISOString(),\r\n              taskId: \"instagram_scrape\",\r\n              level: \"info\",\r\n              message: \"Scraped 3 Instagram accounts, found 8 new posts\",\r\n            },\r\n            {\r\n              timestamp: new Date(Date.now() - 1_800_000).toISOString(),\r\n              taskId: \"gemini_processing\",\r\n              level: \"error\",\r\n              message: \"Rate limit exceeded, skipping AI processing\",\r\n            },\r\n            {\r\n              timestamp: new Date(Date.now() - 3_600_000).toISOString(),\r\n              taskId: \"website_crawl\",\r\n              level: \"warning\",\r\n              message: \"Failed to crawl tacoparadise.com - site temporarily unavailable\",\r\n            },\r\n          ],\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json({\r\n          message: \"Task Scheduler API\",\r\n          endpoints: [\r\n            \"GET /api/scheduler?action=status - Get scheduler status\",\r\n            \"GET /api/scheduler?action=logs - Get execution logs\",\r\n            \"POST /api/scheduler - Start/stop scheduler or execute task\",\r\n            \"PUT /api/scheduler - Update task configuration\",\r\n          ],\r\n        });\r\n      }\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error(\"Scheduler API error:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: PostRequestBody = await request.json();\r\n    const { action, taskId } = body;\r\n\r\n    switch (action) {\r\n      case \"start\": {\r\n        if (schedulerInstance) {\r\n          return NextResponse.json({ error: \"Scheduler is already running\" }, { status: 409 });\r\n        }\r\n\r\n        schedulerInstance = { started: new Date().toISOString() };\r\n\r\n        return NextResponse.json({\r\n          message: \"Scheduler started successfully\",\r\n          status: \"running\",\r\n        });\r\n      }\r\n\r\n      case \"stop\": {\r\n        if (!schedulerInstance) {\r\n          return NextResponse.json({ error: \"Scheduler is not running\" }, { status: 409 });\r\n        }\r\n\r\n        schedulerInstance = undefined;\r\n\r\n        return NextResponse.json({\r\n          message: \"Scheduler stopped successfully\",\r\n          status: \"stopped\",\r\n        });\r\n      }\r\n\r\n      case \"execute\": {\r\n        if (!taskId) {\r\n          return NextResponse.json({ error: \"Task ID is required for execution\" }, { status: 400 });\r\n        }\r\n\r\n        const task = schedulerTasks.find((t) => t.id === taskId);\r\n        if (!task) {\r\n          return NextResponse.json({ error: \"Task not found\" }, { status: 404 });\r\n        }\r\n\r\n        // Simulate task execution\r\n        task.lastRun = new Date().toISOString();\r\n\r\n        // Simulate success/failure\r\n        if (Math.random() > 0.1) {\r\n          // 90% success rate\r\n          task.lastSuccess = task.lastRun;\r\n          task.successCount++;\r\n          task.lastError = undefined;\r\n        } else {\r\n          task.errorCount++;\r\n          task.lastError = \"Simulated execution error\";\r\n        }\r\n\r\n        return NextResponse.json({\r\n          message: `Task ${taskId} executed`,\r\n          task: task,\r\n        });\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json({ error: \"Invalid action\" }, { status: 400 });\r\n      }\r\n    }\r\n  } catch (error: unknown) {\r\n    console.error(\"Error in scheduler POST:\", error);\r\n    return NextResponse.json({ error: \"Failed to process request\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const body: PutRequestBody = await request.json();\r\n    const { taskId, config } = body;\r\n\r\n    if (!taskId) {\r\n      return NextResponse.json({ error: \"Task ID is required\" }, { status: 400 });\r\n    }\r\n\r\n    const taskIndex = schedulerTasks.findIndex((t) => t.id === taskId);\r\n    if (taskIndex === -1) {\r\n      return NextResponse.json({ error: \"Task not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Update task configuration\r\n    schedulerTasks[taskIndex] = {\r\n      ...schedulerTasks[taskIndex],\r\n      ...config,\r\n    };\r\n\r\n    // Update next run time if interval changed\r\n    if (config.intervalMinutes && schedulerTasks[taskIndex].enabled) {\r\n      const lastRun = new Date(schedulerTasks[taskIndex].lastRun || Date.now());\r\n      const nextRun = new Date(lastRun.getTime() + config.intervalMinutes * 60 * 1000);\r\n      schedulerTasks[taskIndex].nextRun = nextRun.toISOString();\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: \"Task configuration updated\",\r\n      task: schedulerTasks[taskIndex],\r\n    });\r\n  } catch (error: unknown) {\r\n    console.error(\"Error updating task configuration:\", error);\r\n    return NextResponse.json({ error: \"Failed to update task configuration\" }, { status: 500 });\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\scrape\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FoodTruck' is defined but never used.",
        "line": 2,
        "column": 53,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 62
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'FoodTruck'.",
        "line": 2,
        "column": 53,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 2,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [112, 123], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 8,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 8,
        "endColumn": 89
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 24,
        "column": 29,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 24,
        "endColumn": 33,
        "fix": { "range": [965, 966], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'processScrapedData' is defined but never used.",
        "line": 81,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "line": 126,
        "column": 5,
        "nodeType": "ExpressionStatement",
        "messageId": "floatingVoid",
        "endLine": 126,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "floatingFixVoid",
            "fix": { "range": [4134, 4134], "text": "void " },
            "desc": "Add void operator to ignore."
          },
          {
            "messageId": "floatingFixAwait",
            "fix": { "range": [4134, 4134], "text": "await " },
            "desc": "Add await operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 145,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 145,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4613, 4616], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4613, 4616], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise returned in function argument where a void return was expected.",
        "line": 212,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "voidReturnArgument",
        "endLine": 212,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import { type NextRequest, NextResponse } from \"next/server\"\r\nimport { ScrapingJobService, DataProcessingService, FoodTruck } from \"@/lib/supabase\" // firecrawl and gemini no longer needed here directly\r\nimport { processScrapingJob } from \"@/lib/pipelineProcessor\" // Import the moved function\r\nimport { gemini } from \"@/lib/gemini\"; // gemini is still needed for processDataQueue\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: { url: string; type?: string; priority?: number } = await request.json()\r\n    const { url, type = \"website\", priority = 5 } = body\r\n\r\n    if (!url) {\r\n      return NextResponse.json({ error: \"URL is required\" }, { status: 400 })\r\n    }\r\n\r\n    // Create scraping job\r\n    const job = await ScrapingJobService.createJob({\r\n      job_type: type,\r\n      target_url: url,\r\n      priority,\r\n      scheduled_at: new Date().toISOString(),\r\n    })\r\n\r\n    // Start scraping process\r\n    void processScrapingJob(job!.id)\r\n\r\n    return NextResponse.json({\r\n      message: \"Scraping job created\",\r\n      jobId: job.id,\r\n      status: \"pending\",\r\n    })\r\n  } catch (error) {\r\n    console.error(\"Error creating scraping job:\", error)\r\n    return NextResponse.json({ error: \"Failed to create scraping job\" }, { status: 500 })\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url)\r\n  const jobId = searchParams.get(\"jobId\")\r\n  const status = searchParams.get(\"status\")\r\n\r\n  try {\r\n    if (jobId) {\r\n      // Get specific job status\r\n      const jobs = await ScrapingJobService.getJobsByStatus(\"all\")\r\n      const job = jobs?.find((j) => j.id === jobId)\r\n\r\n      if (!job) {\r\n        return NextResponse.json({ error: \"Job not found\" }, { status: 404 })\r\n      }\r\n\r\n      return NextResponse.json({ job })\r\n    }\r\n\r\n    // Get jobs by status\r\n    const jobs = await ScrapingJobService.getJobsByStatus(status || \"pending\")\r\n\r\n    return NextResponse.json({\r\n      jobs,\r\n      summary: {\r\n        total: jobs.length,\r\n        pending: jobs.filter((j) => j.status === \"pending\").length,\r\n        running: jobs.filter((j) => j.status === \"running\").length,\r\n        completed: jobs.filter((j) => j.status === \"completed\").length,\r\n        failed: jobs.filter((j) => j.status === \"failed\").length,\r\n      },\r\n    })\r\n  } catch (error) {\r\n    console.error(\"Error fetching scraping jobs:\", error)\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\r\n  }\r\n}\r\n\r\n// processScrapingJob and createOrUpdateFoodTruck functions have been moved to lib/pipelineProcessor.ts\r\n\r\nimport { ExtractedHTMLData } from \"@/lib/ScraperEngine\"; // Import ExtractedHTMLData\r\nimport { DataProcessingQueue } from \"@/lib/supabase\"; // Import DataProcessingQueue\r\n\r\n// ... (rest of the file)\r\n\r\nasync function processScrapedData(jobId: string, scrapedData: ExtractedHTMLData) {\r\n  try {\r\n    // Create processing queue items for different data types\r\n    const processingTasks: Partial<DataProcessingQueue>[] = []\r\n\r\n    if (scrapedData.menu) {\r\n      processingTasks.push({\r\n        processing_type: \"menu_standardization\",\r\n        raw_data: { menu: scrapedData.menu },\r\n        priority: 5,\r\n      })\r\n    }\r\n\r\n    if (scrapedData.hours) {\r\n      processingTasks.push({\r\n        processing_type: \"hours_standardization\",\r\n        raw_data: { hours: scrapedData.hours },\r\n        priority: 5,\r\n      })\r\n    }\r\n\r\n    if (scrapedData.location) {\r\n      processingTasks.push({\r\n        processing_type: \"location_extraction\",\r\n        raw_data: { location: scrapedData.location },\r\n        priority: 8,\r\n      })\r\n    }\r\n\r\n    // Add enhancement task for all data\r\n    processingTasks.push({\r\n      processing_type: \"data_enhancement\",\r\n      raw_data: scrapedData as Record<string, unknown>, // Cast to Record<string, unknown>\r\n      priority: 3,\r\n    })\r\n\r\n    // Add all tasks to processing queue\r\n    for (const task of processingTasks) {\r\n      await DataProcessingService.addToQueue({\r\n        ...task,\r\n        truck_id: undefined, // Will be set when truck is created\r\n      })\r\n    }\r\n\r\n    // Start processing the queue\r\n    processDataQueue()\r\n  } catch (error) {\r\n    console.error(\"Error processing scraped data:\", error)\r\n  }\r\n}\r\n\r\nasync function processDataQueue() {\r\n  try {\r\n    const queueItem = await DataProcessingService.getNextQueueItem()\r\n\r\n    if (!queueItem) {\r\n      return // No items in queue\r\n    }\r\n\r\n    // Update status to processing\r\n    await DataProcessingService.updateQueueItem(queueItem.id, {\r\n      status: \"processing\",\r\n    })\r\n\r\n    let result: { success: boolean; data?: any; tokensUsed?: number; error?: string };\r\n    let tokensUsed = 0;\r\n\r\n    // Process based on type\r\n    switch (queueItem.processing_type) {\r\n      case \"menu_standardization\": {\r\n        result = await gemini.processMenuData(queueItem.raw_data.menu as string);\r\n        tokensUsed = result.tokensUsed || 0;\r\n        break;\r\n      }\r\n\r\n      case \"hours_standardization\": {\r\n        result = await gemini.standardizeOperatingHours(queueItem.raw_data.hours as string);\r\n        tokensUsed = result.tokensUsed || 0;\r\n        break;\r\n      }\r\n\r\n      case \"location_extraction\": {\r\n        result = await gemini.extractLocationFromText(queueItem.raw_data.location as string);\r\n        tokensUsed = result.tokensUsed || 0;\r\n        break;\r\n      }\r\n\r\n      case \"data_enhancement\": {\r\n        result = await gemini.enhanceFoodTruckData(queueItem.raw_data);\r\n        tokensUsed = result.tokensUsed || 0;\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        throw new Error(`Unknown processing type: ${queueItem.processing_type}`)\r\n      }\r\n    }\r\n\r\n    if (result.success) {\r\n      // Update queue item with processed data\r\n      await DataProcessingService.updateQueueItem(queueItem.id, {\r\n        status: \"completed\",\r\n        processed_data: result.data as Record<string, unknown> | undefined,\r\n        gemini_tokens_used: tokensUsed,\r\n      })\r\n\r\n      // If this is a data enhancement task, create or update the food truck\r\n      // This part of the logic might need reconsideration if createOrUpdateFoodTruck is no longer available here\r\n      // or if its signature/purpose has changed significantly by moving.\r\n      // For now, assuming this old queue logic might eventually call the new createOrUpdateFoodTruck\r\n      // or a similar mechanism if it processes data that way.\r\n      // However, the direct call below is problematic as createOrUpdateFoodTruck was moved.\r\n      // This specific call `await createOrUpdateFoodTruck(result.data, queueItem.raw_data)`\r\n      // would fail as createOrUpdateFoodTruck expects (jobId, extractedTruckData, sourceUrl).\r\n      // This indicates that processDataQueue and its call to createOrUpdateFoodTruck\r\n      // are part of the older logic that needs to be fully deprecated or refactored.\r\n      // For this refactoring step, we are focusing on moving the functions and updating direct usages.\r\n      // The functionality of processDataQueue is preserved as is, but this call will likely break at runtime.\r\n      if (queueItem.processing_type === \"data_enhancement\" && result.data) {\r\n        // await createOrUpdateFoodTruck(result.data, queueItem.raw_data) // This line is problematic\r\n        console.warn(\"Call to createOrUpdateFoodTruck from processDataQueue needs review after refactoring.\")\r\n      }\r\n    } else {\r\n      // Mark as failed\r\n      await DataProcessingService.updateQueueItem(queueItem.id, {\r\n        status: \"failed\",\r\n        gemini_tokens_used: tokensUsed,\r\n      })\r\n    }\r\n\r\n    // Continue processing queue\r\n    setTimeout(processDataQueue, 1000)\r\n  } catch (error) {\r\n    console.error(\"Error processing data queue:\", error)\r\n  }\r\n}\r\n\r\n// End of file\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\scraper\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 117,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 117,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'priority' is assigned a value but never used.",
        "line": 118,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 32
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'priority' variable.",
        "line": 118,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 118,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 160,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 160,
        "endColumn": 93
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { type NextRequest, NextResponse } from \"next/server\"\r\n\r\n// Scraper configuration and status management\r\ninterface ScraperConfig {\r\n  id: string\r\n  name: string\r\n  url: string\r\n  type: \"website\" | \"social\" | \"api\"\r\n  frequency: number // minutes\r\n  lastRun: string\r\n  status: \"running\" | \"idle\" | \"error\" | \"rate_limited\"\r\n  successRate: number\r\n}\r\n\r\ninterface ScrapingJob {\r\n  id: string\r\n  scraperId: string\r\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\"\r\n  startTime: string\r\n  endTime?: string\r\n  dataCollected: number\r\n  errors: string[]\r\n}\r\n\r\n// Mock data for demonstration\r\nconst scraperConfigs: ScraperConfig[] = [\r\n  {\r\n    id: \"instagram_scraper\",\r\n    name: \"Instagram Food Truck Scraper\",\r\n    url: \"https://instagram.com\",\r\n    type: \"social\",\r\n    frequency: 120, // 2 hours\r\n    lastRun: new Date(Date.now() - 300_000).toISOString(), // 5 minutes ago\r\n    status: \"running\",\r\n    successRate: 94.2,\r\n  },\r\n  {\r\n    id: \"website_crawler\",\r\n    name: \"Food Truck Website Crawler\",\r\n    url: \"various\",\r\n    type: \"website\",\r\n    frequency: 360, // 6 hours\r\n    lastRun: new Date(Date.now() - 1_800_000).toISOString(), // 30 minutes ago\r\n    status: \"idle\",\r\n    successRate: 87.5,\r\n  },\r\n  {\r\n    id: \"yelp_api\",\r\n    name: \"Yelp Business API\",\r\n    url: \"https://api.yelp.com\",\r\n    type: \"api\",\r\n    frequency: 720, // 12 hours\r\n    lastRun: new Date(Date.now() - 2_700_000).toISOString(), // 45 minutes ago\r\n    status: \"rate_limited\",\r\n    successRate: 96.8,\r\n  },\r\n]\r\n\r\nconst activeJobs: ScrapingJob[] = [\r\n  {\r\n    id: \"job_001\",\r\n    scraperId: \"instagram_scraper\",\r\n    status: \"running\",\r\n    startTime: new Date(Date.now() - 180_000).toISOString(), // 3 minutes ago\r\n    dataCollected: 73,\r\n    errors: [],\r\n  },\r\n]\r\n\r\nexport function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url)\r\n  const action = searchParams.get(\"action\")\r\n\r\n  try {\r\n    switch (action) {\r\n      case \"status\": {\r\n        return NextResponse.json({\r\n          scrapers: scraperConfigs,\r\n          activeJobs: activeJobs,\r\n          summary: {\r\n            totalScrapers: scraperConfigs.length,\r\n            activeJobs: activeJobs.filter((job) => job.status === \"running\").length,\r\n            averageSuccessRate: scraperConfigs.reduce((acc, s) => acc + s.successRate, 0) / scraperConfigs.length,\r\n          },\r\n        })\r\n      }\r\n\r\n      case \"jobs\": {\r\n        return NextResponse.json({\r\n          jobs: activeJobs,\r\n          pending: activeJobs.filter((job) => job.status === \"pending\").length,\r\n          running: activeJobs.filter((job) => job.status === \"running\").length,\r\n          completed: activeJobs.filter((job) => job.status === \"completed\").length,\r\n        })\r\n      }\r\n\r\n      default: {\r\n        return NextResponse.json({\r\n          message: \"Food Truck Scraper API\",\r\n          endpoints: [\r\n            \"GET /api/scraper?action=status - Get scraper status\",\r\n            \"GET /api/scraper?action=jobs - Get job status\",\r\n            \"POST /api/scraper - Start new scraping job\",\r\n            \"PUT /api/scraper - Update scraper configuration\",\r\n          ],\r\n        })\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Scraper API error:\", error)\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: { scraperId: string; priority?: string } = await request.json()\r\n    const { scraperId, priority = \"normal\" } = body\r\n\r\n    // Validate scraper exists\r\n    const scraper = scraperConfigs.find((s) => s.id === scraperId)\r\n    if (!scraper) {\r\n      return NextResponse.json({ error: \"Scraper not found\" }, { status: 404 })\r\n    }\r\n\r\n    // Check if scraper is available\r\n    if (scraper.status === \"running\") {\r\n      return NextResponse.json({ error: \"Scraper is already running\" }, { status: 409 })\r\n    }\r\n\r\n    // Create new job\r\n    const newJob: ScrapingJob = {\r\n      id: `job_${Date.now()}`,\r\n      scraperId: scraperId,\r\n      status: \"pending\",\r\n      startTime: new Date().toISOString(),\r\n      dataCollected: 0,\r\n      errors: [],\r\n    }\r\n\r\n    // Add to active jobs (in real implementation, this would be queued)\r\n    activeJobs.push(newJob)\r\n\r\n    // Update scraper status\r\n    scraper.status = \"running\"\r\n    scraper.lastRun = new Date().toISOString()\r\n\r\n    return NextResponse.json({\r\n      message: \"Scraping job started\",\r\n      job: newJob,\r\n    })\r\n  } catch (error) {\r\n    console.error(\"Error starting scraping job:\", error)\r\n    return NextResponse.json({ error: \"Failed to start scraping job\" }, { status: 500 })\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const body: { scraperId: string; config: Partial<ScraperConfig> } = await request.json()\r\n    const { scraperId, config } = body\r\n\r\n    // Find and update scraper configuration\r\n    const scraperIndex = scraperConfigs.findIndex((s) => s.id === scraperId)\r\n    if (scraperIndex === -1) {\r\n      return NextResponse.json({ error: \"Scraper not found\" }, { status: 404 })\r\n    }\r\n\r\n    // Update configuration\r\n    scraperConfigs[scraperIndex] = {\r\n      ...scraperConfigs[scraperIndex],\r\n      ...config,\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: \"Scraper configuration updated\",\r\n      scraper: scraperConfigs[scraperIndex],\r\n    })\r\n  } catch (error) {\r\n    console.error(\"Error updating scraper configuration:\", error)\r\n    return NextResponse.json({ error: \"Failed to update scraper configuration\" }, { status: 500 })\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\search\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\test-integration\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 8,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 8,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 79,
        "column": 17,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 79,
        "endColumn": 27,
        "fix": { "range": [2833, 2834], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 102,
        "column": 25,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 102,
        "endColumn": 35,
        "fix": { "range": [3588, 3589], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 103,
        "column": 23,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 103,
        "endColumn": 31,
        "fix": { "range": [3624, 3625], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 104,
        "column": 29,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 104,
        "endColumn": 39,
        "fix": { "range": [3668, 3669], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 105,
        "column": 30,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 105,
        "endColumn": 43,
        "fix": { "range": [3716, 3717], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 111,
        "column": 23,
        "nodeType": "TSNonNullExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 111,
        "endColumn": 36,
        "fix": { "range": [3872, 3873], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 6,
    "fixableWarningCount": 0,
    "source": "import { type NextRequest, NextResponse } from \"next/server\"\r\nimport { firecrawl } from \"@/lib/firecrawl\"\r\nimport { gemini } from \"@/lib/gemini\"\r\nimport { FoodTruckService, ScrapingJobService, DataProcessingService } from \"@/lib/supabase\"\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: { testUrl?: string } = await request.json()\r\n    const { testUrl = \"https://example-food-truck.com\" } = body\r\n\r\n    console.info(\"Starting integration test...\")\r\n\r\n    // Step 1: Test Firecrawl scraping\r\n    console.info(\"Testing Firecrawl scraping...\")\r\n    const scrapeResult = await firecrawl.scrapeUrl(testUrl, {\r\n      formats: [\"markdown\"],\r\n      onlyMainContent: true,\r\n    })\r\n\r\n    if (!scrapeResult.success) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: \"Firecrawl test failed\",\r\n        details: scrapeResult.error,\r\n      })\r\n    }    // Step 2: Test Gemini processing\r\n    console.info(\"Testing Gemini processing...\")\r\n    const testMenuText = \"Burgers: Classic Burger $12.99, Veggie Burger $11.99. Sides: Fries $4.99, Onion Rings $5.99\"\r\n\r\n    const geminiResult = await gemini.processMenuData(testMenuText)\r\n\r\n    if (!geminiResult.success) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: \"Gemini test failed\",\r\n        details: geminiResult.error,\r\n      })\r\n    }    // Step 3: Test Supabase operations\r\n    console.info(\"Testing Supabase operations...\")\r\n\r\n    // Create a test food truck\r\n    const testTruck = await FoodTruckService.createTruck({\r\n      name: \"Test Food Truck\",\r\n      description: \"Integration test truck\",\r\n      current_location: {\r\n        lat: 37.7749,\r\n        lng: -122.4194,\r\n        address: \"San Francisco, CA\",\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n      scheduled_locations: [],\r\n      operating_hours: {\r\n        monday: { closed: true },\r\n        tuesday: { closed: true },\r\n        wednesday: { closed: true },\r\n        thursday: { closed: true },\r\n        friday: { closed: true },\r\n        saturday: { closed: true },\r\n        sunday: { closed: true },\r\n      },\r\n      menu: geminiResult.data || [],\r\n      contact_info: { phone: \"+1-555-TEST\", email: undefined, website: undefined },\r\n      social_media: { instagram: undefined, facebook: undefined, twitter: undefined, tiktok: undefined, yelp: undefined },\r\n      source_urls: [testUrl],\r\n      data_quality_score: 0.8,\r\n      verification_status: \"pending\",\r\n    })\r\n\r\n    // Create a test scraping job\r\n    const testJob = await ScrapingJobService.createJob({\r\n      job_type: \"integration_test\",\r\n      target_url: testUrl,\r\n      priority: 10,\r\n      scheduled_at: new Date().toISOString(),\r\n    })\r\n\r\n    // Add to processing queue\r\n    const queueItem = await DataProcessingService.addToQueue({\r\n      truck_id: testTruck!.id,\r\n      processing_type: \"integration_test\",\r\n      raw_data: { test: true },\r\n      priority: 10,\r\n    })\r\n\r\n    // Step 4: Test geospatial query\r\n    const nearbyTrucks = await FoodTruckService.getTrucksByLocation(37.7749, -122.4194, 10)\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: \"Integration test completed successfully\",\r\n      results: {\r\n        firecrawl: {\r\n          success: scrapeResult.success,\r\n          dataLength: scrapeResult.data?.markdown?.length || 0,\r\n        },\r\n        gemini: {\r\n          success: geminiResult.success,\r\n          tokensUsed: geminiResult.tokensUsed,\r\n          categoriesFound: geminiResult.data?.length || 0,\r\n        },\r\n        supabase: {\r\n          truckCreated: testTruck!.id,\r\n          jobCreated: testJob!.id,\r\n          queueItemCreated: queueItem!.id,\r\n          nearbyTrucksFound: nearbyTrucks!.length,\r\n        },\r\n      },\r\n      testData: {\r\n        truck: testTruck,\r\n        processedMenu: geminiResult.data,\r\n        nearbyTrucks: nearbyTrucks!.slice(0, 3),\r\n      },\r\n    })\r\n  } catch (error) {\r\n    console.error(\"Integration test failed:\", error)\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: \"Integration test failed\",\r\n      details: error instanceof Error ? error.message : \"Unknown error\",\r\n    })\r\n  }\r\n}\r\n\r\nexport function GET() {\r\n  return NextResponse.json({\r\n    message: \"Food Truck Integration Test API\",\r\n    description: \"Tests the complete integration of Supabase, Firecrawl, and Gemini\",\r\n    usage: \"POST /api/test-integration with optional { testUrl: 'https://example.com' }\",\r\n  })\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\test-pipeline-run\\route.ts",
    "messages": [
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"firecrawlResult\".",
        "line": 71,
        "column": 7,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 71,
        "endColumn": 35
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"geminiResult\".",
        "line": 119,
        "column": 7,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 119,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 198,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 198,
        "endColumn": 94
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextResponse, NextRequest } from 'next/server';\r\nimport { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { FoodTruckService } from '@/lib/supabase';\r\nimport {\r\n  ExtractedFoodTruckDetails,\r\n  FoodTruckSchema,\r\n  FirecrawlOutputData,\r\n  GeminiResponse,\r\n  StageResult,\r\n  MenuCategory,\r\n  MenuItem,\r\n} from '@/lib/types';\r\n\r\n// Helper function to simulate parts of createOrUpdateFoodTruck for dry runs or direct mapping display\r\n// This is a simplified version for testing; actual createOrUpdateFoodTruck handles job IDs etc.\r\nfunction mapExtractedDataToTruckSchema(\r\n  extractedData: ExtractedFoodTruckDetails,\r\n  sourceUrl: string,\r\n  isDryRun: boolean,\r\n): FoodTruckSchema {\r\n  if (!extractedData || typeof extractedData !== 'object') {\r\n    throw new Error('Invalid extractedData for mapping.');\r\n  }\r\n\r\n  const name = extractedData.name || 'Unknown Test Truck';\r\n  const locationData = extractedData.current_location || {};\r\n  const fullAddress = [locationData.address, locationData.city, locationData.state, locationData.zip_code]\r\n    .filter(Boolean)\r\n    .join(', ');\r\n\r\n  const truckData: FoodTruckSchema = {\r\n    name: name,\r\n    description: extractedData.description ?? undefined,\r\n    current_location: {\r\n      lat: locationData.lat || 0,\r\n      lng: locationData.lng || 0,\r\n    address: fullAddress || (locationData.raw_text ?? undefined),\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n    scheduled_locations: extractedData.scheduled_locations || undefined,\r\n    operating_hours: extractedData.operating_hours || undefined,\r\n    menu: (extractedData.menu || []).map((category: MenuCategory) => ({\r\n      name: category.name || 'Uncategorized',\r\n      items: (category.items || []).map((item: MenuItem) => ({\r\n        name: item.name || 'Unknown Item',\r\n        description: item.description ?? undefined,\r\n        price: typeof item.price === 'number' || typeof item.price === 'string' ? item.price : undefined,\r\n        dietary_tags: item.dietary_tags || [],\r\n      })),\r\n    })),\r\n    contact_info: extractedData.contact_info || undefined,\r\n    social_media: extractedData.social_media || undefined,\r\n    cuisine_type: extractedData.cuisine_type || [],\r\n    price_range: extractedData.price_range || undefined,\r\n    specialties: extractedData.specialties || [],\r\n    data_quality_score: isDryRun ? 0.5 : 0.6, // Differentiate test/dry run\r\n    verification_status: 'pending',\r\n    source_urls: [sourceUrl].filter(Boolean),\r\n    last_scraped_at: new Date().toISOString(),\r\n    ...(isDryRun && { test_run_flag: true }), // Add a flag for actual test saves if needed\r\n  };\r\n  return truckData;\r\n}\r\n\r\nasync function handleFirecrawlStage(\r\n  url: string,\r\n  rawText: string | undefined,\r\n  logs: string[],\r\n): Promise<{ firecrawlResult: StageResult; contentToProcess: string | undefined; sourceUrlForProcessing: string }> {\r\n  let firecrawlResult: StageResult = { status: 'Skipped' };\r\n  let contentToProcess: string | undefined;\r\n  let sourceUrlForProcessing: string = url || 'raw_text_input';\r\n\r\n  if (url && !rawText) {\r\n    logs.push(`Starting Firecrawl scrape for URL: ${url}`);\r\n    try {\r\n      const fcOutput: GeminiResponse<FirecrawlOutputData> = await firecrawl.scrapeFoodTruckWebsite(url);\r\n      if (fcOutput.success && fcOutput.data?.markdown) {\r\n        contentToProcess = fcOutput.data.markdown;\r\n        sourceUrlForProcessing = fcOutput.data.source_url || url;\r\n        firecrawlResult = {\r\n          status: 'Success',\r\n          rawContent: fcOutput.data.markdown,\r\n          metadata: { name: fcOutput.data.name, source_url: fcOutput.data.source_url },\r\n          details: `Markdown length: ${fcOutput.data.markdown.length}`,\r\n        };\r\n        logs.push('Firecrawl scrape successful.');\r\n      } else {\r\n        throw new Error(fcOutput.error || 'Firecrawl failed to return markdown.');\r\n      }\r\n    } catch (error: unknown) {\r\n      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred during Firecrawl scrape.';\r\n      logs.push(`Firecrawl error: ${errorMessage}`);\r\n      firecrawlResult = { status: 'Error', error: errorMessage };\r\n    }\r\n  } else if (rawText) {\r\n    logs.push('Using raw text input for processing.');\r\n    contentToProcess = rawText;\r\n    firecrawlResult = { status: 'Skipped (Raw Text Provided)', details: `Raw text length: ${rawText.length}` };\r\n  } else {\r\n    logs.push('No URL or raw text provided.');\r\n    throw new Error('Either a URL or raw text must be provided for testing.');\r\n  }\r\n\r\n  if (!contentToProcess) {\r\n    logs.push('Content to process is empty after Firecrawl/raw text stage.');\r\n    throw new Error('Content to process is empty.');\r\n  }\r\n\r\n  return { firecrawlResult, contentToProcess, sourceUrlForProcessing };\r\n}\r\n\r\nasync function handleGeminiStage(\r\n  contentToProcess: string,\r\n  sourceUrlForProcessing: string,\r\n  logs: string[],\r\n): Promise<{ geminiResult: StageResult; extractedData: ExtractedFoodTruckDetails | undefined }> {\r\n  let geminiResult: StageResult = { status: 'Skipped' };\r\n  let extractedData: ExtractedFoodTruckDetails | undefined;\r\n\r\n  logs.push('Starting Gemini processing.');\r\n  try {\r\n    const geminiOutput: GeminiResponse<ExtractedFoodTruckDetails> = await gemini.extractFoodTruckDetailsFromMarkdown(\r\n      contentToProcess,\r\n      sourceUrlForProcessing,\r\n    );\r\n    if (geminiOutput.success && geminiOutput.data) {\r\n      extractedData = geminiOutput.data;\r\n      geminiResult = {\r\n        status: 'Success',\r\n        data: geminiOutput.data,\r\n        tokensUsed: geminiOutput.tokensUsed,\r\n        prompt: geminiOutput.promptSent,\r\n        details: 'Gemini extraction successful.',\r\n      };\r\n      logs.push('Gemini processing successful.');\r\n    } else {\r\n      throw new Error(geminiOutput.error || 'Gemini processing failed to return data.');\r\n    }\r\n  } catch (error: unknown) {\r\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred during Gemini processing.';\r\n    logs.push(`Gemini error: ${errorMessage}`);\r\n    geminiResult = { status: 'Error', error: errorMessage };\r\n  }\r\n  return { geminiResult, extractedData };\r\n}\r\n\r\nasync function handleSupabaseStage(\r\n  extractedData: ExtractedFoodTruckDetails,\r\n  sourceUrlForProcessing: string,\r\n  isDryRun: boolean,\r\n  logs: string[],\r\n): Promise<StageResult> {\r\n  let supabaseResult: StageResult = { status: 'Skipped' };\r\n\r\n  logs.push('Preparing for Supabase interaction.');\r\n  try {\r\n    const truckDataToSave = mapExtractedDataToTruckSchema(extractedData, sourceUrlForProcessing, isDryRun);\r\n    supabaseResult = { status: 'Prepared', preparedData: truckDataToSave };\r\n\r\n    if (isDryRun) {\r\n      supabaseResult.status = 'Success (Dry Run)';\r\n      supabaseResult.details = 'Dry Run: Data was prepared but not saved.';\r\n      logs.push('Supabase interaction skipped (Dry Run).');\r\n    } else {\r\n      logs.push('Attempting to save to Supabase (Dry Run is FALSE).');\r\n      const createdTruck = await FoodTruckService.createTruck(truckDataToSave);\r\n      if (!createdTruck) {\r\n        throw new Error('Failed to create truck in Supabase.');\r\n      }\r\n      supabaseResult = {\r\n        status: 'Success (Saved)',\r\n        preparedData: truckDataToSave,\r\n        recordId: createdTruck.id,\r\n        details: `Truck data saved with ID: ${createdTruck.id}`,\r\n      };\r\n      logs.push(`Data saved to Supabase. Record ID: ${createdTruck.id}`);\r\n    }\r\n  } catch (error: unknown) {\r\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred during Supabase interaction.';\r\n    logs.push(`Supabase interaction error: ${errorMessage}`);\r\n    supabaseResult = { ...supabaseResult, status: 'Error', error: errorMessage };\r\n  }\r\n  return supabaseResult;\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  const logs: string[] = [];\r\n  logs.push('Test pipeline run started.');\r\n\r\n  let firecrawlResult: StageResult = { status: 'Incomplete' };\r\n  let geminiResult: StageResult = { status: 'Incomplete' };\r\n  let supabaseResult: StageResult = { status: 'Incomplete' };\r\n  let overallStatus = 'Incomplete';\r\n\r\n  try {\r\n    const body: { url?: string; rawText?: string; isDryRun?: boolean } = await request.json();\r\n    const { url, rawText, isDryRun = true } = body;\r\n    logs.push(`Request body: ${JSON.stringify(body)}`);\r\n\r\n    const firecrawlStageOutput = await handleFirecrawlStage(url || '', rawText, logs);\r\n    firecrawlResult = firecrawlStageOutput.firecrawlResult;\r\n    const { contentToProcess, sourceUrlForProcessing } = firecrawlStageOutput;\r\n\r\n    if (firecrawlResult.status === 'Error') {\r\n      overallStatus = 'Error';\r\n      return NextResponse.json({ results: { firecrawl: firecrawlResult, logs, overallStatus } }, { status: 200 });\r\n    }\r\n\r\n    const geminiStageOutput = await handleGeminiStage(contentToProcess!, sourceUrlForProcessing, logs);\r\n    geminiResult = geminiStageOutput.geminiResult;\r\n    const { extractedData } = geminiStageOutput;\r\n\r\n    if (geminiResult.status === 'Error' || !extractedData) {\r\n      overallStatus = 'Error';\r\n      return NextResponse.json({ results: { firecrawl: firecrawlResult, gemini: geminiResult, logs, overallStatus } }, { status: 200 });\r\n    }\r\n\r\n    supabaseResult = await handleSupabaseStage(extractedData, sourceUrlForProcessing, isDryRun, logs);\r\n\r\n    if (supabaseResult.status === 'Error') {\r\n      overallStatus = 'Error';\r\n      return NextResponse.json({ results: { firecrawl: firecrawlResult, gemini: geminiResult, supabase: supabaseResult, logs, overallStatus } }, { status: 200 });\r\n    }\r\n\r\n    overallStatus = 'Success';\r\n    logs.push('Test pipeline run completed successfully.');\r\n    return NextResponse.json({ results: { firecrawl: firecrawlResult, gemini: geminiResult, supabase: supabaseResult, logs, overallStatus } });\r\n  } catch (error: unknown) {\r\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred during overall test pipeline run.';\r\n    logs.push(`Overall test pipeline error: ${errorMessage}`);\r\n    return NextResponse.json(\r\n      { message: 'Test pipeline run failed.', error: errorMessage, results: { firecrawl: firecrawlResult, gemini: geminiResult, supabase: supabaseResult, logs, overallStatus: 'Error' } },\r\n      { status: 200 },\r\n    );\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\[id]\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 21,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 21,
        "endColumn": 58
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { type NextRequest, NextResponse } from \"next/server\"\r\nimport { FoodTruckService, FoodTruck } from \"@/lib/supabase\"\r\n\r\nexport async function GET(request: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    const truck = await FoodTruckService.getTruckById(params.id)\r\n\r\n    if (!truck) {\r\n      return NextResponse.json({ error: \"Food truck not found\" }, { status: 404 })\r\n    }\r\n\r\n    return NextResponse.json({ truck })\r\n  } catch (error) {\r\n    console.error(\"Error fetching truck:\", error)\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    const body: Partial<FoodTruck> = await request.json()\r\n    const updatedTruck = await FoodTruckService.updateTruck(params.id, body)\r\n\r\n    return NextResponse.json({\r\n      message: \"Food truck updated successfully\",\r\n      truck: updatedTruck,\r\n    })\r\n  } catch (error) {\r\n    console.error(\"Error updating truck:\", error)\r\n    return NextResponse.json({ error: \"Failed to update food truck\" }, { status: 500 })\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 132,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 132,
        "endColumn": 70
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 155,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 155,
        "endColumn": 76
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { type NextRequest, NextResponse } from \"next/server\";\r\nimport { FoodTruckService } from \"@/lib/supabase\";\r\nimport { z, type infer as zInfer } from \"zod\";\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url)\r\n  const id = searchParams.get(\"id\")\r\n  const lat = searchParams.get(\"lat\")\r\n  const lng = searchParams.get(\"lng\")\r\n  const radius = searchParams.get(\"radius\") || \"5\"\r\n  const limit = Number.parseInt(searchParams.get(\"limit\") || \"50\")\r\n  const offset = Number.parseInt(searchParams.get(\"offset\") || \"0\")\r\n\r\n  try {\r\n    // Get specific truck by ID\r\n    if (id) {\r\n      const truck = await FoodTruckService.getTruckById(id)\r\n      return NextResponse.json({ truck })\r\n    }\r\n\r\n    // Get trucks by location\r\n    if (lat && lng) {\r\n      const userLat = Number.parseFloat(lat)\r\n      const userLng = Number.parseFloat(lng)\r\n      const radiusKm = Number.parseFloat(radius)\r\n\r\n      const nearbyTrucks = await FoodTruckService.getTrucksByLocation(userLat, userLng, radiusKm)\r\n\r\n      return NextResponse.json({\r\n        trucks: nearbyTrucks,\r\n        total: nearbyTrucks.length,\r\n        limit,\r\n        offset,\r\n        hasMore: false, // Location-based queries don't use pagination\r\n      })\r\n    }\r\n\r\n    // Get all trucks with pagination\r\n    const { trucks, total } = await FoodTruckService.getAllTrucks(limit, offset)\r\n\r\n    return NextResponse.json({\r\n      trucks,\r\n      total,\r\n      limit,\r\n      offset,\r\n      hasMore: offset + limit < (total || 0),\r\n      summary: {\r\n        totalTrucks: total,\r\n        averageQuality: (trucks && trucks.length > 0) ? trucks.reduce((acc, t) => acc + (t.data_quality_score || 0), 0) / trucks.length : 0,\r\n        lastUpdated: (trucks && trucks.length > 0) ? Math.max(...trucks.map((t) => new Date(t.updated_at).getTime())) : 0,\r\n      },\r\n    })\r\n  } catch (error) {\r\n    console.error(\"Error fetching food trucks:\", error)\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\r\n  }\r\n}\r\n\r\nconst MenuItemSchema = z.object({\r\n  name: z.string(),\r\n  description: z.string().optional().default(\"\"),\r\n  price: z.union([z.number(), z.string()]).optional().default(0),\r\n  dietary_tags: z.array(z.string()).optional().default([]),\r\n});\r\n\r\nconst MenuCategorySchema = z.object({\r\n  name: z.string(),\r\n  items: z.array(MenuItemSchema),\r\n});\r\n\r\nconst FoodTruckSchema = z.object({\r\n  name: z.string().min(1, \"Name is required\"),\r\n  description: z.string().optional(),\r\n  current_location: z.object({\r\n    lat: z.number(),\r\n    lng: z.number(),\r\n    address: z.string(),\r\n    timestamp: z.string().datetime().optional().default(new Date().toISOString()),\r\n  }).optional(),\r\n  scheduled_locations: z.array(z.object({\r\n    address: z.string().optional(),\r\n    city: z.string().optional(),\r\n    state: z.string().optional(),\r\n    zip_code: z.string().optional(),\r\n    lat: z.number().optional(),\r\n    lng: z.number().optional(),\r\n    timestamp: z.string().datetime(),\r\n    start_time: z.string().datetime(),\r\n    end_time: z.string().datetime(),\r\n  })).optional().default([]),\r\n  operating_hours: z.object({\r\n    monday: z.object({ open: z.string(), close: z.string(), closed: z.boolean() }).or(z.object({ closed: z.literal(true) })).default({ closed: true }),\r\n    tuesday: z.object({ open: z.string(), close: z.string(), closed: z.boolean() }).or(z.object({ closed: z.literal(true) })).default({ closed: true }),\r\n    wednesday: z.object({ open: z.string(), close: z.string(), closed: z.boolean() }).or(z.object({ closed: z.literal(true) })).default({ closed: true }),\r\n    thursday: z.object({ open: z.string(), close: z.string(), closed: z.boolean() }).or(z.object({ closed: z.literal(true) })).default({ closed: true }),\r\n    friday: z.object({ open: z.string(), close: z.string(), closed: z.boolean() }).or(z.object({ closed: z.literal(true) })).default({ closed: true }),\r\n    saturday: z.object({ open: z.string(), close: z.string(), closed: z.boolean() }).or(z.object({ closed: z.literal(true) })).default({ closed: true }),\r\n    sunday: z.object({ open: z.string(), close: z.string(), closed: z.boolean() }).or(z.object({ closed: z.literal(true) })).default({ closed: true }),\r\n  }).optional().default({\r\n    monday: { closed: true },\r\n    tuesday: { closed: true },\r\n    wednesday: { closed: true },\r\n    thursday: { closed: true },\r\n    friday: { closed: true },\r\n    saturday: { closed: true },\r\n    sunday: { closed: true },\r\n  }),\r\n  menu: z.array(MenuCategorySchema).optional().default([]),\r\n  contact_info: z.object({\r\n    email: z.string().email().optional(),\r\n    phone: z.string().optional(),\r\n    website: z.string().url().optional(),\r\n  }).optional(),\r\n  social_media: z.object({\r\n    instagram: z.string().optional(),\r\n    facebook: z.string().optional(),\r\n    twitter: z.string().optional(),\r\n    tiktok: z.string().optional(),\r\n    yelp: z.string().optional(),\r\n  }).optional().default({}),\r\n  source_urls: z.array(z.string().url()).optional().default([]),\r\n  data_quality_score: z.number().min(0).max(1).optional().default(0.5),\r\n  verification_status: z.enum([\"pending\", \"verified\", \"rejected\"]).optional().default(\"pending\"),\r\n});\r\n\r\nconst UpdateFoodTruckSchema = FoodTruckSchema.partial().extend({\r\n  id: z.string().uuid(\"Invalid truck ID format\").min(1, \"Truck ID is required\"),\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body: zInfer<typeof FoodTruckSchema> = await request.json();\r\n    const validatedData = FoodTruckSchema.parse(body);\r\n\r\n    const newTruck = await FoodTruckService.createTruck(validatedData);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        message: \"Food truck created successfully\",\r\n        truck: newTruck,\r\n      },\r\n      { status: 201 },\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error creating food truck:\", error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: error.errors }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ error: \"Failed to create food truck\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const body: zInfer<typeof UpdateFoodTruckSchema> = await request.json();\r\n    const validatedData = UpdateFoodTruckSchema.parse(body);\r\n    const { id, ...updates } = validatedData;\r\n\r\n    const updatedTruck = await FoodTruckService.updateTruck(id, updates);\r\n\r\n    return NextResponse.json({\r\n      message: \"Food truck updated successfully\",\r\n      truck: updatedTruck,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating food truck:\", error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: error.errors }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ error: \"Failed to update food truck\" }, { status: 500 });\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\middleware.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 9,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 9,
        "endColumn": 66
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 9,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unsafeCall",
        "endLine": 9,
        "endColumn": 42
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 11,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 13,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 13,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 13,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .auth on an `error` typed value.",
        "line": 13,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 13,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an error typed value.",
        "line": 26,
        "column": 11,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 30,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 26,
        "column": 44,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 30,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 26,
        "column": 44,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 29,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 26,
        "column": 44,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 28,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
        "message": "Unsafe call of a(n) `error` type typed value.",
        "line": 26,
        "column": 44,
        "nodeType": "MemberExpression",
        "messageId": "unsafeCall",
        "endLine": 27,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .from on an `error` typed value.",
        "line": 27,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 27,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .select on an `error` typed value.",
        "line": 28,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 28,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .eq on an `error` typed value.",
        "line": 29,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 29,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .id on an `error` typed value.",
        "line": 29,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 29,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .single on an `error` typed value.",
        "line": 30,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 30,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .role on an `error` typed value.",
        "line": 32,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 32,
        "endColumn": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 16,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createMiddlewareClient } from '@supabase/ssr'\r\nimport { NextResponse } from 'next/server'\r\n\r\nimport type { NextRequest } from 'next/server'\r\nimport type { Database } from '@/lib/database.types'\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  const res = NextResponse.next()\r\n  const supabase = createMiddlewareClient<Database>({ req, res })\r\n\r\n  const {\r\n    data: { user },\r\n  } = await supabase.auth.getUser()\r\n\r\n  // Protect admin routes\r\n  if (req.nextUrl.pathname.startsWith('/admin')) {\r\n    if (!user) {\r\n      // Redirect unauthenticated users to login\r\n      const redirectUrl = req.nextUrl.clone()\r\n      redirectUrl.pathname = '/login' // Assuming a login page at /login\r\n      redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname)\r\n      return NextResponse.redirect(redirectUrl)\r\n    }\r\n\r\n    // Check for admin role (assuming 'profiles' table with 'role' column)\r\n    const { data: profile, error } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', user.id)\r\n      .single()\r\n\r\n    if (error || profile?.role !== 'admin') {\r\n      // Redirect non-admin users to a forbidden page or home\r\n      const redirectUrl = req.nextUrl.clone()\r\n      redirectUrl.pathname = '/forbidden' // Assuming a forbidden page at /forbidden\r\n      return NextResponse.redirect(redirectUrl)\r\n    }\r\n  }\r\n\r\n  return res\r\n}\r\n\r\nexport const config = {\r\n  matcher: ['/admin/:path*'],\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\app\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MenuCategory' is defined but never used.",
        "line": 64,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 76,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 76,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2148, 2151], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2148, 2151], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 77,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 77,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2164, 2167], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2164, 2167], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 78,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 78,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2183, 2186], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2183, 2186], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 93,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 93,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2507, 2510], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2507, 2510], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "sonarjs/void-use",
        "severity": 2,
        "message": "Remove this use of the \"void\" operator.",
        "line": 132,
        "column": 5,
        "nodeType": null,
        "messageId": "removeVoid",
        "endLine": 132,
        "endColumn": 9
      },
      {
        "ruleId": "sonarjs/no-intrusive-permissions",
        "severity": 2,
        "message": "Make sure the use of the geolocation is necessary.",
        "line": 137,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "checkPermission",
        "endLine": 137,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 159,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 159,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<FoodTruck[]>`.",
        "line": 160,
        "column": 17,
        "nodeType": "LogicalExpression",
        "messageId": "unsafeArgument",
        "endLine": 160,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .trucks on an `any` value.",
        "line": 160,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 160,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 173,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 173,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<FoodTruck[]>`.",
        "line": 174,
        "column": 17,
        "nodeType": "LogicalExpression",
        "messageId": "unsafeArgument",
        "endLine": 174,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .trucks on an `any` value.",
        "line": 174,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 174,
        "endColumn": 28
      },
      {
        "ruleId": "unicorn/consistent-function-scoping",
        "severity": 2,
        "message": "Move arrow function 'getCurrentDay' to the outer scope.",
        "line": 186,
        "column": 28,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "consistent-function-scoping",
        "endLine": 186,
        "endColumn": 30
      },
      {
        "ruleId": "unicorn/consistent-function-scoping",
        "severity": 2,
        "message": "Move arrow function 'formatPrice' to the outer scope.",
        "line": 213,
        "column": 39,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "consistent-function-scoping",
        "endLine": 213,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise-returning function provided to attribute where a void return was expected.",
        "line": 264,
        "column": 31,
        "nodeType": "JSXExpressionContainer",
        "messageId": "voidReturnAttribute",
        "endLine": 264,
        "endColumn": 49
      },
      {
        "ruleId": "sonarjs/different-types-comparison",
        "severity": 2,
        "message": "Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?",
        "line": 327,
        "column": 98,
        "nodeType": null,
        "endLine": 327,
        "endColumn": 101,
        "suggestions": [
          {
            "desc": "Replace \"===\" with \"==\"",
            "fix": { "range": [11938, 11941], "text": "==" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 442,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 442,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<DashboardData | undefined>`.",
        "line": 443,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unsafeArgument",
        "endLine": 443,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 18,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { Switch } from \"@/components/ui/Switch\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/Tabs\"\r\nimport { MapPin, Phone, Search, Navigation, Moon, Sun } from \"lucide-react\"\r\nimport { useThemeSwitcher } from \"@/components/ThemeProvider\"\r\nimport dynamic from 'next/dynamic'\r\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\"\r\nimport { TruckCard } from \"@/components/TruckCard\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\n\r\nconst MapDisplay = dynamic(() => import('@/components/MapDisplay'), {\r\n  ssr: false,\r\n  loading: () => <div className=\"h-96 flex items-center justify-center bg-gray-100 dark:bg-slate-800 rounded-lg\"><p>Loading map...</p></div>,\r\n})\r\n\r\ninterface FoodTruck {\r\n  id: string\r\n  name: string\r\n  description: string\r\n  current_location: {\r\n    lat: number\r\n    lng: number\r\n    address: string\r\n    timestamp: string\r\n  }\r\n  operating_hours: Record<string, { open: string; close: string; closed: boolean }>\r\n  menu: Array<{\r\n    category: string\r\n    items: Array<{\r\n      name: string\r\n      description: string\r\n      price: number\r\n      dietary_tags: string[]\r\n    }>\r\n  }>\r\n  contact_info: {\r\n    phone?: string\r\n    email?: string\r\n    website?: string\r\n  }\r\n  social_media: {\r\n    instagram?: string\r\n    facebook?: string\r\n    twitter?: string\r\n  }\r\n  data_quality_score: number\r\n  verification_status: string\r\n  distance?: number\r\n}\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  dietary_tags: string[];\r\n}\r\n\r\ninterface MenuCategory {\r\n  category: string;\r\n  items: MenuItem[];\r\n}\r\n\r\n// --- Dashboard Data Types ---\r\ninterface DashboardOverview {\r\n  totalTrucks: number;\r\n  recentTrucks: Array<{\r\n    id: string;\r\n    name: string;\r\n    location: { address: string };\r\n    operating_hours: any;\r\n    menu: any;\r\n    contact: any;\r\n    last_updated: string;\r\n    data_quality_score: number;\r\n  }>;\r\n  averageQuality: number;\r\n  verifiedTrucks: number;\r\n  pendingTrucks: number;\r\n  lastUpdated: string;\r\n}\r\n\r\ninterface DashboardScraping {\r\n  pending: number;\r\n  running: number;\r\n  completedToday: number;\r\n  failedToday: number;\r\n  recentJobs: Array<any>;\r\n  successRate: number;\r\n}\r\n\r\ninterface DashboardQuality {\r\n  avg_quality_score: number;\r\n  verified_count: number;\r\n  pending_count: number;\r\n  flagged_count: number;\r\n  [key: string]: number;\r\n}\r\n\r\ninterface DashboardUsage {\r\n  gemini: {\r\n    requests: { used: number; limit: number; percentage: number };\r\n    tokens: { used: number; limit: number; percentage: number };\r\n  };\r\n}\r\n\r\ninterface DashboardData {\r\n  overview?: DashboardOverview;\r\n  scraping?: DashboardScraping;\r\n  quality?: DashboardQuality;\r\n  usage?: DashboardUsage;\r\n}\r\n\r\nexport default function FoodTruckFinder() {\r\n  const [trucks, setTrucks] = useState<FoodTruck[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | undefined>()\r\n  const [selectedTruckId, setSelectedTruckId] = useState<string | undefined>()\r\n  const [activeTab, setActiveTab] = useState(\"map\")\r\n  const { setTheme, resolvedTheme } = useThemeSwitcher()\r\n  const [mounted, setMounted] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setMounted(true)\r\n    void loadFoodTrucks()\r\n    void getUserLocation()\r\n  }, [])\r\n\r\n  const getUserLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setUserLocation({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          })\r\n        },\r\n        (error) => {\r\n          console.warn(\"Location access denied:\", error)\r\n          // Default to San Francisco\r\n          setUserLocation({ lat: 37.7749, lng: -122.4194 })\r\n        },\r\n      )\r\n    } else {\r\n      // Default to San Francisco\r\n      setUserLocation({ lat: 37.7749, lng: -122.4194 })\r\n    }\r\n  }\r\n\r\n  const loadFoodTrucks = async () => {\r\n    try {\r\n      const response = await fetch(\"/api/trucks\")\r\n      const data = await response.json()\r\n      setTrucks(data.trucks || [])\r\n    } catch (error) {\r\n      console.error(\"Failed to load food trucks:\", error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const loadNearbyTrucks = async () => {\r\n    if (!userLocation) return\r\n\r\n    try {\r\n      const response = await fetch(`/api/trucks?lat=${userLocation.lat}&lng=${userLocation.lng}&radius=10`)\r\n      const data = await response.json()\r\n      setTrucks(data.trucks || [])\r\n    } catch (error) {\r\n      console.error(\"Failed to load nearby trucks:\", error)\r\n    }\r\n  }\r\n\r\n  const filteredTrucks = trucks.filter(\r\n    (truck) =>\r\n      truck.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      truck.description?.toLowerCase().includes(searchTerm.toLowerCase()),\r\n  )\r\n\r\n  const getCurrentDay = () => {\r\n    const days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"]\r\n    return days[new Date().getDay()]\r\n  }\r\n\r\n  const isOpen = (truck: FoodTruck) => {\r\n    const today = getCurrentDay()\r\n    const hours = truck.operating_hours?.[today]\r\n\r\n    // Ensure hours and its properties are not null/undefined before accessing\r\n    if (!hours || hours.closed || !hours.open || !hours.close) {\r\n      return false\r\n    }\r\n\r\n    try {\r\n      const now = new Date()\r\n      const currentTime = now.getHours() * 100 + now.getMinutes()\r\n      const openTime = Number.parseInt(hours.open.replace(\":\", \"\"))\r\n      const closeTime = Number.parseInt(hours.close.replace(\":\", \"\"))\r\n\r\n      return currentTime >= openTime && currentTime <= closeTime\r\n    } catch (error) {\r\n      console.error(\"Error parsing operating hours for truck\", truck.name, error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  const formatPrice = (price: number) => {\r\n    return new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\",\r\n    }).format(price)\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 dark:border-blue-400 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">Finding delicious food trucks...</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\r\n      {/* Header */}\r\n      <div className=\"bg-white dark:bg-slate-800 shadow-sm border-b dark:border-slate-700\">\r\n        <div className=\"container mx-auto px-4 py-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">🚚 Food Truck Finder</h1>\r\n              <p className=\"text-gray-600 dark:text-gray-400\">Discover amazing food trucks near you</p>\r\n            </div>\r\n            <div className=\"flex flex-wrap items-center justify-end gap-2 sm:space-x-4\"> {/* Added flex-wrap, justify-end, gap-2. Removed space-x-4 for sm screens */}\r\n              <div className=\"flex items-center space-x-2 order-1 sm:order-none\"> {/* Control order for small screens if needed */}\r\n                {mounted && (resolvedTheme === \"dark\" ? <Sun className=\"h-5 w-5 text-yellow-400\" /> : <Moon className=\"h-5 w-5 text-slate-500\" />)}\r\n                <Switch\r\n                  id=\"theme-switcher\"\r\n                  checked={mounted && resolvedTheme === \"dark\"}\r\n                  onCheckedChange={(checked: boolean) => setTheme(checked ? \"dark\" : \"light\")}\r\n                  aria-label=\"Switch between dark and light mode\"\r\n                  disabled={!mounted}\r\n                />\r\n                <Label htmlFor=\"theme-switcher\" className=\"hidden sm:block text-sm text-gray-700 dark:text-gray-300\">\r\n                  {mounted && (resolvedTheme === \"dark\" ? \"Light Mode\" : \"Dark Mode\")}\r\n                </Label>\r\n              </div>\r\n              <div className=\"relative order-3 sm:order-none w-full sm:w-64\"> {/* Full width on small, fixed on sm+ */}\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 h-4 w-4\" />\r\n                <Input\r\n                  placeholder=\"Search food trucks...\"\r\n                  value={searchTerm}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10 w-full bg-white dark:bg-slate-700 dark:text-gray-100 dark:placeholder-gray-400\" // w-full for responsiveness\r\n                />\r\n              </div>\r\n              <Button onClick={loadNearbyTrucks} disabled={!userLocation} variant=\"outline\" className=\"order-2 sm:order-none\">\r\n                <Navigation className=\"h-4 w-4 mr-2\" />\r\n                Find Nearby\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <Card className=\"mb-6 dark:bg-slate-800 dark:border-slate-700\">\r\n          <CardHeader>\r\n            <CardTitle className=\"text-lg font-semibold dark:text-gray-100\">Current Target Food Truck Source</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n              The primary data source for food truck information is currently:\r\n            </p>\r\n            <a\r\n              href=\"https://eatrotirolls.com/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"text-blue-600 hover:underline dark:text-blue-400\"\r\n            >\r\n              https://eatrotirolls.com/\r\n            </a>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Tabs value={activeTab} onValueChange={(value: string) => setActiveTab(value)} className=\"space-y-6\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"map\">Map View</TabsTrigger>\r\n            <TabsTrigger value=\"list\">List View</TabsTrigger>\r\n            <TabsTrigger value=\"admin\">Admin Dashboard</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"map\" className=\"space-y-6\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n              {/* Real Map */}\r\n              <div className=\"lg:col-span-2 h-80 min-h-[320px] sm:h-96 sm:min-h-[400px] dark:bg-slate-800 rounded-lg shadow\">\r\n                <MapDisplay\r\n                  trucks={filteredTrucks}\r\n                  userLocation={userLocation}\r\n                  onSelectTruck={setSelectedTruckId}\r\n                  defaultCenter={\r\n                    selectedTruckId\r\n                      ? [\r\n                          filteredTrucks.find((t) => t.id === selectedTruckId)?.current_location?.lat || 0,\r\n                          filteredTrucks.find((t) => t.id === selectedTruckId)?.current_location?.lng || 0,\r\n                        ]\r\n                      : undefined\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              {/* Combined Truck List and Details */}\r\n              <div className=\"lg:col-span-1 space-y-4\">\r\n                <h3 className=\"text-lg font-semibold dark:text-gray-100\">Nearby Trucks ({filteredTrucks.length})</h3>\r\n                <Accordion\r\n                  type=\"single\"\r\n                  collapsible\r\n                  className=\"w-full\"\r\n                  value={selectedTruckId || undefined}\r\n                  onValueChange={(value: string | null) => setSelectedTruckId(currentId => value === currentId ? undefined : (value ?? undefined))}\r\n                >\r\n                  {filteredTrucks.map((truck) => (\r\n                    <AccordionItem value={truck.id} key={truck.id}>\r\n                      <AccordionTrigger className=\"flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-slate-700 rounded-md\">\r\n                        <div className=\"flex-1 text-left\">\r\n                          <h4 className=\"font-medium dark:text-gray-100\">{truck.name}</h4>\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-1\">\r\n                            {truck.current_location?.address || \"Location not available\"}\r\n                          </p>\r\n                        </div>\r\n                        <Badge variant={isOpen(truck) ? \"default\" : \"secondary\"}>\r\n                          {isOpen(truck) ? \"Open\" : \"Closed\"}\r\n                        </Badge>\r\n                      </AccordionTrigger>\r\n                      <AccordionContent>\r\n                        <TruckCard \r\n                          truck={truck} \r\n                          isOpen={isOpen(truck)} \r\n                          onSelectTruck={() => setSelectedTruckId(truck.id)}\r\n                          userLocation={userLocation}\r\n                          formatPrice={formatPrice}\r\n                        />\r\n                      </AccordionContent>\r\n                    </AccordionItem>\r\n                  ))}\r\n                </Accordion>\r\n              </div>\r\n            </div>\r\n\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"list\" className=\"space-y-6\">\r\n            <div className=\"grid gap-6\">\r\n              {filteredTrucks.map((truck) => (\r\n                <Card key={truck.id} className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n                  <CardHeader>\r\n                    <div className=\"flex justify-between items-start\">\r\n                      <div>\r\n                        <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\r\n                        <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\r\n                          <MapPin className=\"h-4 w-4 mr-1\" />\r\n                          {truck.current_location?.address || \"Location not available\"}\r\n                        </CardDescription>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Badge variant={isOpen(truck) ? \"default\" : \"secondary\"}>\r\n                          {isOpen(truck) ? \"Open\" : \"Closed\"}\r\n                        </Badge>\r\n                        <Badge variant=\"outline\" className=\"dark:text-gray-300 dark:border-slate-600\">{Math.round(truck.data_quality_score * 100)}% Quality</Badge>\r\n                      </div>\r\n                    </div>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <p className=\"text-gray-600 dark:text-gray-400 mb-4\">{truck.description}</p>\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                      <div>\r\n                        <h4 className=\"font-medium mb-2 dark:text-gray-100\">Popular Items</h4>\r\n                        <div className=\"space-y-1 dark:text-gray-300\">\r\n                          {truck.menu?.slice(0, 1).map((category) =>\r\n                            category.items?.slice(0, 3).map((item, idx) => (\r\n                              <div key={idx} className=\"flex justify-between text-sm\">\r\n                                <span className=\"dark:text-gray-200\">{item.name}</span>\r\n                                <span className=\"text-green-600 dark:text-green-400\">{formatPrice(item.price)}</span>\r\n                              </div>\r\n                            )),\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <h4 className=\"font-medium mb-2 dark:text-gray-100\">Today's Hours</h4>\r\n                        <div className=\"text-sm dark:text-gray-300\">\r\n                          {(() => {\r\n                            const today = getCurrentDay()\r\n                            const hours = truck.operating_hours?.[today]\r\n                            return hours?.closed ? \"Closed today\" : `${hours?.open} - ${hours?.close}`\r\n                          })()}\r\n                        </div>\r\n                        {truck.contact_info?.phone && (\r\n                          <div className=\"flex items-center mt-2 text-sm dark:text-gray-300\">\r\n                            <Phone className=\"h-4 w-4 mr-1\" />\r\n                            {truck.contact_info.phone}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"admin\">\r\n            <AdminDashboard />\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AdminDashboard() {\r\n  const [dashboardData, setDashboardData] = useState<DashboardData | undefined>()\r\n  const [loadingAdmin, setLoadingAdmin] = useState(true) // Renamed to avoid conflict\r\n  const { resolvedTheme: adminTheme } = useThemeSwitcher() // Use resolvedTheme for admin section too\r\n  const [adminMounted, setAdminMounted] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setAdminMounted(true)\r\n    void loadDashboardData()\r\n  }, [])\r\n\r\n  const loadDashboardData = async () => {\r\n    try {\r\n      const response = await fetch(\"/api/dashboard\")\r\n      const data = await response.json()\r\n      setDashboardData(data)\r\n    } catch (error) {\r\n      console.error(\"Failed to load dashboard data:\", error)\r\n    } finally {\r\n      setLoadingAdmin(false)\r\n    }\r\n  }\r\n\r\n  if (loadingAdmin) {\r\n    return <div className={`text-center py-8 ${adminMounted && adminTheme === 'dark' ? 'text-gray-300' : ''}`}>Loading admin dashboard...</div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium dark:text-gray-300\">Total Trucks</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold dark:text-gray-100\">{dashboardData?.overview?.totalTrucks || 0}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium dark:text-gray-300\">Active Scrapes</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold dark:text-gray-100\">{dashboardData?.scraping?.running || 0}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium dark:text-gray-300\">Success Rate</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold dark:text-gray-100\">{(dashboardData?.scraping?.successRate || 0).toFixed(1)}%</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium dark:text-gray-300\">Data Quality</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold dark:text-gray-100\">\r\n              {((dashboardData?.quality?.avg_quality_score || 0) * 100).toFixed(1)}%\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n          <CardHeader>\r\n            <CardTitle className=\"dark:text-gray-100\">API Usage Today</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <div className=\"flex justify-between text-sm mb-1 dark:text-gray-300\">\r\n                  <span>Gemini Requests</span>\r\n                  <span>\r\n                    {dashboardData?.usage?.gemini?.requests?.used || 0} /\r\n                    {dashboardData?.usage?.gemini?.requests?.limit || 1500}\r\n                  </span>\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 dark:bg-slate-700 rounded-full h-2\">\r\n                  <div\r\n                    className=\"bg-blue-600 dark:bg-blue-500 h-2 rounded-full\"\r\n                    style={{ width: `${dashboardData?.usage?.gemini?.requests?.percentage || 0}%` }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <div className=\"flex justify-between text-sm mb-1 dark:text-gray-300\">\r\n                  <span>Gemini Tokens</span>\r\n                  <span>\r\n                    {dashboardData?.usage?.gemini?.tokens?.used || 0} /\r\n                    {dashboardData?.usage?.gemini?.tokens?.limit || 32_000}\r\n                  </span>\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 dark:bg-slate-700 rounded-full h-2\">\r\n                  <div\r\n                    className=\"bg-green-600 dark:bg-green-500 h-2 rounded-full\"\r\n                    style={{ width: `${dashboardData?.usage?.gemini?.tokens?.percentage || 0}%` }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n          <CardHeader>\r\n            <CardTitle className=\"dark:text-gray-100\">Recent Activity</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              {dashboardData?.scraping?.recentJobs?.slice(0, 5).map((job: { job_type: string; completed_at: string; status: string }, idx: number) => (\r\n                <div key={idx} className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-sm font-medium dark:text-gray-200\">{job.job_type || \"Scraping job\"}</p>\r\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      {job.completed_at ? new Date(job.completed_at).toLocaleString() : \"Recently\"}\r\n                    </p>\r\n                  </div>\r\n                  <Badge variant={job.status === \"completed\" ? \"default\" : \"secondary\"}>{job.status}</Badge>\r\n                </div>\r\n              )) || <p className=\"text-gray-500 dark:text-gray-400 text-center py-4\">No recent activity</p>}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\FoodTruckInfoCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\MapDisplay.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/no-nested-conditional",
        "severity": 2,
        "message": "Extract this nested ternary operation into an independent statement.",
        "line": 52,
        "column": 7,
        "nodeType": "ConditionalExpression",
        "messageId": "extractTernary",
        "endLine": 54,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport \"leaflet/dist/leaflet.css\"\r\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css\"\r\nimport \"leaflet-defaulticon-compatibility\"\r\n\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\"\r\nimport type { LatLngExpression } from \"leaflet\"\r\nimport L from \"leaflet\"\r\n\r\ninterface MapDisplayProps {\r\n  trucks: Array<{\r\n    id: string\r\n    name: string\r\n    current_location: {\r\n      lat?: number\r\n      lng?: number\r\n      address?: string\r\n    }\r\n  }>\r\n  userLocation?: { lat: number; lng: number } | null\r\n  defaultCenter?: LatLngExpression\r\n  defaultZoom?: number\r\n  onSelectTruck?: (truckId: string) => void\r\n}\r\n\r\n// Custom food truck icon (public/placeholder-logo.png or use your own svg/png)\r\nconst foodTruckIcon = new L.Icon({\r\n  iconUrl: \"/placeholder-logo.png\",\r\n  iconSize: [36, 36],\r\n  iconAnchor: [18, 36],\r\n  popupAnchor: [0, -36],\r\n  className: \"food-truck-marker-icon\"\r\n})\r\n\r\nconst MapDisplay = ({\r\n  trucks,\r\n  userLocation,\r\n  defaultCenter = [37.7749, -122.4194], // Default to San Francisco\r\n  defaultZoom = 10,\r\n  onSelectTruck,\r\n}: MapDisplayProps) => {\r\n  const validTrucks = trucks.filter(\r\n    (truck) =>\r\n      truck.current_location &&\r\n      typeof truck.current_location.lat === \"number\" &&\r\n      typeof truck.current_location.lng === \"number\",\r\n  )\r\n\r\n  const mapCenter: LatLngExpression = userLocation\r\n    ? [userLocation.lat, userLocation.lng]\r\n    : validTrucks.length > 0 && validTrucks[0].current_location.lat && validTrucks[0].current_location.lng\r\n      ? [validTrucks[0].current_location.lat, validTrucks[0].current_location.lng]\r\n      : defaultCenter\r\n\r\n  return (\r\n    <MapContainer\r\n      center={mapCenter}\r\n      zoom={defaultZoom}\r\n      scrollWheelZoom={true}\r\n      style={{ height: \"100%\", width: \"100%\" }}\r\n      className=\"rounded-lg\"\r\n    >\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {validTrucks.map((truck) => (\r\n        <Marker\r\n          key={truck.id}\r\n          position={[truck.current_location.lat!, truck.current_location.lng!]}\r\n          icon={foodTruckIcon}\r\n          eventHandlers={{\r\n            click: () => {\r\n              if (onSelectTruck) {\r\n                onSelectTruck(truck.id)\r\n              }\r\n            },\r\n          }}\r\n        >\r\n          <Popup>\r\n            <h4 className=\"font-bold\">{truck.name}</h4>\r\n            <div>{truck.current_location.address || \"Location not available\"}</div>\r\n          </Popup>\r\n        </Marker>\r\n      ))}\r\n      {userLocation && (\r\n        <Marker position={[userLocation.lat, userLocation.lng]}>\r\n          <Popup>You are here</Popup>\r\n        </Marker>\r\n      )}\r\n    </MapContainer>\r\n  )\r\n}\r\n\r\nexport default MapDisplay\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ModeToggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\SearchFilters.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/prefer-read-only-props",
        "severity": 2,
        "message": "Mark the props of the component as read-only.",
        "line": 22,
        "column": 31,
        "nodeType": "ObjectPattern",
        "messageId": "readOnlyProps",
        "endLine": 22,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "readOnlyPropsFix",
            "fix": { "range": [570, 588], "text": "Readonly<SearchFiltersProps>" },
            "desc": "Mark the props as read-only"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Card, CardContent } from \"@/components/ui/card\"\r\nimport { Search, Filter, Clock } from \"lucide-react\"\r\n\r\ninterface SearchFiltersProps {\r\n  onSearch: (filters: SearchFilters) => void\r\n  loading?: boolean\r\n}\r\n\r\ninterface SearchFilters {\r\n  query: string\r\n  cuisine: string\r\n  openNow: boolean\r\n  radius: number\r\n}\r\n\r\nexport function SearchFilters({ onSearch, loading }: SearchFiltersProps) {\r\n  const [filters, setFilters] = useState<SearchFilters>({\r\n    query: \"\",\r\n    cuisine: \"\",\r\n    openNow: false,\r\n    radius: 10,\r\n  })\r\n\r\n  const [showAdvanced, setShowAdvanced] = useState(false)\r\n\r\n  const cuisineTypes = [\r\n    \"Mexican\",\r\n    \"American\",\r\n    \"Asian\",\r\n    \"Italian\",\r\n    \"BBQ\",\r\n    \"Burgers\",\r\n    \"Tacos\",\r\n    \"Pizza\",\r\n    \"Sandwiches\",\r\n    \"Desserts\",\r\n  ]\r\n\r\n  const handleSearch = () => {\r\n    onSearch(filters)\r\n  }\r\n\r\n  const clearFilters = () => {\r\n    const clearedFilters = {\r\n      query: \"\",\r\n      cuisine: \"\",\r\n      openNow: false,\r\n      radius: 10,\r\n    }\r\n    setFilters(clearedFilters)\r\n    onSearch(clearedFilters)\r\n  }\r\n\r\n  const activeFilterCount = [filters.query, filters.cuisine, filters.openNow].filter(Boolean).length\r\n\r\n  return (\r\n    <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"space-y-4\">\r\n          {/* Main Search */}\r\n          <div className=\"flex flex-wrap items-center gap-2 sm:space-x-2\"> {/* Allow wrapping and adjust gap */}\r\n            <div className=\"relative flex-grow min-w-[200px]\"> {/* Use flex-grow and min-w for input section */}\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 h-4 w-4\" />\r\n              <Input\r\n                placeholder=\"Search food trucks, cuisine, or menu items...\"\r\n                value={filters.query}\r\n                onChange={(e) => setFilters({ ...filters, query: e.target.value })}\r\n                className=\"pl-10 w-full dark:bg-slate-700 dark:text-gray-100 dark:placeholder-gray-400\" // Ensure input takes full width of its container\r\n                onKeyDown={(e) => {\r\n                  if (e.key === \"Enter\") {\r\n                    handleSearch();\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <Button onClick={handleSearch} disabled={loading} className=\"flex-shrink-0\"> {/* Prevent button from shrinking excessively */}\r\n              <Search className=\"h-4 w-4 mr-2\" />\r\n              Search\r\n            </Button>\r\n            <Button variant=\"outline\" onClick={() => setShowAdvanced(!showAdvanced)} className=\"dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700 flex-shrink-0\"> {/* Prevent button from shrinking */}\r\n              <Filter className=\"h-4 w-4 mr-2\" />\r\n              Filters\r\n              {activeFilterCount > 0 && (\r\n                <Badge variant=\"secondary\" className=\"ml-2 dark:bg-slate-700 dark:text-gray-300\">\r\n                  {activeFilterCount}\r\n                </Badge>\r\n              )}\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Advanced Filters */}\r\n          {showAdvanced && (\r\n            <div className=\"space-y-4 pt-4 border-t dark:border-slate-700\">\r\n              {/* Quick Filters */}\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Button\r\n                  variant={filters.openNow ? \"default\" : \"outline\"}\r\n                  size=\"sm\"\r\n                  onClick={() => setFilters({ ...filters, openNow: !filters.openNow })}\r\n                  className=\"dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700\"\r\n                >\r\n                  <Clock className=\"h-4 w-4 mr-1\" />\r\n                  Open Now\r\n                </Button>\r\n                <Button variant=\"outline\" size=\"sm\" onClick={clearFilters} className=\"dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700\">\r\n                  Clear All\r\n                </Button>\r\n              </div>\r\n\r\n              {/* Cuisine Types */}\r\n              <div>\r\n                <label className=\"text-sm font-medium mb-2 block dark:text-gray-100\">Cuisine Type</label>\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                  {cuisineTypes.map((cuisine) => (\r\n                    <Badge\r\n                      key={cuisine}\r\n                      variant={filters.cuisine === cuisine ? \"default\" : \"outline\"}\r\n                      className=\"cursor-pointer dark:text-gray-300 dark:border-slate-600 dark:hover:bg-slate-700\"\r\n                      onClick={() =>\r\n                        setFilters({\r\n                          ...filters,\r\n                          cuisine: filters.cuisine === cuisine ? \"\" : cuisine,\r\n                        })\r\n                      }\r\n                    >\r\n                      {cuisine}\r\n                    </Badge>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Distance */}\r\n              <div>\r\n                <label className=\"text-sm font-medium mb-2 block dark:text-gray-100\">Distance: {filters.radius} km</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"1\"\r\n                  max=\"50\"\r\n                  value={filters.radius}\r\n                  onChange={(e) => setFilters({ ...filters, radius: Number(e.target.value) })}\r\n                  className=\"w-full accent-blue-600 dark:accent-blue-500\"\r\n                />\r\n                <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n                  <span>1 km</span>\r\n                  <span>50 km</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ThemeProvider.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/prefer-read-only-props",
        "severity": 2,
        "message": "Mark the props of the component as read-only.",
        "line": 11,
        "column": 31,
        "nodeType": "ObjectPattern",
        "messageId": "readOnlyProps",
        "endLine": 11,
        "endColumn": 79,
        "suggestions": [
          {
            "messageId": "readOnlyPropsFix",
            "fix": { "range": [354, 378], "text": "Readonly<CustomThemeProviderProps>" },
            "desc": "Mark the props as read-only"
          }
        ]
      },
      {
        "ruleId": "sonarjs/different-types-comparison",
        "severity": 2,
        "message": "Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?",
        "line": 29,
        "column": 15,
        "nodeType": null,
        "endLine": 29,
        "endColumn": 18,
        "suggestions": [
          { "desc": "Replace \"===\" with \"==\"", "fix": { "range": [790, 793], "text": "==" } }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { ThemeProvider as NextThemesProvider, useTheme } from \"next-themes\"\r\nimport { type ThemeProviderProps } from \"next-themes/dist/types\"\r\n\r\nexport interface CustomThemeProviderProps extends ThemeProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport function ThemeProvider({ children, ...props }: CustomThemeProviderProps) {\r\n  return (\r\n    <NextThemesProvider\r\n      attribute=\"class\"\r\n      defaultTheme=\"system\"\r\n      enableSystem\r\n      disableTransitionOnChange\r\n      storageKey=\"vite-ui-theme\" // Default storage key used by next-themes, can be customized\r\n      {...props}\r\n    >\r\n      {children}\r\n    </NextThemesProvider>\r\n  )\r\n}\r\n\r\nexport const useThemeSwitcher = () => {\r\n  const context = useTheme()\r\n\r\n  if (context === undefined) {\r\n    throw new Error(\"useThemeSwitcher must be used within a ThemeProvider\")\r\n  }\r\n\r\n  return context\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\TruckCard.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/no-redundant-optional",
        "severity": 2,
        "message": "Consider removing 'undefined' type or '?' specifier, one of them is redundant.",
        "line": 33,
        "column": 15,
        "nodeType": null,
        "endLine": 33,
        "endColumn": 16,
        "suggestions": [
          { "desc": "Remove \"?\" operator", "fix": { "range": [872, 873], "text": "" } },
          {
            "desc": "Remove \"undefined\" type annotation",
            "fix": { "range": [875, 915], "text": "{ lat: number; lng: number }" }
          }
        ]
      },
      {
        "ruleId": "sonarjs/prefer-read-only-props",
        "severity": 2,
        "message": "Mark the props of the component as read-only.",
        "line": 36,
        "column": 27,
        "nodeType": "ObjectPattern",
        "messageId": "readOnlyProps",
        "endLine": 36,
        "endColumn": 88,
        "suggestions": [
          {
            "messageId": "readOnlyPropsFix",
            "fix": { "range": [996, 1010], "text": "Readonly<TruckCardProps>" },
            "desc": "Mark the props as read-only"
          }
        ]
      },
      {
        "ruleId": "unicorn/prefer-number-properties",
        "severity": 2,
        "message": "Prefer `Number.isNaN` over `isNaN`.",
        "line": 48,
        "column": 55,
        "nodeType": "Identifier",
        "messageId": "error",
        "endLine": 48,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestion",
            "fix": { "range": [1503, 1508], "text": "Number.isNaN" },
            "data": { "description": "isNaN", "property": "isNaN" },
            "desc": "Replace `isNaN` with `Number.isNaN`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 49,
        "column": 37,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 49,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [1550, 1554], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [1550, 1554], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { MapPin, Phone, ExternalLink, Star } from \"lucide-react\"\r\n\r\ninterface FoodTruck {\r\n  id: string\r\n  name: string\r\n  description: string\r\n  current_location?: {\r\n    address: string\r\n  }\r\n  operating_hours?: Record<string, { open: string; close: string; closed: boolean }>\r\n  contact_info?: {\r\n    phone?: string\r\n    website?: string\r\n  }\r\n  data_quality_score: number\r\n  verification_status: string\r\n  menu?: Array<{\r\n    category: string\r\n    items: Array<{ name: string; price: number }>\r\n  }>\r\n}\r\n\r\ninterface TruckCardProps {\r\n  truck: FoodTruck\r\n  isOpen: boolean\r\n  onSelectTruck: () => void\r\n  formatPrice: (price: number) => string\r\n  userLocation?: { lat: number; lng: number } | undefined;\r\n}\r\n\r\nexport function TruckCard({ truck, isOpen, onSelectTruck, formatPrice }: TruckCardProps) {\r\n  const getPopularItems = () => {\r\n    if (!truck.menu || truck.menu.length === 0) return []\r\n    return truck.menu[0]?.items?.slice(0, 3) || []\r\n  }\r\n\r\n  // Helper to determine price range fallback\r\n  const getPriceRange = () => {\r\n    // Flatten all prices from all menu items\r\n    const prices = (truck.menu || [])\r\n      .flatMap((cat) => cat.items)\r\n      .map((item) => typeof item.price === 'number' ? item.price : undefined)\r\n      .filter((p): p is number => p !== undefined && !isNaN(p))\r\n    if (prices.length === 0) return null\r\n    const min = Math.min(...prices)\r\n    const max = Math.max(...prices)\r\n    if (max < 10) return '$'\r\n    if (min >= 10 && max <= 20) return '$$'\r\n    if (min > 20) return '$$$'\r\n    if (min < 10 && max > 20) return '$-$$$'\r\n    if (min < 10 && max <= 20) return '$-$$'\r\n    if (min >= 10 && max > 20) return '$$-$$$'\r\n    return '$'\r\n  }\r\n\r\n  const popularItems = getPopularItems()\r\n  const priceRange = getPriceRange()\r\n\r\n  return (\r\n    <Card className=\"hover:shadow-md transition-shadow cursor-pointer dark:bg-slate-800 dark:border-slate-700\" onClick={onSelectTruck}>\r\n      <CardHeader>\r\n        <div className=\"flex justify-between items-start\">\r\n          <div className=\"flex-1\">\r\n            <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\r\n            <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\r\n              <MapPin className=\"h-4 w-4 mr-1\" />\r\n              {truck.current_location?.address || \"Location not available\"}\r\n            </CardDescription>\r\n          </div>\r\n          <div className=\"flex flex-col items-end space-y-1\">\r\n            <Badge variant={isOpen ? \"default\" : \"secondary\"}>{isOpen ? \"Open\" : \"Closed\"}</Badge>\r\n            {/* Show price range fallback if no explicit prices */}\r\n            {(popularItems.every(item => !item.price)) && priceRange && (\r\n              <Badge variant=\"outline\" className=\"mt-1\">{priceRange}</Badge>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">{truck.description}</p>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <div>\r\n            <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Popular Items</h4>\r\n            <div className=\"space-y-1\">\r\n              {popularItems.map((item, idx) => (\r\n                <div key={idx} className=\"flex justify-between text-sm dark:text-gray-300\">\r\n                  <span className=\"truncate dark:text-gray-200\">{item.name}</span>\r\n                  {typeof item.price === 'number' ? (\r\n                    <span className=\"text-green-600 dark:text-green-400 ml-2\">{formatPrice(item.price)}</span>\r\n                  ) : (\r\n                    <span className=\"text-gray-400 ml-2\">N/A</span>\r\n                  )}\r\n                </div>\r\n              ))}\r\n              {popularItems.length === 0 && <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Menu not available</p>}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Contact</h4>\r\n            <div className=\"space-y-1 dark:text-gray-300\">\r\n              {truck.contact_info?.phone && (\r\n                <div className=\"flex items-center text-sm\">\r\n                  <Phone className=\"h-3 w-3 mr-1\" />\r\n                  <span className=\"truncate\">{truck.contact_info.phone}</span>\r\n                </div>\r\n              )}\r\n              {truck.contact_info?.website && (\r\n                <div className=\"flex items-center text-sm\">\r\n                  <ExternalLink className=\"h-3 w-3 mr-1\" />\r\n                  <span className=\"truncate\">Website</span>\r\n                </div>\r\n              )}\r\n              <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\r\n                <Star className=\"h-3 w-3 mr-1\" />\r\n                <span>{truck.verification_status}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"mt-2\">\r\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n            <Badge variant={truck.verification_status === \"Verified\" ? \"default\" : \"secondary\"}>\r\n              {truck.verification_status}\r\n            </Badge>\r\n          </p>\r\n        </div>\r\n      </CardContent>\r\n      {truck.verification_status === \"verified\" && (\r\n        <div className=\"px-4 py-2 border-t border-gray-200 dark:border-gray-700\">\r\n          <Button className=\"w-full\" variant=\"default\" disabled>\r\n            Book Me\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </Card>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\AlertDialog.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\AspectRatio.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\ContextMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\DropdownMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\HoverCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\InputOtp.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Label.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Menubar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\NavigationMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Popover.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Progress.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\RadioGroup.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\ScrollArea.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Select.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Separator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Sheet.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Sidebar.tsx",
    "messages": [
      {
        "ruleId": "unicorn/no-document-cookie",
        "severity": 2,
        "message": "Do not use `document.cookie` directly.",
        "line": 87,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "no-document-cookie",
        "endLine": 87,
        "endColumn": 35
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 653,
        "column": 26,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 653,
        "endColumn": 39
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { VariantProps, cva } from \"class-variance-authority\"\r\nimport { PanelLeft } from \"lucide-react\"\r\n\r\nimport { useIsMobile } from \"@/hooks/UseMobile\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Separator } from \"@/components/ui/Separator\"\r\nimport { Sheet, SheetContent } from \"@/components/ui/Sheet\"\r\nimport { Skeleton } from \"@/components/ui/Skeleton\"\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/Tooltip\"\r\n\r\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\r\nconst SIDEBAR_WIDTH = \"16rem\"\r\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\r\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\r\n\r\ntype SidebarContext = {\r\n  state: \"expanded\" | \"collapsed\"\r\n  open: boolean\r\n  setOpen: (open: boolean) => void\r\n  openMobile: boolean\r\n  setOpenMobile: (open: boolean) => void\r\n  isMobile: boolean\r\n  toggleSidebar: () => void\r\n}\r\n\r\nconst SidebarContext = React.createContext<SidebarContext | undefined>(undefined)\r\n\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext)\r\n  if (!context) {\r\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst SidebarProvider = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    defaultOpen?: boolean\r\n    open?: boolean\r\n    onOpenChange?: (open: boolean) => void\r\n  }\r\n>(\r\n  (\r\n    {\r\n      defaultOpen = true,\r\n      open: openProp,\r\n      onOpenChange: setOpenProp,\r\n      className,\r\n      style,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const isMobile = useIsMobile()\r\n    const [openMobile, setOpenMobile] = React.useState(false)\r\n\r\n    // This is the internal state of the sidebar.\r\n    // We use openProp and setOpenProp for control from outside the component.\r\n    const [_open, _setOpen] = React.useState(defaultOpen)\r\n    const open = openProp ?? _open\r\n    const setOpen = React.useCallback(\r\n      (value: boolean | ((value: boolean) => boolean)) => {\r\n        const openState = typeof value === \"function\" ? value(open) : value\r\n        if (setOpenProp) {\r\n          setOpenProp(openState)\r\n        } else {\r\n          _setOpen(openState)\r\n        }\r\n\r\n        // This sets the cookie to keep the sidebar state.\r\n        globalThis.document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\r\n      },\r\n      [setOpenProp, open]\r\n    )\r\n\r\n    // Helper to toggle the sidebar.\r\n    const toggleSidebar = React.useCallback(() => {\r\n      return isMobile\r\n        ? setOpenMobile((open) => !open)\r\n        : setOpen((open) => !open)\r\n    }, [isMobile, setOpen, setOpenMobile])\r\n\r\n    // Adds a keyboard shortcut to toggle the sidebar.\r\n    React.useEffect(() => {\r\n      const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (\r\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey)\r\n        ) {\r\n          event.preventDefault()\r\n          toggleSidebar()\r\n        }\r\n      }\r\n\r\n      globalThis.addEventListener(\"keydown\", handleKeyDown)\r\n      return () => globalThis.removeEventListener(\"keydown\", handleKeyDown)\r\n    }, [toggleSidebar])\r\n\r\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n    // This makes it easier to style the sidebar with Tailwind classes.\r\n    const state = open ? \"expanded\" : \"collapsed\"\r\n\r\n    const contextValue = React.useMemo<SidebarContext>(\r\n      () => ({\r\n        state,\r\n        open,\r\n        setOpen,\r\n        isMobile,\r\n        openMobile,\r\n        setOpenMobile,\r\n        toggleSidebar,\r\n      }),\r\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\r\n    )\r\n\r\n    return (\r\n      <SidebarContext.Provider value={contextValue}>\r\n        <TooltipProvider delayDuration={0}>\r\n          <div\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH,\r\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\r\n                ...style,\r\n              } as React.CSSProperties\r\n            }\r\n            className={cn(\r\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\r\n              className\r\n            )}\r\n            ref={ref}\r\n            {...props}\r\n          >\r\n            {children}\r\n          </div>\r\n        </TooltipProvider>\r\n      </SidebarContext.Provider>\r\n    )\r\n  }\r\n)\r\nSidebarProvider.displayName = \"SidebarProvider\"\r\n\r\nconst Sidebar = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    side?: \"left\" | \"right\"\r\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\r\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\r\n  }\r\n>(\r\n  (\r\n    {\r\n      side = \"left\",\r\n      variant = \"sidebar\",\r\n      collapsible = \"offcanvas\",\r\n      className,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\r\n\r\n    if (collapsible === \"none\") {\r\n      return (\r\n        <div\r\n          className={cn(\r\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\r\n            className\r\n          )}\r\n          ref={ref}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (isMobile) {\r\n      return (\r\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n          <SheetContent\r\n            data-sidebar=\"sidebar\"\r\n            data-mobile=\"true\"\r\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\r\n              } as React.CSSProperties\r\n            }\r\n            side={side}\r\n          >\r\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n          </SheetContent>\r\n        </Sheet>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className=\"group peer hidden md:block text-sidebar-foreground\"\r\n        data-state={state}\r\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\r\n        data-variant={variant}\r\n        data-side={side}\r\n      >\r\n        {/* This is what handles the sidebar gap on desktop */}\r\n        <div\r\n          className={cn(\r\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\r\n            \"group-data-[collapsible=offcanvas]:w-0\",\r\n            \"group-data-[side=right]:rotate-180\",\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\r\n          )}\r\n        />\r\n        <div\r\n          className={cn(\r\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\r\n            side === \"left\"\r\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\r\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\r\n            // Adjust the padding for floating and inset variants.\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\r\n            className\r\n          )}\r\n          {...props}\r\n        >\r\n          <div\r\n            data-sidebar=\"sidebar\"\r\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\nSidebar.displayName = \"Sidebar\"\r\n\r\nconst SidebarTrigger = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<typeof Button>\r\n>(({ className, onClick, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      data-sidebar=\"trigger\"\r\n      variant=\"ghost\"\r\n      size=\"icon\"\r\n      className={cn(\"h-7 w-7\", className)}\r\n      onClick={(event) => {\r\n        onClick?.(event)\r\n        toggleSidebar()\r\n      }}\r\n      {...props}\r\n    >\r\n      <PanelLeft />\r\n      <span className=\"sr-only\">Toggle Sidebar</span>\r\n    </Button>\r\n  )\r\n})\r\nSidebarTrigger.displayName = \"SidebarTrigger\"\r\n\r\nconst SidebarRail = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\">\r\n>(({ className, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <button\r\n      ref={ref}\r\n      data-sidebar=\"rail\"\r\n      aria-label=\"Toggle Sidebar\"\r\n      tabIndex={-1}\r\n      onClick={toggleSidebar}\r\n      title=\"Toggle Sidebar\"\r\n      className={cn(\r\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\r\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\r\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\r\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\r\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\r\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarRail.displayName = \"SidebarRail\"\r\n\r\nconst SidebarInset = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"main\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <main\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\r\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInset.displayName = \"SidebarInset\"\r\n\r\nconst SidebarInput = React.forwardRef<\r\n  HTMLInputElement,\r\n  React.ComponentProps<typeof Input>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Input\r\n      ref={ref}\r\n      data-sidebar=\"input\"\r\n      className={cn(\r\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInput.displayName = \"SidebarInput\"\r\n\r\nconst SidebarHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"header\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarHeader.displayName = \"SidebarHeader\"\r\n\r\nconst SidebarFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"footer\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarFooter.displayName = \"SidebarFooter\"\r\n\r\nconst SidebarSeparator = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof Separator>\r\n>(({ className, ...props }, ref) => (\r\n    <Separator\r\n      ref={ref}\r\n      data-sidebar=\"separator\"\r\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\r\n      {...props}\r\n    />\r\n))\r\nSidebarSeparator.displayName = \"SidebarSeparator\"\r\n\r\nconst SidebarContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"content\"\r\n      className={cn(\r\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarContent.displayName = \"SidebarContent\"\r\n\r\nconst SidebarGroup = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"group\"\r\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroup.displayName = \"SidebarGroup\"\r\n\r\nconst SidebarGroupLabel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"div\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-label\"\r\n      className={cn(\r\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\r\n\r\nconst SidebarGroupAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-action\"\r\n      className={cn(\r\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\r\n\r\nconst SidebarGroupContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"group-content\"\r\n    className={cn(\"w-full text-sm\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\r\n\r\nconst SidebarMenu = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu\"\r\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenu.displayName = \"SidebarMenu\"\r\n\r\nconst SidebarMenuItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ className, ...props }, ref) => (\r\n  <li\r\n    ref={ref}\r\n    data-sidebar=\"menu-item\"\r\n    className={cn(\"group/menu-item relative\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\r\n\r\nconst sidebarMenuButtonVariants = cva(\r\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\r\n        outline:\r\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\r\n      },\r\n      size: {\r\n        default: \"h-8 text-sm\",\r\n        sm: \"h-7 text-xs\",\r\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst SidebarMenuButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    isActive?: boolean\r\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\r\n  } & VariantProps<typeof sidebarMenuButtonVariants>\r\n>(\r\n  (\r\n    {\r\n      asChild = false,\r\n      isActive = false,\r\n      variant = \"default\",\r\n      size = \"default\",\r\n      tooltip,\r\n      className,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    const { isMobile, state } = useSidebar()\r\n\r\n    const button = (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"menu-button\"\r\n        data-size={size}\r\n        data-active={isActive}\r\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\r\n        {...props}\r\n      />\r\n    )\r\n\r\n    if (!tooltip) {\r\n      return button\r\n    }\r\n\r\n    if (typeof tooltip === \"string\") {\r\n      tooltip = {\r\n        children: tooltip,\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n        <TooltipContent\r\n          side=\"right\"\r\n          align=\"center\"\r\n          hidden={state !== \"collapsed\" || isMobile}\r\n          {...tooltip}\r\n        />\r\n      </Tooltip>\r\n    )\r\n  }\r\n)\r\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\r\n\r\nconst SidebarMenuAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    showOnHover?: boolean\r\n  }\r\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-action\"\r\n      className={cn(\r\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"peer-data-[size=sm]/menu-button:top-1\",\r\n        \"peer-data-[size=default]/menu-button:top-1.5\",\r\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        showOnHover &&\r\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\r\n\r\nconst SidebarMenuBadge = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"menu-badge\"\r\n    className={cn(\r\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\r\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\r\n      \"peer-data-[size=sm]/menu-button:top-1\",\r\n      \"peer-data-[size=default]/menu-button:top-1.5\",\r\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\r\n\r\nconst SidebarMenuSkeleton = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    showIcon?: boolean\r\n  }\r\n>(({ className, showIcon = false, ...props }, ref) => {\r\n  // Random width between 50 to 90%.\r\n  const width = React.useMemo(() => {\r\n    return `${Math.floor(Math.random() * 40) + 50}%`\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-skeleton\"\r\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\r\n      {...props}\r\n    >\r\n      {showIcon && (\r\n        <Skeleton\r\n          className=\"size-4 rounded-md\"\r\n          data-sidebar=\"menu-skeleton-icon\"\r\n        />\r\n      )}\r\n      <Skeleton\r\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\r\n        data-sidebar=\"menu-skeleton-text\"\r\n        style={\r\n          {\r\n            \"--skeleton-width\": width,\r\n          } as React.CSSProperties\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n})\r\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\r\n\r\nconst SidebarMenuSub = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu-sub\"\r\n    className={cn(\r\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\r\n\r\nconst SidebarMenuSubItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\r\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\r\n\r\nconst SidebarMenuSubButton = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentProps<\"a\"> & {\r\n    asChild?: boolean\r\n    size?: \"sm\" | \"md\"\r\n    isActive?: boolean\r\n  }\r\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"a\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(\r\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\r\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\r\n        size === \"sm\" && \"text-xs\",\r\n        size === \"md\" && \"text-sm\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\r\n\r\nexport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarGroup,\r\n  SidebarGroupAction,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarHeader,\r\n  SidebarInput,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuBadge,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSkeleton,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  SidebarProvider,\r\n  SidebarRail,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n  useSidebar,\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Skeleton.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/prefer-read-only-props",
        "severity": 2,
        "message": "Mark the props of the component as read-only.",
        "line": 3,
        "column": 19,
        "nodeType": "ObjectPattern",
        "messageId": "readOnlyProps",
        "endLine": 6,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "readOnlyPropsFix",
            "fix": { "range": [86, 122], "text": "Readonly<React.HTMLAttributes<HTMLDivElement>>" },
            "desc": "Mark the props as read-only"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { cn } from \"@/lib/utils\"\r\n\r\nfunction Skeleton({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n  return (\r\n    <div\r\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Skeleton }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Slider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Switch.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Table.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/table-header",
        "severity": 2,
        "message": "Add a valid header row or column to this \"<table>\".",
        "line": 10,
        "column": 5,
        "nodeType": "JSXElement",
        "endLine": 14,
        "endColumn": 7
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Table = React.forwardRef<\r\n  HTMLTableElement,\r\n  React.HTMLAttributes<HTMLTableElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"relative w-full overflow-auto\">\r\n    <table\r\n      ref={ref}\r\n      className={cn(\"w-full caption-bottom text-sm\", className)}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nTable.displayName = \"Table\"\r\n\r\nconst TableHeader = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\r\n))\r\nTableHeader.displayName = \"TableHeader\"\r\n\r\nconst TableBody = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tbody\r\n    ref={ref}\r\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableBody.displayName = \"TableBody\"\r\n\r\nconst TableFooter = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tfoot\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableFooter.displayName = \"TableFooter\"\r\n\r\nconst TableRow = React.forwardRef<\r\n  HTMLTableRowElement,\r\n  React.HTMLAttributes<HTMLTableRowElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tr\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableRow.displayName = \"TableRow\"\r\n\r\nconst TableHead = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.ThHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <th\r\n    ref={ref}\r\n    className={cn(\r\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableHead.displayName = \"TableHead\"\r\n\r\nconst TableCell = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.TdHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <td\r\n    ref={ref}\r\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCell.displayName = \"TableCell\"\r\n\r\nconst TableCaption = React.forwardRef<\r\n  HTMLTableCaptionElement,\r\n  React.HTMLAttributes<HTMLTableCaptionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <caption\r\n    ref={ref}\r\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCaption.displayName = \"TableCaption\"\r\n\r\nexport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableFooter,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableCaption,\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Tabs.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Toast.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Toggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\ToggleGroup.tsx",
    "messages": [
      {
        "ruleId": "unicorn/explicit-length-check",
        "severity": 2,
        "message": "Use `.size > 0` when checking size is not zero.",
        "line": 48,
        "column": 17,
        "nodeType": "MemberExpression",
        "messageId": "non-zero",
        "endLine": 48,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestion",
            "fix": { "range": [1480, 1492], "text": "context.size > 0" },
            "data": { "code": "> 0", "property": "size" },
            "desc": "Replace `.size` with `.size > 0`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\r\nimport { type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { toggleVariants } from \"@/components/ui/Toggle\"\r\n\r\nconst ToggleGroupContext = React.createContext<\r\n  VariantProps<typeof toggleVariants>\r\n>({\r\n  size: \"default\",\r\n  variant: \"default\",\r\n})\r\n\r\nconst ToggleGroup = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\r\n    VariantProps<typeof toggleVariants>\r\n>(({ className, variant, size, children, ...props }, ref) => (\r\n  <ToggleGroupPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\"flex items-center justify-center gap-1\", className)}\r\n    {...props}\r\n  >\r\n    <ToggleGroupContext.Provider value={{ variant, size }}>\r\n      {children}\r\n    </ToggleGroupContext.Provider>\r\n  </ToggleGroupPrimitive.Root>\r\n))\r\n\r\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\r\n\r\nconst ToggleGroupItem = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\r\n    VariantProps<typeof toggleVariants>\r\n>(({ className, children, variant, size, ...props }, ref) => {\r\n  const context = React.useContext(ToggleGroupContext)\r\n\r\n  return (\r\n    <ToggleGroupPrimitive.Item\r\n      ref={ref}\r\n      className={cn(\r\n        toggleVariants({\r\n          variant: context.variant || variant,\r\n          size: context.size || size,\r\n        }),\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </ToggleGroupPrimitive.Item>\r\n  )\r\n})\r\n\r\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\r\n\r\nexport { ToggleGroup, ToggleGroupItem }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\Tooltip.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\UseMobile.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\UseToast.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'actionTypes' is assigned a value but only used as a type.",
        "line": 21,
        "column": 7,
        "nodeType": null,
        "messageId": "usedOnlyAsType",
        "endLine": 21,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from \"react\"\r\n\r\nimport type {\r\n  ToastActionElement,\r\n  ToastProps,\r\n} from \"@/components/ui/toast\"\r\n\r\nconst TOAST_LIMIT = 1\r\nconst TOAST_REMOVE_DELAY = 1_000_000\r\n\r\ntype ToasterToast = ToastProps & {\r\n  id: string\r\n  title?: React.ReactNode\r\n  description?: React.ReactNode\r\n  action?: ToastActionElement\r\n}\r\n\r\nconst actionTypes = {\r\n  ADD_TOAST: \"ADD_TOAST\",\r\n  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n} as const\r\n\r\nlet count = 0\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\r\n  return count.toString()\r\n}\r\n\r\ntype ActionType = typeof actionTypes\r\n\r\ntype Action =\r\n  | {\r\n      type: ActionType[\"ADD_TOAST\"]\r\n      toast: ToasterToast\r\n    }\r\n  | {\r\n      type: ActionType[\"UPDATE_TOAST\"]\r\n      toast: Partial<ToasterToast>\r\n    }\r\n  | {\r\n      type: ActionType[\"DISMISS_TOAST\"]\r\n      toastId?: ToasterToast[\"id\"]\r\n    }\r\n  | {\r\n      type: ActionType[\"REMOVE_TOAST\"]\r\n      toastId?: ToasterToast[\"id\"]\r\n    }\r\n\r\ninterface State {\r\n  toasts: ToasterToast[]\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId)\r\n    dispatch({\r\n      type: \"REMOVE_TOAST\",\r\n      toastId: toastId,\r\n    })\r\n  }, TOAST_REMOVE_DELAY)\r\n\r\n  toastTimeouts.set(toastId, timeout)\r\n}\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"ADD_TOAST\": {\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      }\r\n    }\r\n\r\n    case \"UPDATE_TOAST\": {\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n        ),\r\n      }\r\n    }\r\n\r\n    case \"DISMISS_TOAST\": {\r\n      const { toastId } = action\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId) {\r\n        addToRemoveQueue(toastId)\r\n      } else {\r\n        for (const toast of state.toasts) {\r\n          addToRemoveQueue(toast.id)\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t\r\n        ),\r\n      }\r\n    }\r\n    case \"REMOVE_TOAST\": {\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst listeners: Array<(state: State) => void> = []\r\n\r\nlet memoryState: State = { toasts: [] }\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action)\r\n  for (const listener of listeners) {\r\n    listener(memoryState)\r\n  }\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, \"id\">\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId()\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: \"UPDATE_TOAST\",\r\n      toast: { ...props, id },\r\n    })\r\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\r\n\r\n  dispatch({\r\n    type: \"ADD_TOAST\",\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open) => {\r\n        if (!open) dismiss()\r\n      },\r\n    },\r\n  })\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  }\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState)\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState)\r\n    return () => {\r\n      const index = listeners.indexOf(setState)\r\n      if (index !== -1) {\r\n        listeners.splice(index, 1)\r\n      }\r\n    }\r\n  }, [state])\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n  }\r\n}\r\n\r\nexport { useToast, toast }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\accordion.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/deprecation",
        "severity": 2,
        "message": "'ElementRef' is deprecated.",
        "line": 12,
        "column": 9,
        "nodeType": null,
        "messageId": "deprecation",
        "endLine": 12,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\r\nimport { ChevronDown } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Accordion = AccordionPrimitive.Root\r\n\r\nconst AccordionItem = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\r\n>(({ className, ...props }, ref) => (\r\n  <AccordionPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\"border-b\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAccordionItem.displayName = \"AccordionItem\"\r\n\r\nconst AccordionTrigger = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <AccordionPrimitive.Header className=\"flex\">\r\n    <AccordionPrimitive.Trigger\r\n      ref={ref}\r\n      className={cn(\r\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\r\n    </AccordionPrimitive.Trigger>\r\n  </AccordionPrimitive.Header>\r\n))\r\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\r\n\r\nconst AccordionContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <AccordionPrimitive.Content\r\n    ref={ref}\r\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\r\n    {...props}\r\n  >\r\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\r\n  </AccordionPrimitive.Content>\r\n))\r\n\r\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\r\n\r\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\alert.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\avatar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\badge.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/prefer-read-only-props",
        "severity": 2,
        "message": "Mark the props of the component as read-only.",
        "line": 32,
        "column": 16,
        "nodeType": "ObjectPattern",
        "messageId": "readOnlyProps",
        "endLine": 32,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "readOnlyPropsFix",
            "fix": { "range": [1097, 1107], "text": "Readonly<BadgeProps>" },
            "desc": "Mark the props as read-only"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface BadgeProps\r\n  extends React.HTMLAttributes<HTMLSpanElement>,\r\n    VariantProps<typeof badgeVariants> {\r\n  variant?: \"default\" | \"secondary\" | \"destructive\" | \"outline\";\r\n}\r\n\r\nfunction Badge({ className, variant = \"default\", ...props }: BadgeProps) {\r\n  return (\r\n    <span className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  )\r\n}\r\n\r\nexport { Badge, badgeVariants }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\breadcrumb.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\calendar.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'props' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 57,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'props' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 58,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\r\nimport { DayPicker } from \"react-day-picker\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { buttonVariants } from \"@/components/ui/button\"\r\n\r\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\r\n\r\nfunction Calendar({\r\n  className,\r\n  classNames,\r\n  showOutsideDays = true,\r\n  ...props\r\n}: CalendarProps) {\r\n  return (\r\n    <DayPicker\r\n      showOutsideDays={showOutsideDays}\r\n      className={cn(\"p-3\", className)}\r\n      classNames={{\r\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\r\n        month: \"space-y-4\",\r\n        caption: \"flex justify-center pt-1 relative items-center\",\r\n        caption_label: \"text-sm font-medium\",\r\n        nav: \"space-x-1 flex items-center\",\r\n        nav_button: cn(\r\n          buttonVariants({ variant: \"outline\" }),\r\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\r\n        ),\r\n        nav_button_previous: \"absolute left-1\",\r\n        nav_button_next: \"absolute right-1\",\r\n        table: \"w-full border-collapse space-y-1\",\r\n        head_row: \"flex\",\r\n        head_cell:\r\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\r\n        row: \"flex w-full mt-2\",\r\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\r\n        day: cn(\r\n          buttonVariants({ variant: \"ghost\" }),\r\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\r\n        ),\r\n        day_range_end: \"day-range-end\",\r\n        day_selected:\r\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\r\n        day_today: \"bg-accent text-accent-foreground\",\r\n        day_outside:\r\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\r\n        day_disabled: \"text-muted-foreground opacity-50\",\r\n        day_range_middle:\r\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\r\n        day_hidden: \"invisible\",\r\n        ...classNames,\r\n      }}\r\n      components={{\r\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\r\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\nCalendar.displayName = \"Calendar\"\r\n\r\nexport { Calendar }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\card.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\carousel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\chart.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Payload' is defined but never used.",
        "line": 6,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 15
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'Payload'.",
        "line": 6,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 6,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [107, 124], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NameType' is defined but never used.",
        "line": 7,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 16
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'NameType'.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 7,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [119, 137], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ValueType' is defined but never used.",
        "line": 8,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 17
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'ValueType'.",
        "line": 8,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 8,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [137, 156], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 81,
        "column": 12,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 81,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [2713, 2717], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [2713, 2717], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 178,
        "column": 14,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 178,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [4894, 4898], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [4894, 4898], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 196,
        "column": 19,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 196,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .fill on an `any` value.",
        "line": 196,
        "column": 59,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 196,
        "endColumn": 63
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-argument",
        "severity": 2,
        "message": "Unsafe argument of type `any` assigned to a parameter of type `Payload<ValueType, NameType>[]`.",
        "line": 207,
        "column": 65,
        "nodeType": "MemberExpression",
        "messageId": "unsafeArgument",
        "endLine": 207,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 227,
        "column": 31,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 227,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 228,
        "column": 31,
        "nodeType": "Property",
        "messageId": "anyAssignment",
        "endLine": 228,
        "endColumn": 63
      },
      {
        "ruleId": "unicorn/no-null",
        "severity": 2,
        "message": "Use `undefined` instead of `null`.",
        "line": 281,
        "column": 14,
        "nodeType": "Literal",
        "messageId": "error",
        "endLine": 281,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "remove",
            "fix": { "range": [8717, 8721], "text": "" },
            "data": {},
            "desc": "Remove `null`."
          },
          {
            "messageId": "replace",
            "fix": { "range": [8717, 8721], "text": "undefined" },
            "data": {},
            "desc": "Replace `null` with `undefined`."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/restrict-template-expressions",
        "severity": 2,
        "message": "Invalid type \"DataKey<any>\" of template literal expression.",
        "line": 294,
        "column": 26,
        "nodeType": "LogicalExpression",
        "messageId": "invalidType",
        "endLine": 294,
        "endColumn": 60
      }
    ],
    "suppressedMessages": [],
    "errorCount": 12,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as RechartsPrimitive from \"recharts\"\r\nimport {\r\n  type Payload,\r\n  type NameType,\r\n  type ValueType,\r\n} from \"recharts/types/component/DefaultTooltipContent\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n// Format: { THEME_NAME: CSS_SELECTOR }\r\nconst THEMES = { light: \"\", dark: \".dark\" } as const\r\n\r\nexport type ChartConfig = {\r\n  [k in string]: {\r\n    label?: React.ReactNode\r\n    icon?: React.ComponentType\r\n  } & (\r\n    | { color?: string; theme?: never }\r\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\r\n  )\r\n}\r\n\r\ntype ChartContextProps = {\r\n  config: ChartConfig\r\n}\r\n\r\nconst ChartContext = React.createContext<ChartContextProps | undefined>(undefined)\r\n\r\nfunction useChart() {\r\n  const context = React.useContext(ChartContext)\r\n\r\n  if (!context) {\r\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst ChartContainer = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    config: ChartConfig\r\n    children: React.ComponentProps<\r\n      typeof RechartsPrimitive.ResponsiveContainer\r\n    >[\"children\"]\r\n  }\r\n>(({ id, className, children, config, ...props }, ref) => {\r\n  const uniqueId = React.useId()\r\n  const chartId = `chart-${id || uniqueId.replaceAll(':', '')}`\r\n\r\n  return (\r\n    <ChartContext.Provider value={{ config }}>\r\n      <div\r\n        data-chart={chartId}\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        <ChartStyle id={chartId} config={config} />\r\n        <RechartsPrimitive.ResponsiveContainer>\r\n          {children}\r\n        </RechartsPrimitive.ResponsiveContainer>\r\n      </div>\r\n    </ChartContext.Provider>\r\n  )\r\n})\r\nChartContainer.displayName = \"Chart\"\r\n\r\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\r\n  const colorConfig = Object.entries(config).filter(\r\n    ([_, config]) => config.theme || config.color\r\n  )\r\n\r\n  if (colorConfig.length === 0) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <style\r\n      dangerouslySetInnerHTML={{\r\n        __html: Object.entries(THEMES)\r\n          .map(\r\n            ([theme, prefix]) => `\r\n${prefix} [data-chart=${id}] {\r\n${colorConfig\r\n  .map(([key, itemConfig]) => {\r\n    const color =\r\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\r\n      itemConfig.color\r\n    return color ? `  --color-${key}: ${color};` : undefined\r\n  })\r\n  .join(\"\\n\")}\r\n}\r\n`\r\n          )\r\n          .join(\"\\n\"),\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nconst ChartTooltip = RechartsPrimitive.Tooltip\r\n\r\nconst ChartTooltipContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\r\n    React.ComponentProps<\"div\"> & {\r\n      hideLabel?: boolean\r\n      hideIndicator?: boolean\r\n      indicator?: \"line\" | \"dot\" | \"dashed\"\r\n      nameKey?: string\r\n      labelKey?: string\r\n    }\r\n>(\r\n  (\r\n    {\r\n      active,\r\n      payload,\r\n      className,\r\n      indicator = \"dot\",\r\n      hideLabel = false,\r\n      hideIndicator = false,\r\n      label,\r\n      labelFormatter,\r\n      labelClassName,\r\n      formatter,\r\n      color,\r\n      nameKey,\r\n      labelKey,\r\n    },\r\n    ref\r\n  ) => {\r\n    const { config } = useChart()\r\n\r\n    const tooltipLabel = React.useMemo(() => {\r\n      if (hideLabel || !payload?.length) {\r\n        return\r\n      }\r\n\r\n      const [item] = payload\r\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\r\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\r\n      const value =\r\n        !labelKey && typeof label === \"string\"\r\n          ? config[label]?.label || label\r\n          : itemConfig?.label\r\n\r\n      if (labelFormatter) {\r\n        return (\r\n          <div className={cn(\"font-medium\", labelClassName)}>\r\n            {labelFormatter(value, payload)}\r\n          </div>\r\n        )\r\n      }\r\n\r\n      if (!value) {\r\n        return\r\n      }\r\n\r\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\r\n    }, [\r\n      label,\r\n      labelFormatter,\r\n      payload,\r\n      hideLabel,\r\n      labelClassName,\r\n      config,\r\n      labelKey,\r\n    ])\r\n\r\n    if (!active || !payload?.length) {\r\n      return null\r\n    }\r\n\r\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\r\n          className\r\n        )}\r\n      >\r\n        {nestLabel ? undefined : tooltipLabel}\r\n        <div className=\"grid gap-1.5\">\r\n          {payload.map((item, index) => {\r\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\r\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\r\n            const indicatorColor = color || item.payload?.fill || item.color\r\n\r\n            return (\r\n              <div\r\n                key={item.dataKey}\r\n                className={cn(\r\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\r\n                  indicator === \"dot\" && \"items-center\"\r\n                )}\r\n              >\r\n                {formatter && item?.value !== undefined && item.name ? (\r\n                  formatter(item.value, item.name, item, index, item.payload)\r\n                ) : (\r\n                  <>\r\n                    {itemConfig?.icon ? (\r\n                      <itemConfig.icon />\r\n                    ) : (\r\n                      !hideIndicator && (\r\n                        <div\r\n                          className={cn(\r\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\r\n                            {\r\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\r\n                              \"w-1\": indicator === \"line\",\r\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\r\n                                indicator === \"dashed\",\r\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\r\n                            }\r\n                          )}\r\n                          style={\r\n                            {\r\n                              \"--color-bg\": indicatorColor,\r\n                              \"--color-border\": indicatorColor,\r\n                            } as React.CSSProperties\r\n                          }\r\n                        />\r\n                      )\r\n                    )}\r\n                    <div\r\n                      className={cn(\r\n                        \"flex flex-1 justify-between leading-none\",\r\n                        nestLabel ? \"items-end\" : \"items-center\"\r\n                      )}\r\n                    >\r\n                      <div className=\"grid gap-1.5\">\r\n                        {nestLabel ? tooltipLabel : undefined}\r\n                        <span className=\"text-muted-foreground\">\r\n                          {itemConfig?.label || item.name}\r\n                        </span>\r\n                      </div>\r\n                      {item.value && (\r\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\r\n                          {item.value.toLocaleString()}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\nChartTooltipContent.displayName = \"ChartTooltip\"\r\n\r\nconst ChartLegend = RechartsPrimitive.Legend\r\n\r\nconst ChartLegendContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> &\r\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\r\n      hideIcon?: boolean\r\n      nameKey?: string\r\n    }\r\n>(\r\n  (\r\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\r\n    ref\r\n  ) => {\r\n    const { config } = useChart()\r\n\r\n    if (!payload?.length) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex items-center justify-center gap-4\",\r\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\r\n          className\r\n        )}\r\n      >\r\n        {payload.map((item) => {\r\n          const key = `${nameKey || item.dataKey || \"value\"}`\r\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\r\n\r\n          return (\r\n            <div\r\n              key={item.value as string}\r\n              className={cn(\r\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\r\n              )}\r\n            >\r\n              {itemConfig?.icon && !hideIcon ? (\r\n                <itemConfig.icon />\r\n              ) : (\r\n                <div\r\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\r\n                  style={{\r\n                    backgroundColor: item.color,\r\n                  }}\r\n                />\r\n              )}\r\n              {itemConfig?.label}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n)\r\nChartLegendContent.displayName = \"ChartLegend\"\r\n\r\n// Helper to extract item config from a payload.\r\nfunction getPayloadConfigFromPayload(\r\n  config: ChartConfig,\r\n  payload: unknown,\r\n  key: string\r\n) {\r\n  if (typeof payload !== \"object\" || payload === null) {\r\n    return\r\n  }\r\n\r\n  const payloadPayload =\r\n    \"payload\" in payload &&\r\n    typeof payload.payload === \"object\" &&\r\n    payload.payload !== null\r\n      ? payload.payload\r\n      : undefined\r\n\r\n  let configLabelKey: string = key\r\n\r\n  if (\r\n    key in payload &&\r\n    typeof payload[key as keyof typeof payload] === \"string\"\r\n  ) {\r\n    configLabelKey = payload[key as keyof typeof payload] as string\r\n  } else if (\r\n    payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\r\n  ) {\r\n    configLabelKey = payloadPayload[\r\n      key as keyof typeof payloadPayload\r\n    ] as string\r\n  }\r\n\r\n  return configLabelKey in config\r\n    ? config[configLabelKey]\r\n    : config[key]\r\n}\r\n\r\nexport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n  ChartLegend,\r\n  ChartLegendContent,\r\n  ChartStyle,\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\checkbox.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\collapsible.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\command.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\dialog.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/deprecation",
        "severity": 2,
        "message": "'ElementRef' is deprecated.",
        "line": 18,
        "column": 9,
        "nodeType": null,
        "messageId": "deprecation",
        "endLine": 18,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\r\nimport { X } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Dialog = DialogPrimitive.Root\r\n\r\nconst DialogTrigger = DialogPrimitive.Trigger\r\n\r\nconst DialogPortal = DialogPrimitive.Portal\r\n\r\nconst DialogClose = DialogPrimitive.Close\r\n\r\nconst DialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Overlay\r\n    ref={ref}\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\r\n\r\nconst DialogContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <DialogPortal>\r\n    <DialogOverlay />\r\n    <DialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\r\n        <X className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Close</span>\r\n      </DialogPrimitive.Close>\r\n    </DialogPrimitive.Content>\r\n  </DialogPortal>\r\n))\r\nDialogContent.displayName = DialogPrimitive.Content.displayName\r\n\r\nconst DialogHeader = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nDialogHeader.displayName = \"DialogHeader\"\r\n\r\nconst DialogFooter = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nDialogFooter.displayName = \"DialogFooter\"\r\n\r\nconst DialogTitle = React.forwardRef<\r\n  HTMLHeadingElement,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-lg font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDialogTitle.displayName = DialogPrimitive.Title.displayName\r\n\r\nconst DialogDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nDialogDescription.displayName = DialogPrimitive.Description.displayName\r\n\r\nexport {\r\n  Dialog,\r\n  DialogPortal,\r\n  DialogOverlay,\r\n  DialogClose,\r\n  DialogTrigger,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogFooter,\r\n  DialogTitle,\r\n  DialogDescription,\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\drawer.tsx",
    "messages": [
      {
        "ruleId": "sonarjs/deprecation",
        "severity": 2,
        "message": "'ElementRef' is deprecated.",
        "line": 26,
        "column": 9,
        "nodeType": null,
        "messageId": "deprecation",
        "endLine": 26,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Drawer as DrawerPrimitive } from \"vaul\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Drawer = ({\r\n  shouldScaleBackground = true,\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\r\n  <DrawerPrimitive.Root\r\n    shouldScaleBackground={shouldScaleBackground}\r\n    {...props}\r\n  />\r\n)\r\nDrawer.displayName = \"Drawer\"\r\n\r\nconst DrawerTrigger = DrawerPrimitive.Trigger\r\n\r\nconst DrawerPortal = DrawerPrimitive.Portal\r\n\r\nconst DrawerClose = DrawerPrimitive.Close\r\n\r\nconst DrawerOverlay = React.forwardRef<\r\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <DrawerPrimitive.Overlay\r\n    ref={ref}\r\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\r\n    {...props}\r\n  />\r\n))\r\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\r\n\r\nconst DrawerContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <DrawerPortal>\r\n    <DrawerOverlay />\r\n    <DrawerPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\r\n      {children}\r\n    </DrawerPrimitive.Content>\r\n  </DrawerPortal>\r\n))\r\nDrawerContent.displayName = \"DrawerContent\"\r\n\r\nconst DrawerHeader = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\r\n    {...props}\r\n  />\r\n)\r\nDrawerHeader.displayName = \"DrawerHeader\"\r\n\r\nconst DrawerFooter = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\r\n    {...props}\r\n  />\r\n)\r\nDrawerFooter.displayName = \"DrawerFooter\"\r\n\r\nconst DrawerTitle = React.forwardRef<\r\n  HTMLHeadingElement,\r\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <DrawerPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-lg font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\r\n\r\nconst DrawerDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <DrawerPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\r\n\r\nexport {\r\n  Drawer,\r\n  DrawerPortal,\r\n  DrawerOverlay,\r\n  DrawerTrigger,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerFooter,\r\n  DrawerTitle,\r\n  DrawerDescription,\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\form.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\input.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\pagination.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\resizable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\sonner.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\textarea.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\components\\ui\\toaster.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ToastType' is defined but never used.",
        "line": 12,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 33
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'ToastType'.",
        "line": 12,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 12,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [198, 263], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\nimport { useToast } from \"@/hooks/UseToast\"\r\nimport {\r\n  Toast,\r\n  ToastClose,\r\n  ToastDescription,\r\n  ToastProvider,\r\n  ToastTitle,\r\n  ToastViewport,\r\n} from \"@/components/ui/toast\"\r\nimport type { Toast as ToastType } from \"@/components/ui/toast\"\r\nimport type { ToasterToast } from \"@/hooks/UseToast\"\r\n\r\nexport function Toaster() {\r\n  const { toasts }: { toasts: ToasterToast[] } = useToast()\r\n\r\n  return (\r\n    <ToastProvider>\r\n      {toasts.map((toast: ToasterToast) => {\r\n        const { id, title, description, action, ...props } = toast;\r\n        return (\r\n          <Toast key={id} {...props}>\r\n            <div className=\"grid gap-1\">\r\n              {title && <ToastTitle>{title}</ToastTitle>}\r\n              {description && (\r\n                <ToastDescription>{description}</ToastDescription>\r\n              )}\r\n            </div>\r\n            {action}\r\n            <ToastClose />\r\n          </Toast>\r\n        )\r\n      })}\r\n      <ToastViewport />\r\n    </ToastProvider>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\hooks\\UseMobile.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\hooks\\UseToast.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'actionTypes' is assigned a value but only used as a type.",
        "line": 21,
        "column": 7,
        "nodeType": null,
        "messageId": "usedOnlyAsType",
        "endLine": 21,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\"\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from \"react\"\r\n\r\nimport type {\r\n  ToastActionElement,\r\n  ToastProps,\r\n} from \"@/components/ui/toast\"\r\n\r\nconst TOAST_LIMIT = 1\r\nconst TOAST_REMOVE_DELAY = 1_000_000\r\n\r\nexport type ToasterToast = ToastProps & {\r\n  id: string\r\n  title?: React.ReactNode\r\n  description?: React.ReactNode\r\n  action?: ToastActionElement\r\n}\r\n\r\nconst actionTypes = {\r\n  ADD_TOAST: \"ADD_TOAST\",\r\n  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n} as const\r\n\r\nlet count = 0\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\r\n  return count.toString()\r\n}\r\n\r\ntype ActionType = typeof actionTypes\r\n\r\ntype Action =\r\n  | {\r\n      type: ActionType[\"ADD_TOAST\"]\r\n      toast: ToasterToast\r\n    }\r\n  | {\r\n      type: ActionType[\"UPDATE_TOAST\"]\r\n      toast: Partial<ToasterToast>\r\n    }\r\n  | {\r\n      type: ActionType[\"DISMISS_TOAST\"]\r\n      toastId?: ToasterToast[\"id\"]\r\n    }\r\n  | {\r\n      type: ActionType[\"REMOVE_TOAST\"]\r\n      toastId?: ToasterToast[\"id\"]\r\n    }\r\n\r\ninterface State {\r\n  toasts: ToasterToast[]\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId)\r\n    dispatch({\r\n      type: \"REMOVE_TOAST\",\r\n      toastId: toastId,\r\n    })\r\n  }, TOAST_REMOVE_DELAY)\r\n\r\n  toastTimeouts.set(toastId, timeout)\r\n}\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"ADD_TOAST\": {\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      }\r\n    }\r\n\r\n    case \"UPDATE_TOAST\": {\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n        ),\r\n      }\r\n    }\r\n\r\n    case \"DISMISS_TOAST\": {\r\n      const { toastId } = action\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId) {\r\n        addToRemoveQueue(toastId)\r\n      } else {\r\n        for (const toast of state.toasts) {\r\n          addToRemoveQueue(toast.id)\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t\r\n        ),\r\n      }\r\n    }\r\n    case \"REMOVE_TOAST\": {\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst listeners: Array<(state: State) => void> = []\r\n\r\nlet memoryState: State = { toasts: [] }\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action)\r\n  for (const listener of listeners) {\r\n    listener(memoryState)\r\n  }\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, \"id\">\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId()\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: \"UPDATE_TOAST\",\r\n      toast: { ...props, id },\r\n    })\r\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\r\n\r\n  dispatch({\r\n    type: \"ADD_TOAST\",\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open) => {\r\n        if (!open) dismiss()\r\n      },\r\n    },\r\n  })\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  }\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState)\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState)\r\n    return () => {\r\n      const index = listeners.indexOf(setState)\r\n      if (index !== -1) {\r\n        listeners.splice(index, 1)\r\n      }\r\n    }\r\n  }, [state])\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n  }\r\n}\r\n\r\nexport { useToast, toast }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\ScraperEngine.ts",
    "messages": [
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 348,
        "column": 39,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 348,
        "endColumn": 52
      },
      {
        "ruleId": "sonarjs/pseudo-random",
        "severity": 2,
        "message": "Make sure that using this pseudorandom number generator is safe here.",
        "line": 353,
        "column": 39,
        "nodeType": "CallExpression",
        "messageId": "safeGenerator",
        "endLine": 353,
        "endColumn": 52
      },
      {
        "ruleId": "@typescript-eslint/only-throw-error",
        "severity": 2,
        "message": "Expected an error object to be thrown.",
        "line": 381,
        "column": 11,
        "nodeType": "TSNonNullExpression",
        "messageId": "object",
        "endLine": 381,
        "endColumn": 21
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 25 to the 15 allowed.",
        "line": 428,
        "column": 3,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 428,
        "endColumn": 18
      },
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.",
        "line": 502,
        "column": 11,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 502,
        "endColumn": 27
      },
      {
        "ruleId": "sonarjs/slow-regex",
        "severity": 2,
        "message": "Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.",
        "line": 536,
        "column": 24,
        "nodeType": "Literal",
        "endLine": 536,
        "endColumn": 52
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 618,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 618,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 654,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 654,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .coordinates on an `any` value.",
        "line": 655,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 655,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .coordinates on an `any` value.",
        "line": 656,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 656,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .coordinates on an `any` value.",
        "line": 658,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 658,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .coordinates on an `any` value.",
        "line": 659,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 659,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 661,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 661,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 697,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 697,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 730,
        "column": 7,
        "nodeType": "ReturnStatement",
        "messageId": "unsafeReturn",
        "endLine": 730,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 15,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": " import { firecrawl } from \"./firecrawl\"; // Import the firecrawl singleton\r\n\r\ninterface InstagramPost {\r\n  id: string;\r\n  caption: string;\r\n  timestamp: string;\r\n  location: string;\r\n  hashtags: string[];\r\n  engagement: { likes: number; comments: number };\r\n}\r\n\r\ninterface InstagramProfile {\r\n  followers: number;\r\n  following: number;\r\n  posts_count: number;\r\n  bio: string;\r\n  contact_info: { email: string; phone: string };\r\n}\r\n\r\ninterface FacebookPost {\r\n  id: string;\r\n  content: string;\r\n  timestamp: string;\r\n  reactions: { likes: number; loves: number; shares: number };\r\n  comments: number;\r\n}\r\n\r\ninterface FacebookPageInfo {\r\n  likes: number;\r\n  followers: number;\r\n  check_ins: number;\r\n  about: string;\r\n  hours: Record<string, string>;\r\n}\r\n\r\ninterface TwitterTweet {\r\n  id: string;\r\n  text: string;\r\n  timestamp: string;\r\n  retweets: number;\r\n  likes: number;\r\n  replies: number;\r\n  location: string;\r\n}\r\n\r\ninterface TwitterProfile {\r\n  followers: number;\r\n  following: number;\r\n  tweets_count: number;\r\n  bio: string;\r\n  location: string;\r\n  website: string;\r\n}\r\n\r\ninterface InstagramData {\r\n  posts: InstagramPost[];\r\n  profile: InstagramProfile;\r\n}\r\n\r\ninterface FacebookData {\r\n  posts: FacebookPost[];\r\n  page_info: FacebookPageInfo;\r\n}\r\n\r\ninterface TwitterData {\r\n  tweets: TwitterTweet[];\r\n  profile: TwitterProfile;\r\n}\r\n\r\nexport interface WebsiteScrapeData {\r\n  markdown?: string;\r\n  html?: string;\r\n  metadata?: Record<string, unknown>;\r\n  is_fallback?: boolean;\r\n}\r\n\r\nexport interface ExtractedHTMLData {\r\n  name?: string;\r\n  location?: string;\r\n  phone?: string;\r\n  hours?: string;\r\n  menu?: { item: string; price: string }[];\r\n}\r\n\r\ninterface ScrapeResult {\r\n  success: boolean;\r\n  error?: string;\r\n  data?: InstagramData | FacebookData | TwitterData | WebsiteScrapeData | ExtractedHTMLData;\r\n  timestamp: string;\r\n  source: string;\r\n  note?: string;\r\n}\r\n\r\n// Core scraping engine with anti-detection measures\r\nexport class ScraperEngine {\r\n  private userAgents: string[];\r\n  private proxies: string[];\r\n  private requestDelay: number;\r\n  private maxRetries: number;\r\n\r\n  constructor() {\r\n    this.userAgents = [\r\n      \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\r\n      \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\r\n      \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\r\n    ];\r\n    this.proxies = [];\r\n    this.requestDelay = 2000;\r\n    this.maxRetries = 3;\r\n  }\r\n\r\n  async scrapeWebsite(url: string, _selectors?: Record<string, string>): Promise<ScrapeResult> {\r\n    try {\r\n      const firecrawlResult = await firecrawl.scrapeUrl(url, {\r\n        formats: [\"markdown\", \"html\"],\r\n        onlyMainContent: true,\r\n      });\r\n\r\n      if (!firecrawlResult.success || !firecrawlResult.data) {\r\n        throw new Error(firecrawlResult.error || \"Firecrawl scraping failed to return data.\");\r\n      }\r\n\r\n      const returnedData: WebsiteScrapeData = {};\r\n      if (firecrawlResult.data.markdown) {\r\n        returnedData.markdown = firecrawlResult.data.markdown;\r\n      }\r\n      if (firecrawlResult.data.html) {\r\n        returnedData.html = firecrawlResult.data.html;\r\n      }\r\n      if (firecrawlResult.data.metadata) {\r\n        returnedData.metadata = firecrawlResult.data.metadata;\r\n      }\r\n\r\n      if (!returnedData.markdown && !returnedData.html) {\r\n        throw new Error(\"Firecrawl returned no markdown or HTML content.\");\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: returnedData,\r\n        timestamp: new Date().toISOString(),\r\n        source: url,\r\n      };\r\n\r\n    } catch (error: unknown) {\r\n      console.warn(`Scraping error for ${url} using Firecrawl:`, error);\r\n      console.info(`Falling back to basic fetch for ${url}`);\r\n      try {\r\n        const response = await fetch(url, { headers: { \"User-Agent\": this.getRandomUserAgent() } });\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error ${response.status}: ${response.statusText} during fallback fetch.`);\r\n        }\r\n        const htmlContent = await response.text();\r\n        return {\r\n          success: true,\r\n          data: {\r\n            html: htmlContent,\r\n            is_fallback: true,\r\n          },\r\n          timestamp: new Date().toISOString(),\r\n          source: url,\r\n          note: \"Fetched using basic fetch as Firecrawl failed.\",\r\n        };\r\n      } catch (fallbackError: unknown) {\r\n        console.warn(`Fallback fetch error for ${url}:`, fallbackError);\r\n        return {\r\n          success: false,\r\n          error: fallbackError instanceof Error ? fallbackError.message : \"Unknown fallback fetch error\",\r\n          timestamp: new Date().toISOString(),\r\n          source: url,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  async scrapeSocialMedia(platform: string, handle: string): Promise<ScrapeResult> {\r\n    try {\r\n      await this.randomDelay(); // Mark as void to explicitly ignore promise\r\n\r\n      switch (platform) {\r\n        case \"instagram\": {\r\n          return this.scrapeInstagram(handle);\r\n        }\r\n        case \"facebook\": {\r\n          return this.scrapeFacebook(handle);\r\n        }\r\n        case \"twitter\": {\r\n          return this.scrapeTwitter(handle);\r\n        }\r\n        default: {\r\n          throw new Error(`Unsupported platform: ${platform}`);\r\n        }\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(`Social media scraping error for ${platform}/${handle}:`, error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n        timestamp: new Date().toISOString(),\r\n        source: `social_media:${platform}:${handle}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async scrapeInstagram(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay(); // Simulate network delay for social media scraping\r\n    return {\r\n      success: true,\r\n      data: {\r\n        posts: [\r\n          {\r\n            id: \"post_001\",\r\n            caption: \"Fresh tacos available now at Mission St! 🌮 #foodtruck #tacos\",\r\n            timestamp: new Date(Date.now() - 3_600_000).toISOString(),\r\n            location: \"Mission St, San Francisco\",\r\n            hashtags: [\"foodtruck\", \"tacos\", \"fresh\"],\r\n            engagement: { likes: 45, comments: 8 },\r\n          },\r\n        ],\r\n        profile: {\r\n          followers: 1250,\r\n          following: 340,\r\n          posts_count: 156,\r\n          bio: \"Best tacos in SF 🌮 Follow for daily locations!\",\r\n          contact_info: {\r\n            email: \"contact@tacoparadise.com\",\r\n            phone: \"+1-555-0456\",\r\n          },\r\n        },\r\n      } as InstagramData, // Type assertion\r\n      timestamp: new Date().toISOString(),\r\n      source: `instagram:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeFacebook(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay(); // Simulate network delay for social media scraping\r\n    return {\r\n      success: true,\r\n      data: {\r\n        posts: [\r\n          {\r\n            id: \"fb_post_001\",\r\n            content: \"Today we'll be at Union Square from 11 AM to 3 PM! Come try our new BBQ burger!\",\r\n            timestamp: new Date(Date.now() - 7_200_000).toISOString(),\r\n            reactions: { likes: 23, loves: 5, shares: 3 },\r\n            comments: 12,\r\n          },\r\n        ],\r\n        page_info: {\r\n          likes: 890,\r\n          followers: 1100,\r\n          check_ins: 450,\r\n          about: \"Gourmet food truck serving the Bay Area\",\r\n          hours: {\r\n            monday: \"11:00-15:00\",\r\n            tuesday: \"11:00-15:00\",\r\n            wednesday: \"11:00-15:00\",\r\n            thursday: \"11:00-15:00\",\r\n            friday: \"11:00-20:00\",\r\n            saturday: \"12:00-20:00\",\r\n            sunday: \"12:00-16:00\",\r\n          },\r\n        },\r\n      } as FacebookData, // Type assertion\r\n      timestamp: new Date().toISOString(),\r\n      source: `facebook:${handle}`,\r\n    };\r\n  }\r\n\r\n  private async scrapeTwitter(handle: string): Promise<ScrapeResult> {\r\n    await this.randomDelay(); // Simulate network delay for social media scraping\r\n    return {\r\n      success: true,\r\n      data: {\r\n        tweets: [\r\n          {\r\n            id: \"tweet_001\",\r\n            text: \"LIVE at Dolores Park! Fresh burritos and quesadillas available now 🌯\",\r\n            timestamp: new Date(Date.now() - 1_800_000).toISOString(),\r\n            retweets: 8,\r\n            likes: 34,\r\n            replies: 5,\r\n            location: \"Dolores Park, San Francisco\",\r\n          },\r\n        ],\r\n        profile: {\r\n          followers: 2340,\r\n          following: 567,\r\n          tweets_count: 1890,\r\n          bio: \"🚚 SF Food Truck | Fresh Mexican Food | Follow for locations\",\r\n          location: \"San Francisco, CA\",\r\n          website: \"https://tacoparadise.com\",\r\n        },\r\n      } as TwitterData, // Type assertion\r\n      timestamp: new Date().toISOString(),\r\n      source: `twitter:${handle}`,\r\n    };\r\n  }\r\n\r\n  // The extractDataFromHTML method is no longer directly used by scrapeWebsite's primary Firecrawl path.\r\n  // It might be used by a fallback or if direct HTML parsing is needed for other reasons.\r\n  // Removing the erroneously pasted social media scraping logic from here.\r\n  private extractDataFromHTML(html: string, selectors: Record<string, string>): ExtractedHTMLData {\r\n    const extractedData: ExtractedHTMLData = {};\r\n\r\n    for (const key of Object.keys(selectors)) {\r\n      switch (key) {\r\n        case \"name\": {\r\n          extractedData.name = \"Sample Food Truck Name\";\r\n          break;\r\n        }\r\n        case \"location\": {\r\n          extractedData.location = \"123 Sample St, San Francisco, CA\";\r\n          break;\r\n        }\r\n        case \"phone\": {\r\n          extractedData.phone = \"+1-555-0123\";\r\n          break;\r\n        }\r\n        case \"hours\": {\r\n          extractedData.hours = \"Mon-Fri: 11AM-8PM, Sat-Sun: 12PM-9PM\";\r\n          break;\r\n        }\r\n        case \"menu\": {\r\n          extractedData.menu = [\r\n            { item: \"Burger\", price: \"$12.99\" },\r\n            { item: \"Fries\", price: \"$4.99\" },\r\n            { item: \"Drink\", price: \"$2.99\" },\r\n          ];\r\n          break;\r\n        }\r\n        default: {\r\n          // This default case is problematic with a strict ExtractedHTMLData interface.\r\n          // If dynamic keys are truly needed, consider a more flexible type or\r\n          // re-evaluate the design. For now, removing the assignment to avoid error.\r\n          // extractedData[key] = `Sample ${key} data`;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return extractedData;\r\n  }\r\n\r\n  private getRandomUserAgent(): string {\r\n    // Using Math.random() for non-cryptographic purposes (e.g., selecting a user agent) is acceptable.\r\n    return this.userAgents[Math.floor(Math.random() * this.userAgents.length)];\r\n  }\r\n\r\n  private async randomDelay(): Promise<void> {\r\n    // Using Math.random() for non-cryptographic purposes (e.g., simulating delay) is acceptable.\r\n    const delay = this.requestDelay + Math.random() * 1000;\r\n    return new Promise((resolve) => setTimeout(resolve, delay));\r\n  }\r\n\r\n  async handleRateLimit(retryAfter: number): Promise<void> {\r\n    console.info(`Rate limited. Waiting ${retryAfter} seconds before retry...`)\r\n    return new Promise((resolve) => setTimeout(resolve, retryAfter * 1000))\r\n  }\r\n\r\n  async retryWithBackoff<T>(operation: () => Promise<T>, maxRetries: number = this.maxRetries): Promise<T> {\r\n    let lastError: unknown; // Changed to unknown\r\n\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        return await operation();\r\n      } catch (error: unknown) { // Catch error as unknown\r\n        lastError = error;\r\n\r\n        if (attempt === maxRetries) {\r\n          throw lastError; // Throw unknown error\r\n        }\r\n\r\n        const backoffDelay = Math.pow(2, attempt) * 1000;\r\n        console.info(`Attempt ${attempt} failed. Retrying in ${backoffDelay}ms...`);\r\n        await new Promise((resolve) => setTimeout(resolve, backoffDelay));\r\n      }\r\n    }\r\n\r\n    throw lastError!; // Assert lastError is defined before throwing\r\n  }\r\n}\r\n\r\ninterface LocationData {\r\n  current?: {\r\n    lat: number | undefined;\r\n    lng: number | undefined;\r\n    address?: string;\r\n  };\r\n}\r\n\r\ninterface ContactInfo {\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\ninterface OperatingHours {\r\n  [key: string]: {\r\n    open: string;\r\n    close: string;\r\n    closed: boolean;\r\n  };\r\n}\r\n\r\ninterface MenuItem {\r\n  name: string;\r\n  description?: string;\r\n  price: number;\r\n  dietary_tags?: string[];\r\n}\r\n\r\ninterface MenuCategory {\r\n  category: string;\r\n  items: MenuItem[];\r\n}\r\n\r\ninterface TruckData {\r\n  name: string;\r\n  location: LocationData;\r\n  contact?: ContactInfo;\r\n  operating_hours?: OperatingHours;\r\n  menu?: MenuCategory[];\r\n  last_updated?: string;\r\n}\r\n\r\nexport class DataQualityAssessor {\r\n  assessTruckData(truckData: TruckData): { score: number; issues: string[] } {\r\n    const issues: string[] = [];\r\n    let score = 100;\r\n\r\n    if (!truckData.name || truckData.name.trim().length === 0) {\r\n      issues.push(\"Missing or empty truck name\");\r\n      score -= 20;\r\n    }\r\n\r\n    if (!truckData.location || !truckData.location.current) {\r\n      issues.push(\"Missing current location data\");\r\n      score -= 25;\r\n    } else {\r\n      if (truckData.location.current.lat === undefined || truckData.location.current.lng === undefined) {\r\n        issues.push(\"Missing GPS coordinates\");\r\n        score -= 15;\r\n      }\r\n      if (!truckData.location.current.address) {\r\n        issues.push(\"Missing address information\");\r\n        score -= 10;\r\n      }\r\n    }\r\n\r\n    if (truckData.contact) {\r\n      if (!truckData.contact.phone && !truckData.contact.email) {\r\n        issues.push(\"No phone or email contact available\");\r\n        score -= 15;\r\n      }\r\n      if (truckData.contact.phone && !this.isValidPhone(truckData.contact.phone)) {\r\n        issues.push(\"Invalid phone number format\");\r\n        score -= 5;\r\n      }\r\n      if (truckData.contact.email && !this.isValidEmail(truckData.contact.email)) {\r\n        issues.push(\"Invalid email format\");\r\n        score -= 5;\r\n      }\r\n    } else {\r\n      issues.push(\"Missing contact information\");\r\n      score -= 20;\r\n    }\r\n\r\n    if (!truckData.operating_hours || Object.keys(truckData.operating_hours).length === 0) {\r\n      issues.push(\"Missing operating hours\");\r\n      score -= 15;\r\n    }\r\n\r\n    if (!truckData.menu || truckData.menu.length === 0) {\r\n      issues.push(\"Missing menu information\");\r\n      score -= 10;\r\n    } else {\r\n      const menuIssues = this.validateMenuData(truckData.menu);\r\n      issues.push(...menuIssues);\r\n      score -= menuIssues.length * 2;\r\n    }\r\n\r\n    if (truckData.last_updated) {\r\n      const lastUpdate = new Date(truckData.last_updated);\r\n      const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);\r\n\r\n      if (daysSinceUpdate > 7) {\r\n        issues.push(\"Data is more than 7 days old\");\r\n        score -= 10;\r\n      } else if (daysSinceUpdate > 3) {\r\n        issues.push(\"Data is more than 3 days old\");\r\n        score -= 5;\r\n      }\r\n    }\r\n\r\n    return {\r\n      score: Math.max(0, score) / 100,\r\n      issues,\r\n    };\r\n  }\r\n\r\n  private validateMenuData(menu: MenuCategory[]): string[] {\r\n    const issues: string[] = [];\r\n\r\n    for (const [categoryIndex, category] of menu.entries()) {\r\n      if (!category.category || category.category.trim().length === 0) {\r\n        issues.push(`Menu category ${categoryIndex + 1} missing name`);\r\n      }\r\n\r\n      if (!category.items || category.items.length === 0) {\r\n        issues.push(`Menu category \"${category.category}\" has no items`);\r\n      } else {\r\n        for (const [itemIndex, item] of category.items.entries()) {\r\n          if (!item.name || item.name.trim().length === 0) {\r\n            issues.push(`Menu item ${itemIndex + 1} in \"${category.category}\" missing name`);\r\n          }\r\n          if (typeof item.price !== \"number\" || item.price <= 0) {\r\n            issues.push(`Menu item \"${item.name}\" has invalid price`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  private isValidPhone(phone: string): boolean {\r\n    // Regex for phone number validation. Removed duplicate characters in character class.\r\n    // This regex is not vulnerable to super-linear runtime due to backtracking.\r\n    const phoneRegex = /^\\+?[\\d\\s-()]{10,}$/;\r\n    return phoneRegex.test(phone);\r\n  }\r\n\r\n  private isValidEmail(email: string): boolean {\r\n    // Regex for email validation. This regex is not vulnerable to super-linear runtime due to backtracking.\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n}\r\n\r\ninterface GeminiLocationData {\r\n  address: string;\r\n  city: string;\r\n  state: string;\r\n  coordinates: {\r\n    lat: number | undefined;\r\n    lng: number | undefined;\r\n  };\r\n  confidence: number;\r\n}\r\n\r\ninterface GeminiOperatingHours {\r\n  monday: { open: string; close: string; closed: boolean };\r\n  tuesday: { open: string; close: string; closed: boolean };\r\n  wednesday: { open: string; close: string; closed: boolean };\r\n  thursday: { open: string; close: string; closed: boolean };\r\n  friday: { open: string; close: string; closed: boolean };\r\n  saturday: { open: string; close: string; closed: boolean };\r\n  sunday: { open: string; close: string; closed: boolean };\r\n}\r\n\r\ninterface GeminiSentimentAnalysis {\r\n  sentiment: \"positive\" | \"negative\" | \"neutral\";\r\n  score: number;\r\n  key_topics: string[];\r\n  summary: string;\r\n}\r\n\r\nexport class GeminiDataProcessor {\r\n  private apiKey: string;\r\n  private baseUrl: string;\r\n  private requestCount: number;\r\n  private tokenCount: number;\r\n  private dailyLimit: { requests: number; tokens: number };\r\n\r\n  constructor(apiKey: string) {\r\n    this.apiKey = apiKey;\r\n    this.baseUrl = \"https://generativelanguage.googleapis.com/v1beta\";\r\n    this.requestCount = 0;\r\n    this.tokenCount = 0;\r\n    this.dailyLimit = { requests: 1500, tokens: 32_000 };\r\n  }\r\n\r\n  async processMenuData(rawMenuText: string): Promise<{ categories: MenuCategory[] }> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error(\"Gemini API rate limit exceeded\");\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following food truck menu text and return a structured JSON format:\r\n        \r\n        ${rawMenuText}\r\n        \r\n        Return format:\r\n        {\r\n          \"categories\": [\r\n            {\r\n              \"name\": \"category_name\",\r\n              \"items\": [\r\n                {\r\n                  \"name\": \"item_name\",\r\n                  \"description\": \"item_description\",\r\n                  \"price\": 0.00,\r\n                  \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", etc.]\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n        \r\n        Only return valid JSON, no additional text.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      return JSON.parse(response);\r\n    } catch (error) {\r\n      console.error(\"Error processing menu data with Gemini:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async extractLocationFromText(text: string): Promise<GeminiLocationData> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error(\"Gemini API rate limit exceeded\");\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Extract location information from the following text and return structured data:\r\n        \r\n        \"${text}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"address\": \"full_address\",\r\n          \"city\": \"city_name\",\r\n          \"state\": \"state\",\r\n          \"coordinates\": {\r\n            \"lat\": 0.0,\r\n            \"lng\": 0.0\r\n          },\r\n          \"confidence\": 0.95\r\n        }\r\n        \r\n        If coordinates cannot be determined, set them to undefined. Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      const parsedResponse = JSON.parse(response);\r\n      if (parsedResponse.coordinates.lat === null) {\r\n        parsedResponse.coordinates.lat = undefined;\r\n      }\r\n      if (parsedResponse.coordinates.lng === null) {\r\n        parsedResponse.coordinates.lng = undefined;\r\n      }\r\n      return parsedResponse;\r\n    } catch (error) {\r\n      console.error(\"Error extracting location with Gemini:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiOperatingHours> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error(\"Gemini API rate limit exceeded\");\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Parse the following operating hours text and return standardized format:\r\n        \r\n        \"${hoursText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"monday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"tuesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"wednesday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"thursday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"friday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"saturday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false},\r\n          \"sunday\": {\"open\": \"HH:MM\", \"close\": \"HH:MM\", \"closed\": false}\r\n        }\r\n        \r\n        Use 24-hour format. If closed on a day, set \"closed\": true and omit open/close times.\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      return JSON.parse(response);\r\n    } catch (error) {\r\n      console.error(\"Error standardizing hours with Gemini:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async analyzeSentiment(reviewText: string): Promise<GeminiSentimentAnalysis> {\r\n    if (!this.canMakeRequest()) {\r\n      throw new Error(\"Gemini API rate limit exceeded\");\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\n        Analyze the sentiment of this food truck review and extract key insights:\r\n        \r\n        \"${reviewText}\"\r\n        \r\n        Return format:\r\n        {\r\n          \"sentiment\": \"positive|negative|neutral\",\r\n          \"score\": 0.85,\r\n          \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\"],\r\n          \"summary\": \"brief_summary_of_review\"\r\n        }\r\n        \r\n        Score should be between 0 (very negative) and 1 (very positive).\r\n        Only return valid JSON.\r\n      `;\r\n\r\n      const response = await this.makeGeminiRequest(prompt);\r\n      this.updateUsageCounters(1, prompt.length + response.length);\r\n\r\n      return JSON.parse(response);\r\n    } catch (error) {\r\n      console.error(\"Error analyzing sentiment with Gemini:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async makeGeminiRequest(prompt: string): Promise<string> {\r\n    // Simulate Gemini API call\r\n    // In real implementation, would make actual API call to Google Gemini\r\n\r\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API delay\r\n\r\n    // Mock responses based on prompt content\r\n    if (prompt.includes(\"menu text\")) {\r\n      return JSON.stringify({\r\n        categories: [\r\n          {\r\n            name: \"Burgers\",\r\n            items: [\r\n              {\r\n                name: \"Classic Cheeseburger\",\r\n                description: \"Beef patty with cheese, lettuce, tomato\",\r\n                price: 12.99,\r\n                dietary_tags: [],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      });\r\n    } else if (prompt.includes(\"location information\")) {\r\n      return JSON.stringify({\r\n        address: \"123 Market St, San Francisco, CA 94105\",\r\n        city: \"San Francisco\",\r\n        state: \"CA\",\r\n        coordinates: {\r\n          lat: 37.7749,\r\n          lng: -122.4194,\r\n        },\r\n        confidence: 0.95,\r\n      });\r\n    } else if (prompt.includes(\"operating hours\")) {\r\n      return JSON.stringify({\r\n        monday: { open: \"11:00\", close: \"15:00\", closed: false },\r\n        tuesday: { open: \"11:00\", close: \"15:00\", closed: false },\r\n        wednesday: { open: \"11:00\", close: \"15:00\", closed: false },\r\n        thursday: { open: \"11:00\", close: \"15:00\", closed: false },\r\n        friday: { open: \"11:00\", close: \"20:00\", closed: false },\r\n        saturday: { open: \"12:00\", close: \"20:00\", closed: false },\r\n        sunday: { open: \"12:00\", close: \"16:00\", closed: false },\r\n      });\r\n    } else if (prompt.includes(\"sentiment\")) {\r\n      return JSON.stringify({\r\n        sentiment: \"positive\",\r\n        score: 0.85,\r\n        key_topics: [\"food_quality\", \"service\"],\r\n        summary: \"Customer enjoyed the food and service\",\r\n      });\r\n    }\r\n\r\n    return '{\"processed\": true}';\r\n  }\r\n\r\n  private canMakeRequest(): boolean {\r\n    return this.requestCount < this.dailyLimit.requests && this.tokenCount < this.dailyLimit.tokens;\r\n  }\r\n\r\n  private updateUsageCounters(requests: number, tokens: number): void {\r\n    this.requestCount += requests;\r\n    this.tokenCount += tokens;\r\n  }\r\n\r\n  getUsageStats(): {\r\n    requests: { used: number; limit: number; remaining: number };\r\n    tokens: { used: number; limit: number; remaining: number };\r\n  } {\r\n    return {\r\n      requests: {\r\n        used: this.requestCount,\r\n        limit: this.dailyLimit.requests,\r\n        remaining: this.dailyLimit.requests - this.requestCount,\r\n      },\r\n      tokens: {\r\n        used: this.tokenCount,\r\n        limit: this.dailyLimit.tokens,\r\n        remaining: this.dailyLimit.tokens - this.tokenCount,\r\n      },\r\n    };\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ensureDefaultTrucksAreScraped' is defined but never used.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 39
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'ensureDefaultTrucksAreScraped'.",
        "line": 3,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 3,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestRemoveWholeStatement",
            "fix": { "range": [26, 92], "text": "" },
            "desc": "Remove this import statement"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DEFAULT_SCRAPE_URLS' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 29
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'DEFAULT_SCRAPE_URLS'.",
        "line": 4,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 4,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [103, 124], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DEFAULT_STALENESS_THRESHOLD_DAYS' is defined but never used.",
        "line": 4,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 63
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'DEFAULT_STALENESS_THRESHOLD_DAYS'.",
        "line": 4,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 4,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [122, 156], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'supabaseAdmin' is defined but never used.",
        "line": 5,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 23
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'supabaseAdmin'.",
        "line": 5,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 5,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [186, 201], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-assignment",
        "severity": 2,
        "message": "Unsafe assignment of an `any` value.",
        "line": 35,
        "column": 13,
        "nodeType": "VariableDeclarator",
        "messageId": "anyAssignment",
        "endLine": 35,
        "endColumn": 72
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .supabaseAdmin on an `any` value.",
        "line": 35,
        "column": 59,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 35,
        "endColumn": 72
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .from on an `any` value.",
        "line": 36,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 36,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .select on an `any` value.",
        "line": 37,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 37,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .or on an `any` value.",
        "line": 38,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 38,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
        "message": "Unsafe member access .limit on an `any` value.",
        "line": 39,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "unsafeMemberExpression",
        "endLine": 39,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/autoScraper.test.ts\r\n\r\nimport { ensureDefaultTrucksAreScraped } from './autoScraper';\r\nimport { DEFAULT_SCRAPE_URLS, DEFAULT_STALENESS_THRESHOLD_DAYS } from './config';\r\nimport { supabaseAdmin, ScrapingJobService } from './supabase';\r\nimport { processScrapingJob } from './pipelineProcessor'; // Import from refactored location\r\n\r\n// Mock dependencies\r\njest.mock('./config', () => ({\r\n  _DEFAULT_SCRAPE_URLS: ['https://example.com/default1'],\r\n  _DEFAULT_STALENESS_THRESHOLD_DAYS: 7,\r\n}));\r\n\r\njest.mock('./supabase', () => ({\r\n  supabaseAdmin: {\r\n    from: jest.fn().mockReturnThis(),\r\n    select: jest.fn().mockReturnThis(),\r\n    or: jest.fn().mockReturnThis(),\r\n    limit: jest.fn(),\r\n  },\r\n  ScrapingJobService: {\r\n    createJob: jest.fn(),\r\n    getJobsByStatus: jest.fn(),\r\n  },\r\n}));\r\n\r\njest.mock('./pipelineProcessor', () => ({\r\n  processScrapingJob: jest.fn(),\r\n}));\r\n\r\ndescribe('autoScraper', () => {\r\n  describe('ensureDefaultTrucksAreScraped', () => {\r\n    beforeEach(() => {\r\n      // Reset mocks using the mock object, not the real import\r\n      const supabaseMock = jest.requireMock('./supabase').supabaseAdmin;\r\n      (supabaseMock.from as jest.Mock).mockReset();\r\n      (supabaseMock.select as jest.Mock).mockReset();\r\n      (supabaseMock.or as jest.Mock).mockReset();\r\n      (supabaseMock.limit as jest.Mock).mockReset();\r\n      (ScrapingJobService.createJob as jest.Mock).mockReset();\r\n      (ScrapingJobService.getJobsByStatus as jest.Mock).mockReset();\r\n      (processScrapingJob as jest.Mock).mockReset();\r\n    });\r\n\r\n    it('should trigger initial scrape if truck does not exist and no pending job', async () => {\r\n      // Mock supabaseAdmin.from...limit to return { data: [], error: null } (no truck)\r\n      // Mock ScrapingJobService.getJobsByStatus to return [] (no pending jobs)\r\n      // Mock ScrapingJobService.createJob to return a mock job object\r\n      // Call ensureDefaultTrucksAreScraped\r\n      // Assert ScrapingJobService.createJob was called for the default URL\r\n      // Assert processScrapingJob was called with the new job's ID\r\n    });\r\n\r\n    it('should trigger re-scrape if truck data is stale and no pending job', async () => {\r\n      // Mock supabaseAdmin.from...limit to return a stale truck\r\n      // Mock ScrapingJobService.getJobsByStatus to return []\r\n      // Mock ScrapingJobService.createJob\r\n      // Call ensureDefaultTrucksAreScraped\r\n      // Assert createJob and processScrapingJob were called\r\n    });\r\n\r\n    it('should not scrape if truck data is fresh', async () => {\r\n      // Mock supabaseAdmin.from...limit to return a fresh truck\r\n      // Call ensureDefaultTrucksAreScraped\r\n      // Assert createJob and processScrapingJob were NOT called\r\n    });\r\n\r\n    it('should not trigger scrape if a pending/running job already exists', async () => {\r\n      // Mock supabaseAdmin.from...limit to return no truck (or stale truck)\r\n      // Mock ScrapingJobService.getJobsByStatus to return an existing pending/running job\r\n      // Call ensureDefaultTrucksAreScraped\r\n      // Assert ScrapingJobService.createJob was NOT called\r\n    });\r\n\r\n    // Add tests for Supabase query errors, createJob errors, etc.\r\n  });\r\n});\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\database.types.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "unicorn/no-empty-file",
        "severity": 2,
        "message": "Empty files are not allowed.",
        "line": 3,
        "column": 1,
        "nodeType": "Program",
        "messageId": "no-empty-file",
        "endLine": 3,
        "endColumn": 1,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'_firecrawlService' is assigned a value but never used.",
        "line": 9,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/firecrawl.test.ts\r\n\r\nimport { FirecrawlService } from './firecrawl';\r\n\r\n// Mock global fetch\r\nglobalThis.fetch = jest.fn();\r\n\r\ndescribe('FirecrawlService', () => {\r\n  let _firecrawlService: FirecrawlService;\r\n  const mockApiKey = 'test-firecrawl-api-key';\r\n\r\n  beforeEach(() => {\r\n    // Reset mocks and service instance before each test\r\n    (globalThis.fetch as jest.Mock).mockClear();\r\n    process.env.FIRECRAWL_API_KEY = mockApiKey;\r\n    _firecrawlService = new FirecrawlService();\r\n  });\r\n\r\n  afterEach(() => {\r\n    delete process.env.FIRECRAWL_API_KEY;\r\n  });\r\n\r\n  describe('scrapeUrl', () => {\r\n    it('should correctly call the Firecrawl API and return markdown data on success', async () => {\r\n      // Mock successful fetch response for scrapeUrl\r\n      // Assert that fetch was called with the correct URL, method, headers, and body\r\n      // Assert that the method returns the expected data structure\r\n    });\r\n\r\n    it('should handle API errors gracefully for scrapeUrl', async () => {\r\n      // Mock failed fetch response (e.g., 400, 500 error)\r\n      // Assert that the method returns success: false and an error message\r\n    });\r\n     it('should handle network errors gracefully for scrapeUrl', async () => {\r\n      // Mock fetch to throw a network error\r\n      // Assert that the method returns success: false and an error message\r\n    });\r\n  });\r\n\r\n  describe('scrapeFoodTruckWebsite', () => {\r\n    // This method now primarily calls scrapeUrl and returns markdown + basic metadata\r\n    it('should call scrapeUrl with correct parameters and return its markdown and metadata', async () => {\r\n      // Mock firecrawlService.scrapeUrl to return a successful response with markdown and metadata\r\n      // Call scrapeFoodTruckWebsite\r\n      // Assert that scrapeUrl was called with markdown format and other relevant options\r\n      // Assert that scrapeFoodTruckWebsite returns the expected structure\r\n    });\r\n\r\n    it('should return an error if scrapeUrl fails or returns no markdown', async () => {\r\n      // Mock firecrawlService.scrapeUrl to return a failure or no markdown\r\n      // Call scrapeFoodTruckWebsite\r\n      // Assert that it returns success: false and an appropriate error message\r\n    });\r\n  });\r\n\r\n  // Add more tests for other methods like crawlWebsite, getCrawlStatus if they are actively used\r\n  // and need robust testing. Consider testing retry logic in scrapeWithRetry.\r\n});\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.ts",
    "messages": [
      {
        "ruleId": "sonarjs/empty-string-repetition",
        "severity": 2,
        "message": "Rework this part of the regex to not match the empty string.",
        "line": 258,
        "column": 37,
        "nodeType": null,
        "endLine": 258,
        "endColumn": 50
      },
      {
        "ruleId": "sonarjs/empty-string-repetition",
        "severity": 2,
        "message": "Rework this part of the regex to not match the empty string.",
        "line": 259,
        "column": 43,
        "nodeType": null,
        "endLine": 259,
        "endColumn": 56
      },
      {
        "ruleId": "sonarjs/slow-regex",
        "severity": 2,
        "message": "Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.",
        "line": 283,
        "column": 24,
        "nodeType": "Literal",
        "endLine": 283,
        "endColumn": 75
      },
      {
        "ruleId": "sonarjs/duplicates-in-character-class",
        "severity": 2,
        "message": "Remove duplicates in this character class.",
        "line": 283,
        "column": 27,
        "nodeType": null,
        "endLine": 283,
        "endColumn": 30
      },
      {
        "ruleId": "sonarjs/duplicates-in-character-class",
        "severity": 2,
        "message": "Remove duplicates in this character class.",
        "line": 283,
        "column": 45,
        "nodeType": null,
        "endLine": 283,
        "endColumn": 48
      },
      {
        "ruleId": "sonarjs/duplicates-in-character-class",
        "severity": 2,
        "message": "Remove duplicates in this character class.",
        "line": 283,
        "column": 61,
        "nodeType": null,
        "endLine": 283,
        "endColumn": 64
      },
      {
        "ruleId": "sonarjs/duplicates-in-character-class",
        "severity": 2,
        "message": "Remove duplicates in this character class.",
        "line": 296,
        "column": 49,
        "nodeType": null,
        "endLine": 296,
        "endColumn": 52
      },
      {
        "ruleId": "sonarjs/duplicates-in-character-class",
        "severity": 2,
        "message": "Remove duplicates in this character class.",
        "line": 303,
        "column": 45,
        "nodeType": null,
        "endLine": 303,
        "endColumn": 48
      },
      {
        "ruleId": "sonarjs/duplicates-in-character-class",
        "severity": 2,
        "message": "Remove duplicates in this character class.",
        "line": 310,
        "column": 45,
        "nodeType": null,
        "endLine": 310,
        "endColumn": 48
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "interface FirecrawlResponse {\r\n  success: boolean\r\n  data?: {\r\n    markdown?: string\r\n    html?: string\r\n    metadata?: {\r\n      title?: string\r\n      description?: string\r\n      language?: string\r\n      sourceURL?: string\r\n    }\r\n    links?: string[]\r\n  }\r\n  error?: string\r\n}\r\n\r\ninterface CrawlJobResponse {\r\n  success: boolean\r\n  jobId?: string\r\n  error?: string\r\n}\r\n\r\ninterface ScrapedMetadata {\r\n  title?: string;\r\n  description?: string;\r\n  language?: string;\r\n  sourceURL?: string;\r\n}\r\n\r\ninterface CrawlStatusResponse {\r\n  success: boolean;\r\n  status?: \"scraping\" | \"completed\" | \"failed\";\r\n  data?: Array<{\r\n    markdown?: string;\r\n    html?: string;\r\n    metadata?: ScrapedMetadata;\r\n  }>;\r\n  error?: string;\r\n}\r\n\r\ninterface ContactInfo {\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\ninterface SocialMediaInfo {\r\n  instagram?: string;\r\n  facebook?: string;\r\n  twitter?: string;\r\n}\r\n\r\nconst FIRECRAWL_CACHE_TTL_MS = 1000 * 60 * 60 * 12; // 12 hours\r\nconst firecrawlCache: Record<string, { data: unknown; timestamp: number }> = {};\r\n\r\nexport class FirecrawlService {\r\n  private apiKey: string;\r\n  private baseUrl: string;\r\n\r\n  constructor() {\r\n    this.apiKey = process.env.FIRECRAWL_API_KEY!;\r\n    this.baseUrl = \"https://api.firecrawl.dev/v0\";\r\n  }\r\n\r\n  private getCachedResult(cacheKey: string): FirecrawlResponse | CrawlJobResponse | CrawlStatusResponse | undefined {\r\n    const now = Date.now();\r\n    // Clean up expired cache\r\n    for (const key in firecrawlCache) {\r\n      if (Object.prototype.hasOwnProperty.call(firecrawlCache, key) && now - firecrawlCache[key].timestamp > FIRECRAWL_CACHE_TTL_MS) {\r\n        delete firecrawlCache[key];\r\n      }\r\n    }\r\n    if (firecrawlCache[cacheKey] && now - firecrawlCache[cacheKey].timestamp < FIRECRAWL_CACHE_TTL_MS) {\r\n      console.info(`FirecrawlService: Cache hit for ${cacheKey}`);\r\n      return firecrawlCache[cacheKey].data as FirecrawlResponse | CrawlJobResponse | CrawlStatusResponse;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private setCacheResult(cacheKey: string, data: unknown) {\r\n    firecrawlCache[cacheKey] = { data, timestamp: Date.now() };\r\n  }\r\n\r\n  async scrapeUrl(\r\n    url: string,\r\n    options: {\r\n      formats?: (\"markdown\" | \"html\")[]\r\n      includeTags?: string[]\r\n      excludeTags?: string[]\r\n      onlyMainContent?: boolean\r\n      waitFor?: number\r\n    } = {},\r\n  ): Promise<FirecrawlResponse> {\r\n    const cacheKey = `scrape:${url}:${JSON.stringify(options)}`\r\n    const cached = this.getCachedResult(cacheKey)\r\n    if (cached) {\r\n      return cached as FirecrawlResponse\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/scrape`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          url,\r\n          formats: options.formats || [\"markdown\"],\r\n          includeTags: options.includeTags,\r\n          excludeTags: options.excludeTags,\r\n          onlyMainContent: options.onlyMainContent ?? true,\r\n          waitFor: options.waitFor || 0,\r\n        }),\r\n      })\r\n\r\n      const data: unknown = await response.json()\r\n\r\n      if (!response.ok) {\r\n        const errorData = data as { error?: string };\r\n        throw new Error(errorData.error || `HTTP ${response.status}`)\r\n      }\r\n\r\n      this.setCacheResult(cacheKey, data);\r\n      return data as FirecrawlResponse;\r\n    } catch (error: unknown) {\r\n      console.warn(\"Firecrawl scrape error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n      };\r\n    }\r\n  }\r\n\r\n  async crawlWebsite(\r\n    url: string,\r\n    options: {\r\n      crawlerOptions?: {\r\n        includes?: string[]\r\n        excludes?: string[]\r\n        maxDepth?: number\r\n        limit?: number\r\n      }\r\n      pageOptions?: {\r\n        formats?: (\"markdown\" | \"html\")[]\r\n        onlyMainContent?: boolean\r\n      }\r\n    } = {},\r\n  ): Promise<CrawlJobResponse> {\r\n    const cacheKey = `crawl:${url}:${JSON.stringify(options)}`\r\n    const cached = this.getCachedResult(cacheKey)\r\n    if (cached) {\r\n      return cached as CrawlJobResponse\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/crawl`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          url,\r\n          crawlerOptions: {\r\n            maxDepth: 2,\r\n            limit: 10,\r\n            ...options.crawlerOptions,\r\n          },\r\n          pageOptions: {\r\n            formats: [\"markdown\"],\r\n            onlyMainContent: true,\r\n            ...options.pageOptions,\r\n          },\r\n        }),\r\n      })\r\n\r\n      const data: unknown = await response.json()\r\n\r\n      if (!response.ok) {\r\n        const errorData = data as { error?: string };\r\n        throw new Error(errorData.error || `HTTP ${response.status}`)\r\n      }\r\n\r\n      this.setCacheResult(cacheKey, data);\r\n      return data as CrawlJobResponse;\r\n    } catch (error: unknown) {\r\n      console.warn(\"Firecrawl crawl error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n      };\r\n    }\r\n  }\r\n\r\n  async getCrawlStatus(jobId: string): Promise<CrawlStatusResponse> {\r\n    const cacheKey = `crawlStatus:${jobId}`\r\n    const cached = this.getCachedResult(cacheKey)\r\n    if (cached) {\r\n      return cached as CrawlStatusResponse\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/crawl/status/${jobId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n      })\r\n\r\n      const data: unknown = await response.json()\r\n\r\n      if (!response.ok) {\r\n        const errorData = data as { error?: string };\r\n        throw new Error(errorData.error || `HTTP ${response.status}`)\r\n      }\r\n\r\n      this.setCacheResult(cacheKey, data);\r\n      return data as CrawlStatusResponse;\r\n    } catch (error: unknown) {\r\n      console.warn(\"Firecrawl status error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Specialized methods for food truck data\r\n  async scrapeFoodTruckWebsite(\r\n    url: string,\r\n  ): Promise<{\r\n    success: boolean\r\n    data?: { markdown: string; name?: string; source_url?: string }\r\n    error?: string\r\n  }> {\r\n    const result = await this.scrapeUrl(url, {\r\n      formats: [\"markdown\"],\r\n      onlyMainContent: true,\r\n      waitFor: 2000,\r\n    })\r\n\r\n    return result.success && result.data?.markdown ? {\r\n        success: true,\r\n        data: {\r\n          markdown: result.data.markdown,\r\n          name: result.data.metadata?.title,\r\n          source_url: result.data.metadata?.sourceURL,\r\n        },\r\n      } : { success: false, error: result.error || \"Markdown content not found\" };\r\n  }\r\n\r\n  private extractPattern(text: string, pattern: RegExp): string | undefined {\r\n    const match = pattern.exec(text);\r\n    return match ? match[1].trim() : undefined;\r\n  }\r\n\r\n  private extractMenuSection(markdown: string): string | undefined {\r\n    const menuPatterns = [\r\n      /(?:menu|food|items?)\\s*:?\\s*((?:[^\\n]*\\n?){1,20})/i,\r\n      /(?:what we serve|our food)\\s*:?\\s*((?:[^\\n]*\\n?){1,20})/i,\r\n    ];\r\n\r\n    for (const pattern of menuPatterns) {\r\n      const match = pattern.exec(markdown);\r\n      if (match) {\r\n        return match[1].trim();\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private extractContactInfo(markdown: string): ContactInfo | undefined {\r\n    const contact: ContactInfo = {};\r\n\r\n    // Phone number\r\n    const phoneRegex = /(?:phone|call|contact)(?:\\s*:\\s*)?([+]?[\\d\\s()-]{10,})/i;\r\n    const phoneMatch = phoneRegex.exec(markdown);\r\n    if (phoneMatch) {\r\n      contact.phone = phoneMatch[1].trim();\r\n    }\r\n\r\n    // Email\r\n    const emailRegex = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/i;\r\n    const emailMatch = emailRegex.exec(markdown);\r\n    if (emailMatch) {\r\n      contact.email = emailMatch[1].trim();\r\n    }\r\n\r\n    return Object.keys(contact).length > 0 ? contact : undefined;\r\n  }\r\n\r\n  private extractSocialMedia(markdown: string): SocialMediaInfo | undefined {\r\n    const social: SocialMediaInfo = {};\r\n\r\n    // Instagram\r\n    const instagramRegex = /(?:instagram|@)\\s*([a-zA-Z0-9._]+)/i;\r\n    const instagramMatch = instagramRegex.exec(markdown);\r\n    if (instagramMatch) {\r\n      social.instagram = instagramMatch[1].trim();\r\n    }\r\n\r\n    // Facebook\r\n    const facebookRegex = /facebook\\.com\\/([a-zA-Z0-9.]+)/i;\r\n    const facebookMatch = facebookRegex.exec(markdown);\r\n    if (facebookMatch) {\r\n      social.facebook = facebookMatch[1].trim();\r\n    }\r\n\r\n    // Twitter\r\n    const twitterRegex = /(?:twitter|@)\\s*([a-zA-Z0-9._]+)/i;\r\n    const twitterMatch = twitterRegex.exec(markdown);\r\n    if (twitterMatch) {\r\n      social.twitter = twitterMatch[1].trim();\r\n    }\r\n\r\n    return Object.keys(social).length > 0 ? social : undefined;\r\n  }\r\n\r\n  async scrapeMultipleUrls(\r\n    urls: string[],\r\n    options: {\r\n      batchSize?: number\r\n      delay?: number\r\n    } = {},\r\n  ): Promise<Array<{ url: string; result: FirecrawlResponse }>> {\r\n    const batchSize = options.batchSize || 5\r\n    const delay = options.delay || 1000\r\n    const results: Array<{ url: string; result: FirecrawlResponse }> = []\r\n\r\n    for (let i = 0; i < urls.length; i += batchSize) {\r\n      const batch = urls.slice(i, i + batchSize)\r\n\r\n      const batchPromises = batch.map(async (url) => {\r\n        const result = await this.scrapeUrl(url)\r\n        return { url, result }\r\n      })\r\n\r\n      const batchResults = await Promise.all(batchPromises)\r\n      results.push(...batchResults)\r\n\r\n      // Add delay between batches to respect rate limits\r\n      if (i + batchSize < urls.length) {\r\n        await new Promise((resolve) => setTimeout(resolve, delay))\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  // Rate limiting and error handling\r\n  async scrapeWithRetry(url: string, maxRetries = 3, backoffMs = 1000): Promise<FirecrawlResponse> {\r\n    let lastError: Error\r\n\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        const result = await this.scrapeUrl(url)\r\n\r\n        if (result.success) {\r\n          return result\r\n        }\r\n\r\n        // If it's a rate limit error, wait longer\r\n        if (result.error?.includes(\"rate limit\")) {\r\n          const waitTime = backoffMs * Math.pow(2, attempt);\r\n          console.info(`Rate limited. Waiting ${waitTime}ms before retry ${attempt}/${maxRetries}`);\r\n          await new Promise((resolve) => setTimeout(resolve, waitTime));\r\n          continue;\r\n        }\r\n\r\n        throw new Error(result.error);\r\n      } catch (error: unknown) {\r\n        lastError = error instanceof Error ? error : new Error(String(error));\r\n\r\n        if (attempt === maxRetries) {\r\n          break;\r\n        }\r\n\r\n        const waitTime = backoffMs * Math.pow(2, attempt);\r\n        console.info(`Attempt ${attempt} failed. Retrying in ${waitTime}ms...`);\r\n        await new Promise((resolve) => setTimeout(resolve, waitTime));\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: false,\r\n      error: lastError!.message,\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const firecrawl = new FirecrawlService()\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\gemini.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 17,
        "column": 32,
        "nodeType": "ObjectExpression",
        "messageId": "unsafeReturn",
        "endLine": 23,
        "endColumn": 2
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'_geminiService' is assigned a value but never used.",
        "line": 26,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'_sampleMarkdown' is assigned a value but never used.",
        "line": 41,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 26
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused '_sampleMarkdown' variable.",
        "line": 41,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 41,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'_sampleSourceUrl' is assigned a value but never used.",
        "line": 42,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 27
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused '_sampleSourceUrl' variable.",
        "line": 42,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 42,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/gemini.test.ts\r\n\r\nimport { GeminiService } from './gemini';\r\nimport { APIUsageService } from './supabase';\r\n\r\n// Mock @google/generative-ai\r\nconst mockGenerateContent = jest.fn();\r\njest.mock('@google/generative-ai', () => ({\r\n  GoogleGenerativeAI: jest.fn().mockImplementation(() => ({\r\n    getGenerativeModel: jest.fn().mockReturnValue({\r\n      generateContent: mockGenerateContent,\r\n    }),\r\n  })),\r\n}));\r\n\r\n// Mock APIUsageService\r\njest.mock('./supabase', () => ({\r\n  ...jest.requireActual('./supabase'), // Keep other exports\r\n  APIUsageService: {\r\n    trackUsage: jest.fn().mockResolvedValue({}),\r\n    getTodayUsage: jest.fn().mockResolvedValue({ requests_count: 0, tokens_used: 0 }),\r\n  },\r\n}));\r\n\r\ndescribe('GeminiService', () => {\r\n  let _geminiService: GeminiService;\r\n  const mockApiKey = 'test-gemini-api-key';\r\n\r\n  beforeEach(() => {\r\n    process.env.GEMINI_API_KEY = mockApiKey;\r\n    _geminiService = new GeminiService();\r\n    mockGenerateContent.mockClear();\r\n    (APIUsageService.trackUsage as jest.Mock).mockClear();\r\n    (APIUsageService.getTodayUsage as jest.Mock).mockClear();\r\n  });\r\n\r\n  afterEach(() => {\r\n    delete process.env.GEMINI_API_KEY;\r\n  });\r\n  describe('extractFoodTruckDetailsFromMarkdown', () => {\r\n    const _sampleMarkdown = '# Test Truck\\nMenu: Burger - $5';\r\n    const _sampleSourceUrl = 'https://example.com/truck';\r\n\r\n    it('should call Gemini API with the correct prompt and return parsed data on success', async () => {\r\n      // Mock successful generateContent response with valid JSON string\r\n      // Call extractFoodTruckDetailsFromMarkdown\r\n      // Assert that generateContent was called with a prompt containing the sampleMarkdown\r\n      // Assert that the method returns success: true, the parsed data, tokensUsed, and the promptSent\r\n      // Assert that APIUsageService.trackUsage was called\r\n    });\r\n\r\n    it('should handle Gemini API errors gracefully', async () => {\r\n      // Mock generateContent to throw an error or return an error structure\r\n      // Call extractFoodTruckDetailsFromMarkdown\r\n      // Assert that the method returns success: false, an error message, and the promptSent\r\n      // Assert that APIUsageService.trackUsage might still be called if tokens can be estimated or an attempt was made\r\n    });\r\n\r\n    it('should handle JSON parsing errors from Gemini response', async () => {\r\n      // Mock successful generateContent response but with malformed JSON\r\n      // Call extractFoodTruckDetailsFromMarkdown\r\n      // Assert that the method returns success: false, a parsing error message, and the promptSent\r\n    });\r\n\r\n    it('should handle daily API limit exceeded', async () => {\r\n      // Mock APIUsageService.getTodayUsage to return limits as exceeded\r\n      // Call extractFoodTruckDetailsFromMarkdown\r\n      // Assert it returns success: false and an error about limits without calling generateContent\r\n    });\r\n  });\r\n\r\n  // Add similar describe blocks for other public methods of GeminiService like:\r\n  // processMenuData, extractLocationFromText, standardizeOperatingHours, enhanceFoodTruckData\r\n  // focusing on prompt construction, response parsing, and error handling.\r\n});\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\gemini.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PriceRange' is defined but never used.",
        "line": 5,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'PriceRange'.",
        "line": 5,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 5,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [107, 122], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MenuItem' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 11
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'MenuItem'.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 7,
        "endColumn": 11,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [134, 147], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DailyOperatingHours' is defined but never used.",
        "line": 9,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 22
      },
      {
        "ruleId": "sonarjs/unused-import",
        "severity": 2,
        "message": "Remove this unused import of 'DailyOperatingHours'.",
        "line": 9,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "removeUnusedImport",
        "endLine": 9,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestRemoveOneVariable",
            "fix": { "range": [164, 188], "text": "" },
            "desc": "Remove this variable import"
          }
        ]
      },
      {
        "ruleId": "sonarjs/slow-regex",
        "severity": 2,
        "message": "Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.",
        "line": 588,
        "column": 46,
        "nodeType": "Literal",
        "endLine": 588,
        "endColumn": 76
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { GoogleGenAI } from \"@google/genai\";\r\nimport { APIUsageService } from \"./supabase\";\r\n\r\nimport {\r\n  PriceRange,\r\n  MenuCategory,\r\n  MenuItem,\r\n  LocationData,\r\n  DailyOperatingHours,\r\n  OperatingHours,\r\n  SentimentAnalysisResult,\r\n  EnhancedFoodTruckData,\r\n  ExtractedFoodTruckDetails,\r\n  GeminiResponse,\r\n} from './types';\r\n\r\nexport class GeminiService {\r\n  private genAI: GoogleGenAI;\r\n  private modelName: string;\r\n  private dailyRequestLimit = 1500\r\n  private dailyTokenLimit = 32_000\r\n\r\n  constructor() {\r\n    const apiKey = process.env.GEMINI_API_KEY;\r\n    if (!apiKey) {\r\n      throw new Error(\"GEMINI_API_KEY environment variable is not set or is empty.\");\r\n    }\r\n    console.info(`GEMINI_API_KEY found, starts with: ${apiKey.slice(0, 5)}...`);\r\n    this.genAI = new GoogleGenAI({ apiKey });\r\n    this.modelName = \"gemini-2.0-flash-lite-001\";\r\n  }\r\n\r\n  async checkUsageLimits(): Promise<{ canMakeRequest: boolean; usage?: { requests: { used: number; limit: number; remaining: number }; tokens: { used: number; limit: number; remaining: number } } }> {\r\n    try {\r\n      const usage = await APIUsageService.getTodayUsage(\"gemini\");\r\n\r\n      if (!usage) {\r\n        return { canMakeRequest: true };\r\n      }\r\n      const requestsUsed = usage.requests_count ?? 0;\r\n      const tokensUsed = usage.tokens_used ?? 0;\r\n\r\n      const requestsRemaining = this.dailyRequestLimit - requestsUsed;\r\n      const tokensRemaining = this.dailyTokenLimit - tokensUsed;\r\n\r\n      return {\r\n        canMakeRequest: requestsRemaining > 0 && tokensRemaining > 100, // Keep 100 token buffer\r\n        usage: {\r\n          requests: {\r\n            used: requestsUsed,\r\n            limit: this.dailyRequestLimit,\r\n            remaining: requestsRemaining,\r\n          },\r\n          tokens: {\r\n            used: tokensUsed,\r\n            limit: this.dailyTokenLimit,\r\n            remaining: tokensRemaining,\r\n          },\r\n        },\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn(\"Error checking Gemini usage limits:\", error);\r\n      return { canMakeRequest: false };\r\n    }\r\n  }\r\n\r\n  async processMenuData(rawMenuText: string): Promise<GeminiResponse<MenuCategory[]>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: \"Daily API limits exceeded\",\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nParse the following food truck menu text and return a structured JSON format.\r\nExtract menu items with categories, names, descriptions, prices, and dietary tags.\r\n\r\nMenu text:\r\n${rawMenuText}\r\n\r\nReturn only valid json in this exact format:\r\n{\r\n  \"categories\": [\r\n    {\r\n      \"name\": \"category_name\",\r\n      \"items\": [\r\n        {\r\n          \"name\": \"item_name\",\r\n          \"description\": \"item_description\",\r\n          \"price\": 0.00,\r\n          \"dietary_tags\": [\"vegetarian\", \"vegan\", \"gluten-free\", \"dairy-free\", \"spicy\", \"popular\"]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\nRules:\r\n- Extract actual prices as numbers (e.g., 12.99, not \"$12.99\")\r\n- Include dietary restrictions and special tags\r\n- Group items into logical categories\r\n- If no clear categories, use \"Main Items\"\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = \"\";\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: \"user\", parts: [{ text: prompt }] }]\r\n      });\r\n      textOutput = sdkResponse.text || '';\r\n\r\n      const tokensUsed = sdkResponse.usageMetadata?.totalTokenCount || Math.ceil((prompt.length + textOutput.length) / 4);\r\n\r\n      void APIUsageService.trackUsage(\"gemini\", 1, tokensUsed);\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as { categories: MenuCategory[] };\r\n        return {\r\n          success: true,\r\n          data: parsedData.categories,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn(\"Gemini json parsing error:\", parseError);\r\n        console.warn(\"Problematic Gemini raw response text:\", textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(\"Gemini menu processing error:\", error);\r\n      const tokensUsed = Math.ceil((prompt.length + (error instanceof Error ? error.message.length : String(error).length)) / 4);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async extractLocationFromText(textInput: string): Promise<GeminiResponse<LocationData>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: \"Daily API limits exceeded\",\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nExtract location information from the following text and return structured data.\r\nLook for addresses, cross streets, landmarks, or location descriptions.\r\n\r\nText:\r\n${textInput}\r\n\r\nReturn only valid json in this exact format:\r\n{\r\n  \"address\": \"full_address_if_available\",\r\n  \"city\": \"city_name\",\r\n  \"state\": \"state_abbreviation\",\r\n  \"landmarks\": [\"nearby_landmark1\", \"nearby_landmark2\"],\r\n  \"coordinates\": {\r\n    \"lat\": undefined,\r\n    \"lng\": undefined\r\n  },\r\n  \"confidence\": 0.95,\r\n  \"raw_location_text\": \"original_location_mention\"\r\n}\r\n\r\nRules:\r\n- Set coordinates to undefined if not explicitly provided\r\n- Confidence should be 0.0 to 1.0 based on clarity\r\n- Include any mentioned landmarks or cross streets\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = \"\";\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: \"user\", parts: [{ text: prompt }] }]\r\n      });\r\n      textOutput = sdkResponse.text || '';\r\n\r\n      const tokensUsed = sdkResponse.usageMetadata?.totalTokenCount || Math.ceil((prompt.length + textOutput.length) / 4);\r\n      void APIUsageService.trackUsage(\"gemini\", 1, tokensUsed);\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as LocationData;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn(\"Gemini json parsing error:\", parseError);\r\n        console.warn(\"Problematic Gemini raw response text:\", textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(\"Gemini location extraction error:\", error);\r\n      const tokensUsed = Math.ceil((prompt.length + (error instanceof Error ? error.message.length : String(error).length)) / 4);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async standardizeOperatingHours(hoursText: string): Promise<GeminiResponse<OperatingHours>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: \"Daily API limits exceeded\",\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nParse the following operating hours text and return standardized format.\r\nConvert all times to 24-hour format and handle various input formats.\r\n\r\nHours text:\r\n${hoursText}\r\n\r\nReturn only valid json in this exact format:\r\n{\r\n  \"monday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"tuesday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"wednesday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"thursday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"friday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"saturday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false},\r\n  \"sunday\": {\"open\": \"hh:mm\", \"close\": \"hh:mm\", \"closed\": false}\r\n}\r\n\r\nRules:\r\n- Use 24-hour format (e.g., \"14:30\" for 2:30 pm)\r\n- If closed on a day, set \"closed\": true and omit open/close times\r\n- Handle ranges like \"Mon-Fri\" by applying to all days in range\r\n- Default to reasonable hours if ambiguous\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = \"\";\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: \"user\", parts: [{ text: prompt }] }]\r\n      });\r\n      textOutput = sdkResponse.text || '';\r\n\r\n      const tokensUsed = sdkResponse.usageMetadata?.totalTokenCount || Math.ceil((prompt.length + textOutput.length) / 4);\r\n      void APIUsageService.trackUsage(\"gemini\", 1, tokensUsed);\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as OperatingHours;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn(\"Gemini json parsing error:\", parseError);\r\n        console.warn(\"Problematic Gemini raw response text:\", textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(\"Gemini hours standardization error:\", error);\r\n      const tokensUsed = Math.ceil((prompt.length + (error instanceof Error ? error.message.length : String(error).length)) / 4);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async analyzeSentiment(reviewText: string): Promise<GeminiResponse<SentimentAnalysisResult>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: \"Daily API limits exceeded\",\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nAnalyze the sentiment of this food truck review and extract key insights.\r\nFocus on food quality, service, value, and overall experience.\r\n\r\nReview:\r\n${reviewText}\r\n\r\nReturn only valid json in this exact format:\r\n{\r\n  \"sentiment\": \"positive|negative|neutral\",\r\n  \"score\": 0.85,\r\n  \"confidence\": 0.95,\r\n  \"key_topics\": [\"food_quality\", \"service\", \"price\", \"location\", \"wait_time\"],\r\n  \"positive_aspects\": [\"great_food\", \"friendly_service\"],\r\n  \"negative_aspects\": [\"long_wait\", \"expensive\"],\r\n  \"summary\": \"brief_summary_of_review\",\r\n  \"recommended\": true\r\n}\r\n\r\nRules:\r\n- Score should be 0.0 (very negative) to 1.0 (very positive)\r\n- Confidence should be 0.0 to 1.0 based on clarity of sentiment\r\n- Include specific aspects mentioned in the review\r\n- Summary should be 1-2 sentences max\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = \"\";\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: \"user\", parts: [{ text: prompt }] }]\r\n      });\r\n      textOutput = sdkResponse.text || '';\r\n\r\n      const tokensUsed = sdkResponse.usageMetadata?.totalTokenCount || Math.ceil((prompt.length + textOutput.length) / 4);\r\n      void APIUsageService.trackUsage(\"gemini\", 1, tokensUsed);\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as SentimentAnalysisResult;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn(\"Gemini json parsing error:\", parseError);\r\n        console.warn(\"Problematic Gemini raw response text:\", textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(\"Gemini sentiment analysis error:\", error);\r\n      const tokensUsed = Math.ceil((prompt.length + (error instanceof Error ? error.message.length : String(error).length)) / 4);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async enhanceFoodTruckData(rawData: unknown): Promise<GeminiResponse<EnhancedFoodTruckData>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: \"Daily API limits exceeded\",\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nEnhance and standardize this food truck data. Clean up inconsistencies,\r\nfill in missing information where possible, and improve data quality.\r\n\r\nRaw data:\r\n${JSON.stringify(rawData, undefined, 2)}\r\n\r\nReturn only valid json with enhanced data in this format:\r\n{\r\n  \"name\": \"cleaned_truck_name\",\r\n  \"description\": \"enhanced_description\",\r\n  \"cuisine_type\": [\"mexican\", \"american\", \"fusion\"],\r\n  \"price_range\": \"budget|moderate|expensive\",\r\n  \"specialties\": [\"signature_dish1\", \"signature_dish2\"],\r\n  \"dietary_options\": [\"vegetarian\", \"vegan\", \"gluten_free\"],\r\n  \"enhanced_menu\": {\r\n    \"categories\": []\r\n  },\r\n  \"standardized_hours\": {},\r\n  \"cleaned_contact\": {},\r\n  \"data_quality_improvements\": [],\r\n  \"confidence_score\": 0.85\r\n}\r\n\r\nRules:\r\n- Preserve all original data while enhancing it\r\n- Standardize naming conventions\r\n- Infer cuisine type from menu items\r\n- Estimate price range from menu prices\r\n- Return only the json, no additional text\r\n      `;\r\n    let textOutput: string = \"\";\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: \"user\", parts: [{ text: prompt }] }]\r\n      });\r\n      textOutput = sdkResponse.text || '';\r\n\r\n      const tokensUsed = sdkResponse.usageMetadata?.totalTokenCount || Math.ceil((prompt.length + textOutput.length) / 4);\r\n      void APIUsageService.trackUsage(\"gemini\", 1, tokensUsed);\r\n\r\n      try {\r\n        const parsedData = JSON.parse(textOutput.trim()) as EnhancedFoodTruckData;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn(\"Gemini json parsing error:\", parseError);\r\n        console.warn(\"Problematic Gemini raw response text:\", textOutput.trim());\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${textOutput.trim().slice(0, 200)}...`,\r\n          tokensUsed,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(\"Gemini data enhancement error:\", error);\r\n      const tokensUsed = Math.ceil((prompt.length + (error instanceof Error ? error.message.length : String(error).length)) / 4);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n        tokensUsed: tokensUsed,\r\n      };\r\n    }\r\n  }\r\n\r\n  async batchProcess(items: Array<{ type: string; data: unknown }>): Promise<Array<GeminiResponse<unknown>>> {\r\n    const results: Array<GeminiResponse<unknown>> = [];\r\n\r\n    for (const item of items) {\r\n      let result: GeminiResponse<unknown>;\r\n      switch (item.type) {\r\n        case \"menu\": {\r\n          result = await this.processMenuData(item.data as string);\r\n          break;\r\n        }\r\n        case \"location\": {\r\n          result = await this.extractLocationFromText(item.data as string);\r\n          break;\r\n        }\r\n        case \"hours\": {\r\n          result = await this.standardizeOperatingHours(item.data as string);\r\n          break;\r\n        }\r\n        case \"sentiment\": {\r\n          result = await this.analyzeSentiment(item.data as string);\r\n          break;\r\n        }\r\n        case \"enhance\": {\r\n          result = await this.enhanceFoodTruckData(item.data); // item.data is already unknown\r\n          break;\r\n        }\r\n        default: {\r\n          result = { success: false, error: `Unknown processing type: ${item.type}` };\r\n          break;\r\n        }\r\n      }\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  async getUsageStats(): Promise<{ requests_count: number; tokens_used: number } | undefined> {\r\n    const usage = await APIUsageService.getTodayUsage(\"gemini\");\r\n    return usage === undefined ? undefined : usage;\r\n  }\r\n\r\n  async extractFoodTruckDetailsFromMarkdown(\r\n    markdownContent: string,\r\n    sourceUrl?: string,\r\n  ): Promise<GeminiResponse<ExtractedFoodTruckDetails>> {\r\n    const usageCheck = await this.checkUsageLimits();\r\n    if (!usageCheck.canMakeRequest) {\r\n      return {\r\n        success: false,\r\n        error: \"Daily API limits exceeded for Gemini\",\r\n      };\r\n    }\r\n\r\n    const prompt = `\r\nYou are an ai assistant tasked with extracting structured information about food trucks from their website content (provided in Markdown format). Your goal is to populate a json object with the following schema. Only return the json object, nothing else.\r\n\r\nMarkdown Content:\r\n---\r\n${markdownContent}\r\n---\r\n\r\nSource url (if available): ${sourceUrl || \"Not provided\"}\r\n\r\nTarget json Schema:\r\n{{\r\n  \"name\": \"string | undefined\",\r\n  \"description\": \"string | undefined\",\r\n  \"cuisine_type\": [\"string\", ...], // e.g., [\"Mexican\", \"Tacos\", \"Fusion\"]\r\n  \"price_range\": \"$ | $$ | $$$ | undefined\", // Estimate based on menu prices if possible, otherwise undefined\r\n  \"specialties\": [\"string\", ...], // e.g., [\"Birria Tacos\", \"Signature Burger\"]\r\n  \"current_location\": {{\r\n    \"address\": \"string | undefined\",\r\n    \"city\": \"string | undefined\",\r\n    \"state\": \"string | undefined\", // Should be state/province abbreviation e.g. ca, tx, on\r\n    \"zip_code\": \"string | undefined\",\r\n    \"raw_text\": \"original location text from page | undefined\" // The exact text describing the location from the markdown\r\n  }},\r\n  \"operating_hours\": {{ // Use 24-hour format \"hh:mm\". If unable to parse, leave as undefined.\r\n    \"monday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"tuesday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"wednesday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"thursday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"friday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"saturday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined,\r\n    \"sunday\": {{ \"open\": \"hh:mm\", \"close\": \"hh:mm\" }} | {{ \"closed\": true }} | undefined\r\n  }},\r\n  \"menu\": [ // If no menu found, this should be an empty array []\r\n    {{\r\n      \"category\": \"string\", // e.g., \"Appetizers\", \"Main Courses\", \"Drinks\"\r\n      \"items\": [\r\n        {{\r\n          \"name\": \"string\",\r\n          \"description\": \"string | undefined\",\r\n          \"price\": \"number (e.g., 12.99) | string (e.g., 'Market Price') | undefined\",\r\n          \"dietary_tags\": [\"string\", ...] // e.g., [\"vegan\", \"gluten-free\", \"spicy\"]\r\n        }}\r\n      ]\r\n    }}\r\n  ],\r\n  \"contact_info\": {{\r\n    \"phone\": \"string | undefined\", // e.g., \"555-123-4567\"\r\n    \"email\": \"string | undefined\",\r\n    \"website\": \"string | undefined\" // This should be the primary business website, not social media links\r\n  }},\r\n  \"social_media\": {{ // Extract usernames or full urls if available\r\n    \"instagram\": \"string | undefined\",\r\n    \"facebook\": \"string | undefined\",\r\n    \"twitter\": \"string | undefined\",\r\n    \"tiktok\": \"string | undefined\",\r\n    \"yelp\": \"string | undefined\"\r\n    // Add other platforms like yelp, tiktok if found\r\n  }},\r\n    \"source_url\": \"${sourceUrl || \"Not provided\"}\"\r\n}}\r\n\r\nInstructions:\r\n- Parse the Markdown content to extract the information for the json fields.\r\n- If specific details are missing for a field, use 'undefined' for string/object/numeric fields or empty arrays '[]' for array fields like 'cuisine_type', 'specialties', 'menu', 'dietary_tags'.\r\n- For the 'description' field:\r\n  - Generate a brief, natural, and owner-written style summary suitable for a food truck directory (target 1-2 sentences, maximum 200 characters).\r\n  - Do not use the phrase \"food truck\" in the description.\r\n  - Describe the primary cuisine, signature dishes if mentioned, or overall theme.\r\n  - Prefer specific cuisine types (e.g., \"Korean bbq\", \"Neapolitan Pizza\") over general ones (e.g., \"Asian\", \"Pizza\"). If only general types are available, condense to the most specific possible.\r\n  - Maintain a consistent, fact-based, and neutral tone. Avoid subjective superlatives (e.g., \"world's best\", \"most delicious\").\r\n  - If the source text makes specific claims of being \"the first\" or \"the oldest,\" you may include this factually if it seems central to their identity, but phrase it cautiously (e.g., \"States it was established in [year] as one of the first...\"). Avoid if it seems like puffery.\r\n  - Prioritize objective information over marketing language.\r\n- For 'operating_hours', if a day is mentioned but hours are unclear, set the day to 'undefined'. If a day is explicitly stated as closed, use '{{\"closed\": true}}'. If a day is not mentioned at all, also set it to 'undefined'.\r\n- Ensure times are in \"hh:mm\" 24-hour format. For example, \"2 pm\" should be \"14:00\".\r\n- Prices should be extracted as numbers if possible (e.g., 12.99 from \"$12.99\"). If it's a textual price like \"Market Price\" or \"mp\", use the text.\r\n- 'cuisine_type' should be a list of keywords describing the type of food, as specific as possible.\r\n- 'price_range' can be estimated based on typical item prices: $ (most items < $10), $$ ($10-$20), $$$ (most items > $20).\r\n- 'current_location.raw_text' should contain the original text snippet from which location details were extracted.\r\n- Only return the valid json object. Do not include any explanatory text before or after the json.\r\n`;\r\n    let textOutput: string = \"\";\r\n    try {\r\n      const sdkResponse = await this.genAI.models.generateContent({\r\n        model: this.modelName,\r\n        contents: [{ role: \"user\", parts: [{ text: prompt }] }]\r\n      });\r\n      textOutput = sdkResponse.text || '';\r\n\r\n      // Clean the response to ensure it's valid json\r\n      // Remove potential markdown code block delimiters\r\n      const cleanedText = textOutput.replace(/^```json\\s*([\\s\\S]*?)\\s*```$/, \"$1\").trim();\r\n\r\n      const tokensUsed = sdkResponse.usageMetadata?.totalTokenCount || Math.ceil((prompt.length + cleanedText.length) / 4);\r\n      void APIUsageService.trackUsage(\"gemini\", 1, tokensUsed);\r\n\r\n      try {\r\n        const parsedData = JSON.parse(cleanedText) as ExtractedFoodTruckDetails;\r\n        return {\r\n          success: true,\r\n          data: parsedData,\r\n          tokensUsed,\r\n          promptSent: prompt,\r\n        };\r\n      } catch (parseError: unknown) {\r\n        console.warn(\"Gemini json parsing error:\", parseError);\r\n        console.warn(\"Problematic Gemini raw response text:\", cleanedText);\r\n        return {\r\n          success: false,\r\n          error: `Failed to parse Gemini response as json: ${parseError instanceof Error ? parseError.message : String(parseError)}. Response text: ${cleanedText.slice(0, 200)}...`,\r\n          tokensUsed,\r\n          promptSent: prompt,\r\n        };\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(\"Gemini content generation error:\", error);\r\n      // Fallback token calculation if the api call itself failed before getting usageMetadata\r\n      const tokensUsed = Math.ceil((prompt.length + textOutput.length) / 4);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error during Gemini content generation\",\r\n        tokensUsed: tokensUsed,\r\n        promptSent: prompt,\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const gemini = new GeminiService();\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 123,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 126,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1558, 1561], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1558, 1561], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
        "message": "Async arrow function has no 'await' expression.",
        "line": 33,
        "column": 128,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "missingAwait",
        "endLine": 33,
        "endColumn": 130,
        "suggestions": [
          {
            "messageId": "removeAsync",
            "fix": { "range": [1511, 1517], "text": "" },
            "desc": "Remove 'async'."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 2,
        "message": "Unsafe return of a value of type `any`.",
        "line": 33,
        "column": 132,
        "nodeType": "ObjectExpression",
        "messageId": "unsafeReturn",
        "endLine": 38,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockJobId' is assigned a value but never used.",
        "line": 81,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 20
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'mockJobId' variable.",
        "line": 81,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 81,
        "endColumn": 20
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"mockJobId\".",
        "line": 81,
        "column": 11,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 81,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockExtractedData' is assigned a value but never used.",
        "line": 82,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 28
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'mockExtractedData' variable.",
        "line": 82,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 82,
        "endColumn": 28
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"mockExtractedData\".",
        "line": 82,
        "column": 11,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 82,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockSourceUrl' is assigned a value but never used.",
        "line": 83,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 24
      },
      {
        "ruleId": "sonarjs/no-unused-vars",
        "severity": 2,
        "message": "Remove the declaration of the unused 'mockSourceUrl' variable.",
        "line": 83,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVariable",
        "endLine": 83,
        "endColumn": 24
      },
      {
        "ruleId": "sonarjs/no-dead-store",
        "severity": 2,
        "message": "Remove this useless assignment to variable \"mockSourceUrl\".",
        "line": 83,
        "column": 11,
        "nodeType": null,
        "messageId": "removeAssignment",
        "endLine": 83,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/pipelineProcessor.test.ts\r\n\r\nimport { /* processScrapingJob, createOrUpdateFoodTruck */ } from './pipelineProcessor';\r\nimport { ScrapingJobService, FoodTruckService } from './supabase';\r\nimport { firecrawl } from './firecrawl';\r\nimport { gemini } from './gemini';\r\n\r\n// Mock dependent services\r\njest.mock('./supabase', () => ({\r\n  ScrapingJobService: {\r\n    updateJobStatus: jest.fn(),\r\n    getJobsByStatus: jest.fn(), // Added for the catch block in processScrapingJob\r\n    incrementRetryCount: jest.fn().mockResolvedValue({ retry_count: 1, max_retries: 3 }),\r\n  },\r\n  FoodTruckService: {\r\n    createTruck: jest.fn(),\r\n  },\r\n}));\r\njest.mock('./firecrawl');\r\njest.mock('./gemini');\r\n\r\ndescribe('pipelineProcessor', () => {\r\n  describe('processScrapingJob', () => {\r\n    // Removed unused variables\r\n    beforeEach(() => {\r\n      // Reset all mocks before each test\r\n      (ScrapingJobService.updateJobStatus as jest.Mock).mockReset();\r\n      (ScrapingJobService.getJobsByStatus as jest.Mock).mockReset();\r\n      (ScrapingJobService.incrementRetryCount as jest.Mock).mockReset().mockResolvedValue({ retry_count: 1, max_retries: 3 });\r\n      (FoodTruckService.createTruck as jest.Mock).mockReset();\r\n      (firecrawl.scrapeFoodTruckWebsite as jest.Mock).mockReset();\r\n      (gemini.extractFoodTruckDetailsFromMarkdown as jest.Mock).mockReset();      // Default mock implementation for updateJobStatus to return a basic job object\r\n      (ScrapingJobService.updateJobStatus as jest.Mock).mockImplementation(async (jobId: string, status: string, updates: any) => ({\r\n        id: jobId,\r\n        status,\r\n        target_url: 'https://example.com/mock-target',\r\n        ...updates\r\n      }));       // Default mock for getJobsByStatus for the catch block\r\n      (ScrapingJobService.getJobsByStatus as jest.Mock).mockResolvedValue([{ id: 'test-job-id', status: 'running' }]);\r\n    });\r\n\r\n    it('should successfully process a job with valid scrape and Gemini extraction', () => {\r\n      // Mock successful responses from firecrawl.scrapeFoodTruckWebsite and gemini.extractFoodTruckDetailsFromMarkdown\r\n      // Mock FoodTruckService.createTruck to be successful\r\n      // Call processScrapingJob\r\n      // Assert ScrapingJobService.updateJobStatus was called for 'running' and 'completed'\r\n      // Assert firecrawl.scrapeFoodTruckWebsite was called\r\n      // Assert gemini.extractFoodTruckDetailsFromMarkdown was called\r\n      // Assert createOrUpdateFoodTruck (via FoodTruckService.createTruck) was effectively called\r\n    });\r\n\r\n    it('should handle Firecrawl failure and update job status to failed', () => {\r\n      // Mock firecrawl.scrapeFoodTruckWebsite to return { success: false, error: '...' }\r\n      // Call processScrapingJob\r\n      // Assert ScrapingJobService.updateJobStatus was called for 'running' and then 'failed'\r\n      // Assert gemini.extractFoodTruckDetailsFromMarkdown was NOT called\r\n    });\r\n\r\n    it('should handle Gemini failure and update job status to failed', () => {\r\n      // Mock firecrawl.scrapeFoodTruckWebsite for success\r\n      // Mock gemini.extractFoodTruckDetailsFromMarkdown to return { success: false, error: '...' }\r\n      // Call processScrapingJob\r\n      // Assert ScrapingJobService.updateJobStatus was called for 'running' and then 'failed' (for Gemini error)\r\n    });\r\n\r\n    it('should attempt retry if job fails and retry count < max_retries', () => {\r\n      // jest.useFakeTimers(); // To control setTimeout\r\n      // Mock firecrawl failure\r\n      // (ScrapingJobService.incrementRetryCount as jest.Mock).mockResolvedValue({ retry_count: 1, max_retries: 3 });\r\n      // Call processScrapingJob\r\n      // Assert ScrapingJobService.incrementRetryCount was called\r\n      // Assert setTimeout was called (or the next processScrapingJob call if not using fake timers and testing chained calls)\r\n      // jest.runAllTimers(); // if using fake timers\r\n      // jest.useRealTimers();\r\n    });\r\n\r\n    // Add more tests for other scenarios, like target_url missing, createOrUpdateFoodTruck errors, etc.\r\n  });\r\n\r\n  describe('createOrUpdateFoodTruck', () => {\r\n    const mockJobId = 'test-job-id-for-creation';\r\n    const mockExtractedData = { name: 'Test Truck', current_location: { address: '123 Main St' } };\r\n    const mockSourceUrl = 'https://example.com/newtruck';\r\n\r\n    it('should correctly map extracted data and call FoodTruckService.createTruck', () => {\r\n      // Mock FoodTruckService.createTruck to return a mock truck object\r\n      // Call createOrUpdateFoodTruck\r\n      // Assert FoodTruckService.createTruck was called with correctly mapped data\r\n    });\r\n\r\n    it('should handle errors during truck creation', () => {\r\n      // Mock FoodTruckService.createTruck to throw an error\r\n      // Call createOrUpdateFoodTruck\r\n      // Assert error is logged (or rethrown, or job status updated if that logic were here)\r\n    });\r\n  });\r\n});\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-misused-promises",
        "severity": 2,
        "message": "Promise returned in function argument where a void return was expected.",
        "line": 85,
        "column": 22,
        "nodeType": "ArrowFunctionExpression",
        "messageId": "voidReturnArgument",
        "endLine": 85,
        "endColumn": 53
      },
      {
        "ruleId": "sonarjs/todo-tag",
        "severity": 2,
        "message": "Complete the task associated to this \"TODO\" comment.",
        "line": 152,
        "column": 8,
        "nodeType": null,
        "messageId": "completeTODO",
        "endLine": 152,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 22 to the 15 allowed.",
        "line": 8,
        "column": 23,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 8,
        "endColumn": 41,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { firecrawl } from '@/lib/firecrawl';\r\nimport { gemini } from '@/lib/gemini';\r\nimport { ScrapingJobService, FoodTruckService } from '@/lib/supabase';\r\nimport { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from './types';\r\n\r\n// Background job processing function\r\n// eslint-disable-next-line sonarjs/cognitive-complexity\r\nexport async function processScrapingJob(jobId: string) {\r\n  try {\r\n    // Update job status to running\r\n    const job = await ScrapingJobService.updateJobStatus(jobId, \"running\");\r\n\r\n    if (!job.target_url) {\r\n      throw new Error(\"No target URL specified\");\r\n    }\r\n\r\n    // Scrape the website using Firecrawl\r\n    console.info(`Starting scrape for ${job.target_url}`);\r\n    const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(job.target_url); // Simplified call\r\n\r\n    if (!scrapeResult.success || !scrapeResult.data?.markdown) {\r\n      await ScrapingJobService.updateJobStatus(jobId, \"failed\", {\r\n        errors: [scrapeResult.error || \"Scraping failed or markdown content not found\"],\r\n      });\r\n      throw new Error(scrapeResult.error || \"Scraping failed or markdown content not found\");\r\n    }\r\n\r\n    console.info(`Scraping successful for ${job.target_url}, proceeding to Gemini extraction.`);\r\n\r\n    // Call Gemini to extract structured data\r\n    const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(\r\n      scrapeResult.data.markdown,\r\n      scrapeResult.data.source_url || job.target_url,\r\n    );\r\n\r\n    if (!geminiResult.success || !geminiResult.data) {\r\n      await ScrapingJobService.updateJobStatus(jobId, \"failed\", {\r\n        errors: [geminiResult.error || \"Gemini data extraction failed\"],\r\n      });\r\n      throw new Error(geminiResult.error || \"Gemini data extraction failed\");\r\n    }\r\n\r\n    console.info(`Gemini extraction successful for ${job.target_url}.`);\r\n\r\n    // Update job with structured data from Gemini\r\n    await ScrapingJobService.updateJobStatus(jobId, \"completed\", {\r\n      data_collected: geminiResult.data as unknown as Record<string, unknown>, // Cast to unknown first, then to Record<string, unknown>\r\n      completed_at: new Date().toISOString(),\r\n    });\r\n\r\n    // Create or update FoodTruck entry\r\n    await createOrUpdateFoodTruck(jobId, geminiResult.data, scrapeResult.data.source_url || job.target_url);\r\n\r\n    // The call to processScrapedData is removed as Gemini now handles full extraction.\r\n    // The old processScrapedData and processDataQueue can remain for other potential uses or reprocessing.\r\n\r\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\r\n  } catch (error: unknown) { // Explicitly type error as unknown\r\n    console.error(`Scraping job ${jobId} failed:`, error);\r\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\r\n\r\n    // Attempt to update job status to failed\r\n    try {\r\n      // Check current status to avoid overwriting if already failed in a specific step\r\n      const currentJobData = await ScrapingJobService.getJobsByStatus(\"all\").then(jobs => jobs.find(j => j.id === jobId));\r\n      if (currentJobData && currentJobData.status !== \"failed\") {\r\n        await ScrapingJobService.updateJobStatus(jobId, \"failed\", {\r\n          errors: [errorMessage],\r\n        });\r\n      } else if (!currentJobData) {\r\n        // If job couldn't be fetched, log but proceed to retry logic if appropriate\r\n        console.error(`Could not fetch job ${jobId} to update status to failed.`);\r\n      }\r\n    } catch (statusUpdateError) {\r\n      console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\r\n    }\r\n\r\n    // Increment retry count and potentially retry\r\n    try {\r\n      const jobAfterRetryIncrement = await ScrapingJobService.incrementRetryCount(jobId);\r\n      // Ensure jobAfterRetryIncrement and its properties are valid before using them\r\n      if (jobAfterRetryIncrement && typeof jobAfterRetryIncrement.retry_count === 'number' && typeof jobAfterRetryIncrement.max_retries === 'number') {\r\n        if (jobAfterRetryIncrement.retry_count < jobAfterRetryIncrement.max_retries) {\r\n          console.info(`Retrying job ${jobId} (attempt ${jobAfterRetryIncrement.retry_count}/${jobAfterRetryIncrement.max_retries})`);\r\n          setTimeout(() => processScrapingJob(jobId), 5000); // Retry after 5 seconds\r\n        } else {\r\n          console.warn(`Job ${jobId} reached max retries (${jobAfterRetryIncrement.max_retries}).`);\r\n        }\r\n      } else {\r\n        console.error(`Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`);\r\n      }\r\n    } catch (retryIncrementError) {\r\n      console.error(`Error during retry increment logic for job ${jobId}:`, retryIncrementError);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function createOrUpdateFoodTruck(jobId: string, extractedTruckData: ExtractedFoodTruckDetails, sourceUrl: string) {\r\n  try {\r\n    // Basic input validation\r\n    if (!extractedTruckData || typeof extractedTruckData !== \"object\") {\r\n      console.error(`Job ${jobId}: Invalid extractedTruckData, cannot create/update food truck.`);\r\n      return;\r\n    }\r\n    if (!sourceUrl) {\r\n      console.warn(`Job ${jobId}: Missing sourceUrl for food truck, proceeding without it.`);\r\n    }\r\n    const name = extractedTruckData.name || \"Unknown Food Truck\";\r\n    console.info(`Job ${jobId}: Preparing to create/update food truck: ${name} from ${sourceUrl}`);\r\n\r\n    // Map Gemini output to FoodTruck schema\r\n    const locationData = extractedTruckData.current_location || {};\r\n    const fullAddress = [locationData.address, locationData.city, locationData.state, locationData.zip_code]\r\n      .filter(Boolean)\r\n      .join(\", \");\r\n\r\n    const truckData: FoodTruckSchema = { // Explicitly type truckData\r\n      name: name,\r\n      description: extractedTruckData.description ?? undefined,\r\n      current_location: {\r\n        // Placeholder lat/lng, geocoding would be a separate step\r\n        lat: locationData.lat || 0,\r\n        lng: locationData.lng || 0,\r\n        address: fullAddress || (locationData.raw_text ?? undefined),\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n      scheduled_locations: extractedTruckData.scheduled_locations ?? undefined,\r\n      operating_hours: extractedTruckData.operating_hours ?? undefined,\r\n      menu: (extractedTruckData.menu || []).map((category: MenuCategory) => ({\r\n        name: category.name || \"Uncategorized\",\r\n        items: (category.items || []).map((item: MenuItem) => ({\r\n          name: item.name || \"Unknown Item\",\r\n          description: item.description ?? undefined,\r\n          // Ensure price is a number or string, default to undefined if undefined\r\n          price: typeof item.price === 'number' || typeof item.price === 'string' ? item.price : undefined,\r\n          dietary_tags: item.dietary_tags || [],\r\n        })),\r\n      })),\r\n      contact_info: extractedTruckData.contact_info ?? undefined,\r\n      social_media: extractedTruckData.social_media ?? undefined,\r\n      cuisine_type: extractedTruckData.cuisine_type || [],\r\n      price_range: extractedTruckData.price_range ?? undefined,\r\n      specialties: extractedTruckData.specialties || [],\r\n      data_quality_score: 0.6, // Placeholder score\r\n      verification_status: \"pending\", // Type is already \"pending\" | \"verified\" | \"flagged\"\r\n      source_urls: [sourceUrl].filter(Boolean),\r\n      last_scraped_at: new Date().toISOString(),\r\n      // created_at and updated_at are handled by Supabase\r\n    };\r\n\r\n    // For now, we focus on creation.\r\n    // TODO: Implement update logic if a truck from this source_url already exists.\r\n    const truck = await FoodTruckService.createTruck(truckData);\r\n    console.info(`Job ${jobId}: Successfully created food truck: ${truck.name} (ID: ${truck.id}) from ${sourceUrl}`);\r\n\r\n    // Potentially link the truck_id back to the data_processing_queue items if needed,\r\n    // though the current flow bypasses that queue for initial creation.\r\n  } catch (error: unknown) { // Explicitly type error as unknown\r\n    console.error(`Job ${jobId}: Error creating food truck from ${sourceUrl}:`, error);\r\n    // Optionally, update the scraping job with this error information if it's critical\r\n    // await ScrapingJobService.updateJobStatus(jobId, \"failed\", {\r\n    //   errors: [`Food truck creation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`],\r\n    // });\r\n  }\r\n}\r\n\r\n// Fix type assignment and compatibility errors, replace any with unknown or specific types, and remove unused variables/imports.\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\scheduler.ts",
    "messages": [
      {
        "ruleId": "sonarjs/todo-tag",
        "severity": 2,
        "message": "Complete the task associated to this \"TODO\" comment.",
        "line": 313,
        "column": 43,
        "nodeType": null,
        "messageId": "completeTODO",
        "endLine": 313,
        "endColumn": 47
      },
      {
        "ruleId": "sonarjs/no-empty-collection",
        "severity": 2,
        "message": "Review this usage of \"trucks\" as it can only be empty here.",
        "line": 318,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "reviewUsageOfIdentifier",
        "endLine": 318,
        "endColumn": 35
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'sonarjs/no-empty-collection').",
        "line": 319,
        "column": 11,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [9123, 9178], "text": " " }
      },
      {
        "ruleId": "sonarjs/no-implicit-global",
        "severity": 2,
        "message": "Add the \"let\", \"const\" or \"var\" keyword to this declaration of \"totalScore\" to make it explicit.",
        "line": 321,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "explicitModifier",
        "endLine": 321,
        "endColumn": 21
      },
      {
        "ruleId": "sonarjs/todo-tag",
        "severity": 2,
        "message": "Complete the task associated to this \"TODO\" comment.",
        "line": 351,
        "column": 54,
        "nodeType": null,
        "messageId": "completeTODO",
        "endLine": 351,
        "endColumn": 58
      },
      {
        "ruleId": "sonarjs/todo-tag",
        "severity": 2,
        "message": "Complete the task associated to this \"TODO\" comment.",
        "line": 395,
        "column": 49,
        "nodeType": null,
        "messageId": "completeTODO",
        "endLine": 395,
        "endColumn": 53
      },
      {
        "ruleId": "sonarjs/no-empty-collection",
        "severity": 2,
        "message": "Review this usage of \"activeTrucks\" as it can only be empty here.",
        "line": 397,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "reviewUsageOfIdentifier",
        "endLine": 397,
        "endColumn": 41
      },
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported from 'sonarjs/no-empty-collection').",
        "line": 398,
        "column": 11,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [11963, 12018], "text": " " }
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "sonarjs/cognitive-complexity",
        "severity": 2,
        "message": "Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.",
        "line": 393,
        "column": 25,
        "nodeType": null,
        "messageId": "refactorFunction",
        "endLine": 393,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "// Task scheduling and automation system\r\nexport class TaskScheduler {\r\n  private tasks: Map<string, ScheduledTask>\r\n  private intervals: Map<string, NodeJS.Timeout>\r\n  private isRunning: boolean\r\n\r\n  constructor() {\r\n    this.tasks = new Map()\r\n    this.intervals = new Map()\r\n    this.isRunning = false\r\n  }\r\n\r\n  start(): void {\r\n    if (this.isRunning) {\r\n      console.info(\"Scheduler is already running\")\r\n      return\r\n    }\r\n\r\n    this.isRunning = true\r\n    console.info(\"Task scheduler started\")\r\n\r\n    // Start all scheduled tasks\r\n    for (const [taskId, task] of this.tasks.entries()) {\r\n      if (task.enabled) {\r\n        this.scheduleTask(taskId, task)\r\n      }\r\n    }\r\n  }\r\n\r\n  stop(): void {\r\n    if (!this.isRunning) {\r\n      console.info(\"Scheduler is not running\")\r\n      return\r\n    }\r\n\r\n    this.isRunning = false\r\n\r\n    // Clear all intervals\r\n    for (const [taskId, interval] of this.intervals.entries()) {\r\n      clearInterval(interval)\r\n      console.info(`Stopped task: ${taskId}`)\r\n    }\r\n\r\n    this.intervals.clear()\r\n    console.info(\"Task scheduler stopped\")\r\n  }\r\n\r\n  addTask(task: ScheduledTask): void {\r\n    this.tasks.set(task.id, task)\r\n\r\n    if (this.isRunning && task.enabled) {\r\n      this.scheduleTask(task.id, task)\r\n    }\r\n\r\n    console.info(`Added task: ${task.id}`)\r\n  }\r\n\r\n  removeTask(taskId: string): void {\r\n    const interval = this.intervals.get(taskId)\r\n    if (interval) {\r\n      clearInterval(interval)\r\n      this.intervals.delete(taskId)\r\n    }\r\n\r\n    this.tasks.delete(taskId)\r\n    console.info(`Removed task: ${taskId}`)\r\n  }\r\n\r\n  enableTask(taskId: string): void {\r\n    const task = this.tasks.get(taskId)\r\n    if (!task) {\r\n      throw new Error(`Task not found: ${taskId}`)\r\n    }\r\n\r\n    task.enabled = true\r\n\r\n    if (this.isRunning) {\r\n      this.scheduleTask(taskId, task)\r\n    }\r\n\r\n    console.info(`Enabled task: ${taskId}`)\r\n  }\r\n\r\n  disableTask(taskId: string): void {\r\n    const task = this.tasks.get(taskId)\r\n    if (!task) {\r\n      throw new Error(`Task not found: ${taskId}`)\r\n    }\r\n\r\n    task.enabled = false\r\n\r\n    const interval = this.intervals.get(taskId)\r\n    if (interval) {\r\n      clearInterval(interval)\r\n      this.intervals.delete(taskId)\r\n    }\r\n\r\n    console.info(`Disabled task: ${taskId}`)\r\n  }\r\n\r\n  private scheduleTask(taskId: string, task: ScheduledTask): void {\r\n    // Clear existing interval if any\r\n    const existingInterval = this.intervals.get(taskId)\r\n    if (existingInterval) {\r\n      clearInterval(existingInterval)\r\n    }\r\n\r\n    // Calculate interval in milliseconds\r\n    const intervalMs = task.intervalMinutes * 60 * 1000    // Schedule the task\r\n    const interval = setInterval(() => {\r\n      void (async () => {\r\n        try {\r\n          console.info(`Executing task: ${taskId}`)\r\n          task.lastRun = new Date().toISOString()\r\n\r\n          await task.execute()\r\n\r\n          task.successCount++\r\n          task.lastSuccess = new Date().toISOString()\r\n\r\n          console.info(`Task completed successfully: ${taskId}`)\r\n        } catch (error: unknown) {\r\n          task.errorCount++\r\n          task.lastError = error instanceof Error ? error.message : \"Unknown error\"\r\n\r\n          console.warn(`Task failed: ${taskId}`, error)\r\n\r\n          // Disable task if too many consecutive failures\r\n          if (task.errorCount - task.successCount > 5) {\r\n            console.warn(`Disabling task due to repeated failures: ${taskId}`)\r\n            this.disableTask(taskId)\r\n          }\r\n        }\r\n      })()\r\n    }, intervalMs)\r\n\r\n    this.intervals.set(taskId, interval)\r\n    console.info(`Scheduled task: ${taskId} (every ${task.intervalMinutes} minutes)`)\r\n  }\r\n\r\n  getTaskStatus(): TaskStatus[] {\r\n    return [...this.tasks.values()].map((task) => ({\r\n      id: task.id,\r\n      name: task.name,\r\n      enabled: task.enabled,\r\n      intervalMinutes: task.intervalMinutes,\r\n      lastRun: task.lastRun,\r\n      lastSuccess: task.lastSuccess,\r\n      successCount: task.successCount,\r\n      errorCount: task.errorCount,\r\n      lastError: task.lastError,\r\n      nextRun: this.calculateNextRun(task),\r\n    }))\r\n  }\r\n\r\n  private calculateNextRun(task: ScheduledTask): string | undefined {\r\n    if (!task.enabled || !task.lastRun) {\r\n      return undefined\r\n    }\r\n\r\n    const lastRun = new Date(task.lastRun)\r\n    const nextRun = new Date(lastRun.getTime() + task.intervalMinutes * 60 * 1000)\r\n\r\n    return nextRun.toISOString()\r\n  }\r\n}\r\n\r\ninterface ScheduledTask {\r\n  id: string\r\n  name: string\r\n  description: string\r\n  intervalMinutes: number\r\n  enabled: boolean\r\n  execute: () => Promise<void>\r\n  lastRun?: string\r\n  lastSuccess?: string\r\n  successCount: number\r\n  errorCount: number\r\n  lastError?: string\r\n}\r\n\r\ninterface TaskStatus {\r\n  id: string\r\n  name: string\r\n  enabled: boolean\r\n  intervalMinutes: number\r\n  lastRun?: string\r\n  lastSuccess?: string\r\n  successCount: number\r\n  errorCount: number\r\n  lastError?: string\r\n  nextRun?: string\r\n}\r\n\r\ninterface ScraperEngine {\r\n  scrapeSocialMedia: (platform: string, handle: string) => Promise<{ success: boolean; error?: string; data?: unknown }>;\r\n  scrapeWebsite: (url: string, selectors: Record<string, string>) => Promise<{ success: boolean; error?: string; data?: unknown }>;\r\n}\r\n\r\ninterface GeminiProcessor {\r\n  getUsageStats: () => { requests: { remaining: number } };\r\n  processMenuData: (content: string) => Promise<unknown>;\r\n  extractLocationFromText: (content: string) => Promise<unknown>;\r\n  standardizeOperatingHours: (content: string) => Promise<unknown>;\r\n  analyzeSentiment: (content: string) => Promise<unknown>;\r\n  enhanceFoodTruckData: (data: unknown) => Promise<unknown>;\r\n}\r\n\r\ninterface DataQualityAssessor {\r\n  assessTruckData: (truck: FoodTruck) => { score: number; issues: string[] };\r\n}\r\n\r\ninterface FoodTruck {\r\n  id: string;\r\n  name: string;\r\n  contact_info: {\r\n    phone?: string;\r\n    email?: string;\r\n    website?: string;\r\n  };\r\n  social_media: {\r\n    instagram_handle?: string;\r\n    facebook_handle?: string;\r\n    twitter_handle?: string;\r\n  };\r\n  cuisine_type: string;\r\n  price_range?: string;\r\n  specialties: string[];\r\n  menu: unknown; // This should be more specific, but for now, keeping it broad\r\n  current_location: {\r\n    lat?: number;\r\n    lng?: number;\r\n    address?: string;\r\n  };\r\n}\r\n\r\ninterface PendingDataItem {\r\n  type: \"menu\" | \"location\" | \"hours\" | \"sentiment\" | \"enhance\";\r\n  content: unknown;\r\n}\r\n\r\ninterface SocialMediaPost {\r\n  location?: string;\r\n  // Add other properties of a social media post if needed\r\n}\r\n\r\n// Pre-configured tasks for food truck data pipeline\r\nexport function createDefaultTasks(\r\n  scraperEngine: ScraperEngine,\r\n  geminiProcessor: GeminiProcessor,\r\n  dataQualityAssessor: DataQualityAssessor,\r\n): ScheduledTask[] {\r\n  return [\r\n    {\r\n      id: \"instagram_scrape\",\r\n      name: \"Instagram Data Scraping\",\r\n      description: \"Scrape Instagram posts and profiles for food truck data\",\r\n      intervalMinutes: 120, // Every 2 hours\r\n      enabled: true,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      execute: async () => {\r\n        const handles = [\"@gourmetstreeteats\", \"@tacoparadisesf\", \"@burgermobile\"]\r\n\r\n        for (const handle of handles) {\r\n          const result = await scraperEngine.scrapeSocialMedia(\"instagram\", handle)\r\n          if (result.success) {\r\n            // Process with Gemini if needed\r\n            console.info(`Successfully scraped ${handle}`)\r\n          } else {\r\n            throw new Error(`Failed to scrape ${handle}: ${result.error}`)\r\n          }\r\n        }\r\n      },\r\n    },\r\n    {\r\n      id: \"website_crawl\",\r\n      name: \"Website Crawling\",\r\n      description: \"Crawl food truck websites for menu and location updates\",\r\n      intervalMinutes: 360, // Every 6 hours\r\n      enabled: true,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      execute: async () => {\r\n        const websites = [\"https://gourmetstreeteats.com\", \"https://tacoparadise.com\", \"https://burgermobile.net\"]\r\n\r\n        const selectors = {\r\n          name: \".truck-name\",\r\n          location: \".current-location\",\r\n          hours: \".operating-hours\",\r\n          menu: \".menu-items\",\r\n        }\r\n\r\n        for (const url of websites) {\r\n          const result = await scraperEngine.scrapeWebsite(url, selectors)\r\n          if (result.success) {\r\n            console.info(`Successfully crawled ${url}`)\r\n          } else {\r\n            throw new Error(`Failed to crawl ${url}: ${result.error}`)\r\n          }\r\n        }\r\n      },\r\n    },\r\n    {\r\n      id: \"data_quality_check\",\r\n      name: \"Data Quality Assessment\",\r\n      description: \"Assess and validate data quality for all food trucks\",\r\n      intervalMinutes: 720, // Every 12 hours\r\n      enabled: true,      successCount: 0,\r\n      errorCount: 0,\r\n      execute: async () => {\r\n        // In real implementation, would fetch all trucks from database\r\n        const trucks: FoodTruck[] = [] // TODO: Fetch trucks from database\r\n        \r\n        await Promise.resolve(); // Satisfy async requirement        let totalScore = 0\r\n        let processedCount = 0\r\n        \r\n        for (const truck of trucks) {\r\n          // eslint-disable-next-line sonarjs/no-empty-collection\r\n          const assessment = dataQualityAssessor.assessTruckData(truck)\r\n          totalScore += assessment.score\r\n          processedCount++\r\n\r\n          if (assessment.score < 0.7) {\r\n            console.warn(`Low quality data for truck ${truck.id}: ${assessment.issues.join(\", \")}`)\r\n          }\r\n        }\r\n\r\n        const averageQuality = processedCount > 0 ? totalScore / processedCount : 0\r\n        console.info(`Data quality assessment completed. Average score: ${averageQuality.toFixed(2)}`)\r\n      },\r\n    },\r\n    {\r\n      id: \"gemini_processing\",\r\n      name: \"AI Data Processing\",\r\n      description: \"Process raw data using Gemini AI for standardization\",\r\n      intervalMinutes: 480, // Every 8 hours\r\n      enabled: true,\r\n      successCount: 0,\r\n      errorCount: 0,\r\n      execute: async () => {\r\n        // Check Gemini usage limits\r\n        const usage = geminiProcessor.getUsageStats()\r\n\r\n        if (usage.requests.remaining < 100) {\r\n          console.warn(\"Skipping Gemini processing due to rate limits\")\r\n          return\r\n        }\r\n\r\n        // Process pending data\r\n        const pendingData: PendingDataItem[] = [] // TODO: In real implementation, fetch from queue\r\n\r\n        for (const data of pendingData) {\r\n          switch (data.type) {\r\n            case \"menu\": {\r\n              await geminiProcessor.processMenuData(data.content as string)\r\n              break;\r\n            }\r\n            case \"location\": {\r\n              await geminiProcessor.extractLocationFromText(data.content as string)\r\n              break;\r\n            }\r\n            case \"hours\": {\r\n              await geminiProcessor.standardizeOperatingHours(data.content as string)\r\n              break;\r\n            }\r\n            case \"sentiment\": {\r\n              await geminiProcessor.analyzeSentiment(data.content as string)\r\n              break;\r\n            }\r\n            case \"enhance\": {\r\n              await geminiProcessor.enhanceFoodTruckData(data.content)\r\n              break;\r\n            }\r\n            default: {\r\n              // No default\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        console.info(`Processed ${pendingData.length} items with Gemini AI`)\r\n      },\r\n    },\r\n    {\r\n      id: \"location_update\",\r\n      name: \"Real-time Location Updates\",\r\n      description: \"Update current locations for active food trucks\",\r\n      intervalMinutes: 30, // Every 30 minutes\r\n      enabled: true,      successCount: 0,\r\n      errorCount: 0,\r\n      // eslint-disable-next-line sonarjs/cognitive-complexity\r\n      execute: async () => {\r\n        // Get active trucks (those currently operating)\r\n        const activeTrucks: FoodTruck[] = [] // TODO: Fetch active trucks from database\r\n\r\n        for (const truck of activeTrucks) {\r\n          // eslint-disable-next-line sonarjs/no-empty-collection\r\n          // Check social media for location updates\r\n          if (truck.social_media.instagram_handle) {\r\n            const socialResult = await scraperEngine.scrapeSocialMedia(\"instagram\", truck.social_media.instagram_handle)\r\n\r\n            if (socialResult.success && socialResult.data) {\r\n              // Extract location from recent posts\r\n              const socialData = socialResult.data as { posts: SocialMediaPost[] };\r\n              const recentPosts = socialData.posts.slice(0, 3);\r\n\r\n              for (const post of recentPosts) {\r\n                if (post.location) {\r\n                  // Update truck location\r\n                  console.info(`Updated location for ${truck.name}: ${post.location}`)\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n    },\r\n  ]\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\supabase.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unnecessary-type-assertion",
        "severity": 2,
        "message": "This assertion is unnecessary since it does not change the type of the expression.",
        "line": 139,
        "column": 34,
        "nodeType": "TSAsExpression",
        "messageId": "unnecessaryAssertion",
        "endLine": 139,
        "endColumn": 62,
        "fix": { "range": [4812, 4835], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import { createClient, type PostgrestSingleResponse, type PostgrestResponse } from \"@supabase/supabase-js\"\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\r\nexport const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey)\r\n\r\n// Database types\r\nimport {\r\n  MenuCategory,\r\n  MenuItem,\r\n  OperatingHours,\r\n  PriceRange,\r\n  ExtractedFoodTruckDetails,\r\n} from './types';\r\n\r\nexport interface FoodTruckLocation {\r\n  lat?: number;\r\n  lng?: number;\r\n  address?: string;\r\n  timestamp: string;\r\n}\r\n\r\n// Re-exporting from types.ts to ensure consistency\r\n\r\n\r\nexport interface FoodTruck {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  current_location: FoodTruckLocation;\r\n  scheduled_locations?: ExtractedFoodTruckDetails['scheduled_locations']; // Use type from types.ts\r\n  operating_hours?: OperatingHours; // Use type from types.ts\r\n  menu?: MenuCategory[]; // Use type from types.ts\r\n  contact_info?: ExtractedFoodTruckDetails['contact_info']; // Use type from types.ts\r\n  social_media?: ExtractedFoodTruckDetails['social_media']; // Use type from types.ts\r\n  cuisine_type?: string[];\r\n  price_range?: PriceRange; // Use type from types.ts\r\n  specialties?: string[];\r\n  data_quality_score?: number;\r\n  verification_status: \"pending\" | \"verified\" | \"flagged\" | \"rejected\";\r\n  source_urls?: string[];\r\n  created_at: string;\r\n  updated_at: string;\r\n  last_scraped_at?: string;\r\n  exact_location?: FoodTruckLocation;\r\n  city_location?: FoodTruckLocation;\r\n}\r\n\r\nexport interface ScrapingJob {\r\n  id: string;\r\n  job_type: string;\r\n  target_url?: string;\r\n  target_handle?: string;\r\n  platform?: string;\r\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\";\r\n  priority: number;\r\n  scheduled_at: string;\r\n  started_at?: string;\r\n  completed_at?: string;\r\n  data_collected?: Record<string, unknown>;\r\n  errors?: string[];\r\n  retry_count: number;\r\n  max_retries: number;\r\n  created_at: string;\r\n}\r\n\r\nexport interface DataProcessingQueue {\r\n  id: string;\r\n  truck_id?: string;\r\n  processing_type: string;\r\n  raw_data: Record<string, unknown>;\r\n  processed_data?: Record<string, unknown>;\r\n  gemini_tokens_used: number;\r\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\";\r\n  priority: number;\r\n  created_at: string;\r\n  processed_at?: string;\r\n}\r\n\r\nexport interface ApiUsage {\r\n  id: string;\r\n  service_name: string;\r\n  usage_date: string;\r\n  requests_count: number;\r\n  tokens_used: number;\r\n}\r\n\r\n// Food truck operations\r\nexport const FoodTruckService = {\r\n  async getAllTrucks(limit = 50, offset = 0): Promise<{ trucks: FoodTruck[]; total: number }> {\r\n    try {\r\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\r\n        .from(\"food_trucks\")\r\n        .select(\"*\", { count: \"exact\" })\r\n        .order(\"updated_at\", { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      if (error) throw error;\r\n      const trucks: FoodTruck[] = (data || []).map((t: FoodTruck) => normalizeTruckLocation(t));\r\n\r\n      const truckIds = trucks.map((t) => t.id);\r\n      let menuItems: { food_truck_id: string; name: string; description: string; price: number; dietary_tags: string[] }[] = [];\r\n      if (truckIds.length > 0) {\r\n        const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> = await supabase\r\n          .from(\"menu_items\")\r\n          .select(\"*\")\r\n          .in(\"food_truck_id\", truckIds);\r\n        if (menuError) throw menuError;\r\n        menuItems = items as typeof menuItems || [];\r\n      }\r\n\r\n      const menuByTruck: Record<string, typeof menuItems> = {};\r\n      for (const item of menuItems) {\r\n        if (!menuByTruck[item.food_truck_id]) {\r\n          menuByTruck[item.food_truck_id] = [];\r\n        }\r\n        menuByTruck[item.food_truck_id].push(item);\r\n      }\r\n\r\n      for (const truck of trucks) {\r\n        truck.menu = groupMenuItems(menuByTruck[truck.id] || []);\r\n      }\r\n      return { trucks, total: count || 0 };\r\n    } catch (error: unknown) {\r\n      console.warn(\"Error fetching trucks:\", error);\r\n      return { trucks: [], total: 0 };\r\n    }\r\n  },\r\n  async getTruckById(id: string): Promise<FoodTruck> {    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase.from(\"food_trucks\").select(\"*\").eq(\"id\", id).single();\r\n    if (error) throw error;\r\n    const truck: FoodTruck = normalizeTruckLocation(data);    const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> = await supabase\r\n      .from(\"menu_items\")\r\n      .select(\"*\")\r\n      .eq(\"food_truck_id\", id);\r\n    if (menuError) throw menuError;\r\n    truck.menu = groupMenuItems((items as RawMenuItemFromDB[]) || []);\r\n    return truck;\r\n  },\r\n\r\n  async getTrucksByLocation(lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> {\r\n    try {\r\n      const { trucks } = await FoodTruckService.getAllTrucks();\r\n      const nearbyTrucks = trucks.filter(truck => {\r\n        if (!truck.current_location || typeof truck.current_location.lat !== 'number' || typeof truck.current_location.lng !== 'number') {\r\n          return false;\r\n        }\r\n        const distance = calculateDistance(lat, lng, truck.current_location.lat, truck.current_location.lng);\r\n        return distance <= radiusKm;\r\n      });\r\n      return nearbyTrucks;\r\n    } catch (error: unknown) {\r\n      console.warn(\"Error fetching trucks by location:\", error);\r\n      return [];\r\n    }\r\n  },  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck> {\r\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n      .from(\"food_trucks\")\r\n      .insert([truckData])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },async updateTruck(id: string, updates: Partial<FoodTruck>): Promise<FoodTruck> {\r\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\r\n      .from(\"food_trucks\")\r\n      .update(updates)\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single();    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getDataQualityStats(): Promise<{\r\n    total_trucks: number;\r\n    avg_quality_score: number;\r\n    high_quality_count: number;\r\n    medium_quality_count: number;\r\n    low_quality_count: number;\r\n    verified_count: number;\r\n    pending_count: number;\r\n    flagged_count: number;\r\n  }> {\r\n    try {\r\n      const { data, error }: PostgrestSingleResponse<{\r\n        total_trucks: number;\r\n        avg_quality_score: number;\r\n        high_quality_count: number;\r\n        medium_quality_count: number;\r\n        low_quality_count: number;\r\n        verified_count: number;\r\n        pending_count: number;\r\n        flagged_count: number;\r\n      }> = await supabase.rpc('get_data_quality_stats').single();\r\n      if (error) throw error;\r\n      return data as {\r\n        total_trucks: number;\r\n        avg_quality_score: number;\r\n        high_quality_count: number;\r\n        medium_quality_count: number;\r\n        low_quality_count: number;\r\n        verified_count: number;\r\n        pending_count: number;\r\n        flagged_count: number;\r\n      };\r\n    } catch (error: unknown) {\r\n      console.warn(\"Error fetching data quality stats:\", error);\r\n      return {\r\n        total_trucks: 0,\r\n        avg_quality_score: 0,\r\n        high_quality_count: 0,\r\n        medium_quality_count: 0,\r\n        low_quality_count: 0,\r\n        verified_count: 0,\r\n        pending_count: 0,\r\n        flagged_count: 0,\r\n      };\r\n    }\r\n  },\r\n};\r\n\r\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\r\n  const R = 6371;\r\n  const dLat = (lat2 - lat1) * Math.PI / 180;\r\n  const dLon = (lon2 - lon1) * Math.PI / 180;\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const distance = R * c;\r\n  return distance;\r\n}\r\n\r\n// Define a helper type for items coming from the DB, which might include a category field\r\ninterface RawMenuItemFromDB {\r\n  name: string;\r\n  description?: string;\r\n  price?: number;\r\n  dietary_tags?: string[];\r\n  category?: string; // This field is expected from the DB query\r\n  // Potentially other fields like id, food_truck_id, etc.\r\n  [key: string]: unknown; // Allow other properties from DB select *\r\n}\r\n\r\nfunction groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\r\n  const byCategory: Record<string, MenuItem[]> = {}; // Stores processed MenuItems\r\n  for (const rawItem of rawItems) {\r\n    const categoryName: string = rawItem.category || \"Uncategorized\";\r\n    if (!byCategory[categoryName]) {\r\n      byCategory[categoryName] = [];\r\n    }\r\n    // Construct a MenuItem conforming to the MenuItem interface (no 'category' property)\r\n    const menuItem: MenuItem = {\r\n      name: rawItem.name,\r\n      // Use nullish coalescing to convert null from DB to undefined for the MenuItem type\r\n      description: rawItem.description ?? undefined,\r\n      price: rawItem.price ?? undefined,\r\n      dietary_tags: rawItem.dietary_tags ?? [], // Default to empty array if null/undefined\r\n    };\r\n    byCategory[categoryName].push(menuItem);\r\n  }\r\n  // Map to MenuCategory structure { name: string, items: MenuItem[] }\r\n  return Object.entries(byCategory).map(([categoryName, itemsList]) => ({\r\n    name: categoryName, // 'name' here refers to the category's name\r\n    items: itemsList,\r\n  }));\r\n}\r\n\r\nfunction normalizeTruckLocation(truck: FoodTruck): FoodTruck {\r\n  const fallback: FoodTruckLocation = { lat: undefined, lng: undefined, address: \"Unknown\", timestamp: new Date().toISOString() };\r\n  const loc = truck.exact_location || truck.current_location || truck.city_location || {};\r\n  const lat = loc.lat ?? undefined;\r\n  const lng = loc.lng ?? undefined;\r\n  const address = loc.address;\r\n  const timestamp = loc.timestamp;\r\n\r\n  truck.current_location = (typeof lat !== \"number\" || typeof lng !== \"number\" || (lat === 0 && lng === 0))\r\n    ? { ...fallback, address: address || fallback.address }\r\n    : { lat, lng, address: address || fallback.address, timestamp: timestamp || fallback.timestamp };\r\n  return truck;\r\n}\r\n\r\nexport const ScrapingJobService = {  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob> {\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from(\"scraping_jobs\")\r\n      .insert([\r\n        {\r\n          ...jobData,\r\n          status: \"pending\",\r\n          retry_count: 0,\r\n          max_retries: 3,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getJobsByStatus(status: string): Promise<ScrapingJob[]> {\r\n    try {\r\n      const query =\r\n        status === \"all\"\r\n          ? supabase.from(\"scraping_jobs\").select(\"*\")\r\n          : supabase.from(\"scraping_jobs\").select(\"*\").eq(\"status\", status);\r\n\r\n      const { data, error }: PostgrestResponse<ScrapingJob> = await query\r\n        .order(\"priority\", { ascending: false })\r\n        .order(\"scheduled_at\", { ascending: true });\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n    } catch (error: unknown) {\r\n      console.warn(\"Error fetching jobs:\", error);\r\n      return [];\r\n    }\r\n  },  async updateJobStatus(id: string, status: string, updates: Partial<ScrapingJob> = {}): Promise<ScrapingJob> {\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from(\"scraping_jobs\")\r\n      .update({\r\n        status,\r\n        ...updates,\r\n        ...(status === \"running\" && { started_at: new Date().toISOString() }),\r\n        ...(status === \"completed\" && { completed_at: new Date().toISOString() }),\r\n      })\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single();    if (error) throw error;\r\n    return data;\r\n  },  async incrementRetryCount(id: string): Promise<ScrapingJob> {\r\n    const { data: current, error: fetchError }: PostgrestSingleResponse<Pick<ScrapingJob, 'retry_count'>> = await supabaseAdmin\r\n      .from(\"scraping_jobs\")\r\n      .select(\"retry_count\")\r\n      .eq(\"id\", id)\r\n      .single();\r\n\r\n    if (fetchError) throw fetchError;\r\n\r\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\r\n      .from(\"scraping_jobs\")\r\n      .update({ retry_count: (current?.retry_count || 0) + 1 })\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n};\r\n\r\nexport const DataProcessingService = {\r\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from(\"data_processing_queue\")\r\n      .insert([\r\n        {\r\n          ...queueData,\r\n          status: \"pending\",\r\n          gemini_tokens_used: 0,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getNextQueueItem(): Promise<DataProcessingQueue | undefined> {\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from(\"data_processing_queue\")\r\n      .select(\"*\")\r\n      .eq(\"status\", \"pending\")\r\n      .order(\"priority\", { ascending: false })\r\n      .order(\"created_at\", { ascending: true })\r\n      .limit(1)\r\n      .single();\r\n\r\n    if (error && error.code !== \"PGRST116\") throw error;\r\n    return data ?? undefined;\r\n  },\r\n\r\n  async getQueueByStatus(status: string): Promise<DataProcessingQueue[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<DataProcessingQueue> = await supabase\r\n        .from(\"data_processing_queue\")\r\n        .select(\"*\")\r\n        .eq(\"status\", status)\r\n        .order(\"created_at\", { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n    } catch (error: unknown) {\r\n      console.warn(\"Error fetching queue:\", error);\r\n      return [];\r\n    }\r\n  },  async updateQueueItem(id: string, updates: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\r\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\r\n      .from(\"data_processing_queue\")\r\n      .update({\r\n        ...updates,\r\n        ...(updates.status === \"completed\" && { processed_at: new Date().toISOString() }),\r\n      })\r\n      .eq(\"id\", id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n};\r\n\r\nexport const APIUsageService = {\r\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<ApiUsage> {\r\n    try {\r\n      const today = new Date().toISOString().split(\"T\")[0];\r\n\r\n      const { data: existing }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n        .from(\"api_usage\")\r\n        .select(\"*\")\r\n        .eq(\"service_name\", serviceName)\r\n        .eq(\"usage_date\", today)\r\n        .single();      if (existing) {\r\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n          .from(\"api_usage\")\r\n          .update({\r\n            requests_count: (existing.requests_count || 0) + requests,\r\n            tokens_used: (existing.tokens_used || 0) + tokens,\r\n          })\r\n          .eq(\"id\", existing.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;      } else {\r\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\r\n          .from(\"api_usage\")\r\n          .insert([\r\n            {\r\n              service_name: serviceName,\r\n              usage_date: today,\r\n              requests_count: requests,\r\n              tokens_used: tokens,\r\n            },\r\n          ])\r\n          .select()\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      }\r\n    } catch (error: unknown) {\r\n      console.warn(\"Error tracking usage:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getTodayUsage(serviceName: string): Promise<ApiUsage | undefined> {\r\n    try {\r\n      const today = new Date().toISOString().split(\"T\")[0];\r\n\r\n      const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabase\r\n        .from(\"api_usage\")\r\n        .select(\"*\")\r\n        .eq(\"service_name\", serviceName)\r\n        .eq(\"usage_date\", today)\r\n        .single();\r\n\r\n      if (error && error.code !== \"PGRST116\") throw error;\r\n      return data ?? undefined;\r\n    } catch (error: unknown) {\r\n      console.warn(\"Error getting today usage:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getAllUsageStats(): Promise<ApiUsage[]> {\r\n    try {\r\n      const { data, error }: PostgrestResponse<ApiUsage> = await supabase\r\n        .from(\"api_usage\")\r\n        .select(\"*\")\r\n        .order(\"usage_date\", { ascending: false })\r\n        .limit(30);\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n    } catch (error: unknown) {\r\n      console.warn(\"Error getting usage stats:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport {type MenuItem, type MenuCategory, type OperatingHours, type PriceRange} from './types';\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\lib\\utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\next-env.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\AI\\food-truck-finder-poc\\tests\\e2e.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
