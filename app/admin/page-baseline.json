[{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx","messages":[{"ruleId":"unicorn/no-null","severity":1,"message":"Use `undefined` instead of `null`.","line":41,"column":76,"nodeType":"Literal","messageId":"error","endLine":41,"endColumn":80,"suggestions":[{"messageId":"replace","fix":{"range":[1569,1573],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3347,3347],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3347,3347],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n'use client';\r\n\r\nimport { useFoodTrucks, DataStatusIndicator } from '@/lib/fallback/supabaseFallback';\r\nimport {\r\n  ScrapingJobService,\r\n  DataProcessingService,\r\n  supabase,\r\n} from '@/lib/supabase';\r\nimport { TotalFoodTrucksCard } from '@/components/admin/dashboard/TotalFoodTrucksCard';\r\nimport { PipelineStatusCard } from '@/components/admin/dashboard/PipelineStatusCard';\r\nimport { DataQualityScoreCard } from '@/components/admin/dashboard/DataQualityScoreCard';\r\nimport { QualityDistributionCard } from '@/components/admin/dashboard/QualityDistributionCard';\r\nimport { RecentErrorsCard } from '@/components/admin/dashboard/RecentErrorsCard';\r\nimport { useEffect, useState } from 'react';\r\n\r\n// Define the data quality stats type based on the database function\r\ninterface DataQualityStats {\r\n  readonly total_trucks: number;\r\n  readonly avg_quality_score: number;\r\n  readonly high_quality_count: number;\r\n  readonly medium_quality_count: number;\r\n  readonly low_quality_count: number;\r\n  readonly verified_count: number;\r\n  readonly pending_count: number;\r\n  readonly flagged_count: number;\r\n}\r\n\r\ninterface DashboardData {\r\n  totalFoodTrucks: number;\r\n  pendingVerifications: number;\r\n  pendingScrapingJobsCount: number;\r\n  runningScrapingJobsCount: number;\r\n  failedScrapingJobsCount: number;\r\n  failedProcessingQueueItemsCount: number;\r\n  dataQualityStats: DataQualityStats;\r\n}\r\n\r\nexport default function AdminDashboard() {\r\n  const { trucks, loading, dataStatus } = useFoodTrucks();\r\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\r\n\r\n  useEffect(() => {\r\n    async function getDashboardData() {\r\n      const pendingVerifications = trucks.filter((t) => t.verification_status === 'pending').length;\r\n\r\n      // Fetch pipeline status (e.g., pending scraping jobs)\r\n      const pendingScrapingJobs = await ScrapingJobService.getJobsByStatus('pending');\r\n      const runningScrapingJobs = await ScrapingJobService.getJobsByStatus('running');\r\n      const failedScrapingJobs = await ScrapingJobService.getJobsByStatus('failed');\r\n\r\n      // Fetch recent errors from data processing queue\r\n      const failedProcessingQueueItems = await DataProcessingService.getQueueByStatus('failed');\r\n      // Fetch data quality stats using the Supabase function\r\n      const { data: qualityStatsResult, error: qualityError } = await supabase\r\n        .rpc('get_data_quality_stats')\r\n        .single();\r\n\r\n      if (qualityError != undefined) {\r\n        console.error('Error fetching data quality stats:', qualityError);\r\n      }\r\n\r\n      const dataQualityStats: DataQualityStats = (qualityStatsResult as DataQualityStats) ?? {\r\n        total_trucks: 0,\r\n        avg_quality_score: 0,\r\n        high_quality_count: 0,\r\n        medium_quality_count: 0,\r\n        low_quality_count: 0,\r\n        verified_count: 0,\r\n        pending_count: 0,\r\n        flagged_count: 0,\r\n      };\r\n\r\n      setDashboardData({\r\n        totalFoodTrucks: trucks.length,\r\n        pendingVerifications,\r\n        pendingScrapingJobsCount: pendingScrapingJobs.length,\r\n        runningScrapingJobsCount: runningScrapingJobs.length,\r\n        failedScrapingJobsCount: failedScrapingJobs.length,\r\n        failedProcessingQueueItemsCount: failedProcessingQueueItems.length,\r\n        dataQualityStats,\r\n      });\r\n    }\r\n\r\n    if (trucks.length > 0) {\r\n      getDashboardData();\r\n    }\r\n  }, [trucks]);\r\n\r\n  if (loading || !dashboardData) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (dataStatus.status === 'unavailable') {\r\n    return (\r\n      <div className=\"flex flex-col gap-4\">\r\n        <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\r\n        <DataStatusIndicator status={dataStatus} />\r\n        <div className=\"text-center py-10\">\r\n          <p className=\"text-lg text-gray-500\">Food truck data is currently unavailable. Please try again later.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\r\n      <DataStatusIndicator status={dataStatus} />\r\n\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <TotalFoodTrucksCard\r\n          totalFoodTrucks={dashboardData.totalFoodTrucks}\r\n          pendingVerifications={dashboardData.pendingVerifications}\r\n        />\r\n        <PipelineStatusCard\r\n          pendingScrapingJobsCount={dashboardData.pendingScrapingJobsCount}\r\n          runningScrapingJobsCount={dashboardData.runningScrapingJobsCount}\r\n          failedScrapingJobsCount={dashboardData.failedScrapingJobsCount}\r\n        />\r\n        <DataQualityScoreCard dataQualityStats={dashboardData.dataQualityStats} />\r\n        <QualityDistributionCard dataQualityStats={dashboardData.dataQualityStats} />\r\n        <RecentErrorsCard failedProcessingQueueItemsCount={dashboardData.failedProcessingQueueItemsCount} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]}]
