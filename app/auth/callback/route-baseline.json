[{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\callback\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":27,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { RateLimiter, getClientIdentifier } from '@/lib/security/rateLimiter';\r\nimport { AuditLogger } from '@/lib/security/auditLogger';\r\nimport { User } from '@supabase/supabase-js';\r\n\r\ninterface RequestMetadata {\r\n  ip: string;\r\n  userAgent: string;\r\n}\r\n\r\nasync function handleSuccessfulAuth({\r\n  user,\r\n  redirectTo,\r\n  origin,\r\n  identifier,\r\n  requestMetadata,\r\n}: {\r\n  user: User;\r\n  redirectTo: string;\r\n  origin: string;\r\n  identifier: string;\r\n  requestMetadata: RequestMetadata;\r\n}) {\r\n  const { data: profile } = await supabase\r\n    .from('profiles')\r\n    .select('role')\r\n    .eq('id', user.id)\r\n    .single();\r\n\r\n  await AuditLogger.logAuthEvent(\r\n    'login_success',\r\n    user.email,\r\n    user.id,\r\n    requestMetadata,\r\n    { provider: 'google', role: profile?.role },\r\n  );\r\n\r\n  RateLimiter.recordSuccess(identifier, 'auth');\r\n\r\n  if (profile?.role === 'admin') {\r\n    return NextResponse.redirect(`${origin}${redirectTo}`);\r\n  } else {\r\n    await AuditLogger.logSecurityEvent({\r\n      event_type: 'permission_denied',\r\n      user_id: user.id,\r\n      user_email: user.email,\r\n      ip_address: requestMetadata.ip,\r\n      user_agent: requestMetadata.userAgent,\r\n      details: {\r\n        reason: 'insufficient_role',\r\n        user_role: profile?.role ?? 'none',\r\n      },\r\n      severity: 'warning',\r\n    });\r\n    return NextResponse.redirect(`${origin}/access-denied`);\r\n  }\r\n}\r\n\r\nasync function handleAuthFailure(\r\n  error: Error,\r\n  identifier: string,\r\n  requestMetadata: RequestMetadata,\r\n) {\r\n  await AuditLogger.logAuthEvent(\r\n    'login_failure',\r\n    undefined,\r\n    undefined,\r\n    requestMetadata,\r\n    { provider: 'google', error: error.message },\r\n  );\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const identifier = getClientIdentifier(request);\r\n  const rateLimitResult = RateLimiter.checkRateLimit(identifier, 'auth');\r\n\r\n  if (!rateLimitResult.allowed) {\r\n    await AuditLogger.logSecurityEvent({\r\n      event_type: 'login_failure',\r\n      ip_address: identifier.split(':')[0],\r\n      user_agent: request.headers.get('user-agent') ?? 'unknown',\r\n      details: {\r\n        reason: 'rate_limit_exceeded',\r\n        retryAfter: rateLimitResult.retryAfter,\r\n      },\r\n      severity: 'warning',\r\n    });\r\n    return NextResponse.redirect(`${new URL(request.url).origin}/login?error=rate_limit`);\r\n  }\r\n\r\n  const { searchParams, origin } = new URL(request.url);\r\n  const code = searchParams.get('code');\r\n  const redirectTo = searchParams.get('redirectTo') ?? '/admin';\r\n\r\n  const requestMetadata = {\r\n    ip: identifier.split(':')[0],\r\n    userAgent: request.headers.get('user-agent') ?? 'unknown',\r\n  };\r\n\r\n  if (code !== null && code.length > 0) {\r\n    const { error } = await supabase.auth.exchangeCodeForSession(code);\r\n\r\n    if (error) {\r\n      await handleAuthFailure(error, identifier, requestMetadata);\r\n    } else {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n      if (user) {\r\n        return await handleSuccessfulAuth({\r\n          user,\r\n          redirectTo,\r\n          origin,\r\n          identifier,\r\n          requestMetadata,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return NextResponse.redirect(`${origin}/login`);\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"sonarjs/updated-loop-counter","replacedBy":[]}]}]
