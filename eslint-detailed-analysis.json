[{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\access-denied\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\analytics\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":64,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":68,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":66,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getDataQualityStatsCached on an `error` typed value.","line":66,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":67,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getAllTrucksCached on an `error` typed value.","line":67,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `UsageStat[]`.","line":71,"column":11,"nodeType":"VariableDeclarator","messageId":"unsafeAssignment","endLine":71,"endColumn":97},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":132,"column":62,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":132,"endColumn":113},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":135,"column":56,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":135,"endColumn":101}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { APIUsageService, CachedFoodTruckService } from '@/lib/supabase';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  TrendingUp,\n  Users,\n  Database,\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock\n} from 'lucide-react';\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line\n} from 'recharts';\n\n// Type definitions for better type safety\ninterface QualityStats {\n  averageScore: number;\n  distribution: {\n    high: number;\n    medium: number;\n    low: number;\n  };\n}\n\ninterface TruckData {\n  count: number;\n  trucks: Array<{\n    verification_status?: string;\n    last_scraped_at?: string | null;\n  }>;\n}\n\ninterface UsageStat {\n  id: string;\n  service_name: string;\n  usage_date: string;\n  requests_count: number;\n  tokens_used: number;\n}\n\nexport default async function AnalyticsPage() {\n  try {\n    // Fetch comprehensive analytics data with proper error handling\n    const [usageStatsResult, qualityStatsResult, trucksDataResult] = await Promise.all([\n      APIUsageService.getAllUsageStats(),\n      CachedFoodTruckService.getDataQualityStatsCached(),\n      CachedFoodTruckService.getAllTrucksCached()\n    ]);\n\n    // Type-safe data extraction with proper validation\n    const typedUsageStats: UsageStat[] = Array.isArray(usageStatsResult) ? usageStatsResult : [];\n    const typedQualityStats: QualityStats = qualityStatsResult && typeof qualityStatsResult === 'object' ? qualityStatsResult as QualityStats : { averageScore: 0, distribution: { high: 0, medium: 0, low: 0 } };\n    const typedTrucksData: TruckData = trucksDataResult && typeof trucksDataResult === 'object' ? trucksDataResult as TruckData : { trucks: [], count: 0 };\n\n    // Calculate performance metrics with null safety\n    const totalTrucks = typedTrucksData.count || 0;\n    const verifiedTrucks = typedTrucksData.trucks?.filter(t => t.verification_status === 'verified').length || 0;\n    const averageQuality = typedQualityStats.averageScore || 0;\n    const recentlyUpdated = typedTrucksData.trucks?.filter(t => {\n      if (!t.last_scraped_at) return false;\n      const daysSince = (Date.now() - new Date(t.last_scraped_at).getTime()) / (1000 * 60 * 60 * 24);\n      return daysSince <= 7;\n    }).length || 0;\n\n    // Prepare chart data with type safety\n    const qualityDistributionData = [\n      { name: 'High Quality (80%+)', value: typedQualityStats.distribution?.high || 0, color: '#22c55e' },\n      { name: 'Medium Quality (60-79%)', value: typedQualityStats.distribution?.medium || 0, color: '#f59e0b' },\n      { name: 'Low Quality (<60%)', value: typedQualityStats.distribution?.low || 0, color: '#ef4444' }\n    ];\n\n    const apiUsageData = typedUsageStats.slice(-7).map(stat => ({\n      date: new Date(stat.usage_date).toLocaleDateString(),\n      requests: stat.requests_count,\n      tokens: stat.tokens_used\n    }));\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Analytics & Reporting</h1>\n        <Badge variant=\"outline\" className=\"text-sm\">\n          <Activity className=\"h-4 w-4 mr-1\" />\n          Live Data\n        </Badge>\n      </div>\n\n      {/* Key Performance Indicators */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Food Trucks</CardTitle>\n            <Database className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalTrucks}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {verifiedTrucks} verified ({Math.round((verifiedTrucks / totalTrucks) * 100)}%)\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Data Quality</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{Math.round(averageQuality * 100)}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <Badge\n                variant={averageQuality >= 0.8 ? 'default' : averageQuality >= 0.6 ? 'secondary' : 'destructive'}\n                className=\"text-xs\"\n              >\n                {averageQuality >= 0.8 ? 'Excellent' : averageQuality >= 0.6 ? 'Good' : 'Needs Work'}\n              </Badge>\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Recently Updated</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{recentlyUpdated}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Updated in last 7 days ({Math.round((recentlyUpdated / totalTrucks) * 100)}%)\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">API Requests Today</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {apiUsageData.at(-1)?.requests || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {apiUsageData.at(-1)?.tokens || 0} tokens used\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Data Quality Distribution */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Data Quality Distribution</CardTitle>\n            <CardDescription>\n              Breakdown of food truck data quality scores\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={qualityDistributionData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {qualityDistributionData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>API Usage Trends</CardTitle>\n            <CardDescription>\n              Daily API requests and token consumption (Last 7 days)\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={apiUsageData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"requests\"\n                  stroke=\"#8884d8\"\n                  strokeWidth={2}\n                  name=\"Requests\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"tokens\"\n                  stroke=\"#82ca9d\"\n                  strokeWidth={2}\n                  name=\"Tokens\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed API Usage Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Detailed API Usage Statistics</CardTitle>\n          <CardDescription>\n            Monitor API requests and token usage for various services\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Service Name</TableHead>\n                <TableHead>Usage Date</TableHead>\n                <TableHead>Requests Count</TableHead>\n                <TableHead>Tokens Used</TableHead>\n                <TableHead>Status</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {typedUsageStats.slice(-10).map((stat) => (\n                <TableRow key={stat.id}>\n                  <TableCell className=\"font-medium\">{stat.service_name}</TableCell>\n                  <TableCell>{new Date(stat.usage_date).toLocaleDateString()}</TableCell>\n                  <TableCell>{stat.requests_count}</TableCell>\n                  <TableCell>{stat.tokens_used}</TableCell>\n                  <TableCell>\n                    <Badge\n                      variant={stat.requests_count > 0 ? 'default' : 'secondary'}\n                      className=\"text-xs\"\n                    >\n                      {stat.requests_count > 0 ? (\n                        <>\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          Active\n                        </>\n                      ) : (\n                        <>\n                          <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                          Inactive\n                        </>\n                      )}\n                    </Badge>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Performance Insights */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Performance Insights</CardTitle>\n          <CardDescription>\n            Key insights and recommendations for improving data quality and system performance\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-sm\">Data Quality Insights</h4>\n              <div className=\"space-y-2\">\n                {(typedQualityStats.distribution?.low || 0) > 0 && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                    <span>{typedQualityStats.distribution?.low || 0} trucks need data improvement</span>\n                  </div>\n                )}\n                {(typedQualityStats.distribution?.high || 0) > (typedQualityStats.distribution?.medium || 0) && (\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                    <span>Most trucks have high-quality data</span>\n                  </div>\n                )}\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n                  <span>Average quality: {Math.round(averageQuality * 100)}%</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-sm\">System Performance</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Database className=\"h-4 w-4 text-blue-500\" />\n                  <span>{totalTrucks} total food trucks in database</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Users className=\"h-4 w-4 text-green-500\" />\n                  <span>{verifiedTrucks} verified trucks ({Math.round((verifiedTrucks / totalTrucks) * 100)}%)</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Clock className=\"h-4 w-4 text-orange-500\" />\n                  <span>{recentlyUpdated} recently updated (last 7 days)</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n  } catch (error) {\n    console.error('Error loading analytics data:', error);\n    return (\n      <div className=\"flex flex-col gap-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold\">Analytics & Reporting</h1>\n          <Badge variant=\"destructive\" className=\"text-sm\">\n            <AlertTriangle className=\"h-4 w-4 mr-1\" />\n            Error Loading Data\n          </Badge>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <AlertTriangle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Unable to Load Analytics</h3>\n              <p className=\"text-muted-foreground\">\n                There was an error loading the analytics data. Please try refreshing the page.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\auto-scraping\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-cleanup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\data-quality\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\events\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\[id]\\page.tsx","messages":[{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":302,"column":25,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":308,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":340,"column":46,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":340,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":347,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":347,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toFixed on an `error` typed value.","line":347,"column":88,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":347,"endColumn":95}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { FoodTruckService } from '@/lib/supabase';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  MapPin,\n  Phone,\n  Mail,\n  Globe,\n  Clock,\n  Star,\n  Users,\n  Edit,\n  ArrowLeft\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { \n  formatQualityScore, \n  categorizeQualityScore, \n  getQualityBadgeClasses \n} from '@/lib/utils/data-quality-formatters';\n\ninterface FoodTruckDetailPageProps {\n  readonly params: {\n    readonly id: string;\n  };\n}\n\nexport default async function FoodTruckDetailPage({ params }: FoodTruckDetailPageProps) {\n  const truck = await FoodTruckService.getTruckById(params.id);\n\n  if (!truck) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Food Truck Not Found</h1>\n        <p className=\"text-gray-600 mt-2\">The requested food truck could not be found.</p>\n        <Button asChild className=\"mt-4\">\n          <Link href=\"/admin/food-trucks\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Food Trucks\n          </Link>\n        </Button>\n      </div>\n    );\n  }\n\n  const qualityCategory = categorizeQualityScore(truck.data_quality_score);\n  const badgeClasses = getQualityBadgeClasses(truck.data_quality_score);\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"outline\" size=\"sm\" asChild>\n            <Link href=\"/admin/food-trucks\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back\n            </Link>\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">{truck.name}</h1>\n            <p className=\"text-muted-foreground\">\n              Food truck details and data quality information\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge className={badgeClasses}>\n            {qualityCategory.label} Quality\n          </Badge>\n          <Button asChild>\n            <Link href={`/admin/food-trucks/${truck.id}/edit`}>\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit\n            </Link>\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Basic Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Basic Information</CardTitle>\n            <CardDescription>Core food truck details</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-500\">Name</label>\n              <p className=\"text-lg font-semibold\">{truck.name}</p>\n            </div>\n            \n            {truck.description && (\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Description</label>\n                <p className=\"text-gray-900\">{truck.description}</p>\n              </div>\n            )}\n            \n            {truck.cuisine_type && truck.cuisine_type.length > 0 && (\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Cuisine Type</label>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {truck.cuisine_type.map((cuisine, index) => (\n                    <Badge key={index} variant=\"secondary\">\n                      {cuisine}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {truck.price_range && (\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Price Range</label>\n                <p className=\"text-gray-900\">{truck.price_range}</p>\n              </div>\n            )}\n            \n            {truck.specialties && truck.specialties.length > 0 && (\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Specialties</label>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {truck.specialties.map((specialty, index) => (\n                    <Badge key={index} variant=\"outline\">\n                      {specialty}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Contact Information - Enhanced for Task 4.1.1-4.1.4 */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Phone className=\"h-5 w-5\" />\n              Contact Information\n            </CardTitle>\n            <CardDescription>Phone, email, website, and social media</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {truck.contact_info?.phone ? (\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"h-4 w-4 text-gray-500\" />\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Phone</label>\n                  <p className=\"text-gray-900\">{truck.contact_info.phone}</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-3 text-gray-400\">\n                <Phone className=\"h-4 w-4\" />\n                <span className=\"text-sm\">No phone number available</span>\n              </div>\n            )}\n\n            {truck.contact_info?.email ? (\n              <div className=\"flex items-center gap-3\">\n                <Mail className=\"h-4 w-4 text-gray-500\" />\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Email</label>\n                  <p className=\"text-gray-900\">{truck.contact_info.email}</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-3 text-gray-400\">\n                <Mail className=\"h-4 w-4\" />\n                <span className=\"text-sm\">No email address available</span>\n              </div>\n            )}\n\n            {truck.contact_info?.website ? (\n              <div className=\"flex items-center gap-3\">\n                <Globe className=\"h-4 w-4 text-gray-500\" />\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Website</label>\n                  <a \n                    href={truck.contact_info.website} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-600 hover:text-blue-800 underline\"\n                  >\n                    {truck.contact_info.website}\n                  </a>\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-3 text-gray-400\">\n                <Globe className=\"h-4 w-4\" />\n                <span className=\"text-sm\">No website available</span>\n              </div>\n            )}\n\n            {/* Social Media */}\n            {truck.social_media && Object.keys(truck.social_media).length > 0 && (\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Social Media</label>\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {truck.social_media.instagram && (\n                    <a\n                      href={`https://instagram.com/${truck.social_media.instagram}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"flex items-center gap-1 px-2 py-1 bg-pink-100 text-pink-800 rounded-md text-sm hover:bg-pink-200\"\n                    >\n                      <Globe className=\"h-3 w-3\" />\n                      Instagram\n                    </a>\n                  )}\n                  {truck.social_media.facebook && (\n                    <a\n                      href={`https://facebook.com/${truck.social_media.facebook}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-sm hover:bg-blue-200\"\n                    >\n                      <Globe className=\"h-3 w-3\" />\n                      Facebook\n                    </a>\n                  )}\n                  {truck.social_media.twitter && (\n                    <a\n                      href={`https://twitter.com/${truck.social_media.twitter}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"flex items-center gap-1 px-2 py-1 bg-sky-100 text-sky-800 rounded-md text-sm hover:bg-sky-200\"\n                    >\n                      <Globe className=\"h-3 w-3\" />\n                      Twitter\n                    </a>\n                  )}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Location Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MapPin className=\"h-5 w-5\" />\n              Location Information\n            </CardTitle>\n            <CardDescription>Current location and address details</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {truck.current_location?.address ? (\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Address</label>\n                <p className=\"text-gray-900\">{truck.current_location.address}</p>\n              </div>\n            ) : (\n              <p className=\"text-gray-400 text-sm\">No address available</p>\n            )}\n\n            {truck.current_location?.lat && truck.current_location?.lng && (\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Coordinates</label>\n                <p className=\"text-gray-900 font-mono text-sm\">\n                  {truck.current_location.lat.toFixed(6)}, {truck.current_location.lng.toFixed(6)}\n                </p>\n              </div>\n            )}\n\n            {truck.current_location?.timestamp && (\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\n                <p className=\"text-gray-900\">\n                  {new Date(truck.current_location.timestamp).toLocaleString()}\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Operating Hours - Enhanced for Task 4.1.1-4.1.4 */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Operating Hours\n            </CardTitle>\n            <CardDescription>Daily operating schedule</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {truck.operating_hours && Object.keys(truck.operating_hours).length > 0 ? (\n              <div className=\"space-y-2\">\n                {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map((day) => {\n                  const dayData = truck.operating_hours?.[day] as { closed?: boolean; open?: string; close?: string } | undefined;\n                  const dayName = day.charAt(0).toUpperCase() + day.slice(1);\n\n                  return (\n                    <div key={day} className=\"flex justify-between items-center py-1\">\n                      <span className=\"font-medium text-gray-700\">{dayName}</span>\n                      {dayData && typeof dayData === 'object' ? (\n                        dayData.closed ? (\n                          <span className=\"text-red-600 text-sm\">Closed</span>\n                        ) : (\n                          <span className=\"text-gray-900 text-sm\">\n                            {dayData.open || 'N/A'} - {dayData.close || 'N/A'}\n                          </span>\n                        )\n                      ) : (\n                        <span className=\"text-gray-400 text-sm\">Not specified</span>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <p className=\"text-gray-400 text-sm\">No operating hours available</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Ratings & Reviews - Enhanced for Task 4.1.1-4.1.4 */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Star className=\"h-5 w-5\" />\n              Ratings & Reviews\n            </CardTitle>\n            <CardDescription>Customer feedback and ratings</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {truck.average_rating ? (\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"flex\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <Star\n                        key={star}\n                        className={`h-5 w-5 ${\n                          star <= Math.round(truck.average_rating || 0)\n                            ? 'text-yellow-400 fill-current'\n                            : 'text-gray-300'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-lg font-semibold\">{(truck.average_rating || 0).toFixed(1)}</span>\n                </div>\n                {truck.review_count && (\n                  <div className=\"flex items-center gap-1 text-gray-600\">\n                    <Users className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">{truck.review_count} reviews</span>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-3 text-gray-400\">\n                <Star className=\"h-4 w-4\" />\n                <span className=\"text-sm\">No ratings available</span>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Data Quality Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Data Quality Assessment</CardTitle>\n          <CardDescription>\n            Quality score: {formatQualityScore(truck.data_quality_score)} \n            ({qualityCategory.label} quality)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {formatQualityScore(truck.data_quality_score)}\n              </div>\n              <div className=\"text-sm text-gray-500\">Overall Score</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold\">\n                <Badge variant={truck.verification_status === 'verified' ? 'default' : 'outline'}>\n                  {truck.verification_status}\n                </Badge>\n              </div>\n              <div className=\"text-sm text-gray-500\">Status</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-gray-900\">\n                {truck.created_at ? new Date(truck.created_at).toLocaleDateString() : 'N/A'}\n              </div>\n              <div className=\"text-sm text-gray-500\">Created</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-gray-900\">\n                {truck.updated_at ? new Date(truck.updated_at).toLocaleDateString() : 'N/A'}\n              </div>\n              <div className=\"text-sm text-gray-500\">Updated</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\food-trucks\\page.tsx","messages":[{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":86,"column":27,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":86,"endColumn":88},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":91,"column":26,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":91,"endColumn":76}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { FoodTruckService, FoodTruck } from '@/lib/supabase';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { PlusCircle } from 'lucide-react';\nimport Link from 'next/link';\n\nexport default async function FoodTruckManagementPage() {\n  const { trucks, total } = await FoodTruckService.getAllTrucks(100, 0); // Fetch first 100 trucks\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">Food Truck Management</h1>\n        <Button asChild>\n          <Link href=\"/admin/food-trucks/new\">\n            <PlusCircle className=\"mr-2 h-4 w-4\" />\n            Add Food Truck\n          </Link>\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Food Trucks</CardTitle>\n          <CardDescription>\n            Manage your food trucks and their details. ({total} total)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Cuisine</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Quality Score</TableHead>\n                <TableHead>Last Scraped</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {trucks.map((truck: FoodTruck) => (\n                <TableRow key={truck.id}>\n                  <TableCell className=\"font-medium\">{truck.name}</TableCell>\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      {truck.contact_info?.phone && (\n                        <div className=\"text-sm\">≡ƒô₧ {truck.contact_info.phone}</div>\n                      )}\n                      {truck.contact_info?.email && (\n                        <div className=\"text-sm\">Γ£ë∩╕Å {truck.contact_info.email}</div>\n                      )}\n                      {truck.contact_info?.website && (\n                        <div className=\"text-sm\">≡ƒîÉ {truck.contact_info.website}</div>\n                      )}\n                      {!truck.contact_info?.phone && !truck.contact_info?.email && !truck.contact_info?.website && (\n                        <span className=\"text-muted-foreground\">No contact info</span>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>{truck.cuisine_type?.join(', ') || 'N/A'}</TableCell>\n                  <TableCell>\n                    <Badge\n                      variant={truck.verification_status === 'verified' ? 'default' : 'outline'}\n                    >\n                      {truck.verification_status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <span>{(truck.data_quality_score * 100).toFixed(0)}%</span>\n                      <Badge\n                        variant={\n                          truck.data_quality_score >= 0.8 ? 'default' :\n                          truck.data_quality_score >= 0.6 ? 'secondary' : 'destructive'\n                        }\n                        className=\"text-xs\"\n                      >\n                        {truck.data_quality_score >= 0.8 ? 'High' :\n                         truck.data_quality_score >= 0.6 ? 'Medium' : 'Low'}\n                      </Badge>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {truck.last_scraped_at\n                      ? new Date(truck.last_scraped_at).toLocaleDateString()\n                      : 'N/A'}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <Link href={`/admin/food-trucks/${truck.id}`}>Edit</Link>\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\monitoring\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\pipeline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\test-pipeline\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":148,"column":46,"nodeType":"Literal","messageId":"error","endLine":148,"endColumn":50,"suggestions":[{"messageId":"replace","fix":{"range":[6288,6292],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":157,"column":54,"nodeType":"Literal","messageId":"error","endLine":157,"endColumn":58,"suggestions":[{"messageId":"replace","fix":{"range":[6710,6714],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":176,"column":50,"nodeType":"Literal","messageId":"error","endLine":176,"endColumn":54,"suggestions":[{"messageId":"replace","fix":{"range":[7413,7417],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\admin\\users\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\automated-cleanup\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":185,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":189,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":185,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":185,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .runFullCleanup on an `error` typed value.","line":185,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `Record<string, unknown>`.","line":192,"column":48,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":192,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":197,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":197,"endColumn":17},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'getCleanupSchedules' has no 'await' expression.","line":316,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":316,"endColumn":35,"suggestions":[{"messageId":"removeAsync","fix":{"range":[8498,8562],"text":"function getCleanupSchedules(): CleanupSchedule[]"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'getCleanupHistory' has no 'await' expression.","line":344,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":344,"endColumn":33,"suggestions":[{"messageId":"removeAsync","fix":{"range":[9548,9621],"text":"function getCleanupHistory(limit: number): CleanupResult[]"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'limit' is defined but never used. Allowed unused args must match /^_/u.","line":344,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":344,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":358,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":362,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":358,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":358,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .runFullCleanup on an `error` typed value.","line":358,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":358,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .summary on an `error` typed value.","line":365,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":365,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .operations on an `error` typed value.","line":366,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":366,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .duration on an `error` typed value.","line":367,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":367,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalProcessed on an `error` typed value.","line":368,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":368,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":387,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":391,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":387,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":387,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .runFullCleanup on an `error` typed value.","line":387,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `Record<string, unknown>`.","line":394,"column":42,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":394,"endColumn":48},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'createCleanupSchedule' has no 'await' expression.","line":428,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":428,"endColumn":37,"suggestions":[{"messageId":"removeAsync","fix":{"range":[11694,11843],"text":"function createCleanupSchedule(\n  name: string,\n  operations: string[],\n  schedule: string,\n  enabled: boolean\n): ScheduleCreateResult"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'updateCleanupSchedule' has no 'await' expression.","line":445,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":445,"endColumn":37,"suggestions":[{"messageId":"removeAsync","fix":{"range":[12044,12165],"text":"function updateCleanupSchedule(scheduleId: string, updates: Record<string, unknown>): ScheduleUpdateResult"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'deleteCleanupSchedule' has no 'await' expression.","line":454,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":454,"endColumn":37,"suggestions":[{"messageId":"removeAsync","fix":{"range":[12306,12393],"text":"function deleteCleanupSchedule(scheduleId: string): ScheduleDeleteResult"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'analyzeDuplicates' has no 'await' expression.","line":462,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":462,"endColumn":33,"suggestions":[{"messageId":"removeAsync","fix":{"range":[12523,12608],"text":"function analyzeDuplicates(threshold: number): DuplicateAnalysisResult"},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'logCleanupOperation' has no 'await' expression.","line":478,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":478,"endColumn":35,"suggestions":[{"messageId":"removeAsync","fix":{"range":[13023,13153],"text":"function logCleanupOperation(type: string, result: Record<string, unknown>, options: Record<string, unknown>): void"},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { BatchCleanupService } from '@/lib/data-quality/batch-cleanup';\nimport { supabase, supabaseAdmin } from '@/lib/supabase';\n\n/**\n * SOTA Automated Data Cleanup API\n * \n * Provides scheduled and on-demand data cleanup operations\n * with comprehensive monitoring and reporting capabilities\n * \n * GET /api/admin/automated-cleanup - Get cleanup status and schedule\n * POST /api/admin/automated-cleanup - Run cleanup operations\n */\n\ninterface CleanupSchedule {\n  id: string;\n  name: string;\n  operations: string[];\n  schedule: string; // cron expression\n  enabled: boolean;\n  lastRun?: string;\n  nextRun?: string;\n  successCount: number;\n  errorCount: number;\n}\n\ninterface CleanupResult {\n  id: string;\n  timestamp: string;\n  operation: string;\n  success: boolean;\n  details: Record<string, unknown>;\n}\n\ninterface RequestBody {\n  action: string;\n  options?: Record<string, unknown>;\n}\n\ninterface RunScheduledOptions {\n  scheduleId: string;\n}\n\ninterface RunImmediateOptions {\n  operations?: string[];\n  batchSize?: number;\n  dryRun?: boolean;\n}\n\ninterface ScheduleCleanupOptions {\n  name: string;\n  operations: string[];\n  schedule: string;\n  enabled?: boolean;\n}\n\ninterface UpdateScheduleOptions {\n  scheduleId: string;\n  updates: Record<string, unknown>;\n}\n\ninterface DeleteScheduleOptions {\n  scheduleId: string;\n}\n\ninterface AnalyzeDuplicatesOptions {\n  threshold?: number;\n}\n\ninterface AutomatedCleanupStatus {\n  isRunning: boolean;\n  lastRun: string | null;\n  nextScheduledRun: string | null;\n  schedules: CleanupSchedule[];\n  recentResults: CleanupResult[];\n  statistics: {\n    totalRuns: number;\n    successfulRuns: number;\n    failedRuns: number;\n    trucksImproved: number;\n    duplicatesRemoved: number;\n  };\n}\n\nexport async function GET(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Verify admin access\n    const hasAccess = await verifyAdminAccess(request);\n    if (!hasAccess) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const action = searchParams.get('action');\n\n    switch (action) {\n      case 'status': {\n        const status = await getCleanupStatus();\n        return NextResponse.json({\n          success: true,\n          status\n        });\n      }\n\n      case 'schedules': {\n        const schedules = await getCleanupSchedules();\n        return NextResponse.json({\n          success: true,\n          schedules\n        });\n      }\n\n      case 'history': {\n        const limit = Number.parseInt(searchParams.get('limit') || '10');\n        const history = await getCleanupHistory(limit);\n        return NextResponse.json({\n          success: true,\n          history\n        });\n      }\n\n      case 'preview': {\n        const operations = searchParams.get('operations')?.split(',') || [];\n        const preview = await previewCleanupOperations(operations);\n        return NextResponse.json({\n          success: true,\n          preview\n        });\n      }\n\n      default: {\n        const status = await getCleanupStatus();\n        return NextResponse.json({\n          success: true,\n          status,\n          endpoints: [\n            'GET ?action=status - Get overall cleanup status',\n            'GET ?action=schedules - Get cleanup schedules',\n            'GET ?action=history&limit=N - Get cleanup history',\n            'GET ?action=preview&operations=op1,op2 - Preview cleanup operations',\n            'POST - Run cleanup operations'\n          ]\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Automated cleanup GET error:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to process cleanup request',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest): Promise<NextResponse> {\n  try {\n    // Verify admin access\n    const hasAccess = await verifyAdminAccess(request);\n    if (!hasAccess) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json() as RequestBody;\n    const { action, options = {} } = body;\n\n    switch (action) {\n      case 'run_scheduled': {\n        const { scheduleId } = options as RunScheduledOptions;\n        const result = await runScheduledCleanup(scheduleId);\n        return NextResponse.json({\n          success: true,\n          action: 'run_scheduled',\n          result\n        });\n      }\n\n      case 'run_immediate': {\n        const {\n          operations = ['remove_placeholders', 'normalize_phone', 'fix_coordinates', 'update_quality_scores'],\n          batchSize = 50,\n          dryRun = false\n        } = options as RunImmediateOptions;\n\n        const result = await BatchCleanupService.runFullCleanup({\n          operations,\n          batchSize,\n          dryRun\n        });\n\n        // Log the cleanup operation\n        await logCleanupOperation('immediate', result, options);\n\n        return NextResponse.json({\n          success: true,\n          action: 'run_immediate',\n          result,\n          message: dryRun ? 'Dry run completed successfully' : 'Cleanup completed successfully'\n        });\n      }\n\n      case 'schedule_cleanup': {\n        const { name, operations, schedule, enabled = true } = options as ScheduleCleanupOptions;\n        const scheduleResult = await createCleanupSchedule(name, operations, schedule, enabled);\n        return NextResponse.json({\n          success: true,\n          action: 'schedule_cleanup',\n          result: scheduleResult\n        });\n      }\n\n      case 'update_schedule': {\n        const { scheduleId, updates } = options as UpdateScheduleOptions;\n        const updateResult = await updateCleanupSchedule(scheduleId, updates);\n        return NextResponse.json({\n          success: true,\n          action: 'update_schedule',\n          result: updateResult\n        });\n      }\n\n      case 'delete_schedule': {\n        const { scheduleId } = options as DeleteScheduleOptions;\n        const deleteResult = await deleteCleanupSchedule(scheduleId);\n        return NextResponse.json({\n          success: true,\n          action: 'delete_schedule',\n          result: deleteResult\n        });\n      }\n\n      case 'analyze_duplicates': {\n        const { threshold = 0.8 } = options as AnalyzeDuplicatesOptions;\n        const analysis = await analyzeDuplicates(threshold);\n        return NextResponse.json({\n          success: true,\n          action: 'analyze_duplicates',\n          result: analysis\n        });\n      }\n\n      default: {\n        return NextResponse.json({\n          success: false,\n          error: 'Unknown action',\n          available_actions: [\n            'run_scheduled',\n            'run_immediate',\n            'schedule_cleanup',\n            'update_schedule',\n            'delete_schedule',\n            'analyze_duplicates'\n          ]\n        }, { status: 400 });\n      }\n    }\n  } catch (error) {\n    console.error('Automated cleanup POST error:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to process cleanup request',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\nasync function verifyAdminAccess(request: NextRequest): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader?.startsWith('Bearer ')) {\n      return false;\n    }\n\n    const token = authHeader.slice(7);\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) {\n      return false;\n    }\n\n    if (!supabaseAdmin) {\n      return false;\n    }\n\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nasync function getCleanupStatus(): Promise<AutomatedCleanupStatus> {\n  // This would typically fetch from a database table\n  // For now, return a mock status\n  return {\n    isRunning: false,\n    lastRun: new Date(Date.now() - 3_600_000).toISOString(), // 1 hour ago\n    nextScheduledRun: new Date(Date.now() + 3_600_000).toISOString(), // 1 hour from now\n    schedules: await getCleanupSchedules(),\n    recentResults: [],\n    statistics: {\n      totalRuns: 42,\n      successfulRuns: 40,\n      failedRuns: 2,\n      trucksImproved: 156,\n      duplicatesRemoved: 23\n    }\n  };\n}\n\nasync function getCleanupSchedules(): Promise<CleanupSchedule[]> {\n  // Default cleanup schedules\n  return [\n    {\n      id: 'daily-maintenance',\n      name: 'Daily Maintenance Cleanup',\n      operations: ['remove_placeholders', 'normalize_phone', 'update_quality_scores'],\n      schedule: '0 2 * * *', // Daily at 2 AM\n      enabled: true,\n      lastRun: new Date(Date.now() - 86_400_000).toISOString(), // 24 hours ago\n      nextRun: new Date(Date.now() + 3_600_000).toISOString(), // 1 hour from now\n      successCount: 30,\n      errorCount: 1\n    },\n    {\n      id: 'weekly-deep-clean',\n      name: 'Weekly Deep Cleanup',\n      operations: ['remove_placeholders', 'normalize_phone', 'fix_coordinates', 'update_quality_scores', 'merge_duplicates'],\n      schedule: '0 3 * * 0', // Weekly on Sunday at 3 AM\n      enabled: true,\n      lastRun: new Date(Date.now() - 604_800_000).toISOString(), // 7 days ago\n      nextRun: new Date(Date.now() + 259_200_000).toISOString(), // 3 days from now\n      successCount: 4,\n      errorCount: 0\n    }\n  ];\n}\n\nasync function getCleanupHistory(limit: number): Promise<CleanupResult[]> {\n  // This would fetch from a cleanup_history table\n  return [];\n}\n\ninterface PreviewResult {\n  estimatedChanges: Record<string, unknown>;\n  operationDetails: Record<string, unknown>;\n  estimatedDuration: number;\n  affectedTrucks: number;\n}\n\nasync function previewCleanupOperations(operations: string[]): Promise<PreviewResult> {\n  try {\n    const result = await BatchCleanupService.runFullCleanup({\n      operations,\n      batchSize: 10,\n      dryRun: true\n    });\n\n    return {\n      estimatedChanges: result.summary as Record<string, unknown>,\n      operationDetails: result.operations as Record<string, unknown>,\n      estimatedDuration: result.duration as number,\n      affectedTrucks: result.totalProcessed as number\n    };\n  } catch (error) {\n    throw new Error(`Preview failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nasync function runScheduledCleanup(scheduleId: string): Promise<Record<string, unknown>> {\n  const schedules = await getCleanupSchedules();\n  const schedule = schedules.find(s => s.id === scheduleId);\n\n  if (!schedule) {\n    throw new Error(`Schedule ${scheduleId} not found`);\n  }\n\n  if (!schedule.enabled) {\n    throw new Error(`Schedule ${scheduleId} is disabled`);\n  }\n\n  const result = await BatchCleanupService.runFullCleanup({\n    operations: schedule.operations,\n    batchSize: 50,\n    dryRun: false\n  });\n\n  // Log the scheduled cleanup\n  await logCleanupOperation('scheduled', result, { scheduleId });\n\n  return result as Record<string, unknown>;\n}\n\ninterface ScheduleCreateResult {\n  id: string;\n  name: string;\n  operations: string[];\n  schedule: string;\n  enabled: boolean;\n  created: string;\n}\n\ninterface ScheduleUpdateResult {\n  scheduleId: string;\n  updates: Record<string, unknown>;\n  updated: string;\n}\n\ninterface ScheduleDeleteResult {\n  scheduleId: string;\n  deleted: string;\n}\n\ninterface DuplicateAnalysisResult {\n  threshold: number;\n  potentialDuplicates: number;\n  highConfidenceMatches: number;\n  mediumConfidenceMatches: number;\n  lowConfidenceMatches: number;\n  analysisTime: string;\n}\n\nasync function createCleanupSchedule(\n  name: string,\n  operations: string[],\n  schedule: string,\n  enabled: boolean\n): Promise<ScheduleCreateResult> {\n  // This would create a new schedule in the database\n  return {\n    id: `schedule-${Date.now()}`,\n    name,\n    operations,\n    schedule,\n    enabled,\n    created: new Date().toISOString()\n  };\n}\n\nasync function updateCleanupSchedule(scheduleId: string, updates: Record<string, unknown>): Promise<ScheduleUpdateResult> {\n  // This would update the schedule in the database\n  return {\n    scheduleId,\n    updates,\n    updated: new Date().toISOString()\n  };\n}\n\nasync function deleteCleanupSchedule(scheduleId: string): Promise<ScheduleDeleteResult> {\n  // This would delete the schedule from the database\n  return {\n    scheduleId,\n    deleted: new Date().toISOString()\n  };\n}\n\nasync function analyzeDuplicates(threshold: number): Promise<DuplicateAnalysisResult> {\n  try {\n    // This would run a comprehensive duplicate analysis\n    return {\n      threshold,\n      potentialDuplicates: 0,\n      highConfidenceMatches: 0,\n      mediumConfidenceMatches: 0,\n      lowConfidenceMatches: 0,\n      analysisTime: new Date().toISOString()\n    };\n  } catch (error) {\n    throw new Error(`Duplicate analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nasync function logCleanupOperation(type: string, result: Record<string, unknown>, options: Record<string, unknown>): Promise<void> {\n  try {\n    // This would log the cleanup operation to a database table\n    console.info(`Cleanup operation completed:`, {\n      type,\n      result: result.summary as Record<string, unknown>,\n      options,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.warn('Failed to log cleanup operation:', error);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\cron-status\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CronJobMetrics' is defined but never used.","line":11,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":25},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":46,"column":23,"nodeType":null,"messageId":"refactorFunction","endLine":46,"endColumn":26},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":111,"column":15,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":113,"endColumn":40},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":130,"column":15,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":132,"endColumn":41}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { ScrapingJobService, FoodTruckService, supabase, supabaseAdmin } from '@/lib/supabase';\n\n/**\n * SOTA CRON Job Monitoring API\n *\n * Enhanced monitoring system for background processes and scheduled tasks\n * Provides real-time status, performance metrics, and alerting capabilities\n */\n\ninterface CronJobMetrics {\n  executionTime: number;\n  memoryUsage: number;\n  successRate: number;\n  lastError?: string;\n  performanceTrend: 'improving' | 'stable' | 'degrading';\n}\n\n// Removed unused EnhancedCronJob interface\n\n// Enhanced security check for admin API endpoints\nasync function verifyAdminAccess(request: Request): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader) return false;\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) return false;\n\n    if (!supabaseAdmin) return false;\n\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nexport async function GET(request: Request) {\n  // Verify admin access for API endpoint security\n  const hasAdminAccess = await verifyAdminAccess(request);\n  if (!hasAdminAccess) {\n    return NextResponse.json(\n      { success: false, error: 'Unauthorized access' },\n      { status: 401 }\n    );\n  }\n\n  try {\n    // Fetch real cron job data from database\n    const [recentJobs, todayTrucks] = await Promise.all([\n      ScrapingJobService.getJobsFromDate(new Date(Date.now() - 24 * 60 * 60 * 1000)), // Last 24 hours\n      FoodTruckService.getAllTrucks(1000, 0), // Get trucks for processing count\n    ]);\n\n    // Calculate next run times based on cron schedules\n    const now = new Date();\n    const getNextCronRun = (hour: number) => {\n      const next = new Date(now);\n      next.setHours(hour, 0, 0, 0);\n      if (next <= now) {\n        next.setDate(next.getDate() + 1);\n      }\n      return next.toISOString();\n    };\n\n    const getLastCronRun = (hour: number) => {\n      const last = new Date(now);\n      last.setHours(hour, 0, 0, 0);\n      if (last > now) {\n        last.setDate(last.getDate() - 1);\n      }\n      return last.toISOString();\n    };\n\n    // Filter jobs by type/purpose for cron status\n    const autoScrapeJobs = recentJobs.filter(job =>\n      job.job_type === 'auto_scrape' || job.target_url?.includes('auto')\n    );\n    const qualityCheckJobs = recentJobs.filter(job =>\n      job.job_type === 'quality_check' || job.target_url?.includes('quality')\n    );\n\n    // Count today's new trucks\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const newTrucksToday = todayTrucks.trucks.filter(truck => {\n      const createdAt = new Date(truck.created_at);\n      return createdAt >= today;\n    }).length;\n\n    const jobs = [\n      {\n        id: 'auto-scrape',\n        name: 'Auto Food Truck Scraping',\n        schedule: '0 6 * * *', // Daily at 6 AM\n        lastRun: getLastCronRun(6),\n        nextRun: getNextCronRun(6),\n        status: autoScrapeJobs.some(job => job.status === 'running') ? 'running' as const : 'idle' as const,\n        lastResult: {\n          success: autoScrapeJobs.length > 0 ? autoScrapeJobs[0].status === 'completed' : true,\n          message: autoScrapeJobs.length > 0 && autoScrapeJobs[0].status === 'completed'\n            ? 'Successfully processed food trucks'\n            : autoScrapeJobs.length > 0 && autoScrapeJobs[0].status === 'failed'\n            ? 'Scraping job failed'\n            : 'No recent scraping jobs',\n          trucksProcessed: todayTrucks.total,\n          newTrucksFound: newTrucksToday,\n          errors: autoScrapeJobs.filter(job => job.status === 'failed').length,\n        },\n      },\n      {\n        id: 'quality-check',\n        name: 'Daily Data Quality Check',\n        schedule: '0 8 * * *', // Daily at 8 AM\n        lastRun: getLastCronRun(8),\n        nextRun: getNextCronRun(8),\n        status: qualityCheckJobs.some(job => job.status === 'running') ? 'running' as const : 'idle' as const,\n        lastResult: {\n          success: qualityCheckJobs.length > 0 ? qualityCheckJobs[0].status === 'completed' : true,\n          message: qualityCheckJobs.length > 0 && qualityCheckJobs[0].status === 'completed'\n            ? 'Quality check completed successfully'\n            : qualityCheckJobs.length > 0 && qualityCheckJobs[0].status === 'failed'\n            ? 'Quality check failed'\n            : 'No recent quality checks',\n          trucksProcessed: todayTrucks.total,\n          newTrucksFound: 0, // Quality checks don't find new trucks\n          errors: qualityCheckJobs.filter(job => job.status === 'failed').length,\n        },\n      },\n    ];\n\n    return NextResponse.json({\n      success: true,\n      jobs,\n    });\n  } catch (error) {\n    console.error('Error fetching cron status:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to fetch cron status',\n        jobs: [],\n      },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-cleanup\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":29,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":29,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .runFullCleanup on an `error` typed value.","line":29,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":38,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":38,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .summary on an `error` typed value.","line":39,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .summary on an `error` typed value.","line":39,"column":99,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":106},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":52,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":52,"column":38,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .checkForDuplicates on an `error` typed value.","line":52,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":57,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":57,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":70,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mergeDuplicates on an `error` typed value.","line":70,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":75,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":81,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":84,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":81,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":81,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .runFullCleanup on an `error` typed value.","line":81,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":89,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":89,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":140,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":143,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":140,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":140,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .runFullCleanup on an `error` typed value.","line":140,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":148,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":148,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .summary on an `error` typed value.","line":148,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":149,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":149,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .summary on an `error` typed value.","line":149,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":150,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":154,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":150,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":150,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .operations on an `error` typed value.","line":150,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":151,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":151,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":151,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":152,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":152,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":152,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":152,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":153,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":153,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .affectedCount on an `any` value.","line":153,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":47}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { BatchCleanupService } from '@/lib/data-quality/batch-cleanup';\nimport { DuplicatePreventionService } from '@/lib/data-quality/duplicate-prevention';\n\n/**\n * Data Cleanup API Endpoint\n * Provides automated data quality improvements and cleanup operations\n */\n\ninterface DataCleanupRequestBody {\n  action: string;\n  options?: {\n    batchSize?: number;\n    dryRun?: boolean;\n    operations?: string[];\n    truckData?: Record<string, unknown>;\n    targetId?: string;\n    sourceId?: string;\n  };\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json() as DataCleanupRequestBody;\n    const { action, options = {} } = body;\n\n    switch (action) {\n      case 'full-cleanup': {\n        const result = await BatchCleanupService.runFullCleanup({\n          batchSize: options.batchSize || 50,\n          dryRun: options.dryRun || false,\n          operations: options.operations\n        });\n        \n        return NextResponse.json({\n          success: true,\n          action: 'full-cleanup',\n          result,\n          message: `Cleanup completed: ${result.summary.trucksImproved} trucks improved, ${result.summary.duplicatesRemoved} duplicates removed`\n        });\n      }\n\n      case 'check-duplicates': {\n        const { truckData } = options;\n        if (!truckData) {\n          return NextResponse.json(\n            { success: false, error: 'Missing truckData for duplicate check' },\n            { status: 400 }\n          );\n        }\n\n        const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\n        \n        return NextResponse.json({\n          success: true,\n          action: 'check-duplicates',\n          result: duplicateCheck\n        });\n      }\n\n      case 'merge-duplicates': {\n        const { targetId, sourceId } = options;\n        if (!targetId || !sourceId) {\n          return NextResponse.json(\n            { success: false, error: 'Missing targetId or sourceId for merge operation' },\n            { status: 400 }\n          );\n        }\n\n        const mergedTruck = await DuplicatePreventionService.mergeDuplicates(targetId, sourceId);\n        \n        return NextResponse.json({\n          success: true,\n          action: 'merge-duplicates',\n          result: mergedTruck,\n          message: `Successfully merged truck ${sourceId} into ${targetId}`\n        });\n      }\n\n      case 'dry-run': {\n        const result = await BatchCleanupService.runFullCleanup({\n          ...options,\n          dryRun: true\n        });\n        \n        return NextResponse.json({\n          success: true,\n          action: 'dry-run',\n          result,\n          message: 'Dry run completed - no changes made to database'\n        });\n      }\n\n      default: {\n        return NextResponse.json(\n          { success: false, error: `Unknown action: ${action}` },\n          { status: 400 }\n        );\n      }\n    }\n  } catch (error) {\n    console.error('Data cleanup API error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to process cleanup request',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const action = searchParams.get('action');\n\n    switch (action) {\n      case 'status': {\n        // Return cleanup system status\n        return NextResponse.json({\n          success: true,\n          status: {\n            available_operations: [\n              'remove_placeholders',\n              'normalize_phone',\n              'fix_coordinates',\n              'update_quality_scores',\n              'merge_duplicates'\n            ],\n            default_batch_size: 50,\n            supports_dry_run: true\n          }\n        });\n      }\n\n      case 'preview': {\n        // Run a small dry run to preview changes\n        const result = await BatchCleanupService.runFullCleanup({\n          batchSize: 10,\n          dryRun: true\n        });\n        \n        return NextResponse.json({\n          success: true,\n          preview: {\n            estimated_improvements: result.summary.trucksImproved,\n            estimated_duplicates: result.summary.duplicatesRemoved,\n            operations: result.operations.map(op => ({\n              type: op.type,\n              description: op.description,\n              affected_count: op.affectedCount\n            }))\n          }\n        });\n      }\n\n      default: {\n        return NextResponse.json({\n          success: true,\n          endpoints: [\n            'GET /api/admin/data-cleanup?action=status - Get cleanup system status',\n            'GET /api/admin/data-cleanup?action=preview - Preview cleanup changes',\n            'POST /api/admin/data-cleanup - Run cleanup operations'\n          ],\n          actions: [\n            'full-cleanup - Run all cleanup operations',\n            'check-duplicates - Check if truck data is duplicate',\n            'merge-duplicates - Merge two duplicate trucks',\n            'dry-run - Preview changes without making them'\n          ]\n        });\n      }\n    }\n  } catch (error) {\n    console.error('Data cleanup GET error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to process cleanup request',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\data-quality\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\oauth-status\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabaseAdmin' is defined but never used.","line":2,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":33},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'supabaseAdmin'.","line":2,"column":20,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":2,"endColumn":33,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[74,89],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 19 to the 15 allowed.","line":37,"column":23,"nodeType":null,"messageId":"refactorFunction","endLine":37,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":62,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":19},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'data' variable.","line":62,"column":15,"nodeType":"Identifier","messageId":"unusedVariable","endLine":62,"endColumn":19},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"data\".","line":62,"column":15,"nodeType":null,"messageId":"removeAssignment","endLine":62,"endColumn":19},{"ruleId":"unicorn/no-negated-condition","severity":2,"message":"Unexpected negated condition.","line":64,"column":11,"nodeType":"UnaryExpression","messageId":"no-negated-condition","endLine":64,"endColumn":17,"fix":{"range":[1908,2029],"text":"error) {\n        status.supabase.error = error.message;\n      } else {\n        status.supabase.connected = true;\n      }"}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":80,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":80,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":82,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .external on an `any` value.","line":82,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .disable_signup on an `any` value.","line":83,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":84,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .autoconfirm on an `any` value.","line":84,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .external on an `any` value.","line":87,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":32},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":92,"column":7,"nodeType":"CatchClause","messageId":"handleException","endLine":95,"endColumn":6},{"ruleId":"unicorn/prefer-optional-catch-binding","severity":2,"message":"Remove unused catch binding `error`.","line":92,"column":14,"nodeType":"Identifier","messageId":"with-name","endLine":92,"endColumn":19,"fix":{"range":[2847,2855],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":92,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":19},{"ruleId":"sonarjs/no-ignored-exceptions","severity":2,"message":"Handle this exception or don't catch it at all.","line":110,"column":7,"nodeType":"CatchClause","messageId":"handleException","endLine":112,"endColumn":6},{"ruleId":"unicorn/prefer-optional-catch-binding","severity":2,"message":"Remove unused catch binding `error`.","line":110,"column":14,"nodeType":"Identifier","messageId":"with-name","endLine":110,"endColumn":19,"fix":{"range":[3459,3467],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":110,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":19},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":124,"column":66,"nodeType":"Literal","messageId":"error","endLine":124,"endColumn":70,"suggestions":[{"messageId":"replace","fix":{"range":[3978,3982],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-negated-condition","severity":2,"message":"Unexpected negated condition.","line":167,"column":9,"nodeType":"UnaryExpression","messageId":"no-negated-condition","endLine":167,"endColumn":52,"fix":{"range":[5408,5701],"text":"status.supabase.authSettings.googleEnabled) {\n      recommendations.push('Γ£à Google OAuth provider is enabled');\n    } else {\n      recommendations.push('≡ƒöº Enable Google OAuth provider in Supabase Dashboard');\n      recommendations.push('   Go to: Authentication > Providers > Google');\n    }"}},{"ruleId":"unicorn/prefer-single-call","severity":2,"message":"Do not call `Array#push()` multiple times.","line":169,"column":23,"nodeType":"Identifier","messageId":"error/array-push","endLine":169,"endColumn":27,"fix":{"range":[5537,5616],"text":", '   Go to: Authentication > Providers > Google');"}},{"ruleId":"unicorn/prefer-single-call","severity":2,"message":"Do not call `Array#push()` multiple times.","line":175,"column":21,"nodeType":"Identifier","messageId":"error/array-push","endLine":175,"endColumn":25,"fix":{"range":[5787,5870],"text":", '   1. Create Google Cloud Console OAuth credentials');"}},{"ruleId":"unicorn/prefer-single-call","severity":2,"message":"Do not call `Array#push()` multiple times.","line":176,"column":21,"nodeType":"Identifier","messageId":"error/array-push","endLine":176,"endColumn":25,"fix":{"range":[5868,5947],"text":", '   2. Add credentials to Supabase Auth settings');"}},{"ruleId":"unicorn/prefer-single-call","severity":2,"message":"Do not call `Array#push()` multiple times.","line":182,"column":21,"nodeType":"Identifier","messageId":"error/array-push","endLine":182,"endColumn":25,"fix":{"range":[6077,6140],"text":", 'Γ£à Test the login flow at /login');"}},{"ruleId":"unicorn/prefer-single-call","severity":2,"message":"Do not call `Array#push()` multiple times.","line":188,"column":21,"nodeType":"Identifier","messageId":"error/array-push","endLine":188,"endColumn":25,"fix":{"range":[6296,6377],"text":", '≡ƒöº Run: npm run oauth:verify for automated checks');"}},{"ruleId":"unicorn/switch-case-braces","severity":2,"message":"Missing braces in case clause.","line":221,"column":5,"nodeType":"SwitchCase","messageId":"switch-case-braces/missing","endLine":221,"endColumn":18,"fix":{"range":[7198,7264],"text":" {\n      return 'Google OAuth is fully configured and ready to use';\n    }"}},{"ruleId":"unicorn/switch-case-braces","severity":2,"message":"Missing braces in case clause.","line":223,"column":5,"nodeType":"SwitchCase","messageId":"switch-case-braces/missing","endLine":223,"endColumn":20,"fix":{"range":[7284,7357],"text":" {\n      return 'Basic configuration complete, OAuth provider needs setup';\n    }"}},{"ruleId":"unicorn/switch-case-braces","severity":2,"message":"Missing braces in case clause.","line":225,"column":5,"nodeType":"SwitchCase","messageId":"switch-case-braces/missing","endLine":225,"endColumn":27,"fix":{"range":[7384,7431],"text":" {\n      return 'Google OAuth is not configured';\n    }"}},{"ruleId":"unicorn/switch-case-braces","severity":2,"message":"Missing braces in case clause.","line":227,"column":5,"nodeType":"SwitchCase","messageId":"switch-case-braces/missing","endLine":227,"endColumn":18,"fix":{"range":[7449,7494],"text":" {\n      return 'Configuration error detected';\n    }"}},{"ruleId":"unicorn/switch-case-braces","severity":2,"message":"Missing braces in case clause.","line":229,"column":5,"nodeType":"SwitchCase","messageId":"switch-case-braces/missing","endLine":229,"endColumn":13,"fix":{"range":[7507,7552],"text":" {\n      return 'Unknown configuration status';\n    }"}},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'POST' has no 'await' expression.","line":238,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":238,"endColumn":27,"suggestions":[{"messageId":"removeAsync","fix":{"range":[7649,7655],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":244,"column":129,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":244,"endColumn":155}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":14,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabase, supabaseAdmin } from '@/lib/supabase';\n\n/**\n * OAuth Configuration Status Endpoint\n * Provides comprehensive status of Google OAuth configuration\n * for admin dashboard monitoring and setup verification.\n */\n\ninterface OAuthStatus {\n  timestamp: string;\n  environment: 'development' | 'production';\n  supabase: {\n    connected: boolean;\n    projectId: string;\n    authSettings?: {\n      googleEnabled: boolean;\n      signupEnabled: boolean;\n      autoconfirm: boolean;\n    };\n    error?: string;\n  };\n  environment_variables: {\n    supabaseUrl: boolean;\n    supabaseAnonKey: boolean;\n    supabaseServiceKey: boolean;\n  };\n  oauth_flow: {\n    loginPageExists: boolean;\n    callbackRouteExists: boolean;\n    authProviderConfigured: boolean;\n  };\n  recommendations: string[];\n  overall_status: 'ready' | 'partial' | 'not_configured' | 'error';\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const status: OAuthStatus = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV === 'production' ? 'production' : 'development',\n      supabase: {\n        connected: false,\n        projectId: 'zkwliyjjkdnigizidlln'\n      },\n      environment_variables: {\n        supabaseUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,\n        supabaseAnonKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n        supabaseServiceKey: !!process.env.SUPABASE_SERVICE_ROLE_KEY\n      },\n      oauth_flow: {\n        loginPageExists: true, // We know this exists from our codebase\n        callbackRouteExists: true, // We know this exists from our codebase\n        authProviderConfigured: false\n      },\n      recommendations: [],\n      overall_status: 'not_configured'\n    };\n\n    // Test Supabase connection\n    try {\n      const { data, error } = await supabase.from('profiles').select('count').limit(1);\n\n      if (!error) {\n        status.supabase.connected = true;\n      } else {\n        status.supabase.error = error.message;\n      }\n    } catch (error) {\n      status.supabase.error = error instanceof Error ? error.message : 'Unknown connection error';\n    }\n\n    // Try to get Supabase auth settings\n    try {\n      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n      if (supabaseUrl) {\n        const settingsResponse = await fetch(`${supabaseUrl}/auth/v1/settings`);\n\n        if (settingsResponse.ok) {\n          const settings = await settingsResponse.json();\n          status.supabase.authSettings = {\n            googleEnabled: settings.external?.google || false,\n            signupEnabled: !settings.disable_signup,\n            autoconfirm: settings.autoconfirm || false\n          };\n\n          if (settings.external?.google) {\n            status.oauth_flow.authProviderConfigured = true;\n          }\n        }\n      }\n    } catch (error) {\n      // Auth settings endpoint might require authentication, which is normal\n      console.info('Auth settings endpoint requires authentication (normal)');\n    }\n\n    // Test OAuth provider availability\n    try {\n      const { error: oauthError } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: 'http://localhost:3000/auth/callback',\n          skipBrowserRedirect: true\n        }\n      });\n\n      if (!oauthError || oauthError.message !== 'Provider not found') {\n        status.oauth_flow.authProviderConfigured = true;\n      }\n    } catch (error) {\n      console.info('OAuth provider test failed (may be normal)');\n    }\n\n    // Generate recommendations and determine status\n    status.recommendations = generateRecommendations(status);\n    status.overall_status = determineOverallStatus(status);\n\n    return NextResponse.json({\n      success: true,\n      ...status,\n      legacy_format: {\n        oauth_status: status.overall_status,\n        message: getStatusMessage(status.overall_status),\n        configuration_steps: status.overall_status === 'ready' ? null : [\n          '1. Go to Supabase Dashboard > Authentication > Providers',\n          '2. Enable Google provider',\n          '3. Add Google OAuth Client ID and Secret',\n          '4. Configure redirect URLs',\n          '5. Test OAuth flow'\n        ]\n      }\n    });\n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: 'OAuth status check failed',\n      details: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n}\n\nfunction generateRecommendations(status: OAuthStatus): string[] {\n  const recommendations: string[] = [];\n\n  // Environment variables check\n  if (!status.environment_variables.supabaseUrl) {\n    recommendations.push('Γ¥î Configure NEXT_PUBLIC_SUPABASE_URL environment variable');\n  }\n  if (!status.environment_variables.supabaseAnonKey) {\n    recommendations.push('Γ¥î Configure NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n  }\n  if (!status.environment_variables.supabaseServiceKey) {\n    recommendations.push('Γ¥î Configure SUPABASE_SERVICE_ROLE_KEY environment variable');\n  }\n\n  // Supabase connection check\n  if (!status.supabase.connected) {\n    recommendations.push('Γ¥î Fix Supabase connection issue');\n    if (status.supabase.error) {\n      recommendations.push(`   Error: ${status.supabase.error}`);\n    }\n  }\n\n  // OAuth configuration check\n  if (status.supabase.authSettings) {\n    if (!status.supabase.authSettings.googleEnabled) {\n      recommendations.push('≡ƒöº Enable Google OAuth provider in Supabase Dashboard');\n      recommendations.push('   Go to: Authentication > Providers > Google');\n    } else {\n      recommendations.push('Γ£à Google OAuth provider is enabled');\n    }\n  } else {\n    recommendations.push('≡ƒöº Configure Google OAuth in Supabase Dashboard');\n    recommendations.push('   1. Create Google Cloud Console OAuth credentials');\n    recommendations.push('   2. Add credentials to Supabase Auth settings');\n  }\n\n  // Success state\n  if (status.overall_status === 'ready') {\n    recommendations.push('≡ƒÄë OAuth configuration is complete!');\n    recommendations.push('Γ£à Test the login flow at /login');\n  }\n\n  // General guidance\n  if (recommendations.length > 1) {\n    recommendations.push('≡ƒôû See docs/GOOGLE_OAUTH_SETUP_GUIDE.md for detailed instructions');\n    recommendations.push('≡ƒöº Run: npm run oauth:verify for automated checks');\n  }\n\n  return recommendations;\n}\n\nfunction determineOverallStatus(status: OAuthStatus): 'ready' | 'partial' | 'not_configured' | 'error' {\n  // Error state\n  if (!status.supabase.connected || status.supabase.error) {\n    return 'error';\n  }\n\n  // Check if all environment variables are present\n  const envVarsComplete = Object.values(status.environment_variables).every(Boolean);\n  if (!envVarsComplete) {\n    return 'not_configured';\n  }\n\n  // Check OAuth configuration\n  if (status.supabase.authSettings?.googleEnabled && status.oauth_flow.authProviderConfigured) {\n    return 'ready';\n  }\n\n  // Partial configuration\n  if (status.supabase.connected && envVarsComplete) {\n    return 'partial';\n  }\n\n  return 'not_configured';\n}\n\nfunction getStatusMessage(status: string): string {\n  switch (status) {\n    case 'ready':\n      return 'Google OAuth is fully configured and ready to use';\n    case 'partial':\n      return 'Basic configuration complete, OAuth provider needs setup';\n    case 'not_configured':\n      return 'Google OAuth is not configured';\n    case 'error':\n      return 'Configuration error detected';\n    default:\n      return 'Unknown configuration status';\n  }\n}\n\n/**\n * Test OAuth Flow Endpoint\n * Provides OAuth test URL for manual testing\n */\nexport async function POST() {\n  try {\n    const baseUrl = process.env.NODE_ENV === 'production'\n      ? 'https://food-truck-finder-poc-git-feat-s-20ec1c-codedeficients-projects.vercel.app'\n      : 'http://localhost:3000';\n\n    const testUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/auth/v1/authorize?provider=google&redirect_to=${encodeURIComponent(`${baseUrl}/auth/callback`)}`;\n\n    return NextResponse.json({\n      success: true,\n      message: 'OAuth test URL generated',\n      test_url: testUrl,\n      environment: process.env.NODE_ENV || 'development',\n      instructions: [\n        '1. Open the test_url in a new browser tab',\n        '2. Complete Google OAuth flow',\n        '3. Verify redirect to admin dashboard',\n        '4. Check for proper role assignment'\n      ],\n      manual_test_steps: [\n        'Navigate to /login page',\n        'Click Google login button',\n        'Complete OAuth flow',\n        'Verify admin access'\n      ],\n      automation_commands: [\n        'npm run oauth:verify - Check configuration',\n        'npm run oauth:test:dev - Test development flow',\n        'npm run oauth:test:prod - Test production flow'\n      ]\n    });\n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to generate OAuth test URL',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\realtime-events\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":65,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":92,"endColumn":8},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":95,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":101,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `ReadableStreamDefaultController<any>` assigned to a parameter of type `ReadableStreamDefaultController<Uint8Array<ArrayBufferLike>>`.","line":97,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":97,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":165,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":165,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":165,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":165,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":167,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":167,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avg_quality_score on an `error` typed value.","line":167,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":168,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":168,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total_trucks on an `error` typed value.","line":168,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":45},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":265,"column":27,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":265,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":276,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":276,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":277,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":277,"endColumn":28}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from 'next/server';\nimport { supabase, supabaseAdmin, ScrapingJobService, FoodTruckService, DataQualityService } from '@/lib/supabase';\n\n/**\n * SOTA Real-time Admin Dashboard Events API\n * \n * Implements Server-Sent Events (SSE) for real-time admin dashboard updates\n * Provides live monitoring of scraping jobs, data quality, and system status\n * \n * GET /api/admin/realtime-events\n */\n\ninterface AdminEvent {\n  id: string;\n  type: 'scraping_update' | 'data_quality_change' | 'system_alert' | 'user_activity' | 'heartbeat';\n  timestamp: string;\n  data: Record<string, unknown>;\n  severity?: 'info' | 'warning' | 'error' | 'critical';\n}\n\ninterface RealtimeMetrics {\n  scrapingJobs: {\n    active: number;\n    completed: number;\n    failed: number;\n    pending: number;\n  };\n  dataQuality: {\n    averageScore: number;\n    totalTrucks: number;\n    recentChanges: number;\n  };\n  systemHealth: {\n    status: 'healthy' | 'warning' | 'error';\n    uptime: number;\n    lastUpdate: string;\n  };\n}\n\nexport async function GET(request: NextRequest): Promise<Response> {\n  // Verify admin access\n  const hasAccess = await verifyAdminAccess(request);\n  if (!hasAccess) {\n    return new Response('Unauthorized', { status: 401 });\n  }\n\n  // Create SSE response\n  const encoder = new TextEncoder();\n  const stream = new ReadableStream({\n    start(controller) {\n      // Send initial connection event\n      const connectionEvent: AdminEvent = {\n        id: generateEventId(),\n        type: 'heartbeat',\n        timestamp: new Date().toISOString(),\n        data: {\n          message: 'Real-time admin dashboard connected',\n          connectionId: generateEventId()\n        }\n      };\n      \n      controller.enqueue(encoder.encode(formatSSEMessage(connectionEvent)));\n\n      // Set up periodic updates\n      const intervalId = setInterval(async () => {\n        try {\n          const metrics = await fetchRealtimeMetrics();\n          const event: AdminEvent = {\n            id: generateEventId(),\n            type: 'heartbeat',\n            timestamp: new Date().toISOString(),\n            data: metrics\n          };\n          \n          controller.enqueue(encoder.encode(formatSSEMessage(event)));\n        } catch (error) {\n          console.error('Error fetching realtime metrics:', error);\n          \n          const errorEvent: AdminEvent = {\n            id: generateEventId(),\n            type: 'system_alert',\n            timestamp: new Date().toISOString(),\n            data: {\n              error: 'Failed to fetch metrics',\n              details: error instanceof Error ? error.message : 'Unknown error'\n            },\n            severity: 'error'\n          };\n          \n          controller.enqueue(encoder.encode(formatSSEMessage(errorEvent)));\n        }\n      }, 5000); // Update every 5 seconds\n\n      // Set up data change monitoring\n      const changeMonitorId = setInterval(async () => {\n        try {\n          await monitorDataChanges(controller, encoder);\n        } catch (error) {\n          console.error('Error monitoring data changes:', error);\n        }\n      }, 10_000); // Check for changes every 10 seconds\n\n      // Cleanup on connection close\n      request.signal.addEventListener('abort', () => {\n        clearInterval(intervalId);\n        clearInterval(changeMonitorId);\n        controller.close();\n      });\n    }\n  });\n\n  return new Response(stream, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control'\n    }\n  });\n}\n\nasync function verifyAdminAccess(request: NextRequest): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader?.startsWith('Bearer ')) {\n      return false;\n    }\n\n    const token = authHeader.slice(7);\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) {\n      return false;\n    }\n\n    if (!supabaseAdmin) {\n      return false;\n    }\n\n    const { data: profile } = await supabaseAdmin\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nasync function fetchRealtimeMetrics(): Promise<RealtimeMetrics> {\n  try {\n    // Fetch scraping job metrics\n    const recentJobs = await ScrapingJobService.getAllJobs(50, 0);\n    const scrapingMetrics = {\n      active: recentJobs.filter(job => job.status === 'running').length,\n      completed: recentJobs.filter(job => job.status === 'completed').length,\n      failed: recentJobs.filter(job => job.status === 'failed').length,\n      pending: recentJobs.filter(job => job.status === 'pending').length\n    };\n\n    // Fetch data quality metrics\n    const qualityStats = await DataQualityService.getQualityStats();\n    const dataQualityMetrics = {\n      averageScore: qualityStats.avg_quality_score || 0,\n      totalTrucks: qualityStats.total_trucks || 0,\n      recentChanges: 0 // This would need additional tracking\n    };\n\n    // System health check\n    const systemHealth = {\n      status: 'healthy' as const,\n      uptime: process.uptime(),\n      lastUpdate: new Date().toISOString()\n    };\n\n    return {\n      scrapingJobs: scrapingMetrics,\n      dataQuality: dataQualityMetrics,\n      systemHealth\n    };\n  } catch (error) {\n    console.error('Error fetching realtime metrics:', error);\n    return {\n      scrapingJobs: { active: 0, completed: 0, failed: 0, pending: 0 },\n      dataQuality: { averageScore: 0, totalTrucks: 0, recentChanges: 0 },\n      systemHealth: {\n        status: 'error',\n        uptime: 0,\n        lastUpdate: new Date().toISOString()\n      }\n    };\n  }\n}\n\nasync function monitorDataChanges(\n  controller: ReadableStreamDefaultController<Uint8Array>,\n  encoder: TextEncoder\n): Promise<void> {\n  try {\n    // Check for recent scraping job changes\n    const recentJobs = await ScrapingJobService.getJobsFromDate(\n      new Date(Date.now() - 60_000) // Last minute\n    );\n\n    if (recentJobs.length > 0) {\n      const event: AdminEvent = {\n        id: generateEventId(),\n        type: 'scraping_update',\n        timestamp: new Date().toISOString(),\n        data: {\n          recentJobs: recentJobs.map(job => ({\n            id: job.id,\n            status: job.status,\n            started_at: job.started_at,\n            completed_at: job.completed_at\n          })),\n          count: recentJobs.length\n        },\n        severity: 'info'\n      };\n\n      controller.enqueue(encoder.encode(formatSSEMessage(event)));\n    }\n\n    // Check for data quality changes\n    const recentTrucks = await FoodTruckService.getAllTrucks(10, 0);\n    const recentlyUpdated = recentTrucks.trucks.filter(truck => {\n      const updatedAt = new Date(truck.updated_at);\n      const oneMinuteAgo = new Date(Date.now() - 60_000);\n      return updatedAt > oneMinuteAgo;\n    });\n\n    if (recentlyUpdated.length > 0) {\n      const event: AdminEvent = {\n        id: generateEventId(),\n        type: 'data_quality_change',\n        timestamp: new Date().toISOString(),\n        data: {\n          updatedTrucks: recentlyUpdated.map(truck => ({\n            id: truck.id,\n            name: truck.name,\n            data_quality_score: truck.data_quality_score,\n            updated_at: truck.updated_at\n          })),\n          count: recentlyUpdated.length\n        },\n        severity: 'info'\n      };\n\n      controller.enqueue(encoder.encode(formatSSEMessage(event)));\n    }\n  } catch (error) {\n    console.error('Error monitoring data changes:', error);\n  }\n}\n\nfunction formatSSEMessage(event: AdminEvent): string {\n  return `id: ${event.id}\\nevent: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`;\n}\n\nfunction generateEventId(): string {\n  return `${Date.now()}-${Math.random().toString(36).slice(2, 11)}`;\n}\n\n// Health check endpoint for monitoring\nexport async function POST(request: NextRequest): Promise<Response> {\n  try {\n    const hasAccess = await verifyAdminAccess(request);\n    if (!hasAccess) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n\n    const body = await request.json();\n    const { action } = body;\n\n    switch (action) {\n      case 'health_check': {\n        const metrics = await fetchRealtimeMetrics();\n        return Response.json({\n          success: true,\n          status: 'healthy',\n          metrics,\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      case 'trigger_test_event': {\n        // This would trigger a test event for debugging\n        return Response.json({\n          success: true,\n          message: 'Test event triggered',\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      default: {\n        return Response.json({\n          success: false,\n          error: 'Unknown action',\n          available_actions: ['health_check', 'trigger_test_event']\n        }, { status: 400 });\n      }\n    }\n  } catch (error) {\n    console.error('Realtime events POST error:', error);\n    return Response.json({\n      success: false,\n      error: 'Internal server error',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\admin\\scraping-metrics\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'todayJobs' is assigned a value but never used.","line":39,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":30},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'todayJobs' variable.","line":39,"column":21,"nodeType":"Identifier","messageId":"unusedVariable","endLine":39,"endColumn":30},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"todayJobs\".","line":39,"column":21,"nodeType":null,"messageId":"removeAssignment","endLine":39,"endColumn":30},{"ruleId":"unicorn/no-array-reduce","severity":2,"message":"`Array#reduce()` is not allowed. Prefer other types of loop for readability.","line":56,"column":25,"nodeType":"Identifier","messageId":"reduce","endLine":56,"endColumn":31}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { ScrapingJobService, FoodTruckService, supabase } from '@/lib/supabase';\n\n// Security check for admin API endpoints\nasync function verifyAdminAccess(request: Request): Promise<boolean> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader) return false;\n\n    const token = authHeader.replace('Bearer ', '');\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n\n    if (error || !user) return false;\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    return profile?.role === 'admin';\n  } catch {\n    return false;\n  }\n}\n\nexport async function GET(request: Request) {\n  // Verify admin access for API endpoint security\n  const hasAdminAccess = await verifyAdminAccess(request);\n  if (!hasAdminAccess) {\n    return NextResponse.json(\n      { success: false, error: 'Unauthorized access' },\n      { status: 401 }\n    );\n  }\n\n  try {\n    // Fetch real scraping metrics from database\n    const [allJobs, todayJobs, recentTrucks] = await Promise.all([\n      ScrapingJobService.getAllJobs(100, 0), // Get last 100 jobs for metrics\n      ScrapingJobService.getJobsFromDate(new Date(Date.now() - 24 * 60 * 60 * 1000)), // Last 24 hours\n      FoodTruckService.getAllTrucks(1000, 0), // Get trucks for processing count\n    ]);\n\n    const totalRuns = allJobs.length;\n    const successfulRuns = allJobs.filter(job => job.status === 'completed').length;\n    const failedRuns = allJobs.filter(job => job.status === 'failed').length;\n\n    // Calculate average run time from completed jobs\n    const completedJobs = allJobs.filter(job =>\n      job.status === 'completed' && job.started_at && job.completed_at\n    );\n\n    const averageRunTime = completedJobs.length > 0\n      ? Math.round(\n          completedJobs.reduce((sum, job) => {\n            const start = new Date(job.started_at!).getTime();\n            const end = new Date(job.completed_at!).getTime();\n            return sum + (end - start) / 1000; // Convert to seconds\n          }, 0) / completedJobs.length\n        )\n      : 0;\n\n    // Count trucks processed today and new trucks\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const newTrucksToday = recentTrucks.trucks.filter(truck => {\n      const createdAt = new Date(truck.created_at);\n      return createdAt >= today;\n    }).length;\n\n    const metrics = {\n      totalRuns,\n      successfulRuns,\n      failedRuns,\n      averageRunTime,\n      totalTrucksProcessed: recentTrucks.total,\n      newTrucksToday,\n    };\n\n    return NextResponse.json({\n      success: true,\n      metrics,\n    });\n  } catch (error) {\n    console.error('Error fetching scraping metrics:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to fetch scraping metrics',\n        metrics: undefined,\n      },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\analytics\\web-vitals\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":20,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":20,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3639,3642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3639,3642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3740,3743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3740,3743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .metric_name on an `any` value.","line":141,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":157,"column":40,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":157,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .metric_value on an `any` value.","line":157,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":158,"column":41,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":158,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .rating on an `any` value.","line":158,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":162,"column":55,"nodeType":"BinaryExpression","messageId":"unsafeReturn","endLine":162,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any[]` assigned to a parameter of type `number[]`.","line":163,"column":29,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":163,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any[]` assigned to a parameter of type `number[]`.","line":164,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":164,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any[]` assigned to a parameter of type `number[]`.","line":165,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":165,"endColumn":32}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabaseAdmin } from '@/lib/supabase';\n\n/**\n * Web Vitals Analytics Endpoint\n * Collects and stores Core Web Vitals metrics for performance monitoring\n */\n\ninterface WebVitalMetric {\n  name: string;\n  value: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  timestamp: number;\n  url: string;\n  userAgent: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const metric: WebVitalMetric = await request.json();\n\n    // Validate metric data\n    if (!metric.name || typeof metric.value !== 'number' || !metric.url) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid metric data' },\n        { status: 400 }\n      );\n    }\n\n    // Store metric in database (if admin client available)\n    if (supabaseAdmin) {\n      try {\n        const { error } = await supabaseAdmin\n          .from('web_vitals_metrics')\n          .insert({\n            metric_name: metric.name,\n            metric_value: metric.value,\n            rating: metric.rating,\n            page_url: metric.url,\n            user_agent: metric.userAgent,\n            recorded_at: new Date(metric.timestamp).toISOString()\n          });\n\n        if (error) {\n          console.warn('Failed to store web vital metric:', error);\n          // Don't fail the request - metrics collection should be non-blocking\n        }\n      } catch (dbError) {\n        console.warn('Database error storing web vital:', dbError);\n      }\n    }\n\n    // Log performance issues for monitoring\n    if (metric.rating === 'poor') {\n      console.warn(`Poor ${metric.name} performance detected:`, {\n        value: metric.value,\n        url: metric.url,\n        timestamp: new Date(metric.timestamp).toISOString()\n      });\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Web vitals endpoint error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Get Web Vitals Analytics Data\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const days = Number.parseInt(searchParams.get('days') || '7');\n    const page = searchParams.get('page');\n\n    if (!supabaseAdmin) {\n      return NextResponse.json(\n        { success: false, error: 'Database not available' },\n        { status: 503 }\n      );\n    }\n\n    // Calculate date range\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    let query = supabaseAdmin\n      .from('web_vitals_metrics')\n      .select('*')\n      .gte('recorded_at', startDate.toISOString())\n      .order('recorded_at', { ascending: false });\n\n    // Filter by page if specified\n    if (page) {\n      query = query.ilike('page_url', `%${page}%`);\n    }\n\n    const { data: metrics, error } = await query.limit(1000);\n\n    if (error) {\n      throw error;\n    }\n\n    // Calculate summary statistics\n    const summary = calculateMetricsSummary(metrics || []);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        metrics: metrics || [],\n        summary,\n        period: {\n          days,\n          startDate: startDate.toISOString(),\n          endDate: new Date().toISOString()\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Failed to fetch web vitals analytics:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch analytics data' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Calculate summary statistics for metrics\n */\nfunction calculateMetricsSummary(metrics: any[]) {\n  const metricTypes = ['LCP', 'FID', 'CLS', 'FCP', 'TTFB'];\n  const summary: Record<string, any> = {};\n\n  for (const metricName of metricTypes) {\n    const metricData = metrics.filter(m => m.metric_name === metricName);\n    \n    if (metricData.length === 0) {\n      summary[metricName] = {\n        count: 0,\n        average: undefined,\n        median: undefined,\n        p75: undefined,\n        p95: undefined,\n        goodCount: 0,\n        needsImprovementCount: 0,\n        poorCount: 0\n      };\n      continue;\n    }\n\n    const values = metricData.map(m => m.metric_value).sort((a, b) => a - b);\n    const ratings = metricData.map(m => m.rating);\n\n    summary[metricName] = {\n      count: metricData.length,\n      average: Math.round(values.reduce((sum, val) => sum + val, 0) / values.length),\n      median: getPercentile(values, 50),\n      p75: getPercentile(values, 75),\n      p95: getPercentile(values, 95),\n      goodCount: ratings.filter(r => r === 'good').length,\n      needsImprovementCount: ratings.filter(r => r === 'needs-improvement').length,\n      poorCount: ratings.filter(r => r === 'poor').length\n    };\n  }\n\n  return summary;\n}\n\n/**\n * Calculate percentile value from sorted array\n */\nfunction getPercentile(sortedValues: number[], percentile: number): number {\n  if (sortedValues.length === 0) return 0;\n  \n  const index = (percentile / 100) * (sortedValues.length - 1);\n  const lower = Math.floor(index);\n  const upper = Math.ceil(index);\n  \n  if (lower === upper) {\n    return Math.round(sortedValues[lower]);\n  }\n  \n  const weight = index - lower;\n  return Math.round(sortedValues[lower] * (1 - weight) + sortedValues[upper] * weight);\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\auto-scrape-initiate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\autonomous-discovery\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\auto-scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\cron\\quality-check\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\dashboard\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\enhanced-pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\firecrawl\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\gemini\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\monitoring\\api-usage\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":70,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":71,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":92,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":92,"endColumn":40}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { APIMonitor, type APIService } from '@/lib/monitoring/apiMonitor';\n\n/**\n * API Usage Monitoring Endpoint\n * Provides real-time API usage monitoring and alerting\n */\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const service = searchParams.get('service') as APIService | null;\n    const action = searchParams.get('action');\n\n    // Get comprehensive monitoring data\n    if (!service) {\n      const monitoringResult = await APIMonitor.checkAllAPIs();\n      \n      return NextResponse.json({\n        success: true,\n        data: monitoringResult,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Service-specific monitoring\n    if (action === 'check') {\n      const requestCount = Number.parseInt(searchParams.get('requests') || '1', 10);\n      const tokenCount = Number.parseInt(searchParams.get('tokens') || '0', 10);\n      \n      const canMakeRequest = await APIMonitor.canMakeRequest(service, requestCount, tokenCount);\n      const usage = await APIMonitor.getCurrentUsage(service);\n      \n      return NextResponse.json({\n        success: true,\n        service,\n        canMakeRequest: canMakeRequest.allowed,\n        reason: canMakeRequest.reason,\n        waitTime: canMakeRequest.waitTime,\n        usage,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Get usage for specific service\n    const usage = await APIMonitor.getCurrentUsage(service);\n    \n    return NextResponse.json({\n      success: true,\n      service,\n      usage,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('API monitoring error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to get API monitoring data',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { action } = body;\n\n    switch (action) {\n      case 'clear-alerts': {\n        APIMonitor.clearAlertHistory();\n        return NextResponse.json({\n          success: true,\n          message: 'Alert history cleared'\n        });\n      }\n\n      case 'get-alerts': {\n        const alerts = APIMonitor.getAlertHistory();\n        return NextResponse.json({\n          success: true,\n          alerts,\n          count: alerts.length\n        });\n      }\n\n      case 'test-alert': {\n        const { service, level } = body;\n        if (!service || !level) {\n          return NextResponse.json(\n            { success: false, error: 'Missing service or level' },\n            { status: 400 }\n          );\n        }\n\n        // This would trigger a test alert in a real implementation\n        return NextResponse.json({\n          success: true,\n          message: `Test alert triggered for ${service} at ${level} level`\n        });\n      }\n\n      default: {\n        return NextResponse.json(\n          { success: false, error: `Unknown action: ${action}` },\n          { status: 400 }\n        );\n      }\n    }\n  } catch (error) {\n    console.error('API monitoring POST error:', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to process monitoring request',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\pipeline\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scheduler\\route.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":204,"column":13,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":204,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\scrape\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\search\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\tavily\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-integration\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\test-pipeline-run\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\api\\trucks\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\auth\\callback\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":8,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":8,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":8,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":8,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":9,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":9,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":9,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":9,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .checkRateLimit on an `error` typed value.","line":9,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":9,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .allowed on an `error` typed value.","line":11,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":11,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":14,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":14,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":14,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":14,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .split on an `error` typed value.","line":14,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":14,"column":41,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":14,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .retryAfter on an `error` typed value.","line":18,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":40,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":40,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":40,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":40,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .split on an `error` typed value.","line":40,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":40,"column":37,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":40,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":64,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":64,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":64,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":64,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .split on an `error` typed value.","line":64,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":64,"column":39,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":64,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":71,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .recordSuccess on an `error` typed value.","line":71,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":81,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":81,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":81,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":81,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .split on an `error` typed value.","line":81,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":81,"column":47,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":81,"endColumn":48}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { supabase } from '@/lib/supabase';\nimport { RateLimiter, getClientIdentifier } from '@/lib/security/rateLimiter';\nimport { AuditLogger } from '@/lib/security/auditLogger';\n\nexport async function GET(request: NextRequest) {\n  // Apply rate limiting to auth callback\n  const identifier = getClientIdentifier(request);\n  const rateLimitResult = RateLimiter.checkRateLimit(identifier, 'auth');\n\n  if (!rateLimitResult.allowed) {\n    await AuditLogger.logSecurityEvent({\n      event_type: 'login_failure',\n      ip_address: identifier.split(':')[0],\n      user_agent: request.headers.get('user-agent') || 'unknown',\n      details: {\n        reason: 'rate_limit_exceeded',\n        retryAfter: rateLimitResult.retryAfter\n      },\n      severity: 'warning'\n    });\n\n    return NextResponse.redirect(`${new URL(request.url).origin}/login?error=rate_limit`);\n  }\n\n  const { searchParams, origin } = new URL(request.url);\n  const code = searchParams.get('code');\n  const redirectTo = searchParams.get('redirectTo') || '/admin';\n\n  if (code) {\n    const { error } = await supabase.auth.exchangeCodeForSession(code);\n\n    if (error) {\n      // Log authentication failure\n      await AuditLogger.logAuthEvent(\n        'login_failure',\n        undefined,\n        undefined,\n        {\n          ip: identifier.split(':')[0],\n          userAgent: request.headers.get('user-agent') || 'unknown'\n        },\n        { provider: 'google', error: error.message }\n      );\n    } else {\n      // Check if user has admin role\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n\n      if (user) {\n        const { data: profile } = await supabase\n          .from('profiles')\n          .select('role')\n          .eq('id', user.id)\n          .single();\n\n        // Log successful authentication\n        await AuditLogger.logAuthEvent(\n          'login_success',\n          user.email,\n          user.id,\n          {\n            ip: identifier.split(':')[0],\n            userAgent: request.headers.get('user-agent') || 'unknown'\n          },\n          { provider: 'google', role: profile?.role }\n        );\n\n        // Record successful auth for rate limiting\n        RateLimiter.recordSuccess(identifier, 'auth');\n\n        if (profile?.role === 'admin') {\n          return NextResponse.redirect(`${origin}${redirectTo}`);\n        } else {\n          // Log unauthorized access attempt\n          await AuditLogger.logSecurityEvent({\n            event_type: 'permission_denied',\n            user_id: user.id,\n            user_email: user.email,\n            ip_address: identifier.split(':')[0],\n            user_agent: request.headers.get('user-agent') || 'unknown',\n            details: {\n              reason: 'insufficient_role',\n              user_role: profile?.role || 'none'\n            },\n            severity: 'warning'\n          });\n\n          return NextResponse.redirect(`${origin}/access-denied`);\n        }\n      }\n    }\n  }\n\n  // If there was an error or no code, redirect to login\n  return NextResponse.redirect(`${origin}/login`);\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":12,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":12,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":59,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":39},{"ruleId":"sonarjs/no-all-duplicated-branches","severity":2,"message":"This conditional operation returns the same value whether the condition is \"true\" or \"false\".","line":83,"column":9,"nodeType":"ConditionalExpression","messageId":"returnsTheSameValue","endLine":83,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":85,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":33}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { createSupabaseMiddlewareClient } from '@/lib/supabaseMiddleware';\nimport { AuditLogger } from '@/lib/security/auditLogger';\n\nexport async function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  const supabase = createSupabaseMiddlewareClient(req, res);\n\n  // Extract request metadata for security logging\n  const requestMetadata = {\n    ip: req.ip || req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown',\n    userAgent: req.headers.get('user-agent') || 'unknown',\n    url: req.nextUrl.pathname,\n    method: req.method\n  };\n\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser();\n\n  // Protect admin routes\n  if (req.nextUrl.pathname.startsWith('/admin')) {\n    if (userError || !user) {\n      // Log unauthorized access attempt\n      await AuditLogger.logSecurityEvent({\n        event_type: 'permission_denied',\n        ip_address: requestMetadata.ip,\n        user_agent: requestMetadata.userAgent,\n        details: {\n          attempted_url: requestMetadata.url,\n          reason: 'no_session',\n          error: userError?.message\n        },\n        severity: 'warning'\n      });\n\n      // Redirect unauthenticated users to login\n      const redirectUrl = req.nextUrl.clone();\n      redirectUrl.pathname = '/login';\n      redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname);\n      return NextResponse.redirect(redirectUrl);\n    }\n\n    // Check for admin role (assuming 'profiles' table with 'role' column)\n    const { data: profile, error: profileQueryError } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', user.id)\n      .single();\n\n    if (profileQueryError || profile?.role !== 'admin') {\n      // Log unauthorized admin access attempt\n      await AuditLogger.logSecurityEvent({\n        event_type: 'permission_denied',\n        user_id: user.id,\n        user_email: user.email,\n        ip_address: requestMetadata.ip,\n        user_agent: requestMetadata.userAgent,\n        details: {\n          attempted_url: requestMetadata.url,\n          user_role: profile?.role || 'none',\n          reason: 'insufficient_privileges',\n          error: profileQueryError?.message\n        },\n        severity: 'error'\n      });\n\n      // Redirect non-admin users to access denied page\n      const redirectUrl = req.nextUrl.clone();\n      redirectUrl.pathname = '/access-denied';\n      return NextResponse.redirect(redirectUrl);\n    }\n\n    // Log successful admin access for audit trail\n    if (req.method !== 'GET' || req.nextUrl.pathname.includes('/api/')) {\n      await AuditLogger.logDataAccess(\n        user.id,\n        user.email || 'unknown',\n        'admin_panel',\n        req.nextUrl.pathname,\n        req.method === 'GET' ? 'read' : 'read',\n        {\n          ip: requestMetadata.ip,\n          userAgent: requestMetadata.userAgent\n        }\n      );\n    }\n  }\n\n  return res;\n}\n\nexport const config = {\n  matcher: ['/admin/:path*'],\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/no-intrusive-permissions","severity":2,"message":"Make sure the use of the geolocation is necessary.","line":101,"column":7,"nodeType":"MemberExpression","messageId":"checkPermission","endLine":101,"endColumn":47,"suppressions":[{"kind":"directive","justification":"Geolocation is essential for finding nearby food trucks"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\app\\trucks\\[id]\\page.tsx","messages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Instagram' is deprecated.","line":14,"column":3,"nodeType":null,"messageId":"deprecation","endLine":14,"endColumn":12},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Facebook' is deprecated.","line":15,"column":3,"nodeType":null,"messageId":"deprecation","endLine":15,"endColumn":11},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Twitter' is deprecated.","line":16,"column":3,"nodeType":null,"messageId":"deprecation","endLine":16,"endColumn":10},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Instagram' is deprecated.","line":193,"column":28,"nodeType":null,"messageId":"deprecation","endLine":193,"endColumn":37},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Facebook' is deprecated.","line":204,"column":28,"nodeType":null,"messageId":"deprecation","endLine":204,"endColumn":36},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Twitter' is deprecated.","line":215,"column":28,"nodeType":null,"messageId":"deprecation","endLine":215,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":268,"column":29,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":268,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .closed on an `error` typed value.","line":275,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":275,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .open on an `error` typed value.","line":275,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":275,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .close on an `error` typed value.","line":275,"column":99,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":275,"endColumn":104},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":306,"column":48,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":306,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":313,"column":81,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":313,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toFixed on an `error` typed value.","line":313,"column":102,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":313,"endColumn":109}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { FoodTruckService } from '@/lib/supabase';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { \n  MapPin, \n  Phone, \n  Mail, \n  Globe, \n  Clock, \n  Star, \n  Users,\n  Instagram,\n  Facebook,\n  Twitter,\n  ArrowLeft\n} from 'lucide-react';\nimport Link from 'next/link';\n\ninterface FoodTruckDetailPageProps {\n  readonly params: {\n    readonly id: string;\n  };\n}\n\nexport default async function FoodTruckDetailPage({ params }: FoodTruckDetailPageProps) {\n  const truck = await FoodTruckService.getTruckById(params.id);\n\n  if (!truck) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Food Truck Not Found</h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">The requested food truck could not be found.</p>\n            <Button asChild className=\"mt-4\">\n              <Link href=\"/\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Map\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col gap-6 max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                <Link href=\"/\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Map\n                </Link>\n              </Button>\n              <div>\n                <h1 className=\"text-3xl font-bold tracking-tight dark:text-gray-100\">{truck.name}</h1>\n                <p className=\"text-muted-foreground dark:text-gray-400\">\n                  Food truck details and information\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Basic Information */}\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-gray-100\">About</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Food truck information</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Name</label>\n                  <p className=\"text-lg font-semibold dark:text-gray-100\">{truck.name}</p>\n                </div>\n                \n                {truck.description && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Description</label>\n                    <p className=\"text-gray-900 dark:text-gray-200\">{truck.description}</p>\n                  </div>\n                )}\n\n                {truck.cuisine_type && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Cuisine Type</label>\n                    <p className=\"text-gray-900 dark:text-gray-200\">{truck.cuisine_type}</p>\n                  </div>\n                )}\n\n                {truck.price_range && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Price Range</label>\n                    <Badge variant=\"outline\" className=\"ml-2\">\n                      {truck.price_range}\n                    </Badge>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Contact Information */}\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n                  <Phone className=\"h-5 w-5\" />\n                  Contact Information\n                </CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Get in touch</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {truck.contact_info?.phone ? (\n                  <div className=\"flex items-center gap-3\">\n                    <Phone className=\"h-4 w-4 text-gray-500\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Phone</label>\n                      <a \n                        href={`tel:${truck.contact_info.phone}`}\n                        className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\n                      >\n                        {truck.contact_info.phone}\n                      </a>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-3 text-gray-400\">\n                    <Phone className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">No phone number available</span>\n                  </div>\n                )}\n\n                {truck.contact_info?.email ? (\n                  <div className=\"flex items-center gap-3\">\n                    <Mail className=\"h-4 w-4 text-gray-500\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Email</label>\n                      <a \n                        href={`mailto:${truck.contact_info.email}`}\n                        className=\"block text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\n                      >\n                        {truck.contact_info.email}\n                      </a>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-3 text-gray-400\">\n                    <Mail className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">No email available</span>\n                  </div>\n                )}\n\n                {truck.contact_info?.website ? (\n                  <div className=\"flex items-center gap-3\">\n                    <Globe className=\"h-4 w-4 text-gray-500\" />\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Website</label>\n                      <a \n                        href={truck.contact_info.website} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"block text-blue-600 hover:text-blue-800 underline dark:text-blue-400 dark:hover:text-blue-300\"\n                      >\n                        Visit Website\n                      </a>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-3 text-gray-400\">\n                    <Globe className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">No website available</span>\n                  </div>\n                )}\n\n                {/* Social Media */}\n                {truck.social_media && Object.keys(truck.social_media).length > 0 && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Social Media</label>\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {truck.social_media.instagram && (\n                        <a \n                          href={`https://instagram.com/${truck.social_media.instagram}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"flex items-center gap-1 px-2 py-1 bg-pink-100 text-pink-800 rounded-md text-sm hover:bg-pink-200 dark:bg-pink-900 dark:text-pink-200\"\n                        >\n                          <Instagram className=\"h-3 w-3\" />\n                          Instagram\n                        </a>\n                      )}\n                      {truck.social_media.facebook && (\n                        <a \n                          href={`https://facebook.com/${truck.social_media.facebook}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-sm hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200\"\n                        >\n                          <Facebook className=\"h-3 w-3\" />\n                          Facebook\n                        </a>\n                      )}\n                      {truck.social_media.twitter && (\n                        <a \n                          href={`https://twitter.com/${truck.social_media.twitter}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"flex items-center gap-1 px-2 py-1 bg-sky-100 text-sky-800 rounded-md text-sm hover:bg-sky-200 dark:bg-sky-900 dark:text-sky-200\"\n                        >\n                          <Twitter className=\"h-3 w-3\" />\n                          Twitter\n                        </a>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Location Information */}\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n                  <MapPin className=\"h-5 w-5\" />\n                  Location\n                </CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Current location</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {truck.current_location?.address ? (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Address</label>\n                    <p className=\"text-gray-900 dark:text-gray-200\">{truck.current_location.address}</p>\n                  </div>\n                ) : (\n                  <p className=\"text-gray-400 text-sm\">No address available</p>\n                )}\n\n                {truck.current_location?.lat && truck.current_location?.lng && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Coordinates</label>\n                    <p className=\"text-gray-900 dark:text-gray-200 text-sm\">\n                      {truck.current_location.lat.toFixed(6)}, {truck.current_location.lng.toFixed(6)}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Operating Hours */}\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n                  <Clock className=\"h-5 w-5\" />\n                  Operating Hours\n                </CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Daily schedule</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {truck.operating_hours && Object.keys(truck.operating_hours).length > 0 ? (\n                  <div className=\"space-y-2\">\n                    {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map((day) => {\n                      const dayData = truck.operating_hours?.[day];\n                      const dayName = day.charAt(0).toUpperCase() + day.slice(1);\n                      \n                      return (\n                        <div key={day} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium dark:text-gray-200\">{dayName}</span>\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {dayData?.closed ? 'Closed' : `${dayData?.open || 'N/A'} - ${dayData?.close || 'N/A'}`}\n                          </span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-400 text-sm\">Operating hours not available</p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Ratings & Reviews */}\n          {truck.average_rating && (\n            <Card className=\"dark:bg-slate-800 dark:border-slate-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 dark:text-gray-100\">\n                  <Star className=\"h-5 w-5\" />\n                  Ratings & Reviews\n                </CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Customer feedback</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex\">\n                      {[1, 2, 3, 4, 5].map((star) => (\n                        <Star\n                          key={star}\n                          className={`h-6 w-6 ${\n                            star <= Math.round(truck.average_rating || 0)\n                              ? 'text-yellow-400 fill-current'\n                              : 'text-gray-300'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <span className=\"text-xl font-semibold dark:text-gray-100\">{truck.average_rating.toFixed(1)}</span>\n                  </div>\n                  {truck.review_count && (\n                    <div className=\"flex items-center gap-1 text-gray-600 dark:text-gray-400\">\n                      <Users className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">{truck.review_count} reviews</span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\FoodTruckInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\MapDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\SearchFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ThemeProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"===\" check; it will always be false. Did you mean to use \"==\"?","line":30,"column":15,"nodeType":null,"endLine":30,"endColumn":18,"suggestions":[{"desc":"Replace \"===\" with \"==\"","fix":{"range":[831,834],"text":"=="}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\TruckCard.tsx","messages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Instagram' is deprecated.","line":6,"column":45,"nodeType":null,"messageId":"deprecation","endLine":6,"endColumn":54},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Facebook' is deprecated.","line":6,"column":56,"nodeType":null,"messageId":"deprecation","endLine":6,"endColumn":64},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Twitter' is deprecated.","line":6,"column":66,"nodeType":null,"messageId":"deprecation","endLine":6,"endColumn":73},{"ruleId":"unicorn/consistent-function-scoping","severity":2,"message":"Move arrow function 'formatHours' to the outer scope.","line":90,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"consistent-function-scoping","endLine":90,"endColumn":83},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Instagram' is deprecated.","line":240,"column":22,"nodeType":null,"messageId":"deprecation","endLine":240,"endColumn":31},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Facebook' is deprecated.","line":251,"column":22,"nodeType":null,"messageId":"deprecation","endLine":251,"endColumn":30},{"ruleId":"sonarjs/deprecation","severity":2,"message":"'Twitter' is deprecated.","line":262,"column":22,"nodeType":null,"messageId":"deprecation","endLine":262,"endColumn":29}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { MapPin, Phone, Star, Clock, Globe, Instagram, Facebook, Twitter, Eye } from 'lucide-react';\nimport Link from 'next/link';\n\ninterface FoodTruck {\n  id: string;\n  name: string;\n  description: string;\n  current_location?: {\n    address: string;\n  };\n  operating_hours?: Record<string, { open: string; close: string; closed: boolean }>;\n  contact_info?: {\n    phone?: string;\n    website?: string;\n    email?: string;\n  };\n  social_media?: {\n    instagram?: string;\n    facebook?: string;\n    twitter?: string;\n  };\n  average_rating?: number;\n  review_count?: number;\n  data_quality_score: number;\n  verification_status: string;\n  menu?: Array<{\n    category: string;\n    items: Array<{ name: string; price: number }>;\n  }>;\n}\n\ninterface TruckCardProps {\n  readonly truck: FoodTruck;\n  readonly isOpen: boolean;\n  readonly onSelectTruck: () => void;\n  readonly formatPrice: (price: number) => string;\n  readonly userLocation?: { lat: number; lng: number };\n  readonly hideHeader?: boolean; // Add option to hide header when used in accordion\n}\n\nexport function TruckCard({\n  truck,\n  isOpen,\n  onSelectTruck,\n  formatPrice,\n  hideHeader = false,\n}: TruckCardProps) {\n  const getPopularItems = () => {\n    if (!truck.menu || truck.menu.length === 0) return [];\n    return truck.menu[0]?.items?.slice(0, 3) || [];\n  };\n\n  // Helper to determine price range fallback\n  const getPriceRange = () => {\n    // Flatten all prices from all menu items\n    const prices = (truck.menu || [])\n      .flatMap((cat) => cat.items)\n      .map((item) => (typeof item.price === 'number' ? item.price : undefined))\n      .filter((p): p is number => p !== undefined && !Number.isNaN(p));\n    if (prices.length === 0) return;\n    const min = Math.min(...prices);\n    const max = Math.max(...prices);\n    if (max < 10) return '$';\n    if (min >= 10 && max <= 20) return '$$';\n    if (min > 20) return '$$$';\n    if (min < 10 && max > 20) return '$-$$$';\n    if (min < 10 && max <= 20) return '$-$$';\n    if (min >= 10 && max > 20) return '$$-$$$';\n    return '$';\n  };\n\n  // Helper to get today's operating hours\n  const getTodayHours = () => {\n    if (!truck.operating_hours) return;\n    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    const todayKey = days[new Date().getDay()];\n    return truck.operating_hours[todayKey];\n  };\n\n  const popularItems = getPopularItems();\n  const priceRange = getPriceRange();\n  const todayHours = getTodayHours();\n\n  // Helper to format operating hours\n  const formatHours = (hours: { open: string; close: string; closed: boolean }) => {\n    if (hours.closed) return 'Closed';\n    return `${hours.open} - ${hours.close}`;\n  };\n\n  return (\n    <Card\n      className={`hover:shadow-md transition-shadow cursor-pointer dark:bg-slate-800 dark:border-slate-700 ${hideHeader ? 'shadow-none border-none bg-transparent dark:bg-transparent' : ''}`}\n      onClick={onSelectTruck}\n    >\n      {!hideHeader && (\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div className=\"flex-1\">\n              <CardTitle className=\"text-lg dark:text-gray-100\">{truck.name}</CardTitle>\n              {truck.current_location?.address && (\n                <CardDescription className=\"flex items-center mt-1 dark:text-gray-400\">\n                  <MapPin className=\"h-4 w-4 mr-1\" />\n                  {truck.current_location.address}\n                </CardDescription>\n              )}\n            </div>\n            <div className=\"flex flex-col items-end space-y-1\">\n              <Badge variant={isOpen ? 'default' : 'secondary'}>{isOpen ? 'Open' : 'Closed'}</Badge>\n              {/* Show price range fallback if no explicit prices */}\n              {popularItems.every((item) => !item.price) && priceRange && (\n                <Badge variant=\"outline\" className=\"mt-1\">\n                  {priceRange}\n                </Badge>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n      )}\n      <CardContent className={hideHeader ? 'pt-0' : ''}>\n        {truck.description && (\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">{truck.description}</p>\n        )}\n        <div className=\"space-y-4\">\n          {/* Ratings & Hours Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Ratings */}\n            {truck.average_rating && (\n              <div>\n                <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Rating</h4>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"flex\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <Star\n                        key={star}\n                        className={`h-4 w-4 ${\n                          star <= Math.round(truck.average_rating || 0)\n                            ? 'text-yellow-400 fill-current'\n                            : 'text-gray-300'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-sm font-medium dark:text-gray-200\">\n                    {truck.average_rating.toFixed(1)}\n                  </span>\n                  {truck.review_count && (\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      ({truck.review_count} reviews)\n                    </span>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Operating Hours */}\n            {todayHours && (\n              <div>\n                <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Today's Hours</h4>\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"h-3 w-3 text-gray-500\" />\n                  <span className=\"text-sm dark:text-gray-300\">\n                    {formatHours(todayHours)}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Menu & Contact Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Popular Items</h4>\n              <div className=\"space-y-1\">\n                {popularItems.map((item, idx) => (\n                  <div key={idx} className=\"flex justify-between text-sm dark:text-gray-300\">\n                    <span className=\"truncate dark:text-gray-200\">{item.name}</span>\n                    {typeof item.price === 'number' && item.price > 0 && (\n                      <span className=\"text-green-600 dark:text-green-400 ml-2\">\n                        {formatPrice(item.price)}\n                      </span>\n                    )}\n                  </div>\n                ))}\n                {popularItems.length === 0 && (\n                  <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Menu not available</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Contact</h4>\n              <div className=\"space-y-1 dark:text-gray-300\">\n                {truck.contact_info?.phone && (\n                  <a\n                    href={`tel:${truck.contact_info.phone}`}\n                    className=\"flex items-center text-sm hover:text-blue-600 dark:hover:text-blue-400\"\n                  >\n                    <Phone className=\"h-3 w-3 mr-1\" />\n                    <span className=\"truncate\">{truck.contact_info.phone}</span>\n                  </a>\n                )}\n                {truck.contact_info?.website && (\n                  <a\n                    href={truck.contact_info.website}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"flex items-center text-sm hover:text-blue-600 dark:hover:text-blue-400\"\n                  >\n                    <Globe className=\"h-3 w-3 mr-1\" />\n                    <span className=\"truncate\">Website</span>\n                  </a>\n                )}\n                {truck.verification_status && (\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                    <Star className=\"h-3 w-3 mr-1\" />\n                    <span className=\"capitalize\">{truck.verification_status}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Social Media */}\n          {truck.social_media && Object.keys(truck.social_media).length > 0 && (\n            <div>\n              <h4 className=\"font-medium mb-2 text-sm dark:text-gray-100\">Social Media</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {truck.social_media.instagram && (\n                  <a\n                    href={`https://instagram.com/${truck.social_media.instagram}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"flex items-center gap-1 px-2 py-1 bg-pink-100 text-pink-800 rounded-md text-xs hover:bg-pink-200 dark:bg-pink-900 dark:text-pink-200\"\n                  >\n                    <Instagram className=\"h-3 w-3\" />\n                    Instagram\n                  </a>\n                )}\n                {truck.social_media.facebook && (\n                  <a\n                    href={`https://facebook.com/${truck.social_media.facebook}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-xs hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200\"\n                  >\n                    <Facebook className=\"h-3 w-3\" />\n                    Facebook\n                  </a>\n                )}\n                {truck.social_media.twitter && (\n                  <a\n                    href={`https://twitter.com/${truck.social_media.twitter}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"flex items-center gap-1 px-2 py-1 bg-sky-100 text-sky-800 rounded-md text-xs hover:bg-sky-200 dark:bg-sky-900 dark:text-sky-200\"\n                  >\n                    <Twitter className=\"h-3 w-3\" />\n                    Twitter\n                  </a>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        {truck.verification_status && (\n          <div className=\"mt-2\">\n            <Badge variant={truck.verification_status === 'verified' ? 'default' : 'secondary'}>\n              <span className=\"capitalize\">{truck.verification_status}</span>\n            </Badge>\n          </div>\n        )}\n      </CardContent>\n      <div className=\"px-4 py-2 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"flex gap-2\">\n          <Button asChild className=\"flex-1\" variant=\"outline\">\n            <Link href={`/trucks/${truck.id}`}>\n              <Eye className=\"h-4 w-4 mr-2\" />\n              View Details\n            </Link>\n          </Button>\n          {truck.verification_status === 'verified' && (\n            <Button className=\"flex-1\" variant=\"default\" disabled>\n              Book Me\n            </Button>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\WebVitalsReporter.tsx","messages":[{"ruleId":"sonarjs/different-types-comparison","severity":2,"message":"Remove this \"!==\" check; it will always be true. Did you mean to use \"!=\"?","line":13,"column":27,"nodeType":null,"endLine":13,"endColumn":30,"suggestions":[{"desc":"Replace \"!==\" with \"!=\"","fix":{"range":[355,358],"text":"!="}}]},{"ruleId":"unicorn/no-useless-undefined","severity":2,"message":"Do not use useless `undefined`.","line":19,"column":10,"nodeType":"Identifier","messageId":"no-useless-undefined","endLine":19,"endColumn":19,"fix":{"range":[474,484],"text":""}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect } from 'react';\nimport { initWebVitalsMonitoring } from '@/lib/performance/webVitals';\n\n/**\n * Web Vitals Reporter Component\n * Initializes Core Web Vitals monitoring for the application\n */\nexport function WebVitalsReporter() {\n  useEffect(() => {\n    // Only initialize in browser environment\n    if (globalThis.window !== undefined) {\n      initWebVitalsMonitoring();\n    }\n  }, []);\n\n  // This component doesn't render anything\n  return undefined;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\DataCleanupDashboard.tsx","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":45,"column":70,"nodeType":"Literal","messageId":"error","endLine":45,"endColumn":74,"suggestions":[{"messageId":"replace","fix":{"range":[1104,1108],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":46,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":46,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1160,1163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1160,1163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":46,"column":55,"nodeType":"Literal","messageId":"error","endLine":46,"endColumn":59,"suggestions":[{"messageId":"replace","fix":{"range":[1165,1169],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":103,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":103,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":105,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<CleanupResult | null>`.","line":106,"column":23,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":106,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .result on an `any` value.","line":106,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":108,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":120,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":120,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":122,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .preview on an `any` value.","line":123,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":36},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":149,"column":45,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":149,"endColumn":58},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":153,"column":45,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":153,"endColumn":69},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":157,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":157,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .estimated_improvements on an `any` value.","line":213,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .estimated_duplicates on an `any` value.","line":219,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .operations on an `any` value.","line":225,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .estimated_improvements on an `any` value.","line":231,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":231,"endColumn":67}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { \n  Trash2, \n  RefreshCw, \n  CheckCircle, \n  AlertTriangle, \n  Play,\n  Eye,\n  Merge,\n  Phone,\n  MapPin,\n  Star\n} from 'lucide-react';\n\ninterface CleanupOperation {\n  type: string;\n  description: string;\n  affectedCount: number;\n  successCount: number;\n  errorCount: number;\n  errors: string[];\n}\n\ninterface CleanupResult {\n  totalProcessed: number;\n  operations: CleanupOperation[];\n  summary: {\n    trucksImproved: number;\n    duplicatesRemoved: number;\n    qualityScoreImprovement: number;\n    placeholdersRemoved: number;\n  };\n  duration: number;\n}\n\nexport function DataCleanupDashboard() {\n  const [isRunning, setIsRunning] = useState(false);\n  const [lastResult, setLastResult] = useState<CleanupResult | null>(null);\n  const [previewData, setPreviewData] = useState<any>(null);\n  const [selectedOperations, setSelectedOperations] = useState<string[]>([\n    'remove_placeholders',\n    'normalize_phone',\n    'fix_coordinates',\n    'update_quality_scores'\n  ]);\n\n  const operationConfig = {\n    remove_placeholders: {\n      name: 'Remove Placeholders',\n      description: 'Remove placeholder and mock data values',\n      icon: <Trash2 className=\"h-4 w-4\" />,\n      color: 'text-red-600'\n    },\n    normalize_phone: {\n      name: 'Normalize Phone Numbers',\n      description: 'Format phone numbers consistently',\n      icon: <Phone className=\"h-4 w-4\" />,\n      color: 'text-blue-600'\n    },\n    fix_coordinates: {\n      name: 'Fix GPS Coordinates',\n      description: 'Correct invalid location coordinates',\n      icon: <MapPin className=\"h-4 w-4\" />,\n      color: 'text-green-600'\n    },\n    update_quality_scores: {\n      name: 'Update Quality Scores',\n      description: 'Recalculate data quality scores',\n      icon: <Star className=\"h-4 w-4\" />,\n      color: 'text-yellow-600'\n    },\n    merge_duplicates: {\n      name: 'Merge Duplicates',\n      description: 'Identify and merge duplicate entries',\n      icon: <Merge className=\"h-4 w-4\" />,\n      color: 'text-purple-600'\n    }\n  };\n\n  const runCleanup = async (dryRun: boolean = false) => {\n    setIsRunning(true);\n    try {\n      const response = await fetch('/api/admin/data-cleanup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: dryRun ? 'dry-run' : 'full-cleanup',\n          options: {\n            operations: selectedOperations,\n            batchSize: 50,\n            dryRun\n          }\n        })\n      });\n\n      const data = await response.json();\n      \n      if (data.success) {\n        setLastResult(data.result);\n      } else {\n        console.error('Cleanup failed:', data.error);\n      }\n    } catch (error) {\n      console.error('Error running cleanup:', error);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const loadPreview = async () => {\n    try {\n      const response = await fetch('/api/admin/data-cleanup?action=preview');\n      const data = await response.json();\n      \n      if (data.success) {\n        setPreviewData(data.preview);\n      }\n    } catch (error) {\n      console.error('Error loading preview:', error);\n    }\n  };\n\n  const toggleOperation = (operation: string) => {\n    setSelectedOperations(prev => \n      prev.includes(operation)\n        ? prev.filter(op => op !== operation)\n        : [...prev, operation]\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">Data Cleanup & Quality</h2>\n          <p className=\"text-muted-foreground\">\n            Automated data quality improvements and duplicate prevention\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={loadPreview} disabled={isRunning}>\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Preview Changes\n          </Button>\n          <Button variant=\"outline\" onClick={() => runCleanup(true)} disabled={isRunning}>\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRunning ? 'animate-spin' : ''}`} />\n            Dry Run\n          </Button>\n          <Button onClick={() => runCleanup(false)} disabled={isRunning}>\n            <Play className=\"h-4 w-4 mr-2\" />\n            Run Cleanup\n          </Button>\n        </div>\n      </div>\n\n      {/* Operation Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Cleanup Operations</CardTitle>\n          <CardDescription>\n            Select which cleanup operations to run\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-3 md:grid-cols-2 lg:grid-cols-3\">\n            {Object.entries(operationConfig).map(([key, config]) => (\n              <div\n                key={key}\n                className={`flex items-center space-x-3 p-3 border rounded-lg cursor-pointer transition-colors ${\n                  selectedOperations.includes(key)\n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-950'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => toggleOperation(key)}\n              >\n                <div className={config.color}>\n                  {config.icon}\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"font-medium text-sm\">{config.name}</div>\n                  <div className=\"text-xs text-muted-foreground\">{config.description}</div>\n                </div>\n                {selectedOperations.includes(key) && (\n                  <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Preview Data */}\n      {previewData && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Cleanup Preview</CardTitle>\n            <CardDescription>\n              Estimated changes (based on sample of 10 trucks)\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {previewData.estimated_improvements}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Trucks to Improve</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {previewData.estimated_duplicates}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Duplicates Found</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {previewData.operations?.length || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Operations Ready</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  ~{Math.round((previewData.estimated_improvements / 10) * 100)}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Improvement Rate</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Last Cleanup Result */}\n      {lastResult && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              Last Cleanup Results\n            </CardTitle>\n            <CardDescription>\n              Completed in {Math.round(lastResult.duration / 1000)}s - {lastResult.totalProcessed} trucks processed\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Summary Cards */}\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {lastResult.summary.trucksImproved}\n                </div>\n                <div className=\"text-sm text-blue-700 dark:text-blue-300\">Trucks Improved</div>\n              </div>\n              <div className=\"text-center p-3 bg-purple-50 dark:bg-purple-950 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {lastResult.summary.duplicatesRemoved}\n                </div>\n                <div className=\"text-sm text-purple-700 dark:text-purple-300\">Duplicates Removed</div>\n              </div>\n              <div className=\"text-center p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {lastResult.summary.qualityScoreImprovement}\n                </div>\n                <div className=\"text-sm text-green-700 dark:text-green-300\">Quality Updates</div>\n              </div>\n              <div className=\"text-center p-3 bg-red-50 dark:bg-red-950 rounded-lg\">\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {lastResult.summary.placeholdersRemoved}\n                </div>\n                <div className=\"text-sm text-red-700 dark:text-red-300\">Placeholders Removed</div>\n              </div>\n            </div>\n\n            {/* Operation Details */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold\">Operation Details</h4>\n              {lastResult.operations.map((operation, index) => (\n                <div key={index} className=\"border rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      {operationConfig[operation.type as keyof typeof operationConfig]?.icon}\n                      <span className=\"font-medium\">{operation.description}</span>\n                    </div>\n                    <Badge variant={operation.errorCount > 0 ? 'destructive' : 'default'}>\n                      {operation.successCount}/{operation.affectedCount}\n                    </Badge>\n                  </div>\n                  \n                  {operation.affectedCount > 0 && (\n                    <Progress \n                      value={(operation.successCount / operation.affectedCount) * 100} \n                      className=\"h-2 mb-2\"\n                    />\n                  )}\n                  \n                  {operation.errors.length > 0 && (\n                    <Alert variant=\"destructive\" className=\"mt-2\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      <AlertTitle>Errors ({operation.errors.length})</AlertTitle>\n                      <AlertDescription>\n                        <div className=\"max-h-20 overflow-y-auto text-xs\">\n                          {operation.errors.slice(0, 3).map((error, i) => (\n                            <div key={i}>{error}</div>\n                          ))}\n                          {operation.errors.length > 3 && (\n                            <div>... and {operation.errors.length - 3} more</div>\n                          )}\n                        </div>\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Help & Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Cleanup Operations Guide</CardTitle>\n          <CardDescription>\n            Understanding what each cleanup operation does\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3 text-sm\">\n            <div>\n              <strong>Remove Placeholders:</strong> Removes test data, \"undefined\" values, and placeholder content that shouldn't be in production.\n            </div>\n            <div>\n              <strong>Normalize Phone Numbers:</strong> Formats phone numbers consistently (e.g., \"(843) 555-0123\").\n            </div>\n            <div>\n              <strong>Fix GPS Coordinates:</strong> Corrects invalid coordinates (0,0) and coordinates outside the Charleston area.\n            </div>\n            <div>\n              <strong>Update Quality Scores:</strong> Recalculates data quality scores based on current data completeness.\n            </div>\n            <div>\n              <strong>Merge Duplicates:</strong> Identifies and merges duplicate food truck entries automatically.\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\admin\\RealtimeStatusIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Progress' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":18},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Progress'.","line":14,"column":10,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":14,"endColumn":18,"suggestions":[{"messageId":"suggestRemoveWholeStatement","fix":{"range":[433,486],"text":""},"desc":"Remove this import statement"}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 21 to the 15 allowed.","line":48,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":48,"endColumn":40},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":88,"column":42,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":88,"endColumn":89},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":89,"column":41,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":89,"endColumn":78},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":102,"column":14,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":102,"endColumn":84},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":111,"column":14,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":111,"endColumn":88},{"ruleId":"unicorn/consistent-function-scoping","severity":2,"message":"Move arrow function 'getStatusColor' to the outer scope.","line":116,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"consistent-function-scoping","endLine":116,"endColumn":45},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":148,"column":25,"nodeType":"Literal","messageId":"error","endLine":148,"endColumn":29,"suggestions":[{"messageId":"remove","fix":{"range":[4470,4474],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[4470,4474],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":183,"column":47,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":183,"endColumn":89},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":259,"column":23,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":260,"endColumn":57}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * SOTA Real-time Status Indicator Component\n * \n * Provides visual real-time status updates for admin dashboard\n * with animated indicators, health scores, and alert notifications\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Activity, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  Database, \n  RefreshCw, \n  Server, \n  TrendingUp, \n  TrendingDown,\n  Wifi,\n  WifiOff,\n  Zap\n} from 'lucide-react';\nimport { useRealtimeAdminEvents } from '@/hooks/useRealtimeAdminEvents';\n\ninterface StatusMetric {\n  label: string;\n  value: number | string;\n  unit?: string;\n  trend?: 'up' | 'down' | 'stable';\n  status: 'healthy' | 'warning' | 'error';\n  icon: React.ReactNode;\n}\n\ninterface SystemAlert {\n  id: string;\n  type: 'info' | 'warning' | 'error' | 'critical';\n  message: string;\n  timestamp: string;\n  acknowledged?: boolean;\n}\n\nexport function RealtimeStatusIndicator() {\n  const {\n    isConnected,\n    isConnecting,\n    connectionError,\n    latestMetrics,\n    recentEvents,\n    connect,\n    disconnect,\n    clearEvents,\n    lastEventTime\n  } = useRealtimeAdminEvents({\n    autoConnect: true,\n    reconnectInterval: 5000,\n    maxReconnectAttempts: 10\n  });\n\n  const [alerts, setAlerts] = useState<SystemAlert[]>([]);\n  const [showDetails, setShowDetails] = useState(false);\n\n  // Process recent events into alerts\n  useEffect(() => {\n    const newAlerts = recentEvents\n      .filter(event => event.severity && event.severity !== 'info')\n      .map(event => ({\n        id: event.id,\n        type: event.severity as 'warning' | 'error' | 'critical',\n        message: typeof event.data.message === 'string' ? event.data.message : 'System event occurred',\n        timestamp: event.timestamp,\n        acknowledged: false\n      }))\n      .slice(0, 5); // Keep only latest 5 alerts\n\n    setAlerts(newAlerts);\n  }, [recentEvents]);\n\n  // Calculate system metrics\n  const systemMetrics: StatusMetric[] = [\n    {\n      label: 'Connection Status',\n      value: isConnected ? 'Connected' : isConnecting ? 'Connecting...' : 'Disconnected',\n      status: isConnected ? 'healthy' : connectionError ? 'error' : 'warning',\n      icon: isConnected ? <Wifi className=\"h-4 w-4\" /> : <WifiOff className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Active Jobs',\n      value: latestMetrics?.scrapingJobs.active || 0,\n      status: (latestMetrics?.scrapingJobs.active || 0) > 0 ? 'healthy' : 'warning',\n      icon: <Activity className=\"h-4 w-4\" />\n    },\n    {\n      label: 'System Health',\n      value: latestMetrics?.systemHealth.status || 'unknown',\n      status: latestMetrics?.systemHealth.status === 'healthy' ? 'healthy' : \n             latestMetrics?.systemHealth.status === 'warning' ? 'warning' : 'error',\n      icon: <Server className=\"h-4 w-4\" />\n    },\n    {\n      label: 'Data Quality',\n      value: latestMetrics?.dataQuality.averageScore || 0,\n      unit: '%',\n      trend: 'stable',\n      status: (latestMetrics?.dataQuality.averageScore || 0) >= 80 ? 'healthy' : \n             (latestMetrics?.dataQuality.averageScore || 0) >= 60 ? 'warning' : 'error',\n      icon: <Database className=\"h-4 w-4\" />\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'healthy': { return 'text-green-600 bg-green-50 border-green-200';\n      }\n      case 'warning': { return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      }\n      case 'error': { return 'text-red-600 bg-red-50 border-red-200';\n      }\n      default: { return 'text-gray-600 bg-gray-50 border-gray-200';\n      }\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'healthy': { return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      }\n      case 'warning': { return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n      }\n      case 'error': { return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      }\n      default: { return <Clock className=\"h-4 w-4 text-gray-600\" />;\n      }\n    }\n  };\n\n  const getTrendIcon = (trend?: string) => {\n    switch (trend) {\n      case 'up': { return <TrendingUp className=\"h-3 w-3 text-green-600\" />;\n      }\n      case 'down': { return <TrendingDown className=\"h-3 w-3 text-red-600\" />;\n      }\n      default: { return null;\n      }\n    }\n  };\n\n  const acknowledgeAlert = (alertId: string) => {\n    setAlerts(prev => prev.map(alert => \n      alert.id === alertId ? { ...alert, acknowledged: true } : alert\n    ));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Connection Status Header */}\n      <Card className={`border-l-4 ${isConnected ? 'border-l-green-500' : 'border-l-red-500'}`}>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Zap className=\"h-5 w-5\" />\n              Real-time System Status\n            </CardTitle>\n            <div className=\"flex items-center gap-2\">\n              {isConnected && (\n                <div className=\"flex items-center gap-1 text-sm text-green-600\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                  Live\n                </div>\n              )}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={isConnected ? disconnect : connect}\n                disabled={isConnecting}\n              >\n                <RefreshCw className={`h-4 w-4 mr-2 ${isConnecting ? 'animate-spin' : ''}`} />\n                {isConnected ? 'Disconnect' : isConnecting ? 'Connecting...' : 'Connect'}\n              </Button>\n            </div>\n          </div>\n          {lastEventTime && (\n            <p className=\"text-sm text-muted-foreground\">\n              Last update: {lastEventTime.toLocaleTimeString()}\n            </p>\n          )}\n        </CardHeader>\n        <CardContent>\n          {connectionError && (\n            <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n              <p className=\"text-sm text-red-600\">{connectionError}</p>\n            </div>\n          )}\n\n          {/* System Metrics Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {systemMetrics.map((metric, index) => (\n              <div\n                key={index}\n                className={`p-3 rounded-lg border ${getStatusColor(metric.status)}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    {metric.icon}\n                    <span className=\"text-sm font-medium\">{metric.label}</span>\n                  </div>\n                  {getStatusIcon(metric.status)}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-lg font-bold\">\n                    {metric.value}{metric.unit}\n                  </span>\n                  {getTrendIcon(metric.trend)}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Scraping Jobs Progress */}\n          {latestMetrics?.scrapingJobs && (\n            <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <h4 className=\"text-sm font-medium text-blue-900 mb-2\">Scraping Jobs Status</h4>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-blue-600\">Active:</span>\n                  <span className=\"ml-1 font-medium\">{latestMetrics.scrapingJobs.active}</span>\n                </div>\n                <div>\n                  <span className=\"text-green-600\">Completed:</span>\n                  <span className=\"ml-1 font-medium\">{latestMetrics.scrapingJobs.completed}</span>\n                </div>\n                <div>\n                  <span className=\"text-yellow-600\">Pending:</span>\n                  <span className=\"ml-1 font-medium\">{latestMetrics.scrapingJobs.pending}</span>\n                </div>\n                <div>\n                  <span className=\"text-red-600\">Failed:</span>\n                  <span className=\"ml-1 font-medium\">{latestMetrics.scrapingJobs.failed}</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* System Alerts */}\n          {alerts.length > 0 && (\n            <div className=\"mt-4\">\n              <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Recent Alerts</h4>\n              <div className=\"space-y-2\">\n                {alerts.slice(0, 3).map((alert) => (\n                  <div\n                    key={alert.id}\n                    className={`p-2 rounded border-l-4 ${\n                      alert.type === 'critical' ? 'border-l-red-500 bg-red-50' :\n                      alert.type === 'error' ? 'border-l-red-400 bg-red-50' :\n                      'border-l-yellow-400 bg-yellow-50'\n                    } ${alert.acknowledged ? 'opacity-50' : ''}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={alert.type === 'critical' ? 'destructive' : 'secondary'}>\n                          {alert.type}\n                        </Badge>\n                        <span className=\"text-sm\">{alert.message}</span>\n                      </div>\n                      {!alert.acknowledged && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => acknowledgeAlert(alert.id)}\n                        >\n                          Acknowledge\n                        </Button>\n                      )}\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {new Date(alert.timestamp).toLocaleString()}\n                    </p>\n                  </div>\n                ))}\n              </div>\n              {alerts.length > 3 && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"mt-2\"\n                  onClick={() => setShowDetails(!showDetails)}\n                >\n                  {showDetails ? 'Hide' : 'Show'} {alerts.length - 3} more alerts\n                </Button>\n              )}\n            </div>\n          )}\n\n          {/* Event Controls */}\n          <div className=\"mt-4 flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={clearEvents}\n              disabled={recentEvents.length === 0}\n            >\n              Clear Events ({recentEvents.length})\n            </Button>\n            <Badge variant=\"secondary\">\n              {recentEvents.length} events in buffer\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\monitoring\\APIMonitoringDashboard.tsx","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `apiMonitoringDashboard.tsx` or `ApiMonitoringDashboard.tsx`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":42,"column":59,"nodeType":"Literal","messageId":"error","endLine":42,"endColumn":63,"suggestions":[{"messageId":"replace","fix":{"range":[1142,1146],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":44,"column":61,"nodeType":"Literal","messageId":"error","endLine":44,"endColumn":65,"suggestions":[{"messageId":"replace","fix":{"range":[1257,1261],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":51,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":53,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<MonitoringData | null>`.","line":54,"column":17,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":54,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":54,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":57,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":71},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":67,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":67,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1866,1866],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1866,1866],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":73,"column":34,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":73,"endColumn":53},{"ruleId":"unicorn/consistent-function-scoping","severity":2,"message":"Move arrow function 'getStatusColor' to the outer scope.","line":77,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"consistent-function-scoping","endLine":77,"endColumn":49},{"ruleId":"unicorn/consistent-function-scoping","severity":2,"message":"Move arrow function 'getAlertVariant' to the outer scope.","line":100,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"consistent-function-scoping","endLine":100,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'warningAlerts' is assigned a value but never used.","line":126,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":22},{"ruleId":"sonarjs/no-unused-vars","severity":2,"message":"Remove the declaration of the unused 'warningAlerts' variable.","line":126,"column":9,"nodeType":"Identifier","messageId":"unusedVariable","endLine":126,"endColumn":22},{"ruleId":"sonarjs/no-dead-store","severity":2,"message":"Remove this useless assignment to variable \"warningAlerts\".","line":126,"column":9,"nodeType":null,"messageId":"removeAssignment","endLine":126,"endColumn":22},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":142,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":142,"endColumn":42}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { \n  Activity, \n  AlertTriangle, \n  CheckCircle, \n  XCircle, \n  RefreshCw,\n  TrendingUp,\n  Clock,\n  Zap\n} from 'lucide-react';\n\ninterface APIUsage {\n  requests: { used: number; limit: number; percentage: number };\n  tokens?: { used: number; limit: number; percentage: number };\n}\n\ninterface APIAlert {\n  service: string;\n  level: 'info' | 'warning' | 'critical';\n  message: string;\n  usage: { current: number; limit: number; percentage: number };\n  timestamp: string;\n  recommendations: string[];\n}\n\ninterface MonitoringData {\n  canMakeRequest: boolean;\n  alerts: APIAlert[];\n  usage: Record<string, APIUsage>;\n  recommendations: string[];\n}\n\nexport function APIMonitoringDashboard() {\n  const [data, setData] = useState<MonitoringData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  const fetchMonitoringData = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/monitoring/api-usage');\n      const result = await response.json();\n      \n      if (result.success) {\n        setData(result.data);\n        setLastUpdate(new Date());\n      } else {\n        console.error('Failed to fetch monitoring data:', result.error);\n      }\n    } catch (error) {\n      console.error('Error fetching monitoring data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchMonitoringData();\n  }, []);\n\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(fetchMonitoringData, 30_000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, [autoRefresh]);\n\n  const getStatusColor = (percentage: number) => {\n    if (percentage >= 95) return 'text-red-600';\n    if (percentage >= 80) return 'text-yellow-600';\n    return 'text-green-600';\n  };\n\n  const getStatusIcon = (percentage: number) => {\n    if (percentage >= 95) return <XCircle className=\"h-4 w-4 text-red-600\" />;\n    if (percentage >= 80) return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n    return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n  };\n\n  const getAlertIcon = (level: string) => {\n    switch (level) {\n      case 'critical': { return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      }\n      case 'warning': { return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n      }\n      default: { return <CheckCircle className=\"h-4 w-4 text-blue-600\" />;\n      }\n    }\n  };\n\n  const getAlertVariant = (level: string): \"default\" | \"destructive\" => {\n    return level === 'critical' ? 'destructive' : 'default';\n  };\n\n  if (loading && !data) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <RefreshCw className=\"h-6 w-6 animate-spin mr-2\" />\n        <span>Loading API monitoring data...</span>\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <Alert variant=\"destructive\">\n        <XCircle className=\"h-4 w-4\" />\n        <AlertTitle>Error</AlertTitle>\n        <AlertDescription>\n          Failed to load API monitoring data. Please try refreshing the page.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  const criticalAlerts = data.alerts.filter(a => a.level === 'critical');\n  const warningAlerts = data.alerts.filter(a => a.level === 'warning');\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold tracking-tight\">API Monitoring Dashboard</h2>\n          <p className=\"text-muted-foreground\">\n            Real-time monitoring of external API usage and limits\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={fetchMonitoringData}\n            disabled={loading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button\n            variant={autoRefresh ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setAutoRefresh(!autoRefresh)}\n          >\n            <Activity className=\"h-4 w-4 mr-2\" />\n            Auto Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Status Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              {data.canMakeRequest ? (\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              ) : (\n                <XCircle className=\"h-5 w-5 text-red-600\" />\n              )}\n              <div>\n                <p className=\"text-sm font-medium\">API Status</p>\n                <p className={`text-lg font-bold ${data.canMakeRequest ? 'text-green-600' : 'text-red-600'}`}>\n                  {data.canMakeRequest ? 'Healthy' : 'Limited'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\n              <div>\n                <p className=\"text-sm font-medium\">Active Alerts</p>\n                <p className=\"text-lg font-bold\">{data.alerts.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <XCircle className=\"h-5 w-5 text-red-600\" />\n              <div>\n                <p className=\"text-sm font-medium\">Critical</p>\n                <p className=\"text-lg font-bold text-red-600\">{criticalAlerts.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5 text-gray-600\" />\n              <div>\n                <p className=\"text-sm font-medium\">Last Update</p>\n                <p className=\"text-sm text-gray-600\">\n                  {lastUpdate ? lastUpdate.toLocaleTimeString() : 'Never'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Critical Alerts */}\n      {criticalAlerts.length > 0 && (\n        <Alert variant=\"destructive\">\n          <XCircle className=\"h-4 w-4\" />\n          <AlertTitle>Critical API Usage Alerts</AlertTitle>\n          <AlertDescription>\n            {criticalAlerts.length} critical alert{criticalAlerts.length > 1 ? 's' : ''} require immediate attention.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* API Usage Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {Object.entries(data.usage).map(([service, usage]) => (\n          <Card key={service}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg capitalize\">{service}</CardTitle>\n                {getStatusIcon(usage.requests.percentage)}\n              </div>\n              <CardDescription>API usage and limits</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Requests */}\n              <div>\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span>Requests</span>\n                  <span className={getStatusColor(usage.requests.percentage)}>\n                    {usage.requests.used.toLocaleString()} / {usage.requests.limit.toLocaleString()}\n                  </span>\n                </div>\n                <Progress \n                  value={usage.requests.percentage} \n                  className=\"h-2\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {usage.requests.percentage.toFixed(1)}% used\n                </p>\n              </div>\n\n              {/* Tokens (if applicable) */}\n              {usage.tokens && (\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Tokens</span>\n                    <span className={getStatusColor(usage.tokens.percentage)}>\n                      {usage.tokens.used.toLocaleString()} / {usage.tokens.limit.toLocaleString()}\n                    </span>\n                  </div>\n                  <Progress \n                    value={usage.tokens.percentage} \n                    className=\"h-2\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    {usage.tokens.percentage.toFixed(1)}% used\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Alerts */}\n      {data.alerts.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Active Alerts\n            </CardTitle>\n            <CardDescription>\n              Current API usage alerts and recommendations\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {data.alerts.map((alert, index) => (\n              <Alert key={index} variant={getAlertVariant(alert.level)}>\n                <div className=\"flex items-start gap-3\">\n                  {getAlertIcon(alert.level)}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <AlertTitle className=\"text-sm\">{alert.message}</AlertTitle>\n                      <Badge variant={alert.level === 'critical' ? 'destructive' : 'secondary'}>\n                        {alert.level}\n                      </Badge>\n                    </div>\n                    <AlertDescription className=\"text-xs\">\n                      Service: {alert.service} | Usage: {alert.usage.percentage.toFixed(1)}%\n                    </AlertDescription>\n                    {alert.recommendations.length > 0 && (\n                      <div className=\"mt-2\">\n                        <p className=\"text-xs font-medium mb-1\">Recommendations:</p>\n                        <ul className=\"text-xs space-y-1\">\n                          {alert.recommendations.slice(0, 2).map((rec, i) => (\n                            <li key={i} className=\"flex items-center gap-1\">\n                              <Zap className=\"h-3 w-3\" />\n                              {rec}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </Alert>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Recommendations */}\n      {data.recommendations.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Optimization Recommendations\n            </CardTitle>\n            <CardDescription>\n              Suggested actions to optimize API usage\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2\">\n              {data.recommendations.map((rec, index) => (\n                <li key={index} className=\"flex items-center gap-2 text-sm\">\n                  <Zap className=\"h-4 w-4 text-blue-600\" />\n                  {rec}\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\AspectRatio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\HoverCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\InputOtp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\NavigationMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\ToggleGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/deprecation","severity":2,"message":"'ElementRef' is deprecated.","line":13,"column":9,"nodeType":null,"messageId":"deprecation","endLine":13,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dataQualityCharts.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LineChart' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'LineChart'.","line":15,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":15,"endColumn":12,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[164,177],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Line' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"sonarjs/unused-import","severity":2,"message":"Remove this unused import of 'Line'.","line":16,"column":3,"nodeType":"Identifier","messageId":"removeUnusedImport","endLine":16,"endColumn":7,"suggestions":[{"messageId":"suggestRemoveOneVariable","fix":{"range":[177,185],"text":""},"desc":"Remove this variable import"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[974,977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[974,977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":44,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `any` value.","line":51,"column":58,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":51,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `any` value.","line":53,"column":20,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":53,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `any` value.","line":53,"column":56,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":53,"endColumn":57},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":58,"column":10,"nodeType":"Literal","messageId":"error","endLine":58,"endColumn":14,"suggestions":[{"messageId":"remove","fix":{"range":[1450,1454],"text":""},"data":{},"desc":"Remove `null`."},{"messageId":"replace","fix":{"range":[1450,1454],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":164,"column":21,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":164,"endColumn":95},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":187,"column":18,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":187,"endColumn":74}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n} from 'recharts';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\n// SOTA color scheme for data quality categories\nconst QUALITY_COLORS = {\n  high: '#22c55e',    // Green for high quality (ΓëÑ80%)\n  medium: '#f59e0b',  // Amber for medium quality (60-79%)\n  low: '#ef4444',     // Red for low quality (<60%)\n};\n\ninterface DataQualityStats {\n  total_trucks: number;\n  avg_quality_score: number;\n  high_quality_count: number;\n  medium_quality_count: number;\n  low_quality_count: number;\n  verified_count: number;\n  pending_count: number;\n  flagged_count: number;\n}\n\ninterface DataQualityChartsProps {\n  qualityStats: DataQualityStats;\n}\n\n// Custom tooltip for better accessibility and UX\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length > 0) {\n    return (\n      <div \n        className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\"\n        role=\"status\"\n        aria-live=\"assertive\"\n      >\n        <p className=\"font-medium\">{`${label}: ${payload[0].value}`}</p>\n        <p className=\"text-sm text-gray-600\">\n          {payload[0].payload.percentage && `${payload[0].payload.percentage}% of total`}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\n// Quality Distribution Pie Chart Component\nconst QualityDistributionChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\n  const data = [\n    {\n      name: 'High Quality',\n      value: qualityStats.high_quality_count,\n      percentage: ((qualityStats.high_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Medium Quality',\n      value: qualityStats.medium_quality_count,\n      percentage: ((qualityStats.medium_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Low Quality',\n      value: qualityStats.low_quality_count,\n      percentage: ((qualityStats.low_quality_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quality Distribution</CardTitle>\n        <CardDescription>\n          Breakdown of food trucks by data quality categories\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({ name, percentage }) => `${name}: ${percentage}%`}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {data.map((entry, index) => (\n                <Cell \n                  key={`cell-${index}`} \n                  fill={Object.values(QUALITY_COLORS)[index]} \n                />\n              ))}\n            </Pie>\n            <Tooltip content={<CustomTooltip />} />\n          </PieChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Verification Status Bar Chart Component\nconst VerificationStatusChart: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\n  const data = [\n    {\n      name: 'Verified',\n      count: qualityStats.verified_count,\n      percentage: ((qualityStats.verified_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Pending',\n      count: qualityStats.pending_count,\n      percentage: ((qualityStats.pending_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n    {\n      name: 'Flagged',\n      count: qualityStats.flagged_count,\n      percentage: ((qualityStats.flagged_count / qualityStats.total_trucks) * 100).toFixed(1),\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Verification Status</CardTitle>\n        <CardDescription>\n          Current verification status of all food trucks\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip content={<CustomTooltip />} />\n            <Bar dataKey=\"count\" fill=\"#3b82f6\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Quality Score Overview Component\nconst QualityScoreOverview: React.FC<{ qualityStats: DataQualityStats }> = ({ qualityStats }) => {\n  const averageScore = (qualityStats.avg_quality_score * 100).toFixed(1);\n  const scoreColor = qualityStats.avg_quality_score >= 0.8 ? 'text-green-600' : \n                    qualityStats.avg_quality_score >= 0.6 ? 'text-yellow-600' : 'text-red-600';\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Overall Quality Score</CardTitle>\n        <CardDescription>\n          Average data quality score across all food trucks\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className={`text-6xl font-bold ${scoreColor}`}>\n            {averageScore}%\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Based on {qualityStats.total_trucks} food trucks\n          </p>\n          <div className=\"mt-4 text-sm\">\n            <div className=\"flex justify-between items-center\">\n              <span>Quality Threshold:</span>\n              <span className=\"font-medium\">\n                {qualityStats.avg_quality_score >= 0.8 ? 'High' : \n                 qualityStats.avg_quality_score >= 0.6 ? 'Medium' : 'Low'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main Data Quality Charts Component\nexport const DataQualityCharts: React.FC<DataQualityChartsProps> = ({ qualityStats }) => {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      <QualityScoreOverview qualityStats={qualityStats} />\n      <QualityDistributionChart qualityStats={qualityStats} />\n      <VerificationStatusChart qualityStats={qualityStats} />\n    </div>\n  );\n};\n\nexport default DataQualityCharts;\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\simpleQualityPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":30,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":32,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":33,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":33,"column":101,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":36,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":36,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":36,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":37},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":60,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":60,"endColumn":43}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { RefreshCw, Settings, Loader2 } from 'lucide-react';\n\ninterface SimpleQualityPanelProps {\n  onRefresh?: () => void;\n}\n\nexport const SimpleQualityPanel: React.FC<SimpleQualityPanelProps> = ({ onRefresh }) => {\n  const [isRecalculating, setIsRecalculating] = useState(false);\n\n  const handleRecalculateAll = async () => {\n    setIsRecalculating(true);\n\n    try {\n      const response = await fetch('/api/admin/data-quality', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: 'recalculate_all',\n        }),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        alert(`Quality scores updated successfully! ${result.data.updated} trucks updated, ${result.data.errors} errors.`);\n        onRefresh?.();\n      } else {\n        throw new Error(result.error || 'Failed to recalculate quality scores');\n      }\n    } catch (error) {\n      console.error('Error recalculating quality scores:', error);\n      alert('Failed to recalculate quality scores. Please try again.');\n    } finally {\n      setIsRecalculating(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Settings className=\"h-5 w-5\" />\n          Quality Management Operations\n        </CardTitle>\n        <CardDescription>\n          Bulk operations for managing data quality scores across all food trucks\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Button\n            onClick={handleRecalculateAll}\n            disabled={isRecalculating}\n            className=\"flex items-center gap-2\"\n            variant=\"default\"\n          >\n            {isRecalculating ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4\" />\n            )}\n            Recalculate All Scores\n          </Button>\n        </div>\n\n        <div className=\"border rounded-lg p-4 bg-blue-50/50\">\n          <h4 className=\"font-medium mb-2 text-blue-900\">Quality Score Thresholds</h4>\n          <div className=\"space-y-1 text-sm text-blue-800\">\n            <div className=\"flex justify-between\">\n              <span>High Quality:</span>\n              <Badge className=\"bg-green-100 text-green-800\">ΓëÑ 80%</Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Medium Quality:</span>\n              <Badge className=\"bg-yellow-100 text-yellow-800\">60% - 79%</Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Low Quality:</span>\n              <Badge className=\"bg-red-100 text-red-800\">&lt; 60%</Badge>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-xs text-muted-foreground\">\n          <p>\n            <strong>Recalculate All:</strong> Updates quality scores for all food trucks using the latest algorithm.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SimpleQualityPanel;\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/table-header","severity":2,"message":"Add a valid header row or column to this \"<table>\".","line":9,"column":7,"nodeType":"JSXElement","endLine":9,"endColumn":96,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseMobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\UseToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\hooks\\useRealtimeAdminEvents.ts","messages":[{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":77,"column":73,"nodeType":"Literal","messageId":"error","endLine":77,"endColumn":77,"suggestions":[{"messageId":"replace","fix":{"range":[1906,1910],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":78,"column":78,"nodeType":"Literal","messageId":"error","endLine":78,"endColumn":82,"suggestions":[{"messageId":"replace","fix":{"range":[1990,1994],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":81,"column":67,"nodeType":"Literal","messageId":"error","endLine":81,"endColumn":71,"suggestions":[{"messageId":"replace","fix":{"range":[2200,2204],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":126,"column":24,"nodeType":"Literal","messageId":"error","endLine":126,"endColumn":28,"suggestions":[{"messageId":"replace","fix":{"range":[3364,3368],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":147,"column":28,"nodeType":"Literal","messageId":"error","endLine":147,"endColumn":32,"suggestions":[{"messageId":"replace","fix":{"range":[4148,4152],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/prefer-add-event-listener","severity":2,"message":"Prefer `addEventListener` over `onmessage`. Note that there is difference between `SharedWorker#onmessage` and `SharedWorker#addEventListener('message')`.","line":151,"column":19,"nodeType":"Identifier","messageId":"prefer-add-event-listener","endLine":151,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":153,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":153,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":153,"column":53,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":153,"endColumn":63},{"ruleId":"unicorn/prefer-add-event-listener","severity":2,"message":"Prefer `addEventListener` over `onerror`. Note that there is difference between `{window,element}.onerror` and `{window,element}.addEventListener('error')`.","line":160,"column":19,"nodeType":"Identifier","messageId":"prefer-add-event-listener","endLine":160,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":183,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":183,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":183,"column":53,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":183,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":192,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":192,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":192,"column":53,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":192,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":201,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":201,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":201,"column":53,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":201,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":210,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":210,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":210,"column":53,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":210,"endColumn":63},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":231,"column":37,"nodeType":"Literal","messageId":"error","endLine":231,"endColumn":41,"suggestions":[{"messageId":"replace","fix":{"range":[7040,7044],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":236,"column":32,"nodeType":"Literal","messageId":"error","endLine":236,"endColumn":36,"suggestions":[{"messageId":"replace","fix":{"range":[7156,7160],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":241,"column":24,"nodeType":"Literal","messageId":"error","endLine":241,"endColumn":28,"suggestions":[{"messageId":"replace","fix":{"range":[7247,7251],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Real-time Admin Dashboard Hook\n * \n * Provides real-time updates for admin dashboard using Server-Sent Events (SSE)\n * Implements automatic reconnection, error handling, and event filtering\n */\n\nimport { useState, useEffect, useRef, useCallback } from 'react';\n\ninterface AdminEvent {\n  id: string;\n  type: 'scraping_update' | 'data_quality_change' | 'system_alert' | 'user_activity' | 'heartbeat';\n  timestamp: string;\n  data: Record<string, unknown>;\n  severity?: 'info' | 'warning' | 'error' | 'critical';\n}\n\ninterface RealtimeMetrics {\n  scrapingJobs: {\n    active: number;\n    completed: number;\n    failed: number;\n    pending: number;\n  };\n  dataQuality: {\n    averageScore: number;\n    totalTrucks: number;\n    recentChanges: number;\n  };\n  systemHealth: {\n    status: 'healthy' | 'warning' | 'error';\n    uptime: number;\n    lastUpdate: string;\n  };\n}\n\ninterface UseRealtimeAdminEventsOptions {\n  autoConnect?: boolean;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n  eventFilter?: (event: AdminEvent) => boolean;\n}\n\ninterface UseRealtimeAdminEventsReturn {\n  // Connection state\n  isConnected: boolean;\n  isConnecting: boolean;\n  connectionError: string | null;\n  \n  // Data\n  latestMetrics: RealtimeMetrics | null;\n  recentEvents: AdminEvent[];\n  \n  // Controls\n  connect: () => void;\n  disconnect: () => void;\n  clearEvents: () => void;\n  \n  // Statistics\n  connectionAttempts: number;\n  lastEventTime: Date | null;\n}\n\nexport function useRealtimeAdminEvents(\n  options: UseRealtimeAdminEventsOptions = {}\n): UseRealtimeAdminEventsReturn {\n  const {\n    autoConnect = true,\n    reconnectInterval = 5000,\n    maxReconnectAttempts = 10,\n    eventFilter\n  } = options;\n\n  // State\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionError, setConnectionError] = useState<string | null>(null);\n  const [latestMetrics, setLatestMetrics] = useState<RealtimeMetrics | null>(null);\n  const [recentEvents, setRecentEvents] = useState<AdminEvent[]>([]);\n  const [connectionAttempts, setConnectionAttempts] = useState(0);\n  const [lastEventTime, setLastEventTime] = useState<Date | null>(null);\n\n  // Refs\n  const eventSourceRef = useRef<EventSource | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const isManuallyDisconnectedRef = useRef(false);\n\n  // Event handlers\n  const handleEvent = useCallback((event: AdminEvent) => {\n    // Apply filter if provided\n    if (eventFilter && !eventFilter(event)) {\n      return;\n    }\n\n    setLastEventTime(new Date());\n\n    // Handle different event types\n    switch (event.type) {\n      case 'heartbeat': {\n        if (event.data && typeof event.data === 'object') {\n          setLatestMetrics(event.data as RealtimeMetrics);\n        }\n        break;\n      }\n\n      case 'scraping_update':\n      case 'data_quality_change':\n      case 'system_alert':\n      case 'user_activity': {\n        setRecentEvents(prev => {\n          const newEvents = [event, ...prev].slice(0, 50); // Keep last 50 events\n          return newEvents;\n        });\n        break;\n      }\n    }\n  }, [eventFilter]);\n\n  // Connection management\n  const connect = useCallback(() => {\n    if (eventSourceRef.current || isConnecting) {\n      return;\n    }\n\n    setIsConnecting(true);\n    setConnectionError(null);\n    isManuallyDisconnectedRef.current = false;\n\n    try {\n      // Get auth token from localStorage or context\n      const token = localStorage.getItem('supabase.auth.token') || \n                   sessionStorage.getItem('supabase.auth.token');\n\n      if (!token) {\n        throw new Error('No authentication token available');\n      }\n\n      const eventSource = new EventSource('/api/admin/realtime-events', {\n        // Note: EventSource doesn't support custom headers directly\n        // We'll need to pass the token via query parameter or use a different approach\n      });\n\n      eventSource.addEventListener('open', () => {\n        console.info('Real-time admin events connected');\n        setIsConnected(true);\n        setIsConnecting(false);\n        setConnectionError(null);\n        setConnectionAttempts(0);\n      });\n\n      eventSource.onmessage = (event) => {\n        try {\n          const adminEvent: AdminEvent = JSON.parse(event.data);\n          handleEvent(adminEvent);\n        } catch (error) {\n          console.warn('Failed to parse admin event:', error);\n        }\n      };\n\n      eventSource.onerror = (error) => {\n        console.error('Real-time admin events error:', error);\n        setIsConnected(false);\n        setIsConnecting(false);\n        setConnectionError('Connection error occurred');\n\n        // Attempt reconnection if not manually disconnected\n        if (!isManuallyDisconnectedRef.current && connectionAttempts < maxReconnectAttempts) {\n          setConnectionAttempts(prev => prev + 1);\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            if (!isManuallyDisconnectedRef.current) {\n              connect();\n            }\n          }, reconnectInterval);\n        } else if (connectionAttempts >= maxReconnectAttempts) {\n          setConnectionError('Max reconnection attempts reached');\n        }\n      };\n\n      // Handle specific event types\n      eventSource.addEventListener('heartbeat', (event) => {\n        try {\n          const adminEvent: AdminEvent = JSON.parse(event.data);\n          handleEvent(adminEvent);\n        } catch (error) {\n          console.warn('Failed to parse heartbeat event:', error);\n        }\n      });\n\n      eventSource.addEventListener('scraping_update', (event) => {\n        try {\n          const adminEvent: AdminEvent = JSON.parse(event.data);\n          handleEvent(adminEvent);\n        } catch (error) {\n          console.warn('Failed to parse scraping update event:', error);\n        }\n      });\n\n      eventSource.addEventListener('data_quality_change', (event) => {\n        try {\n          const adminEvent: AdminEvent = JSON.parse(event.data);\n          handleEvent(adminEvent);\n        } catch (error) {\n          console.warn('Failed to parse data quality change event:', error);\n        }\n      });\n\n      eventSource.addEventListener('system_alert', (event) => {\n        try {\n          const adminEvent: AdminEvent = JSON.parse(event.data);\n          handleEvent(adminEvent);\n        } catch (error) {\n          console.warn('Failed to parse system alert event:', error);\n        }\n      });\n\n      eventSourceRef.current = eventSource;\n\n    } catch (error) {\n      console.error('Failed to establish real-time connection:', error);\n      setIsConnecting(false);\n      setConnectionError(error instanceof Error ? error.message : 'Connection failed');\n    }\n  }, [handleEvent, connectionAttempts, maxReconnectAttempts, reconnectInterval]);\n\n  const disconnect = useCallback(() => {\n    isManuallyDisconnectedRef.current = true;\n    \n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsConnecting(false);\n    setConnectionError(null);\n  }, []);\n\n  const clearEvents = useCallback(() => {\n    setRecentEvents([]);\n  }, []);\n\n  // Auto-connect on mount\n  useEffect(() => {\n    if (autoConnect) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [autoConnect, connect, disconnect]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n      }\n    };\n  }, []);\n\n  return {\n    // Connection state\n    isConnected,\n    isConnecting,\n    connectionError,\n    \n    // Data\n    latestMetrics,\n    recentEvents,\n    \n    // Controls\n    connect,\n    disconnect,\n    clearEvents,\n    \n    // Statistics\n    connectionAttempts,\n    lastEventTime\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\ScraperEngine.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":305,"column":39,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":305,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":311,"column":39,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":311,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 25 to the 15 allowed.","line":390,"column":3,"nodeType":null,"messageId":"refactorFunction","endLine":390,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.","line":468,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":468,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\activityLogger.ts","messages":[],"suppressedMessages":[{"ruleId":"sonarjs/pseudo-random","severity":2,"message":"Make sure that using this pseudorandom number generator is safe here.","line":45,"column":10,"nodeType":"CallExpression","messageId":"safeGenerator","endLine":45,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\autoScraper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\batchCleanup.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":69,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":69,"endColumn":46},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"never\" of template literal expression.","line":129,"column":60,"nodeType":"Identifier","messageId":"invalidType","endLine":129,"endColumn":64},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 45 to the 15 allowed.","line":142,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":142,"endColumn":42},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":239,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":239,"endColumn":45},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 29 to the 15 allowed.","line":278,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":278,"endColumn":38},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":336,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":336,"endColumn":43},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 26 to the 15 allowed.","line":370,"column":24,"nodeType":null,"messageId":"refactorFunction","endLine":370,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":380,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":380,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":380,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":380,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .checkForDuplicates on an `error` typed value.","line":380,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":380,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isDuplicate on an `error` typed value.","line":382,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":382,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .bestMatch on an `error` typed value.","line":382,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":382,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":383,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":383,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `error` typed value.","line":385,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":385,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .recommendation on an `error` typed value.","line":385,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":385,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":392,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":392,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mergeDuplicates on an `error` typed value.","line":392,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":392,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .existingTruck on an `error` typed value.","line":392,"column":84,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":392,"endColumn":97},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":393,"column":32,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":393,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .existingTruck on an `error` typed value.","line":393,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":393,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .existingTruck on an `error` typed value.","line":397,"column":93,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":106}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Batch Data Cleanup System\n * Implements automated data quality improvements and cleanup operations\n */\n\nimport { FoodTruckService, DataQualityService, type FoodTruck } from '@/lib/supabase';\nimport { DuplicatePreventionService } from './duplicate-prevention';\n\nexport interface CleanupOperation {\n  type: 'normalize_phone' | 'fix_coordinates' | 'remove_placeholders' | 'update_quality_scores' | 'merge_duplicates';\n  description: string;\n  affectedCount: number;\n  successCount: number;\n  errorCount: number;\n  errors: string[];\n}\n\nexport interface BatchCleanupResult {\n  totalProcessed: number;\n  operations: CleanupOperation[];\n  summary: {\n    trucksImproved: number;\n    duplicatesRemoved: number;\n    qualityScoreImprovement: number;\n    placeholdersRemoved: number;\n  };\n  duration: number;\n}\n\n/**\n * Automated Data Quality Cleanup Service\n */\nexport class BatchCleanupService {\n  \n  /**\n   * Run comprehensive data cleanup operations\n   */\n  static async runFullCleanup(options: {\n    batchSize?: number;\n    dryRun?: boolean;\n    operations?: CleanupOperation['type'][];\n  } = {}): Promise<BatchCleanupResult> {\n    const startTime = Date.now();\n    const { batchSize = 50, dryRun = false, operations = [\n      'remove_placeholders',\n      'normalize_phone',\n      'fix_coordinates',\n      'update_quality_scores',\n      'merge_duplicates'\n    ] } = options;\n    \n    console.info(`Starting batch cleanup (${dryRun ? 'DRY RUN' : 'LIVE'})...`);\n    \n    const result: BatchCleanupResult = {\n      totalProcessed: 0,\n      operations: [],\n      summary: {\n        trucksImproved: 0,\n        duplicatesRemoved: 0,\n        qualityScoreImprovement: 0,\n        placeholdersRemoved: 0\n      },\n      duration: 0\n    };\n    \n    try {\n      // Get all trucks for processing\n      const allTrucks = await FoodTruckService.getAllTrucks();\n      result.totalProcessed = allTrucks.count;\n      \n      // Process trucks in batches\n      for (let i = 0; i < allTrucks.trucks.length; i += batchSize) {\n        const batch = allTrucks.trucks.slice(i, i + batchSize);\n        \n        for (const operation of operations) {\n          const opResult = await this.runOperation(operation, batch, dryRun);\n          result.operations.push(opResult);\n        }\n      }\n      \n      // Calculate summary\n      result.summary = this.calculateSummary(result.operations);\n      result.duration = Date.now() - startTime;\n      \n      console.info(`Batch cleanup completed in ${result.duration}ms`);\n      return result;\n      \n    } catch (error) {\n      console.error('Batch cleanup failed:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Run a specific cleanup operation\n   */\n  private static async runOperation(\n    type: CleanupOperation['type'],\n    trucks: FoodTruck[],\n    dryRun: boolean\n  ): Promise<CleanupOperation> {\n    const operation: CleanupOperation = {\n      type,\n      description: this.getOperationDescription(type),\n      affectedCount: 0,\n      successCount: 0,\n      errorCount: 0,\n      errors: []\n    };\n    \n    try {\n      switch (type) {\n        case 'remove_placeholders': {\n          return await this.removePlaceholders(trucks, dryRun, operation);\n        }\n        case 'normalize_phone': {\n          return await this.normalizePhoneNumbers(trucks, dryRun, operation);\n        }\n        case 'fix_coordinates': {\n          return await this.fixCoordinates(trucks, dryRun, operation);\n        }\n        case 'update_quality_scores': {\n          return await this.updateQualityScores(trucks, dryRun, operation);\n        }\n        case 'merge_duplicates': {\n          return await this.mergeDuplicates(trucks, dryRun, operation);\n        }\n        default: {\n          operation.errors.push(`Unknown operation type: ${type}`);\n          return operation;\n        }\n      }\n    } catch (error) {\n      operation.errors.push(`Operation failed: ${error instanceof Error ? error.message : String(error)}`);\n      return operation;\n    }\n  }\n  \n  /**\n   * Remove placeholder and mock data\n   */\n  private static async removePlaceholders(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    const placeholderPatterns = [\n      /undefined/i,\n      /placeholder/i,\n      /example\\.com/i,\n      /test\\s*truck/i,\n      /lorem\\s*ipsum/i,\n      /\\bna\\b/i,\n      /\\bn\\/a\\b/i,\n      /^0+$/,\n      /^null$/i\n    ];\n    \n    for (const truck of trucks) {\n      let needsUpdate = false;\n      const updates: Partial<FoodTruck> = {};\n      \n      // Check name\n      if (truck.name && placeholderPatterns.some(pattern => pattern.test(truck.name))) {\n        updates.name = undefined;\n        needsUpdate = true;\n      }\n      \n      // Check description\n      if (truck.description && placeholderPatterns.some(pattern => pattern.test(truck.description))) {\n        updates.description = undefined;\n        needsUpdate = true;\n      }\n      \n      // Check price range\n      if (truck.price_range && placeholderPatterns.some(pattern => pattern.test(truck.price_range))) {\n        updates.price_range = undefined;\n        needsUpdate = true;\n      }\n      \n      // Check contact info\n      if (truck.contact_info) {\n        const cleanContact = { ...truck.contact_info };\n        let contactUpdated = false;\n        \n        if (cleanContact.phone && placeholderPatterns.some(pattern => pattern.test(cleanContact.phone))) {\n          cleanContact.phone = undefined;\n          contactUpdated = true;\n        }\n        \n        if (cleanContact.website && placeholderPatterns.some(pattern => pattern.test(cleanContact.website))) {\n          cleanContact.website = undefined;\n          contactUpdated = true;\n        }\n        \n        if (cleanContact.email && placeholderPatterns.some(pattern => pattern.test(cleanContact.email))) {\n          cleanContact.email = undefined;\n          contactUpdated = true;\n        }\n        \n        if (contactUpdated) {\n          updates.contact_info = cleanContact;\n          needsUpdate = true;\n        }\n      }\n      \n      // Check address\n      if (truck.current_location?.address && placeholderPatterns.some(pattern => pattern.test(truck.current_location.address))) {\n        updates.current_location = {\n          ...truck.current_location,\n          address: undefined\n        };\n        needsUpdate = true;\n      }\n      \n      if (needsUpdate) {\n        operation.affectedCount++;\n        \n        if (dryRun) {\n          operation.successCount++;\n        } else {\n          try {\n            await FoodTruckService.updateTruck(truck.id, updates);\n            operation.successCount++;\n          } catch (error) {\n            operation.errorCount++;\n            operation.errors.push(`Failed to update truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Normalize phone numbers to consistent format\n   */\n  private static async normalizePhoneNumbers(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    for (const truck of trucks) {\n      if (truck.contact_info?.phone) {\n        const originalPhone = truck.contact_info.phone;\n        const normalizedPhone = this.normalizePhone(originalPhone);\n        \n        if (normalizedPhone && normalizedPhone !== originalPhone) {\n          operation.affectedCount++;\n          \n          if (dryRun) {\n            operation.successCount++;\n          } else {\n            try {\n              await FoodTruckService.updateTruck(truck.id, {\n                contact_info: {\n                  ...truck.contact_info,\n                  phone: normalizedPhone\n                }\n              });\n              operation.successCount++;\n            } catch (error) {\n              operation.errorCount++;\n              operation.errors.push(`Failed to normalize phone for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n            }\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Fix invalid GPS coordinates\n   */\n  private static async fixCoordinates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    // Charleston, SC default coordinates\n    const defaultLat = 32.7767;\n    const defaultLng = -79.9311;\n    \n    for (const truck of trucks) {\n      if (truck.current_location) {\n        const { lat, lng } = truck.current_location;\n        let needsUpdate = false;\n        const updates: Partial<FoodTruck['current_location']> = {};\n        \n        // Fix invalid coordinates (0,0 or null)\n        if (!lat || lat === 0 || !lng || lng === 0) {\n          updates.lat = defaultLat;\n          updates.lng = defaultLng;\n          needsUpdate = true;\n        }\n        \n        // Fix coordinates outside reasonable bounds for Charleston area\n        if (lat && lng && (lat < 32 || lat > 34 || lng > -79 || lng < -81)) {\n          updates.lat = defaultLat;\n          updates.lng = defaultLng;\n          needsUpdate = true;\n        }\n        \n        if (needsUpdate) {\n          operation.affectedCount++;\n          \n          if (dryRun) {\n            operation.successCount++;\n          } else {\n            try {\n              await FoodTruckService.updateTruck(truck.id, {\n                current_location: {\n                  ...truck.current_location,\n                  ...updates\n                }\n              });\n              operation.successCount++;\n            } catch (error) {\n              operation.errorCount++;\n              operation.errors.push(`Failed to fix coordinates for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n            }\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Update quality scores for all trucks\n   */\n  private static async updateQualityScores(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    for (const truck of trucks) {\n      const qualityAssessment = DataQualityService.calculateQualityScore(truck);\n      const newScore = qualityAssessment.score;\n      const currentScore = truck.data_quality_score || 0;\n      \n      // Only update if score changed significantly (>5% difference)\n      if (Math.abs(newScore - currentScore) > 0.05) {\n        operation.affectedCount++;\n        \n        if (dryRun) {\n          operation.successCount++;\n        } else {\n          try {\n            await DataQualityService.updateTruckQualityScore(truck.id);\n            operation.successCount++;\n          } catch (error) {\n            operation.errorCount++;\n            operation.errors.push(`Failed to update quality score for truck ${truck.id}: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        }\n      }\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Identify and merge duplicate trucks\n   */\n  private static async mergeDuplicates(\n    trucks: FoodTruck[],\n    dryRun: boolean,\n    operation: CleanupOperation\n  ): Promise<CleanupOperation> {\n    const processedIds = new Set<string>();\n    \n    for (const truck of trucks) {\n      if (processedIds.has(truck.id)) continue;\n      \n      const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truck);\n      \n      if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\n        const { bestMatch } = duplicateCheck;\n        \n        if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\n          operation.affectedCount++;\n          \n          if (dryRun) {\n            operation.successCount++;\n          } else {\n            try {\n              await DuplicatePreventionService.mergeDuplicates(truck.id, bestMatch.existingTruck.id);\n              processedIds.add(bestMatch.existingTruck.id);\n              operation.successCount++;\n            } catch (error) {\n              operation.errorCount++;\n              operation.errors.push(`Failed to merge duplicates ${truck.id} and ${bestMatch.existingTruck.id}: ${error instanceof Error ? error.message : String(error)}`);\n            }\n          }\n        }\n      }\n      \n      processedIds.add(truck.id);\n    }\n    \n    return operation;\n  }\n  \n  /**\n   * Normalize phone number format\n   */\n  private static normalizePhone(phone: string): string | undefined {\n    if (!phone) return undefined;\n    \n    // Remove all non-digit characters\n    const digits = phone.replaceAll(/\\D/g, '');\n    \n    // Handle US phone numbers\n    if (digits.length === 10) {\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;\n    } else if (digits.length === 11 && digits[0] === '1') {\n      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;\n    }\n    \n    // Return original if can't normalize\n    return phone;\n  }\n  \n  /**\n   * Get operation description\n   */\n  private static getOperationDescription(type: CleanupOperation['type']): string {\n    const descriptions = {\n      remove_placeholders: 'Remove placeholder and mock data values',\n      normalize_phone: 'Normalize phone numbers to consistent format',\n      fix_coordinates: 'Fix invalid GPS coordinates',\n      update_quality_scores: 'Recalculate data quality scores',\n      merge_duplicates: 'Identify and merge duplicate truck entries'\n    };\n    \n    return descriptions[type] || 'Unknown operation';\n  }\n  \n  /**\n   * Calculate cleanup summary\n   */\n  private static calculateSummary(operations: CleanupOperation[]): BatchCleanupResult['summary'] {\n    return {\n      trucksImproved: operations.reduce((sum, op) => sum + op.successCount, 0),\n      duplicatesRemoved: operations.find(op => op.type === 'merge_duplicates')?.successCount || 0,\n      qualityScoreImprovement: operations.find(op => op.type === 'update_quality_scores')?.successCount || 0,\n      placeholdersRemoved: operations.find(op => op.type === 'remove_placeholders')?.successCount || 0\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\data-quality\\duplicatePrevention.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":297,"column":42,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":297,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":297,"column":42,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":297,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toLowerCase on an `error` typed value.","line":297,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":297,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":298,"column":42,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":298,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":298,"column":42,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":298,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toLowerCase on an `error` typed value.","line":298,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":298,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":301,"column":38,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":301,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":301,"column":54,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":301,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'candidate' is defined but never used. Allowed unused args must match /^_/u.","line":328,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":328,"endColumn":70},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'candidate' is defined but never used. Allowed unused args must match /^_/u.","line":343,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":343,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":378,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":378,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":379,"column":30,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":379,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":379,"column":56,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":379,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":388,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":388,"endColumn":39}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Duplicate Prevention System\n * Implements intelligent duplicate detection and prevention for food truck data\n */\n\nimport { FoodTruckService, type FoodTruck } from '@/lib/supabase';\n\n// Duplicate detection configuration\nexport const DUPLICATE_DETECTION_CONFIG = {\n  // Similarity thresholds (0.0 = no match, 1.0 = exact match)\n  thresholds: {\n    name: 0.85,        // High threshold for name matching\n    location: 0.9,     // Very high threshold for location matching\n    phone: 1,        // Exact match for phone numbers\n    website: 1,      // Exact match for websites\n    overall: 0.8       // Overall similarity threshold\n  },\n  \n  // Weight factors for different fields\n  weights: {\n    name: 0.4,         // 40% weight for name similarity\n    location: 0.3,     // 30% weight for location similarity\n    contact: 0.2,      // 20% weight for contact info similarity\n    menu: 0.1          // 10% weight for menu similarity\n  }\n} as const;\n\nexport interface DuplicateMatch {\n  existingTruck: FoodTruck;\n  similarity: number;\n  matchedFields: string[];\n  confidence: 'high' | 'medium' | 'low';\n  recommendation: 'merge' | 'update' | 'skip' | 'manual_review';\n}\n\nexport interface DuplicateDetectionResult {\n  isDuplicate: boolean;\n  matches: DuplicateMatch[];\n  bestMatch?: DuplicateMatch;\n  action: 'create' | 'update' | 'merge' | 'manual_review';\n  reason: string;\n}\n\n/**\n * Advanced Duplicate Prevention Service\n */\nexport class DuplicatePreventionService {\n  \n  /**\n   * Check if a food truck is a duplicate of existing trucks\n   */\n  static async checkForDuplicates(candidateTruck: Partial<FoodTruck>): Promise<DuplicateDetectionResult> {\n    try {\n      // Get all existing trucks for comparison\n      const existingTrucks = await FoodTruckService.getAllTrucks();\n      \n      const matches: DuplicateMatch[] = [];\n      \n      for (const existingTruck of existingTrucks.trucks) {\n        const similarity = this.calculateSimilarity(candidateTruck, existingTruck);\n        \n        if (similarity.overall >= DUPLICATE_DETECTION_CONFIG.thresholds.overall) {\n          matches.push({\n            existingTruck,\n            similarity: similarity.overall,\n            matchedFields: similarity.matchedFields,\n            confidence: this.getConfidenceLevel(similarity.overall),\n            recommendation: this.getRecommendation(similarity)\n          });\n        }\n      }\n      \n      // Sort matches by similarity (highest first)\n      matches.sort((a, b) => b.similarity - a.similarity);\n      \n      const bestMatch = matches[0];\n      const isDuplicate = matches.length > 0;\n      \n      return {\n        isDuplicate,\n        matches,\n        bestMatch,\n        action: this.determineAction(matches, candidateTruck),\n        reason: this.generateReason(matches, candidateTruck)\n      };\n      \n    } catch (error) {\n      console.error('Error checking for duplicates:', error);\n      return {\n        isDuplicate: false,\n        matches: [],\n        action: 'create',\n        reason: 'Error during duplicate detection - proceeding with creation'\n      };\n    }\n  }\n  \n  /**\n   * Calculate similarity between two food trucks\n   */\n  private static calculateSimilarity(\n    candidate: Partial<FoodTruck>, \n    existing: FoodTruck\n  ): { overall: number; matchedFields: string[]; breakdown: Record<string, number> } {\n    const breakdown: Record<string, number> = {};\n    const matchedFields: string[] = [];\n    \n    // Name similarity\n    const nameSimilarity = this.calculateStringSimilarity(\n      candidate.name || '', \n      existing.name || ''\n    );\n    breakdown.name = nameSimilarity;\n    if (nameSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.name) {\n      matchedFields.push('name');\n    }\n    \n    // Location similarity\n    const locationSimilarity = this.calculateLocationSimilarity(\n      candidate.current_location,\n      existing.current_location\n    );\n    breakdown.location = locationSimilarity;\n    if (locationSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.location) {\n      matchedFields.push('location');\n    }\n    \n    // Contact similarity\n    const contactSimilarity = this.calculateContactSimilarity(\n      candidate.contact_info,\n      existing.contact_info\n    );\n    breakdown.contact = contactSimilarity;\n    if (contactSimilarity >= DUPLICATE_DETECTION_CONFIG.thresholds.phone) {\n      matchedFields.push('contact');\n    }\n    \n    // Menu similarity (basic)\n    const menuSimilarity = this.calculateMenuSimilarity(\n      candidate.menu,\n      existing.menu\n    );\n    breakdown.menu = menuSimilarity;\n    if (menuSimilarity > 0.7) {\n      matchedFields.push('menu');\n    }\n    \n    // Calculate weighted overall similarity\n    const overall = (\n      nameSimilarity * DUPLICATE_DETECTION_CONFIG.weights.name +\n      locationSimilarity * DUPLICATE_DETECTION_CONFIG.weights.location +\n      contactSimilarity * DUPLICATE_DETECTION_CONFIG.weights.contact +\n      menuSimilarity * DUPLICATE_DETECTION_CONFIG.weights.menu\n    );\n    \n    return { overall, matchedFields, breakdown };\n  }\n  \n  /**\n   * Calculate string similarity using Levenshtein distance\n   */\n  private static calculateStringSimilarity(str1: string, str2: string): number {\n    if (!str1 || !str2) return 0;\n    \n    // Normalize strings\n    const s1 = str1.toLowerCase().trim();\n    const s2 = str2.toLowerCase().trim();\n    \n    if (s1 === s2) return 1;\n    \n    // Calculate Levenshtein distance\n    const matrix: number[][] = [];\n    const len1 = s1.length;\n    const len2 = s2.length;\n    \n    for (let i = 0; i <= len1; i++) {\n      matrix[i] = [i];\n    }\n    \n    for (let j = 0; j <= len2; j++) {\n      matrix[0][j] = j;\n    }\n    \n    for (let i = 1; i <= len1; i++) {\n      for (let j = 1; j <= len2; j++) {\n        const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1,      // deletion\n          matrix[i][j - 1] + 1,      // insertion\n          matrix[i - 1][j - 1] + cost // substitution\n        );\n      }\n    }\n    \n    const distance = matrix[len1][len2];\n    const maxLength = Math.max(len1, len2);\n    \n    return maxLength === 0 ? 1 : 1 - (distance / maxLength);\n  }\n  \n  /**\n   * Calculate location similarity\n   */\n  private static calculateLocationSimilarity(\n    loc1: FoodTruck['current_location'],\n    loc2: FoodTruck['current_location']\n  ): number {\n    if (!loc1 || !loc2) return 0;\n    \n    let similarity = 0;\n    let factors = 0;\n    \n    // Address similarity\n    if (loc1.address && loc2.address) {\n      similarity += this.calculateStringSimilarity(loc1.address, loc2.address);\n      factors++;\n    }\n    \n    // GPS coordinate similarity (within 100 meters = high similarity)\n    if (loc1.lat && loc1.lng && loc2.lat && loc2.lng) {\n      const distance = this.calculateGPSDistance(\n        loc1.lat, loc1.lng,\n        loc2.lat, loc2.lng\n      );\n      \n      // Distance similarity (closer = higher similarity)\n      const distanceSimilarity = distance <= 0.1 ? 1 : Math.max(0, 1 - (distance / 1)); // 1km max\n      similarity += distanceSimilarity;\n      factors++;\n    }\n    \n    return factors > 0 ? similarity / factors : 0;\n  }\n  \n  /**\n   * Calculate GPS distance in kilometers\n   */\n  private static calculateGPSDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n  \n  /**\n   * Calculate contact similarity\n   */\n  private static calculateContactSimilarity(\n    contact1: FoodTruck['contact_info'],\n    contact2: FoodTruck['contact_info']\n  ): number {\n    if (!contact1 || !contact2) return 0;\n    \n    let matches = 0;\n    let total = 0;\n    \n    // Phone number exact match\n    if (contact1.phone && contact2.phone) {\n      const phone1 = contact1.phone.replaceAll(/\\D/g, ''); // Remove non-digits\n      const phone2 = contact2.phone.replaceAll(/\\D/g, '');\n      if (phone1 === phone2) matches++;\n      total++;\n    }\n    \n    // Website exact match\n    if (contact1.website && contact2.website) {\n      const url1 = contact1.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\n      const url2 = contact2.website.toLowerCase().replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\n      if (url1 === url2) matches++;\n      total++;\n    }\n    \n    // Email similarity\n    if (contact1.email && contact2.email) {\n      if (contact1.email.toLowerCase() === contact2.email.toLowerCase()) matches++;\n      total++;\n    }\n    \n    return total > 0 ? matches / total : 0;\n  }\n  \n  /**\n   * Calculate menu similarity (basic implementation)\n   */\n  private static calculateMenuSimilarity(\n    menu1: FoodTruck['menu'],\n    menu2: FoodTruck['menu']\n  ): number {\n    if (!menu1 || !menu2 || menu1.length === 0 || menu2.length === 0) return 0;\n    \n    // Simple category name matching\n    const categories1 = menu1.map(cat => cat.category.toLowerCase());\n    const categories2 = menu2.map(cat => cat.category.toLowerCase());\n    \n    const commonCategories = categories1.filter(cat => categories2.includes(cat));\n    const totalCategories = new Set([...categories1, ...categories2]).size;\n    \n    return totalCategories > 0 ? commonCategories.length / totalCategories : 0;\n  }\n  \n  /**\n   * Get confidence level based on similarity score\n   */\n  private static getConfidenceLevel(similarity: number): 'high' | 'medium' | 'low' {\n    if (similarity >= 0.95) return 'high';\n    if (similarity >= 0.85) return 'medium';\n    return 'low';\n  }\n  \n  /**\n   * Get recommendation based on similarity analysis\n   */\n  private static getRecommendation(similarity: { overall: number; matchedFields: string[] }): 'merge' | 'update' | 'skip' | 'manual_review' {\n    if (similarity.overall >= 0.95) return 'merge';\n    if (similarity.overall >= 0.9) return 'update';\n    if (similarity.overall >= 0.8) return 'manual_review';\n    return 'skip';\n  }\n  \n  /**\n   * Determine action based on matches\n   */\n  private static determineAction(matches: DuplicateMatch[], candidate: Partial<FoodTruck>): 'create' | 'update' | 'merge' | 'manual_review' {\n    if (matches.length === 0) return 'create';\n    \n    const bestMatch = matches[0];\n    \n    if (bestMatch.confidence === 'high') {\n      return bestMatch.recommendation;\n    }\n    \n    return 'manual_review';\n  }\n  \n  /**\n   * Generate human-readable reason\n   */\n  private static generateReason(matches: DuplicateMatch[], candidate: Partial<FoodTruck>): string {\n    if (matches.length === 0) {\n      return 'No duplicates found - safe to create new truck entry';\n    }\n    \n    const bestMatch = matches[0];\n    const similarity = Math.round(bestMatch.similarity * 100);\n    \n    return `Found ${matches.length} potential duplicate(s). Best match: ${similarity}% similarity with \"${bestMatch.existingTruck.name}\" (matched: ${bestMatch.matchedFields.join(', ')})`;\n  }\n  \n  /**\n   * Merge duplicate truck data intelligently\n   */\n  static async mergeDuplicates(targetId: string, sourceId: string): Promise<FoodTruck> {\n    const target = await FoodTruckService.getTruckById(targetId);\n    const source = await FoodTruckService.getTruckById(sourceId);\n    \n    // Merge logic: prefer non-null, more complete data\n    const mergedData: Partial<FoodTruck> = {\n      name: target.name || source.name,\n      description: target.description || source.description,\n      cuisine_type: target.cuisine_type?.length ? target.cuisine_type : source.cuisine_type,\n      price_range: target.price_range || source.price_range,\n      current_location: target.current_location || source.current_location,\n      contact_info: {\n        ...source.contact_info,\n        ...target.contact_info // Target takes precedence\n      },\n      operating_hours: target.operating_hours || source.operating_hours,\n      menu: target.menu?.length ? target.menu : source.menu,\n      social_media: {\n        ...source.social_media,\n        ...target.social_media\n      },\n      average_rating: target.average_rating || source.average_rating,\n      review_count: Math.max(target.review_count || 0, source.review_count || 0),\n      source_urls: [...new Set([...(target.source_urls || []), ...(source.source_urls || [])])],\n      last_scraped_at: new Date().toISOString()\n    };\n    \n    // Update target with merged data\n    const updatedTruck = await FoodTruckService.updateTruck(targetId, mergedData);\n    \n    // Delete source truck\n    await FoodTruckService.deleteTruck(sourceId);\n    \n    return updatedTruck;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\discoveryEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\firecrawl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\gemini.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\monitoring\\apiMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\bundle-analyzer.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":219,"column":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Bundle Size Analysis and Optimization Utilities\n * Provides insights and recommendations for bundle optimization\n */\n\nexport interface BundleAnalysis {\n  totalSize: number;\n  gzippedSize: number;\n  chunks: Array<{\n    name: string;\n    size: number;\n    modules: string[];\n  }>;\n  recommendations: string[];\n}\n\n/**\n * Bundle optimization recommendations based on analysis\n */\nexport function getBundleOptimizationRecommendations(): string[] {\n  const recommendations = [\n    // Code splitting recommendations\n    \"Implement dynamic imports for admin dashboard components\",\n    \"Split authentication components into separate chunks\",\n    \"Lazy load chart components (Recharts) only when needed\",\n    \n    // Tree shaking recommendations\n    \"Use named imports instead of default imports for UI libraries\",\n    \"Remove unused Lucide React icons\",\n    \"Optimize Radix UI imports to only include used components\",\n    \n    // External dependencies optimization\n    \"Consider replacing Recharts with a lighter charting library for simple charts\",\n    \"Use Next.js Image component instead of external image libraries\",\n    \"Minimize Supabase client bundle size by importing only needed functions\",\n    \n    // Performance optimizations\n    \"Enable gzip compression in production\",\n    \"Use Next.js bundle analyzer to identify large dependencies\",\n    \"Implement service worker for caching static assets\",\n    \n    // Modern JavaScript features\n    \"Use ES2020+ features for smaller bundle sizes\",\n    \"Enable Next.js experimental optimizePackageImports\",\n    \"Consider using SWC minification for better performance\"\n  ];\n  \n  return recommendations;\n}\n\n/**\n * Critical performance metrics for bundle optimization\n */\nexport interface PerformanceBudget {\n  maxBundleSize: number; // in KB\n  maxChunkSize: number; // in KB\n  maxInitialLoad: number; // in KB\n  maxAssetSize: number; // in KB\n}\n\nexport const PERFORMANCE_BUDGETS: PerformanceBudget = {\n  maxBundleSize: 500, // 500KB total bundle\n  maxChunkSize: 200, // 200KB per chunk\n  maxInitialLoad: 300, // 300KB initial load\n  maxAssetSize: 100 // 100KB per asset\n};\n\n/**\n * Check if bundle meets performance budgets\n */\nexport function checkPerformanceBudget(analysis: Partial<BundleAnalysis>): {\n  passed: boolean;\n  violations: Array<{\n    metric: string;\n    actual: number;\n    budget: number;\n    severity: 'warning' | 'error';\n  }>;\n} {\n  const violations: Array<{\n    metric: string;\n    actual: number;\n    budget: number;\n    severity: 'warning' | 'error';\n  }> = [];\n\n  // Check total bundle size\n  if (analysis.totalSize && analysis.totalSize > PERFORMANCE_BUDGETS.maxBundleSize * 1024) {\n    violations.push({\n      metric: 'Total Bundle Size',\n      actual: Math.round(analysis.totalSize / 1024),\n      budget: PERFORMANCE_BUDGETS.maxBundleSize,\n      severity: 'error'\n    });\n  }\n\n  // Check individual chunk sizes\n  if (analysis.chunks) {\n    analysis.chunks.forEach(chunk => {\n      if (chunk.size > PERFORMANCE_BUDGETS.maxChunkSize * 1024) {\n        violations.push({\n          metric: `Chunk Size (${chunk.name})`,\n          actual: Math.round(chunk.size / 1024),\n          budget: PERFORMANCE_BUDGETS.maxChunkSize,\n          severity: 'warning'\n        });\n      }\n    });\n  }\n\n  return {\n    passed: violations.length === 0,\n    violations\n  };\n}\n\n/**\n * Dynamic import utilities for code splitting\n */\nexport const DynamicImports = {\n  // Admin dashboard components\n  AdminDashboard: () => import('@/app/admin/page'),\n  FoodTruckManagement: () => import('@/app/admin/food-trucks/page'),\n  Analytics: () => import('@/app/admin/analytics/page'),\n  \n  // Chart components (heavy dependencies)\n  Charts: () => import('recharts'),\n  \n  // Authentication components\n  LoginPage: () => import('@/app/login/page'),\n  \n  // Map components (if using external map library)\n  MapDisplay: () => import('@/components/MapDisplay'),\n};\n\n/**\n * Optimized imports for common libraries\n */\nexport const OptimizedImports = {\n  // Lucide React - only import needed icons\n  icons: {\n    // Core icons\n    Menu: () => import('lucide-react/dist/esm/icons/menu').then(mod => mod.Menu),\n    Search: () => import('lucide-react/dist/esm/icons/search').then(mod => mod.Search),\n    User: () => import('lucide-react/dist/esm/icons/user').then(mod => mod.User),\n    \n    // Admin icons\n    BarChart3: () => import('lucide-react/dist/esm/icons/bar-chart-3').then(mod => mod.BarChart3),\n    Settings: () => import('lucide-react/dist/esm/icons/settings').then(mod => mod.Settings),\n    Database: () => import('lucide-react/dist/esm/icons/database').then(mod => mod.Database),\n  },\n  \n  // Radix UI - optimized imports\n  ui: {\n    Button: () => import('@radix-ui/react-slot').then(mod => ({ Slot: mod.Slot })),\n    Dialog: () => import('@radix-ui/react-dialog'),\n    DropdownMenu: () => import('@radix-ui/react-dropdown-menu'),\n  }\n};\n\n/**\n * Performance monitoring for bundle loading\n */\nexport class BundlePerformanceMonitor {\n  private static loadTimes = new Map<string, number>();\n  \n  /**\n   * Track chunk load time\n   */\n  static trackChunkLoad(chunkName: string, startTime: number): void {\n    const loadTime = performance.now() - startTime;\n    this.loadTimes.set(chunkName, loadTime);\n    \n    // Log slow loading chunks\n    if (loadTime > 1000) { // More than 1 second\n      console.warn(`Slow chunk load detected: ${chunkName} took ${loadTime.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Get chunk load statistics\n   */\n  static getLoadStats(): Array<{ chunk: string; loadTime: number }> {\n    return Array.from(this.loadTimes.entries()).map(([chunk, loadTime]) => ({\n      chunk,\n      loadTime\n    }));\n  }\n  \n  /**\n   * Get average load time\n   */\n  static getAverageLoadTime(): number {\n    const times = Array.from(this.loadTimes.values());\n    return times.length > 0 ? times.reduce((sum, time) => sum + time, 0) / times.length : 0;\n  }\n}\n\n/**\n * Code splitting helper for React components\n */\nexport function createLazyComponent<T extends React.ComponentType<any>>(\n  importFn: () => Promise<{ default: T }>,\n  fallback?: React.ComponentType\n) {\n  const LazyComponent = React.lazy(importFn);\n  \n  return function WrappedComponent(props: React.ComponentProps<T>) {\n    const startTime = performance.now();\n    \n    React.useEffect(() => {\n      BundlePerformanceMonitor.trackChunkLoad(\n        importFn.toString().slice(0, 50), // Use function string as identifier\n        startTime\n      );\n    }, []);\n    \n    return (\n      <React.Suspense fallback={fallback ? React.createElement(fallback) : <div>Loading...</div>}>\n        <LazyComponent {...props} />\n      </React.Suspense>\n    );\n  };\n}\n\n/**\n * Bundle size recommendations based on current setup\n */\nexport function getProjectSpecificRecommendations(): Array<{\n  category: string;\n  recommendations: string[];\n  priority: 'high' | 'medium' | 'low';\n}> {\n  return [\n    {\n      category: 'Code Splitting',\n      priority: 'high',\n      recommendations: [\n        'Split admin dashboard into separate route chunks',\n        'Lazy load Recharts components only when analytics page is accessed',\n        'Dynamic import authentication components',\n        'Separate map components into their own chunk'\n      ]\n    },\n    {\n      category: 'Dependency Optimization',\n      priority: 'medium',\n      recommendations: [\n        'Use tree-shaking for Lucide React icons',\n        'Optimize Radix UI imports to only include used components',\n        'Consider lighter alternatives to heavy dependencies',\n        'Use Next.js optimizePackageImports for @radix-ui'\n      ]\n    },\n    {\n      category: 'Asset Optimization',\n      priority: 'medium',\n      recommendations: [\n        'Optimize images with Next.js Image component',\n        'Use WebP/AVIF formats for better compression',\n        'Implement proper caching headers for static assets',\n        'Minimize CSS bundle size with unused CSS removal'\n      ]\n    },\n    {\n      category: 'Runtime Optimization',\n      priority: 'low',\n      recommendations: [\n        'Implement service worker for caching',\n        'Use compression middleware in production',\n        'Enable HTTP/2 server push for critical resources',\n        'Implement resource hints (preload, prefetch)'\n      ]\n    }\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\databaseCache.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":127,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":127,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":127,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":127,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":127,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":127,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .slice on an `error` typed value.","line":127,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":131,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":131,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [currentDay] resolves to an `error` typed value.","line":131,"column":49,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":131,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .closed on an `error` typed value.","line":132,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":134,"column":44,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":134,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .open on an `error` typed value.","line":134,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":135,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":135,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .close on an `error` typed value.","line":135,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":141,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":141,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":174,"column":39,"nodeType":"LogicalExpression","messageId":"unsafeReturn","endLine":174,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":176,"column":41,"nodeType":"BinaryExpression","messageId":"unsafeReturn","endLine":176,"endColumn":52}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Database Query Optimization and Caching\n * Implements Next.js unstable_cache for optimal performance\n */\n\nimport { unstable_cache } from 'next/cache';\nimport { supabaseAdmin, FoodTruckService } from '@/lib/supabase';\nimport type { FoodTruck } from '@/lib/types';\n\n// Cache configuration\nconst CACHE_CONFIG = {\n  // Short-term cache for frequently changing data\n  SHORT_TTL: 60 * 5, // 5 minutes\n  // Medium-term cache for semi-static data\n  MEDIUM_TTL: 60 * 30, // 30 minutes\n  // Long-term cache for static data\n  LONG_TTL: 60 * 60 * 24, // 24 hours\n} as const;\n\n/**\n * Cached food truck queries with optimized database access\n */\nexport const CachedFoodTruckService = {\n  /**\n   * Get all food trucks with caching\n   * Cache for 30 minutes since truck data changes moderately\n   */\n  getAllTrucksCached : unstable_cache(\n    async (): Promise<{ trucks: FoodTruck[]; count: number }> => {\n      console.info('CachedFoodTruckService: Cache miss - fetching all trucks from database');\n      return await FoodTruckService.getAllTrucks();\n    },\n    ['all-trucks'],\n    {\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\n      tags: ['food-trucks', 'all-trucks']\n    }\n  ),\n\n  /**\n   * Get trucks by location with caching\n   * Cache for 5 minutes since location-based queries are time-sensitive\n   */\n  getTrucksByLocationCached : unstable_cache(\n    async (lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> => {\n      console.info(`CachedFoodTruckService: Cache miss - fetching trucks near ${lat},${lng} (${radiusKm}km)`);\n      return await FoodTruckService.getTrucksByLocation(lat, lng, radiusKm);\n    },\n    ['trucks-by-location'],\n    {\n      revalidate: CACHE_CONFIG.SHORT_TTL,\n      tags: ['food-trucks', 'location-search']\n    }\n  ),\n\n  /**\n   * Get truck by ID with caching\n   * Cache for 30 minutes since individual truck data is relatively stable\n   */\n  getTruckByIdCached : unstable_cache(\n    async (id: string): Promise<FoodTruck | null> => {\n      console.info(`CachedFoodTruckService: Cache miss - fetching truck ${id} from database`);\n      return await FoodTruckService.getTruckById(id);\n    },\n    ['truck-by-id'],\n    {\n      revalidate: CACHE_CONFIG.MEDIUM_TTL,\n      tags: ['food-trucks', 'truck-details']\n    }\n  ),\n\n  /**\n   * Search trucks with caching\n   * Cache for 5 minutes since search results should be relatively fresh\n   */\n  searchTrucksCached : unstable_cache(\n    async (query: string, filters?: {\n      cuisine?: string;\n      openNow?: boolean;\n      lat?: number;\n      lng?: number;\n      radius?: number;\n    }): Promise<FoodTruck[]> => {\n      console.info(`CachedFoodTruckService: Cache miss - searching trucks for \"${query}\"`);\n      \n      if (!supabaseAdmin) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      let dbQuery = supabaseAdmin\n        .from('food_trucks')\n        .select('*')\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%,cuisine_type.cs.{${query}}`);\n\n      // Apply filters\n      if (filters?.cuisine) {\n        dbQuery = dbQuery.contains('cuisine_type', [filters.cuisine]);\n      }\n\n      const { data: trucks, error } = await dbQuery.limit(50);\n\n      if (error) {\n        throw new Error(`Search query failed: ${error.message}`);\n      }\n\n      let results = trucks || [];\n\n      // Apply location filter if provided\n      if (filters?.lat && filters?.lng && filters?.radius) {\n        results = results.filter((truck: FoodTruck) => {\n          if (!truck.current_location?.lat || !truck.current_location?.lng) {\n            return false;\n          }\n          const distance = calculateDistance(\n            filters.lat!,\n            filters.lng!,\n            truck.current_location.lat,\n            truck.current_location.lng\n          );\n          return distance <= (filters.radius || 10);\n        });\n      }\n\n      // Apply openNow filter if provided\n      if (filters?.openNow) {\n        const now = new Date();\n        const currentDay = now.toLocaleLowerCase().slice(0, 3); // 'mon', 'tue', etc.\n        const currentTime = now.getHours() * 100 + now.getMinutes(); // HHMM format\n\n        results = results.filter((truck: FoodTruck) => {\n          const hours = truck.operating_hours?.[currentDay];\n          if (!hours || hours.closed) return false;\n          \n          const openTime = parseTimeString(hours.open);\n          const closeTime = parseTimeString(hours.close);\n          \n          return currentTime >= openTime && currentTime <= closeTime;\n        });\n      }\n\n      return results;\n    },\n    ['search-trucks'],\n    {\n      revalidate: CACHE_CONFIG.SHORT_TTL,\n      tags: ['food-trucks', 'search']\n    }\n  ),\n\n  /**\n   * Get data quality statistics with caching\n   * Cache for 24 hours since quality stats change slowly\n   */\n  getDataQualityStatsCached : unstable_cache(\n    async (): Promise<{\n      averageScore: number;\n      distribution: Record<string, number>;\n      totalTrucks: number;\n    }> => {\n      console.info('CachedFoodTruckService: Cache miss - calculating data quality stats');\n      \n      if (!supabaseAdmin) {\n        throw new Error('Supabase admin client not available');\n      }\n\n      const { data: trucks, error } = await supabaseAdmin\n        .from('food_trucks')\n        .select('data_quality_score');\n\n      if (error) {\n        throw new Error(`Quality stats query failed: ${error.message}`);\n      }\n\n      const scores = trucks?.map(t => t.data_quality_score || 0) || [];\n      const averageScore = scores.length > 0 \n        ? scores.reduce((sum, score) => sum + score, 0) / scores.length \n        : 0;\n\n      const distribution = {\n        high: scores.filter(s => s >= 0.8).length,\n        medium: scores.filter(s => s >= 0.6 && s < 0.8).length,\n        low: scores.filter(s => s < 0.6).length\n      };\n\n      return {\n        averageScore: Math.round(averageScore * 100) / 100,\n        distribution,\n        totalTrucks: scores.length\n      };\n    },\n    ['data-quality-stats'],\n    {\n      revalidate: CACHE_CONFIG.LONG_TTL,\n      tags: ['food-trucks', 'data-quality']\n    }\n  ),\n};\n\n/**\n * Cache invalidation utilities\n */\nexport const CacheManager = {\n  /**\n   * Invalidate all food truck related caches\n   */\n  async invalidateAllFoodTruckCaches(): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag('food-trucks');\n      console.info('CacheManager: Invalidated all food truck caches');\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate caches:', error);\n    }\n  },\n\n  /**\n   * Invalidate specific truck cache\n   */\n  async invalidateTruckCache(truckId: string): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag(`truck-${truckId}`);\n      revalidateTag('food-trucks'); // Also invalidate general caches\n      console.info(`CacheManager: Invalidated cache for truck ${truckId}`);\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate truck cache:', error);\n    }\n  },\n\n  /**\n   * Invalidate search and location caches\n   */\n  async invalidateSearchCaches(): Promise<void> {\n    try {\n      const { revalidateTag } = await import('next/cache');\n      revalidateTag('search');\n      revalidateTag('location-search');\n      console.info('CacheManager: Invalidated search caches');\n    } catch (error) {\n      console.warn('CacheManager: Failed to invalidate search caches:', error);\n    }\n  },\n};\n\n/**\n * Utility functions\n */\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nfunction parseTimeString(timeStr: string): number {\n  if (!timeStr) return 0;\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  return hours * 100 + (minutes || 0);\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\performance\\webVitals.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":46,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":47,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":47,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .value on an `error` typed value.","line":47,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":48,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":48,"column":50,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":48,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .value on an `error` typed value.","line":48,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":64,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":65,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":65,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .value on an `error` typed value.","line":65,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":66,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":86,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":86,"endColumn":18,"suggestions":[{"fix":{"range":[2688,2744],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":96,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":96,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":97,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":97,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":98,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":98,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":99,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":99,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":100,"column":5,"nodeType":"Identifier","messageId":"unsafeCall","endLine":100,"endColumn":12},{"ruleId":"unicorn/no-null","severity":2,"message":"Use `undefined` instead of `null`.","line":132,"column":17,"nodeType":"Literal","messageId":"error","endLine":132,"endColumn":21,"suggestions":[{"messageId":"replace","fix":{"range":[3920,3924],"text":"undefined"},"data":{},"desc":"Replace `null` with `undefined`."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Core Web Vitals Monitoring Implementation\n * Tracks LCP, FID, CLS, FCP, and TTFB metrics for performance optimization\n */\n\nimport { getCLS, getFCP, getFID, getLCP, getTTFB, Metric } from 'web-vitals';\n\n// Performance thresholds based on Google's Core Web Vitals standards\nexport const PERFORMANCE_THRESHOLDS = {\n  LCP: { good: 2500, needsImprovement: 4000 }, // Largest Contentful Paint\n  FID: { good: 100, needsImprovement: 300 },   // First Input Delay\n  CLS: { good: 0.1, needsImprovement: 0.25 },  // Cumulative Layout Shift\n  FCP: { good: 1800, needsImprovement: 3000 }, // First Contentful Paint\n  TTFB: { good: 800, needsImprovement: 1800 }  // Time to First Byte\n} as const;\n\nexport type MetricName = keyof typeof PERFORMANCE_THRESHOLDS;\n\nexport interface PerformanceMetric {\n  name: MetricName;\n  value: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  timestamp: number;\n  url: string;\n  userAgent: string;\n}\n\n// In-memory storage for metrics (in production, send to analytics service)\nconst metricsStore: PerformanceMetric[] = [];\n\n/**\n * Categorizes metric value based on thresholds\n */\nfunction getRating(name: MetricName, value: number): 'good' | 'needs-improvement' | 'poor' {\n  const thresholds = PERFORMANCE_THRESHOLDS[name];\n  if (value <= thresholds.good) return 'good';\n  if (value <= thresholds.needsImprovement) return 'needs-improvement';\n  return 'poor';\n}\n\n/**\n * Processes and stores a web vital metric\n */\nfunction handleMetric(metric: Metric) {\n  const performanceMetric: PerformanceMetric = {\n    name: metric.name as MetricName,\n    value: metric.value,\n    rating: getRating(metric.name as MetricName, metric.value),\n    timestamp: Date.now(),\n    url: globalThis.location.href,\n    userAgent: navigator.userAgent\n  };\n\n  // Store metric locally\n  metricsStore.push(performanceMetric);\n\n  // Send to analytics endpoint (non-blocking)\n  sendMetricToAnalytics(performanceMetric).catch(error => {\n    console.warn('Failed to send metric to analytics:', error);\n  });\n\n  // Log performance issues\n  if (performanceMetric.rating === 'poor') {\n    console.warn(`Poor ${metric.name} performance:`, {\n      value: metric.value,\n      threshold: PERFORMANCE_THRESHOLDS[metric.name as MetricName],\n      url: performanceMetric.url\n    });\n  }\n}\n\n/**\n * Sends metric data to analytics endpoint\n */\nasync function sendMetricToAnalytics(metric: PerformanceMetric): Promise<void> {\n  try {\n    await fetch('/api/analytics/web-vitals', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(metric),\n    });\n  } catch (error) {\n    // Silently fail - don't impact user experience\n    console.debug('Analytics endpoint unavailable:', error);\n  }\n}\n\n/**\n * Initializes Core Web Vitals monitoring\n * Call this in your app's root component or _app.tsx\n */\nexport function initWebVitalsMonitoring(): void {\n  try {\n    getCLS(handleMetric);\n    getFCP(handleMetric);\n    getFID(handleMetric);\n    getLCP(handleMetric);\n    getTTFB(handleMetric);\n  } catch (error) {\n    console.warn('Failed to initialize web vitals monitoring:', error);\n  }\n}\n\n/**\n * Gets current performance metrics summary\n */\nexport function getPerformanceMetrics(): {\n  metrics: PerformanceMetric[];\n  summary: Record<MetricName, {\n    latest: number | null;\n    average: number;\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\n    count: number;\n  }>;\n} {\n  const summary = {} as Record<MetricName, {\n    latest: number | null;\n    average: number;\n    rating: 'good' | 'needs-improvement' | 'poor' | 'no-data';\n    count: number;\n  }>;\n\n  // Initialize summary for all metrics\n  for (const metricName of Object.keys(PERFORMANCE_THRESHOLDS)) {\n    const name = metricName as MetricName;\n    const metricData = metricsStore.filter(m => m.name === name);\n    \n    if (metricData.length === 0) {\n      summary[name] = {\n        latest: null,\n        average: 0,\n        rating: 'no-data',\n        count: 0\n      };\n    } else {\n      const latest = metricData.at(-1);\n      const average = metricData.reduce((sum, m) => sum + m.value, 0) / metricData.length;\n      \n      summary[name] = {\n        latest: latest.value,\n        average: Math.round(average),\n        rating: getRating(name, average),\n        count: metricData.length\n      };\n    }\n  }\n\n  return {\n    metrics: [...metricsStore],\n    summary\n  };\n}\n\n/**\n * Performance budget checker\n */\nexport function checkPerformanceBudget(): {\n  passed: boolean;\n  violations: Array<{\n    metric: MetricName;\n    value: number;\n    threshold: number;\n    severity: 'warning' | 'critical';\n  }>;\n} {\n  const { summary } = getPerformanceMetrics();\n  const violations: Array<{\n    metric: MetricName;\n    value: number;\n    threshold: number;\n    severity: 'warning' | 'critical';\n  }> = [];\n\n  for (const [metricName, data] of Object.entries(summary)) {\n    const name = metricName as MetricName;\n    if (data.latest === null) continue;\n\n    const thresholds = PERFORMANCE_THRESHOLDS[name];\n    \n    if (data.latest > thresholds.needsImprovement) {\n      violations.push({\n        metric: name,\n        value: data.latest,\n        threshold: thresholds.needsImprovement,\n        severity: 'critical'\n      });\n    } else if (data.latest > thresholds.good) {\n      violations.push({\n        metric: name,\n        value: data.latest,\n        threshold: thresholds.good,\n        severity: 'warning'\n      });\n    }\n  }\n\n  return {\n    passed: violations.length === 0,\n    violations\n  };\n}\n\n/**\n * Performance optimization suggestions based on metrics\n */\nexport function getPerformanceOptimizationSuggestions(): Array<{\n  metric: MetricName;\n  issue: string;\n  suggestions: string[];\n  priority: 'high' | 'medium' | 'low';\n}> {\n  const { summary } = getPerformanceMetrics();\n  const suggestions: Array<{\n    metric: MetricName;\n    issue: string;\n    suggestions: string[];\n    priority: 'high' | 'medium' | 'low';\n  }> = [];\n\n  for (const [metricName, data] of Object.entries(summary)) {\n    const name = metricName as MetricName;\n    if (data.rating === 'poor' || data.rating === 'needs-improvement') {\n      switch (name) {\n        case 'LCP': {\n          suggestions.push({\n            metric: name,\n            issue: `Largest Contentful Paint is ${data.latest}ms (target: <2500ms)`,\n            suggestions: [\n              'Optimize images with Next.js Image component',\n              'Implement lazy loading for non-critical content',\n              'Use CDN for static assets',\n              'Optimize server response times',\n              'Preload critical resources'\n            ],\n            priority: 'high'\n          });\n          break;\n        }\n        case 'FID': {\n          suggestions.push({\n            metric: name,\n            issue: `First Input Delay is ${data.latest}ms (target: <100ms)`,\n            suggestions: [\n              'Reduce JavaScript bundle size',\n              'Implement code splitting',\n              'Use web workers for heavy computations',\n              'Optimize third-party scripts',\n              'Defer non-critical JavaScript'\n            ],\n            priority: 'high'\n          });\n          break;\n        }\n        case 'CLS': {\n          suggestions.push({\n            metric: name,\n            issue: `Cumulative Layout Shift is ${data.latest} (target: <0.1)`,\n            suggestions: [\n              'Set explicit dimensions for images and videos',\n              'Reserve space for dynamic content',\n              'Use CSS aspect-ratio for responsive images',\n              'Avoid inserting content above existing content',\n              'Use transform animations instead of layout changes'\n            ],\n            priority: 'medium'\n          });\n          break;\n        }\n        case 'FCP': {\n          suggestions.push({\n            metric: name,\n            issue: `First Contentful Paint is ${data.latest}ms (target: <1800ms)`,\n            suggestions: [\n              'Optimize critical rendering path',\n              'Inline critical CSS',\n              'Minimize render-blocking resources',\n              'Use resource hints (preload, prefetch)',\n              'Optimize web fonts loading'\n            ],\n            priority: 'medium'\n          });\n          break;\n        }\n        case 'TTFB': {\n          suggestions.push({\n            metric: name,\n            issue: `Time to First Byte is ${data.latest}ms (target: <800ms)`,\n            suggestions: [\n              'Optimize server response times',\n              'Use CDN for global distribution',\n              'Implement server-side caching',\n              'Optimize database queries',\n              'Use edge computing for dynamic content'\n            ],\n            priority: 'high'\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  return suggestions.sort((a, b) => {\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\pipelineProcessor.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.","line":185,"column":23,"nodeType":null,"messageId":"refactorFunction","endLine":185,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":273,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":273,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":273,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":273,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .checkForDuplicates on an `error` typed value.","line":273,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isDuplicate on an `error` typed value.","line":276,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .bestMatch on an `error` typed value.","line":276,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":277,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":277,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .similarity on an `error` typed value.","line":278,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":278,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .existingTruck on an `error` typed value.","line":278,"column":141,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":278,"endColumn":154},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `error` typed value.","line":280,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":280,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .recommendation on an `error` typed value.","line":280,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":280,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":282,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":282,"endColumn":121},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":282,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":282,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mergeDuplicates on an `error` typed value.","line":282,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .existingTruck on an `error` typed value.","line":282,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .existingTruck on an `error` typed value.","line":282,"column":104,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":117},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":283,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":283,"column":97,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .recommendation on an `error` typed value.","line":284,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":284,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":286,"column":52,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":286,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .existingTruck on an `error` typed value.","line":286,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reason on an `error` typed value.","line":291,"column":101,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":291,"endColumn":107},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":298,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":298,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":298,"column":82,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":298,"endColumn":84}],"suppressedMessages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 22 to the 15 allowed.","line":9,"column":23,"nodeType":null,"messageId":"refactorFunction","endLine":9,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { firecrawl } from '@/lib/firecrawl';\nimport { gemini } from '@/lib/gemini';\nimport { ScrapingJobService, FoodTruckService } from '@/lib/supabase';\nimport { ExtractedFoodTruckDetails, FoodTruckSchema, MenuCategory, MenuItem } from './types';\nimport { DuplicatePreventionService } from './data-quality/duplicate-prevention';\n\n// Background job processing function\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport async function processScrapingJob(jobId: string) {\n  try {\n    // Update job status to running\n    const job = await ScrapingJobService.updateJobStatus(jobId, 'running');\n\n    if (!job.target_url) {\n      throw new Error('No target URL specified');\n    }\n\n    // Scrape the website using Firecrawl\n    console.info(`Starting scrape for ${job.target_url}`);\n    const scrapeResult = await firecrawl.scrapeFoodTruckWebsite(job.target_url); // Simplified call\n\n    if (!scrapeResult.success || !scrapeResult.data?.markdown) {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n        errors: [scrapeResult.error || 'Scraping failed or markdown content not found'],\n      });\n      throw new Error(scrapeResult.error || 'Scraping failed or markdown content not found');\n    }\n\n    console.info(`Scraping successful for ${job.target_url}, proceeding to Gemini extraction.`);\n\n    // Call Gemini to extract structured data\n    const geminiResult = await gemini.extractFoodTruckDetailsFromMarkdown(\n      scrapeResult.data.markdown,\n      scrapeResult.data.source_url || job.target_url,\n    );\n\n    if (!geminiResult.success || !geminiResult.data) {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n        errors: [geminiResult.error || 'Gemini data extraction failed'],\n      });\n      throw new Error(geminiResult.error || 'Gemini data extraction failed');\n    }\n\n    console.info(`Gemini extraction successful for ${job.target_url}.`);\n\n    // Update job with structured data from Gemini\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\n      data_collected: geminiResult.data as unknown as Record<string, unknown>, // Cast to unknown first, then to Record<string, unknown>\n      completed_at: new Date().toISOString(),\n    });\n\n    // Create or update FoodTruck entry\n    await createOrUpdateFoodTruck(\n      jobId,\n      geminiResult.data,\n      scrapeResult.data.source_url || job.target_url,\n    );\n\n    // The call to processScrapedData is removed as Gemini now handles full extraction.\n    // The old processScrapedData and processDataQueue can remain for other potential uses or reprocessing.\n\n    console.info(`Scraping job ${jobId} completed successfully and data processed.`);\n  } catch (error: unknown) {\n    // Explicitly type error as unknown\n    console.error(`Scraping job ${jobId} failed:`, error);\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n\n    // Attempt to update job status to failed\n    try {\n      // Check current status to avoid overwriting if already failed in a specific step\n      const currentJobData = await ScrapingJobService.getJobsByStatus('all').then((jobs) =>\n        jobs.find((j) => j.id === jobId),\n      );\n      if (currentJobData && currentJobData.status !== 'failed') {\n        await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n          errors: [errorMessage],\n        });\n      } else if (!currentJobData) {\n        // If job couldn't be fetched, log but proceed to retry logic if appropriate\n        console.error(`Could not fetch job ${jobId} to update status to failed.`);\n      }\n    } catch (statusUpdateError) {\n      console.error(`Error updating job ${jobId} status to failed:`, statusUpdateError);\n    }\n\n    // Increment retry count and potentially retry\n    try {\n      const jobAfterRetryIncrement = await ScrapingJobService.incrementRetryCount(jobId);\n      // Ensure jobAfterRetryIncrement and its properties are valid before using them\n      if (\n        jobAfterRetryIncrement &&\n        typeof jobAfterRetryIncrement.retry_count === 'number' &&\n        typeof jobAfterRetryIncrement.max_retries === 'number'\n      ) {\n        if (jobAfterRetryIncrement.retry_count < jobAfterRetryIncrement.max_retries) {\n          console.info(\n            `Retrying job ${jobId} (attempt ${jobAfterRetryIncrement.retry_count}/${jobAfterRetryIncrement.max_retries})`,\n          );\n          setTimeout(() => {\n            void processScrapingJob(jobId);\n          }, 5000); // Retry after 5 seconds\n        } else {\n          console.warn(`Job ${jobId} reached max retries (${jobAfterRetryIncrement.max_retries}).`);\n        }\n      } else {\n        console.error(\n          `Job ${jobId}: Could not get valid retry_count or max_retries. Won't attempt retry.`,\n        );\n      }\n    } catch (retryIncrementError) {\n      console.error(`Error during retry increment logic for job ${jobId}:`, retryIncrementError);\n    }\n  }\n}\n\n// Helper function to validate input data\nfunction validateTruckData(jobId: string, extractedTruckData: ExtractedFoodTruckDetails): boolean {\n  if (!extractedTruckData || typeof extractedTruckData !== 'object') {\n    console.error(`Job ${jobId}: Invalid extractedTruckData, cannot create/update food truck.`);\n    return false;\n  }\n  return true;\n}\n\n// Helper function to build location data\nfunction buildLocationData(extractedTruckData: ExtractedFoodTruckDetails) {\n  const locationData = extractedTruckData.current_location || {};\n  const fullAddress = [\n    locationData.address,\n    locationData.city,\n    locationData.state,\n    locationData.zip_code,\n  ]\n    .filter(Boolean)\n    .join(', ');\n\n  return {\n    lat: typeof locationData.lat === 'number' ? locationData.lat : 0,\n    lng: typeof locationData.lng === 'number' ? locationData.lng : 0,\n    address: fullAddress || (locationData.raw_text ?? undefined),\n    timestamp: new Date().toISOString(),\n  };\n}\n\n// Helper function to process menu data\nfunction processMenuData(extractedTruckData: ExtractedFoodTruckDetails): MenuCategory[] {\n  if (!Array.isArray(extractedTruckData.menu)) {\n    return [];\n  }\n\n  return extractedTruckData.menu.map((category: unknown): MenuCategory => {\n    const categoryData = category as { items?: unknown[]; category?: string; name?: string };\n    const items = (Array.isArray(categoryData.items) ? categoryData.items : []).map(\n      (item: unknown): MenuItem => {\n        const itemData = item as {\n          name?: string;\n          description?: string;\n          price?: string | number;\n          dietary_tags?: string[];\n        };\n        let price: number | undefined = undefined;\n        if (typeof itemData.price === 'number') {\n          price = itemData.price;\n        } else if (typeof itemData.price === 'string') {\n          const parsedPrice = Number.parseFloat(itemData.price.replaceAll(/[^\\d.-]/g, ''));\n          if (!Number.isNaN(parsedPrice)) {\n            price = parsedPrice;\n          }\n        }\n        return {\n          name: itemData.name || 'Unknown Item',\n          description: itemData.description ?? undefined,\n          price: price,\n          dietary_tags: Array.isArray(itemData.dietary_tags) ? itemData.dietary_tags : [],\n        };\n      },\n    );\n    return {\n      name: categoryData.category || categoryData.name || 'Uncategorized',\n      items: items,\n    };\n  });\n}\n\nexport async function createOrUpdateFoodTruck(\n  jobId: string,\n  extractedTruckData: ExtractedFoodTruckDetails,\n  sourceUrl: string,\n) {\n  try {\n    // Basic input validation\n    if (!validateTruckData(jobId, extractedTruckData)) {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n        errors: ['Invalid extracted data received from AI processing step.'],\n      });\n      return;\n    }\n\n    if (!sourceUrl) {\n      // Log a warning but proceed if sourceUrl is missing, as it might not be critical for all data.\n      console.warn(`Job ${jobId}: Missing sourceUrl for food truck data, proceeding without it.`);\n    }\n\n    const name = extractedTruckData.name || 'Unknown Food Truck'; // Ensure name has a fallback\n    console.info(\n      `Job ${jobId}: Preparing to create/update food truck: ${name} from ${sourceUrl || 'Unknown Source'}`,\n    );\n\n    // Map Gemini output to FoodTruck schema with stricter type checking and defaults\n    const currentLocation = buildLocationData(extractedTruckData);\n\n    const truckData: FoodTruckSchema = {\n      name: name,\n      description: extractedTruckData.description ?? undefined, // Keep as undefined if null/missing\n      current_location: currentLocation,\n      scheduled_locations: Array.isArray(extractedTruckData.scheduled_locations)\n        ? extractedTruckData.scheduled_locations.map((loc) => ({\n            lat: typeof loc.lat === 'number' ? loc.lat : 0,\n            lng: typeof loc.lng === 'number' ? loc.lng : 0,\n            address: loc.address ?? undefined,\n            start_time: loc.start_time ?? undefined,\n            end_time: loc.end_time ?? undefined,\n            timestamp: new Date().toISOString(),\n          }))\n        : undefined,\n      operating_hours: extractedTruckData.operating_hours\n        ? {\n            monday: extractedTruckData.operating_hours.monday ?? { closed: true },\n            tuesday: extractedTruckData.operating_hours.tuesday ?? { closed: true },\n            wednesday: extractedTruckData.operating_hours.wednesday ?? { closed: true },\n            thursday: extractedTruckData.operating_hours.thursday ?? { closed: true },\n            friday: extractedTruckData.operating_hours.friday ?? { closed: true },\n            saturday: extractedTruckData.operating_hours.saturday ?? { closed: true },\n            sunday: extractedTruckData.operating_hours.sunday ?? { closed: true },\n          }\n        : {\n            monday: { closed: true },\n            tuesday: { closed: true },\n            wednesday: { closed: true },\n            thursday: { closed: true },\n            friday: { closed: true },\n            saturday: { closed: true },\n            sunday: { closed: true },\n          },\n      menu: processMenuData(extractedTruckData),\n      contact_info: {\n        phone: extractedTruckData.contact_info?.phone ?? undefined,\n        email: extractedTruckData.contact_info?.email ?? undefined,\n        website: extractedTruckData.contact_info?.website ?? undefined,\n      },\n      social_media: {\n        instagram: extractedTruckData.social_media?.instagram ?? undefined,\n        facebook: extractedTruckData.social_media?.facebook ?? undefined,\n        twitter: extractedTruckData.social_media?.twitter ?? undefined,\n        tiktok: extractedTruckData.social_media?.tiktok ?? undefined,\n        yelp: extractedTruckData.social_media?.yelp ?? undefined,\n      },\n      cuisine_type: Array.isArray(extractedTruckData.cuisine_type)\n        ? extractedTruckData.cuisine_type\n        : [],\n      price_range: extractedTruckData.price_range ?? undefined, // Ensure it's one of the allowed enum values or undefined\n      specialties: Array.isArray(extractedTruckData.specialties)\n        ? extractedTruckData.specialties\n        : [],\n      data_quality_score: 0.5, // Default score - confidence_score not available in type\n      verification_status: 'pending',\n      source_urls: sourceUrl ? [sourceUrl] : [], // Ensure source_urls is always an array\n      last_scraped_at: new Date().toISOString(),\n    };\n\n    // Check for duplicates before creating\n    console.info(`Job ${jobId}: Checking for duplicates before creating truck: ${name}`);\n    const duplicateCheck = await DuplicatePreventionService.checkForDuplicates(truckData);\n\n    let truck;\n    if (duplicateCheck.isDuplicate && duplicateCheck.bestMatch) {\n      const { bestMatch } = duplicateCheck;\n      console.info(`Job ${jobId}: Found potential duplicate (${Math.round(bestMatch.similarity * 100)}% similarity) with truck: ${bestMatch.existingTruck.name}`);\n\n      if (bestMatch.confidence === 'high' && bestMatch.recommendation === 'merge') {\n        // Merge with existing truck\n        truck = await DuplicatePreventionService.mergeDuplicates(bestMatch.existingTruck.id, bestMatch.existingTruck.id);\n        console.info(`Job ${jobId}: Merged data with existing truck: ${truck.name} (ID: ${truck.id})`);\n      } else if (bestMatch.recommendation === 'update') {\n        // Update existing truck with new data\n        truck = await FoodTruckService.updateTruck(bestMatch.existingTruck.id, truckData);\n        console.info(`Job ${jobId}: Updated existing truck: ${truck.name} (ID: ${truck.id})`);\n      } else {\n        // Create new truck but log the potential duplicate\n        truck = await FoodTruckService.createTruck(truckData);\n        console.warn(`Job ${jobId}: Created new truck despite potential duplicate (${duplicateCheck.reason})`);\n      }\n    } else {\n      // No duplicates found, create new truck\n      truck = await FoodTruckService.createTruck(truckData);\n    }\n    console.info(\n      `Job ${jobId}: Successfully created food truck: ${truck.name} (ID: ${truck.id}) from ${sourceUrl || 'Unknown Source'}`,\n    );\n\n    // Link truck_id back to the scraping job\n    await ScrapingJobService.updateJobStatus(jobId, 'completed', {\n      completed_at: new Date().toISOString(),\n    });\n  } catch (error: unknown) {\n    console.error(\n      `Job ${jobId}: Error in createOrUpdateFoodTruck from ${sourceUrl || 'Unknown Source'}:`,\n      error,\n    );\n    // Update the scraping job with this error information\n    try {\n      await ScrapingJobService.updateJobStatus(jobId, 'failed', {\n        errors: [\n          `Food truck data processing/saving failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        ],\n      });\n    } catch (jobUpdateError) {\n      console.error(\n        `Job ${jobId}: Critical error - failed to update job status after data processing failure:`,\n        jobUpdateError,\n      );\n    }\n  }\n}\n\n// Fix type assignment and compatibility errors, replace any with unknown or specific types, and remove unused variables/imports.\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\scheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\auditLogger.ts","messages":[{"ruleId":"sonarjs/use-type-alias","severity":2,"message":"Replace this union type with a type alias.","line":19,"column":13,"nodeType":null,"endLine":19,"endColumn":54},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":72,"column":48,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":72,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":230,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":230,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6151,6154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6151,6154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .event_type on an `any` value.","line":296,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":296,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":296,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":296,"endColumn":71}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Security Audit Logging System\n * Implements comprehensive audit logging for admin actions and security events\n */\n\nimport { supabaseAdmin } from '@/lib/supabase';\n\nexport interface AuditLogEntry {\n  user_id: string;\n  user_email: string;\n  action: string;\n  resource_type: string;\n  resource_id?: string;\n  details?: Record<string, unknown>;\n  ip_address?: string;\n  user_agent?: string;\n  session_id?: string;\n  timestamp: string;\n  severity: 'info' | 'warning' | 'error' | 'critical';\n}\n\nexport interface SecurityEvent {\n  event_type: 'login_attempt' | 'login_success' | 'login_failure' | 'logout' | 'permission_denied' | 'data_access' | 'data_modification' | 'admin_action';\n  user_id?: string;\n  user_email?: string;\n  ip_address?: string;\n  user_agent?: string;\n  details?: Record<string, unknown>;\n  severity: 'info' | 'warning' | 'error' | 'critical';\n}\n\n/**\n * Audit Logger Service\n */\nexport class AuditLogger {\n  /**\n   * Log admin action with full audit trail\n   */\n  static async logAdminAction(\n    userId: string,\n    userEmail: string,\n    action: string,\n    resourceType: string,\n    resourceId?: string,\n    details?: Record<string, unknown>,\n    request?: {\n      ip?: string;\n      userAgent?: string;\n      sessionId?: string;\n    }\n  ): Promise<void> {\n    const auditEntry: AuditLogEntry = {\n      user_id: userId,\n      user_email: userEmail,\n      action,\n      resource_type: resourceType,\n      resource_id: resourceId,\n      details,\n      ip_address: request?.ip,\n      user_agent: request?.userAgent,\n      session_id: request?.sessionId,\n      timestamp: new Date().toISOString(),\n      severity: this.determineSeverity(action, resourceType)\n    };\n\n    await this.writeAuditLog(auditEntry);\n    \n    // Log to console for immediate monitoring\n    console.info('Admin Action Audit:', {\n      user: userEmail,\n      action,\n      resource: `${resourceType}${resourceId ? `:${resourceId}` : ''}`,\n      timestamp: auditEntry.timestamp\n    });\n  }\n\n  /**\n   * Log security event\n   */\n  static async logSecurityEvent(event: SecurityEvent): Promise<void> {\n    const logEntry = {\n      event_type: event.event_type,\n      user_id: event.user_id,\n      user_email: event.user_email,\n      ip_address: event.ip_address,\n      user_agent: event.user_agent,\n      details: event.details,\n      severity: event.severity,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      if (supabaseAdmin) {\n        await supabaseAdmin\n          .from('security_events')\n          .insert(logEntry);\n      }\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n\n    // Always log security events to console\n    console.info('Security Event:', logEntry);\n\n    // Alert on critical security events\n    if (event.severity === 'critical' || event.severity === 'error') {\n      console.warn('SECURITY ALERT:', logEntry);\n    }\n  }\n\n  /**\n   * Log authentication events\n   */\n  static async logAuthEvent(\n    eventType: 'login_attempt' | 'login_success' | 'login_failure' | 'logout',\n    userEmail?: string,\n    userId?: string,\n    request?: {\n      ip?: string;\n      userAgent?: string;\n    },\n    details?: Record<string, unknown>\n  ): Promise<void> {\n    const severity = eventType === 'login_failure' ? 'warning' : 'info';\n    \n    await this.logSecurityEvent({\n      event_type: eventType,\n      user_id: userId,\n      user_email: userEmail,\n      ip_address: request?.ip,\n      user_agent: request?.userAgent,\n      details,\n      severity\n    });\n  }\n\n  /**\n   * Log data access events\n   */\n  static async logDataAccess(\n    userId: string,\n    userEmail: string,\n    resourceType: string,\n    resourceId?: string,\n    action: 'read' | 'search' | 'export' = 'read',\n    request?: {\n      ip?: string;\n      userAgent?: string;\n    }\n  ): Promise<void> {\n    await this.logSecurityEvent({\n      event_type: 'data_access',\n      user_id: userId,\n      user_email: userEmail,\n      ip_address: request?.ip,\n      user_agent: request?.userAgent,\n      details: {\n        resource_type: resourceType,\n        resource_id: resourceId,\n        action\n      },\n      severity: 'info'\n    });\n  }\n\n  /**\n   * Write audit log to database\n   */\n  private static async writeAuditLog(entry: AuditLogEntry): Promise<void> {\n    try {\n      if (supabaseAdmin) {\n        await supabaseAdmin\n          .from('audit_logs')\n          .insert(entry);\n      }\n    } catch (error) {\n      console.error('Failed to write audit log:', error);\n      // Don't throw - audit logging should not break application flow\n    }\n  }\n\n  /**\n   * Determine severity based on action and resource type\n   */\n  private static determineSeverity(action: string, resourceType: string): 'info' | 'warning' | 'error' | 'critical' {\n    // Critical actions\n    if (action.includes('delete') || action.includes('remove')) {\n      return 'critical';\n    }\n    \n    // Warning actions\n    if (action.includes('update') || action.includes('modify') || action.includes('change')) {\n      return 'warning';\n    }\n    \n    // Admin-specific actions\n    if (resourceType === 'user' || resourceType === 'admin' || resourceType === 'system') {\n      return 'warning';\n    }\n    \n    // Default to info\n    return 'info';\n  }\n\n  /**\n   * Get audit logs for a specific user\n   */\n  static async getUserAuditLogs(\n    userId: string,\n    limit: number = 100,\n    offset: number = 0\n  ): Promise<AuditLogEntry[]> {\n    try {\n      if (!supabaseAdmin) {\n        return [];\n      }\n\n      const { data, error } = await supabaseAdmin\n        .from('audit_logs')\n        .select('*')\n        .eq('user_id', userId)\n        .order('timestamp', { ascending: false })\n        .range(offset, offset + limit - 1);\n\n      if (error) {\n        console.error('Failed to fetch user audit logs:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching user audit logs:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get recent security events\n   */\n  static async getRecentSecurityEvents(\n    hours: number = 24,\n    severity?: 'info' | 'warning' | 'error' | 'critical'\n  ): Promise<any[]> {\n    try {\n      if (!supabaseAdmin) {\n        return [];\n      }\n\n      const startTime = new Date();\n      startTime.setHours(startTime.getHours() - hours);\n\n      let query = supabaseAdmin\n        .from('security_events')\n        .select('*')\n        .gte('timestamp', startTime.toISOString())\n        .order('timestamp', { ascending: false });\n\n      if (severity) {\n        query = query.eq('severity', severity);\n      }\n\n      const { data, error } = await query.limit(500);\n\n      if (error) {\n        console.error('Failed to fetch security events:', error);\n        return [];\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching security events:', error);\n      return [];\n    }\n  }\n}\n\n/**\n * Security monitoring utilities\n */\nexport const SecurityMonitor = {\n  /**\n   * Check for suspicious activity patterns\n   */\n  async checkSuspiciousActivity(userId: string): Promise<{\n    suspicious: boolean;\n    reasons: string[];\n    riskLevel: 'low' | 'medium' | 'high';\n  }> {\n    const reasons: string[] = [];\n    let riskLevel: 'low' | 'medium' | 'high' = 'low';\n\n    try {\n      // Check recent failed login attempts\n      const recentEvents = await AuditLogger.getRecentSecurityEvents(1, 'warning');\n      const failedLogins = recentEvents.filter(\n        event => event.event_type === 'login_failure' && event.user_id === userId\n      );\n\n      if (failedLogins.length > 5) {\n        reasons.push('Multiple failed login attempts');\n        riskLevel = 'high';\n      } else if (failedLogins.length > 2) {\n        reasons.push('Recent failed login attempts');\n        riskLevel = 'medium';\n      }\n\n      // Check for unusual access patterns\n      const auditLogs = await AuditLogger.getUserAuditLogs(userId, 50);\n      const recentActions = auditLogs.filter(\n        log => new Date(log.timestamp) > new Date(Date.now() - 60 * 60 * 1000) // Last hour\n      );\n\n      if (recentActions.length > 20) {\n        reasons.push('High activity volume');\n        riskLevel = riskLevel === 'high' ? 'high' : 'medium';\n      }\n\n      return {\n        suspicious: reasons.length > 0,\n        reasons,\n        riskLevel\n      };\n    } catch (error) {\n      console.error('Error checking suspicious activity:', error);\n      return {\n        suspicious: false,\n        reasons: [],\n        riskLevel: 'low'\n      };\n    }\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\security\\rate-limiter.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `rateLimiter.ts` or `RateLimiter.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RateLimitConfig' is defined but never used.","line":13,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":298,"column":72,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":298,"endColumn":105}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Rate Limiting Implementation\n * Prevents brute force attacks and API abuse with intelligent rate limiting\n */\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  blocked: boolean;\n  blockUntil?: number;\n}\n\ninterface RateLimitConfig {\n  windowMs: number;\n  maxRequests: number;\n  blockDurationMs: number;\n  skipSuccessfulRequests?: boolean;\n}\n\n// In-memory rate limit store (in production, use Redis)\nconst rateLimitStore = new Map<string, RateLimitEntry>();\n\n// Rate limit configurations for different endpoints\nexport const RATE_LIMIT_CONFIGS = {\n  // Authentication endpoints - strict limits\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5, // 5 attempts per 15 minutes\n    blockDurationMs: 30 * 60 * 1000, // Block for 30 minutes\n    skipSuccessfulRequests: true\n  },\n  // API endpoints - moderate limits\n  api: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 60, // 60 requests per minute\n    blockDurationMs: 5 * 60 * 1000, // Block for 5 minutes\n    skipSuccessfulRequests: false\n  },\n  // Admin endpoints - very strict limits\n  admin: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 20, // 20 requests per minute\n    blockDurationMs: 15 * 60 * 1000, // Block for 15 minutes\n    skipSuccessfulRequests: false\n  }\n} as const;\n\nexport type RateLimitType = keyof typeof RATE_LIMIT_CONFIGS;\n\n/**\n * Rate Limiter Service\n */\nexport class RateLimiter {\n  /**\n   * Check if request should be rate limited\n   */\n  static checkRateLimit(\n    identifier: string,\n    type: RateLimitType = 'api'\n  ): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    \n    // Clean up expired entries\n    this.cleanupExpiredEntries();\n    \n    let entry = rateLimitStore.get(key);\n    \n    // Initialize entry if it doesn't exist\n    if (!entry) {\n      entry = {\n        count: 0,\n        resetTime: now + config.windowMs,\n        blocked: false\n      };\n      rateLimitStore.set(key, entry);\n    }\n    \n    // Check if currently blocked\n    if (entry.blocked && entry.blockUntil && now < entry.blockUntil) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000)\n      };\n    }\n    \n    // Reset window if expired\n    if (now >= entry.resetTime) {\n      entry.count = 0;\n      entry.resetTime = now + config.windowMs;\n      entry.blocked = false;\n      entry.blockUntil = undefined;\n    }\n    \n    // Check if limit exceeded\n    if (entry.count >= config.maxRequests) {\n      entry.blocked = true;\n      entry.blockUntil = now + config.blockDurationMs;\n      \n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil(config.blockDurationMs / 1000)\n      };\n    }\n    \n    // Increment counter\n    entry.count++;\n    rateLimitStore.set(key, entry);\n    \n    return {\n      allowed: true,\n      remaining: config.maxRequests - entry.count,\n      resetTime: entry.resetTime\n    };\n  }\n  \n  /**\n   * Record successful request (for auth endpoints)\n   */\n  static recordSuccess(identifier: string, type: RateLimitType = 'api'): void {\n    const config = RATE_LIMIT_CONFIGS[type];\n    if (!config.skipSuccessfulRequests) return;\n    \n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n    \n    if (entry) {\n      // Reset counter on successful auth\n      entry.count = 0;\n      entry.blocked = false;\n      entry.blockUntil = undefined;\n      rateLimitStore.set(key, entry);\n    }\n  }\n  \n  /**\n   * Get rate limit status without incrementing\n   */\n  static getStatus(\n    identifier: string,\n    type: RateLimitType = 'api'\n  ): {\n    remaining: number;\n    resetTime: number;\n    blocked: boolean;\n    retryAfter?: number;\n  } {\n    const config = RATE_LIMIT_CONFIGS[type];\n    const now = Date.now();\n    const key = `${type}:${identifier}`;\n    const entry = rateLimitStore.get(key);\n    \n    if (!entry) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false\n      };\n    }\n    \n    // Check if blocked\n    if (entry.blocked && entry.blockUntil && now < entry.blockUntil) {\n      return {\n        remaining: 0,\n        resetTime: entry.resetTime,\n        blocked: true,\n        retryAfter: Math.ceil((entry.blockUntil - now) / 1000)\n      };\n    }\n    \n    // Check if window expired\n    if (now >= entry.resetTime) {\n      return {\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        blocked: false\n      };\n    }\n    \n    return {\n      remaining: Math.max(0, config.maxRequests - entry.count),\n      resetTime: entry.resetTime,\n      blocked: false\n    };\n  }\n  \n  /**\n   * Clean up expired entries to prevent memory leaks\n   */\n  private static cleanupExpiredEntries(): void {\n    const now = Date.now();\n    \n    for (const [key, entry] of rateLimitStore.entries()) {\n      // Remove entries that are expired and not blocked\n      if (now >= entry.resetTime && (!entry.blocked || !entry.blockUntil || now >= entry.blockUntil)) {\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n  \n  /**\n   * Clear all rate limit data for an identifier\n   */\n  static clearLimits(identifier: string, type?: RateLimitType): void {\n    if (type) {\n      const key = `${type}:${identifier}`;\n      rateLimitStore.delete(key);\n    } else {\n      // Clear all types for this identifier\n      for (const limitType of Object.keys(RATE_LIMIT_CONFIGS)) {\n        const key = `${limitType}:${identifier}`;\n        rateLimitStore.delete(key);\n      }\n    }\n  }\n  \n  /**\n   * Get rate limit statistics\n   */\n  static getStats(): {\n    totalEntries: number;\n    blockedEntries: number;\n    entriesByType: Record<string, number>;\n  } {\n    const stats = {\n      totalEntries: rateLimitStore.size,\n      blockedEntries: 0,\n      entriesByType: {} as Record<string, number>\n    };\n    \n    for (const [key, entry] of rateLimitStore.entries()) {\n      const type = key.split(':')[0];\n      stats.entriesByType[type] = (stats.entriesByType[type] || 0) + 1;\n      \n      if (entry.blocked) {\n        stats.blockedEntries++;\n      }\n    }\n    \n    return stats;\n  }\n}\n\n/**\n * Utility function to get client identifier from request\n */\nexport function getClientIdentifier(request: Request): string {\n  // Try to get IP address from various headers\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const cfConnectingIp = request.headers.get('cf-connecting-ip');\n  \n  // Use the first available IP\n  const ip = forwarded?.split(',')[0]?.trim() || realIp || cfConnectingIp || 'unknown';\n  \n  // Include user agent for more specific identification\n  const userAgent = request.headers.get('user-agent') || 'unknown';\n  \n  // Create a hash of IP + User Agent for better identification\n  return `${ip}:${userAgent.slice(0, 50)}`;\n}\n\n/**\n * Rate limiting middleware for API routes\n */\nexport function withRateLimit(\n  handler: (request: Request) => Promise<Response>,\n  type: RateLimitType = 'api'\n) {\n  return async (request: Request): Promise<Response> => {\n    const identifier = getClientIdentifier(request);\n    const result = RateLimiter.checkRateLimit(identifier, type);\n    \n    if (!result.allowed) {\n      const headers = new Headers({\n        'X-RateLimit-Limit': RATE_LIMIT_CONFIGS[type].maxRequests.toString(),\n        'X-RateLimit-Remaining': '0',\n        'X-RateLimit-Reset': new Date(result.resetTime).toISOString(),\n      });\n      \n      if (result.retryAfter) {\n        headers.set('Retry-After', result.retryAfter.toString());\n      }\n      \n      return new Response(\n        JSON.stringify({\n          error: 'Rate limit exceeded',\n          message: `Too many requests. Try again ${result.retryAfter ? `in ${result.retryAfter} seconds` : 'later'}.`,\n          retryAfter: result.retryAfter\n        }),\n        {\n          status: 429,\n          headers: {\n            'Content-Type': 'application/json',\n            ...Object.fromEntries(headers.entries())\n          }\n        }\n      );\n    }\n    \n    // Add rate limit headers to successful responses\n    const response = await handler(request);\n    \n    response.headers.set('X-RateLimit-Limit', RATE_LIMIT_CONFIGS[type].maxRequests.toString());\n    response.headers.set('X-RateLimit-Remaining', result.remaining.toString());\n    response.headers.set('X-RateLimit-Reset', new Date(result.resetTime).toISOString());\n    \n    return response;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabase.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 107 to the 15 allowed.","line":648,"column":3,"nodeType":null,"messageId":"refactorFunction","endLine":648,"endColumn":24},{"ruleId":"sonarjs/single-char-in-character-classes","severity":2,"message":"Replace this character class by the character itself.","line":768,"column":30,"nodeType":null,"messageId":"issue","endLine":768,"endColumn":34},{"ruleId":"sonarjs/single-char-in-character-classes","severity":2,"message":"Replace this character class by the character itself.","line":768,"column":40,"nodeType":null,"messageId":"issue","endLine":768,"endColumn":44},{"ruleId":"sonarjs/slow-regex","severity":2,"message":"Make sure the regex used here, which is vulnerable to super-linear runtime due to backtracking, cannot lead to denial of service.","line":782,"column":28,"nodeType":"Literal","endLine":782,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":881,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":881,"endColumn":53},{"ruleId":"sonarjs/no-nested-conditional","severity":2,"message":"Extract this nested ternary operation into an independent statement.","line":930,"column":27,"nodeType":"ConditionalExpression","messageId":"extractTernary","endLine":930,"endColumn":81}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createClient,\n  type PostgrestSingleResponse,\n  type PostgrestResponse,\n} from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL environment variable');\n}\n\nif (!supabaseAnonKey) {\n  throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Only create admin client on server side where service key is available\nexport const supabaseAdmin = supabaseServiceKey\n  ? createClient(supabaseUrl, supabaseServiceKey)\n  : undefined;\n\n// Database types\nimport {\n  MenuCategory,\n  MenuItem,\n  OperatingHours,\n  PriceRange,\n  ExtractedFoodTruckDetails,\n} from './types';\n\nexport interface FoodTruckLocation {\n  lat?: number;\n  lng?: number;\n  address?: string;\n  timestamp: string;\n}\n\n// Re-exporting from types.ts to ensure consistency\n\nexport interface FoodTruck {\n  id: string;\n  name: string;\n  description?: string;\n  current_location: FoodTruckLocation;\n  scheduled_locations?: ExtractedFoodTruckDetails['scheduled_locations']; // Use type from types.ts\n  operating_hours?: OperatingHours; // Use type from types.ts\n  menu?: MenuCategory[]; // Use type from types.ts\n  contact_info?: ExtractedFoodTruckDetails['contact_info']; // Use type from types.ts\n  social_media?: ExtractedFoodTruckDetails['social_media']; // Use type from types.ts\n  cuisine_type?: string[];\n  price_range?: PriceRange; // Use type from types.ts\n  specialties?: string[];\n  data_quality_score?: number;\n  verification_status: 'pending' | 'verified' | 'flagged' | 'rejected';\n  source_urls?: string[];\n  created_at: string;\n  updated_at: string;\n  last_scraped_at?: string;\n  exact_location?: FoodTruckLocation;\n  city_location?: FoodTruckLocation;\n}\n\nexport interface ScrapingJob {\n  id: string;\n  job_type: string;\n  target_url?: string;\n  target_handle?: string;\n  platform?: string;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  priority: number;\n  scheduled_at: string;\n  started_at?: string;\n  completed_at?: string;\n  data_collected?: Record<string, unknown>;\n  errors?: string[];\n  retry_count: number;\n  max_retries: number;\n  created_at: string;\n}\n\nexport interface DataProcessingQueue {\n  id: string;\n  truck_id?: string;\n  processing_type: string;\n  raw_data: Record<string, unknown>;\n  processed_data?: Record<string, unknown>;\n  gemini_tokens_used: number;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  priority: number;\n  created_at: string;\n  processed_at?: string;\n}\n\nexport interface ApiUsage {\n  id: string;\n  service_name: string;\n  usage_date: string;\n  requests_count: number;\n  tokens_used: number;\n}\n\n// Food truck operations\nexport const FoodTruckService = {\n  async getAllTrucks(limit = 50, offset = 0): Promise<{ trucks: FoodTruck[]; total: number }> {\n    try {\n      const { data, error, count }: PostgrestResponse<FoodTruck> = await supabase\n        .from('food_trucks')\n        .select('*', { count: 'exact' })\n        .order('updated_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n\n      if (error) throw error;\n      const trucks: FoodTruck[] = (data || []).map((t: FoodTruck) => normalizeTruckLocation(t));\n\n      const truckIds = trucks.map((t) => t.id);\n      let menuItems: {\n        food_truck_id: string;\n        name: string;\n        description: string;\n        price: number;\n        dietary_tags: string[];\n      }[] = [];\n      if (truckIds.length > 0) {\n        const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> =\n          await supabase.from('menu_items').select('*').in('food_truck_id', truckIds);\n        if (menuError) throw menuError;\n        menuItems = (items as typeof menuItems) || [];\n      }\n\n      const menuByTruck: Record<string, typeof menuItems> = {};\n      for (const item of menuItems) {\n        if (!menuByTruck[item.food_truck_id]) {\n          menuByTruck[item.food_truck_id] = [];\n        }\n        menuByTruck[item.food_truck_id].push(item);\n      }\n\n      for (const truck of trucks) {\n        truck.menu = groupMenuItems(menuByTruck[truck.id] || []);\n      }\n      return { trucks, total: count || 0 };\n    } catch (error: unknown) {\n      console.warn('Error fetching trucks:', error);\n      return { trucks: [], total: 0 };\n    }\n  },\n  async getTruckById(id: string): Promise<FoodTruck> {\n    const { data, error }: PostgrestSingleResponse<FoodTruck> = await supabase\n      .from('food_trucks')\n      .select('*')\n      .eq('id', id)\n      .single();\n    if (error) throw error;\n    const truck: FoodTruck = normalizeTruckLocation(data);\n    const { data: items, error: menuError }: PostgrestResponse<RawMenuItemFromDB> = await supabase\n      .from('menu_items')\n      .select('*')\n      .eq('food_truck_id', id);\n    if (menuError) throw menuError;\n    truck.menu = groupMenuItems(items || []);\n    return truck;\n  },\n\n  async getTrucksByLocation(lat: number, lng: number, radiusKm: number): Promise<FoodTruck[]> {\n    try {\n      const { trucks } = await FoodTruckService.getAllTrucks();\n      const nearbyTrucks = trucks.filter((truck) => {\n        if (\n          !truck.current_location ||\n          typeof truck.current_location.lat !== 'number' ||\n          typeof truck.current_location.lng !== 'number'\n        ) {\n          return false;\n        }\n        const distance = calculateDistance(\n          lat,\n          lng,\n          truck.current_location.lat,\n          truck.current_location.lng,\n        );\n        return distance <= radiusKm;\n      });\n      return nearbyTrucks;\n    } catch (error: unknown) {\n      console.warn('Error fetching trucks by location:', error);\n      return [];\n    }\n  },\n  async createTruck(truckData: Partial<FoodTruck>): Promise<FoodTruck> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    // Extract menu data before inserting truck\n    const menuData = truckData.menu;\n    const truckDataWithoutMenu = { ...truckData };\n    delete truckDataWithoutMenu.menu;\n\n    // Insert truck first\n    const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n      .from('food_trucks')\n      .insert([truckDataWithoutMenu])\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    // Insert menu items if they exist\n    if (menuData && menuData.length > 0 && truck.id) {\n      const menuItems = menuData.flatMap((category) =>\n        (category.items || []).map((item) => ({\n          food_truck_id: truck.id,\n          category: category.name || 'Uncategorized',\n          name: item.name || 'Unknown Item',\n          description: item.description || undefined,\n          price: typeof item.price === 'number' ? item.price : undefined,\n          dietary_tags: item.dietary_tags || [],\n        })),\n      );\n\n      if (menuItems.length > 0) {\n        const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\n\n        if (menuError) {\n          console.error('Error inserting menu items for truck', truck.id, menuError);\n          // Don't throw here - truck creation succeeded, menu insertion failed\n        }\n      }\n    }\n\n    return truck;\n  },\n  async updateTruck(id: string, updates: Partial<FoodTruck>): Promise<FoodTruck> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    // Extract menu data before updating truck\n    const menuData = updates.menu;\n    const updatesWithoutMenu = { ...updates };\n    delete updatesWithoutMenu.menu;\n\n    // Update truck first\n    const truck = await updateTruckData(id, updatesWithoutMenu);\n\n    // Update menu items if provided\n    if (menuData !== undefined) {\n      await updateTruckMenu(id, menuData);\n    }\n\n    return truck;\n  },\n\n  async getDataQualityStats(): Promise<{\n    total_trucks: number;\n    avg_quality_score: number;\n    high_quality_count: number;\n    medium_quality_count: number;\n    low_quality_count: number;\n    verified_count: number;\n    pending_count: number;\n    flagged_count: number;\n  }> {\n    try {\n      const {\n        data,\n        error,\n      }: PostgrestSingleResponse<{\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      }> = await supabase.rpc('get_data_quality_stats').single();\n      if (error) throw error;\n      return data as {\n        total_trucks: number;\n        avg_quality_score: number;\n        high_quality_count: number;\n        medium_quality_count: number;\n        low_quality_count: number;\n        verified_count: number;\n        pending_count: number;\n        flagged_count: number;\n      };\n    } catch (error: unknown) {\n      console.warn('Error fetching data quality stats:', error);\n      return {\n        total_trucks: 0,\n        avg_quality_score: 0,\n        high_quality_count: 0,\n        medium_quality_count: 0,\n        low_quality_count: 0,\n        verified_count: 0,\n        pending_count: 0,\n        flagged_count: 0,\n      };\n    }\n  },\n};\n\n// Helper functions to reduce cognitive complexity\nasync function updateTruckData(\n  id: string,\n  updatesWithoutMenu: Partial<FoodTruck>,\n): Promise<FoodTruck> {\n  if (!supabaseAdmin) {\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n  }\n\n  const { data: truck, error }: PostgrestSingleResponse<FoodTruck> = await supabaseAdmin\n    .from('food_trucks')\n    .update(updatesWithoutMenu)\n    .eq('id', id)\n    .select()\n    .single();\n\n  if (error) throw error;\n  return truck;\n}\n\nasync function updateTruckMenu(id: string, menuData: MenuCategory[]): Promise<void> {\n  if (!supabaseAdmin) {\n    throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n  }\n\n  // Delete existing menu items\n  const { error: deleteError } = await supabaseAdmin\n    .from('menu_items')\n    .delete()\n    .eq('food_truck_id', id);\n\n  if (deleteError) {\n    console.error('Error deleting existing menu items for truck', id, deleteError);\n  }\n\n  // Insert new menu items if they exist\n  if (menuData && menuData.length > 0) {\n    const menuItems = menuData.flatMap((category) =>\n      (category.items || []).map((item) => ({\n        food_truck_id: id,\n        category: category.name || 'Uncategorized',\n        name: item.name || 'Unknown Item',\n        description: item.description || undefined,\n        price: typeof item.price === 'number' ? item.price : undefined,\n        dietary_tags: item.dietary_tags || [],\n      })),\n    );\n\n    if (menuItems.length > 0) {\n      const { error: menuError } = await supabaseAdmin.from('menu_items').insert(menuItems);\n\n      if (menuError) {\n        console.error('Error inserting updated menu items for truck', id, menuError);\n      }\n    }\n  }\n}\n\nfunction calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6371;\n  const dLat = ((lat2 - lat1) * Math.PI) / 180;\n  const dLon = ((lon2 - lon1) * Math.PI) / 180;\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos((lat1 * Math.PI) / 180) *\n      Math.cos((lat2 * Math.PI) / 180) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance;\n}\n\n// Define a helper type for items coming from the DB, which might include a category field\ninterface RawMenuItemFromDB {\n  name: string;\n  description?: string;\n  price?: number;\n  dietary_tags?: string[];\n  category?: string; // This field is expected from the DB query\n  // Potentially other fields like id, food_truck_id, etc.\n  [key: string]: unknown; // Allow other properties from DB select *\n}\n\nfunction groupMenuItems(rawItems: RawMenuItemFromDB[]): MenuCategory[] {\n  const byCategory: Record<string, MenuItem[]> = {}; // Stores processed MenuItems\n  for (const rawItem of rawItems) {\n    const categoryName: string = rawItem.category || 'Uncategorized';\n    if (!byCategory[categoryName]) {\n      byCategory[categoryName] = [];\n    }\n    // Construct a MenuItem conforming to the MenuItem interface (no 'category' property)\n    const menuItem: MenuItem = {\n      name: rawItem.name,\n      // Use nullish coalescing to convert null from DB to undefined for the MenuItem type\n      description: rawItem.description ?? undefined,\n      price: rawItem.price ?? undefined,\n      dietary_tags: rawItem.dietary_tags ?? [], // Default to empty array if null/undefined\n    };\n    byCategory[categoryName].push(menuItem);\n  }\n  // Map to MenuCategory structure { name: string, items: MenuItem[] }\n  return Object.entries(byCategory).map(([categoryName, itemsList]) => ({\n    name: categoryName, // 'name' here refers to the category's name\n    items: itemsList,\n  }));\n}\n\nfunction normalizeTruckLocation(truck: FoodTruck): FoodTruck {\n  const fallback: FoodTruckLocation = {\n    lat: undefined,\n    lng: undefined,\n    address: 'Unknown',\n    timestamp: new Date().toISOString(),\n  };\n  const loc = truck.exact_location || truck.current_location || truck.city_location || {};\n  const lat = loc.lat ?? undefined;\n  const lng = loc.lng ?? undefined;\n  const address = loc.address;\n  const timestamp = loc.timestamp;\n\n  truck.current_location =\n    typeof lat !== 'number' || typeof lng !== 'number' || (lat === 0 && lng === 0)\n      ? { ...fallback, address: address || fallback.address }\n      : {\n          lat,\n          lng,\n          address: address || fallback.address,\n          timestamp: timestamp || fallback.timestamp,\n        };\n  return truck;\n}\n\nexport const ScrapingJobService = {\n  async createJob(jobData: Partial<ScrapingJob>): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .insert([\n        {\n          ...jobData,\n          status: 'pending',\n          retry_count: 0,\n          max_retries: 3,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getJobsByStatus(status: string): Promise<ScrapingJob[]> {\n    try {\n      const query =\n        status === 'all'\n          ? supabase.from('scraping_jobs').select('*')\n          : supabase.from('scraping_jobs').select('*').eq('status', status);\n\n      const { data, error }: PostgrestResponse<ScrapingJob> = await query\n        .order('priority', { ascending: false })\n        .order('scheduled_at', { ascending: true });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs:', error);\n      return [];\n    }\n  },\n  async updateJobStatus(\n    id: string,\n    status: string,\n    updates: Partial<ScrapingJob> = {},\n  ): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({\n        status,\n        ...updates,\n        ...(status === 'running' && { started_at: new Date().toISOString() }),\n        ...(status === 'completed' && { completed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n    if (error) throw error;\n    return data;\n  },\n  async incrementRetryCount(id: string): Promise<ScrapingJob> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const {\n      data: current,\n      error: fetchError,\n    }: PostgrestSingleResponse<Pick<ScrapingJob, 'retry_count'>> = await supabaseAdmin\n      .from('scraping_jobs')\n      .select('retry_count')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) throw fetchError;\n\n    const { data, error }: PostgrestSingleResponse<ScrapingJob> = await supabaseAdmin\n      .from('scraping_jobs')\n      .update({ retry_count: (current?.retry_count || 0) + 1 })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getAllJobs(limit = 50, offset = 0): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n\n      if (error) throw error;\n      return data || [];\n    } catch (error: unknown) {\n      console.warn('Error fetching all jobs:', error);\n      return [];\n    }\n  },\n\n  async getJobsFromDate(fromDate: Date): Promise<ScrapingJob[]> {\n    try {\n      const { data, error }: PostgrestResponse<ScrapingJob> = await supabase\n        .from('scraping_jobs')\n        .select('*')\n        .gte('created_at', fromDate.toISOString())\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error: unknown) {\n      console.warn('Error fetching jobs from date:', error);\n      return [];\n    }\n  },\n};\n\nexport const DataProcessingService = {\n  async addToQueue(queueData: Partial<DataProcessingQueue>): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .insert([\n        {\n          ...queueData,\n          status: 'pending',\n          gemini_tokens_used: 0,\n          created_at: new Date().toISOString(),\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async getNextQueueItem(): Promise<DataProcessingQueue | undefined> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .select('*')\n      .eq('status', 'pending')\n      .order('priority', { ascending: false })\n      .order('created_at', { ascending: true })\n      .limit(1)\n      .single();\n\n    if (error && error.code !== 'PGRST116') throw error;\n    return data ?? undefined;\n  },\n\n  async getQueueByStatus(status: string): Promise<DataProcessingQueue[]> {\n    try {\n      const { data, error }: PostgrestResponse<DataProcessingQueue> = await supabase\n        .from('data_processing_queue')\n        .select('*')\n        .eq('status', status)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error: unknown) {\n      console.warn('Error fetching queue:', error);\n      return [];\n    }\n  },\n  async updateQueueItem(\n    id: string,\n    updates: Partial<DataProcessingQueue>,\n  ): Promise<DataProcessingQueue> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { data, error }: PostgrestSingleResponse<DataProcessingQueue> = await supabaseAdmin\n      .from('data_processing_queue')\n      .update({\n        ...updates,\n        ...(updates.status === 'completed' && { processed_at: new Date().toISOString() }),\n      })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n};\n\nexport const DataQualityService = {\n  // SOTA Data Quality Scoring Algorithm\n  calculateQualityScore(truck: FoodTruck): { score: number; breakdown: Record<string, number>; issues: string[] } {\n    const breakdown: Record<string, number> = {};\n    const issues: string[] = [];\n    let totalScore = 0;\n    let maxPossibleScore = 0;\n\n    // Core Data Completeness (40% weight)\n    const coreWeight = 0.4;\n    let coreScore = 0;\n    const coreMaxScore = 100;\n\n    // Name quality (10 points)\n    if (truck.name && truck.name.trim().length > 0) {\n      if (truck.name.length >= 3 && truck.name.length <= 50) {\n        coreScore += 10;\n      } else if (truck.name.length > 0) {\n        coreScore += 5;\n        issues.push('Truck name length suboptimal');\n      }\n    } else {\n      issues.push('Missing truck name');\n    }\n\n    // Description quality (15 points)\n    if (truck.description && truck.description.trim().length > 0) {\n      if (truck.description.length >= 20 && truck.description.length <= 500) {\n        coreScore += 15;\n      } else if (truck.description.length >= 10) {\n        coreScore += 10;\n        issues.push('Description could be more detailed');\n      } else {\n        coreScore += 5;\n        issues.push('Description too brief');\n      }\n    } else {\n      issues.push('Missing description');\n    }\n\n    // Cuisine type quality (15 points)\n    if (truck.cuisine_type && Array.isArray(truck.cuisine_type) && truck.cuisine_type.length > 0) {\n      if (truck.cuisine_type.length > 0 && truck.cuisine_type.length <= 3) {\n        coreScore += 15;\n      } else if (truck.cuisine_type.length > 3) {\n        coreScore += 10;\n        issues.push('Too many cuisine types listed');\n      }\n    } else {\n      issues.push('Missing cuisine type information');\n    }\n\n    breakdown.core_data = (coreScore / coreMaxScore) * coreWeight * 100;\n    totalScore += breakdown.core_data;\n    maxPossibleScore += coreWeight * 100;\n\n    // Location Data Quality (25% weight)\n    const locationWeight = 0.25;\n    let locationScore = 0;\n    const locationMaxScore = 100;\n\n    if (truck.current_location) {\n      // Address completeness (40 points)\n      if (truck.current_location.address && truck.current_location.address.trim().length > 0) {\n        if (truck.current_location.address.includes(',') && truck.current_location.address.length > 10) {\n          locationScore += 40;\n        } else {\n          locationScore += 20;\n          issues.push('Address lacks detail');\n        }\n      } else {\n        issues.push('Missing address information');\n      }\n\n      // GPS coordinates (40 points)\n      if (truck.current_location.lat && truck.current_location.lng) {\n        if (truck.current_location.lat !== 0 && truck.current_location.lng !== 0) {\n          locationScore += 40;\n        } else {\n          issues.push('Invalid GPS coordinates (0,0)');\n        }\n      } else {\n        issues.push('Missing GPS coordinates');\n      }\n\n      // Timestamp freshness (20 points)\n      if (truck.current_location.timestamp) {\n        const locationAge = Date.now() - new Date(truck.current_location.timestamp).getTime();\n        const daysSinceUpdate = locationAge / (1000 * 60 * 60 * 24);\n\n        if (daysSinceUpdate <= 1) {\n          locationScore += 20;\n        } else if (daysSinceUpdate <= 7) {\n          locationScore += 15;\n          issues.push('Location data is over 1 day old');\n        } else if (daysSinceUpdate <= 30) {\n          locationScore += 10;\n          issues.push('Location data is over 1 week old');\n        } else {\n          locationScore += 5;\n          issues.push('Location data is very stale (>30 days)');\n        }\n      } else {\n        issues.push('Missing location timestamp');\n      }\n    } else {\n      issues.push('Missing location data entirely');\n    }\n\n    breakdown.location_data = (locationScore / locationMaxScore) * locationWeight * 100;\n    totalScore += breakdown.location_data;\n    maxPossibleScore += locationWeight * 100;\n\n    // Contact Data Quality (20% weight) - Enhanced for Task 4.1.1-4.1.4\n    const contactWeight = 0.2;\n    let contactScore = 0;\n    const contactMaxScore = 100;\n\n    if (truck.contact_info) {\n      // Phone number (30 points)\n      if (truck.contact_info.phone && truck.contact_info.phone.trim().length > 0) {\n        // Basic phone validation\n        const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n        const cleanPhone = truck.contact_info.phone.replaceAll(/[^\\d+]/g, '');\n        if (cleanPhone.length >= 10 && phoneRegex.test(cleanPhone)) {\n          contactScore += 30;\n        } else {\n          contactScore += 15;\n          issues.push('Phone number format needs improvement');\n        }\n      } else {\n        issues.push('Missing phone number');\n      }\n\n      // Email address (25 points)\n      if (truck.contact_info.email && truck.contact_info.email.trim().length > 0) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (emailRegex.test(truck.contact_info.email)) {\n          contactScore += 25;\n        } else {\n          contactScore += 10;\n          issues.push('Email format appears invalid');\n        }\n      } else {\n        issues.push('Missing email address');\n      }\n\n      // Website URL (25 points)\n      if (truck.contact_info.website && truck.contact_info.website.trim().length > 0) {\n        try {\n          new URL(truck.contact_info.website);\n          contactScore += 25;\n        } catch {\n          contactScore += 10;\n          issues.push('Website URL format appears invalid');\n        }\n      } else {\n        issues.push('Missing website URL');\n      }\n\n      // Social media presence bonus (20 points)\n      if (truck.social_media) {\n        const socialPlatforms = ['instagram', 'facebook', 'twitter', 'tiktok', 'yelp'];\n        const activePlatforms = socialPlatforms.filter(platform =>\n          truck.social_media?.[platform as keyof typeof truck.social_media]\n        ).length;\n        contactScore += Math.min(20, activePlatforms * 5);\n        if (activePlatforms === 0) {\n          issues.push('No social media presence found');\n        }\n      }\n    } else {\n      issues.push('Missing contact information entirely');\n    }\n\n    breakdown.contact_data = (contactScore / contactMaxScore) * contactWeight * 100;\n    totalScore += breakdown.contact_data;\n    maxPossibleScore += contactWeight * 100;\n\n    // Menu Data Quality (10% weight)\n    const menuWeight = 0.1;\n    let menuScore = 0;\n    const menuMaxScore = 100;\n\n    if (truck.menu && Array.isArray(truck.menu) && truck.menu.length > 0) {\n      const validCategories = truck.menu.filter(category =>\n        category.items && Array.isArray(category.items) && category.items.length > 0\n      );\n\n      if (validCategories.length > 0) {\n        menuScore += 50; // Base score for having menu\n\n        // Additional points for menu completeness\n        const totalItems = validCategories.reduce((sum, cat) => sum + cat.items.length, 0);\n        if (totalItems >= 10) {\n          menuScore += 30;\n        } else if (totalItems >= 5) {\n          menuScore += 20;\n        } else {\n          menuScore += 10;\n          issues.push('Menu has limited items');\n        }\n\n        // Points for item details (prices, descriptions)\n        const itemsWithPrices = validCategories.reduce((sum, cat) =>\n          sum + cat.items.filter(item => item.price && item.price > 0).length, 0\n        );\n        if (itemsWithPrices / totalItems >= 0.8) {\n          menuScore += 20;\n        } else if (itemsWithPrices > 0) {\n          menuScore += 10;\n          issues.push('Some menu items missing prices');\n        } else {\n          issues.push('Menu items missing price information');\n        }\n      } else {\n        menuScore += 20;\n        issues.push('Menu categories exist but lack items');\n      }\n    } else {\n      issues.push('Missing menu information');\n    }\n\n    breakdown.menu_data = (menuScore / menuMaxScore) * menuWeight * 100;\n    totalScore += breakdown.menu_data;\n    maxPossibleScore += menuWeight * 100;\n\n    // Operational Data Quality (5% weight) - Operating hours\n    const operationalWeight = 0.05;\n    let operationalScore = 0;\n    const operationalMaxScore = 100;\n\n    if (truck.operating_hours && typeof truck.operating_hours === 'object') {\n      const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n      const validDays = daysOfWeek.filter(day => {\n        const dayData = truck.operating_hours?.[day];\n        return dayData && typeof dayData === 'object' &&\n               ('open' in dayData || 'close' in dayData || 'closed' in dayData);\n      });\n\n      if (validDays.length >= 7) {\n        operationalScore = 100;\n      } else if (validDays.length >= 5) {\n        operationalScore = 80;\n        issues.push('Operating hours missing for some days');\n      } else if (validDays.length >= 3) {\n        operationalScore = 60;\n        issues.push('Operating hours incomplete');\n      } else if (validDays.length > 0) {\n        operationalScore = 30;\n        issues.push('Very limited operating hours information');\n      } else {\n        issues.push('No valid operating hours found');\n      }\n    } else {\n      issues.push('Missing operating hours information');\n    }\n\n    breakdown.operational_data = (operationalScore / operationalMaxScore) * operationalWeight * 100;\n    totalScore += breakdown.operational_data;\n    maxPossibleScore += operationalWeight * 100;\n\n    return {\n      score: Math.round((totalScore / maxPossibleScore) * 100) / 100, // Normalize to 0-1 scale\n      breakdown,\n      issues\n    };\n  },\n\n  async updateTruckQualityScore(truckId: string): Promise<FoodTruck> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    // Get current truck data\n    const truck = await FoodTruckService.getTruckById(truckId);\n\n    // Calculate new quality score\n    const qualityAssessment = this.calculateQualityScore(truck);\n\n    // Update truck with new score\n    const updatedTruck = await FoodTruckService.updateTruck(truckId, {\n      data_quality_score: qualityAssessment.score,\n      verification_status: qualityAssessment.score >= 0.8 ? 'verified' :\n                          qualityAssessment.score >= 0.6 ? 'pending' : 'flagged'\n    });\n\n    return updatedTruck;\n  },\n\n  async batchUpdateQualityScores(limit = 100): Promise<{ updated: number; errors: number }> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    const { trucks } = await FoodTruckService.getAllTrucks(limit, 0);\n    let updated = 0;\n    let errors = 0;\n\n    for (const truck of trucks) {\n      try {\n        await this.updateTruckQualityScore(truck.id);\n        updated++;\n      } catch (error) {\n        console.error(`Failed to update quality score for truck ${truck.id}:`, error);\n        errors++;\n      }\n    }\n\n    return { updated, errors };\n  },\n\n  getQualityThresholds() {\n    return {\n      high: 0.8,    // 80%+ = High quality\n      medium: 0.6,  // 60-79% = Medium quality\n      low: 0.6      // <60% = Low quality\n    };\n  },\n\n  categorizeQualityScore(score: number): 'high' | 'medium' | 'low' {\n    const thresholds = this.getQualityThresholds();\n    if (score >= thresholds.high) return 'high';\n    if (score >= thresholds.medium) return 'medium';\n    return 'low';\n  }\n};\n\nexport const APIUsageService = {\n  async trackUsage(serviceName: string, requests: number, tokens: number): Promise<ApiUsage> {\n    if (!supabaseAdmin) {\n      throw new Error('Admin operations require SUPABASE_SERVICE_ROLE_KEY');\n    }\n\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const { data: existing }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n      if (existing) {\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .update({\n            requests_count: (existing.requests_count || 0) + requests,\n            tokens_used: (existing.tokens_used || 0) + tokens,\n          })\n          .eq('id', existing.id)\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      } else {\n        const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabaseAdmin\n          .from('api_usage')\n          .insert([\n            {\n              service_name: serviceName,\n              usage_date: today,\n              requests_count: requests,\n              tokens_used: tokens,\n            },\n          ])\n          .select()\n          .single();\n\n        if (error) throw error;\n        return data;\n      }\n    } catch (error: unknown) {\n      console.warn('Error tracking usage:', error);\n      throw error;\n    }\n  },\n  async getTodayUsage(serviceName: string): Promise<ApiUsage | undefined> {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n\n      const { data, error }: PostgrestSingleResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .eq('service_name', serviceName)\n        .eq('usage_date', today)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      return data ?? undefined;\n    } catch (error: unknown) {\n      console.warn('Error getting today usage:', error);\n      throw error;\n    }\n  },\n\n  async getAllUsageStats(): Promise<ApiUsage[]> {\n    try {\n      const { data, error }: PostgrestResponse<ApiUsage> = await supabase\n        .from('api_usage')\n        .select('*')\n        .order('usage_date', { ascending: false })\n        .limit(30);\n\n      if (error) throw error;\n      return data || [];\n    } catch (error: unknown) {\n      console.warn('Error getting usage stats:', error);\n      throw error;\n    }\n  },\n};\n\nexport { type MenuItem, type MenuCategory, type OperatingHours, type PriceRange } from './types';\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\supabaseMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\lib\\utils\\data-quality-formatters.ts","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `dataQualityFormatters.ts` or `DataQualityFormatters.ts`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.isNaN` over `isNaN`.","line":55,"column":48,"nodeType":"Identifier","messageId":"error","endLine":55,"endColumn":53,"suggestions":[{"messageId":"suggestion","fix":{"range":[1432,1437],"text":"Number.isNaN"},"data":{"description":"isNaN","property":"isNaN"},"desc":"Replace `isNaN` with `Number.isNaN`."}]},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.isNaN` over `isNaN`.","line":70,"column":48,"nodeType":"Identifier","messageId":"error","endLine":70,"endColumn":53,"suggestions":[{"messageId":"suggestion","fix":{"range":[1918,1923],"text":"Number.isNaN"},"data":{"description":"isNaN","property":"isNaN"},"desc":"Replace `isNaN` with `Number.isNaN`."}]},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.isNaN` over `isNaN`.","line":220,"column":40,"nodeType":"Identifier","messageId":"error","endLine":220,"endColumn":45,"suggestions":[{"messageId":"suggestion","fix":{"range":[6388,6393],"text":"Number.isNaN"},"data":{"description":"isNaN","property":"isNaN"},"desc":"Replace `isNaN` with `Number.isNaN`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SOTA Data Quality Formatting Utilities\n * Provides consistent formatting and categorization for data quality metrics\n */\n\nexport interface QualityThresholds {\n  high: number;\n  medium: number;\n  low: number;\n}\n\nexport interface QualityCategory {\n  label: 'High' | 'Medium' | 'Low';\n  color: string;\n  bgColor: string;\n  textColor: string;\n}\n\n// SOTA quality thresholds based on industry standards\nexport const QUALITY_THRESHOLDS: QualityThresholds = {\n  high: 0.8,    // 80%+ = High quality\n  medium: 0.6,  // 60-79% = Medium quality\n  low: 0.6      // <60% = Low quality\n};\n\n// SOTA color scheme for accessibility and visual hierarchy\nexport const QUALITY_CATEGORIES: Record<string, QualityCategory> = {\n  high: {\n    label: 'High',\n    color: '#22c55e',\n    bgColor: 'bg-green-100',\n    textColor: 'text-green-800'\n  },\n  medium: {\n    label: 'Medium',\n    color: '#f59e0b',\n    bgColor: 'bg-yellow-100',\n    textColor: 'text-yellow-800'\n  },\n  low: {\n    label: 'Low',\n    color: '#ef4444',\n    bgColor: 'bg-red-100',\n    textColor: 'text-red-800'\n  }\n};\n\n/**\n * Formats a quality score as a percentage with proper precision\n * @param score - Quality score (0-1 range)\n * @param precision - Number of decimal places (default: 1)\n * @returns Formatted percentage string\n */\nexport function formatQualityScore(score: number | null | undefined, precision: number = 1): string {\n  if (score === null || score === undefined || isNaN(score)) {\n    return 'N/A';\n  }\n  \n  // Ensure score is in 0-1 range\n  const normalizedScore = Math.max(0, Math.min(1, score));\n  return `${(normalizedScore * 100).toFixed(precision)}%`;\n}\n\n/**\n * Categorizes a quality score into high/medium/low categories\n * @param score - Quality score (0-1 range)\n * @returns Quality category object\n */\nexport function categorizeQualityScore(score: number | null | undefined): QualityCategory {\n  if (score === null || score === undefined || isNaN(score)) {\n    return QUALITY_CATEGORIES.low;\n  }\n\n  if (score >= QUALITY_THRESHOLDS.high) {\n    return QUALITY_CATEGORIES.high;\n  } else if (score >= QUALITY_THRESHOLDS.medium) {\n    return QUALITY_CATEGORIES.medium;\n  } else {\n    return QUALITY_CATEGORIES.low;\n  }\n}\n\n/**\n * Gets the appropriate CSS classes for a quality score badge\n * @param score - Quality score (0-1 range)\n * @returns CSS class string for badge styling\n */\nexport function getQualityBadgeClasses(score: number | null | undefined): string {\n  const category = categorizeQualityScore(score);\n  return `${category.bgColor} ${category.textColor}`;\n}\n\n/**\n * Calculates quality score trend indicator\n * @param currentScore - Current quality score\n * @param previousScore - Previous quality score\n * @returns Trend object with direction and percentage change\n */\nexport function calculateQualityTrend(\n  currentScore: number | null | undefined,\n  previousScore: number | null | undefined\n): {\n  direction: 'up' | 'down' | 'stable' | 'unknown';\n  change: number;\n  changeText: string;\n} {\n  if (!currentScore || !previousScore) {\n    return {\n      direction: 'unknown',\n      change: 0,\n      changeText: 'N/A'\n    };\n  }\n\n  const change = currentScore - previousScore;\n  const changePercentage = Math.abs(change * 100);\n\n  if (Math.abs(change) < 0.01) { // Less than 1% change\n    return {\n      direction: 'stable',\n      change: 0,\n      changeText: 'No change'\n    };\n  }\n\n  return {\n    direction: change > 0 ? 'up' : 'down',\n    change: changePercentage,\n    changeText: `${change > 0 ? '+' : '-'}${changePercentage.toFixed(1)}%`\n  };\n}\n\n/**\n * Generates quality improvement suggestions based on score\n * @param score - Quality score (0-1 range)\n * @returns Array of improvement suggestions\n */\nexport function getQualityImprovementSuggestions(score: number | null | undefined): string[] {\n  if (!score || score >= QUALITY_THRESHOLDS.high) {\n    return ['Quality score is excellent! Continue maintaining data standards.'];\n  }\n\n  const suggestions: string[] = [];\n\n  if (score < QUALITY_THRESHOLDS.medium) {\n    suggestions.push(\n      'Critical: Add missing core information (name, location, contact details)',\n      'Verify and update GPS coordinates for accurate location data',\n      'Add comprehensive menu information and pricing',\n      'Update operating hours and schedule information'\n    );\n  } else {\n    suggestions.push(\n      'Add missing optional fields (website, social media, ratings)',\n      'Enhance menu descriptions and categories',\n      'Update recent photos and promotional content',\n      'Verify contact information accuracy'\n    );\n  }\n\n  return suggestions;\n}\n\n/**\n * Formats quality statistics for display\n * @param stats - Raw quality statistics from database\n * @returns Formatted statistics object\n */\nexport function formatQualityStats(stats: {\n  total_trucks: number;\n  avg_quality_score: number;\n  high_quality_count: number;\n  medium_quality_count: number;\n  low_quality_count: number;\n  verified_count: number;\n  pending_count: number;\n  flagged_count: number;\n}) {\n  return {\n    totalTrucks: stats.total_trucks,\n    averageScore: formatQualityScore(stats.avg_quality_score),\n    averageScoreRaw: stats.avg_quality_score,\n    distribution: {\n      high: {\n        count: stats.high_quality_count,\n        percentage: ((stats.high_quality_count / stats.total_trucks) * 100).toFixed(1)\n      },\n      medium: {\n        count: stats.medium_quality_count,\n        percentage: ((stats.medium_quality_count / stats.total_trucks) * 100).toFixed(1)\n      },\n      low: {\n        count: stats.low_quality_count,\n        percentage: ((stats.low_quality_count / stats.total_trucks) * 100).toFixed(1)\n      }\n    },\n    verification: {\n      verified: {\n        count: stats.verified_count,\n        percentage: ((stats.verified_count / stats.total_trucks) * 100).toFixed(1)\n      },\n      pending: {\n        count: stats.pending_count,\n        percentage: ((stats.pending_count / stats.total_trucks) * 100).toFixed(1)\n      },\n      flagged: {\n        count: stats.flagged_count,\n        percentage: ((stats.flagged_count / stats.total_trucks) * 100).toFixed(1)\n      }\n    }\n  };\n}\n\n/**\n * Validates if a quality score is within acceptable range\n * @param score - Quality score to validate\n * @returns Boolean indicating if score is valid\n */\nexport function isValidQualityScore(score: number | null | undefined): boolean {\n  return typeof score === 'number' && !isNaN(score) && score >= 0 && score <= 1;\n}\n\n/**\n * Generates accessibility-friendly description for quality score\n * @param score - Quality score (0-1 range)\n * @returns Screen reader friendly description\n */\nexport function getQualityScoreAriaLabel(score: number | null | undefined): string {\n  if (!isValidQualityScore(score)) {\n    return 'Quality score not available';\n  }\n\n  const category = categorizeQualityScore(score);\n  const percentage = formatQualityScore(score);\n  \n  return `Data quality score: ${percentage}, categorized as ${category.label.toLowerCase()} quality`;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\food-truck-finder-poc\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
